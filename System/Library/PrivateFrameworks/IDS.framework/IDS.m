void sub_1906E17D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "accounts");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_1906E180C(uint64_t a1)
{
  uint64_t result;

  getpid();
  objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String");
  result = sandbox_check();
  byte_1ECDD6648 = (_DWORD)result == 0;
  return result;
}

void sub_1906E1884(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v2, "daemonDisconnected");

}

uint64_t sub_1906E18C0(uint64_t a1)
{
  uint64_t result;

  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    return objc_msgSend(*(id *)(a1 + 32), "performSelector:withObject:", sel_daemonControllerWillConnect, 0);
  return result;
}

void sub_1906E190C(uint64_t a1)
{
  uint64_t v1;
  id v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t i;
  char v11;
  int v12;
  int v13;
  char v14;
  char v15;
  int v16;
  _BOOL4 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  _DWORD *v22;
  int v23;
  int *v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  char v29;
  void *v30;
  uint64_t v31;
  const __CFString *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  id obj;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[5];
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t buf[4];
  uint64_t v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  const __CFString *v64;
  _BYTE v65[128];
  uint64_t v66;

  v1 = a1;
  v66 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 82) = 1;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 32);
  v45 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v51, v65, 16);
  if (v45)
  {
    obj = v2;
    v42 = 0;
    v43 = 0;
    LOBYTE(v48) = 0;
    v41 = 0;
    v3 = 0;
    v4 = 0;
    v47 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v39 = v1;
    v44 = *(_QWORD *)v52;
    do
    {
      for (i = 0; i != v45; ++i)
      {
        if (*(_QWORD *)v52 != v44)
          objc_enumerationMutation(obj);
        v46 = v8;
        if ((objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0)
        {
          v9 = 1;
        }
        v11 = objc_opt_respondsToSelector();
        if ((objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0)
        {
          BYTE4(v43) = 1;
        }
        HIDWORD(v48) = v9;
        if ((objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0
          || (objc_opt_respondsToSelector() & 1) != 0)
        {
          LOBYTE(v43) = 1;
        }
        v12 = v4;
        if ((objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector() & 1) != 0)
          BYTE4(v42) = 1;
        v13 = v7;
        v14 = objc_opt_respondsToSelector();
        if ((objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector() & 1) != 0)
          v41 = 1;
        v15 = objc_opt_respondsToSelector();
        if ((objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector() & 1) != 0)
        {
          LOBYTE(v42) = 1;
          HIDWORD(v48) = 1;
        }
        BYTE4(v47) |= v11;
        LOBYTE(v48) = v14 | v48;
        v3 |= v15;
        LODWORD(v47) = objc_opt_respondsToSelector() | v47;
        v5 |= objc_opt_respondsToSelector();
        v16 = objc_opt_respondsToSelector();
        v6 |= v16 | objc_opt_respondsToSelector();
        v7 = objc_opt_respondsToSelector() | v13;
        v4 = objc_opt_respondsToSelector() | v12;
        v8 = objc_opt_respondsToSelector() | v46;
        v9 = HIDWORD(v48);
      }
      v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v65, 16);
    }
    while (v45);

    if ((v3 & 1) != 0)
    {
      v1 = v39;
      *(_DWORD *)(*(_QWORD *)(v39 + 32) + 88) = 0;
      v17 = 1;
      v18 = BYTE4(v47);
      v19 = v47;
      v20 = v41;
      v21 = v42;
      goto LABEL_38;
    }
    v1 = v39;
    v18 = BYTE4(v47);
    v19 = v47;
    v20 = v41;
    v21 = v42;
  }
  else
  {

    v43 = 0;
    v48 = 0;
    LOBYTE(v8) = 0;
    LOBYTE(v7) = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v5) = 0;
    v18 = 0;
    v19 = 0;
    LOBYTE(v4) = 0;
    v21 = 0;
    v20 = 0;
    BYTE4(v42) = 0;
  }
  v17 = objc_msgSend(*(id *)(*(_QWORD *)(v1 + 32) + 48), "count") != 0;
  *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) = 0;
LABEL_38:
  if ((v48 & 0x100000000) != 0)
  {
    v22 = (_DWORD *)MEMORY[0x1E0D35078];
    *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *MEMORY[0x1E0D35090];
    *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *v22;
  }
  if ((v43 & 0x100000000) != 0)
    *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *MEMORY[0x1E0D350B8];
  if ((v43 & 1) != 0)
    *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *MEMORY[0x1E0D350D8];
  if ((v42 & 0x100000000) == 0)
  {
    if ((v48 & 1) == 0)
      goto LABEL_50;
    v23 = *MEMORY[0x1E0D35080];
    goto LABEL_49;
  }
  v23 = *MEMORY[0x1E0D35080];
  *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *MEMORY[0x1E0D35080];
  if ((v48 & 1) != 0)
LABEL_49:
    *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= v23;
LABEL_50:
  if ((v20 & 1) == 0)
  {
    if (!v17)
      goto LABEL_56;
    v25 = *MEMORY[0x1E0D35078];
    goto LABEL_55;
  }
  v24 = (int *)MEMORY[0x1E0D35078];
  *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *MEMORY[0x1E0D35088];
  v25 = *v24;
  *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *v24;
  if (v17)
  {
LABEL_55:
    *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *MEMORY[0x1E0D35098];
    *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= v25;
  }
LABEL_56:
  if ((v21 & 1) != 0)
  {
    *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *MEMORY[0x1E0D350A0];
    if ((v19 & 1) == 0)
    {
LABEL_58:
      if ((v18 & 1) == 0)
        goto LABEL_59;
      goto LABEL_77;
    }
  }
  else if ((v19 & 1) == 0)
  {
    goto LABEL_58;
  }
  *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *MEMORY[0x1E0D350B0];
  if ((v18 & 1) == 0)
  {
LABEL_59:
    if ((v5 & 1) == 0)
      goto LABEL_60;
    goto LABEL_78;
  }
LABEL_77:
  *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *MEMORY[0x1E0D35070];
  if ((v5 & 1) == 0)
  {
LABEL_60:
    if ((v6 & 1) == 0)
      goto LABEL_61;
    goto LABEL_79;
  }
LABEL_78:
  *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *MEMORY[0x1E0D350C0];
  if ((v6 & 1) == 0)
  {
LABEL_61:
    if ((v4 & 1) == 0)
      goto LABEL_62;
    goto LABEL_80;
  }
LABEL_79:
  *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *MEMORY[0x1E0D350A8];
  if ((v4 & 1) == 0)
  {
LABEL_62:
    if ((v8 & 1) == 0)
      goto LABEL_64;
    goto LABEL_63;
  }
LABEL_80:
  *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *MEMORY[0x1E0D350C8];
  if ((v8 & 1) != 0)
LABEL_63:
    *(_DWORD *)(*(_QWORD *)(v1 + 32) + 88) |= *MEMORY[0x1E0D350D0];
LABEL_64:
  objc_msgSend(*(id *)(v1 + 32), "setWantsPseudonymUpdates:", v7 & 1);
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    v27 = *(_QWORD *)(v1 + 32);
    objc_msgSend(*(id *)(v27 + 120), "serviceName");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    _IDSBinaryStringForValue();
    v29 = v7;
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(*(id *)(*(_QWORD *)(v1 + 32) + 32), "count");
    *(_DWORD *)buf = 134219010;
    v32 = CFSTR("NO");
    v56 = v27;
    v57 = 2112;
    if ((v29 & 1) != 0)
      v32 = CFSTR("YES");
    v58 = v28;
    v59 = 2112;
    v60 = v30;
    v61 = 2048;
    v62 = v31;
    v63 = 2112;
    v64 = v32;
    _os_log_impl(&dword_1906E0000, v26, OS_LOG_TYPE_DEFAULT, "_IDSService - added delegate {self: %p, serviceName %@, listenerCaps %@, delegates: %lu, wantsPseudonymUpdates: %@}", buf, 0x34u);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(v1 + 32) + 120), "serviceName");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = *(void **)(*(_QWORD *)(v1 + 32) + 16);
  if (v34 && objc_msgSend(v34, "count"))
  {
    v35 = *(_QWORD *)(v1 + 32);
    v36 = *(void **)(v35 + 16);
    v49[0] = MEMORY[0x1E0C809B0];
    v49[1] = 3221225472;
    v49[2] = sub_19077E29C;
    v49[3] = &unk_1E2C63980;
    v49[4] = v35;
    v50 = v33;
    objc_msgSend(v36, "enumerateKeysAndObjectsUsingBlock:", v49);

  }
  else
  {
    +[IDSLogging _IDSService](IDSLogging, "_IDSService");
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906E0000, v37, OS_LOG_TYPE_DEFAULT, "_IDSService - No accounts detected, acknowledging transaction anyway.", buf, 2u);
    }

    +[_IDSXPCCheckinManager sharedInstance](_IDSXPCCheckinManager, "sharedInstance");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "noteFinishedTransactionForService:", v33);

  }
}

void sub_1906E2664(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "devices");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1906E26A0()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.IDSDaemonRequestConnectionQueue", v2);
  v1 = (void *)qword_1ECDD66A8;
  qword_1ECDD66A8 = (uint64_t)v0;

}

id sub_1906E27C4()
{
  return (id)objc_opt_self();
}

id sub_1906E27EC()
{
  return (id)objc_opt_self();
}

void sub_1906E2814(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)MEMORY[0x19400FC60]();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeObject:", *(_QWORD *)(a1 + 40));
  if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count"))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;

  }
  objc_autoreleasePoolPop(v2);
}

void sub_1906E2868(uint64_t a1)
{
  _IDSService *v2;
  uint64_t v3;
  void *v4;

  v2 = -[_IDSService initWithService:commands:manuallyAckMessages:delegateContext:]([_IDSService alloc], "initWithService:commands:manuallyAckMessages:delegateContext:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

}

void sub_1906E2A8C()
{
  NSObject *v0;

  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    sub_1907E66DC();

}

void sub_1906E2BF4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)MEMORY[0x19400FC60]();
  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "containsObject:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    v3 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
    if (!v3)
    {
      objc_msgSend(MEMORY[0x1E0CB3690], "weakObjectsHashTable");
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(void **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = v4;

      v3 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
    }
    objc_msgSend(v3, "addObject:", *(_QWORD *)(a1 + 40));
  }
  objc_autoreleasePoolPop(v2);
}

void sub_1906E2D40(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
    v7 = 134217984;
    v8 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Cleaning up daemonConnectedGroup %p", (uint8_t *)&v7, 0xCu);
  }

  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 72);
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 72);
    *(_QWORD *)(v5 + 72) = 0;

  }
}

void sub_1906E2F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E2F18(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88))
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "removeObserver:name:object:", *(_QWORD *)(a1 + 32), *MEMORY[0x1E0D365F8], *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));

    objc_msgSend(*(id *)(a1 + 32), "_localObjectCleanup");
    v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0D36A48]), "initWithTarget:connection:protocol:forceSecureCoding:offMainThread:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40), &unk_1EE1EC1E8, 1, 1);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 32);
    *(_QWORD *)(v4 + 32) = v3;

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88);
      v8 = 134217984;
      v9 = v7;
      _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "ConnectionID %lu is more recent, ignoring.", (uint8_t *)&v8, 0xCu);
    }

  }
}

void sub_1906E3894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E3998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E3BD8(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Connection complete", v3, 2u);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 171) = 1;
  if (*(_QWORD *)(a1 + 40))
    objc_msgSend(*(id *)(a1 + 32), "setupCompleteWithInfo:");
}

void sub_1906E4694(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToIgnoringCase:", *MEMORY[0x1E0D34CA0]))
  {
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "allValues", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v3);
          objc_msgSend(v2, "addObjectsFromArray:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v7++));
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v5);
    }

    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v2;
  }
  else
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "objectForKey:", *(_QWORD *)(a1 + 32));
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v9 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;
  }

  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    sub_1907E7F68();

}

void sub_1906E4828(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1907E7FD4();

  if (objc_msgSend(*(id *)(a1 + 40), "isEqualToIgnoringCase:", *MEMORY[0x1E0D34CA0]))
  {
    v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "allValues", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v14;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v14 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(v3, "addObjectsFromArray:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v8++));
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v6);
    }

    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v3;
  }
  else
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "objectForKey:", *(_QWORD *)(a1 + 40));
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v10 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;
  }

}

void sub_1906E49BC(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "objectForKey:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 40);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "count"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "count"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "objectForKey:", *(_QWORD *)(a1 + 40));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413058;
      v12 = v5;
      v13 = 2112;
      v14 = v6;
      v15 = 2112;
      v16 = v7;
      v17 = 2112;
      v18 = v8;
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Removing listener with ID: %@    services (count): %@   commands (count): %@   capabilities %@", buf, 0x2Au);

    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
    v9 = *(void **)(a1 + 32);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_1906F1FDC;
    v10[3] = &unk_1E2C60550;
    v10[4] = v9;
    objc_msgSend(v9, "_performBlock:", v10);
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      sub_1907E6934();

  }
}

void sub_1906E4BA4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  _QWORD v8[4];
  id v9;
  id v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  char v14;
  __int16 v15;

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1906E9B68;
  v8[3] = &unk_1E2C60870;
  v9 = *(id *)(a1 + 32);
  v13 = *(_DWORD *)(a1 + 72);
  v2 = *(id *)(a1 + 40);
  v14 = *(_BYTE *)(a1 + 76);
  v15 = *(_WORD *)(a1 + 77);
  v3 = *(_QWORD *)(a1 + 64);
  v10 = v2;
  v12 = v3;
  v7 = *(_OWORD *)(a1 + 48);
  v4 = (id)v7;
  v11 = v7;
  v5 = MEMORY[0x19400FE1C](v8);
  v6 = (void *)v5;
  if (*(_BYTE *)(a1 + 76))
    (*(void (**)(uint64_t))(v5 + 16))(v5);
  else
    objc_msgSend(*(id *)(a1 + 32), "_performBlock:wait:", v5, 0);

}

uint64_t sub_1906E4E84(_QWORD *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x19400FC60]();
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(id *)(*(_QWORD *)(a1[6] + 8) + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v3);
        v7 = (void *)MEMORY[0x19400FC60]();
        (*(void (**)(void))(a1[4] + 16))();
        objc_autoreleasePoolPop(v7);
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

  objc_autoreleasePoolPop(v2);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1906E5080()
{
  objc_end_catch();
  JUMPOUT(0x1906E508CLL);
}

void sub_1906E5438(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  int v15;
  id *v16;
  id *v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[5];
  id v21;
  id v22;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "isNonUIInstall");

  if (!v15)
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = sub_1906E5B20;
    v18[3] = &unk_1E2C61C50;
    v16 = (id *)v20;
    v20[0] = v13;
    v17 = &v19;
    v19 = v12;
    sub_1906E55A8(v9, v10, v11, v18);
    goto LABEL_5;
  }
  if (v13)
  {
    v20[1] = MEMORY[0x1E0C809B0];
    v20[2] = 3221225472;
    v20[3] = sub_190726CC4;
    v20[4] = &unk_1E2C61C00;
    v16 = &v21;
    v21 = v11;
    v17 = &v22;
    v22 = v13;
    im_dispatch_after_primary_queue();
LABEL_5:

  }
}

void sub_1906E55A8(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(id, void *);
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int v17;
  id v18;
  xpc_object_t v19;
  id v20;
  void (**v21)(_QWORD, _QWORD);
  xpc_object_t v22;
  NSObject *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD handler[4];
  id v28;
  _QWORD block[4];
  id v30;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (qword_1ECDD66B0 != -1)
    dispatch_once(&qword_1ECDD66B0, &unk_1E2C5F8F0);
  v11 = objc_retainAutorelease((id)*MEMORY[0x1E0D35008]);
  objc_msgSend(v11, "UTF8String");
  v12 = (void *)IMXPCCreateConnectionForServiceWithQueue();
  v13 = v11;
  v14 = v13;
  v15 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1906E180C;
  block[3] = &unk_1E2C60550;
  v30 = v13;
  if (qword_1ECDD6650 == -1)
  {
    v16 = v13;
  }
  else
  {
    dispatch_once(&qword_1ECDD6650, block);
    v16 = v30;
  }
  v17 = byte_1ECDD6648;

  if (v17)
  {
    if (v12)
    {
LABEL_7:
      v9[2](v9, v12);
      handler[0] = v15;
      handler[1] = 3221225472;
      handler[2] = sub_190726CBC;
      handler[3] = &unk_1E2C61BB0;
      v18 = v12;
      v28 = v18;
      xpc_connection_set_event_handler((xpc_connection_t)v18, handler);
      xpc_connection_resume((xpc_connection_t)v18);
      v19 = xpc_dictionary_create(0, 0, 0);
      if (v19)
      {
        IMInsertNSStringsToXPCDictionary();
        IMInsertDictionariesToXPCDictionary();
        xpc_dictionary_set_BOOL(v19, "setup-request", 1);
        v24[0] = v15;
        v24[1] = 3221225472;
        v24[2] = sub_1906E5888;
        v24[3] = &unk_1E2C61BD8;
        v20 = v18;
        v25 = v20;
        v26 = v10;
        v21 = (void (**)(_QWORD, _QWORD))MEMORY[0x19400FE1C](v24);
        v22 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)v20, v19);
        ((void (**)(_QWORD, xpc_object_t))v21)[2](v21, v22);

      }
      goto LABEL_15;
    }
  }
  else
  {
    +[IDSLogging Connection](IDSLogging, "Connection");
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      sub_1907E9874((uint64_t)v14, v23);

    if (v12)
      goto LABEL_7;
  }
  if (v10)
    (*((void (**)(id, _QWORD, _QWORD, _QWORD))v10 + 2))(v10, 0, 0, 0);
LABEL_15:

}

void sub_1906E5888(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  _BOOL4 v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _DWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (!v3)
  {
    +[IDSLogging Connection](IDSLogging, "Connection");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1907E98E8();
    goto LABEL_7;
  }
  if (MEMORY[0x1940102E4](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_dictionary_get_value(v4, "response");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)IMCreateDictionaryFromXPCObjectWithStandardAllowlist();
    if (v6)
      v10 = 1;
    else
      v10 = xpc_dictionary_get_BOOL(v4, "granted");
    +[IDSLogging Connection](IDSLogging, "Connection");
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v16[0] = 67109120;
      v16[1] = objc_msgSend(v6, "count");
      _os_log_impl(&dword_1906E0000, v11, OS_LOG_TYPE_INFO, " => Found response with %d keys", (uint8_t *)v16, 8u);
    }

    if (!v10)
    {
      +[IDSLogging Connection](IDSLogging, "Connection");
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1907E9914();

    }
    v5 = !v10;

    goto LABEL_22;
  }
  if (MEMORY[0x1940102E4](v4) != MEMORY[0x1E0C81310])
  {
LABEL_4:
    v5 = 0;
    v6 = 0;
LABEL_22:
    v8 = 1;
    goto LABEL_23;
  }
  if (v4 != (void *)MEMORY[0x1E0C81260])
  {
    if (v4 != (void *)MEMORY[0x1E0C81258])
      goto LABEL_4;
    +[IDSLogging Connection](IDSLogging, "Connection");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1907E996C();
LABEL_7:

    xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
    v8 = 0;
    v5 = 0;
    v6 = 0;
    goto LABEL_23;
  }
  +[IDSLogging Connection](IDSLogging, "Connection");
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    sub_1907E9940();

  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
  v8 = 0;
  v6 = 0;
  v5 = 1;
LABEL_23:
  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
  {
    if (v8)
      v14 = *(_QWORD *)(a1 + 32);
    else
      v14 = 0;
    (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(v13 + 16))(v13, v14, v6, v5);
  }

}

void sub_1906E5B20(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  char v18;

  v7 = a2;
  v8 = a3;
  if (v7)
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D36AB0]), "initWithConnection:protocol:alreadyConfigured:forceSecureCoding:", v7, &unk_1EE1E6A60, 1, 1);
  else
    v9 = 0;
  v10 = *(void **)(a1 + 40);
  if (v10)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = sub_1906EE3DC;
    v14[3] = &unk_1E2C61C28;
    v17 = v10;
    v15 = v9;
    v16 = v8;
    v18 = a4;
    v11 = (void *)MEMORY[0x19400FE1C](v14);
    v12 = *(id *)(a1 + 32);
    if (!v12)
    {
      v12 = MEMORY[0x1E0C80D38];
      v13 = MEMORY[0x1E0C80D38];
    }
    dispatch_sync(v12, v11);

  }
}

void sub_1906E5C64(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;
  uint64_t v9;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1906E2F18;
  v7[3] = &unk_1E2C60448;
  v5 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v8 = v3;
  v9 = v4;
  v7[4] = v5;
  v6 = v3;
  objc_msgSend(v5, "_performBlock:wait:", v7, 1);

}

void sub_1906E5E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E6188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E62E4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t *v4;
  _IDSXPCCheckInInfo *v5;
  _IDSXPCCheckInInfo *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  int8x16_t v18;
  _QWORD v19[4];
  int8x16_t v20;
  uint8_t buf[4];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (uint64_t *)(a1 + 32);
  objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32));
  v5 = (_IDSXPCCheckInInfo *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5
    || (-[_IDSXPCCheckInInfo connection](v5, "connection"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v7,
        !v7))
  {
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@-idswake"), *(_QWORD *)(a1 + 32));
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = sub_1907CF148;
    v19[3] = &unk_1E2C64D50;
    v18 = *(int8x16_t *)(a1 + 32);
    v9 = (id)v18.i64[0];
    v20 = vextq_s8(v18, v18, 8uLL);
    v10 = (void *)MEMORY[0x19400FE1C](v19);
    objc_msgSend(*(id *)(a1 + 40), "XPCAdapter");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_retainAutorelease(v8);
    v13 = objc_msgSend(v12, "UTF8String");
    objc_msgSend(v11, "createServiceConnectionWithServiceName:invalidationHandler:terminationHandler:peerEventHandler:peerQueue:", v13, 0, 0, v10, MEMORY[0x1E0C80D38]);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    +[IDSLogging _IDSService](IDSLogging, "_IDSService");
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = v15;
    if (v14)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *v4;
        *(_DWORD *)buf = 138412290;
        v22 = v17;
        _os_log_impl(&dword_1906E0000, v16, OS_LOG_TYPE_DEFAULT, "Client setup service -- checked in {service: %@}", buf, 0xCu);
      }

      objc_msgSend(v14, "resume");
      if (!v6)
        v6 = objc_alloc_init(_IDSXPCCheckInInfo);
      objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, *v4);
      -[_IDSXPCCheckInInfo setConnection:](v6, "setConnection:", v14);
    }
    else
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        sub_1907FBA04(v4, v16);

    }
  }

}

void sub_1906E67C8()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", CFSTR("__kIDSDaemonWillConnectNotification"), 0);

}

uint64_t sub_1906E68C4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void (**v11)(_QWORD);
  void *v12;
  dispatch_time_t v13;
  NSObject *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  void (**v20)(_QWORD);
  _QWORD v21[5];
  uint8_t buf[4];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 160) = 0;
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 162))
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
      *(_DWORD *)buf = 134217984;
      v23 = v4;
      _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "Resume at disconnect %p", buf, 0xCu);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 162) = 0;
    dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 80));
    v2 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(void **)(v2 + 104);
  *(_QWORD *)(v2 + 104) = 0;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 128);
  *(_QWORD *)(v6 + 128) = 0;

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 156) = 0;
  if ((objc_msgSend(*(id *)(a1 + 32), "localObjectExists") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "remoteObjectExists"))
  {
    if (!*(_BYTE *)(a1 + 40))
      +[IDSDaemonController _blockUntilSendQueueIsEmpty](IDSDaemonController, "_blockUntilSendQueueIsEmpty");
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "removeObserver:name:object:", *(_QWORD *)(a1 + 32), *MEMORY[0x1E0D36788], 0);

    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "removeObserver:name:object:", *(_QWORD *)(a1 + 32), *MEMORY[0x1E0D365F8], 0);

    objc_msgSend(*(id *)(a1 + 32), "_remoteObjectCleanup");
    objc_msgSend(*(id *)(a1 + 32), "_localObjectCleanup");
    if (!*(_BYTE *)(a1 + 40))
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 161) = 1;
    v10 = MEMORY[0x1E0C809B0];
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = sub_1906F12C4;
    v21[3] = &unk_1E2C60550;
    v21[4] = *(_QWORD *)(a1 + 32);
    v11 = (void (**)(_QWORD))MEMORY[0x19400FE1C](v21);
    dispatch_async(MEMORY[0x1E0C80D38], &unk_1E2C605F8);
    objc_msgSend(*(id *)(a1 + 32), "listener");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "_setHidingDisconnect:", 1);

    if (objc_msgSend(*(id *)(a1 + 32), "_autoReconnect"))
    {
      v13 = dispatch_time(0, 5000000000);
      v14 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 64);
      v16 = v10;
      v17 = 3221225472;
      v18 = sub_1906F1648;
      v19 = &unk_1E2C604E8;
      v20 = v11;
      dispatch_after(v13, v14, &v16);

    }
    else
    {
      v11[2](v11);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "_noteDisconnected", v16, v17, v18, v19);
}

void sub_1906E70C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_1906E7AC0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id *v4;
  __CFDictionary *v5;
  NSObject *v6;
  __CFDictionary *v7;
  const void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  _BOOL4 v18;
  void *v19;
  char v20;
  uint64_t v21;
  void *v22;
  id v23;
  __CFDictionary *v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  id WeakRetained;
  NSObject *v30;
  id v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  void *v36;
  id v37;
  _QWORD v38[4];
  __CFDictionary *v39;
  _QWORD v40[5];
  __CFDictionary *v41;
  id v42;
  uint64_t v43;
  uint8_t buf[4];
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1907E6594();

  v4 = (id *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v3 + 160) && !*(_BYTE *)(a1 + 56))
  {
    v32 = 0;
    goto LABEL_42;
  }
  *(_BYTE *)(v3 + 160) = 1;
  if (!objc_msgSend(*((id *)*v4 + 4), "isValid") || (objc_msgSend(*((id *)*v4 + 2), "isValid") & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      sub_1907E6530();

    objc_msgSend(*v4, "_noteDisconnected");
    objc_msgSend(*v4, "_localObjectCleanup");
    v7 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    v5 = v7;
    v8 = (const void *)*((_QWORD *)*v4 + 7);
    if (v8)
      CFDictionarySetValue(v7, CFSTR("listenerID"), v8);
    objc_msgSend(*v4, "services");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "allObjects");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
      CFDictionarySetValue(v5, CFSTR("services"), v10);

    objc_msgSend(*v4, "commands");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "allObjects");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
      CFDictionarySetValue(v5, CFSTR("commands"), v12);

    objc_msgSend(*((id *)*v4 + 22), "allObjects");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
      CFDictionarySetValue(v5, CFSTR("notificationServices"), v13);

    IMGetMainBundleIdentifier();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
      CFDictionarySetValue(v5, CFSTR("bundleID"), v14);

    objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "processName");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
      CFDictionarySetValue(v5, CFSTR("processName"), v16);

    objc_msgSend(MEMORY[0x1E0D36AA8], "timing");
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);

    if (v18)
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v19)
        CFDictionarySetValue(v5, CFSTR("agentRequested"), v19);

    }
    v20 = objc_msgSend(*v4, "remoteObjectExists");
    v21 = MEMORY[0x1E0C809B0];
    if ((v20 & 1) != 0)
    {
      v22 = *(void **)(a1 + 40);
      if (!v22)
        goto LABEL_34;
      v23 = *v4;
      v38[0] = MEMORY[0x1E0C809B0];
      v38[1] = 3221225472;
      v38[2] = sub_1906F1264;
      v38[3] = &unk_1E2C604E8;
      v39 = v22;
      objc_msgSend(v23, "_performBlock:", v38);
      v24 = v39;
    }
    else
    {
      v25 = ++*((_QWORD *)*v4 + 11);
      objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v45 = v25;
        _os_log_impl(&dword_1906E0000, v26, OS_LOG_TYPE_DEFAULT, "Requesting connectionID %lu usingSync YES", buf, 0xCu);
      }

      v40[0] = v21;
      v40[1] = 3221225472;
      v40[2] = sub_1906F0DF0;
      v40[3] = &unk_1E2C604C0;
      v40[4] = *(_QWORD *)(a1 + 32);
      v41 = v5;
      v43 = v25;
      v42 = *(id *)(a1 + 40);
      v27 = (void *)MEMORY[0x19400FE1C](v40);
      objc_msgSend(*(id *)(a1 + 32), "connectingQueue");
      v28 = objc_claimAutoreleasedReturnValue();
      dispatch_async(v28, v27);

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      v24 = v41;
    }

LABEL_34:
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      if (qword_1ECDD6640 != -1)
        dispatch_once(&qword_1ECDD6640, &unk_1E2C60508);
      WeakRetained = objc_loadWeakRetained((id *)*v4 + 1);
      dispatch_get_global_queue(0, 0);
      v30 = objc_claimAutoreleasedReturnValue();
      v33 = v21;
      v34 = 3221225472;
      v35 = sub_1906E18C0;
      v36 = &unk_1E2C60550;
      v31 = WeakRetained;
      v37 = v31;
      dispatch_async(v30, &v33);

      if ((objc_msgSend(*((id *)*v4 + 5), "_hidingDisconnect", v33, v34, v35, v36) & 1) == 0)
        dispatch_async(MEMORY[0x1E0C80D38], &unk_1E2C60570);

    }
    goto LABEL_40;
  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v5 = (__CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEBUG))
    sub_1907E6504();
LABEL_40:

  v32 = 1;
LABEL_42:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v32;
}

void sub_1906E80F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E81C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E822C(_QWORD *a1)
{
  void *v2;
  void *v3;
  int v4;
  dispatch_time_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  _QWORD block[5];

  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
  {
    objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "processName");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("accountsd"));

    if (v4)
    {
      v5 = dispatch_time(0, 2000000000);
      v6 = a1[6];
      v7 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) + 24);
      block[0] = MEMORY[0x1E0C809B0];
      block[2] = sub_1906F3948;
      block[3] = &unk_1E2C602E0;
      block[1] = 3221225472;
      block[4] = v6;
      dispatch_after(v5, v7, block);
    }
    else
    {
      v8 = *(_QWORD *)(a1[6] + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = 0;

    }
    v10 = a1[4];
    if (v10)
      (*(void (**)(void))(v10 + 16))();
    v11 = (id)objc_opt_self();
    v12 = *(_QWORD *)(a1[5] + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = 0;

  }
}

void sub_1906E8358(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  void *v5;
  int v6;
  NSObject *v7;
  __int16 v8;
  uint8_t v9[16];
  uint8_t buf[2];
  __int16 v11;

  if (objc_msgSend(*(id *)(a1 + 32), "isConnected"))
  {
    +[IDSLogging DaemonController](IDSLogging, "DaemonController");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v11 = 0;
      v3 = " => Not blocking, already connected";
      v4 = (uint8_t *)&v11;
LABEL_9:
      _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_INFO, v3, v4, 2u);
      goto LABEL_10;
    }
    goto LABEL_10;
  }
  objc_msgSend(MEMORY[0x1E0D36AD0], "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "systemIsShuttingDown") & 1) != 0)
  {

    goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 164);

  if (v6)
  {
LABEL_7:
    +[IDSLogging DaemonController](IDSLogging, "DaemonController");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v3 = " => Not blocking, shutting down";
      v4 = buf;
      goto LABEL_9;
    }
LABEL_10:

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    return;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "isConnected") & 1) == 0
    && (objc_msgSend(*(id *)(a1 + 32), "isConnecting") & 1) == 0)
  {
    +[IDSLogging DaemonController](IDSLogging, "DaemonController");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_INFO, " => Starting connect", v9, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "connectToDaemonWithLaunch:", 1);
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "remoteObjectExists") & 1) == 0 && !*(_BYTE *)(*(_QWORD *)(a1 + 32) + 162))
  {
    +[IDSLogging DaemonController](IDSLogging, "DaemonController");
    v2 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      goto LABEL_10;
    v8 = 0;
    v3 = " => No remote object, can't block";
    v4 = (uint8_t *)&v8;
    goto LABEL_9;
  }
}

void sub_1906E881C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E8900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E89A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1906E8A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E8D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E8DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1906E8E80(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[5];

  v1 = result;
  v2 = *(_QWORD *)(result + 32);
  if (!*(_DWORD *)(v2 + 152))
  {
    result = objc_msgSend(*(id *)(v2 + 144), "count");
    v2 = *(_QWORD *)(v1 + 32);
    if (result)
    {
      v3 = *(void **)(v2 + 144);
      v4[0] = MEMORY[0x1E0C809B0];
      v4[1] = 3221225472;
      v4[2] = sub_1906EE060;
      v4[3] = &unk_1E2C60690;
      v4[4] = v2;
      result = objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v4);
      v2 = *(_QWORD *)(v1 + 32);
    }
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24) = *(_DWORD *)(v2 + 152);
  return result;
}

void sub_1906E8F10(uint64_t a1)
{
  int v2;
  id v3;

  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "isValid"))
  {
    objc_msgSend(*(id *)(a1 + 32), "listener");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v3, "isSetupComplete");
    if (v2)
      LOBYTE(v2) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "isValid");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2;

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_1906E8F9C(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 104);
  if (v2)
  {
    v3 = v2;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "set");
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "count", v3))
  {
    objc_msgSend(v14, "setByAddingObjectsFromSet:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112));
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v7 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "count"))
    {
      v8 = *(void **)(*(_QWORD *)(a1 + 32) + 96);
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = sub_1906EE408;
      v15[3] = &unk_1E2C60690;
      v16 = v7;
      objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v15);

    }
    v9 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v9 + 112))
    {
      objc_msgSend(v7, "unionSet:");
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(void **)(v10 + 112);
      *(_QWORD *)(v10 + 112) = 0;

      v9 = *(_QWORD *)(a1 + 32);
    }
    objc_storeStrong((id *)(v9 + 112), v7);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v7;

  }
}

void sub_1906E90F4(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 128);
  if (v2)
  {
    v3 = v2;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "set");
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "count", v3))
  {
    objc_msgSend(v14, "setByAddingObjectsFromSet:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136));
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v7 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "count"))
    {
      v8 = *(void **)(*(_QWORD *)(a1 + 32) + 120);
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = sub_1906EE378;
      v15[3] = &unk_1E2C60690;
      v16 = v7;
      objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v15);

    }
    v9 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v9 + 136))
    {
      objc_msgSend(v7, "unionSet:");
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(void **)(v10 + 136);
      *(_QWORD *)(v10 + 136) = 0;

      v9 = *(_QWORD *)(a1 + 32);
    }
    objc_storeStrong((id *)(v9 + 136), v7);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v7;

  }
}

void sub_1906E924C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "capabilities");
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v3 + 156) != v2)
  {
    *(_DWORD *)(v3 + 156) = v2;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    +[IDSLogging DaemonController](IDSLogging, "DaemonController");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_DWORD *)(a1 + 48);
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 156);
      v7[0] = 67109376;
      v7[1] = v5;
      v8 = 1024;
      v9 = v6;
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_INFO, "Updating capabilities: %d  (Previous: %d)", (uint8_t *)v7, 0xEu);
    }

  }
}

void sub_1906E9338(uint64_t a1)
{
  void *v2;
  NSObject *v3;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 104);
  if (!v2 || (objc_msgSend(v2, "isEqualToSet:", *(_QWORD *)(a1 + 40)) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      sub_1907E678C();

    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 104), *(id *)(a1 + 40));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_1906E93CC(uint64_t a1)
{
  void *v2;
  _BOOL4 v3;
  int v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 128);
  if (v2)
  {
    v3 = 0;
  }
  else
  {
    v5 = *(void **)(a1 + 40);
    if (!v5)
    {
      v3 = 0;
      goto LABEL_9;
    }
    v3 = objc_msgSend(v5, "count") != 0;
    v2 = *(void **)(*(_QWORD *)(a1 + 32) + 128);
    if (!v2)
      goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = objc_msgSend(v2, "isEqualToSet:") ^ 1;
    goto LABEL_10;
  }
LABEL_9:
  v4 = 0;
LABEL_10:
  if (v4 | v3)
  {
    +[IDSLogging DaemonController](IDSLogging, "DaemonController");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128);
      v9 = 138412546;
      v10 = v7;
      v11 = 2112;
      v12 = v8;
      _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_INFO, "Set commands: %@  (Previous: %@)", (uint8_t *)&v9, 0x16u);
    }

    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 128), *(id *)(a1 + 40));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_1906E9504(uint64_t a1)
{
  uint64_t v2;
  char v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 162))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  else if (objc_msgSend(*(id *)(v2 + 32), "isValid"))
  {
    objc_msgSend(*(id *)(a1 + 32), "listener");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v4, "isSetupComplete") & 1) != 0)
      v3 = 0;
    else
      v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "isValid");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v3;

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

uint64_t sub_1906E95AC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 16) != 0;
  return result;
}

void sub_1906E9654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E975C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906E9774(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (void *)MEMORY[0x19400FC60]();
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "copy");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  objc_autoreleasePoolPop(v2);
}

void sub_1906E97BC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32))
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      sub_1907E6A74();

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "setTarget:", 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "invalidate");
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;

  }
}

void sub_1906E9840(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      sub_1907E6AA0();

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "invalidate");
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0;

  }
}

void sub_1906E98B4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  id v9;
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 136);
  *(_QWORD *)(v4 + 136) = 0;

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 152) = 0;
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "count"))
  {
    objc_msgSend(*(id *)(a1 + 32), "_setAutoReconnect:", 1);
    v6 = *(void **)(a1 + 32);
    objc_msgSend(v6, "services");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "commands");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "connectToDaemonWithLaunch:services:commands:capabilities:", 1, v9, v7, objc_msgSend(*(id *)(a1 + 32), "capabilities"));

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "Disconnecting from daemon - no listeners", buf, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "_setAutoReconnect:", 0);
    objc_msgSend(*(id *)(a1 + 32), "disconnectFromDaemon");
  }
}

void sub_1906E99E4(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "listener");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_noteDisconnected");

}

void sub_1906E9A74(_QWORD *a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1[4] + 96), "objectForKey:", a1[5]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = v2 != 0;

}

void sub_1906E9B08(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 162))
  {
    v2 = *(NSObject **)(v1 + 80);
    if (v2)
      dispatch_sync(v2, &unk_1E2C605B8);
    objc_msgSend(MEMORY[0x1E0D36AB8], "defaultBroadcaster");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "blockUntilSendQueueIsEmpty");

  }
}

void sub_1906E9B68(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  __int128 v10;
  _QWORD v11[4];
  __int128 v12;
  uint64_t v13;

  if (objc_msgSend(*(id *)(a1 + 32), "connectToDaemon"))
  {
    objc_msgSend(*(id *)(a1 + 32), "remoteObject");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v3)
    {
      if ((char *)objc_msgSend(*(id *)(a1 + 40), "selector") == sel_sendMessageWithSendParameters_)
        v3 = v3;
      else
        v3 = 0;
    }
    if (*(_BYTE *)(a1 + 76))
    {
      v4 = objc_alloc_init(MEMORY[0x1E0D36A60]);
      objc_msgSend(v4, "setSync:", 1);
    }
    else if (*(_BYTE *)(a1 + 77))
    {
      v4 = objc_alloc_init(MEMORY[0x1E0D36A60]);
      objc_msgSend(v4, "setNeedReply:", 1);
    }
    else if (*(_BYTE *)(a1 + 78))
    {
      v4 = objc_alloc_init(MEMORY[0x1E0D36A60]);
      objc_msgSend(v4, "setShouldBoost:", 1);
    }
    else
    {
      v4 = 0;
    }
    objc_msgSend(MEMORY[0x1E0D36AB8], "defaultBroadcaster");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = sub_1906E822C;
    v11[3] = &unk_1E2C60848;
    v13 = *(_QWORD *)(a1 + 64);
    v10 = *(_OWORD *)(a1 + 48);
    v8 = (id)v10;
    v12 = v10;
    objc_msgSend(v7, "broadcastProxyForTarget:messageContext:protocol:priority:completion:", v2, v4, &unk_1EE1E6A60, v3, v11);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
      objc_msgSend(*(id *)(a1 + 40), "invokeWithTarget:", v9);

  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = 0;

  }
}

void sub_1906E9D24(uint64_t a1)
{
  id v2;
  dispatch_block_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9;
  id v10;
  id v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  char v15;
  __int16 v16;
  _QWORD v17[5];
  id v18;
  _QWORD v19[5];
  id v20;

  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x3032000000;
  v19[3] = sub_1906EE194;
  v19[4] = sub_1906EE09C;
  v20 = (id)0xAAAAAAAAAAAAAAAALL;
  v20 = (id)os_transaction_create();
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3032000000;
  v17[3] = sub_1906EE194;
  v17[4] = sub_1906EE09C;
  v18 = (id)0xAAAAAAAAAAAAAAAALL;
  v18 = *(id *)(a1 + 32);
  v5 = MEMORY[0x1E0C809B0];
  v6 = 3221225472;
  v7 = sub_1906E4BA4;
  v8 = &unk_1E2C60870;
  v9 = *(id *)(a1 + 40);
  v14 = *(_DWORD *)(a1 + 64);
  v2 = *(id *)(a1 + 48);
  v15 = *(_BYTE *)(a1 + 68);
  v16 = *(_WORD *)(a1 + 69);
  v10 = v2;
  v12 = v17;
  v13 = v19;
  v11 = *(id *)(a1 + 56);
  v3 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &v5);
  if (!_os_feature_enabled_impl())
  {
    if (!objc_msgSend(*(id *)(a1 + 40), "connectToDaemon", v5, v6, v7, v8, v9, v10))
      goto LABEL_9;
LABEL_8:
    objc_msgSend(*(id *)(a1 + 48), "retainArguments");
    dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 32), v3);
    goto LABEL_9;
  }
  v4 = *(void **)(a1 + 40);
  if (!*(_BYTE *)(a1 + 68))
  {
    if (!objc_msgSend(v4, "connectToDaemon", v5, v6, v7, v8, v9, v10))
      goto LABEL_9;
    goto LABEL_8;
  }
  if (objc_msgSend(v4, "connectToDaemon", v5, v6, v7, v8, v9, v10))
  {
    objc_msgSend(*(id *)(a1 + 40), "blockUntilConnected");
    objc_msgSend(*(id *)(a1 + 48), "retainArguments");
    dispatch_sync(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 32), v3);
  }
LABEL_9:

  _Block_object_dispose(v17, 8);
  _Block_object_dispose(v19, 8);

}

void sub_1906E9F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1906E9F54(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id *v3;
  id v4;
  unint64_t v5;
  NSObject *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t k;
  uint64_t v33;
  id v34;
  void *v35;
  NSObject *v36;
  id v37;
  void *v38;
  NSObject *v39;
  void *m;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t n;
  uint64_t v49;
  id v50;
  void *v51;
  NSObject *v52;
  uint64_t v53;
  id v54;
  void *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ii;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t jj;
  uint64_t v73;
  id v74;
  void *v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  NSObject *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t kk;
  uint64_t v89;
  void *v90;
  void *v91;
  id v92;
  id v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  NSObject *v118;
  id v119;
  uint64_t v120;
  void *v121;
  id v122;
  uint64_t v123;
  void *v124;
  void *v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t mm;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t nn;
  NSObject *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  NSObject *v145;
  id v146;
  void *v147;
  uint64_t v148;
  void *v149;
  uint64_t v151;
  NSObject *v152;
  uint64_t v153;
  id v154;
  void *v155;
  id obj;
  id obja;
  id objb;
  NSObject *objc;
  id objd;
  id obje;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _QWORD v170[5];
  id v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _QWORD v176[5];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  _QWORD v181[5];
  id v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  _QWORD v187[6];
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  _QWORD v196[5];
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  _QWORD v201[4];
  id v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint8_t buf[4];
  uint64_t v213;
  __int16 v214;
  uint64_t v215;
  __int16 v216;
  uint64_t v217;
  _BYTE v218[128];
  _BYTE v219[128];
  _BYTE v220[128];
  _BYTE v221[128];
  _BYTE v222[128];
  _BYTE v223[128];
  _BYTE v224[128];
  _BYTE v225[128];
  _BYTE v226[128];
  _BYTE v227[128];
  uint64_t v228;

  v1 = a1;
  v228 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("serviceInfo"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (id *)(v1 + 40);
  v4 = *(id *)(*(_QWORD *)(v1 + 40) + 40);
  v5 = 0x1E0D36000uLL;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    sub_1907E8468();

  v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v8 = (void *)*((_QWORD *)*v3 + 5);
  *((_QWORD *)*v3 + 5) = v7;

  v9 = objc_msgSend(v2, "count");
  v10 = MEMORY[0x1E0C809B0];
  v151 = v1;
  if (v9)
  {
    v154 = v4;
    v210 = 0u;
    v211 = 0u;
    v208 = 0u;
    v209 = 0u;
    objc_msgSend(v2, "allKeys");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v208, v227, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v209;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v209 != v13)
            objc_enumerationMutation(obj);
          v15 = *(_QWORD *)(*((_QWORD *)&v208 + 1) + 8 * i);
          objc_msgSend(v2, "objectForKey:", v15);
          v16 = v2;
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = (void *)objc_msgSend(v17, "mutableCopy");

          v2 = v16;
          objc_msgSend(*((id *)*v3 + 5), "setObject:forKey:", v18, v15);

        }
        v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v208, v227, 16);
      }
      while (v12);
    }

    v206 = 0u;
    v207 = 0u;
    v204 = 0u;
    v205 = 0u;
    objc_msgSend(*((id *)*v3 + 5), "allKeys");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v204, v226, 16);
    if (!v20)
    {
      v1 = v151;
      v5 = 0x1E0D36000uLL;
      goto LABEL_30;
    }
    v21 = v20;
    obja = v2;
    v22 = *(_QWORD *)v205;
    do
    {
      for (j = 0; j != v21; ++j)
      {
        if (*(_QWORD *)v205 != v22)
          objc_enumerationMutation(v19);
        v24 = *(_QWORD *)(*((_QWORD *)&v204 + 1) + 8 * j);
        objc_msgSend(*((id *)*v3 + 5), "objectForKey:", v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = *v3;
        v201[0] = v10;
        v201[1] = 3221225472;
        v201[2] = sub_19070E41C;
        v201[3] = &unk_1E2C61220;
        v202 = v25;
        v203 = v24;
        v27 = v25;
        objc_msgSend(v26, "_callHandlersWithBlockOnIvarQueue:", v201);

      }
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v204, v226, 16);
    }
    while (v21);
    v1 = v151;
LABEL_28:
    v5 = 0x1E0D36000;
    v2 = obja;
LABEL_30:
    v4 = v154;
    goto LABEL_31;
  }
  objc_msgSend(*((id *)*v3 + 5), "removeAllObjects");
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v28 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1906E0000, v28, OS_LOG_TYPE_DEFAULT, "Services all disappeared, removing all accounts", buf, 2u);
  }

  v199 = 0u;
  v200 = 0u;
  v197 = 0u;
  v198 = 0u;
  objc_msgSend(v4, "allKeys");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v197, v225, 16);
  if (v29)
  {
    v30 = v29;
    v154 = v4;
    obja = v2;
    v31 = *(_QWORD *)v198;
    do
    {
      for (k = 0; k != v30; ++k)
      {
        if (*(_QWORD *)v198 != v31)
          objc_enumerationMutation(v19);
        v33 = *(_QWORD *)(*((_QWORD *)&v197 + 1) + 8 * k);
        v34 = *v3;
        v196[0] = v10;
        v196[1] = 3221225472;
        v196[2] = sub_19070E468;
        v196[3] = &unk_1E2C611F8;
        v196[4] = v33;
        objc_msgSend(v34, "_callHandlersWithBlockOnIvarQueue:", v196);
      }
      v30 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v197, v225, 16);
    }
    while (v30);
    goto LABEL_28;
  }
LABEL_31:

  objc_msgSend(*(id *)(v1 + 32), "objectForKey:", CFSTR("enabledAccountsInfo"));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(v5 + 2728), "registration");
  v36 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    sub_1907E8408();

  v37 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v38 = (void *)*((_QWORD *)*v3 + 6);
  *((_QWORD *)*v3 + 6) = v37;

  if (objc_msgSend(v35, "count"))
  {
    v194 = 0u;
    v195 = 0u;
    v192 = 0u;
    v193 = 0u;
    objc_msgSend(v35, "allKeys");
    v39 = objc_claimAutoreleasedReturnValue();
    objb = (id)-[NSObject countByEnumeratingWithState:objects:count:](v39, "countByEnumeratingWithState:objects:count:", &v192, v224, 16);
    if (objb)
    {
      v153 = *(_QWORD *)v193;
      v155 = v35;
      v152 = v39;
      do
      {
        for (m = 0; m != objb; m = (char *)m + 1)
        {
          if (*(_QWORD *)v193 != v153)
            objc_enumerationMutation(v152);
          v41 = *(_QWORD *)(*((_QWORD *)&v192 + 1) + 8 * (_QWORD)m);
          objc_msgSend(v35, "objectForKey:", v41);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v43 = (void *)objc_msgSend(v42, "mutableCopy");

          objc_msgSend(*((id *)*v3 + 6), "setObject:forKey:", v43, v41);
          v190 = 0u;
          v191 = 0u;
          v188 = 0u;
          v189 = 0u;
          v44 = v43;
          v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v188, v223, 16);
          if (v45)
          {
            v46 = v45;
            v47 = *(_QWORD *)v189;
            do
            {
              for (n = 0; n != v46; ++n)
              {
                if (*(_QWORD *)v189 != v47)
                  objc_enumerationMutation(v44);
                v49 = *(_QWORD *)(*((_QWORD *)&v188 + 1) + 8 * n);
                v50 = *v3;
                v187[0] = v10;
                v187[1] = 3221225472;
                v187[2] = sub_19070E4B8;
                v187[3] = &unk_1E2C61220;
                v187[4] = v49;
                v187[5] = v41;
                objc_msgSend(v50, "_callHandlersWithBlockOnIvarQueue:", v187);
              }
              v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v188, v223, 16);
            }
            while (v46);
          }

          v35 = v155;
        }
        v39 = v152;
        objb = (id)-[NSObject countByEnumeratingWithState:objects:count:](v152, "countByEnumeratingWithState:objects:count:", &v192, v224, 16);
      }
      while (objb);
      v1 = v151;
      v5 = 0x1E0D36000;
    }
  }
  else
  {
    objc_msgSend(*((id *)*v3 + 6), "removeAllObjects");
    objc_msgSend(*(id *)(v5 + 2728), "registration");
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906E0000, v39, OS_LOG_TYPE_DEFAULT, "Enabled accounts all disappeared, removing all enabled accounts", buf, 2u);
    }
  }

  objc_msgSend(*(id *)(v1 + 32), "objectForKey:", CFSTR("dependentDevices"));
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(v5 + 2728), "registration");
  v52 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    v53 = objc_msgSend(v51, "count");
    *(_DWORD *)buf = 134217984;
    v213 = v53;
    _os_log_impl(&dword_1906E0000, v52, OS_LOG_TYPE_DEFAULT, "Deferred setup on ivar queue, got %lu dependent devices", buf, 0xCu);
  }

  v54 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v55 = (void *)*((_QWORD *)*v3 + 7);
  *((_QWORD *)*v3 + 7) = v54;

  if (objc_msgSend(v51, "count"))
  {
    v185 = 0u;
    v186 = 0u;
    v183 = 0u;
    v184 = 0u;
    objc_msgSend(v51, "allKeys");
    v56 = objc_claimAutoreleasedReturnValue();
    v57 = -[NSObject countByEnumeratingWithState:objects:count:](v56, "countByEnumeratingWithState:objects:count:", &v183, v222, 16);
    if (v57)
    {
      v58 = v57;
      v59 = *(_QWORD *)v184;
      objc = v56;
      do
      {
        for (ii = 0; ii != v58; ++ii)
        {
          if (*(_QWORD *)v184 != v59)
            objc_enumerationMutation(objc);
          v61 = *(_QWORD *)(*((_QWORD *)&v183 + 1) + 8 * ii);
          objc_msgSend(v51, "objectForKey:", v61);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          v63 = v51;
          v64 = (void *)objc_msgSend(v62, "mutableCopy");

          objc_msgSend(*((id *)*v3 + 7), "setObject:forKey:", v64, v61);
          v65 = *v3;
          v181[0] = v10;
          v181[1] = 3221225472;
          v181[2] = sub_19070E5A0;
          v181[3] = &unk_1E2C61220;
          v181[4] = v61;
          v182 = v64;
          v66 = v64;
          v51 = v63;
          v67 = v66;
          objc_msgSend(v65, "_callHandlersWithBlockOnIvarQueue:", v181);

        }
        v56 = objc;
        v58 = -[NSObject countByEnumeratingWithState:objects:count:](objc, "countByEnumeratingWithState:objects:count:", &v183, v222, 16);
      }
      while (v58);
      v1 = v151;
      v5 = 0x1E0D36000;
    }
  }
  else
  {
    objd = v51;
    v179 = 0u;
    v180 = 0u;
    v177 = 0u;
    v178 = 0u;
    objc_msgSend(*((id *)*v3 + 7), "allKeys");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = objc_msgSend(v68, "countByEnumeratingWithState:objects:count:", &v177, v221, 16);
    if (v69)
    {
      v70 = v69;
      v71 = *(_QWORD *)v178;
      do
      {
        for (jj = 0; jj != v70; ++jj)
        {
          if (*(_QWORD *)v178 != v71)
            objc_enumerationMutation(v68);
          v73 = *(_QWORD *)(*((_QWORD *)&v177 + 1) + 8 * jj);
          v74 = *v3;
          v176[0] = v10;
          v176[1] = 3221225472;
          v176[2] = sub_19070E5EC;
          v176[3] = &unk_1E2C611F8;
          v176[4] = v73;
          objc_msgSend(v74, "_callHandlersWithBlockOnIvarQueue:", v176);
        }
        v70 = objc_msgSend(v68, "countByEnumeratingWithState:objects:count:", &v177, v221, 16);
      }
      while (v70);
    }

    objc_msgSend(*((id *)*v3 + 7), "removeAllObjects");
    v5 = 0x1E0D36000uLL;
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v56 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906E0000, v56, OS_LOG_TYPE_DEFAULT, "Dependent devices all disappeared, removing all dependent devices", buf, 2u);
    }
    v51 = objd;
  }

  objc_msgSend(*(id *)(v1 + 32), "objectForKey:", CFSTR("linkedDevices"));
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(v5 + 2728), "registration");
  v76 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
  {
    v77 = objc_msgSend(v75, "count");
    *(_DWORD *)buf = 134217984;
    v213 = v77;
    _os_log_impl(&dword_1906E0000, v76, OS_LOG_TYPE_DEFAULT, "Deferred setup on ivar queue, got %lu linked devices", buf, 0xCu);
  }

  v78 = objc_msgSend(v75, "mutableCopy");
  v79 = *(_QWORD *)(v1 + 40);
  v80 = *(void **)(v79 + 64);
  *(_QWORD *)(v79 + 64) = v78;

  objc_msgSend(*(id *)(v1 + 32), "objectForKey:", CFSTR("familyInfo"));
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(v5 + 2728), "registration");
  v82 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1906E0000, v82, OS_LOG_TYPE_DEFAULT, "Dealing with family members", buf, 2u);
  }

  v83 = objc_msgSend(v81, "mutableCopy");
  v84 = (void *)*((_QWORD *)*v3 + 9);
  *((_QWORD *)*v3 + 9) = v83;

  v174 = 0u;
  v175 = 0u;
  v172 = 0u;
  v173 = 0u;
  objc_msgSend(*((id *)*v3 + 9), "allKeys");
  obje = (id)objc_claimAutoreleasedReturnValue();
  v85 = objc_msgSend(obje, "countByEnumeratingWithState:objects:count:", &v172, v220, 16);
  if (v85)
  {
    v86 = v85;
    v87 = *(_QWORD *)v173;
    do
    {
      for (kk = 0; kk != v86; ++kk)
      {
        if (*(_QWORD *)v173 != v87)
          objc_enumerationMutation(obje);
        v89 = *(_QWORD *)(*((_QWORD *)&v172 + 1) + 8 * kk);
        objc_msgSend(*((id *)*v3 + 9), "objectForKey:", v89);
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        v91 = (void *)objc_msgSend(v90, "mutableCopy");

        v92 = *v3;
        v170[0] = v10;
        v170[1] = 3221225472;
        v170[2] = sub_19070E63C;
        v170[3] = &unk_1E2C61220;
        v170[4] = v89;
        v171 = v91;
        v93 = v91;
        objc_msgSend(v92, "_callHandlersWithBlock:", v170);

      }
      v86 = objc_msgSend(obje, "countByEnumeratingWithState:objects:count:", &v172, v220, 16);
    }
    while (v86);
  }

  objc_msgSend(*(id *)(v151 + 32), "objectForKey:", CFSTR("familyDevices"));
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  v95 = objc_msgSend(v94, "mutableCopy");
  v96 = *(_QWORD *)(v151 + 40);
  v97 = *(void **)(v96 + 80);
  *(_QWORD *)(v96 + 80) = v95;

  objc_msgSend(*(id *)(v151 + 32), "objectForKey:", CFSTR("pendingInvitationMap"));
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  v99 = objc_msgSend(v98, "mutableCopy");
  v100 = *(_QWORD *)(v151 + 40);
  v101 = *(void **)(v100 + 88);
  *(_QWORD *)(v100 + 88) = v99;

  objc_msgSend(*(id *)(v151 + 32), "objectForKey:", CFSTR("receivedInvitationMap"));
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  v103 = objc_msgSend(v102, "mutableCopy");
  v104 = *(_QWORD *)(v151 + 40);
  v105 = *(void **)(v104 + 96);
  *(_QWORD *)(v104 + 96) = v103;

  objc_msgSend(*(id *)(v151 + 32), "objectForKey:", CFSTR("maxMessageSizes"));
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  v107 = objc_msgSend(v106, "mutableCopy");
  v108 = *(_QWORD *)(v151 + 40);
  v109 = *(void **)(v108 + 104);
  *(_QWORD *)(v108 + 104) = v107;

  objc_msgSend(*(id *)(v151 + 32), "objectForKey:", CFSTR("restrictionReasons"));
  v110 = (void *)objc_claimAutoreleasedReturnValue();
  v111 = objc_msgSend(v110, "mutableCopy");
  v112 = *(_QWORD *)(v151 + 40);
  v113 = *(void **)(v112 + 112);
  *(_QWORD *)(v112 + 112) = v111;

  objc_msgSend(*(id *)(v151 + 32), "objectForKey:", CFSTR("deviceIdentifier"));
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  v115 = objc_msgSend(v114, "copy");
  v116 = *(_QWORD *)(v151 + 40);
  v117 = *(void **)(v116 + 144);
  *(_QWORD *)(v116 + 144) = v115;

  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v118 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
    sub_1907E83A0();

  v119 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v120 = *(_QWORD *)(v151 + 40);
  v121 = *(void **)(v120 + 120);
  *(_QWORD *)(v120 + 120) = v119;

  v122 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v123 = *(_QWORD *)(v151 + 40);
  v124 = *(void **)(v123 + 128);
  *(_QWORD *)(v123 + 128) = v122;

  objc_msgSend(*(id *)(v151 + 32), "objectForKey:", CFSTR("activeDeviceUniqueID"));
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v125, "length"))
  {
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v126 = *((id *)*v3 + 7);
    v127 = objc_msgSend(v126, "countByEnumeratingWithState:objects:count:", &v166, v219, 16);
    if (v127)
    {
      v128 = v127;
      v129 = *(_QWORD *)v167;
      do
      {
        for (mm = 0; mm != v128; ++mm)
        {
          if (*(_QWORD *)v167 != v129)
            objc_enumerationMutation(v126);
          objc_msgSend(*((id *)*v3 + 15), "setObject:forKey:", v125, *(_QWORD *)(*((_QWORD *)&v166 + 1) + 8 * mm));
        }
        v128 = objc_msgSend(v126, "countByEnumeratingWithState:objects:count:", &v166, v219, 16);
      }
      while (v128);
    }

    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    v131 = *((id *)*v3 + 8);
    v132 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v162, v218, 16);
    if (v132)
    {
      v133 = v132;
      v134 = *(_QWORD *)v163;
      do
      {
        for (nn = 0; nn != v133; ++nn)
        {
          if (*(_QWORD *)v163 != v134)
            objc_enumerationMutation(v131);
          objc_msgSend(*((id *)*v3 + 16), "setObject:forKey:", v125, *(_QWORD *)(*((_QWORD *)&v162 + 1) + 8 * nn));
        }
        v133 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v162, v218, 16);
      }
      while (v133);
    }

    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v136 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
    {
      v138 = *((_QWORD *)*v3 + 15);
      v137 = *((_QWORD *)*v3 + 16);
      *(_DWORD *)buf = 138412802;
      v213 = (uint64_t)v125;
      v214 = 2112;
      v215 = v138;
      v216 = 2112;
      v217 = v137;
      _os_log_impl(&dword_1906E0000, v136, OS_LOG_TYPE_DEFAULT, "Active device uniqueID from daemon: %@ account map %@ service map %@", buf, 0x20u);
    }

  }
  objc_msgSend(*(id *)(v151 + 32), "objectForKey:", CFSTR("privateLoggingHash"));
  v139 = objc_claimAutoreleasedReturnValue();
  v140 = *(_QWORD *)(v151 + 40);
  v141 = *(void **)(v140 + 152);
  *(_QWORD *)(v140 + 152) = v139;

  objc_msgSend(*(id *)(v151 + 32), "objectForKey:", CFSTR("maxIMLSize"));
  v142 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(v151 + 40) + 160) = objc_msgSend(v142, "integerValue");

  if (_IDSSupportsDirectMessaging())
  {
    objc_msgSend(*(id *)(v151 + 32), "objectForKey:", CFSTR("peerIDForDirectMsg"));
    v143 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(v151 + 32), "objectForKey:", CFSTR("directMsgAllowedForServices"));
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v145 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
      sub_1907E8340();

    v146 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v146, "setObject:forKeyedSubscript:", v143, CFSTR("peerIDForDirectMsg"));
    objc_msgSend(v146, "setObject:forKeyedSubscript:", v144, CFSTR("directMsgAllowedForServices"));
    objc_msgSend(*(id *)(v151 + 32), "objectForKey:", CFSTR("pidForIDSD"));
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v146, "setObject:forKeyedSubscript:", v147, CFSTR("pidForIDSD"));

    v148 = *(_QWORD *)(v151 + 40);
    v149 = *(void **)(v148 + 136);
    *(_QWORD *)(v148 + 136) = v146;

  }
  *((_BYTE *)*v3 + 170) = 1;
  return objc_msgSend(*v3, "__postSetupComplete");
}

uint64_t sub_1906EAF6C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 32) != 0;
  return result;
}

void sub_1906EAF88(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_1906EB0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_1906EC84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906ECA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906ECAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1906ECBE4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint8_t v5[16];

  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Connection complete, notifying", v5, 2u);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 169) = 1;
  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_noteSetupComplete");

  return objc_msgSend(*(id *)(a1 + 32), "_callHandlersWithBlockOnIvarQueue:", &unk_1E2C61380);
}

void sub_1906ECD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906ECDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906ED034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906ED1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906ED4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1906ED514(uint64_t *a1)
{
  void **p_cache;
  id *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  _IDSAccountController *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void **v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  void *v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  p_cache = &OBJC_METACLASS___IDSAccount.cache;
  v3 = (id *)(a1 + 4);
  objc_msgSend((id)qword_1ECDD6698, "objectForKey:", a1[4]);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(a1[6] + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40))
  {
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      sub_1907EA4EC((uint64_t)(a1 + 6), a1 + 4, v7);

  }
  if (!objc_msgSend(*v3, "length"))
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "warning");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1907EA4AC(v8);

    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24))
  {
    v9 = -[_IDSAccountController initWithService:delegateContext:]([_IDSAccountController alloc], "initWithService:delegateContext:", a1[4], a1[5]);
    v10 = a1[5];
    v11 = *(void **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v9;

    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = a1[5];
      *(_DWORD *)buf = 138412290;
      v33 = v13;
      _os_log_impl(&dword_1906E0000, v12, OS_LOG_TYPE_INFO, "Couldn't find existing IDSAccountController adding new one %@", buf, 0xCu);
    }

    v14 = (void *)qword_1ECDD6698;
    if (!qword_1ECDD6698)
    {
      objc_msgSend(MEMORY[0x1E0CB3748], "strongToWeakObjectsMapTable");
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = (void *)qword_1ECDD6698;
      qword_1ECDD6698 = v15;

      v14 = (void *)qword_1ECDD6698;
    }
    objc_msgSend(v14, "setObject:forKey:", a1[5], a1[4]);
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v17 = (id)qword_1ECDD6698;
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
    if (v18)
    {
      v20 = v18;
      v21 = *(_QWORD *)v29;
      *(_QWORD *)&v19 = 138412546;
      v27 = v19;
      do
      {
        v22 = 0;
        do
        {
          if (*(_QWORD *)v29 != v21)
            objc_enumerationMutation(v17);
          v23 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * v22);
          +[IDSLogging IDSAccountController](IDSLogging, "IDSAccountController", v27, (_QWORD)v28);
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(p_cache[211], "objectForKey:", v23);
            v25 = p_cache;
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v27;
            v33 = v23;
            v34 = 2048;
            v35 = v26;
            _os_log_impl(&dword_1906E0000, v24, OS_LOG_TYPE_INFO, "    %@ -> %p", buf, 0x16u);

            p_cache = v25;
          }

          ++v22;
        }
        while (v20 != v22);
        v20 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
      }
      while (v20);
    }

  }
}

void sub_1906ED828(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  int v11;
  _QWORD *v12;
  char v13;
  id v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v3 = v2;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "set");
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  v4 = v3;
  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = v5;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E60], "set");
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  v7 = v6;
  if (objc_msgSend(*(id *)(a1 + 48), "length"))
  {
    v8 = *MEMORY[0x1E0D34CA0];
    if ((objc_msgSend(v4, "containsObject:", *MEMORY[0x1E0D34CA0]) & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", v8);
      v9 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v9 = v4;
    }
    v10 = v9;
    v11 = objc_msgSend(*(id *)(a1 + 56), "hasListenerForID:", *(_QWORD *)(a1 + 48));
    v12 = *(_QWORD **)(a1 + 56);
    if (v11)
    {
      v13 = objc_msgSend(v12, "setServices:forListenerID:", v10, *(_QWORD *)(a1 + 48));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v13 & objc_msgSend(*(id *)(a1 + 56), "setCommands:forListenerID:", v7, *(_QWORD *)(a1 + 48));
    }
    else
    {
      if (!v12[12])
      {
        v14 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(void **)(v15 + 96);
        *(_QWORD *)(v15 + 96) = v14;

      }
      if (objc_msgSend(*(id *)(a1 + 32), "containsObject:", CFSTR("com.apple.private.alloy.pbbridge")))
      {
        objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v18 = *(_QWORD *)(a1 + 48);
          v28 = 138412802;
          v29 = v18;
          v30 = 2112;
          v31 = v4;
          v32 = 2112;
          v33 = v7;
          _os_log_impl(&dword_1906E0000, v17, OS_LOG_TYPE_DEFAULT, "Adding listener with ID: %@    services: %@   commands %@", (uint8_t *)&v28, 0x20u);
        }

      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 96), "setObject:forKey:", v10, *(_QWORD *)(a1 + 48));
      v19 = *(void **)(*(_QWORD *)(a1 + 56) + 120);
      if (!v19)
      {
        v20 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        v21 = *(_QWORD *)(a1 + 56);
        v22 = *(void **)(v21 + 120);
        *(_QWORD *)(v21 + 120) = v20;

        v19 = *(void **)(*(_QWORD *)(a1 + 56) + 120);
      }
      objc_msgSend(v19, "setObject:forKey:", v7, *(_QWORD *)(a1 + 48));
      v23 = *(void **)(*(_QWORD *)(a1 + 56) + 144);
      if (!v23)
      {
        v24 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(void **)(v25 + 144);
        *(_QWORD *)(v25 + 144) = v24;

        v23 = *(void **)(*(_QWORD *)(a1 + 56) + 144);
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 0);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "setObject:forKey:", v27, *(_QWORD *)(a1 + 48));

      objc_msgSend(*(id *)(a1 + 56), "_listenerSetUpdated");
    }

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
  }

}

void sub_1906EDD3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1906EDE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1906EE060(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;

  result = objc_msgSend(a3, "unsignedIntValue");
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 152) |= result;
  return result;
}

void sub_1906EE094(uint64_t a1)
{

}

void sub_1906EE09C(uint64_t a1)
{

}

void sub_1906EE0A4(uint64_t a1)
{

}

void sub_1906EE0AC(uint64_t a1)
{

}

void sub_1906EE0B4(uint64_t a1)
{

}

void sub_1906EE0BC(uint64_t a1)
{

}

void sub_1906EE0C4(uint64_t a1)
{

}

void sub_1906EE0CC(uint64_t a1)
{

}

void sub_1906EE0D4(uint64_t a1)
{

}

void sub_1906EE0DC(uint64_t a1)
{

}

void sub_1906EE0E4(uint64_t a1)
{

}

void sub_1906EE0EC(uint64_t a1)
{

}

void sub_1906EE0F4(uint64_t a1)
{

}

void sub_1906EE0FC(uint64_t a1)
{

}

void sub_1906EE104(uint64_t a1)
{

}

void sub_1906EE10C(uint64_t a1)
{

}

void sub_1906EE114(uint64_t a1)
{

}

void sub_1906EE11C(uint64_t a1)
{

}

void sub_1906EE124(uint64_t a1)
{

}

void sub_1906EE12C(uint64_t a1)
{

}

void sub_1906EE134(uint64_t a1)
{

}

void sub_1906EE13C(uint64_t a1)
{

}

void sub_1906EE144(uint64_t a1)
{

}

void sub_1906EE14C(uint64_t a1)
{

}

void sub_1906EE154(uint64_t a1)
{

}

void sub_1906EE15C(uint64_t a1)
{

}

void sub_1906EE164(uint64_t a1)
{

}

void sub_1906EE16C(uint64_t a1)
{

}

void sub_1906EE174(uint64_t a1)
{

}

void sub_1906EE17C(uint64_t a1)
{

}

uint64_t sub_1906EE184(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE194(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE1A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE1B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE1C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE1D4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE1E4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE1F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE204(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE214(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE224(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE234(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE244(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE254(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE264(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE274(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE284(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE294(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE2A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE2B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE2C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE2D4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE2E4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE2F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE304(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE314(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE324(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE334(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE344(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE354(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1906EE364(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 168);
  return result;
}

uint64_t sub_1906EE378(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unionSet:");
}

uint64_t IDSCopyTokenAndIDForTokenWithID(void *a1, const char *a2)
{
  return objc_msgSend(a1, "_stripPotentialTokenURIWithToken:", a2);
}

uint64_t sub_1906EE388(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 172) = *(_BYTE *)(result + 40);
  return result;
}

uint64_t sub_1906EE398(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 168) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 169) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 170) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 171) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_callHandlersWithBlockOnIvarQueue:", &unk_1E2C5F830);
}

uint64_t sub_1906EE3DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
}

uint64_t sub_1906EE3F4(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 172);
  return result;
}

uint64_t sub_1906EE408(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unionSet:");
}

uint64_t sub_1906EE438(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "addDelegate:forService:listenerID:queue:", a1[5], a1[6], a1[7], a1[8]);
}

void sub_1906EE450()
{
  IDSServiceAvailabilityController *v0;
  void *v1;

  v0 = objc_alloc_init(IDSServiceAvailabilityController);
  v1 = (void *)qword_1ECDD66E0;
  qword_1ECDD66E0 = (uint64_t)v0;

}

void sub_1906EE478()
{
  IDSDaemonProtocolController *v0;
  void *v1;

  v0 = objc_alloc_init(IDSDaemonProtocolController);
  v1 = (void *)qword_1ECDD66F0;
  qword_1ECDD66F0 = (uint64_t)v0;

}

void sub_1906EE4A0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint8_t v5[16];

  +[IDSLogging IDQuery](IDSLogging, "IDQuery");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Purging idStatusCache", v5, 2u);
  }

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;

}

void sub_1906EE520(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "linkedDevicesWithRelationship:", a1[6]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1906EE560()
{
  IDSInternalQueueController *v0;
  void *v1;

  v0 = objc_alloc_init(IDSInternalQueueController);
  v1 = (void *)qword_1ECDD6710;
  qword_1ECDD6710 = (uint64_t)v0;

}

void sub_1906EE588()
{
  id v0;

  IDSGetMainBundleIdentifier();
  v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1ECDD6568 = objc_msgSend(v0, "isEqualToIgnoringCase:", CFSTR("com.apple.springboard"));

}

void sub_1906EE5C4(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1ECDD6670;
  qword_1ECDD6670 = (uint64_t)v1;

}

void sub_1906EE5E8()
{
  IDSIDQueryController *v0;
  void *v1;

  v0 = objc_alloc_init(IDSIDQueryController);
  v1 = (void *)qword_1ECDD6708;
  qword_1ECDD6708 = (uint64_t)v0;

}

void sub_1906EE610()
{
  IDSDaemonController *v0;
  void *v1;

  v0 = objc_alloc_init(IDSDaemonController);
  v1 = (void *)qword_1ECDD66D8;
  qword_1ECDD66D8 = (uint64_t)v0;

}

void sub_1906EE638()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSAccountController");
  v1 = (void *)qword_1ECDD66A0;
  qword_1ECDD66A0 = (uint64_t)v0;

}

void sub_1906EE668()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "ServiceAvailability");
  v1 = (void *)qword_1EE1E1F48;
  qword_1EE1E1F48 = (uint64_t)v0;

}

uint64_t sub_1906EE698(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "addDelegate:queue:", a1[5], a1[6]);
}

void sub_1906EE6AC()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "DaemonController");
  v1 = (void *)qword_1ECDD66B8;
  qword_1ECDD66B8 = (uint64_t)v0;

}

void sub_1906EE6DC(uint64_t a1)
{
  _IDSIDQueryController *v2;
  uint64_t v3;
  void *v4;

  v2 = -[_IDSIDQueryController initWithDelegateContext:queueController:]([_IDSIDQueryController alloc], "initWithDelegateContext:queueController:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

}

void sub_1906EE71C()
{
  IDSInternalQueueController *v0;
  void *v1;

  v0 = -[IDSInternalQueueController initWithName:contextKey:]([IDSInternalQueueController alloc], "initWithName:contextKey:", "IDSIDQueryControllerQueue", &unk_1EE1E3948);
  v1 = (void *)qword_1ECDD6618;
  qword_1ECDD6618 = (uint64_t)v0;

}

void sub_1906EE758()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "_IDSService");
  v1 = (void *)qword_1ECDD6658;
  qword_1ECDD6658 = (uint64_t)v0;

}

void sub_1906EE788()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "Connection");
  v1 = (void *)qword_1ECDD66C0;
  qword_1ECDD66C0 = (uint64_t)v0;

}

void sub_1906EE7B8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "Accounts");
  v1 = (void *)qword_1ECDD6680;
  qword_1ECDD6680 = (uint64_t)v0;

}

void sub_1906EE7E8()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDQuery");
  v1 = (void *)qword_1ECDD65E8;
  qword_1ECDD65E8 = (uint64_t)v0;

}

void sub_1906EFC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906F0334(_QWORD *a1)
{
  _IDSContinuity *v2;
  uint64_t v3;
  void *v4;

  v2 = -[_IDSContinuity initWithDelegate:queue:delegateContext:]([_IDSContinuity alloc], "initWithDelegate:queue:delegateContext:", a1[5], a1[6], a1[4]);
  v3 = a1[4];
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

}

void sub_1906F0460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1906F0478()
{
  return (id)objc_opt_self();
}

void sub_1906F0554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1906F056C(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "state");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1906F066C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_startAdvertisingOfType_withData_withOptions_);
}

uint64_t sub_1906F0700(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_stopAdvertisingOfType_);
}

uint64_t sub_1906F0818(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_startScanningForType_withData_mask_peers_);
}

uint64_t sub_1906F08FC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_startScanningForType_withData_mask_);
}

uint64_t sub_1906F0A40(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_startScanningForType_withData_mask_peers_boostedScan_duplicates_);
}

uint64_t sub_1906F0B44(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_startScanningForType_withData_mask_boostedScan_duplicates_);
}

uint64_t sub_1906F0BE0(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_stopScanningForType_);
}

void sub_1906F0C98(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_1906F0CB0()
{
  id v0;

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "_agentDidLaunchNotification:", 0);

}

void sub_1906F0DF0(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  uint64_t v9;
  _QWORD v10[6];

  v1 = a1[4];
  v2 = (void *)a1[5];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1906E5C64;
  v10[3] = &unk_1E2C60470;
  v4 = (void *)a1[6];
  v3 = a1[7];
  v10[4] = v1;
  v10[5] = v3;
  v5 = *(void **)(v1 + 56);
  v6 = *(void **)(v1 + 64);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1906F0EA0;
  v7[3] = &unk_1E2C60498;
  v9 = v3;
  v7[4] = v1;
  v8 = v4;
  sub_1906E5438(v5, v2, v10, v6, v7);

}

void sub_1906F0EA0(uint64_t a1, void *a2, void *a3, int a4)
{
  id v8;
  id v9;
  uint64_t v10;
  id *v11;
  void *v12;
  _BOOL4 v13;
  NSObject *v14;
  uint64_t v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  int v24;
  NSObject *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  const __CFString *v38;
  __int16 v39;
  const __CFString *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  const __CFString *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  v11 = (id *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 48) == *(_QWORD *)(v10 + 88)
     && (v12 = *(void **)(v10 + 32)) != 0
     && (objc_msgSend(v12, "wasInterrupted") & 1) == 0
     && *((_BYTE *)*v11 + 162) != 0;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(a1 + 48);
    v16 = CFSTR("NO");
    if (a4)
      v17 = CFSTR("YES");
    else
      v17 = CFSTR("NO");
    if (v13)
      v18 = CFSTR("YES");
    else
      v18 = CFSTR("NO");
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(_QWORD *)(v19 + 32);
    if (*(_BYTE *)(v19 + 162))
      v16 = CFSTR("YES");
    v35 = 134219010;
    v36 = v15;
    v37 = 2112;
    v38 = v17;
    v39 = 2112;
    v40 = v18;
    v41 = 2112;
    v42 = v20;
    v43 = 2112;
    v44 = v16;
    _os_log_impl(&dword_1906E0000, v14, OS_LOG_TYPE_DEFAULT, "Completed connection {connectionID %lu, fatalError %@, relevantConnection: %@, localObject: %@, acquiringDaemonConnection: %@}", (uint8_t *)&v35, 0x34u);
  }

  v21 = *v11;
  if (v13)
  {
    *((_BYTE *)v21 + 165) = a4;
    v21 = *v11;
    if (a4)
    {
      if (*((_QWORD *)v21 + 9))
      {
        dispatch_group_leave(*((dispatch_group_t *)v21 + 9));
        v22 = (void *)*((_QWORD *)*v11 + 9);
        *((_QWORD *)*v11 + 9) = 0;

        v21 = *v11;
      }
    }
  }
  if (*(_QWORD *)(a1 + 48) == *((_QWORD *)v21 + 11))
  {
    objc_msgSend(v21, "_remoteObjectCleanup");
    objc_storeStrong((id *)*v11 + 2, a2);
    if (objc_msgSend(*v11, "remoteObjectExists")
      && (objc_msgSend(*v11, "localObject"),
          v23 = (void *)objc_claimAutoreleasedReturnValue(),
          v24 = objc_msgSend(v23, "isValid"),
          v23,
          v24))
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        sub_1907E6614();

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "addObserver:selector:name:object:", *v11, sel_remoteObjectDiedNotification_, *MEMORY[0x1E0D36788], *((_QWORD *)*v11 + 2));

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "addObserver:selector:name:object:", *v11, sel_localObjectDiedNotification_, *MEMORY[0x1E0D365F8], *((_QWORD *)*v11 + 4));

      objc_msgSend(*((id *)*v11 + 5), "connectionComplete:withResponse:", 1, v9);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "warning");
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        v30 = *((_QWORD *)*v11 + 7);
        v35 = 138412290;
        v36 = v30;
        _os_log_impl(&dword_1906E0000, v29, OS_LOG_TYPE_DEFAULT, "  Failed to build remote object for listener: %@", (uint8_t *)&v35, 0xCu);
      }

      objc_msgSend(*v11, "_remoteObjectCleanup");
      objc_msgSend(*v11, "_localObjectCleanup");
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 156) = 0;
    v31 = *(void **)(a1 + 32);
    objc_msgSend(v31, "services");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "commands");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "_setServices:commands:capabilities:", v32, v33, objc_msgSend(*(id *)(a1 + 32), "capabilities"));

    v34 = *(_QWORD *)(a1 + 40);
    if (v34)
      (*(void (**)(void))(v34 + 16))();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      sub_1907E6678();

  }
}

uint64_t sub_1906F1264(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1906F1270()
{
  dispatch_async(MEMORY[0x1E0C80D38], &unk_1E2C60528);
}

id sub_1906F1284()
{
  return (id)objc_msgSend(MEMORY[0x1E0D36AD0], "sharedInstance");
}

void sub_1906F12C4(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  NSObject *v4;
  id WeakRetained;
  char v6;
  id v7;
  id v8;
  char v9;
  id v10;

  objc_msgSend(*(id *)(a1 + 32), "listener");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_setHidingDisconnect:", 0);

  if ((objc_msgSend(*(id *)(a1 + 32), "isConnected") & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 32), "isConnecting") & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      sub_1907E6708();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      sub_1907E6734();

    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
    v6 = objc_opt_respondsToSelector();

    if ((v6 & 1) != 0)
    {
      v7 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
      objc_msgSend(v7, "performSelector:withObject:", sel_daemonControllerDidDisconnect, 0);

    }
    v8 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
    v9 = objc_opt_respondsToSelector();

    if ((v9 & 1) != 0)
    {
      v10 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
      objc_msgSend(v10, "performSelector:withObject:", sel_daemonConnectionLost, 0);

    }
    dispatch_async(MEMORY[0x1E0C80D38], &unk_1E2C605D8);
  }
}

void sub_1906F142C()
{
  void *v0;
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", CFSTR("__kIDSDaemonConnectionLostNotification"), 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("__kIDSDaemonDidDisconnectNotification"), 0);

}

void sub_1906F154C()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", CFSTR("__k_IDSDaemonDidDisconnectNotification"), 0);

}

uint64_t sub_1906F1648(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1906F1654(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  int v4;
  const __CFString *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  __int16 v9;
  const __CFString *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(MEMORY[0x1E0D36AD0], "sharedInstance");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "systemIsShuttingDown");
      v5 = CFSTR("NO");
      if (v4)
        v6 = CFSTR("YES");
      else
        v6 = CFSTR("NO");
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 164))
        v5 = CFSTR("YES");
      v7 = 138412546;
      v8 = v6;
      v9 = 2112;
      v10 = v5;
      _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "  Connecting to idsdaemon system is shutting down: %@  hasBeenSuspended %@", (uint8_t *)&v7, 0x16u);

    }
  }
}

void sub_1906F175C()
{
  NSObject *v0;
  uint8_t v1[16];

  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "XPC has informed us that a fatal error has occured, we will not be attempting to reconnect any further", v1, 2u);
  }

}

void sub_1906F17C8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  NSObject *v5;
  const __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  const __CFString *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  const __CFString *v16;
  _QWORD v17[5];
  uint8_t buf[4];
  const __CFString *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 67109120;
      LODWORD(v19) = v3;
      _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "connectToDaemonWithLaunch calling into _setServices capabilities %d", buf, 8u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "_setServices:commands:capabilities:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56));
  if ((objc_msgSend(*(id *)(a1 + 32), "isConnected") & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "isConnecting"))
  {
    if (*(_BYTE *)(a1 + 60))
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Already connected... not connecting", buf, 2u);
      }

    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 60))
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = CFSTR("YES");
        if (!*(_BYTE *)(a1 + 61))
          v6 = CFSTR("NO");
        v7 = *(_QWORD *)(a1 + 40);
        v8 = *(_QWORD *)(a1 + 48);
        v9 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)buf = 138413058;
        v19 = v6;
        v20 = 2112;
        v21 = v7;
        v22 = 2112;
        v23 = v8;
        v24 = 1024;
        v25 = v9;
        _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "_connectToDaemonWithLaunch: %@ services: %@ commands: %@ capabilities: %d", buf, 0x26u);
      }

    }
    if (!objc_msgSend(*(id *)(a1 + 32), "remoteObjectExists")
      || (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "isValid") & 1) == 0)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 161) = 0;
      v10 = *(_QWORD *)(a1 + 32);
      if (!*(_BYTE *)(v10 + 162))
      {
        *(_BYTE *)(v10 + 162) = 1;
        objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v12 = *(const __CFString **)(*(_QWORD *)(a1 + 32) + 80);
          *(_DWORD *)buf = 134217984;
          v19 = v12;
          _os_log_impl(&dword_1906E0000, v11, OS_LOG_TYPE_DEFAULT, "Suspend at connect %p", buf, 0xCu);
        }

        dispatch_suspend(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 80));
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 3221225472;
        v17[2] = sub_1906F1B10;
        v17[3] = &unk_1E2C60550;
        v17[4] = *(_QWORD *)(a1 + 32);
        v13 = (void *)MEMORY[0x19400FE1C](v17);
        if ((objc_msgSend(*(id *)(a1 + 32), "_makeConnectionWithLaunch:completionBlock:", *(unsigned __int8 *)(a1 + 61), v13) & 1) == 0)
        {
          v14 = *(_QWORD *)(a1 + 32);
          if (*(_BYTE *)(v14 + 162))
          {
            *(_BYTE *)(v14 + 162) = 0;
            objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
            v15 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              v16 = *(const __CFString **)(*(_QWORD *)(a1 + 32) + 80);
              *(_DWORD *)buf = 134217984;
              v19 = v16;
              _os_log_impl(&dword_1906E0000, v15, OS_LOG_TYPE_DEFAULT, "Resume due to failed connect %p", buf, 0xCu);
            }

            dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 80));
          }
        }

      }
    }
  }
}

void sub_1906F1B10(uint64_t a1)
{
  _BYTE *v2;
  NSObject *v3;
  uint64_t v4;
  id WeakRetained;
  char v6;
  id v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE **)(a1 + 32);
  if (v2[162])
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
      v9 = 134217984;
      v10 = v4;
      _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "Resume due to connect completion %p", (uint8_t *)&v9, 0xCu);
    }

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 162) = 0;
    dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 80));
    v2 = *(_BYTE **)(a1 + 32);
  }
  if (objc_msgSend(v2, "remoteObjectExists"))
  {
    WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
    v6 = objc_opt_respondsToSelector();

    if ((v6 & 1) != 0)
    {
      v7 = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 8));
      objc_msgSend(v7, "performSelector:withObject:", sel_daemonControllerDidConnect, 0);

    }
    dispatch_async(MEMORY[0x1E0C80D38], &unk_1E2C60640);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      sub_1907E6760();

    objc_msgSend(*(id *)(a1 + 32), "remoteObjectDiedNotification:", 0);
  }
}

void sub_1906F1C90()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", CFSTR("__k_IDSDaemonDidConnectNotification"), 0);

}

void sub_1906F1E74(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[4];
    v4 = *(_QWORD *)(a1[5] + 176);
    v13 = 136315650;
    v14 = "-[IDSDaemonController addedDelegateForService:withCompletion:]_block_invoke";
    v15 = 2112;
    v16 = v3;
    v17 = 2112;
    v18 = v4;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "%s: adding delegate on service %@ _notificationServices %@", (uint8_t *)&v13, 0x20u);
  }

  if ((objc_msgSend(*(id *)(a1[5] + 176), "containsObject:", a1[4]) & 1) == 0)
  {
    v5 = *(void **)(a1[5] + 176);
    if (!v5)
    {
      v6 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      v7 = a1[5];
      v8 = *(void **)(v7 + 176);
      *(_QWORD *)(v7 + 176) = v6;

      v5 = *(void **)(a1[5] + 176);
    }
    objc_msgSend(v5, "addObject:", a1[4]);
    v9 = a1[6];
    +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if (v9)
    {
      objc_msgSend(v10, "forwarderWithCompletion:", a1[6]);
      v12 = objc_claimAutoreleasedReturnValue();

      v11 = (void *)v12;
    }
    objc_msgSend(v11, "registerForNotificationsOnServices:", *(_QWORD *)(a1[5] + 176));

  }
}

uint64_t sub_1906F1FDC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_listenerSetUpdated");
}

void sub_1906F20D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906F20F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1[4] + 96), "objectForKey:", a1[5]);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v5, "copy");
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1906F2224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906F223C(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  int v6;
  NSObject *v7;

  if (objc_msgSend(*(id *)(a1 + 32), "length")
    && (objc_msgSend(*(id *)(a1 + 40), "hasListenerForID:", *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v2 = *(void **)(a1 + 48);
    if (v2)
    {
      v3 = v2;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E60], "set");
      v3 = (id)objc_claimAutoreleasedReturnValue();
    }
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 40), "servicesForListenerID:", *(_QWORD *)(a1 + 32));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isEqualToSet:", v4);

    if (v6)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        sub_1907E6994();

      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 96), "setObject:forKey:", v4, *(_QWORD *)(a1 + 32));
      objc_msgSend(*(id *)(a1 + 40), "_listenerSetUpdated");
    }

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  }
}

void sub_1906F2424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906F243C(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  int v6;
  NSObject *v7;

  if (objc_msgSend(*(id *)(a1 + 32), "length")
    && (objc_msgSend(*(id *)(a1 + 40), "hasListenerForID:", *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    v2 = *(void **)(a1 + 48);
    if (v2)
    {
      v3 = v2;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E60], "set");
      v3 = (id)objc_claimAutoreleasedReturnValue();
    }
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 40), "commandsForListenerID:", *(_QWORD *)(a1 + 32));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isEqualToSet:", v4);

    if (v6)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        sub_1907E6A04();

      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 120), "setObject:forKey:", v4, *(_QWORD *)(a1 + 32));
      objc_msgSend(*(id *)(a1 + 40), "_listenerSetUpdated");
    }

  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 0;
  }
}

void sub_1906F2638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906F2650(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1[4] + 120), "objectForKey:", a1[5]);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v5, "copy");
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1906F2758(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1906F2770(_QWORD *a1)
{
  id v2;

  objc_msgSend(*(id *)(a1[4] + 144), "objectForKey:", a1[5]);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = objc_msgSend(v2, "unsignedIntValue");

}

void sub_1906F2890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906F28A8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend(*(id *)(a1 + 32), "length"))
  {
    if (*(_BYTE *)(a1 + 60))
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_DWORD *)(a1 + 56);
        v9 = *(_QWORD *)(a1 + 32);
        v18 = 67109378;
        v19 = v8;
        v20 = 2112;
        v21 = v9;
        v10 = "setCapabilities %d for listenerID %@ has no ID";
LABEL_16:
        _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v18, 0x12u);
      }
LABEL_17:

    }
LABEL_18:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    return;
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "hasListenerForID:", *(_QWORD *)(a1 + 32)) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 60))
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_DWORD *)(a1 + 56);
        v12 = *(_QWORD *)(a1 + 32);
        v18 = 67109378;
        v19 = v11;
        v20 = 2112;
        v21 = v12;
        v10 = "setCapabilities %d for listenerID %@ is not a valid listener";
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 56))
  {
    v2 = objc_msgSend(*(id *)(a1 + 40), "capabilitiesForListenerID:", *(_QWORD *)(a1 + 32));
    v3 = *(unsigned int *)(a1 + 56);
    if (v2 == (_DWORD)v3)
    {
      if (*(_BYTE *)(a1 + 60))
      {
        objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
        v4 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          v5 = *(_DWORD *)(a1 + 56);
          v6 = *(_QWORD *)(a1 + 32);
          v18 = 67109378;
          v19 = v5;
          v20 = 2112;
          v21 = v6;
          _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "setCapabilities %d for listenerID %@ - listener map already contains our capabilities", (uint8_t *)&v18, 0x12u);
        }

      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      return;
    }
  }
  else
  {
    v3 = 0;
  }
  if (*(_BYTE *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration", v3);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_DWORD *)(a1 + 56);
      v15 = *(_QWORD *)(a1 + 32);
      v18 = 67109378;
      v19 = v14;
      v20 = 2112;
      v21 = v15;
      _os_log_impl(&dword_1906E0000, v13, OS_LOG_TYPE_DEFAULT, "Set caps: %d  for listener ID: %@", (uint8_t *)&v18, 0x12u);
    }

    v3 = *(unsigned int *)(a1 + 56);
  }
  v16 = *(void **)(*(_QWORD *)(a1 + 40) + 144);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setObject:forKey:", v17, *(_QWORD *)(a1 + 32));

  objc_msgSend(*(id *)(a1 + 40), "_listenerSetUpdated");
}

void sub_1906F2C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906F2C1C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 56));
}

void sub_1906F2C30()
{
  NSObject *v0;
  uint8_t v1[16];

  +[IDSLogging DaemonController](IDSLogging, "DaemonController");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_INFO, "Finished blocking for daemon connection", v1, 2u);
  }

}

_BYTE *sub_1906F2CF0(uint64_t a1)
{
  _BYTE *result;

  result = *(_BYTE **)(a1 + 32);
  if (!result[161])
    return (_BYTE *)objc_msgSend(result, "connectToDaemonWithLaunch:", 0);
  return result;
}

void sub_1906F2D5C(uint64_t a1)
{
  NSObject *v2;
  dispatch_time_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD block[5];

  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1907E6ACC();

  objc_msgSend(*(id *)(a1 + 32), "_noteDisconnected");
  objc_msgSend(*(id *)(a1 + 32), "_localObjectCleanup");
  objc_msgSend(*(id *)(a1 + 32), "_remoteObjectCleanup");
  objc_msgSend(*(id *)(a1 + 32), "_disconnectFromDaemonWithForce:", 1);
  if ((byte_1ECDD65D1 & 1) == 0)
  {
    byte_1ECDD65D1 = 1;
    v3 = dispatch_time(0, 2000000000);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(NSObject **)(v4 + 64);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1906F2E38;
    block[3] = &unk_1E2C60550;
    block[4] = v4;
    dispatch_after(v3, v5, block);
  }
}

uint64_t sub_1906F2E38(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, " ... disconnection from agent (local) being handled by ivarQueue", v4, 2u);
  }

  result = objc_msgSend(*(id *)(a1 + 32), "connectToDaemon");
  byte_1ECDD65D1 = 0;
  return result;
}

uint64_t sub_1906F2F0C(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  void *v4;
  _QWORD v5[5];

  result = objc_msgSend(*(id *)(a1 + 32), "_noteDisconnected");
  if ((byte_1ECDD65D1 & 1) == 0)
  {
    byte_1ECDD65D1 = 1;
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      sub_1907E6AF8();

    v4 = *(void **)(a1 + 32);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1906F2FB8;
    v5[3] = &unk_1E2C60550;
    v5[4] = v4;
    return objc_msgSend(v4, "_performBlock:", v5);
  }
  return result;
}

void sub_1906F2FB8(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  int v4;
  NSObject *v5;
  dispatch_time_t v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[5];
  uint8_t buf[16];

  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, " ... disconnection from agent (remote) being handled by ivarQueue", buf, 2u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_disconnectFromDaemonWithForce:", 1);
  objc_msgSend(MEMORY[0x1E0D36AD0], "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "systemIsShuttingDown") & 1) != 0
    || !objc_msgSend(*(id *)(a1 + 32), "_autoReconnect"))
  {

  }
  else
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 161);

    if (!v4)
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        sub_1907E6B24();

      v6 = dispatch_time(0, 2000000000);
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(NSObject **)(v7 + 64);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_1906F3100;
      block[3] = &unk_1E2C60550;
      block[4] = v7;
      dispatch_after(v6, v8, block);
    }
  }
  byte_1ECDD65D1 = 0;
}

uint64_t sub_1906F3100(uint64_t a1)
{
  NSObject *v2;

  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1907E6B50();

  return objc_msgSend(*(id *)(a1 + 32), "connectToDaemon");
}

void sub_1906F3294(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;
  id v4;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = sub_1906F3308;
  v2[3] = &unk_1E2C607A8;
  v1 = *(void **)(a1 + 40);
  v3 = *(id *)(a1 + 32);
  v4 = v1;
  objc_msgSend(v3, "_performBlock:wait:", v2, 0);

}

void sub_1906F3308(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "connectToDaemon"))
  {
    v4 = *(id *)(*(_QWORD *)(a1 + 32) + 16);
    objc_msgSend(MEMORY[0x1E0D36AB8], "defaultBroadcaster");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "broadcastProxyForTarget:messageContext:protocol:", v4, 0, &unk_1EE1E6A60);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
      objc_msgSend(v3, "sendXPCObject:", *(_QWORD *)(a1 + 40));

  }
}

void sub_1906F33B0(uint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 32), "connectToDaemon"))
    dispatch_async(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 32) + 80), *(dispatch_block_t *)(a1 + 40));
}

uint64_t sub_1906F36C8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 164) = 1;
  return result;
}

uint64_t sub_1906F376C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 164) = 1;
  return result;
}

void sub_1906F3948(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_1906F3A24(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_1906F3A48(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1906F3A90(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1906F3AA4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x20u);
}

void sub_1906F3ACC(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1906F3B18()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE209D18);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD64C8;
  qword_1ECDD64C8 = v0;

  v2 = (void *)qword_1ECDD64C8;
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  objc_msgSend(v3, "setWithObjects:", v4, v5, objc_opt_class(), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_fetchEndpointCacheStateForServiceIdentifier_localURI_remoteURI_completion_, 1, 1);

  v7 = (void *)qword_1ECDD64C8;
  v8 = (void *)MEMORY[0x1E0C99E60];
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  v12 = objc_opt_class();
  objc_msgSend(v8, "setWithObjects:", v9, v10, v11, v12, objc_opt_class(), 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_fetchTransparentEndpointsForServiceIdentifier_localURI_remoteURI_verifyAgainstTrustCircle_completion_, 0, 1);

  v14 = (void *)qword_1ECDD64C8;
  v15 = (void *)MEMORY[0x1E0C99E60];
  v16 = objc_opt_class();
  objc_msgSend(v15, "setWithObjects:", v16, objc_opt_class(), 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setClasses:forSelector:argumentIndex:ofReply:", v17, sel_sendFakePushFromFile_completion_, 0, 1);

  v18 = (void *)qword_1ECDD64C8;
  v19 = (void *)MEMORY[0x1E0C99E60];
  v20 = objc_opt_class();
  objc_msgSend(v19, "setWithObjects:", v20, objc_opt_class(), 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setClasses:forSelector:argumentIndex:ofReply:", v21, sel_listSenderKeysForURIs_completion_, 0, 0);

  v22 = (void *)qword_1ECDD64C8;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v23 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v23, sel_setOffGridMode_options_completion_, 0, 0);

}

id sub_1906F3D78()
{
  if (qword_1EE1E1F78 != -1)
    dispatch_once(&qword_1EE1E1F78, &unk_1E2C5F710);
  return (id)qword_1EE1E1F70;
}

void sub_1906F3DB8()
{
  nw_protocol_definition_t definition;
  void *v1;

  definition = nw_framer_create_definition("LengthOnlyHeaderProtocol", 0, &unk_1E2C5F1D0);
  v1 = (void *)qword_1EE1E1F70;
  qword_1EE1E1F70 = (uint64_t)definition;

}

uint64_t sub_1906F3DEC(uint64_t a1, void *a2)
{
  NSObject *v2;

  v2 = a2;
  nw_framer_set_input_handler(v2, &unk_1E2C5F2B0);
  nw_framer_set_output_handler(v2, &unk_1E2C5FED0);

  return 1;
}

uint64_t sub_1906F3E30(uint64_t a1, void *a2)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  uint8_t temp_buffer[4];

  v2 = a2;
  *(_DWORD *)temp_buffer = 0;
  v3 = 4;
  if (nw_framer_parse_input(v2, 4uLL, 4uLL, temp_buffer, &unk_1E2C60210))
  {
    v3 = 4;
    while (1)
    {
      v4 = nw_framer_message_create(v2);
      kdebug_trace();
      v5 = nw_framer_deliver_input_no_copy(v2, bswap32(*(unsigned int *)temp_buffer), v4, 1);

      if (!v5)
        break;
      *(_DWORD *)temp_buffer = 0;
      if (!nw_framer_parse_input(v2, 4uLL, 4uLL, temp_buffer, &unk_1E2C60210))
        goto LABEL_7;
    }
    v3 = 0;
  }
LABEL_7:

  return v3;
}

uint64_t sub_1906F3F14(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 4 || a2 == 0)
    return 0;
  else
    return 4;
}

void sub_1906F3F28(uint64_t a1, void *a2, uint64_t a3, size_t a4)
{
  NSObject *v5;
  uint8_t output_buffer[4];

  v5 = a2;
  kdebug_trace();
  *(_DWORD *)output_buffer = bswap32(a4);
  nw_framer_write_output(v5, output_buffer, 4uLL);
  nw_framer_write_output_no_copy(v5, a4);

}

void sub_1906F3FD8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  Class (*v48)(uint64_t);
  void *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  _QWORD v57[5];
  _QWORD v58[2];
  uint64_t v59;
  _QWORD v60[3];
  _QWORD v61[5];
  _QWORD v62[5];
  _QWORD v63[4];

  v63[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE209D78);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD64D0;
  qword_1ECDD64D0 = v0;

  v2 = (void *)qword_1ECDD64D0;
  v3 = (void *)MEMORY[0x1E0C99E60];
  v63[0] = objc_opt_class();
  v63[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v63, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setWithArray:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v5, sel_fetchPeerVerificationInfoForApplication_forURIs_withCompletion_, 1, 0);

  v6 = (void *)qword_1ECDD64D0;
  v7 = (void *)MEMORY[0x1E0C99E60];
  v62[0] = objc_opt_class();
  v62[1] = objc_opt_class();
  v51 = 0;
  v52 = &v51;
  v53 = 0x2050000000;
  v8 = (void *)qword_1ECDD65C8;
  v54 = qword_1ECDD65C8;
  if (!qword_1ECDD65C8)
  {
    v46 = MEMORY[0x1E0C809B0];
    v47 = 3221225472;
    v48 = sub_1906F4754;
    v49 = &unk_1E2C602E0;
    v50 = &v51;
    sub_1906F4754((uint64_t)&v46);
    v8 = (void *)v52[3];
  }
  v9 = objc_retainAutorelease(v8);
  _Block_object_dispose(&v51, 8);
  v62[2] = v9;
  v62[3] = objc_opt_class();
  v51 = 0;
  v52 = &v51;
  v53 = 0x2050000000;
  v10 = (void *)qword_1ECDD6590;
  v54 = qword_1ECDD6590;
  if (!qword_1ECDD6590)
  {
    v46 = MEMORY[0x1E0C809B0];
    v47 = 3221225472;
    v48 = sub_1906F484C;
    v49 = &unk_1E2C602E0;
    v50 = &v51;
    sub_1906F484C((uint64_t)&v46);
    v10 = (void *)v52[3];
  }
  v11 = objc_retainAutorelease(v10);
  _Block_object_dispose(&v51, 8);
  v62[4] = v11;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v62, 5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setWithArray:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_fetchPeerVerificationInfoForApplication_forURIs_withCompletion_, 0, 1);

  v14 = (void *)qword_1ECDD64D0;
  v15 = (void *)MEMORY[0x1E0C99E60];
  v51 = 0;
  v52 = &v51;
  v53 = 0x2050000000;
  v16 = (void *)qword_1ECDD6598;
  v54 = qword_1ECDD6598;
  if (!qword_1ECDD6598)
  {
    v46 = MEMORY[0x1E0C809B0];
    v47 = 3221225472;
    v48 = sub_1906F48A0;
    v49 = &unk_1E2C602E0;
    v50 = &v51;
    sub_1906F48A0((uint64_t)&v46);
    v16 = (void *)v52[3];
  }
  v17 = objc_retainAutorelease(v16);
  _Block_object_dispose(&v51, 8);
  v61[0] = v17;
  v61[1] = objc_opt_class();
  v61[2] = objc_opt_class();
  v61[3] = objc_opt_class();
  v61[4] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v61, 5);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setWithArray:", v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setClasses:forSelector:argumentIndex:ofReply:", v19, sel_healSelfForApplication_withHealableErrors_withCompletion_, 1, 0);

  v20 = (void *)qword_1ECDD64D0;
  v21 = (void *)MEMORY[0x1E0C99E60];
  v60[0] = objc_opt_class();
  v60[1] = objc_opt_class();
  v60[2] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v60, 3);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setWithArray:", v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setClasses:forSelector:argumentIndex:ofReply:", v23, sel_sendOptInUpdateForApplications_withCompletion_, 0, 1);

  v24 = (void *)qword_1ECDD64D0;
  v25 = (void *)MEMORY[0x1E0C99E60];
  v59 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v59, 1);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setWithArray:", v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setClasses:forSelector:argumentIndex:ofReply:", v27, sel_fetchKTRegistrationStatusWithCompletion_, 0, 1);

  v28 = (void *)qword_1ECDD64D0;
  v29 = (void *)MEMORY[0x1E0C99E60];
  v51 = 0;
  v52 = &v51;
  v53 = 0x2050000000;
  v30 = (void *)qword_1ECDD65A0;
  v54 = qword_1ECDD65A0;
  if (!qword_1ECDD65A0)
  {
    v46 = MEMORY[0x1E0C809B0];
    v47 = 3221225472;
    v48 = sub_1906F48F4;
    v49 = &unk_1E2C602E0;
    v50 = &v51;
    sub_1906F48F4((uint64_t)&v46);
    v30 = (void *)v52[3];
  }
  v31 = objc_retainAutorelease(v30);
  _Block_object_dispose(&v51, 8);
  v58[0] = v31;
  v58[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v58, 2);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "setWithArray:", v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setClasses:forSelector:argumentIndex:ofReply:", v33, sel_peerVerificationFinishedWithResults_, 0, 0);

  v34 = (void *)qword_1ECDD64D0;
  v35 = (void *)MEMORY[0x1E0C99E60];
  v57[0] = objc_opt_class();
  v57[1] = objc_opt_class();
  v57[2] = objc_opt_class();
  v57[3] = objc_opt_class();
  v57[4] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v57, 5);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "setWithArray:", v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "setClasses:forSelector:argumentIndex:ofReply:", v37, sel_sendOptInUpdateRequest_withCompletion_, 0, 0);

  v38 = (void *)qword_1ECDD64D0;
  v39 = (void *)MEMORY[0x1E0C99E60];
  v56 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v56, 1);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "setWithArray:", v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "setClasses:forSelector:argumentIndex:ofReply:", v41, sel_sendOptInUpdateRequest_withCompletion_, 0, 1);

  v42 = (void *)qword_1ECDD64D0;
  v43 = (void *)MEMORY[0x1E0C99E60];
  v55[0] = objc_opt_class();
  v55[1] = objc_opt_class();
  v55[2] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v55, 3);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "setWithArray:", v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "setClasses:forSelector:argumentIndex:ofReply:", v45, sel_cacheClearRequest_, 0, 0);

}

void sub_1906F4728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1906F4754(uint64_t a1)
{
  Class result;

  sub_1906F47A8();
  result = objc_getClass("KTVerificationInfo");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1907E6C2C();
  qword_1ECDD65C8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1906F47A8()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!qword_1ECDD65B0)
  {
    v1 = xmmword_1E2C60938;
    v2 = 0;
    qword_1ECDD65B0 = _sl_dlopen();
  }
  if (!qword_1ECDD65B0)
    sub_1907E6CA4(&v0);
}

Class sub_1906F484C(uint64_t a1)
{
  Class result;

  sub_1906F47A8();
  result = objc_getClass("KTLoggableData");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1907E6D20();
  qword_1ECDD6590 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1906F48A0(uint64_t a1)
{
  Class result;

  sub_1906F47A8();
  result = objc_getClass("KTSelfVerificationHealableErrors");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1907E6D98();
  qword_1ECDD6598 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1906F48F4(uint64_t a1)
{
  Class result;

  sub_1906F47A8();
  result = objc_getClass("KTVerifierResult");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1907E6E10();
  qword_1ECDD65A0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void IDSSecurityKeyRollingRollKeys()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  if (_IDSRunningInDaemon())
    sub_1907E6E88();
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "Received deprecated call to roll keys -- posting key rolling complete notification immediately", v2, 2u);
  }

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("__kIDSKeyRollingCompleteNotification"), 0);

}

void IDSSecurityKeyRollingRegenerateRegisteredIdentity()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  if (_IDSRunningInDaemon())
    sub_1907E6EB0();
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "Received call to roll encryption keys", v2, 2u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "regenerateRegisteredIdentity");

}

void sub_1906F5074()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE209DD8);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD64D8;
  qword_1ECDD64D8 = v0;

}

void IDSLocalSetupStart()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  if (_IDSRunningInDaemon())
    sub_1907E6ED8();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "IDSLocalSetupStart", v2, 2u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "startLocalSetup");

}

void IDSLocalSetupCompleted()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  if (_IDSRunningInDaemon())
    sub_1907E6F00();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "IDSLocalSetupCompleted", v2, 2u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "localSetupCompleted");

}

void IDSLocalSetupStop()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  if (_IDSRunningInDaemon())
    sub_1907E6F28();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "IDSLocalSetupStop", v2, 2u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stopLocalSetup");

}

uint64_t IDSLocalSetupUnpair()
{
  NSObject *v0;
  void *v1;
  uint8_t v3[16];

  if (_IDSRunningInDaemon())
    sub_1907E6F50();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "IDSLocalSetupUnpair", v3, 2u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "localSetupUnpair");

  return sleep(0xAu);
}

void IDSLocalSetupUnpairStart()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  if (_IDSRunningInDaemon())
    sub_1907E6F78();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "IDSLocalSetupUnpairStart", v2, 2u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "localSetupUnpairStart");

}

void IDSAddPairedDevice(void *a1)
{
  id v1;
  NSObject *v2;
  NSObject *v3;
  void *v4;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_IDSRunningInDaemon())
    sub_1907E6FA0();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v1;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "IDSAddPairedDevice %@", (uint8_t *)&v5, 0xCu);
  }

  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v1;
    _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "Asked to pair device with cbuuid: %@", (uint8_t *)&v5, 0xCu);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addPairedDevice:", v1);

}

void IDSConfigureDemoMode()
{
  void *v0;
  dispatch_time_t v1;

  if (_IDSRunningInDaemon())
    sub_1907E6FC8();
  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "addListenerID:services:", CFSTR("DemoModeConfig"), 0);

  IDSLocalSetupStart();
  IDSAddPairedDevice(CFSTR("12345678-0000-DADA-DADA-DEADBEEEEEEE"));
  IDSLocalSetupCompleted();
  v1 = dispatch_time(0, 10000000000);
  dispatch_after(v1, MEMORY[0x1E0C80D38], &unk_1E2C5F770);
}

void sub_1906F554C()
{
  id v0;

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "removeListenerID:", CFSTR("DemoModeConfig"));

}

void IDSConnectPairedDevice(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_IDSRunningInDaemon())
    sub_1907E6FF0();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 138412290;
    v5 = v1;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "IDSConnectPairedDevice %@", (uint8_t *)&v4, 0xCu);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "connectPairedDevice:", v1);

}

void IDSDeletePairedDevice(void *a1)
{
  id v1;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_IDSRunningInDaemon())
    sub_1907E7018();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315394;
    v4 = "IDSDeletePairedDevice";
    v5 = 2112;
    v6 = v1;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "%s %@", (uint8_t *)&v3, 0x16u);
  }

  IDSDeletePairedDeviceWithCompletion(v1, 0, MEMORY[0x1E0C80D38]);
}

void IDSDeletePairedDeviceWithCompletion(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (_IDSRunningInDaemon())
    sub_1907E7040();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136315906;
    v15 = "IDSDeletePairedDeviceWithCompletion";
    v16 = 2112;
    v17 = v5;
    v18 = 2048;
    v19 = v9;
    v20 = 2048;
    v21 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s %@ %p %p", buf, 0x2Au);

  }
  +[IDSPairedDeviceManager sharedInstance](IDSPairedDeviceManager, "sharedInstance");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1906F58D8;
  v12[3] = &unk_1E2C60960;
  v13 = v6;
  v11 = v6;
  objc_msgSend(v10, "deletePairedDevice:withCompletionBlock:queue:", v5, v12, v7);

}

uint64_t sub_1906F58D8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void IDSDeletePairedDeviceWithCompletionBlock(void *a1, void *a2)
{
  id v3;
  id v4;

  v4 = a1;
  v3 = a2;
  if (_IDSRunningInDaemon())
    sub_1907E7068();
  IDSDeletePairedDeviceWithCompletion(v4, v3, MEMORY[0x1E0C80D38]);

}

void IDSGetPairedDevicesWithCompletionBlock(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  uint8_t buf[4];
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (_IDSRunningInDaemon())
    sub_1907E7090();
  if (v3)
  {
    +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v10 = "IDSGetPairedDevicesWithCompletionBlock";
      _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }

    +[IDSPairedDeviceManager sharedInstance](IDSPairedDeviceManager, "sharedInstance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1906F5A8C;
    v7[3] = &unk_1E2C60960;
    v8 = v3;
    objc_msgSend(v6, "getPairedDeviceInfoWithCompletionBlock:queue:", v7, v4);

  }
}

void sub_1906F5A8C(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  objc_msgSend(a2, "objectForKey:", *MEMORY[0x1E0D346A0]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v3, 0);
  else
    v4 = 0;
  v5 = (id)v4;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t IDSGetPairedDevices()
{
  NSObject *v0;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (_IDSRunningInDaemon())
    sub_1907E70B8();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315138;
    v3 = "IDSGetPairedDevices";
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "%s is DEPRECATED! Please use IDSGetPairedDevicesWithCompletionBlock", (uint8_t *)&v2, 0xCu);
  }

  return 0;
}

void IDSGetDeliveryStatsWithCompletionBlock(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v3 = a1;
  v4 = a2;
  if (_IDSRunningInDaemon())
    sub_1907E70E0();
  if (v3)
  {
    +[IDSPairedDeviceManager sharedInstance](IDSPairedDeviceManager, "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_1906F5C80;
    v6[3] = &unk_1E2C60960;
    v7 = v3;
    objc_msgSend(v5, "getDeliveryStatsWithCompletionBlock:queue:", v6, v4);

  }
}

uint64_t sub_1906F5C80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void IDSInitialLocalSyncStarted()
{
  NSObject *v0;
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (_IDSRunningInDaemon())
    sub_1907E7108();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    v1 = 136315138;
    v2 = "IDSInitialLocalSyncStarted";
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "%s is DEPRECATED! Please use IDSInitialLocalSyncStartedForServices", (uint8_t *)&v1, 0xCu);
  }

  IDSInitialLocalSyncStartedForServices(0);
}

void IDSInitialLocalSyncStartedForServices(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  int v4;
  const char *v5;
  __int16 v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_IDSRunningInDaemon())
    sub_1907E7130();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315394;
    v5 = "IDSInitialLocalSyncStartedForServices";
    v6 = 2112;
    v7 = v1;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "%s %@", (uint8_t *)&v4, 0x16u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "initialLocalSyncStartedForServices:", v1);

}

void IDSInitialLocalSyncCompleted()
{
  NSObject *v0;
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (_IDSRunningInDaemon())
    sub_1907E7158();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    v1 = 136315138;
    v2 = "IDSInitialLocalSyncCompleted";
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "%s is DEPRECATED! Please use IDSInitialLocalSyncCompletedForServices", (uint8_t *)&v1, 0xCu);
  }

  IDSInitialLocalSyncCompletedForServices(0);
}

void IDSInitialLocalSyncCompletedForServices(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  int v4;
  const char *v5;
  __int16 v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_IDSRunningInDaemon())
    sub_1907E7180();
  +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315394;
    v5 = "IDSInitialLocalSyncCompletedForServices";
    v6 = 2112;
    v7 = v1;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "%s %@", (uint8_t *)&v4, 0x16u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "initialLocalSyncCompletedForServices:", v1);

}

void IDSIncomingAccountSyncMessage(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  v1 = a1;
  if (_IDSRunningInDaemon())
    sub_1907E71A8();
  objc_msgSend(MEMORY[0x1E0D36AA8], "accountSync");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Local setup - received incoming sync message", v4, 2u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "incomingAccountSyncMessage:", v1);

}

void IDSSetAllowedTrafficClassifiersForDevice(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  _QWORD v9[4];
  NSObject *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (_IDSRunningInDaemon())
    sub_1907E71D0();
  if ((objc_msgSend(v4, "isDefaultPairedDevice") & 1) != 0)
  {
    +[IDSInternalQueueController sharedInstance](IDSInternalQueueController, "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1906F6208;
    v9[3] = &unk_1E2C60550;
    v6 = v3;
    v10 = v6;
    objc_msgSend(v5, "performBlock:", v9);

    +[IDSPairedDeviceManager sharedInstance](IDSPairedDeviceManager, "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setAllowedTrafficClassifiers:", v6);

    v8 = v10;
  }
  else
  {
    +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "IDSSetAllowedTrafficClassifiersForDevice";
      v13 = 2112;
      v14 = v4;
      _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s: invalid device %@", buf, 0x16u);
    }
  }

}

void sub_1906F6208(uint64_t a1)
{
  id v2;

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setAllowedTrafficClasses:", *(_QWORD *)(a1 + 32));

}

id IDSGetAllowedTrafficClassifiersForDevice(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  NSObject *v4;
  int v6;
  const char *v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_IDSRunningInDaemon())
    sub_1907E71F8();
  if ((objc_msgSend(v1, "isDefaultPairedDevice") & 1) != 0)
  {
    +[IDSPairedDeviceManager sharedInstance](IDSPairedDeviceManager, "sharedInstance");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "allowedTrafficClassifiers");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 136315394;
      v7 = "IDSGetAllowedTrafficClassifiersForDevice";
      v8 = 2112;
      v9 = v1;
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "%s: invalid device %@", (uint8_t *)&v6, 0x16u);
    }

    v3 = 0;
  }

  return v3;
}

void IDSDropAllMessagesWithoutAnyAllowedTrafficClassifier(void *a1)
{
  id v1;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((objc_msgSend(v1, "isDefaultPairedDevice") & 1) != 0)
  {
    +[IDSPairedDeviceManager sharedInstance](IDSPairedDeviceManager, "sharedInstance");
    v2 = objc_claimAutoreleasedReturnValue();
    -[NSObject dropAllMessagesWithoutAnyAllowedClassifier](v2, "dropAllMessagesWithoutAnyAllowedClassifier");
  }
  else
  {
    +[IDSTransportLog IDSLocalSetup](IDSTransportLog, "IDSLocalSetup");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = 136315394;
      v4 = "IDSDropAllMessagesWithoutAnyAllowedTrafficClassifier";
      v5 = 2112;
      v6 = v1;
      _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "%s: invalid device %@", (uint8_t *)&v3, 0x16u);
    }
  }

}

void sub_1906F7654(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_1906F767C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *WeakRetained;
  _QWORD *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[23] = a3;
    v5 = WeakRetained;
    objc_msgSend(WeakRetained, "parseDirectMessagingState");
    WeakRetained = v5;
  }

}

void sub_1906F7880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1906F78A0(uint64_t a1, int a2, uint64_t a3)
{
  _DWORD *WeakRetained;
  _DWORD *v7;
  NSObject *v8;
  int v9;
  int v10;
  _DWORD *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = WeakRetained;
  if (WeakRetained && *((_QWORD *)WeakRetained + 10) == *(_QWORD *)(a1 + 32))
  {
    WeakRetained[5] = a2;
    +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 138412546;
      v11 = v7;
      v12 = 1024;
      v13 = a2;
      _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%@ connection entered state: %d", (uint8_t *)&v10, 0x12u);
    }

    v9 = v7[5];
    if (v9 == 5)
      goto LABEL_10;
    if (v9 == 3)
    {
      *((_BYTE *)v7 + 8) = 0;
      objc_msgSend(v7, "receiveMessages");
      objc_msgSend(v7, "dequeueMessages");
      goto LABEL_11;
    }
    if (a3 || v9 == 4)
    {
LABEL_10:
      objc_msgSend(v7, "resetConnection");
      objc_msgSend(v7, "setupConnectionIfApplicable");
    }
  }
LABEL_11:

}

void sub_1906F7CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1906F7D1C(uint64_t a1, int a2, void *a3)
{
  id v5;
  id WeakRetained;
  NSObject *v7;
  void *v8;
  int v9;
  id v10;
  __int16 v11;
  int v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 138412802;
      v10 = WeakRetained;
      v11 = 1024;
      v12 = a2;
      v13 = 2112;
      v14 = v5;
      _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "%@ direct messaging socket: %d, error: %@", (uint8_t *)&v9, 0x1Cu);
    }

    if (v5)
    {
      objc_msgSend(WeakRetained, "resetConnection");
    }
    else
    {
      v8 = (void *)nw_connection_create_with_connected_socket();
      objc_msgSend(WeakRetained, "updateConnection:", v8);

    }
  }

}

void sub_1906F824C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1906F8268(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7;
  id v8;
  char *WeakRetained;
  char *v10;
  NSObject *v11;
  id v12;
  id v13;
  unsigned __int8 *v14;
  uint64_t v15;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  NSObject *v30;
  _QWORD v31[4];
  char *v32;
  int v33;
  char v34;
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a5;
  WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 40));
  v10 = WeakRetained;
  if (!WeakRetained || *((_QWORD *)WeakRetained + 10) != *(_QWORD *)(a1 + 32))
    goto LABEL_19;
  if (!v8)
  {
    v12 = v7;
    if (objc_msgSend(v12, "length"))
    {
      v13 = objc_retainAutorelease(v12);
      v14 = (unsigned __int8 *)objc_msgSend(v13, "bytes");
      v15 = v14[1];
      if (v15 > 6 || ((1 << v15) & 0x54) == 0)
      {
        v20 = *v14;
        v21 = *((_DWORD *)v14 + 1);
        v22 = *((_DWORD *)v14 + 2);
        v23 = bswap32(v22);
        v24 = objc_msgSend(v13, "length");
        v25 = vdupq_n_s64(1uLL);
        v25.i64[0] = v24 + v23;
        *(int64x2_t *)(v10 + 232) = vaddq_s64(v25, *(int64x2_t *)(v10 + 232));
        +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          v27 = *((_QWORD *)v10 + 7);
          v28 = (const char *)*((_QWORD *)v10 + 8);
          if (!v28)
            v28 = "<unknown>";
          *(_DWORD *)buf = 134219010;
          v36 = v27;
          v37 = 2080;
          v38 = v28;
          v39 = 1024;
          v40 = v20;
          v41 = 1024;
          v42 = v15;
          v43 = 1024;
          v44 = v23;
          _os_log_impl(&dword_1906E0000, v26, OS_LOG_TYPE_DEFAULT, "[%llu %s] Received Header: v %u t %u l %u", buf, 0x28u);
        }
        v29 = bswap32(v21);

        if (v22)
        {
          v30 = *((_QWORD *)v10 + 10);
          v31[0] = MEMORY[0x1E0C809B0];
          v31[1] = 3221225472;
          v31[2] = sub_1906F8564;
          v31[3] = &unk_1E2C60A70;
          v32 = v10;
          v34 = v15;
          v33 = v29;
          nw_connection_receive(v30, v23, v23, v31);

          goto LABEL_18;
        }
        objc_msgSend(v10, "processIncomingMessage:messageType:messageIdentifier:", 0, v15, v29);
      }
      else
      {
        +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v18 = *((_QWORD *)v10 + 7);
          v19 = (const char *)*((_QWORD *)v10 + 8);
          if (!v19)
            v19 = "<unknown>";
          *(_DWORD *)buf = 134218242;
          v36 = v18;
          v37 = 2080;
          v38 = v19;
          _os_log_impl(&dword_1906E0000, v17, OS_LOG_TYPE_DEFAULT, "[%llu %s] Ignoring HS Header", buf, 0x16u);
        }

      }
    }
    objc_msgSend(v10, "receiveMessages");
LABEL_18:

    goto LABEL_19;
  }
  +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    sub_1907E7540((uint64_t)v8, v11);

  objc_msgSend(v10, "resetConnection");
LABEL_19:

}

uint64_t sub_1906F8564(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "processIncomingMessage:messageType:messageIdentifier:", a2, *(unsigned __int8 *)(a1 + 44), *(unsigned int *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "receiveMessages");
}

id sub_1906F8F48(void *a1)
{
  id v1;
  CFMutableDictionaryRef Mutable;
  void *v3;
  id v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  id v15;
  NSObject *v16;
  uint64_t v18;
  _QWORD v19[2];
  void (*v20)(uint64_t, int, unsigned int, unsigned int *);
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v23 = 0;
    v24 = &v23;
    v25 = 0x3032000000;
    v26 = sub_1906EE1A4;
    v27 = sub_1906EE0A4;
    v28 = 0;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v3 = (void *)v24[5];
    v24[5] = (uint64_t)Mutable;

    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v20 = sub_1906F97FC;
    v21 = &unk_1E2C60B10;
    v22 = &v23;
    v4 = v1;
    v5 = v19;
    v6 = objc_retainAutorelease(v4);
    v7 = objc_msgSend(v6, "bytes");
    if (objc_msgSend(v6, "length"))
    {
      v8 = 0;
      v9 = (unsigned __int8 *)v7;
      while ((unint64_t)(v8 + 5) <= objc_msgSend(v6, "length"))
      {
        v10 = *v9;
        v11 = *(_DWORD *)(v9 + 1);
        v12 = (unsigned int *)(v9 + 5);
        v13 = bswap32(v11);
        v14 = (_DWORD)v12 - v7;
        if ((unint64_t)v12 + v13 - v7 > objc_msgSend(v6, "length"))
        {
          +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            v18 = objc_msgSend(v6, "length");
            *(_DWORD *)buf = 67109632;
            v30 = v14;
            v31 = 1024;
            v32 = v13;
            v33 = 2048;
            v34 = v18;
            _os_log_error_impl(&dword_1906E0000, v16, OS_LOG_TYPE_ERROR, "malformed tlv received ((%d + %u > %lu)", buf, 0x18u);
          }
          goto LABEL_13;
        }
        v20((uint64_t)v5, v10, v13, v12);
        v9 = (unsigned __int8 *)v12 + v13;
        v8 = &v9[-v7];
        if ((unint64_t)&v9[-v7] >= objc_msgSend(v6, "length"))
          goto LABEL_14;
      }
      +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_1907E75B4((int)v8, buf, objc_msgSend(v6, "length"), v16);
LABEL_13:

    }
LABEL_14:

    v15 = (id)v24[5];
    _Block_object_dispose(&v23, 8);

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_1906F91E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906F93A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1906F93C4(uint64_t a1)
{
  _QWORD *WeakRetained;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = "<unknown>";
      v5 = WeakRetained[7];
      if (WeakRetained[8])
        v4 = (const char *)WeakRetained[8];
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(_DWORD *)(a1 + 48);
      v8 = 134218754;
      v9 = v5;
      v10 = 2080;
      v11 = v4;
      v12 = 2112;
      v13 = v6;
      v14 = 1024;
      v15 = v7;
      _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "[%llu %s] connection wrote ack for guid: %@(%u)", (uint8_t *)&v8, 0x26u);
    }

  }
}

void sub_1906F96E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1906F9708(uint64_t a1)
{
  _QWORD *WeakRetained;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = WeakRetained[7];
      v5 = (const char *)WeakRetained[8];
      if (!v5)
        v5 = "<unknown>";
      v6 = *(_QWORD *)(a1 + 32);
      v7 = 134218498;
      v8 = v4;
      v9 = 2080;
      v10 = v5;
      v11 = 2112;
      v12 = v6;
      _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "[%llu %s] connection wrote app-ack for guid: %@(0)", (uint8_t *)&v7, 0x20u);
    }

  }
}

void sub_1906F97FC(uint64_t a1, int a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v5;
  void *v6;
  const __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;

  switch(a2)
  {
    case 1:
      if (a3 == 4)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", bswap32(*a4));
        v5 = objc_claimAutoreleasedReturnValue();
        v49 = (id)v5;
        v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        v7 = CFSTR("ids-dm-sqnm");
        goto LABEL_17;
      }
      +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1907E7718(v13, v14, v15, v16, v17, v18, v19, v20);
      goto LABEL_29;
    case 3:
      if (a3 == 1)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", *(unsigned __int8 *)a4);
        v5 = objc_claimAutoreleasedReturnValue();
        v49 = (id)v5;
        v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        v7 = CFSTR("ids-dm-spmf");
        goto LABEL_17;
      }
      +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1907E7784(v13, v21, v22, v23, v24, v25, v26, v27);
      goto LABEL_29;
    case 4:
      v5 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", a4, a3, 4);
      v49 = (id)v5;
      v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      v7 = CFSTR("ids-dm-iri");
      goto LABEL_17;
    case 5:
      if (a3 == 16)
      {
        v49 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", a4);
        objc_msgSend(v49, "UUIDString");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = (void *)objc_msgSend(v8, "copy");

        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKeyedSubscript:", v9, CFSTR("ids-dm-ori"));
        goto LABEL_18;
      }
      +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1907E76AC(v13, v28, v29, v30, v31, v32, v33, v34);
      goto LABEL_29;
    case 6:
      v5 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a4, a3);
      v49 = (id)v5;
      v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      v7 = CFSTR("ids-dm-cd");
      goto LABEL_17;
    case 7:
      v49 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a4, a3);
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithPlistData:", v49);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      v12 = CFSTR("ids-dm-cm");
      goto LABEL_12;
    case 8:
      v49 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a4, a3);
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithPlistData:", v49);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      v12 = CFSTR("ids-dm-cpb");
LABEL_12:
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, v12);

      goto LABEL_18;
    case 10:
      if (a3 == 2)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", bswap32(*(unsigned __int16 *)a4) >> 16);
        v5 = objc_claimAutoreleasedReturnValue();
        v49 = (id)v5;
        v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        v7 = CFSTR("ids-dm-tc");
        goto LABEL_17;
      }
      +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1907E77F0(v13, v35, v36, v37, v38, v39, v40, v41);
      goto LABEL_29;
    case 11:
      if (a3 == 4)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *a4);
        v5 = objc_claimAutoreleasedReturnValue();
        v49 = (id)v5;
        v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        v7 = CFSTR("ids-dm-afsqnm");
LABEL_17:
        objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v7);
LABEL_18:

      }
      else
      {
        +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          sub_1907E785C(v13, v42, v43, v44, v45, v46, v47, v48);
LABEL_29:

      }
      return;
    default:
      return;
  }
}

void sub_1906FAD54(uint64_t a1)
{
  _QWORD *WeakRetained;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  BOOL v18;
  unint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  __int128 v26;
  id v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  void *v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  if (WeakRetained && WeakRetained[14] == *(_QWORD *)(a1 + 32))
  {
    v4 = mach_continuous_time();
    v5 = (void *)objc_msgSend(*((id *)v3 + 17), "copy");
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v6 = v5;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
    if (v7)
    {
      v9 = v7;
      v10 = *(_QWORD *)v30;
      *(_QWORD *)&v8 = 134218498;
      v26 = v8;
      v27 = v6;
      do
      {
        v11 = 0;
        v28 = v9;
        do
        {
          if (*(_QWORD *)v30 != v10)
            objc_enumerationMutation(v6);
          objc_msgSend(v6, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v11), v26, v27);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("ids-dm-snd-time"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "unsignedLongLongValue");
          v17 = 0.0;
          if (v14)
            v18 = v4 > v14;
          else
            v18 = 0;
          if (v18)
          {
            v19 = v14;
            if (qword_1EE1E1F88 != -1)
              dispatch_once(&qword_1EE1E1F88, &unk_1E2C5F790);
            LODWORD(v15) = dword_1EE1E1F90;
            LODWORD(v16) = *(_DWORD *)algn_1EE1E1F94;
            v17 = (double)(v4 - v19) * (double)v15 / (double)v16 / 1000000.0;
          }
          if (v17 <= (double)*((int *)v3 + 8))
          {
            if (v17 > (double)*((int *)v3 + 9))
            {
              +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
              v20 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                v21 = *((_QWORD *)v3 + 7);
                v22 = v4;
                v23 = v10;
                if (*((_QWORD *)v3 + 8))
                  v24 = (const char *)*((_QWORD *)v3 + 8);
                else
                  v24 = "<unknown>";
                objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("ids-dm-msg-guid"));
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v26;
                v34 = v21;
                v35 = 2080;
                v36 = v24;
                v10 = v23;
                v4 = v22;
                v6 = v27;
                v9 = v28;
                v37 = 2112;
                v38 = v25;
                _os_log_impl(&dword_1906E0000, v20, OS_LOG_TYPE_DEFAULT, "[%llu %s] Message %@ taking long, retrying", buf, 0x20u);

              }
              objc_msgSend(v3, "dequeueMessages");
            }
          }
          else
          {
            objc_msgSend(v3, "failedToSendMessage:responseCode:", v12, 12);
          }

          ++v11;
        }
        while (v9 != v11);
        v9 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
      }
      while (v9);
    }

  }
}

void sub_1906FB270(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1906FB29C(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained, "failedToSendMessage:responseCode:", *(_QWORD *)(a1 + 32), 15);
    objc_msgSend(v3, "dequeueMessages");
    WeakRetained = v3;
  }

}

void sub_1906FB2E8(uint64_t a1)
{
  _QWORD *WeakRetained;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    +[IDSLogging IDSDirectMessagingConnection](IDSLogging, "IDSDirectMessagingConnection");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = "<unknown>";
      v5 = WeakRetained[7];
      if (WeakRetained[8])
        v4 = (const char *)WeakRetained[8];
      v6 = *(_DWORD *)(a1 + 56);
      v7 = *(_QWORD *)(a1 + 32);
      v9 = 134218754;
      v10 = v5;
      v11 = 2080;
      v12 = v4;
      v13 = 1024;
      v14 = v6;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "[%llu %s] connection wrote message w/ seq num %u guid %@", (uint8_t *)&v9, 0x26u);
    }

    v8 = WeakRetained[27];
    ++WeakRetained[28];
    WeakRetained[27] = v8 + *(_QWORD *)(a1 + 48);
    objc_msgSend(WeakRetained, "dequeueMessages");
  }

}

void sub_1906FB6C4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "logConnectionStatisticsInPowerDictionary");

}

uint64_t sub_1906FBCBC()
{
  return mach_timebase_info((mach_timebase_info_t)&dword_1EE1E1F90);
}

void sub_1906FBCC8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_1906FBCD8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1906FBF4C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v7 = a4;
  v8 = a3;
  v9 = objc_msgSend(a2, "copy");
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(void **)(v10 + 32);
  *(_QWORD *)(v10 + 32) = v9;

  v12 = objc_msgSend(v8, "copy");
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  v15 = objc_msgSend(v7, "copy");
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(void **)(v16 + 24);
  *(_QWORD *)(v16 + 24) = v15;

}

void sub_1906FBFDC(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v7 = (void *)MEMORY[0x1E0D36A98];
  v8 = a4;
  v9 = a3;
  v10 = (void *)objc_msgSend(a2, "copy");
  v11 = (void *)objc_msgSend(v9, "copy");

  objc_msgSend(v7, "pairWithFirst:second:", v10, v11);
  v12 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setObject:forKeyedSubscript:", v12, v8);
}

void sub_1906FCBD8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1906FCC8C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1906FD910(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1906FD9F4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1906FE498(_QWORD *a1)
{
  _IDSGroupSession *v2;
  uint64_t v3;
  void *v4;

  v2 = -[_IDSGroupSession initWithAccount:destinations:options:delegateContext:]([_IDSGroupSession alloc], "initWithAccount:destinations:options:delegateContext:", a1[5], a1[6], a1[7], a1[4]);
  v3 = a1[4];
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

}

void sub_1906FE620(uint64_t a1)
{
  void *v2;
  void *v3;
  _IDSGroupSession *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", *MEMORY[0x1E0D347E0]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setWithArray:", v3);
  v7 = (id)objc_claimAutoreleasedReturnValue();

  v4 = -[_IDSGroupSession initWithAccount:destinations:options:delegateContext:]([_IDSGroupSession alloc], "initWithAccount:destinations:options:delegateContext:", *(_QWORD *)(a1 + 48), v7, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(v5 + 8);
  *(_QWORD *)(v5 + 8) = v4;

}

void sub_1906FE7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1906FE7BC()
{
  return (id)objc_opt_self();
}

void sub_1906FE858(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  +[IDSLogging _IDSGroupSession](IDSLogging, "_IDSGroupSession");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(v3 + 8);
    v7 = 134218240;
    v8 = v3;
    v9 = 2048;
    v10 = v4;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Invalidating _IDSGroupSession { self: %p, _internal: %p }", (uint8_t *)&v7, 0x16u);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "invalidate");
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 8);
  *(_QWORD *)(v5 + 8) = 0;

}

void sub_1906FEAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906FEADC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "uniqueID");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1906FEC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906FEC2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "sessionIDAliasWithSalt:", a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1906FEEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906FEED8(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1[4] + 8), "localParticipantID");
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = IDSIDAliasHashUInt64();
  +[IDSLogging _IDSGroupSession](IDSLogging, "_IDSGroupSession");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[5];
    v5 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
    v6 = 134218498;
    v7 = v5;
    v8 = 2048;
    v9 = v2;
    v10 = 2112;
    v11 = v4;
    _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "createAliasForLocalParticipantIDWithSalt created %llu from %llu and %@", (uint8_t *)&v6, 0x20u);
  }

}

void sub_1906FF148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906FF164(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  __int128 v5;
  _QWORD v6[4];
  __int128 v7;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = *(_QWORD *)(a1 + 64);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1906FF1F8;
  v6[3] = &unk_1E2C60CA0;
  v5 = *(_OWORD *)(a1 + 48);
  v4 = (id)v5;
  v7 = v5;
  objc_msgSend(v2, "getParticipantIDForAlias:salt:completionHandler:", v3, v1, v6);

}

intptr_t sub_1906FF1F8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1906FF2CC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_createSessionIDAliasWithSalt_delegateQueueCompletionHandler_);
}

uint64_t sub_1906FF3AC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_createAliasForParticipantID_salt_delegateQueueCompletionHandler_);
}

uint64_t sub_1906FF480(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_createAliasForLocalParticipantIDWithSalt_delegateQueueCompletionHandler_);
}

uint64_t sub_1906FF560(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_getParticipantIDForAlias_salt_delegateQueueCompletionHandler_);
}

void sub_1906FF648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906FF660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "uniqueID");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(CFSTR("session:"), "stringByAppendingString:", v5);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1906FF778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1906FF790(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "state");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1906FF878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1906FF890(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sessionEndedReason");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1906FF998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906FF9B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "requiredCapabilities");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1906FFAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1906FFAD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "requiredLackOfCapabilities");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1906FFBD4(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setDelegate:queue:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1906FFD60(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateMembers:withContext:triggeredLocally:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));

}

void sub_1906FFE94(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateMembers:withContext:messagingCapabilities:triggeredLocally:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));

}

void sub_190700010(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "manageDesignatedMembers:withType:", *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 48));

}

void sub_1907000F0(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeParticipantIDs:", *(_QWORD *)(a1 + 40));

}

void sub_1907001F0(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateParticipantData:withContext:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1907002CC(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateParticipantInfo:", *(_QWORD *)(a1 + 40));

}

void sub_1907003A8(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setParticipantInfo:", *(_QWORD *)(a1 + 40));

}

void sub_1907004C0(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateParticipantType:members:withContext:triggeredLocally:", *(unsigned __int16 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 58));

}

void sub_1907005A4(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "joinWithOptions:", *(_QWORD *)(a1 + 40));

}

void sub_190700658(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "leaveGroupSessionWithOptions:", 0);

}

void sub_190700728(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "leaveGroupSessionWithOptions:", *(_QWORD *)(a1 + 40));

}

void sub_1907007DC(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "reconnectUPlusOneSession");

}

void sub_1907008A8(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setPreferences:", *(_QWORD *)(a1 + 40));

}

void sub_1907009BC(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setRequiredCapabilities:requiredLackOfCapabilities:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_190700A70(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "requestActiveParticipants");

}

void sub_190700B40(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "registerPluginWithOptions:", *(_QWORD *)(a1 + 40));

}

void sub_190700C1C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "unregisterPluginWithOptions:", *(_QWORD *)(a1 + 40));

}

void sub_190700CE0(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setCallScreeningMode:", *(unsigned __int8 *)(a1 + 40));

}

void sub_190700DA4(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setForceTCPFallbackOnWiFiUsingReinitiate:", *(unsigned __int8 *)(a1 + 40));

}

void sub_190700E68(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setForceTCPFallbackOnCellUsingReinitiate:", *(unsigned __int8 *)(a1 + 40));

}

void sub_190700F68(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "requestURIsForParticipantIDs:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_190701624(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "requestDataCryptorForTopic:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_190701700(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal_sessionWithValidityCheck");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "requestEncryptionKeyForParticipants:", *(_QWORD *)(a1 + 40));

}

void sub_190701860()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE209E38);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD64E0;
  qword_1ECDD64E0 = v0;

  v2 = (void *)qword_1ECDD64E0;
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  objc_msgSend(v3, "setWithObjects:", v4, v5, objc_opt_class(), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_requestSelectedSubscriptionsWithCompletion_, 0, 1);

  v7 = (void *)qword_1ECDD64E0;
  v8 = (void *)MEMORY[0x1E0C99E60];
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  objc_msgSend(v8, "setWithObjects:", v9, v10, objc_opt_class(), 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setClasses:forSelector:argumentIndex:ofReply:", v11, sel_requestUnselectedTemporaryPhoneAliasesWithCompletion_, 0, 1);

  v12 = (void *)qword_1ECDD64E0;
  v13 = (void *)MEMORY[0x1E0C99E60];
  v14 = objc_opt_class();
  v15 = objc_opt_class();
  objc_msgSend(v13, "setWithObjects:", v14, v15, objc_opt_class(), 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setClasses:forSelector:argumentIndex:ofReply:", v16, sel_selectSubscription_withCompletion_, 0, 0);

  v17 = (void *)qword_1ECDD64E0;
  v18 = (void *)MEMORY[0x1E0C99E60];
  v19 = objc_opt_class();
  v20 = objc_opt_class();
  objc_msgSend(v18, "setWithObjects:", v19, v20, objc_opt_class(), 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setClasses:forSelector:argumentIndex:ofReply:", v21, sel_selectSubscription_withCompletion_, 0, 1);

  v22 = (void *)qword_1ECDD64E0;
  v23 = (void *)MEMORY[0x1E0C99E60];
  v24 = objc_opt_class();
  v25 = objc_opt_class();
  objc_msgSend(v23, "setWithObjects:", v24, v25, objc_opt_class(), 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v26, sel_unselectSubscription_withCompletion_, 0, 0);

  v27 = (void *)qword_1ECDD64E0;
  v28 = (void *)MEMORY[0x1E0C99E60];
  v29 = objc_opt_class();
  v30 = objc_opt_class();
  objc_msgSend(v28, "setWithObjects:", v29, v30, objc_opt_class(), 0);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setClasses:forSelector:argumentIndex:ofReply:", v31, sel_unselectSubscription_withCompletion_, 0, 1);

  v32 = (void *)qword_1ECDD64E0;
  v33 = (void *)MEMORY[0x1E0C99E60];
  v34 = objc_opt_class();
  v35 = objc_opt_class();
  objc_msgSend(v33, "setWithObjects:", v34, v35, objc_opt_class(), 0);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "setClasses:forSelector:argumentIndex:ofReply:", v36, sel_setSelectedSubscriptions_withCompletion_, 0, 0);

  v37 = (void *)qword_1ECDD64E0;
  v38 = (void *)MEMORY[0x1E0C99E60];
  v39 = objc_opt_class();
  v40 = objc_opt_class();
  objc_msgSend(v38, "setWithObjects:", v39, v40, objc_opt_class(), 0);
  v41 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "setClasses:forSelector:argumentIndex:ofReply:", v41, sel_setSelectedSubscriptions_withCompletion_, 0, 1);

}

void sub_190701F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190701F1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _IDSService *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 24), *(id *)(a1 + 40));
  v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0D34E80]), "initWithServiceIdentifier:", *(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v2;

  v5 = [_IDSService alloc];
  v6 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", &unk_1E2CAE120, &unk_1E2CAE138, &unk_1E2CAE150, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[_IDSService initWithService:commands:manuallyAckMessages:delegateContext:](v5, "initWithService:commands:manuallyAckMessages:delegateContext:", v6, v7, 0, 0);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 48), *(id *)(a1 + 48));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 8), *(id *)(a1 + 56));
  objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(void **)(v12 + 16);
  *(_QWORD *)(v12 + 16) = v11;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "serviceProperties");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = objc_msgSend(v14, "supportsOfflineDelivery");

}

void sub_1907020F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190702114(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridMessenger");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(WeakRetained, "uuid");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = 138412290;
    v5 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "XPC interruption for client %@", (uint8_t *)&v4, 0xCu);

  }
  objc_msgSend(WeakRetained, "_setupXPC");

}

void sub_190702324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190702348(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(v3, "offGridMessengerCollaboratorWithErrorHandler:", &unk_1E2C5F7D0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(WeakRetained, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "serviceName");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setupOffGridMessengerClient:withUUID:forService:", WeakRetained, v5, v6);

}

void sub_1907023E8(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridMessenger");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907E7C0C();

}

void sub_190702514(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  void *v12;
  void *v13;
  id obj;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "accounts");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v20 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        if (objc_msgSend(v6, "isActive"))
        {
          v17 = 0u;
          v18 = 0u;
          v15 = 0u;
          v16 = 0u;
          objc_msgSend(v6, "handles");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
          if (v8)
          {
            v9 = v8;
            v10 = *(_QWORD *)v16;
            do
            {
              for (j = 0; j != v9; ++j)
              {
                if (*(_QWORD *)v16 != v10)
                  objc_enumerationMutation(v7);
                v12 = *(void **)(a1 + 40);
                objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * j), "URI");
                v13 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v12, "addObject:", v13);

              }
              v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
            }
            while (v9);
          }

        }
      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
    }
    while (v3);
  }

}

void sub_1907027C8(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  id v12;
  _QWORD v13[5];
  id v14;

  v4 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1907028B4;
  v13[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 64);
  v13[4] = *(_QWORD *)(a1 + 32);
  v14 = v5;
  objc_msgSend(a2, "offGridMessengerCollaboratorWithErrorHandler:", v13);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v11[0] = v4;
  v11[1] = 3221225472;
  v11[2] = sub_19070299C;
  v11[3] = &unk_1E2C60E78;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(id *)(a1 + 64);
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v10;
  objc_msgSend(v6, "donateHandlesForMessagingKeys:fromURI:options:completion:", v7, v8, v9, v11);

}

void sub_1907028B4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridMessenger");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907E7C0C();

  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_190702988;
    v7[3] = &unk_1E2C60E00;
    v9 = v5;
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

uint64_t sub_190702988(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_19070299C(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  _QWORD block[4];
  id v9;
  id v10;
  char v11;

  v5 = a3;
  v6 = *(void **)(a1 + 40);
  if (v6)
  {
    v7 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_190702A44;
    block[3] = &unk_1E2C60E50;
    v10 = v6;
    v11 = a2;
    v9 = v5;
    dispatch_async(v7, block);

  }
}

uint64_t sub_190702A44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

void sub_190702B50(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];
  id v13;
  _QWORD v14[5];
  id v15;

  v4 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_190702C50;
  v14[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 64);
  v14[4] = *(_QWORD *)(a1 + 32);
  v15 = v5;
  objc_msgSend(a2, "offGridMessengerCollaboratorWithErrorHandler:", v14);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v12[0] = v4;
  v12[1] = 3221225472;
  v12[2] = sub_190702D78;
  v12[3] = &unk_1E2C60EF0;
  v11 = *(id *)(a1 + 64);
  v12[4] = *(_QWORD *)(a1 + 32);
  v13 = v11;
  objc_msgSend(v6, "resultsForDestinationURIs:senderURI:service:options:completion:", v7, v9, v8, v10, v12);

}

void sub_190702C50(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridMessenger");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907E7C0C();

  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_190702D24;
    v7[3] = &unk_1E2C60E00;
    v9 = v5;
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

void sub_190702D24(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, _QWORD))(v2 + 16))(v2, v3, *(_QWORD *)(a1 + 32));

}

void sub_190702D78(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_190702E38;
    block[3] = &unk_1E2C60EC8;
    v12 = v7;
    v10 = v5;
    v11 = v6;
    dispatch_async(v8, block);

  }
}

uint64_t sub_190702E38(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_190702F54(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD v9[5];
  id v10;
  _QWORD v11[5];
  id v12;

  v4 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_19070302C;
  v11[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 48);
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v5;
  objc_msgSend(a2, "offGridMessengerCollaboratorWithErrorHandler:", v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v4;
  v9[1] = 3221225472;
  v9[2] = sub_190703118;
  v9[3] = &unk_1E2C60F40;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v8;
  objc_msgSend(v6, "encryptOffGridMessage:completion:", v7, v9);

}

void sub_19070302C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridMessenger");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907E7C0C();

  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_190703100;
    v7[3] = &unk_1E2C60E00;
    v9 = v5;
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

uint64_t sub_190703100(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 32));
}

void sub_190703118(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(void **)(a1 + 40);
  if (v10)
  {
    v11 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_1907031F8;
    v12[3] = &unk_1E2C60F18;
    v16 = v10;
    v13 = v7;
    v14 = v8;
    v15 = v9;
    dispatch_async(v11, v12);

  }
}

uint64_t sub_1907031F8(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_1907032B8(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD v9[5];
  id v10;
  _QWORD v11[5];
  id v12;

  v4 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_190703390;
  v11[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 48);
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v5;
  objc_msgSend(a2, "offGridMessengerCollaboratorWithErrorHandler:", v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v4;
  v9[1] = 3221225472;
  v9[2] = sub_19070347C;
  v9[3] = &unk_1E2C60F90;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v8;
  objc_msgSend(v6, "decryptOffGridMessage:completion:", v7, v9);

}

void sub_190703390(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridMessenger");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907E7C0C();

  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_190703464;
    v7[3] = &unk_1E2C60E00;
    v9 = v5;
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

uint64_t sub_190703464(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 32));
}

void sub_19070347C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(void **)(a1 + 40);
  if (v10)
  {
    v11 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_19070355C;
    v12[3] = &unk_1E2C60F18;
    v16 = v10;
    v13 = v7;
    v14 = v8;
    v15 = v9;
    dispatch_async(v11, v12);

  }
}

uint64_t sub_19070355C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

uint64_t sub_19070394C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], 0, a1[5]);
}

void sub_190703964(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  _QWORD v11[5];
  id v12;

  v4 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_190703A44;
  v11[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 56);
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v5;
  objc_msgSend(a2, "offGridMessengerCollaboratorWithErrorHandler:", v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v4;
  v9[1] = 3221225472;
  v9[2] = sub_190703B30;
  v9[3] = &unk_1E2C60FB8;
  v7 = *(_QWORD *)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 48);
  v10 = *(id *)(a1 + 56);
  objc_msgSend(v6, "sendEncryptedOffGridMessage:options:completion:", v7, v8, v9);

}

void sub_190703A44(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridMessenger");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907E7C0C();

  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_190703B18;
    v7[3] = &unk_1E2C60E00;
    v9 = v5;
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

uint64_t sub_190703B18(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 32));
}

void sub_190703B30(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(void **)(a1 + 40);
  v11 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_190703C0C;
  v15[3] = &unk_1E2C60F18;
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v19 = v10;
  v12 = v9;
  v13 = v8;
  v14 = v7;
  dispatch_async(v11, v15);

}

uint64_t sub_190703C0C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_190703C20(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_190703CAC;
  v6[3] = &unk_1E2C60F40;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(id *)(a1 + 56);
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v5;
  objc_msgSend(v3, "sendEncryptedOffGridMessage:options:completion:", v2, v4, v6);

}

void sub_190703CAC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(void **)(a1 + 40);
  if (v10)
  {
    v11 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_190703D8C;
    v12[3] = &unk_1E2C60F18;
    v16 = v10;
    v13 = v7;
    v14 = v8;
    v15 = v9;
    dispatch_async(v11, v12);

  }
}

uint64_t sub_190703D8C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_190703E88(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  id v9;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_190703F20;
  v6[3] = &unk_1E2C61030;
  v4 = *(id *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  v9 = *(id *)(a1 + 56);
  objc_msgSend(v2, "encryptOffGridMessage:completion:", v3, v6);

}

void sub_190703F20(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridMessenger");
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v7 && v8 && !a4)
  {
    if (v10)
    {
      v11 = 138412290;
      v12 = v8;
      _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "IDSOffGridMessenger - Successfully encrypted message with identifier: %@", (uint8_t *)&v11, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "setIdentifier:", v8);
    objc_msgSend(*(id *)(a1 + 40), "sendEncryptedOffGridMessage:options:completion:", v7, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  }
  else
  {
    if (v10)
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "IDSOffGridMessenger - Failed to encrypt message", (uint8_t *)&v11, 2u);
    }

  }
}

uint64_t sub_19070433C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_190704350(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_190704364(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  _QWORD v11[5];
  id v12;

  v4 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_190704444;
  v11[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 56);
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v5;
  objc_msgSend(a2, "offGridMessengerCollaboratorWithErrorHandler:", v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v4;
  v9[1] = 3221225472;
  v9[2] = sub_19070452C;
  v9[3] = &unk_1E2C61058;
  v7 = *(_QWORD *)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 48);
  v10 = *(id *)(a1 + 56);
  objc_msgSend(v6, "sendFetchRequestForHandles:fromHandle:completion:", v7, v8, v9);

}

void sub_190704444(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridMessenger");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907E7C0C();

  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_190704518;
    v7[3] = &unk_1E2C60E00;
    v9 = v5;
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

uint64_t sub_190704518(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_19070452C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 40);
  v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1907045E8;
  block[3] = &unk_1E2C60EC8;
  v13 = v6;
  v14 = v7;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(v8, block);

}

uint64_t sub_1907045E8(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_19070481C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], 0, a1[5]);
}

void sub_190704834(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1907048C0;
  v6[3] = &unk_1E2C61080;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(id *)(a1 + 56);
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v5;
  objc_msgSend(v3, "sendServiceUpdateMessage:options:completion:", v2, v4, v6);

}

void sub_1907048C0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  id v16;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(void **)(a1 + 40);
  if (v10)
  {
    v11 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 48);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_1907049A0;
    v12[3] = &unk_1E2C60F18;
    v16 = v10;
    v13 = v7;
    v14 = v8;
    v15 = v9;
    dispatch_async(v11, v12);

  }
}

uint64_t sub_1907049A0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_190704B98(uint64_t a1)
{
  id WeakRetained;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 56));
  v3 = objc_opt_respondsToSelector();

  if ((v3 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_190704CA4;
    v10[3] = &unk_1E2C610A8;
    v7 = *(_QWORD *)(a1 + 48);
    v11 = *(id *)(a1 + 56);
    v12 = *(id *)(a1 + 64);
    v13 = *(id *)(a1 + 72);
    v8 = *(id *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 32);
    v14 = v8;
    v15 = v9;
    objc_msgSend(v4, "messenger:incomingMessage:context:clientErrorAcknowledgementBlock:", v5, v6, v7, v10);

  }
}

void sub_190704CA4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[5];
  id v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridMessenger");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "originalGUID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)buf = 138413314;
    v21 = v5;
    v22 = 2112;
    v23 = v6;
    v24 = 2112;
    v25 = v7;
    v26 = 2112;
    v27 = v8;
    v28 = 2112;
    v29 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "IDSOffGridMessenger - Client ack block called for - %@, Internet Message %@, fromID %@, context %@, error %@", buf, 0x34u);

  }
  objc_msgSend(*(id *)(a1 + 32), "certifiedDeliveryContext");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    if (v3)
    {
      objc_msgSend(v3, "domain");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("SenderKeyEncryptionControllerErrorDomain"));

      if (v11)
      {
        v12 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v3, "domain");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "stringWithFormat:", CFSTR("paddy-%@-%ld"), v13, objc_msgSend(v3, "code"));
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "certifiedDeliveryContext");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "setFailureReasonMessage:", v14);

        objc_msgSend(*(id *)(a1 + 32), "certifiedDeliveryContext");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "setFailureReason:", &unk_1E2CAE168);

      }
    }
    +[IDSInternalQueueController sharedInstance](IDSInternalQueueController, "sharedInstance");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = sub_190704ED8;
    v18[3] = &unk_1E2C607A8;
    v18[4] = *(_QWORD *)(a1 + 64);
    v19 = *(id *)(a1 + 32);
    objc_msgSend(v17, "performBlock:", v18);

  }
}

void sub_190704ED8(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  objc_msgSend(*(id *)(a1 + 40), "certifiedDeliveryContext");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "sendCertifiedDeliveryReceipt:", v2);

}

void sub_1907050F8(uint64_t a1)
{
  void *v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_opt_respondsToSelector();

  if ((v3 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegate");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "originalGUID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "messenger:receivedIncomingDeliveryReceiptForIdentifier:fromURI:context:", v4, v5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
}

void sub_190705370(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_opt_respondsToSelector();

  if ((v3 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_190705468;
    v10[3] = &unk_1E2C60C50;
    v7 = *(_QWORD *)(a1 + 48);
    v11 = *(id *)(a1 + 56);
    v12 = *(id *)(a1 + 64);
    v8 = *(id *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 32);
    v13 = v8;
    v14 = v9;
    objc_msgSend(v4, "messenger:incomingServiceUpdateMessage:context:clientAcknowledgementBlock:", v5, v6, v7, v10);

  }
}

void sub_190705468(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  uint8_t buf[4];
  void *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridMessenger");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "originalGUID");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138412802;
    v11 = v3;
    v12 = 2112;
    v13 = v4;
    v14 = 2112;
    v15 = v5;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "IDSOffGridMessenger - Client ack block called for service update message - %@, fromID %@, context %@", buf, 0x20u);

  }
  objc_msgSend(*(id *)(a1 + 32), "certifiedDeliveryContext");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    +[IDSInternalQueueController sharedInstance](IDSInternalQueueController, "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1907055C8;
    v8[3] = &unk_1E2C607A8;
    v8[4] = *(_QWORD *)(a1 + 56);
    v9 = *(id *)(a1 + 32);
    objc_msgSend(v7, "performBlock:", v8);

  }
}

void sub_1907055C8(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  objc_msgSend(*(id *)(a1 + 40), "certifiedDeliveryContext");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "sendCertifiedDeliveryReceipt:", v2);

}

uint64_t sub_1907056AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "addDelegate:queue:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
}

void sub_190705978(uint64_t a1)
{
  id WeakRetained;
  char v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;

  WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)(a1 + 32) + 56));
  v3 = objc_opt_respondsToSelector();

  if ((v3 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_190705A70;
    v8[3] = &unk_1E2C61120;
    v9 = v5;
    v10 = *(id *)(a1 + 48);
    v11 = *(id *)(a1 + 56);
    objc_msgSend(v4, "messenger:incomingMessage:context:clientErrorAcknowledgementBlock:", v6, v9, v7, v8);

  }
}

void sub_190705A70(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridMessenger");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (void *)a1[4];
    objc_msgSend(v5, "senderURI");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = a1[5];
    v8 = 138413058;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    v12 = 2112;
    v13 = v7;
    v14 = 2112;
    v15 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "IDSOffGridMessenger - Client ack block called for - %@, Stewie Message fromID %@, context %@, error %@", (uint8_t *)&v8, 0x2Au);

  }
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_190705C90(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_190705D60;
  v6[3] = &unk_1E2C60730;
  v7 = v3;
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  objc_msgSend(v2, "messenger:incomingSummaryMessage:context:clientAcknowledgementBlock:", v4, v7, v5, v6);

}

uint64_t sub_190705D60(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridMessenger");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[4];
    v4 = a1[5];
    v6 = 138412546;
    v7 = v3;
    v8 = 2112;
    v9 = v4;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "IDSOffGridMessenger - Client ack block called for - %@, Stewie Message summary, context %@", (uint8_t *)&v6, 0x16u);
  }

  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_190705EF8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void IDSReportiMessageSpam(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  id v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (_IDSRunningInDaemon())
    sub_1907E7CFC();
  +[IDSTransportLog IDSReportSpam](IDSTransportLog, "IDSReportSpam");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412546;
    v8 = v3;
    v9 = 2112;
    v10 = v4;
    _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "IDSReportiMessageSpam - %@  (toURI: %@)", (uint8_t *)&v7, 0x16u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "reportiMessageSpam:toURI:", v3, v4);

}

void IDSReportiMessageUnknownSender(void *a1, void *a2, void *a3, void *a4)
{
  IDSReportiMessageUnknownSenderWithBlackholeAndJunkStatus(a1, a2, 0, 0, a3, a4);
}

void IDSReportiMessageUnknownSenderWithBlackholeAndJunkStatus(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  const __CFString *v16;
  const __CFString *v17;
  void *v18;
  int v19;
  id v20;
  __int16 v21;
  id v22;
  __int16 v23;
  const __CFString *v24;
  __int16 v25;
  const __CFString *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a5;
  v14 = a6;
  if (_IDSRunningInDaemon())
    sub_1907E7D24();
  +[IDSTransportLog IDSReportSpam](IDSTransportLog, "IDSReportSpam");
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = CFSTR("NO");
    v19 = 138413570;
    v20 = v11;
    if ((_DWORD)a3)
      v17 = CFSTR("YES");
    else
      v17 = CFSTR("NO");
    if ((_DWORD)a4)
      v16 = CFSTR("YES");
    v21 = 2112;
    v22 = v12;
    v23 = 2112;
    v24 = v17;
    v25 = 2112;
    v26 = v16;
    v27 = 2112;
    v28 = v13;
    v29 = 2112;
    v30 = v14;
    _os_log_impl(&dword_1906E0000, v15, OS_LOG_TYPE_DEFAULT, "IDSReportiMessageUnknownSenderWithBlackholeAndJunkStatus - %@, %@, %@, %@, %@  (toURI: %@)", (uint8_t *)&v19, 0x3Eu);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "reportiMessageUnknownSender:messageID:isBlackholed:isJunked:messageServerTimestamp:toURI:", v11, v12, a3, a4, v13, v14);

}

void IDSReportiMessageUnknownSenderWithBlackholeStatus(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  IDSReportiMessageUnknownSenderWithBlackholeAndJunkStatus(a1, a2, a3, 0, a4, a5);
}

void IDSCheckiMessageUnknownSender(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  _BYTE *v18;
  IDSDaemonResponseHandler *v19;
  void *v20;
  void *v21;
  void *v22;
  _BYTE v23[24];
  void *v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (_IDSRunningInDaemon())
    sub_1907E7D4C();
  +[IDSTransportLog IDSReportSpam](IDSTransportLog, "IDSReportSpam");
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v23 = 138412546;
    *(_QWORD *)&v23[4] = v7;
    *(_WORD *)&v23[12] = 2112;
    *(_QWORD *)&v23[14] = v8;
    _os_log_impl(&dword_1906E0000, v11, OS_LOG_TYPE_DEFAULT, "IDSCheckiMessageUnknownSender (toURI: %@ Count: %@)", v23, 0x16u);
  }

  v12 = v9;
  v13 = v10;
  if (_IDSRunningInDaemon())
    sub_1907E7D74();
  v14 = (void *)MEMORY[0x19400FE1C](v12);
  *(_QWORD *)v23 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v23[8] = 3221225472;
  *(_QWORD *)&v23[16] = sub_190706640;
  v24 = &unk_1E2C604E8;
  v15 = v12;
  v25 = v15;
  v16 = v14;
  v17 = v13;
  v18 = v23;
  if (_IDSRunningInDaemon())
    sub_1907E7D9C();
  v19 = -[IDSDaemonResponseHandler initWithBlock:queue:]([IDSDaemonResponseHandler alloc], "initWithBlock:queue:", v16, v17);
  sub_1907066C4();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "scheduleTimeoutWithResponseHandler:timeoutInterval:timeoutBlock:", v19, v18, 60.0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (v21)
  {
    if (_IDSRunningInDaemon())
      sub_1907E7DC4();
    if (qword_1EE1E1EA8 != -1)
      dispatch_once(&qword_1EE1E1EA8, &unk_1E2C5FF50);
    +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "reportiMessageSpamCheckUnknown:count:requestID:", v7, v8, v21);

  }
}

void sub_190706640(uint64_t a1)
{
  id v2;
  id v3;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v3 = (id)objc_msgSend(v2, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D34730], -100, 0);
    (*(void (**)(double))(*(_QWORD *)(a1 + 32) + 16))(-1.0);

  }
}

id sub_1907066C4()
{
  if (qword_1EE1E1E58 != -1)
    dispatch_once(&qword_1EE1E1E58, &unk_1E2C5F7F0);
  return (id)qword_1EE1E1E80;
}

void sub_190706704()
{
  IDSDaemonRequestTimer *v0;
  void *v1;

  v0 = objc_alloc_init(IDSDaemonRequestTimer);
  v1 = (void *)qword_1EE1E1E80;
  qword_1EE1E1E80 = (uint64_t)v0;

}

void sub_19070672C()
{
  IDSReportiMessageSpamDaemonResponseListener *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v0 = [IDSReportiMessageSpamDaemonResponseListener alloc];
  sub_1907066C4();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = -[IDSReportiMessageSpamDaemonResponseListener initWithRequestTimer:](v0, "initWithRequestTimer:", v1);
  v3 = (void *)qword_1EE1E1EA0;
  qword_1EE1E1EA0 = v2;

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "listener");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addHandler:", qword_1EE1E1EA0);

}

void sub_190706E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190706E1C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 169);
  return result;
}

void sub_190706EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190706EF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 144), "copy");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_190706FAC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_callHandlersWithBlockOnIvarQueue:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_190707044(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_callHandlersWithBlockOnIvarQueue:", *(_QWORD *)(a1 + 40));
}

void sub_1907071F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190707208(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  int v8;

  objc_msgSend(a2, "objectForKey:", *MEMORY[0x1E0D35228]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;
    *a4 = 1;
  }
}

void sub_19070747C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "_removeAccountOnIvarQueue:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKey:", *(_QWORD *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setObject:forKey:", v3, *(_QWORD *)(a1 + 48));
    v2 = v3;
  }
  v4 = v2;
  objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 40));

}

void sub_1907074FC(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "accountAdded:", *(_QWORD *)(a1 + 32));

}

uint64_t sub_190707734(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removeAccountOnIvarQueue:", *(_QWORD *)(a1 + 40));
}

void sub_190707740(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "accountRemoved:", *(_QWORD *)(a1 + 32));

}

void sub_190707958(_QWORD *a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1[4] + 48), "objectForKey:", a1[5]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (id)objc_msgSend(v2, "mutableCopy");

  if (!v3)
    v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((objc_msgSend(v3, "containsObject:", a1[6]) & 1) == 0)
  {
    objc_msgSend(v3, "addObject:", a1[6]);
    objc_msgSend(*(id *)(a1[4] + 48), "setObject:forKey:", v3, a1[5]);
  }

}

void sub_1907079E4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "accountEnabled:onService:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190707BFC(_QWORD *a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1[4] + 48), "objectForKey:", a1[5]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (id)objc_msgSend(v2, "mutableCopy");

  if (!v3)
    v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (objc_msgSend(v3, "containsObject:", a1[6]))
  {
    objc_msgSend(v3, "removeObject:", a1[6]);
    objc_msgSend(*(id *)(a1[4] + 48), "setObject:forKey:", v3, a1[5]);
  }

}

void sub_190707C88(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "accountDisabled:onService:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190707F60(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "service:restrictionReasonChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190708170(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "_removeAccountOnIvarQueue:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKey:", *(_QWORD *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setObject:forKey:", v3, *(_QWORD *)(a1 + 48));
    v2 = v3;
  }
  v4 = v2;
  objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 40));

}

void sub_190708288(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "accountUpdated:", *(_QWORD *)(a1 + 32));

}

void sub_190708374(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:registrationStatusInfoChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190708460(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:aliasesChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070854C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:vettedAliasesChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190708638(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:profileChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190708724(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:loginChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190708810(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:displayNameChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190708A18(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  id v13;
  void *v14;
  NSObject *v15;
  void *v16;
  const __CFString *v17;
  void *v18;
  NSObject *v19;
  const __CFString *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  const __CFString *v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "objectForKey:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v3 = *(id *)(a1 + 48);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
  if (v4)
  {
    v5 = v4;
    v23 = *(_QWORD *)v25;
    v6 = *MEMORY[0x1E0D34678];
    v22 = *MEMORY[0x1E0D346D0];
    v21 = v3;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v25 != v23)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * i));
        objc_msgSend(*(id *)(a1 + 32), "_uniqueIDForDevice:", v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v2, "length"))
        {
          v10 = objc_msgSend(v9, "isEqualToIgnoringCase:", v2);
        }
        else
        {
          objc_msgSend(v8, "objectForKey:", v6);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = objc_msgSend(v11, "BOOLValue");

          if ((_DWORD)v10)
            v12 = v9 == 0;
          else
            v12 = 1;
          if (!v12)
          {
            if (*(_QWORD *)(a1 + 40))
            {
              objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "setObject:forKey:", v9);
              v13 = v9;

              objc_msgSend(v8, "objectForKey:", v22);
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              if (v14)
                objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "setObject:forKey:", v13, v14);
              objc_msgSend(MEMORY[0x1E0D36AA8], "activeID", v21);
              v15 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "objectForKey:", *(_QWORD *)(a1 + 40));
                v16 = (void *)objc_claimAutoreleasedReturnValue();
                v17 = *(const __CFString **)(a1 + 40);
                *(_DWORD *)buf = 138412546;
                v29 = v16;
                v30 = 2112;
                v31 = v17;
                _os_log_impl(&dword_1906E0000, v15, OS_LOG_TYPE_DEFAULT, "Found active device in dependent devices update, updating activeDevice ID to %@ for %@", buf, 0x16u);

                v3 = v21;
              }

              v10 = 1;
              v2 = v13;
            }
            else
            {
              v10 = 1;
            }
          }
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v10, v21);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setObject:forKey:", v18, v6);

        objc_msgSend(MEMORY[0x1E0D36AA8], "activeID");
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          v20 = CFSTR("NO");
          if ((_DWORD)v10)
            v20 = CFSTR("YES");
          v29 = v9;
          v30 = 2112;
          v31 = v20;
          _os_log_impl(&dword_1906E0000, v19, OS_LOG_TYPE_DEFAULT, "Dependent devices updated, setting %@ to (isActive: %@)", buf, 0x16u);
        }

        objc_msgSend(*(id *)(a1 + 56), "addObject:", v8);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    }
    while (v5);
  }

  if (*(_QWORD *)(a1 + 48) && *(_QWORD *)(a1 + 40))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setObject:forKey:", *(_QWORD *)(a1 + 56));

}

void sub_190708D9C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:dependentDevicesUpdated:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190709024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);
  _Block_object_dispose((const void *)(v33 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19070905C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  void *v34;
  void *v35;
  void *v36;
  char v37;
  NSObject *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  NSObject *v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  NSObject *v49;
  uint64_t v50;
  id v51;
  NSObject *v52;
  id v53;
  void *v54;
  uint64_t v55;
  void *v56;
  NSObject *v57;
  void *v58;
  id v59;
  void *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[128];
  uint8_t v70[128];
  uint8_t buf[4];
  void *v72;
  __int16 v73;
  id v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 40))
    return;
  v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", *(_QWORD *)(a1 + 32));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  objc_msgSend(*(id *)(a1 + 48), "_uniqueIDForDevice:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  v5 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "objectForKey:", *MEMORY[0x1E0D346D0]);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  v9 = objc_alloc(MEMORY[0x1E0C99DE8]);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 56), "objectForKey:", *(_QWORD *)(a1 + 40));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v9, "initWithArray:", v10);

  objc_msgSend(MEMORY[0x1E0D36AA8], "activeID");
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v72 = v13;
    v73 = 2112;
    v74 = v11;
    _os_log_impl(&dword_1906E0000, v12, OS_LOG_TYPE_DEFAULT, "Current devices for account %@: %@", buf, 0x16u);
  }
  v60 = (void *)v5;

  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v14 = v11;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
  if (v15)
  {
    v16 = v15;
    v17 = 0;
    v18 = 0;
    v19 = *(_QWORD *)v66;
    v20 = *MEMORY[0x1E0D34648];
    do
    {
      v21 = v14;
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v66 != v19)
          objc_enumerationMutation(v21);
        v23 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 48), "_uniqueIDForDevice:", v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18 || !objc_msgSend(v60, "isEqualToIgnoringCase:", v24))
        {
          if ((v17 & 1) != 0)
          {
            v17 = 1;
          }
          else
          {
            objc_msgSend(v23, "objectForKey:", v20);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = objc_msgSend(v25, "BOOLValue");

          }
        }
        else
        {
          v18 = v23;
        }

      }
      v14 = v21;
      v16 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
    }
    while (v16);
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }

  v26 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(*(_QWORD *)(v26 + 8) + 40))
  {
    v27 = v60;
    if ((v17 & 1) == 0)
    {
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 64), "objectForKey:", *(_QWORD *)(*(_QWORD *)(v26 + 8) + 40));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v61, v69, 16);
      if (v29)
      {
        v30 = v29;
        v59 = v14;
        v31 = *(_QWORD *)v62;
        v32 = *MEMORY[0x1E0D34648];
        while (2)
        {
          for (j = 0; j != v30; ++j)
          {
            if (*(_QWORD *)v62 != v31)
              objc_enumerationMutation(v28);
            v34 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * j);
            objc_msgSend(*(id *)(a1 + 48), "_uniqueIDForDevice:", v34, v59);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v27, "isEqualToString:", v35) & 1) != 0)
            {

            }
            else
            {
              objc_msgSend(v34, "objectForKey:", v32);
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              v37 = objc_msgSend(v36, "BOOLValue");

              if ((v37 & 1) != 0)
              {
                v17 = 1;
                v27 = v60;
                goto LABEL_34;
              }
            }
            v27 = v60;
          }
          v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v61, v69, 16);
          if (v30)
            continue;
          break;
        }
        v17 = 0;
LABEL_34:
        v14 = v59;
      }
      else
      {
        v17 = 0;
      }

    }
  }
  else
  {
    v27 = v60;
  }
  if (v18)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "warning");
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      sub_1907E827C();

    objc_msgSend(v14, "removeObject:", v18);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 120), "objectForKey:", *(_QWORD *)(a1 + 40));
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v39, "length"))
  {
    if ((v17 & 1) != 0)
    {
      v48 = v14;
      objc_msgSend(MEMORY[0x1E0D36AA8], "activeID");
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v72 = v27;
        _os_log_impl(&dword_1906E0000, v49, OS_LOG_TYPE_DEFAULT, "Local device added %@, we'll trigger didSwitchActivePairedDevice callback since we already had a locally paired device", buf, 0xCu);
      }

      v50 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v51 = v27;
      v52 = *(NSObject **)(v50 + 40);
      *(_QWORD *)(v50 + 40) = v51;
      v14 = v48;
    }
    else
    {
      if (v27)
      {
        if (*(_QWORD *)(a1 + 40))
        {
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 120), "setObject:forKey:", v27);
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 128), "setObject:forKey:", v27);
        }
      }
      v53 = v27;

      objc_msgSend(MEMORY[0x1E0D36AA8], "activeID");
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 120), "objectForKey:", *(_QWORD *)(a1 + 40));
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v72 = v54;
        _os_log_impl(&dword_1906E0000, v52, OS_LOG_TYPE_DEFAULT, "Local device added, updating activeDevice ID to %@", buf, 0xCu);

      }
      v39 = v53;
    }

    v55 = objc_msgSend(v27, "isEqualToIgnoringCase:", v39);
    v56 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v55);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v56, "setObject:forKey:", v47, *MEMORY[0x1E0D34678]);
    goto LABEL_59;
  }
  v40 = objc_msgSend(v27, "isEqualToIgnoringCase:", v39);
  v41 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v40);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "setObject:forKey:", v42, *MEMORY[0x1E0D34678]);

  if ((v40 & 1) == 0)
  {
    v43 = v14;
    objc_msgSend(MEMORY[0x1E0D36AA8], "activeID");
    v44 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v72 = v27;
      v73 = 2112;
      v74 = v39;
      _os_log_impl(&dword_1906E0000, v44, OS_LOG_TYPE_DEFAULT, "Local device added %@, we'll trigger didSwitchActivePairedDevice callback since we already have an active device %@", buf, 0x16u);
    }

    v45 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v46 = v27;
    v47 = *(void **)(v45 + 40);
    *(_QWORD *)(v45 + 40) = v46;
    v14 = v43;
LABEL_59:

  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 56), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
  objc_msgSend(v14, "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 56), "setObject:forKey:", v14, *(_QWORD *)(a1 + 40));
  objc_msgSend(MEMORY[0x1E0D36AA8], "activeID");
  v57 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
  {
    v58 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v72 = v58;
    v73 = 2112;
    v74 = v14;
    _os_log_impl(&dword_1906E0000, v57, OS_LOG_TYPE_DEFAULT, "New devices for account %@: %@", buf, 0x16u);
  }

}

void sub_1907097A8(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:localDeviceAdded:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

uint64_t sub_1907097F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_internalDidSwitchActivePairedDevice:forService:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_190709900(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32) && *(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 56), "objectForKey:");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (void *)objc_msgSend(v2, "mutableCopy");

    if (v3)
    {
      v4 = objc_alloc_init(MEMORY[0x1E0CB3788]);
      objc_msgSend(*(id *)(a1 + 48), "_uniqueIDForDevice:", *(_QWORD *)(a1 + 40));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = sub_190709B14;
      v12[3] = &unk_1E2C61298;
      v12[4] = *(_QWORD *)(a1 + 48);
      v6 = v5;
      v13 = v6;
      v7 = v4;
      v14 = v7;
      objc_msgSend(v3, "enumerateObjectsUsingBlock:", v12);
      objc_msgSend(v3, "removeObjectsAtIndexes:", v7);
      if (*(_QWORD *)(a1 + 32))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 56), "setObject:forKey:", v3);
        v8 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        v8 = 0;
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 120), "objectForKey:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v9, "isEqualToIgnoringCase:", v6))
      {
        objc_msgSend(MEMORY[0x1E0D36AA8], "activeID");
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v16 = v9;
          _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Active device was removed, clearing active uniqueID %@", buf, 0xCu);
        }

        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 120), "removeObjectForKey:", *(_QWORD *)(a1 + 32));
        objc_msgSend(*(id *)(a1 + 40), "objectForKey:", *MEMORY[0x1E0D346D0]);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 128), "removeObjectForKey:", v11);

      }
    }

  }
}

void sub_190709B14(id *a1, uint64_t a2, uint64_t a3)
{
  id v5;

  objc_msgSend(a1[4], "_uniqueIDForDevice:", a2);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(a1[5], "isEqualToIgnoringCase:"))
    objc_msgSend(a1[6], "addIndex:", a3);

}

void sub_190709B70(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:localDeviceRemoved:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190709D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_190709D24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  void *v31;
  void *v32;
  char v33;
  __CFString *v34;
  __CFString *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  NSObject *v41;
  uint64_t v42;
  id v43;
  NSObject *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t j;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  void *v56;
  BOOL v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t k;
  __CFString *v63;
  NSObject *v64;
  void *v65;
  const __CFString *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t m;
  __CFString *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  const __CFString *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _BYTE v104[128];
  _BYTE v105[128];
  uint8_t v106[128];
  uint8_t buf[4];
  void *v108;
  __int16 v109;
  const __CFString *v110;
  _BYTE v111[128];
  _BYTE v112[128];
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 40))
    return;
  v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", *(_QWORD *)(a1 + 32));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  objc_msgSend(*(id *)(a1 + 48), "_uniqueIDForDevice:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 64), "objectForKey:", *(_QWORD *)(a1 + 40));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "mutableCopy");
  v8 = v7;
  if (v7)
    v9 = v7;
  else
    v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v10 = v9;

  v11 = objc_msgSend(v10, "count");
  v12 = (uint64_t *)MEMORY[0x1E0D34648];
  v13 = v11 - 1;
  v83 = v10;
  if (v11 - 1 < 0)
    goto LABEL_18;
  LOBYTE(v14) = 0;
  v15 = *MEMORY[0x1E0D34648];
  while (1)
  {
    objc_msgSend(v10, "objectAtIndex:", v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "_uniqueIDForDevice:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v5, "isEqualToString:", v17);

    if (v18)
    {
      objc_msgSend(v10, "removeObjectAtIndex:", v13);
      goto LABEL_14;
    }
    if ((v14 & 1) == 0)
      break;

    v14 = 1;
    if (v13 <= 0)
      goto LABEL_39;
LABEL_15:
    --v13;
  }
  objc_msgSend(v16, "objectForKey:", v15);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v14) = objc_msgSend(v19, "BOOLValue");

LABEL_14:
  if (v13 >= 1)
    goto LABEL_15;
  if ((v14 & 1) != 0)
  {
    v14 = 1;
    goto LABEL_39;
  }
LABEL_18:
  v102 = 0u;
  v103 = 0u;
  v100 = 0u;
  v101 = 0u;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 48), "objectForKey:", *(_QWORD *)(a1 + 40));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v80 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v100, v112, 16);
  if (v80)
  {
    v21 = *(_QWORD *)v101;
    v22 = *v12;
    v82 = v20;
    v79 = *(_QWORD *)v101;
    do
    {
      v23 = 0;
      do
      {
        if (*(_QWORD *)v101 != v21)
          objc_enumerationMutation(v20);
        v81 = v23;
        v24 = *(_QWORD *)(*((_QWORD *)&v100 + 1) + 8 * v23);
        v96 = 0u;
        v97 = 0u;
        v98 = 0u;
        v99 = 0u;
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 56), "objectForKey:", v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v96, v111, 16);
        if (v26)
        {
          v27 = v26;
          v28 = *(_QWORD *)v97;
          while (2)
          {
            for (i = 0; i != v27; ++i)
            {
              if (*(_QWORD *)v97 != v28)
                objc_enumerationMutation(v25);
              v30 = *(void **)(*((_QWORD *)&v96 + 1) + 8 * i);
              objc_msgSend(*(id *)(a1 + 48), "_uniqueIDForDevice:", v30);
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v31, "isEqualToString:", v5))
              {

              }
              else
              {
                objc_msgSend(v30, "objectForKey:", v22);
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                v33 = objc_msgSend(v32, "BOOLValue");

                if ((v33 & 1) != 0)
                {

                  v14 = 1;
                  v20 = v82;
                  v10 = v83;
                  goto LABEL_38;
                }
              }
            }
            v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v96, v111, 16);
            if (v27)
              continue;
            break;
          }
        }

        v23 = v81 + 1;
        v20 = v82;
        v10 = v83;
        v21 = v79;
      }
      while (v81 + 1 != v80);
      v14 = 0;
      v80 = objc_msgSend(v82, "countByEnumeratingWithState:objects:count:", &v100, v112, 16);
    }
    while (v80);
  }
  else
  {
    v14 = 0;
  }
LABEL_38:

LABEL_39:
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 128), "objectForKey:", *(_QWORD *)(a1 + 40));
  v34 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v35 = v34;
  if (!*(_BYTE *)(a1 + 72))
  {
    if (-[__CFString isEqualToIgnoringCase:](v34, "isEqualToIgnoringCase:", v5))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 128), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 48), "objectForKey:", *(_QWORD *)(a1 + 40));
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v84, v104, 16);
      if (v46)
      {
        v47 = v46;
        v48 = *(_QWORD *)v85;
        do
        {
          for (j = 0; j != v47; ++j)
          {
            if (*(_QWORD *)v85 != v48)
              objc_enumerationMutation(v45);
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 120), "removeObjectForKey:", *(_QWORD *)(*((_QWORD *)&v84 + 1) + 8 * j));
          }
          v47 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v84, v104, 16);
        }
        while (v47);
      }

      v10 = v83;
    }
    goto LABEL_98;
  }
  v36 = *(unsigned __int8 *)(a1 + 73);
  v37 = -[__CFString length](v34, "length");
  if (!v36)
  {
    if (v37)
    {
      v50 = objc_msgSend(v5, "isEqualToIgnoringCase:", v35);
      v51 = *MEMORY[0x1E0D34678];
LABEL_57:
      v10 = v83;
      goto LABEL_92;
    }
    v51 = *MEMORY[0x1E0D34678];
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "objectForKey:", *MEMORY[0x1E0D34678]);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = objc_msgSend(v56, "BOOLValue");

    if ((_DWORD)v50)
      v57 = v5 == 0;
    else
      v57 = 1;
    v10 = v83;
    if (!v57)
    {
      if (*(_QWORD *)(a1 + 40))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 128), "setObject:forKey:", v5);
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 48), "objectForKey:", *(_QWORD *)(a1 + 40));
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v88, v105, 16);
        if (v59)
        {
          v60 = v59;
          v61 = *(_QWORD *)v89;
          do
          {
            for (k = 0; k != v60; ++k)
            {
              if (*(_QWORD *)v89 != v61)
                objc_enumerationMutation(v58);
              objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 120), "setObject:forKey:", v5, *(_QWORD *)(*((_QWORD *)&v88 + 1) + 8 * k));
            }
            v60 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v88, v105, 16);
          }
          while (v60);
        }

        v63 = v5;
        objc_msgSend(MEMORY[0x1E0D36AA8], "activeID");
        v64 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 128), "objectForKey:", *(_QWORD *)(a1 + 40));
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          v66 = *(const __CFString **)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          v108 = v65;
          v109 = 2112;
          v110 = v66;
          _os_log_impl(&dword_1906E0000, v64, OS_LOG_TYPE_DEFAULT, "Found active device in tinker device update, updating activeDevice ID to %@ for %@", buf, 0x16u);

        }
        v50 = 1;
        v35 = v63;
        goto LABEL_57;
      }
      v50 = 1;
    }
LABEL_92:
    v76 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v50);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v76, "setObject:forKey:", v77, v51);

    objc_msgSend(MEMORY[0x1E0D36AA8], "activeID");
    v44 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      v78 = CFSTR("NO");
      if ((_DWORD)v50)
        v78 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v108 = v5;
      v109 = 2112;
      v110 = v78;
      _os_log_impl(&dword_1906E0000, v44, OS_LOG_TYPE_DEFAULT, "Tinker device updated, setting %@ to (isActive: %@)", buf, 0x16u);
    }
    goto LABEL_96;
  }
  v10 = v83;
  if (!v37)
  {
    if (v14)
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "activeID");
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v108 = v5;
        _os_log_impl(&dword_1906E0000, v52, OS_LOG_TYPE_DEFAULT, "Tinker device added %@, we'll trigger didSwitchActivePairedDevice callback since we already had a locally paired device", buf, 0xCu);
      }

      v53 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v54 = v5;
      v55 = *(NSObject **)(v53 + 40);
      *(_QWORD *)(v53 + 40) = v54;
      v10 = v83;
    }
    else
    {
      if (v5 && *(_QWORD *)(a1 + 40))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 128), "setObject:forKey:", v5);
        v94 = 0u;
        v95 = 0u;
        v92 = 0u;
        v93 = 0u;
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 48), "objectForKey:", *(_QWORD *)(a1 + 40));
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        v68 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v92, v106, 16);
        if (v68)
        {
          v69 = v68;
          v70 = *(_QWORD *)v93;
          do
          {
            for (m = 0; m != v69; ++m)
            {
              if (*(_QWORD *)v93 != v70)
                objc_enumerationMutation(v67);
              objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 120), "setObject:forKey:", v5, *(_QWORD *)(*((_QWORD *)&v92 + 1) + 8 * m));
            }
            v69 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v92, v106, 16);
          }
          while (v69);
        }

        v10 = v83;
      }
      v72 = v5;

      objc_msgSend(MEMORY[0x1E0D36AA8], "activeID");
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 128), "objectForKey:", *(_QWORD *)(a1 + 40));
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v108 = v73;
        _os_log_impl(&dword_1906E0000, v55, OS_LOG_TYPE_DEFAULT, "Tinker device added, updating activeDevice ID to %@", buf, 0xCu);

      }
      v35 = v72;
    }

    v74 = objc_msgSend(v5, "isEqualToIgnoringCase:", v35);
    v75 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v74);
    v44 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v75, "setObject:forKey:", v44, *MEMORY[0x1E0D34678]);
LABEL_96:

    goto LABEL_97;
  }
  v38 = objc_msgSend(v5, "isEqualToIgnoringCase:", v35);
  v39 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v38);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "setObject:forKey:", v40, *MEMORY[0x1E0D34678]);

  if ((v38 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "activeID");
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v108 = v5;
      v109 = 2112;
      v110 = v35;
      _os_log_impl(&dword_1906E0000, v41, OS_LOG_TYPE_DEFAULT, "Tinker device added %@, we'll trigger didSwitchActivePairedDevice callback since we already have an active device %@", buf, 0x16u);
    }

    v42 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v43 = v5;
    v44 = *(NSObject **)(v42 + 40);
    *(_QWORD *)(v42 + 40) = v43;
    v10 = v83;
    goto LABEL_96;
  }
LABEL_97:
  objc_msgSend(v10, "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
LABEL_98:
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 64), "setObject:forKey:", v10, *(_QWORD *)(a1 + 40));

}

void sub_19070A8C4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "service:tinkerDeviceAdded:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

uint64_t sub_19070A910(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_internalDidSwitchActivePairedDevice:forService:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_19070AA68(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "service:tinkerDeviceRemoved:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070ABFC(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "service:tinkerDeviceUpdated:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070AE9C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "service:familyInfoUpdated:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070AFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19070AFF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 72), "objectForKey:", a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19070B0FC(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  void *context;
  id obj;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  context = (void *)MEMORY[0x19400FC60]();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "objectForKey:", *(_QWORD *)(a1 + 40));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0D34728]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  obj = v2;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v32;
    v8 = *MEMORY[0x1E0D34710];
    v9 = *MEMORY[0x1E0D34718];
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v32 != v7)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
        objc_msgSend(v11, "objectForKey:", v8);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "objectForKey:", v9);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "setObject:forKey:", v12, v13);

        objc_msgSend(v11, "objectForKey:", v8);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v14, "_appearsToBeEmail") & 1) != 0)
          v15 = IDSCopyIDForEmailAddress();
        else
          v15 = IDSCopyIDForPhoneNumber();
        v16 = (void *)v15;

        objc_msgSend(v4, "addObject:", v16);
      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    }
    while (v6);
  }

  +[IDSIDQueryController sharedInstance](IDSIDQueryController, "sharedInstance");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = sub_19070B3C8;
  v25[3] = &unk_1E2C61310;
  v19 = *(void **)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v26 = v19;
  v27 = *(id *)(a1 + 48);
  v28 = v3;
  v29 = obj;
  v30 = *(id *)(a1 + 56);
  v20 = obj;
  v21 = v3;
  objc_msgSend(v17, "refreshIDStatusForDestinations:service:listenerID:queue:completionBlock:", v4, v19, v18, MEMORY[0x1E0C80D38], v25);

  objc_autoreleasePoolPop(context);
}

void sub_19070B3C8(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  int v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  uint64_t v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * i);
        objc_msgSend(v4, "objectForKeyedSubscript:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isEqualToNumber:", &unk_1E2CAE180);

        if (v11)
        {
          objc_msgSend(v3, "addObject:", v9);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v26 = v9;
            _os_log_impl(&dword_1906E0000, v12, OS_LOG_TYPE_DEFAULT, "ID status not valid for %@", buf, 0xCu);
          }

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
    }
    while (v6);
  }

  +[IDSIDQueryController sharedInstance](IDSIDQueryController, "sharedInstance");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_19070B624;
  v17[3] = &unk_1E2C612E8;
  v18 = *(id *)(a1 + 48);
  v19 = *(id *)(a1 + 56);
  v20 = *(id *)(a1 + 64);
  objc_msgSend(v13, "currentRemoteDevicesForDestinations:service:listenerID:queue:completionBlock:", v3, v14, v15, MEMORY[0x1E0C80D38], v17);

}

void sub_19070B624(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v40;
  id obj;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  _BYTE v59[128];
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  obj = v2;
  v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v60, 16);
  if (v40)
  {
    v37 = *(_QWORD *)v55;
    v4 = *MEMORY[0x1E0D34700];
    v38 = v3;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v55 != v37)
          objc_enumerationMutation(obj);
        v44 = v5;
        v6 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * v5);
        v7 = *(void **)(a1 + 32);
        objc_msgSend(v6, "_stripFZIDPrefix");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "allKeysForObject:", v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "objectAtIndexedSubscript:", 0);
        v42 = (id)objc_claimAutoreleasedReturnValue();

        objc_msgSend(obj, "objectForKeyedSubscript:", v6);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v12 = v10;
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v50, v59, 16);
        if (v13)
        {
          v14 = v13;
          v15 = *(_QWORD *)v51;
          do
          {
            for (i = 0; i != v14; ++i)
            {
              if (*(_QWORD *)v51 != v15)
                objc_enumerationMutation(v12);
              v17 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * i);
              objc_msgSend(v17, "familyEndpointData");
              v18 = (void *)objc_claimAutoreleasedReturnValue();

              if (v18)
              {
                v19 = objc_alloc(MEMORY[0x1E0C99E08]);
                objc_msgSend(v17, "familyEndpointData");
                v20 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v20, "dictionaryRepresentation");
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                v22 = (void *)objc_msgSend(v19, "initWithDictionary:", v21);

                objc_msgSend(v6, "_stripFZIDPrefix");
                v23 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v22, "setObject:forKey:", v23, v4);

                objc_msgSend(v11, "addObject:", v22);
              }
            }
            v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v50, v59, 16);
          }
          while (v14);
        }

        v3 = v38;
        objc_msgSend(v38, "setObject:forKey:", v11, v42);

        v5 = v44 + 1;
      }
      while (v44 + 1 != v40);
      v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v60, 16);
    }
    while (v40);
  }

  v24 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v43 = *(id *)(a1 + 40);
  v25 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v46, v58, 16);
  if (v25)
  {
    v26 = v25;
    v27 = *(_QWORD *)v47;
    v28 = *MEMORY[0x1E0D34718];
    v45 = *MEMORY[0x1E0D34720];
    do
    {
      for (j = 0; j != v26; ++j)
      {
        if (*(_QWORD *)v47 != v27)
          objc_enumerationMutation(v43);
        v30 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * j);
        v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v30);
        objc_msgSend(v30, "objectForKeyedSubscript:", v28);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "objectForKeyedSubscript:", v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        if (v33)
        {
          objc_msgSend(v30, "objectForKeyedSubscript:", v28);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "objectForKeyedSubscript:", v34);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "setObject:forKey:", v35, v45);

        }
        v36 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D34D38]), "initWithDictionary:", v31);
        objc_msgSend(v24, "addObject:", v36);

      }
      v26 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v46, v58, 16);
    }
    while (v26);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_19070BB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19070BB9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 88), "objectForKey:", a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19070BCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19070BCE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 96), "objectForKey:", a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19070BDD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_19070BDE8(_QWORD *a1)
{
  id v2;

  objc_msgSend(*(id *)(a1[4] + 104), "objectForKey:", a1[5]);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = objc_msgSend(v2, "integerValue");

}

void sub_19070BEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19070BED4(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 32) + 160);
  return result;
}

void sub_19070BF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19070BFAC(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 152));
}

void sub_19070C060(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "registrationFailedForAccount:needsDeletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070C180(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "refreshRegistrationForAccount:", *(_QWORD *)(a1 + 32));

}

void sub_19070C2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19070C2EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 56), "objectForKey:", a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19070C430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19070C448(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 64), "objectForKey:", a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19070C57C(id *a1)
{
  NSObject *v2;
  id v3;
  id v4;
  __int128 v5;
  uint64_t i;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  id v19;
  void *v20;
  NSObject *v21;
  id v22;
  __int128 v23;
  id obj;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD v29[5];
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint8_t v40[128];
  uint8_t buf[4];
  id v42;
  __int16 v43;
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  +[IDSLogging DaemonListener](IDSLogging, "DaemonListener");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[4];
    v4 = a1[5];
    *(_DWORD *)buf = 138412546;
    v42 = v3;
    v43 = 2112;
    v44 = v4;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Checking for updates for device with new nsuuid { nsuuid: %@, device: %@}", buf, 0x16u);
  }

  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  objc_msgSend(*((id *)a1[6] + 7), "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  if (v27)
  {
    v26 = *(_QWORD *)v36;
    v25 = *MEMORY[0x1E0D346A0];
    *(_QWORD *)&v5 = 138412546;
    v23 = v5;
    do
    {
      for (i = 0; i != v27; ++i)
      {
        if (*(_QWORD *)v36 != v26)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
        objc_msgSend(*((id *)a1[6] + 7), "objectForKey:", v7, v23);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v8, "count"))
        {
          v28 = (void *)objc_msgSend(v8, "mutableCopy");
          v31 = 0u;
          v32 = 0u;
          v33 = 0u;
          v34 = 0u;
          v9 = v8;
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
          if (v10)
          {
            v11 = v10;
            v12 = *(_QWORD *)v32;
LABEL_11:
            v13 = 0;
            while (1)
            {
              if (*(_QWORD *)v32 != v12)
                objc_enumerationMutation(v9);
              v14 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * v13);
              objc_msgSend(a1[6], "_uniqueIDForDevice:", v14);
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(a1[5], "isEqualToIgnoringCase:", v15))
                break;

              if (v11 == ++v13)
              {
                v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
                if (v11)
                  goto LABEL_11;
                goto LABEL_20;
              }
            }
            v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v14);
            objc_msgSend(v16, "objectForKey:", v25);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(a1[4], "isEqualToString:", v17) & 1) != 0
              || !objc_msgSend(a1[4], "length") && !objc_msgSend(v17, "length"))
            {

              goto LABEL_20;
            }
            v20 = v28;
            if (objc_msgSend(a1[4], "length"))
              objc_msgSend(v16, "setObject:forKey:", a1[4], v25);
            else
              objc_msgSend(v16, "removeObjectForKey:", v25);
            objc_msgSend(v28, "removeObject:", v14);
            objc_msgSend(v28, "addObject:", v16);

            objc_msgSend(*((id *)a1[6] + 7), "removeObjectForKey:", v7);
            objc_msgSend(*((id *)a1[6] + 7), "setObject:forKey:", v28, v7);
            objc_msgSend(MEMORY[0x1E0D36AA8], "IDSService_oversized");
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = v23;
              v42 = v7;
              v43 = 2112;
              v44 = v28;
              _os_log_impl(&dword_1906E0000, v21, OS_LOG_TYPE_DEFAULT, "New devices for account %@: %@", buf, 0x16u);
            }

            v22 = a1[6];
            v29[0] = MEMORY[0x1E0C809B0];
            v29[1] = 3221225472;
            v29[2] = sub_19070C9F8;
            v29[3] = &unk_1E2C61220;
            v29[4] = v7;
            v30 = v28;
            objc_msgSend(v22, "_callHandlersAsyncWithBlock:", v29);

          }
          else
          {
LABEL_20:

            objc_msgSend(MEMORY[0x1E0D36AA8], "NSUUID");
            v18 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              v19 = a1[5];
              *(_DWORD *)buf = 138412290;
              v42 = v19;
              _os_log_impl(&dword_1906E0000, v18, OS_LOG_TYPE_DEFAULT, "No account with device %@ and mismatched nsuuid were found.  No updates made", buf, 0xCu);
            }

            v20 = v28;
          }

        }
      }
      v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
    }
    while (v27);
  }

}

void sub_19070C9F8(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:dependentDevicesUpdated:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070CB90(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint8_t buf[4];
  uint64_t v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "allKeys");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v12;
    *(_QWORD *)&v4 = 138412290;
    v10 = v4;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v2);
        v8 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v7);
        objc_msgSend(MEMORY[0x1E0D36AA8], "isActive", v10);
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v10;
          v16 = v8;
          _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "Calling didSwitch for topic %@", buf, 0xCu);
        }

        objc_msgSend(*(id *)(a1 + 32), "_internalDidSwitchActivePairedDevice:forService:", *(_QWORD *)(a1 + 40), v8);
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
    }
    while (v5);
  }

}

void sub_19070CE30(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_19070CE48(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  const __CFString *v6;
  char v7;
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  id v11;
  __int16 v12;
  const __CFString *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v7 = 1;
    objc_msgSend(v3, "didSwitchActivePairedDevice:forService:wasHandled:", a1[4], a1[5], &v7);
    if (v7)
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
    objc_msgSend(MEMORY[0x1E0D36AA8], "isActive");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = a1[5];
      if (v7)
        v6 = CFSTR("YES");
      else
        v6 = CFSTR("NO");
      *(_DWORD *)buf = 138412802;
      v9 = v5;
      v10 = 2112;
      v11 = v3;
      v12 = 2112;
      v13 = v6;
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "DidSwitch callback for %@ (handler %@) was handled %@", buf, 0x20u);
    }

  }
}

void sub_19070CF74(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;
  id v8;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_19070D00C;
    v5[3] = &unk_1E2C602B8;
    v2 = *(void **)(a1 + 32);
    v3 = *(id *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 32);
    v6 = v3;
    v7 = v4;
    v8 = *(id *)(a1 + 48);
    objc_msgSend(v2, "_performSyncBlock:", v5);

  }
}

void sub_19070D00C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t v17[128];
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "isActive");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v19 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Unhandled didSwitch callback for topic %@", buf, 0xCu);
  }

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "objectForKey:", *(_QWORD *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D36AA8], "isActive");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v19 = v4;
    _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "Updating isActive state for all accounts %@", buf, 0xCu);
  }

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    v10 = *MEMORY[0x1E0D35228];
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v11), "objectForKey:", v10, (_QWORD)v13);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "_internalSwitchActivePairedDevice:forAccount:", *(_QWORD *)(a1 + 48), v12);

        ++v11;
      }
      while (v8 != v11);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

  objc_msgSend(*(id *)(a1 + 40), "_internalSwitchActivePairedDevice:forService:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

uint64_t sub_19070D33C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_internalSwitchActivePairedDevice:forService:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_19070D850(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_internalSwitchActivePairedDevice:forAccount:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_19070DC70(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  void *v34;
  void *v35;
  NSObject *v36;
  void *v37;
  id v38;
  id obj;
  id obja;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[5];
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[5];
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[128];
  _BYTE v71[128];
  uint8_t v72[128];
  uint8_t buf[4];
  uint64_t v74;
  __int16 v75;
  void *v76;
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "isActive");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Unsetting active device unique ID due to quick switch or new pairing start", buf, 2u);
  }

  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v49 = a1;
  v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v66, v77, 16);
  if (v43)
  {
    v41 = *(_QWORD *)v67;
    v3 = *MEMORY[0x1E0D34678];
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v67 != v41)
          objc_enumerationMutation(obj);
        v47 = v4;
        v5 = *(_QWORD *)(*((_QWORD *)&v66 + 1) + 8 * v4);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "removeObjectForKey:", v5);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectForKey:", v5);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = (void *)objc_msgSend(v6, "mutableCopy");

        objc_msgSend(MEMORY[0x1E0D36AA8], "isActive");
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          v74 = v5;
          v75 = 2112;
          v76 = v7;
          _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "Current devices for account %@: %@", buf, 0x16u);
        }
        v45 = v5;

        v9 = (void *)objc_msgSend(v7, "mutableCopy");
        v62 = 0u;
        v63 = 0u;
        v64 = 0u;
        v65 = 0u;
        v10 = v9;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v62, v72, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v63;
          do
          {
            for (i = 0; i != v12; ++i)
            {
              if (*(_QWORD *)v63 != v13)
                objc_enumerationMutation(v10);
              v15 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * i);
              v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v15);
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "setObject:forKey:", v17, v3);

              objc_msgSend(v7, "removeObject:", v15);
              objc_msgSend(v7, "addObject:", v16);

            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v62, v72, 16);
          }
          while (v12);
        }

        a1 = v49;
        if (v45 && v7)
        {
          objc_msgSend(*(id *)(*(_QWORD *)(v49 + 32) + 56), "setObject:forKey:", v7, v45);
          objc_msgSend(MEMORY[0x1E0D36AA8], "isActive");
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            v74 = v45;
            v75 = 2112;
            v76 = v7;
            _os_log_impl(&dword_1906E0000, v18, OS_LOG_TYPE_DEFAULT, "New devices for account %@: %@", buf, 0x16u);
          }

        }
        v19 = *(void **)(v49 + 32);
        v60[0] = MEMORY[0x1E0C809B0];
        v60[1] = 3221225472;
        v60[2] = sub_19070E384;
        v60[3] = &unk_1E2C61220;
        v60[4] = v45;
        v61 = v7;
        v20 = v7;
        objc_msgSend(v19, "_callHandlersAsyncWithBlock:", v60);

        v4 = v47 + 1;
      }
      while (v47 + 1 != v43);
      v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v66, v77, 16);
    }
    while (v43);
  }

  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "allKeys");
  obja = (id)objc_claimAutoreleasedReturnValue();
  v44 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v56, v71, 16);
  if (v44)
  {
    v42 = *(_QWORD *)v57;
    v21 = *MEMORY[0x1E0D34678];
    do
    {
      v22 = 0;
      do
      {
        if (*(_QWORD *)v57 != v42)
          objc_enumerationMutation(obja);
        v48 = v22;
        v23 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * v22);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "removeObjectForKey:", v23);
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "objectForKey:", v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = (void *)objc_msgSend(v24, "mutableCopy");

        objc_msgSend(MEMORY[0x1E0D36AA8], "isActive");
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          v74 = v23;
          v75 = 2112;
          v76 = v25;
          _os_log_impl(&dword_1906E0000, v26, OS_LOG_TYPE_DEFAULT, "Current linked devices for service %@: %@", buf, 0x16u);
        }
        v46 = v23;

        v27 = (void *)objc_msgSend(v25, "mutableCopy");
        v52 = 0u;
        v53 = 0u;
        v54 = 0u;
        v55 = 0u;
        v28 = v27;
        v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v52, v70, 16);
        if (v29)
        {
          v30 = v29;
          v31 = *(_QWORD *)v53;
          do
          {
            for (j = 0; j != v30; ++j)
            {
              if (*(_QWORD *)v53 != v31)
                objc_enumerationMutation(v28);
              v33 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * j);
              v34 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v33);
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "setObject:forKey:", v35, v21);

              objc_msgSend(v25, "removeObject:", v33);
              objc_msgSend(v25, "addObject:", v34);

            }
            v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v52, v70, 16);
          }
          while (v30);
        }

        a1 = v49;
        if (v46 && v25)
        {
          objc_msgSend(*(id *)(*(_QWORD *)(v49 + 32) + 64), "setObject:forKey:", v25, v46);
          objc_msgSend(MEMORY[0x1E0D36AA8], "isActive");
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            v74 = v46;
            v75 = 2112;
            v76 = v25;
            _os_log_impl(&dword_1906E0000, v36, OS_LOG_TYPE_DEFAULT, "New linked devices for service %@: %@", buf, 0x16u);
          }

        }
        v37 = *(void **)(v49 + 32);
        v50[0] = MEMORY[0x1E0C809B0];
        v50[1] = 3221225472;
        v50[2] = sub_19070E3D0;
        v50[3] = &unk_1E2C61220;
        v50[4] = v46;
        v51 = v25;
        v38 = v25;
        objc_msgSend(v37, "_callHandlersAsyncWithBlock:", v50);

        v22 = v48 + 1;
      }
      while (v48 + 1 != v44);
      v44 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v56, v71, 16);
    }
    while (v44);
  }

}

void sub_19070E384(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:dependentDevicesUpdated:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070E3D0(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "service:linkedDevicesUpdated:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070E41C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "accountsChanged:forTopic:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070E468(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "accountsChanged:forTopic:", 0, *(_QWORD *)(a1 + 32));

}

void sub_19070E4B8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v3, "accountEnabled:onService:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    objc_msgSend(MEMORY[0x1E0D36AA8], "accountEnabled");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(a1 + 40);
      v7 = 138412546;
      v8 = v5;
      v9 = 2112;
      v10 = v6;
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Notified account enabled %@ for service %@", (uint8_t *)&v7, 0x16u);
    }

  }
}

void sub_19070E5A0(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:dependentDevicesUpdatedUponReconnect:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070E5EC(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:dependentDevicesUpdatedUponReconnect:", *(_QWORD *)(a1 + 32), 0);

}

void sub_19070E63C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "service:familyInfoUpdated:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070E734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19070E74C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 136));
}

void sub_19070E760(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v2, "daemonConnected");

}

void sub_19070E8D8(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "xpcObject:objectContext:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070E9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19070E9F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 32), "_imMethodSignatureForSelector:", a1[6]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19070EB90(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD v12[6];
  _QWORD v13[5];
  id v14;

  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x3032000000;
  v13[3] = sub_1906EE1C4;
  v13[4] = sub_1906EE0B4;
  v14 = 0;
  v4 = *(void **)(a1 + 32);
  v5 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_19070ECC0;
  v12[3] = &unk_1E2C60308;
  v12[4] = v4;
  v12[5] = v13;
  objc_msgSend(v4, "_performSyncBlock:", v12);
  v6 = *(void **)(a1 + 40);
  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v8[0] = v5;
  v8[1] = 3221225472;
  v8[2] = sub_19070ED20;
  v8[3] = &unk_1E2C60780;
  v11 = v13;
  v9 = v6;
  v10 = *(id *)(a1 + 48);
  objc_msgSend(v7, "performBlock:waitUntilDone:", v8, a2);

  _Block_object_dispose(v13, 8);
}

void sub_19070ECA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19070ECC0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)MEMORY[0x19400FC60]();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "allObjects");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "_copyForEnumerating");
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  objc_autoreleasePoolPop(v2);
}

void sub_19070ED20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *context;
  id obj;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  context = (void *)MEMORY[0x19400FC60]();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  obj = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v13 != v3)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 32), "selector");
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v6 = (void *)MEMORY[0x19400FC60]();
          v7 = (void *)MEMORY[0x1E0C99DB8];
          objc_msgSend(v5, "methodSignatureForSelector:", objc_msgSend(*(id *)(a1 + 32), "selector"));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "invocationWithMethodSignature:", v8);
          v9 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v9, "setSelector:", objc_msgSend(*(id *)(a1 + 32), "selector"));
          JWCopyInvocationArguments();
          objc_msgSend(v9, "retainArguments");
          if ((objc_opt_respondsToSelector() & 1) != 0)
            objc_msgSend(v5, "performSelector:withObject:", sel__setTemporaryMessageContext_, *(_QWORD *)(a1 + 40));
          objc_msgSend(v9, "invokeWithTarget:", v5);
          if ((objc_opt_respondsToSelector() & 1) != 0)
            objc_msgSend(v5, "performSelector:withObject:", sel__setTemporaryMessageContext_, 0);

          objc_autoreleasePoolPop(v6);
        }
      }
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v2);
  }

  objc_autoreleasePoolPop(context);
}

void sub_19070EFEC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_19070F00C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19070F06C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "continuityDidUpdateStateToState:", *(_QWORD *)(a1 + 32));

}

void sub_19070F130(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "continuityDidLosePeer:", *(_QWORD *)(a1 + 32));

}

void sub_19070F1CC(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "continuityDidStartAdvertisingOfType:", *(_QWORD *)(a1 + 32));

}

void sub_19070F268(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "continuityDidStopAdvertisingOfType:", *(_QWORD *)(a1 + 32));

}

void sub_19070F330(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "continuityDidStopAdvertisingOfType:withError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

}

void sub_19070F3F8(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "continuityDidFailToStartAdvertisingOfType:withError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

}

void sub_19070F494(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "continuityDidStartScanningForType:", *(_QWORD *)(a1 + 32));

}

void sub_19070F530(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "continuityDidStopScanningForType:", *(_QWORD *)(a1 + 32));

}

void sub_19070F5F8(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "continuityDidFailToStartScanningForType:withError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

}

void sub_19070F6EC(_QWORD *a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "continuityDidDiscoverType:withData:fromPeer:", a1[6], a1[4], a1[5]);

}

void sub_19070F7DC(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "continuityDidDiscoverPeerWithData:fromPeer:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070F8C8(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "continuityDidConnectToPeer:withError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070F9B4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "continuityDidDisconnectFromPeer:withError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19070FB40(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 144), *(id *)(a1 + 40));
}

void sub_19070FB4C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "deviceIdentifierDidChange:", *(_QWORD *)(a1 + 32));

}

void sub_19070FCAC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_19070FCC0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

uint64_t IDSActivityMonitorMaxTokenCount()
{
  return 10;
}

uint64_t sub_190710960(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "uniqueID");
}

void sub_190711C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190711C3C(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  id WeakRetained;

  v3 = (id *)(a1 + 48);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "activityIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "unsubscribeActivity:andSubActivity:withCompletion:", v5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190711DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190711DF4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  id v7;
  void *v8;
  _QWORD v9[11];

  if (!a3)
  {
    v9[9] = v3;
    v9[10] = v4;
    v6 = *(void **)(a1 + 32);
    v7 = a2;
    objc_msgSend(v6, "activityIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_190711E90;
    v9[3] = &unk_1E2C614B0;
    v9[4] = *(_QWORD *)(a1 + 40);
    objc_msgSend(v7, "checkIfListeningForActivity:completion:", v8, v9);

  }
}

void sub_190711E90(uint64_t a1, char a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a3;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1907E8AA8((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12);

  }
}

void sub_190712018(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  if (!a3)
  {
    v3 = *(unsigned __int8 *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    v5 = a2;
    objc_msgSend(v4, "activityIdentifier");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setShouldListen:forActivity:completion:", v3, v6, &unk_1E2C614F8);

  }
}

void sub_190712088(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1907E8B0C((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9);

  }
}

void sub_1907121C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907121E0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  id v7;
  void *v8;
  _QWORD v9[11];

  if (!a3)
  {
    v9[9] = v3;
    v9[10] = v4;
    v6 = *(void **)(a1 + 32);
    v7 = a2;
    objc_msgSend(v6, "activityIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_19071227C;
    v9[3] = &unk_1E2C61548;
    v9[4] = *(_QWORD *)(a1 + 40);
    objc_msgSend(v7, "currentSubscriptionsForActivity:completion:", v8, v9);

  }
}

void sub_19071227C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  int v17;
  id v18;
  __int16 v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v17 = 138412546;
    v18 = v5;
    v19 = 2112;
    v20 = v6;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Subscription completion handler called, subscriptions: %@ error %@", (uint8_t *)&v17, 0x16u);
  }

  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1907E8B70((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v16 = v5;
    v8 = *(NSObject **)(v15 + 40);
    *(_QWORD *)(v15 + 40) = v16;
  }

}

uint64_t sub_19071247C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "activityMonitor:didReceiveActivityUpdate:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_190712798(uint64_t a1)
{
  void *v2;
  void *v3;
  dispatch_queue_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  IDSService *v19;
  uint64_t v20;
  void *v21;

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "listener");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addHandler:", *(_QWORD *)(a1 + 32));

  v4 = dispatch_queue_create("IDSInvitations-defaultQueue", 0);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) = 0;
  v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 8);
  *(_QWORD *)(v8 + 8) = v7;

  v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(v11 + 16);
  *(_QWORD *)(v11 + 16) = v10;

  v13 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 24);
  *(_QWORD *)(v14 + 24) = v13;

  v16 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(void **)(v17 + 32);
  *(_QWORD *)(v17 + 32) = v16;

  v19 = -[IDSService initWithService:]([IDSService alloc], "initWithService:", *(_QWORD *)(a1 + 40));
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(void **)(v20 + 56);
  *(_QWORD *)(v20 + 56) = v19;

}

void sub_190712944(uint64_t a1)
{
  id *v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(id **)(a1 + 32);
  objc_msgSend(v1[7], "accounts");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "anyObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "serviceName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setupInvitationsForService:", v3);

}

void sub_190712A5C(uint64_t a1)
{
  id *v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(id **)(a1 + 32);
  objc_msgSend(v1[7], "accounts");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "anyObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "serviceName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setupInvitationsForService:", v3);

}

void sub_1907137C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190713814(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_190713828(_QWORD *a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char v15;
  id v16;
  id obj;

  v2 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(a1[9] + 8) + 40), "copy");
  v3 = (void *)a1[8];
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *(void **)(a1[4] + 16);
    v6 = (void *)objc_msgSend(v3, "copy");
    v7 = (void *)MEMORY[0x19400FE1C]();
    objc_msgSend(v5, "setObject:forKey:", v7, v2);

  }
  v8 = a1[5];
  v9 = *(void **)(a1[4] + 56);
  v10 = a1[6];
  v11 = a1[7];
  v12 = *(_QWORD *)(a1[9] + 8);
  v13 = *(void **)(v12 + 40);
  v14 = *(_QWORD *)(a1[11] + 8);
  v16 = *(id *)(v14 + 40);
  obj = v13;
  v15 = objc_msgSend(v9, "sendInvitation:toDestination:options:identifier:error:", v8, v10, v11, &obj, &v16);
  objc_storeStrong((id *)(v12 + 40), obj);
  objc_storeStrong((id *)(v14 + 40), v16);
  *(_BYTE *)(*(_QWORD *)(a1[10] + 8) + 24) = v15;
  if (!*(_BYTE *)(*(_QWORD *)(a1[10] + 8) + 24) && a1[8] && v2)
    objc_msgSend(*(id *)(a1[4] + 16), "removeObjectForKey:", v2);

}

uint64_t sub_19071393C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_190713D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_190713DC4(_QWORD *a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id obj;

  v2 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(a1[8] + 8) + 40), "copy");
  v3 = (void *)a1[7];
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *(void **)(a1[4] + 8);
    v6 = (void *)objc_msgSend(v3, "copy");
    v7 = (void *)MEMORY[0x19400FE1C]();
    objc_msgSend(v5, "setObject:forKey:", v7, *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40));

  }
  v8 = (void *)a1[5];
  v9 = *(void **)(a1[4] + 56);
  objc_msgSend(v8, "destination");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = a1[6];
  v12 = *(_QWORD *)(a1[8] + 8);
  v13 = *(void **)(v12 + 40);
  v14 = *(_QWORD *)(a1[10] + 8);
  v15 = *(id *)(v14 + 40);
  obj = v13;
  LOBYTE(v8) = objc_msgSend(v9, "sendInvitation:toDestination:options:identifier:error:", v8, v10, v11, &obj, &v15);
  objc_storeStrong((id *)(v12 + 40), obj);
  objc_storeStrong((id *)(v14 + 40), v15);
  *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = (_BYTE)v8;

  if (!*(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) && a1[7] && v2)
    objc_msgSend(*(id *)(a1[4] + 8), "removeObjectForKey:", v2);

}

uint64_t sub_190713F08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_190714354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1907143A8(_QWORD *a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char v15;
  id v16;
  id obj;

  v2 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(a1[9] + 8) + 40), "copy");
  v3 = (void *)a1[8];
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *(void **)(a1[4] + 8);
    v6 = (void *)objc_msgSend(v3, "copy");
    v7 = (void *)MEMORY[0x19400FE1C]();
    objc_msgSend(v5, "setObject:forKey:", v7, *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 40));

  }
  v8 = a1[5];
  v9 = *(void **)(a1[4] + 56);
  v10 = a1[6];
  v11 = a1[7];
  v12 = *(_QWORD *)(a1[9] + 8);
  v13 = *(void **)(v12 + 40);
  v14 = *(_QWORD *)(a1[11] + 8);
  v16 = *(id *)(v14 + 40);
  obj = v13;
  v15 = objc_msgSend(v9, "sendInvitationUpdate:toDestination:options:identifier:error:", v8, v10, v11, &obj, &v16);
  objc_storeStrong((id *)(v12 + 40), obj);
  objc_storeStrong((id *)(v14 + 40), v16);
  *(_BYTE *)(*(_QWORD *)(a1[10] + 8) + 24) = v15;
  if (!*(_BYTE *)(*(_QWORD *)(a1[10] + 8) + 24) && a1[8] && v2)
    objc_msgSend(*(id *)(a1[4] + 8), "removeObjectForKey:", v2);

}

uint64_t sub_1907144C4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_19071494C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1907149A0(_QWORD *a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char v15;
  id v16;
  id obj;

  v2 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(a1[9] + 8) + 40), "copy");
  v3 = (void *)a1[8];
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *(void **)(a1[4] + 8);
    v6 = (void *)objc_msgSend(v3, "copy");
    v7 = (void *)MEMORY[0x19400FE1C]();
    objc_msgSend(v5, "setObject:forKey:", v7, *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 40));

  }
  v8 = a1[5];
  v9 = *(void **)(a1[4] + 56);
  v10 = a1[6];
  v11 = a1[7];
  v12 = *(_QWORD *)(a1[9] + 8);
  v13 = *(void **)(v12 + 40);
  v14 = *(_QWORD *)(a1[11] + 8);
  v16 = *(id *)(v14 + 40);
  obj = v13;
  v15 = objc_msgSend(v9, "sendInvitationUpdate:toDestination:options:identifier:error:", v8, v10, v11, &obj, &v16);
  objc_storeStrong((id *)(v12 + 40), obj);
  objc_storeStrong((id *)(v14 + 40), v16);
  *(_BYTE *)(*(_QWORD *)(a1[10] + 8) + 24) = v15;
  if (!*(_BYTE *)(*(_QWORD *)(a1[10] + 8) + 24) && a1[8] && v2)
    objc_msgSend(*(id *)(a1[4] + 8), "removeObjectForKey:", v2);

}

uint64_t sub_190714ABC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

uint64_t sub_190714BA0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "addDelegate:queue:", *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
}

void sub_190714F84(uint64_t a1)
{
  id *v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(id **)(a1 + 32);
  objc_msgSend(v1[7], "accounts");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "anyObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "serviceName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setupInvitationsForService:", v3);

}

void sub_190716180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907161C8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x19400FE1C](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1907161F0(uint64_t a1)
{

}

uint64_t sub_1907161F8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  objc_msgSend(*(id *)(a1[4] + 16), "objectForKey:", a1[5]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "copy");
  v4 = *(_QWORD *)(a1[6] + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  objc_msgSend(*(id *)(a1[4] + 16), "removeObjectForKey:", a1[5]);
  objc_msgSend(*(id *)(a1[4] + 8), "objectForKey:", a1[5]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "copy");
  v8 = *(_QWORD *)(a1[7] + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  return objc_msgSend(*(id *)(a1[4] + 8), "removeObjectForKey:", a1[5]);
}

uint64_t sub_190716288(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[4];
  v3 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 16))(v3, 0);
  else
    return (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 16))(v3, a1[5]);
}

uint64_t sub_1907162B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) + 16))();
}

void sub_190716510(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t sub_190716520()
{
  uint64_t v0;

  return v0;
}

void sub_190717094(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1907170B0(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSServerMessaging");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(WeakRetained, "uuid");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = 138412290;
    v5 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "XPC interruption for client %@", (uint8_t *)&v4, 0xCu);

  }
  objc_msgSend(WeakRetained, "_setupXPC");
  objc_msgSend(WeakRetained, "_failMessages");

}

void sub_190717190(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  id *v6;
  void *v7;
  id v8;

  v8 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v4 + 40);
  v6 = (id *)(v4 + 40);
  v5 = v7;
  if (!v7)
  {
    objc_storeStrong(v6, a2);
    v5 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  }
  objc_msgSend(v5, "addInterruptionHandler:forTarget:", *(_QWORD *)(a1 + 40));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 8));

}

void sub_19071733C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190717360(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(v3, "serverMessagingCollaboratorWithErrorHandler:", &unk_1E2C5F870);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(WeakRetained, "uuid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "topic");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "commands");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setupServerMessagingClient:withUUID:forTopic:commands:", WeakRetained, v5, v6, v7);

}

void sub_190717418(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSServerMessaging");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907E925C();

}

void sub_190717834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190717850(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(v3, "serverMessagingCollaboratorWithErrorHandler:", &unk_1E2C61638);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(a1 + 32);
  objc_msgSend(WeakRetained, "topic");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1907179E4;
  v10[3] = &unk_1E2C61660;
  objc_copyWeak(&v13, (id *)(a1 + 64));
  v11 = *(id *)(a1 + 48);
  v12 = *(id *)(a1 + 56);
  objc_msgSend(v5, "sendMessageData:onTopic:withOptions:identifier:completion:", v6, v7, v8, v9, v10);

  objc_destroyWeak(&v13);
}

void sub_190717978(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19071798C(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSServerMessaging");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907E925C();

}

void sub_1907179E4(uint64_t a1, int a2, void *a3)
{
  id v5;
  os_unfair_lock_s *WeakRetained;
  IDSServerMessagingOutgoingContext *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  const __CFString *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const __CFString *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 48));
  v7 = -[IDSServerMessagingOutgoingContext initWithIdentifier:]([IDSServerMessagingOutgoingContext alloc], "initWithIdentifier:", *(_QWORD *)(a1 + 32));
  os_unfair_lock_lock(WeakRetained + 3);
  -[os_unfair_lock_s inFlightRequests](WeakRetained, "inFlightRequests");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 32));

  os_unfair_lock_unlock(WeakRetained + 3);
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSServerMessaging");
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = CFSTR("NO");
    v12 = 138412802;
    if (a2)
      v11 = CFSTR("YES");
    v13 = v10;
    v14 = 2112;
    v15 = v11;
    v16 = 2112;
    v17 = v5;
    _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "Calling out to client completion { guid: %@, success: %@, error: %@ }", (uint8_t *)&v12, 0x20u);
  }

  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
}

void sub_190717F9C(uint64_t a1, void *a2)
{
  id v3;

  objc_msgSend(a2, "serverMessagingCollaboratorWithErrorHandler:", &unk_1E2C5F030);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "sendCertifiedDeliveryReceipt:", *(_QWORD *)(a1 + 32));

}

void sub_190717FE4(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSServerMessaging");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907E925C();

}

void sub_1907180F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_190718114(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(v4, "serverMessagingCollaboratorWithErrorHandler:", &unk_1E2C5F430);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(WeakRetained, "topic");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_190718238;
  v8[3] = &unk_1E2C616D8;
  v9 = *(id *)(a1 + 32);
  objc_msgSend(v6, "sendServerStorageFetchForTopic:completion:", v7, v8);

}

void sub_1907181E0(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSServerMessaging");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907E925C();

}

void sub_190718238(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  const __CFString *v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  int v11;
  const __CFString *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSServerMessaging");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("NO");
    v8 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)a2)
      v9 = CFSTR("YES");
    else
      v9 = CFSTR("NO");
    v11 = 138412802;
    v12 = v9;
    v13 = 2112;
    if (v8)
      v7 = CFSTR("YES");
    v14 = v5;
    v15 = 2112;
    v16 = v7;
    _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "Calling out to client completion for storage fetch { success: %@, error: %@, hasCompletion: %@ }", (uint8_t *)&v11, 0x20u);
  }

  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    (*(void (**)(uint64_t, uint64_t, id))(v10 + 16))(v10, a2, v5);

}

void sub_190718428(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_190718444(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;

  v3 = (id *)(a1 + 48);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(v4, "serverMessagingCollaboratorWithErrorHandler:", &unk_1E2C5F450);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = *(_QWORD *)(a1 + 32);
  objc_msgSend(WeakRetained, "topic");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_190718578;
  v9[3] = &unk_1E2C616D8;
  v10 = *(id *)(a1 + 40);
  objc_msgSend(v6, "cancelMessageWithIdentifier:onTopic:completion:", v7, v8, v9);

}

void sub_190718520(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSServerMessaging");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907E925C();

}

void sub_190718578(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  const __CFString *v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  int v11;
  const __CFString *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSServerMessaging");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("NO");
    v8 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)a2)
      v9 = CFSTR("YES");
    else
      v9 = CFSTR("NO");
    v11 = 138412802;
    v12 = v9;
    v13 = 2112;
    if (v8)
      v7 = CFSTR("YES");
    v14 = v5;
    v15 = 2112;
    v16 = v7;
    _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "Calling out to client completion for cancel { success: %@, error: %@, hasCompletion: %@ }", (uint8_t *)&v11, 0x20u);
  }

  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    (*(void (**)(uint64_t, uint64_t, id))(v10 + 16))(v10, a2, v5);

}

void IDSRegistrationControlDisableRegistrationType(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (_IDSRunningInDaemon())
    sub_1907E935C();
  sub_1907194FC(v8, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    sub_1907195BC();
    +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "registrationControlSetRegistrationStateForRegistrationType:toState:requestID:", a1, 1, v6);

  }
}

id sub_1907194FC(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;

  v3 = a1;
  v4 = a2;
  if (_IDSRunningInDaemon())
    sub_1907E9384();
  v5 = (void *)MEMORY[0x19400FE1C](v3);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_190719A58;
  v9[3] = &unk_1E2C604E8;
  v10 = v3;
  v6 = v3;
  sub_190719AD4(v5, v4, v9, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1907195BC()
{
  if (_IDSRunningInDaemon())
    sub_1907E93AC();
  if (qword_1EE1E1FA0 != -1)
    dispatch_once(&qword_1EE1E1FA0, &unk_1E2C60270);
}

void IDSRegistrationControlEnableRegistrationType(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (_IDSRunningInDaemon())
    sub_1907E93D4();
  sub_1907194FC(v8, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    sub_1907195BC();
    +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "registrationControlSetRegistrationStateForRegistrationType:toState:requestID:", a1, 2, v6);

  }
}

void IDSRegistrationControlGetStateForRegistrationType(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;

  v5 = a2;
  v6 = a3;
  if (_IDSRunningInDaemon())
    sub_1907E93FC();
  v7 = v5;
  v8 = v6;
  if (_IDSRunningInDaemon())
    sub_1907E9424();
  v9 = (void *)MEMORY[0x19400FE1C](v7);
  v10 = MEMORY[0x1E0C809B0];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_190719C88;
  v17[3] = &unk_1E2C604E8;
  v18 = v7;
  v11 = v7;
  sub_190719AD4(v9, v8, v17, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    sub_1907195BC();
    +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = v10;
    v14[1] = 3221225472;
    v14[2] = sub_1907197F4;
    v14[3] = &unk_1E2C61750;
    v16 = a1;
    v15 = v12;
    objc_msgSend(v13, "forwardMethodWithReplyIsSync:block:", 0, v14);

  }
}

uint64_t sub_1907197F4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_registrationControlGetRegistrationStateForRegistrationType_requestID_);
}

uint64_t IDSRegistrationControlSyncGetStateForRegistrationType(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  _QWORD v16[6];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  id v28;

  if (_IDSRunningInDaemon())
    sub_1907E944C();
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = sub_1906EE1F4;
  v21 = sub_1906EE0CC;
  v22 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_190719A2C;
  v16[3] = &unk_1E2C61778;
  v16[4] = &v23;
  v16[5] = &v17;
  v5 = v16;
  if (_IDSRunningInDaemon())
    __assert_rtn("_IDSScheduleSyncTimeoutForRegistrtionControlStateCompletionBlock", "IDSRegistrationControl.m", 85, "!_IDSRunningInDaemon()");
  v6 = (void *)MEMORY[0x19400FE1C](v5);
  v27[0] = v4;
  v27[1] = 3221225472;
  v27[2] = sub_190719D04;
  v27[3] = &unk_1E2C604E8;
  v28 = v5;
  v7 = v5;
  sub_190719AD4(v6, 0, v27, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    sub_1907195BC();
    +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = v4;
    v13[1] = 3221225472;
    v13[2] = sub_190719A4C;
    v13[3] = &unk_1E2C61750;
    v15 = a1;
    v14 = v8;
    objc_msgSend(v9, "forwardMethodWithReplyIsSync:block:", 1, v13);

  }
  if (a2)
  {
    v10 = (void *)v18[5];
    if (v10)
      *a2 = objc_retainAutorelease(v10);
  }
  v11 = v24[3];

  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v23, 8);
  return v11;
}

void sub_190719A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_190719A2C(uint64_t a1, uint64_t a2, id obj)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), obj);
}

uint64_t sub_190719A4C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_registrationControlGetRegistrationStateForRegistrationType_requestID_);
}

void sub_190719A58(uint64_t a1)
{
  id v2;
  id v3;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v3 = (id)objc_msgSend(v2, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D34730], 2, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
}

id sub_190719AD4(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  IDSDaemonResponseHandler *v10;
  void *v11;
  void *v12;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  if (_IDSRunningInDaemon())
    sub_1907E9474();
  v10 = -[IDSDaemonResponseHandler initWithBlock:queue:isSync:]([IDSDaemonResponseHandler alloc], "initWithBlock:queue:isSync:", v7, v8, a4);
  sub_190719B8C();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "scheduleTimeoutWithResponseHandler:timeoutInterval:timeoutBlock:", v10, v9, 120.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

id sub_190719B8C()
{
  if (qword_1EE1E1E60 != -1)
    dispatch_once(&qword_1EE1E1E60, &unk_1E2C5F890);
  return (id)qword_1EE1E1E88;
}

void sub_190719BCC()
{
  IDSDaemonRequestTimer *v0;
  void *v1;

  v0 = objc_alloc_init(IDSDaemonRequestTimer);
  v1 = (void *)qword_1EE1E1E88;
  qword_1EE1E1E88 = (uint64_t)v0;

}

void sub_190719BF4()
{
  IDSRegistrationControlDaemonResponseListener *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v0 = [IDSRegistrationControlDaemonResponseListener alloc];
  sub_190719B8C();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = -[IDSRegistrationControlDaemonResponseListener initWithRequestTimer:](v0, "initWithRequestTimer:", v1);
  v3 = (void *)qword_1EE1E1F98;
  qword_1EE1E1F98 = v2;

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "listener");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addHandler:", qword_1EE1E1F98);

}

void sub_190719C88(uint64_t a1)
{
  id v2;
  id v3;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v3 = (id)objc_msgSend(v2, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D34730], 2, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
}

void sub_190719D04(uint64_t a1)
{
  id v2;
  id v3;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v3 = (id)objc_msgSend(v2, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D34730], 2, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
}

void sub_19071A738(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  const __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t v36[128];
  uint8_t buf[4];
  __CFString *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "delegateByServiceType");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(void **)(a1 + 40);

  if (v4 != v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegateByServiceType");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
    {
      objc_msgSend(MEMORY[0x1E0CB3748], "strongToWeakObjectsMapTable");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "setDelegateByServiceType:", v7);

      v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(*(id *)(a1 + 32), "setInitialStateByService:", v8);

    }
    objc_msgSend(*(id *)(a1 + 32), "delegateByServiceType");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setObject:forKey:", *(_QWORD *)(a1 + 40), v2);

    objc_msgSend(*(id *)(a1 + 32), "_statusOfUsersOnService:", *(_QWORD *)(a1 + 48));
    v10 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "initialStateByService");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setObject:forKey:", v10, v2);

    objc_msgSend(MEMORY[0x1E0D36AA8], "signInController");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 48);
      v14 = CFSTR("iMessage");
      if (v13 != 1)
        v14 = 0;
      if (v13)
        v15 = (__CFString *)v14;
      else
        v15 = CFSTR("FaceTime");
      v16 = v15;
      v17 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v38 = v16;
      v39 = 2048;
      v40 = v17;
      v41 = 2112;
      v42 = v10;
      _os_log_impl(&dword_1906E0000, v12, OS_LOG_TYPE_DEFAULT, "Setting delegate {service: %@, delegate: %p, status: %@}", buf, 0x20u);

    }
    v31 = (void *)v10;

    v18 = *(void **)(a1 + 32);
    objc_msgSend(v18, "_serviceNameForType:", *(_QWORD *)(a1 + 48));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "_accountControllerForName:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    v21 = *(void **)(a1 + 32);
    objc_msgSend(v21, "signInQueue");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "addDelegate:queue:", v21, v22);

    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    objc_msgSend(v20, "accounts");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    if (v24)
    {
      v25 = v24;
      v26 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v25; ++i)
        {
          if (*(_QWORD *)v33 != v26)
            objc_enumerationMutation(v23);
          v28 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
          v29 = *(void **)(a1 + 32);
          objc_msgSend(v29, "signInQueue");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v28, "addRegistrationDelegate:queue:", v29, v30);

        }
        v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      }
      while (v25);
    }

  }
}

void sub_19071AAC4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  const __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "delegateByServiceType");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeObjectForKey:", v2);

  objc_msgSend(*(id *)(a1 + 32), "initialStateByService");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeObjectForKey:", v2);

  objc_msgSend(MEMORY[0x1E0D36AA8], "signInController");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = CFSTR("iMessage");
    if (v6 != 1)
      v7 = 0;
    if (v6)
      v8 = (__CFString *)v7;
    else
      v8 = CFSTR("FaceTime");
    v9 = v8;
    v13 = 138412290;
    v14 = v9;
    _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "Removing delegate {service: %@}", (uint8_t *)&v13, 0xCu);

  }
  objc_msgSend(*(id *)(a1 + 32), "delegateByServiceType");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "count");

  if (!v11)
  {
    objc_msgSend(*(id *)(a1 + 32), "setDelegateByServiceType:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setInitialStateByService:", 0);
    objc_msgSend(*(id *)(a1 + 32), "accountIDDescriptionMap");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v12)
      objc_msgSend(*(id *)(a1 + 32), "setServiceNameAccountControllerMap:", 0);
  }

}

void sub_19071ADF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, void *, void *);
  void *v11;
  uint64_t v12;
  id v13;
  uint8_t buf[4];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v8 = MEMORY[0x1E0C809B0];
  v9 = 3221225472;
  v10 = sub_19071AF48;
  v11 = &unk_1E2C617B8;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = v5;
  if ((objc_msgSend(v4, "_actionOnAccountOfType:onService:actionBlock:", v2, v3, &v8) & 1) == 0 && *(_QWORD *)(a1 + 40))
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IDSSignInControllerErrorDomain"), -3000, 0, v8, v9, v10, v11);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D36AA8], "signInController");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v15 = v6;
      _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "No matching account {error: %@}", buf, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_19071AF48(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  __int16 v16;
  uint8_t buf[16];
  __int16 v18;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "isEnabled"))
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "signInController");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 0;
      v8 = "Already enabled";
      v9 = (uint8_t *)&v18;
LABEL_10:
      _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  objc_msgSend(v6, "enableAccount:", v5);
  if (objc_msgSend(v5, "accountType") != 1)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "signInController");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v8 = "Enabling phone number - completed";
      v9 = (uint8_t *)&v16;
      goto LABEL_10;
    }
LABEL_11:

    (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
    goto LABEL_12;
  }
  v10 = *(void **)(a1 + 32);
  objc_msgSend(v10, "signInQueue");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addRegistrationDelegate:queue:", v10, v11);

  objc_msgSend(v5, "registerAccount");
  objc_msgSend(v5, "uniqueID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D36AA8], "signInController");
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1906E0000, v13, OS_LOG_TYPE_DEFAULT, "Enabling apple id - starting machine", buf, 2u);
  }

  v14 = *(void **)(a1 + 32);
  objc_msgSend(v6, "serviceName");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "_initializeStateMachineForAccountID:service:state:completion:", v12, v15, 1, *(_QWORD *)(a1 + 40));

LABEL_12:
}

void sub_19071B2C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, void *, void *);
  void *v15;
  uint64_t v16;
  id v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  __CFString *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v12 = MEMORY[0x1E0C809B0];
  v13 = 3221225472;
  v14 = sub_19071B41C;
  v15 = &unk_1E2C617B8;
  v4 = *(void **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = v5;
  if ((objc_msgSend(v4, "_actionOnAccountOfType:onService:actionBlock:", v2, v3, &v12) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "signInController", v12, v13, v14, v15);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 48);
      v7 = *(_QWORD *)(a1 + 56);
      v9 = CFSTR("iMessage");
      if (v7 != 1)
        v9 = 0;
      if (v7)
        v10 = (__CFString *)v9;
      else
        v10 = CFSTR("FaceTime");
      v11 = v10;
      *(_DWORD *)buf = 134218242;
      v19 = v8;
      v20 = 2112;
      v21 = v11;
      _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "No account found -- completing {userType: %llu, service: %@}", buf, 0x16u);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_19071B41C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  uint8_t v13[16];

  v5 = a2;
  v6 = a3;
  if ((objc_msgSend(v5, "isEnabled") & 1) != 0)
  {
    v7 = *(void **)(a1 + 32);
    objc_msgSend(v7, "signInQueue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addDelegate:queue:", v7, v8);

    objc_msgSend(v6, "disableAccount:", v5);
    objc_msgSend(v5, "uniqueID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *(void **)(a1 + 32);
    objc_msgSend(v6, "serviceName");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "_initializeStateMachineForAccountID:service:state:completion:", v9, v11, 3, *(_QWORD *)(a1 + 40));

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "signInController");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1906E0000, v12, OS_LOG_TYPE_DEFAULT, "Already disabled", v13, 2u);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

IDSSignInServiceUserInfo *sub_19071B674(uint64_t a1, void *a2)
{
  id v3;
  IDSSignInServiceUserInfo *v4;

  v3 = a2;
  if (objc_msgSend(v3, "accountType") == 1 || !objc_msgSend(v3, "accountType"))
    v4 = -[IDSSignInServiceUserInfo initWithUserType:status:]([IDSSignInServiceUserInfo alloc], "initWithUserType:status:", (int)objc_msgSend(v3, "accountType"), objc_msgSend(*(id *)(a1 + 32), "_statusOfAccount:", v3));
  else
    v4 = 0;

  return v4;
}

void sub_19071B898(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  const __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  int v8;
  void *v9;
  __int16 v10;
  __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_statusOfUsersOnService:", *(_QWORD *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D36AA8], "signInController");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = CFSTR("iMessage");
    if (v4 != 1)
      v5 = 0;
    if (v4)
      v6 = (__CFString *)v5;
    else
      v6 = CFSTR("FaceTime");
    v7 = v6;
    v8 = 138412546;
    v9 = v2;
    v10 = 2112;
    v11 = v7;
    _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "Finished checking user statuses {status: %@, service: %@}", (uint8_t *)&v8, 0x16u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_19071BC48(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  int v14;
  id v15;
  __int16 v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  if ((a4 & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IDSSignInControllerInternalErrorDomain"), -404, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)MEMORY[0x1E0CB35C8];
    v18 = *MEMORY[0x1E0CB3388];
    v19[0] = v10;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "errorWithDomain:code:userInfo:", CFSTR("IDSSignInControllerErrorDomain"), -1000, v12);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "signInController");
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 138412546;
    v15 = v7;
    v16 = 2112;
    v17 = v9;
    _os_log_impl(&dword_1906E0000, v13, OS_LOG_TYPE_DEFAULT, "Set for account password {username: %@, error: %@}", (uint8_t *)&v14, 0x16u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19071BFB4(uint64_t a1)
{
  uint64_t v2;
  __CFString **v3;
  __CFString *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  __CFString *v10;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    if (v2 != 1)
    {
LABEL_9:
      v10 = 0;
      goto LABEL_10;
    }
    v3 = IDSServiceNameiMessage;
  }
  else
  {
    v3 = IDSServiceNameFaceTime;
  }
  v4 = *v3;
  if (!v4)
    goto LABEL_9;
  v10 = v4;
  if (!*(_QWORD *)(a1 + 32))
  {
LABEL_10:
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IDSSignInControllerErrorDomain"), -4000, 0);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    goto LABEL_13;
  }
  v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v5, "setObject:forKeyedSubscript:", &unk_1E2CAE1F8, *MEMORY[0x1E0D35138]);
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v10, *MEMORY[0x1E0D35218]);
  objc_msgSend(v5, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), *MEMORY[0x1E0D36F00]);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "_createAccountWithDictionary:accountID:serviceName:", v5, v6, v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addRegistrationDelegate:queue:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40));
  objc_msgSend(*(id *)(a1 + 40), "_accountControllerForName:", v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addAccount:", v7);
  objc_msgSend(v8, "enableAccount:", v7);
  objc_msgSend(v8, "addDelegate:queue:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40));
  objc_msgSend(v7, "authenticateAccount");
  v9 = *(void **)(a1 + 40);
  if (*(_BYTE *)(a1 + 64))
  {
    objc_msgSend(v9, "_initializeStateMachineForAccountID:service:state:completion:", v6, v10, 0, *(_QWORD *)(a1 + 48));
  }
  else
  {
    objc_msgSend(v9, "_initializeStateMachineForAccountID:service:state:completion:", v6, v10, 0, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

LABEL_13:
}

uint64_t sub_19071C388(uint64_t a1, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  else
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_signInUsername_onService_waitUntilRegistered_withCompletion_);
}

void sub_19071C540(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_19071C64C;
  v5[3] = &unk_1E2C618D0;
  v2 = (void *)a1[5];
  v3 = a1[6];
  v6 = (id)a1[4];
  v7 = v2;
  v8 = &v9;
  objc_msgSend(v6, "_actionOnAccountOfType:onService:actionBlock:", 1, v3, v5);
  if (!*((_BYTE *)v10 + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IDSSignInControllerErrorDomain"), -3000, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void))(a1[5] + 16))();

  }
  _Block_object_dispose(&v9, 8);
}

void sub_19071C630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19071C64C(_QWORD *a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v5 = (void *)a1[4];
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "signInQueue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addDelegate:queue:", v5, v8);

  objc_msgSend(v6, "disableAccount:", v7);
  objc_msgSend(v6, "removeAccount:", v7);
  objc_msgSend(v7, "uniqueID");
  v11 = (id)objc_claimAutoreleasedReturnValue();

  v9 = (void *)a1[4];
  objc_msgSend(v6, "serviceName");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "_initializeStateMachineForAccountID:service:state:completion:", v11, v10, 4, a1[5]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;

}

void sub_19071C95C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "signInController");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(a1 + 40));
    v7 = 138412546;
    v8 = v5;
    v9 = 2112;
    v10 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling sign in controller's client completion block {completion: %@, error: %@}", (uint8_t *)&v7, 0x16u);

  }
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);

}

void sub_19071CC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19071CC6C(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  uint64_t v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const __CFString *v11;
  __int16 v12;
  const __CFString *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(MEMORY[0x1E0D36AA8], "signInController");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = CFSTR("YES");
    if (*(_BYTE *)(a1 + 56))
      v6 = CFSTR("YES");
    else
      v6 = CFSTR("NO");
    if (!*(_BYTE *)(a1 + 57))
      v5 = CFSTR("NO");
    v8 = 134218498;
    v9 = v4;
    v10 = 2112;
    v11 = v6;
    v12 = 2112;
    v13 = v5;
    _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "Periodic validation fired {delay: %f, allowFuzz: %@, signOut: %@}", (uint8_t *)&v8, 0x20u);
  }

  if (*(_BYTE *)(a1 + 57))
  {
    v7 = 1;
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    v7 = 2;
  }
  else
  {
    v7 = 1;
  }
  objc_msgSend(WeakRetained, "_validateStateForAccountID:timeoutMode:", *(_QWORD *)(a1 + 32), v7);

}

uint64_t sub_19071CF20(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "serviceName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_19071D590(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19071D5C4(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t result;
  const __CFString *v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "signInController");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134218242;
    v16 = a2;
    v17 = 2112;
    v18 = v7;
    _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "Completed {errorCode: %llu, account: %@}", buf, 0x16u);
  }

  if (*(_QWORD *)(a1 + 56))
  {
    if (*(_QWORD *)(a1 + 72))
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IDSSignInControllerErrorDomain"), -5000, 0);
      a2 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:
      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

      goto LABEL_12;
    }
    if (!a2)
      goto LABEL_11;
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
    {
      v13 = CFSTR("IDSSignInControllerErrorAccountKey");
      v14 = v8;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (!a3)
      {
LABEL_10:
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IDSSignInControllerErrorDomain"), a2, v9);
        a2 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_11;
      }
    }
    else
    {
      v9 = 0;
      if (!a3)
        goto LABEL_10;
    }
    v10 = (void *)objc_msgSend(v9, "mutableCopy");
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IDSSignInControllerInternalErrorDomain"), a3, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v11, *MEMORY[0x1E0CB3388]);

    v9 = v10;
    goto LABEL_10;
  }
LABEL_12:
  result = objc_msgSend(*(id *)(a1 + 40), "_cleanupStateForAccountID:", *(_QWORD *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  return result;
}

id sub_19071DE50(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = objc_alloc_init(MEMORY[0x1E0CB3550]);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        v10 = (void *)MEMORY[0x1E0CB3940];
        v11 = objc_msgSend(v9, "type");
        v12 = objc_msgSend(v9, "status");
        objc_msgSend(v10, "stringWithFormat:", CFSTR("%llu,%llu"), v11, v12, (_QWORD)v15);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObject:", v13);

      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  return v3;
}

void sub_19071E86C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t sub_19071E880()
{
  return objc_opt_class();
}

void sub_19071EA38(_QWORD *a1)
{
  _IDSSession *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = -[_IDSSession initWithAccount:destinations:transportType:delegateContext:]([_IDSSession alloc], "initWithAccount:destinations:transportType:delegateContext:", a1[5], a1[6], a1[7], a1[4]);
  v3 = a1[4];
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 24));
  objc_msgSend(*(id *)(a1[4] + 8), "uniqueID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "copy");
  v7 = a1[4];
  v8 = *(void **)(v7 + 16);
  *(_QWORD *)(v7 + 16) = v6;

  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 24));
}

void sub_19071EC88(_QWORD *a1)
{
  _IDSSession *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = -[_IDSSession initWithAccount:destinations:options:delegateContext:]([_IDSSession alloc], "initWithAccount:destinations:options:delegateContext:", a1[5], a1[6], a1[7], a1[4]);
  v3 = a1[4];
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 24));
  objc_msgSend(*(id *)(a1[4] + 8), "uniqueID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "copy");
  v7 = a1[4];
  v8 = *(void **)(v7 + 16);
  *(_QWORD *)(v7 + 16) = v6;

  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 24));
}

void sub_19071EFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_19071F008()
{
  return (id)objc_opt_self();
}

void sub_19071F0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19071F0FC(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "socket");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_19071F2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19071F2E4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "state");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_19071F3D8(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "setDelegate:queue:", a1[5], a1[6]);
}

void sub_19071F51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19071F534(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "initialLinkType");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_19071F71C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_sendInvitationWithOptions_);
}

uint64_t sub_19071F7D4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_sendInvitationWithData_declineOnError_);
}

uint64_t sub_19071F884(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setPreferences:", *(_QWORD *)(a1 + 40));
}

void sub_19071F964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19071F97C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "getPreferences");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_19071FA3C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_cancelInvitationWithRemoteEndedReasonOverride_);
}

uint64_t sub_19071FAEC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_cancelInvitationWithData_);
}

uint64_t sub_19071FB94(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_acceptInvitationWithData_);
}

uint64_t sub_19071FC3C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_declineInvitationWithData_);
}

uint64_t sub_19071FCBC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_cancelInvitation);
}

uint64_t sub_19071FD3C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_acceptInvitation);
}

uint64_t sub_19071FDBC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_declineInvitation);
}

uint64_t sub_19071FE3C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "endSession");
}

uint64_t sub_19071FEE4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_endSessionWithData_);
}

uint64_t sub_19071FF8C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_sendSessionMessage_);
}

uint64_t sub_190720058(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_sendSessionMessage_toDestinations_);
}

uint64_t sub_190720108(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_sendAllocationRequest_);
}

uint64_t sub_190720198(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_setAudioEnabled_);
}

void sub_190720260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190720278(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "getAudioEnabled");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_190720330(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_setMuted_);
}

void sub_1907203F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190720410(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "getMuted");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_190720530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190720548(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendData:error:", a1[5], a1[7]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

uint64_t sub_190720600(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_setInviteTimeout_);
}

void sub_1907206C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907206D8(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "inviteTimeout");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_190720780(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_reconnectSession);
}

void sub_190720840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190720858(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sessionEndedReason");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_19072092C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setPreferences:", *(_QWORD *)(a1 + 40));
}

void sub_1907209EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190720A04(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "shouldUseSocketForTransport");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_190720AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190720B0C(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "MTUForAddressFamily:", a1[6]);
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = result;
  return result;
}

uint64_t IDSCTSIMSlotFromSubscriptionSlot(uint64_t a1)
{
  if (a1)
    return a1 == 2;
  else
    return 2;
}

uint64_t IDSSubscriptionSlotFromCTSIMSlot(uint64_t a1)
{
  uint64_t v1;

  v1 = 1;
  if (a1 == 1)
    v1 = 2;
  if (a1 == 2)
    return 0;
  else
    return v1;
}

id sub_190720F24(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  objc_msgSend(MEMORY[0x1E0D34CC8], "sharedInstance", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "currentSIMsWithError:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = (id)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        v8 = objc_msgSend(v1, "subscriptionSlot");
        if (v8)
          v9 = v8 == 2;
        else
          v9 = 2;
        if (v9 == objc_msgSend(v7, "slot"))
        {
          v4 = v7;
          goto LABEL_14;
        }
      }
      v4 = (id)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_14:

  return v4;
}

uint64_t sub_1907215A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19072187C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[5];
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = MEMORY[0x1E0C809B0];
  if (v2[3])
  {
    v4 = *(void **)(a1 + 40);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1907219D4;
    v9[3] = &unk_1E2C61A10;
    v9[4] = v2;
    objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v9);
    +[IDSLogging IDQuery](IDSLogging, "IDQuery");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
      *(_DWORD *)buf = 138412290;
      v11 = v6;
      _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "Updated local cache to %@", buf, 0xCu);
    }

    v2 = *(_QWORD **)(a1 + 32);
  }
  v7[0] = v3;
  v7[1] = 3221225472;
  v7[2] = sub_190721A88;
  v7[3] = &unk_1E2C61A38;
  v8 = *(id *)(a1 + 40);
  objc_msgSend(v2, "_callDelegatesWithBlock:", v7);

}

void sub_1907219D4(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "_cacheForService:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (id)objc_msgSend(v8, "mutableCopy");

  if (v9)
    objc_msgSend(v9, "addEntriesFromDictionary:", v6);
  else
    v9 = (id)objc_msgSend(v6, "mutableCopy");

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setObject:forKey:", v9, v7);
}

void sub_190721A88(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = *(void **)(a1 + 32);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_190721B18;
    v5[3] = &unk_1E2C61A10;
    v6 = v4;
    objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v5);

  }
}

void sub_190721B18(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[128];
  uint8_t buf[4];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  _IDSServiceFromRegistrationServiceType();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[IDSLogging IDQuery](IDSLogging, "IDQuery");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v25 = v7;
    _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "Notifying delegate %@ about ID status update", buf, 0xCu);
  }

  v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v9 = v4;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v20 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_msgSend(v9, "objectForKeyedSubscript:", v14, (_QWORD)v19);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "prefixedURI");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setObject:forKeyedSubscript:", v15, v16);

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v11);
  }

  v17 = *(void **)(a1 + 32);
  v18 = (void *)objc_msgSend(v8, "copy");
  objc_msgSend(v17, "idStatusUpdatedForDestinations:service:", v18, v5);

}

uint64_t sub_19072241C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_190722570(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 16), *(id *)(a1 + 40));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 24), *(id *)(a1 + 48));
  v2 = objc_alloc(MEMORY[0x1E0C99E60]);
  v7[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "initWithArray:", v3);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 8);
  *(_QWORD *)(v5 + 8) = v4;

}

void sub_1907226D8(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 24), *(id *)(a1 + 40));
}

void sub_1907228DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 40);
  v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1907229A0;
  v11[3] = &unk_1E2C61A60;
  v12 = v6;
  v14 = v5;
  v15 = v7;
  v13 = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = v6;
  dispatch_async(v8, v11);

}

uint64_t sub_1907229A0(uint64_t a1)
{
  uint64_t (*v2)(void);

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16);
  }
  else
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 8), *(id *)(a1 + 48));
    v2 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16);
  }
  return v2();
}

void sub_1907229EC(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v4 = *(void **)(a1 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_190722A88;
  v7[3] = &unk_1E2C61A88;
  v8 = v4;
  objc_msgSend(a2, "firewallCollaboratorForService:withErrorHandler:", v5, v7);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "impactedServicesForService:withCompletion:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), *(_QWORD *)(a1 + 40));

}

void sub_190722A88(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging IDSService](IDSLogging, "IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Error fetching firewall collaborator {error: %@}", (uint8_t *)&v5, 0xCu);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_190722DA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_190722DB4(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_19072556C;
  v11[3] = &unk_1E2C61B28;
  v12 = v5;
  v13 = v7;
  v14 = v6;
  v8 = v6;
  v9 = v7;
  v10 = v5;
  +[IDSXPCDaemonController performDaemonControllerTask:](IDSXPCDaemonController, "performDaemonControllerTask:", v11);

}

void sub_190722E80(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v4 = *(_QWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_190722F08;
  v6[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v5;
  objc_msgSend(a2, "addEntries:withCompletion:", v4, v6);

}

void sub_190722F08(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_190722FA0;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_190722FA0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190722FB0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_190723048;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_190723048(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1907232A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1907232B0(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v4 = *(_QWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_190723338;
  v6[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v5;
  objc_msgSend(a2, "removeDonatedEntries:withCompletion:", v4, v6);

}

void sub_190723338(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_1907233D0;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_1907233D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1907233E0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_190723478;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_190723478(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1907236D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1907236E0(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v4 = *(_QWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_190723768;
  v6[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v5;
  objc_msgSend(a2, "removeEntries:withCompletion:", v4, v6);

}

void sub_190723768(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_190723800;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_190723800(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190723810(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_1907238A8;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_1907238A8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190723AC0(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v4 = *(_QWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_190723B4C;
  v6[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v5;
  objc_msgSend(a2, "replaceEntries:replaceAll:withCompletion:", v4, 0, v6);

}

void sub_190723B4C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_190723BE4;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_190723BE4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190723BF4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_190723C8C;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_190723C8C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190723EA0(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v4 = *(_QWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_190723F2C;
  v6[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 48);
  v6[4] = *(_QWORD *)(a1 + 40);
  v7 = v5;
  objc_msgSend(a2, "replaceEntries:replaceAll:withCompletion:", v4, 1, v6);

}

void sub_190723F2C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_190723FC4;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_190723FC4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190723FD4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_19072406C;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_19072406C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19072420C(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1907256D4;
  v11[3] = &unk_1E2C61B28;
  v12 = v5;
  v13 = v7;
  v14 = v6;
  v8 = v6;
  v9 = v7;
  v10 = v5;
  +[IDSXPCDaemonController performDaemonControllerTask:](IDSXPCDaemonController, "performDaemonControllerTask:", v11);

}

void sub_1907242D8(uint64_t a1, void *a2)
{
  id v4;
  _QWORD v5[5];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_190724350;
  v5[3] = &unk_1E2C61AD8;
  v4 = *(id *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(a2, "currentDonatedEntries:", v5);

}

void sub_190724350(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_190724410;
    block[3] = &unk_1E2C60EC8;
    v12 = v7;
    v10 = v5;
    v11 = v6;
    dispatch_async(v8, block);

  }
}

uint64_t sub_190724410(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_190724424(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1907244E4;
    block[3] = &unk_1E2C60EC8;
    v12 = v7;
    v10 = v5;
    v11 = v6;
    dispatch_async(v8, block);

  }
}

uint64_t sub_1907244E4(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_190724688(uint64_t a1, void *a2)
{
  id v4;
  _QWORD v5[5];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_190724700;
  v5[3] = &unk_1E2C61AD8;
  v4 = *(id *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(a2, "currentEntries:", v5);

}

void sub_190724700(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1907247C0;
    block[3] = &unk_1E2C60EC8;
    v12 = v7;
    v10 = v5;
    v11 = v6;
    dispatch_async(v8, block);

  }
}

uint64_t sub_1907247C0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1907247D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_190724894;
    block[3] = &unk_1E2C60EC8;
    v12 = v7;
    v10 = v5;
    v11 = v6;
    dispatch_async(v8, block);

  }
}

uint64_t sub_190724894(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_190724A38(uint64_t a1, void *a2)
{
  id v4;
  _QWORD v5[5];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_190724AB0;
  v5[3] = &unk_1E2C60E28;
  v4 = *(id *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(a2, "removeAllDonatedEntries:", v5);

}

void sub_190724AB0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_190724B48;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_190724B48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190724B58(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_190724BF0;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_190724BF0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190724D90(uint64_t a1, void *a2)
{
  id v4;
  _QWORD v5[5];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_190724E08;
  v5[3] = &unk_1E2C60E28;
  v4 = *(id *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(a2, "removeAllEntries:", v5);

}

void sub_190724E08(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_190724EA0;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_190724EA0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190724EB0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_190724F48;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_190724F48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1907250E8(uint64_t a1, void *a2)
{
  id v4;
  _QWORD v5[5];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_190725160;
  v5[3] = &unk_1E2C61AD8;
  v4 = *(id *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(a2, "recentlyBlockedEntries:", v5);

}

void sub_190725160(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_190725220;
    block[3] = &unk_1E2C60EC8;
    v12 = v7;
    v10 = v5;
    v11 = v6;
    dispatch_async(v8, block);

  }
}

uint64_t sub_190725220(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_190725234(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1907252F4;
    block[3] = &unk_1E2C60EC8;
    v12 = v7;
    v10 = v5;
    v11 = v6;
    dispatch_async(v8, block);

  }
}

uint64_t sub_1907252F4(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_19072556C(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_190725608;
  v6[3] = &unk_1E2C61A88;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  objc_msgSend(a2, "firewallCollaboratorForService:withErrorHandler:", v4, v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_190725608(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging IDSService](IDSLogging, "IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Error fetching firewall collaborator {error: %@}", (uint8_t *)&v5, 0xCu);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1907256D4(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_190725770;
  v6[3] = &unk_1E2C61A88;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  objc_msgSend(a2, "firewallCollaboratorForService:withErrorHandler:", v4, v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_190725770(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging IDSService](IDSLogging, "IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Error fetching firewall collaborator {error: %@}", (uint8_t *)&v5, 0xCu);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1907259C4()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("IDSBatchIDQueryControllerQueue", v2);
  v1 = (void *)qword_1EE1E1F60;
  qword_1EE1E1F60 = (uint64_t)v0;

}

void sub_190725A14(_QWORD *a1)
{
  _IDSBatchIDQueryController *v2;
  uint64_t v3;
  void *v4;

  v2 = -[_IDSBatchIDQueryController initWithService:delegate:queue:parent:]([_IDSBatchIDQueryController alloc], "initWithService:delegate:queue:parent:", a1[5], a1[6], a1[7], a1[4]);
  v3 = a1[4];
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

}

void sub_190725AD4(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;

}

uint64_t sub_190725B64(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setDestinations:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_190725BCC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "invalidate");
}

void sub_19072631C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1907265AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_190726710(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id IDSProcessVMRequest(void *a1)
{
  id v1;
  uint64_t v2;
  _QWORD *v3;
  IDSDaemonResponseHandler *v4;
  void *v5;
  IDSDaemonResponseHandler *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  id v13;
  int v15;
  const char *v16;
  _QWORD v17[4];
  id v18;
  id v19;
  _QWORD v20[6];
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  __int128 buf;
  void (*v31)(uint64_t);
  void *v32;
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_IDSRunningInDaemon())
    sub_1907E97C0();
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = sub_1906EE214;
  v28 = sub_1906EE0DC;
  v29 = 0;
  v21 = 0;
  v22[0] = &v21;
  v22[1] = 0x3032000000;
  v22[2] = sub_1906EE214;
  v22[3] = sub_1906EE0DC;
  v23 = 0;
  v2 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_190726AC4;
  v20[3] = &unk_1E2C61B60;
  v20[4] = &v24;
  v20[5] = &v21;
  v3 = v20;
  if ((_IDSRunningInDaemon() & 1) != 0)
  {
    v15 = 41;
    v16 = "_IDSScheduleSyncTimeoutForVMCompletionBlock";
    goto LABEL_18;
  }
  v4 = [IDSDaemonResponseHandler alloc];
  v5 = (void *)MEMORY[0x19400FE1C](v3);
  v6 = -[IDSDaemonResponseHandler initWithBlock:queue:isSync:](v4, "initWithBlock:queue:isSync:", v5, 0, 1);

  sub_190726B44();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&buf = v2;
  *((_QWORD *)&buf + 1) = 3221225472;
  v31 = sub_190726B84;
  v32 = &unk_1E2C604E8;
  v33 = v3;
  v8 = v3;
  objc_msgSend(v7, "scheduleTimeoutWithResponseHandler:timeoutInterval:timeoutBlock:", v6, &buf, 120.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
    goto LABEL_10;
  objc_msgSend(MEMORY[0x1E0D36AA8], "vm");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v9;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Sending VM data request ID %@ to daemon", (uint8_t *)&buf, 0xCu);
  }

  if (_IDSRunningInDaemon())
  {
    v15 = 30;
    v16 = "_IDSListenForVMResponses";
LABEL_18:
    __assert_rtn(v16, "IDSVM.m", v15, "!_IDSRunningInDaemon()");
  }
  if (qword_1EE1E1FB0 != -1)
    dispatch_once(&qword_1EE1E1FB0, &unk_1E2C5FF10);
  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v2;
  v17[1] = 3221225472;
  v17[2] = sub_190726B38;
  v17[3] = &unk_1E2C61B88;
  v18 = v1;
  v19 = v9;
  objc_msgSend(v11, "forwardMethodWithReplyIsSync:block:", 1, v17);

LABEL_10:
  if (*(_QWORD *)(v22[0] + 40))
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "vm");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1907E97E8((uint64_t)v9, (uint64_t)v22, v12);

  }
  v13 = (id)v25[5];

  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v24, 8);

  return v13;
}

void sub_190726A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_190726AC4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v5;
  v11 = v5;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v6;

}

uint64_t sub_190726B38(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_requestVMData_requestID_);
}

id sub_190726B44()
{
  if (qword_1EE1E1E68 != -1)
    dispatch_once(&qword_1EE1E1E68, &unk_1E2C5F8D0);
  return (id)qword_1EE1E1E90;
}

void sub_190726B84(uint64_t a1)
{
  id v2;
  id v3;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v3 = (id)objc_msgSend(v2, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D34C98], 3, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
}

void sub_190726C00()
{
  IDSDaemonRequestTimer *v0;
  void *v1;

  v0 = objc_alloc_init(IDSDaemonRequestTimer);
  v1 = (void *)qword_1EE1E1E90;
  qword_1EE1E1E90 = (uint64_t)v0;

}

void sub_190726C28()
{
  IDSVMDaemonResponseListener *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v0 = [IDSVMDaemonResponseListener alloc];
  sub_190726B44();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = -[IDSVMDaemonResponseListener initWithRequestTimer:](v0, "initWithRequestTimer:", v1);
  v3 = (void *)qword_1EE1E1FA8;
  qword_1EE1E1FA8 = v2;

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "listener");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addHandler:", qword_1EE1E1FA8);

}

uint64_t sub_190726CBC()
{
  return im_local_object_peer_event_handler();
}

uint64_t sub_190726CC4(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_190726D44()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE209E98);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD64E8;
  qword_1ECDD64E8 = v0;

  v2 = (void *)qword_1ECDD64E8;
  v3 = (void *)MEMORY[0x1E0C99E60];
  v23[0] = objc_opt_class();
  v23[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v23, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setWithArray:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v5, sel_fetchIdentityForPinningWithCompletion_, 0, 1);

  v6 = (void *)qword_1ECDD64E8;
  v7 = (void *)MEMORY[0x1E0C99E60];
  v22 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v22, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setWithArray:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setClasses:forSelector:argumentIndex:ofReply:", v9, sel_pinIdentityBlob_withCompletion_, 0, 0);

  v10 = (void *)qword_1ECDD64E8;
  v11 = (void *)MEMORY[0x1E0C99E60];
  v21 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v21, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setWithArray:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_pinIdentityBlob_withCompletion_, 0, 1);

  v14 = (void *)qword_1ECDD64E8;
  v15 = (void *)MEMORY[0x1E0C99E60];
  v18 = objc_opt_class();
  v19 = objc_opt_class();
  v20 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v18, 3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setWithArray:", v16, v18, v19);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setClasses:forSelector:argumentIndex:ofReply:", v17, sel_fetchAllPinnedIdentitiesWithCompletion_, 0, 1);

}

void sub_1907278D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1907278EC()
{
  return (id)objc_opt_self();
}

void sub_190727A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190727A7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "account");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190727B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190727B84(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isActive");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_190727C7C(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "addDelegate:queue:", a1[5], a1[6]);
}

uint64_t sub_190727D20(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeDelegate:", *(_QWORD *)(a1 + 40));
}

void sub_190727E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190727E94(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendProtobuf:toDestinations:priority:options:identifier:error:", a1[5], a1[6], a1[9], a1[7], a1[10], a1[11]);
  *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_190728024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19072803C(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendMessage:toDestinations:priority:options:identifier:error:", a1[5], a1[6], a1[9], a1[7], a1[10], a1[11]);
  *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_1907281CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907281E4(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendData:toDestinations:priority:options:identifier:error:", a1[5], a1[6], a1[9], a1[7], a1[10], a1[11]);
  *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_190728F74()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE209EF8);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD64F0;
  qword_1ECDD64F0 = v0;

  v2 = objc_alloc(MEMORY[0x1E0C99E60]);
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v8 = (id)objc_msgSend(v2, "initWithObjects:", v3, v4, objc_opt_class(), 0);
  objc_msgSend((id)qword_1ECDD64F0, "setClasses:forSelector:argumentIndex:ofReply:", v8, sel_getPairingRecordsWithCompletion_, 1, 1);
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  objc_msgSend(v5, "setWithObjects:", v6, objc_opt_class(), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)qword_1ECDD64F0, "setClasses:forSelector:argumentIndex:ofReply:", v7, sel_getPairingDevicesWithCompletion_, 0, 1);
  objc_msgSend((id)qword_1ECDD64F0, "setClasses:forSelector:argumentIndex:ofReply:", v7, sel_getPairedDevicesWithCompletion_, 0, 1);

}

void sub_19072AFF4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE209F58);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD64F8;
  qword_1ECDD64F8 = v0;

  v2 = (void *)qword_1ECDD64F8;
  +[IDSXPCPairingInterface interface](IDSXPCPairingInterface, "interface");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setInterface:forSelector:argumentIndex:ofReply:", v3, sel_pairingCollaboratorWithCompletion_, 0, 1);

  v4 = (void *)qword_1ECDD64F8;
  +[IDSXPCReunionSyncInterface interface](IDSXPCReunionSyncInterface, "interface");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setInterface:forSelector:argumentIndex:ofReply:", v5, sel_reunionSyncCollaboratorForClientProcessName_withCompletion_, 0, 1);

  v6 = (void *)qword_1ECDD64F8;
  +[IDSXPCPairedDeviceManagerInterface interface](IDSXPCPairedDeviceManagerInterface, "interface");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setInterface:forSelector:argumentIndex:ofReply:", v7, sel_pairedDeviceManagerCollaboratorWithCompletion_, 0, 1);

  v8 = (void *)qword_1ECDD64F8;
  +[IDSXPCOpportunisticInterface interface](IDSXPCOpportunisticInterface, "interface");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setInterface:forSelector:argumentIndex:ofReply:", v9, sel_opportunisticCollaboratorWithCompletion_, 0, 1);

  v10 = (void *)qword_1ECDD64F8;
  +[IDSXPCRegistrationInterface interface](IDSXPCRegistrationInterface, "interface");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setInterface:forSelector:argumentIndex:ofReply:", v11, sel_registrationCollaboratorWithCompletion_, 0, 1);

  v12 = (void *)qword_1ECDD64F8;
  +[IDSXPCActivityMonitorInterface interface](IDSXPCActivityMonitorInterface, "interface");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setInterface:forSelector:argumentIndex:ofReply:", v13, sel_activityMonitorCollaboratorWithCompletion_, 0, 1);

  v14 = (void *)qword_1ECDD64F8;
  +[IDSXPCServerMessagingInterface interface](IDSXPCServerMessagingInterface, "interface");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setInterface:forSelector:argumentIndex:ofReply:", v15, sel_serverMessagingCollaboratorWithCompletion_, 0, 1);

  v16 = (void *)qword_1ECDD64F8;
  +[IDSXPCOffGridMessengerInterface interface](IDSXPCOffGridMessengerInterface, "interface");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setInterface:forSelector:argumentIndex:ofReply:", v17, sel_offGridMessengerCollaboratorWithCompletion_, 0, 1);

  v18 = (void *)qword_1ECDD64F8;
  +[IDSXPCOffGridStateManagerInterface interface](IDSXPCOffGridStateManagerInterface, "interface");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setInterface:forSelector:argumentIndex:ofReply:", v19, sel_offGridStateManagerCollaboratorWithCompletion_, 0, 1);

  v20 = (void *)qword_1ECDD64F8;
  +[IDSXPCKeyTransparencyInterface interface](IDSXPCKeyTransparencyInterface, "interface");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setInterface:forSelector:argumentIndex:ofReply:", v21, sel_keyTransparencyCollaboratorWithCompletion_, 0, 1);

  v22 = (void *)qword_1ECDD64F8;
  +[IDSXPCPinnedIdentityInterface interface](IDSXPCPinnedIdentityInterface, "interface");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setInterface:forSelector:argumentIndex:ofReply:", v23, sel_pinnedIdentityCollaboratorWithCompletion_, 0, 1);

  v24 = (void *)qword_1ECDD64F8;
  +[IDSXPCFirewallInterface interface](IDSXPCFirewallInterface, "interface");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setInterface:forSelector:argumentIndex:ofReply:", v25, sel_firewallCollaboratorForService_withCompletion_, 0, 1);

  v26 = (void *)qword_1ECDD64F8;
  +[IDSXPCGroupSessionKeyValueDeliveryProviderInterface interface](IDSXPCGroupSessionKeyValueDeliveryProviderInterface, "interface");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setInterface:forSelector:argumentIndex:ofReply:", v27, sel_groupSessionKeyValueDeliveryProviderCollaboratorWithCompletion_, 0, 1);

  v28 = (void *)qword_1ECDD64F8;
  +[IDSXPCFeatureTogglerInterface interface](IDSXPCFeatureTogglerInterface, "interface");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setInterface:forSelector:argumentIndex:ofReply:", v29, sel_featureTogglerForService_withCompletion_, 0, 1);

  v30 = (void *)qword_1ECDD64F8;
  +[IDSXPCBAASignerInterface interface](IDSXPCBAASignerInterface, "interface");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "setInterface:forSelector:argumentIndex:ofReply:", v31, sel_baaSignerCollaboratorForTopic_withCompletion_, 0, 1);

  v32 = (void *)qword_1ECDD64F8;
  +[IDSXPCInternalTestingInterface interface](IDSXPCInternalTestingInterface, "interface");
  v33 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "setInterface:forSelector:argumentIndex:ofReply:", v33, sel_interalTestingCollaboratorWithCompletion_, 0, 1);

}

void sub_19072B404()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE209FB8);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EE1E1FB8;
  qword_1EE1E1FB8 = v0;

}

void sub_19072B5F4()
{
  IDSPairedDeviceManager *v0;
  void *v1;

  v0 = objc_alloc_init(IDSPairedDeviceManager);
  v1 = (void *)qword_1ECDD66E8;
  qword_1ECDD66E8 = (uint64_t)v0;

}

void sub_19072B804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19072B81C(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 48));
}

void sub_19072B8F0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 136315394;
    v5 = "-[IDSPairedDeviceManager setAllowedTrafficClassifiers:]_block_invoke";
    v6 = 2112;
    v7 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "%s: received new traffic classifiers %@", (uint8_t *)&v4, 0x16u);
  }

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 48), *(id *)(a1 + 32));
}

void sub_19072B9F8()
{
  id v0;

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "dropAllMessagesWithoutAnyAllowedClassifier");

}

void sub_19072BAF4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Received paired device info, sending to daemon for saving", v4, 2u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setPairedDeviceInfo:", *(_QWORD *)(a1 + 32));

}

void sub_19072BD48(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_19072BDDC;
  v7[3] = &unk_1E2C60E00;
  v4 = *(NSObject **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t sub_19072BDDC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19072BDEC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0D36AA8];
  v4 = a2;
  objc_msgSend(v3, "registration");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136315394;
    v15 = "-[IDSPairedDeviceManager deletePairedDevice:withCompletionBlock:queue:]_block_invoke_4";
    v16 = 2112;
    v17 = v6;
    _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "%s: device CBUUID: %@", buf, 0x16u);
  }

  v7 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_19072BF64;
  v12[3] = &unk_1E2C61A88;
  v13 = *(id *)(a1 + 48);
  objc_msgSend(v4, "pairingCollaboratorWithErrorHandler:", v12);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v10[0] = v7;
  v10[1] = 3221225472;
  v10[2] = sub_19072BF74;
  v10[3] = &unk_1E2C61A88;
  v9 = *(_QWORD *)(a1 + 40);
  v11 = *(id *)(a1 + 48);
  objc_msgSend(v8, "deletePairedDeviceWithID:completion:", v9, v10);

}

uint64_t sub_19072BF64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19072BF74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19072C10C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_19072C1A0;
  v7[3] = &unk_1E2C60E00;
  v4 = *(NSObject **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t sub_19072C1A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19072C1B0(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  _QWORD v8[4];
  id v9;

  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_19072C27C;
  v8[3] = &unk_1E2C61A88;
  v9 = *(id *)(a1 + 32);
  objc_msgSend(a2, "pairedDeviceManagerCollaboratorWithErrorHandler:", v8);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v4;
  v6[1] = 3221225472;
  v6[2] = sub_19072C2F0;
  v6[3] = &unk_1E2C61F10;
  v7 = *(id *)(a1 + 32);
  objc_msgSend(v5, "getLocalDeviceInfoWithCompletion:", v6);

}

void sub_19072C27C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907E9D70();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19072C2F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138412290;
    v10 = v5;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Received local device info from daemon, device: %@", (uint8_t *)&v9, 0xCu);
  }

  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1907E9DD0();

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_19072C590(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_19072C624;
  v7[3] = &unk_1E2C60E00;
  v4 = *(NSObject **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t sub_19072C624(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19072C634(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  _QWORD v8[4];
  id v9;

  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_19072C700;
  v8[3] = &unk_1E2C61A88;
  v9 = *(id *)(a1 + 32);
  objc_msgSend(a2, "pairedDeviceManagerCollaboratorWithErrorHandler:", v8);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v4;
  v6[1] = 3221225472;
  v6[2] = sub_19072C778;
  v6[3] = &unk_1E2C61F10;
  v7 = *(id *)(a1 + 32);
  objc_msgSend(v5, "getPairedDeviceInfoWithCompletion:", v6);

}

void sub_19072C700(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1907E9EA0();

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_19072C778(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138412290;
    v10 = v5;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Received paired device info from daemon, device: %@", (uint8_t *)&v9, 0xCu);
  }

  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1907E9F00();

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_19072C988(_QWORD *a1)
{
  _IDSCompletionHandler *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = -[_IDSCompletionHandler initWithHandler:queue:]([_IDSCompletionHandler alloc], "initWithHandler:queue:", a1[6], a1[5]);
  v3 = a1[4];
  v4 = *(void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v2;

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "getDeliveryStats");

}

void sub_19072CBA0(uint64_t a1)
{
  void (**v1)(id, _QWORD);

  objc_msgSend(*(id *)(a1 + 32), "handler");
  v1 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue();
  v1[2](v1, 0);

}

void sub_19072CC9C(uint64_t a1)
{
  void (**v2)(id, _QWORD);

  objc_msgSend(*(id *)(a1 + 32), "handler");
  v2 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue();
  v2[2](v2, *(_QWORD *)(a1 + 40));

}

void sub_19072CD98(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_19072CE20;
  v5[3] = &unk_1E2C61A88;
  v6 = *(id *)(a1 + 40);
  objc_msgSend(a2, "registrationCollaboratorWithErrorHandler:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "constructRAResponseDictionaryForServices:completionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19072CE20(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1907E9FD0();

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_19072CF0C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void sub_19072D0EC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_19072D110(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  +[IDSXPCDaemonController weakSharedInstance](IDSXPCDaemonController, "weakSharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "setDaemonController:", v1);

  objc_msgSend(WeakRetained, "_setupInterruptionHandler");
  objc_msgSend(WeakRetained, "_setupXPC");

}

void sub_19072D218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19072D234(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(WeakRetained, "uuid");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = 138412290;
    v5 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "XPC interruption for client %@", (uint8_t *)&v4, 0xCu);

  }
  objc_msgSend(WeakRetained, "_setupXPC");

}

void sub_19072D444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19072D468(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    objc_msgSend(v6, "offGridStateManagerCollaboratorWithErrorHandler:", &unk_1E2C5F990);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "uuid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setupOffGridStateManagerClient:withUUID:completion:", WeakRetained, v5, &unk_1E2C5FF70);

  }
}

void sub_19072D4FC(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907EA030();

}

void sub_19072D6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19072D710(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907EA090();

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v3;

}

void sub_19072D784(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;

  v5 = a3;
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1907EA0F0();

  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  }

}

void sub_19072D984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19072D9A8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907EA090();

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v3;

}

void sub_19072DA1C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;

  v5 = a3;
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1907EA150();

  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  }

}

uint64_t sub_19072DB28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19072DC54(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_19072DC78(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  id v8;
  id v9;
  uint64_t v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "daemonController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_19072DD2C;
  v7[3] = &unk_1E2C62098;
  v4 = *(id *)(a1 + 48);
  v5 = *(void **)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 64);
  v9 = v4;
  v10 = v6;
  v8 = v5;
  objc_msgSend(v3, "performTask:", v7);

}

void sub_19072DD2C(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD v10[5];
  id v11;
  _QWORD v12[5];
  id v13;

  v4 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_19072DE0C;
  v12[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 48);
  v12[4] = *(_QWORD *)(a1 + 32);
  v13 = v5;
  objc_msgSend(a2, "offGridStateManagerCollaboratorWithErrorHandler:", v12);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v4;
  v10[1] = 3221225472;
  v10[2] = sub_19072DEF8;
  v10[3] = &unk_1E2C62070;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(id *)(a1 + 48);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v9;
  objc_msgSend(v6, "setOffGridMode:options:completion:", v8, v7, v10);

}

void sub_19072DE0C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907EA030();

  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_19072DEE0;
    v7[3] = &unk_1E2C60E00;
    v9 = v5;
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

uint64_t sub_19072DEE0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 2, *(_QWORD *)(a1 + 32));
}

void sub_19072DEF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218498;
    v17 = a2;
    v18 = 2048;
    v19 = a3;
    v20 = 2112;
    v21 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "Submitted request to set offgrid mode. Current mode: %ld publish: %ld error: %@", buf, 0x20u);
  }

  v9 = *(void **)(a1 + 40);
  if (v9)
  {
    v10 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = sub_19072E048;
    v11[3] = &unk_1E2C62048;
    v13 = v9;
    v14 = a2;
    v15 = a3;
    v12 = v7;
    dispatch_async(v10, v11);

  }
}

uint64_t sub_19072E048(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], a1[6], a1[7], a1[4]);
}

void sub_19072E1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_19072E220(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907EA090();

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v3;

}

void sub_19072E294(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  objc_msgSend(a2, "allObjects");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObjectsFromArray:", v3);

}

void sub_19072E40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  _Block_object_dispose(&a18, 8);
  objc_destroyWeak((id *)(v19 - 40));
  _Unwind_Resume(a1);
}

void sub_19072E444(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  _QWORD v5[5];
  id v6;
  uint64_t v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "daemonController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_19072E4E8;
  v5[3] = &unk_1E2C62188;
  v4 = *(id *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(_QWORD *)(a1 + 48);
  objc_msgSend(v3, "performTask:", v5);

}

void sub_19072E4E8(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  __int128 v8;
  _QWORD v9[5];
  __int128 v10;
  _QWORD v11[5];
  id v12;
  uint64_t v13;

  v4 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_19072E5D4;
  v11[3] = &unk_1E2C62138;
  v5 = *(id *)(a1 + 40);
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v5;
  v13 = *(_QWORD *)(a1 + 48);
  objc_msgSend(a2, "offGridStateManagerCollaboratorWithErrorHandler:", v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v4;
  v9[1] = 3221225472;
  v9[2] = sub_19072E6C8;
  v9[3] = &unk_1E2C62160;
  v8 = *(_OWORD *)(a1 + 40);
  v7 = (id)v8;
  v10 = v8;
  v9[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v6, "invitedHandlesWithCompletion:", v9);

}

void sub_19072E5D4(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  _QWORD block[4];
  id v10;
  id v11;
  uint64_t v12;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907EA030();

  v5 = (void *)a1[5];
  if (v5)
  {
    v6 = *(NSObject **)(a1[4] + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19072E6AC;
    block[3] = &unk_1E2C62110;
    v7 = v5;
    v8 = a1[6];
    v11 = v7;
    v12 = v8;
    v10 = v3;
    dispatch_async(v6, block);

  }
}

uint64_t sub_19072E6AC(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), a1[4]);
}

void sub_19072E6C8(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  _QWORD block[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  id v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v19 = v5;
    v20 = 2112;
    v21 = v6;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Fetched invited handles %@ with error %@", buf, 0x16u);
  }

  if (!v6)
  {
    v8 = *(void **)(*(_QWORD *)(a1[6] + 8) + 40);
    objc_msgSend(v5, "allObjects");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "addObjectsFromArray:", v9);

  }
  v10 = (void *)a1[5];
  if (v10)
  {
    v11 = *(NSObject **)(a1[4] + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19072E844;
    block[3] = &unk_1E2C62110;
    v12 = v10;
    v13 = a1[6];
    v16 = v12;
    v17 = v13;
    v15 = v6;
    dispatch_async(v11, block);

  }
}

uint64_t sub_19072E844(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), a1[4]);
}

void sub_19072E9B4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_19072E9D8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;
  id v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend(WeakRetained, "daemonController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_19072EAB0;
  v7[3] = &unk_1E2C60EA0;
  v4 = *(id *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v11 = v4;
  v7[4] = v5;
  v8 = v6;
  v9 = *(id *)(a1 + 48);
  v10 = *(id *)(a1 + 56);
  objc_msgSend(v3, "performTask:", v7);

}

void sub_19072EAB0(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  id v13;
  _QWORD v14[5];
  id v15;
  id v16;
  id v17;

  v4 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_19072EBC8;
  v14[3] = &unk_1E2C621D8;
  v5 = *(id *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v17 = v5;
  v14[4] = v6;
  v15 = v7;
  v16 = *(id *)(a1 + 48);
  objc_msgSend(a2, "offGridStateManagerCollaboratorWithErrorHandler:", v14);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v12[0] = v4;
  v12[1] = 3221225472;
  v12[2] = sub_19072ED1C;
  v12[3] = &unk_1E2C62228;
  v11 = *(_QWORD *)(a1 + 40);
  v12[4] = *(_QWORD *)(a1 + 32);
  v13 = *(id *)(a1 + 64);
  objc_msgSend(v8, "inviteHandles:fromSenderHandle:withDictionaryPayload:completion:", v9, v11, v10, v12);

}

void sub_19072EBC8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907EA030();

  v5 = *(void **)(a1 + 56);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_19072ECC4;
    v7[3] = &unk_1E2C60F18;
    v11 = v5;
    v8 = *(id *)(a1 + 40);
    v9 = *(id *)(a1 + 48);
    v10 = v3;
    dispatch_async(v6, v7);

  }
}

void sub_19072ECC4(_QWORD *a1)
{
  uint64_t v2;
  id v3;

  v2 = a1[7];
  objc_msgSend(MEMORY[0x1E0C99E60], "set");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, _QWORD, _QWORD, _QWORD))(v2 + 16))(v2, v3, a1[4], a1[5], a1[6]);

}

void sub_19072ED1C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  _QWORD block[4];
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint8_t buf[4];
  id v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v25 = v9;
    v26 = 2112;
    v27 = v12;
    _os_log_impl(&dword_1906E0000, v13, OS_LOG_TYPE_DEFAULT, "Invited handles %@ with error %@", buf, 0x16u);
  }

  if (!v12)
  {
    v14 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
    objc_msgSend(v9, "allObjects");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "addObjectsFromArray:", v15);

  }
  v16 = *(void **)(a1 + 40);
  if (v16)
  {
    v17 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19072EEE8;
    block[3] = &unk_1E2C62200;
    v23 = v16;
    v19 = v9;
    v20 = v10;
    v21 = v11;
    v22 = v12;
    dispatch_async(v17, block);

  }
}

uint64_t sub_19072EEE8(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1[8] + 16))(a1[8], a1[4], a1[5], a1[6], a1[7]);
}

void sub_19072F004(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_19072F028(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  id v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "daemonController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_19072F0D8;
  v7[3] = &unk_1E2C60F68;
  v4 = *(id *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v9 = v4;
  v7[4] = v5;
  v8 = v6;
  objc_msgSend(v3, "performTask:", v7);

}

void sub_19072F0D8(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];
  id v9;
  _QWORD v10[5];
  id v11;

  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_19072F1B4;
  v10[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 48);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v5;
  objc_msgSend(a2, "offGridStateManagerCollaboratorWithErrorHandler:", v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v4;
  v8[1] = 3221225472;
  v8[2] = sub_19072F2DC;
  v8[3] = &unk_1E2C61058;
  v7 = *(_QWORD *)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = *(id *)(a1 + 48);
  objc_msgSend(v6, "removeInvitedHandles:completion:", v7, v8);

}

void sub_19072F1B4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907EA030();

  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_19072F288;
    v7[3] = &unk_1E2C60E00;
    v9 = v5;
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

void sub_19072F288(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99E60], "set");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, _QWORD))(v2 + 16))(v2, v3, *(_QWORD *)(a1 + 32));

}

void sub_19072F2DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v15 = v5;
    v16 = 2112;
    v17 = v6;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Removed invited handles %@ with error %@", buf, 0x16u);
  }

  if (v5 && !v6)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "minusSet:", v5);
  v8 = *(void **)(a1 + 40);
  if (v8)
  {
    v9 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19072F444;
    block[3] = &unk_1E2C60EC8;
    v13 = v8;
    v11 = v5;
    v12 = v6;
    dispatch_async(v9, block);

  }
}

uint64_t sub_19072F444(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_19072F52C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_19072F550(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  _QWORD v5[5];
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "daemonController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_19072F5EC;
  v5[3] = &unk_1E2C61F88;
  v4 = *(id *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(v3, "performTask:", v5);

}

void sub_19072F5EC(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  _QWORD v10[5];
  id v11;

  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_19072F6C0;
  v10[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v5;
  objc_msgSend(a2, "offGridStateManagerCollaboratorWithErrorHandler:", v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v4;
  v8[1] = 3221225472;
  v8[2] = sub_19072F7E8;
  v8[3] = &unk_1E2C61058;
  v7 = *(void **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v7;
  objc_msgSend(v6, "removeAllInvitedHandlesWithCompletion:", v8);

}

void sub_19072F6C0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907EA030();

  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_19072F794;
    v7[3] = &unk_1E2C60E00;
    v9 = v5;
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

void sub_19072F794(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99E60], "set");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, _QWORD))(v2 + 16))(v2, v3, *(_QWORD *)(a1 + 32));

}

void sub_19072F7E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v15 = v5;
    v16 = 2112;
    v17 = v6;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Removed all invited handles %@ with error %@", buf, 0x16u);
  }

  if (!v6)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeAllObjects");
  v8 = *(void **)(a1 + 40);
  if (v8)
  {
    v9 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19072F948;
    block[3] = &unk_1E2C60EC8;
    v13 = v8;
    v11 = v5;
    v12 = v6;
    dispatch_async(v9, block);

  }
}

uint64_t sub_19072F948(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_19072FA40(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_19072FA64(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  _QWORD v5[5];
  id v6;
  uint64_t v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "daemonController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_19072FB08;
  v5[3] = &unk_1E2C622C8;
  v4 = *(id *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(_QWORD *)(a1 + 56);
  objc_msgSend(v3, "performTask:", v5);

}

void sub_19072FB08(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD v9[5];
  id v10;
  _QWORD v11[5];
  id v12;

  v4 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_19072FBE0;
  v11[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 40);
  v11[4] = *(_QWORD *)(a1 + 32);
  v12 = v5;
  objc_msgSend(a2, "offGridStateManagerCollaboratorWithErrorHandler:", v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v4;
  v9[1] = 3221225472;
  v9[2] = sub_19072FD08;
  v9[3] = &unk_1E2C61AD8;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(id *)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v8;
  objc_msgSend(v6, "fetchContactsOfType:completion:", v7, v9);

}

void sub_19072FBE0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907EA030();

  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_19072FCB4;
    v7[3] = &unk_1E2C60E00;
    v9 = v5;
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

void sub_19072FCB4(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99D20], "array");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, _QWORD))(v2 + 16))(v2, v3, *(_QWORD *)(a1 + 32));

}

void sub_19072FD08(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Calling out to client completion in fetchContactsOfType", buf, 2u);
  }

  v8 = *(void **)(a1 + 40);
  if (v8)
  {
    v9 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_19072FE14;
    block[3] = &unk_1E2C60EC8;
    v13 = v8;
    v11 = v5;
    v12 = v6;
    dispatch_async(v9, block);

  }
}

uint64_t sub_19072FE14(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_19072FEFC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_19072FF20(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  _QWORD v5[5];
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "daemonController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_19072FFBC;
  v5[3] = &unk_1E2C61F88;
  v4 = *(id *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(v3, "performTask:", v5);

}

void sub_19072FFBC(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;
  _QWORD v10[5];
  id v11;

  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_190730090;
  v10[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v5;
  objc_msgSend(a2, "offGridStateManagerCollaboratorWithErrorHandler:", v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v4;
  v8[1] = 3221225472;
  v8[2] = sub_19073017C;
  v8[3] = &unk_1E2C62340;
  v7 = *(id *)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v7;
  objc_msgSend(v6, "fetchStewieAvailabilityWithCompletion:", v8);

}

void sub_190730090(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907EA030();

  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_190730164;
    v7[3] = &unk_1E2C60E00;
    v9 = v5;
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

uint64_t sub_190730164(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, *(_QWORD *)(a1 + 32));
}

void sub_19073017C(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  NSObject *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  char v14;

  v7 = a4;
  v8 = *(void **)(a1 + 40);
  if (v8)
  {
    v9 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_190730228;
    v10[3] = &unk_1E2C62318;
    v14 = a2;
    v12 = v8;
    v13 = a3;
    v11 = v7;
    dispatch_async(v9, v10);

  }
}

uint64_t sub_190730228(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

void sub_190730314(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_190730338(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  _QWORD v5[5];
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "daemonController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1907303D4;
  v5[3] = &unk_1E2C61F88;
  v4 = *(id *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(v3, "performTask:", v5);

}

void sub_1907303D4(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;
  _QWORD v10[5];
  id v11;

  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1907304A0;
  v10[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v5;
  objc_msgSend(a2, "offGridStateManagerCollaboratorWithErrorHandler:", v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v4;
  v8[1] = 3221225472;
  v8[2] = sub_190730584;
  v8[3] = &unk_1E2C60E28;
  v7 = *(id *)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v7;
  objc_msgSend(v6, "connectStewieWithCompletion:", v8);

}

void sub_1907304A0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907EA030();

  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_190730574;
    v7[3] = &unk_1E2C60E00;
    v9 = v5;
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

uint64_t sub_190730574(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190730584(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_19073061C;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_19073061C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190730700(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_190730724(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  _QWORD v5[5];
  id v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "daemonController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1907307C0;
  v5[3] = &unk_1E2C61F88;
  v4 = *(id *)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(v3, "performTask:", v5);

}

void sub_1907307C0(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;
  _QWORD v10[5];
  id v11;

  v4 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_19073088C;
  v10[3] = &unk_1E2C60E28;
  v5 = *(id *)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v5;
  objc_msgSend(a2, "offGridStateManagerCollaboratorWithErrorHandler:", v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v4;
  v8[1] = 3221225472;
  v8[2] = sub_190730970;
  v8[3] = &unk_1E2C60E28;
  v7 = *(id *)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v7;
  objc_msgSend(v6, "disconnectStewieWithCompletion:", v8);

}

void sub_19073088C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907EA030();

  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_190730960;
    v7[3] = &unk_1E2C60E00;
    v9 = v5;
    v8 = v3;
    dispatch_async(v6, v7);

  }
}

uint64_t sub_190730960(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190730970(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_190730A08;
    v6[3] = &unk_1E2C60E00;
    v8 = v4;
    v7 = v3;
    dispatch_async(v5, v6);

  }
}

uint64_t sub_190730A08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190730C4C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "manager:changedOffGridModeStatus:currentState:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));

}

void sub_190730C90(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "manager:offGridModeUpdated:publishStatus:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));

}

void sub_190730D9C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSOffGridStateManager");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v5 = 138412290;
    v6 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "contactInfoUpdated called for updated contacts: %@", (uint8_t *)&v5, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 40), "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "manager:contactInfoUpdated:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

}

void sub_190731590(uint64_t a1)
{
  char v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "_isPhoneCertificateVendorSupported");
  v3 = *(void **)(a1 + 32);
  if ((v2 & 1) != 0)
  {
    objc_msgSend(v3, "_scheduleTimeoutForPhoneAuthenticationCertificateRequestCompletionBlock:", *(_QWORD *)(a1 + 40));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = v4;
      _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "Client request to authenticate phone {uuid: %@}", (uint8_t *)&v8, 0xCu);
    }

    if (v4)
    {
      +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "authenticatePhoneWithRequestUUID:", v4);

    }
  }
  else
  {
    objc_msgSend(v3, "_clientErrorForCode:underlyingError:", -4000, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = v4;
      _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Client requested authenticate phone on an unsupported platform -- failing request {clientError: %@}", (uint8_t *)&v8, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_1907317CC(uint64_t a1)
{
  char v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "_isPhoneCertificateVendorSupported");
  v3 = *(void **)(a1 + 32);
  if ((v2 & 1) != 0)
  {
    objc_msgSend(v3, "_scheduleTimeoutForPhoneAuthenticationSignatureRequestCompletionBlock:", *(_QWORD *)(a1 + 48));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = v4;
      _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "Client request to generate phone authentication signature over data {uuid: %@}", (uint8_t *)&v8, 0xCu);
    }

    if (v4)
    {
      +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "generatePhoneAuthenticationSignatureOverData:withRequestUUID:", *(_QWORD *)(a1 + 40), v4);

    }
  }
  else
  {
    objc_msgSend(v3, "_clientErrorForCode:underlyingError:", -4000, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = v4;
      _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Client requested phone authentication signature on an unsupported platform -- failing request {clientError: %@}", (uint8_t *)&v8, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_190731A0C(uint64_t a1)
{
  char v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "_isPhoneCertificateVendorSupported");
  v3 = *(void **)(a1 + 32);
  if ((v2 & 1) != 0)
  {
    objc_msgSend(v3, "_scheduleTimeoutForCarrierTokenCompletionBlock:", *(_QWORD *)(a1 + 48));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412290;
      v12 = v4;
      _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "Client request for carrier token {uuid: %@}", (uint8_t *)&v11, 0xCu);
    }

    if (v4)
    {
      +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(*(id *)(a1 + 40), "subscriptionSource"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "IMEI");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "carrierNonce");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "requestCarrierTokenForSubscriptionSource:IMEI:carrierNonce:requestUUID:", v7, v8, v9, v4);

    }
  }
  else
  {
    objc_msgSend(v3, "_clientErrorForCode:underlyingError:", -4000, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412290;
      v12 = v4;
      _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Client requested carrier token on an unsupported platform -- failing request {clientError: %@}", (uint8_t *)&v11, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_190731E74(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  NSObject *v8;
  uint64_t v9;
  const __CFString *v10;
  void *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const __CFString *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32)
    && (v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0D34CA8]), "initWithDataRepresentation:", *(_QWORD *)(a1 + 32))) != 0)
  {
    v3 = (void *)v2;
    v4 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_clientErrorForCode:underlyingError:", -1000, *(_QWORD *)(a1 + 48));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = 0;
  }
  objc_msgSend(*(id *)(a1 + 40), "daemonRequestTimer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "invalidateTimeoutAndReturnHandlerForRequestID:", *(_QWORD *)(a1 + 56));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "block");
  v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 56);
    if (*(_QWORD *)(a1 + 32))
      v10 = CFSTR("YES");
    else
      v10 = CFSTR("NO");
    v11 = (void *)MEMORY[0x19400FE1C](v7);
    v12 = 138413314;
    v13 = v9;
    v14 = 2112;
    v15 = v10;
    v16 = 2112;
    v17 = v6;
    v18 = 2112;
    v19 = v11;
    v20 = 2112;
    v21 = v4;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "Received authenticate phone response from daemon {uuid: %@, phoneCertificateData: %@, handler: %@, completion: %@, clientError: %@}", (uint8_t *)&v12, 0x34u);

  }
  if (v7)
    ((void (**)(_QWORD, void *, void *))v7)[2](v7, v3, v4);
  objc_msgSend(*(id *)(a1 + 40), "_updateSelfRetentionBasedOnInFlightRequestCount");

}

void sub_1907321B4(uint64_t a1)
{
  void *v2;
  IDSAuthenticationSigningResult *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);
  NSObject *v13;
  uint64_t v14;
  const __CFString *v15;
  void *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  const __CFString *v20;
  __int16 v21;
  IDSAuthenticationSigningResult *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "__imArrayByApplyingBlock:", &unk_1E2C5F9B0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v2, "count"))
  {
    v5 = *(void **)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = -1000;
    goto LABEL_7;
  }
  if (!*(_QWORD *)(a1 + 56) || !*(_QWORD *)(a1 + 64))
  {
    v5 = *(void **)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = -2000;
LABEL_7:
    objc_msgSend(v5, "_clientErrorForCode:underlyingError:", v7, v6);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = 0;
    goto LABEL_8;
  }
  v3 = -[IDSAuthenticationSigningResult initWithSubscriptionIdentifiers:authenticationCertificates:inputData:nonce:signature:]([IDSAuthenticationSigningResult alloc], "initWithSubscriptionIdentifiers:authenticationCertificates:inputData:nonce:signature:", *(_QWORD *)(a1 + 72), v2, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56));
  v4 = 0;
LABEL_8:
  -[IDSAuthenticationSigningResult authenticationCertificateSignatures](v3, "authenticationCertificateSignatures");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "count");

  if (!v9 && !v4)
  {
    objc_msgSend(*(id *)(a1 + 40), "_clientErrorForCode:underlyingError:", -900, *(_QWORD *)(a1 + 48));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(*(id *)(a1 + 40), "daemonRequestTimer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "invalidateTimeoutAndReturnHandlerForRequestID:", *(_QWORD *)(a1 + 88));
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "block");
  v12 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 56))
      v15 = CFSTR("YES");
    else
      v15 = CFSTR("NO");
    v16 = (void *)MEMORY[0x19400FE1C](v12);
    v17 = 138413570;
    v18 = v14;
    v19 = 2112;
    v20 = v15;
    v21 = 2112;
    v22 = v3;
    v23 = 2112;
    v24 = v11;
    v25 = 2112;
    v26 = v16;
    v27 = 2112;
    v28 = v4;
    _os_log_impl(&dword_1906E0000, v13, OS_LOG_TYPE_DEFAULT, "Received phone authentication signature response from daemon {uuid: %@, signature: %@, signingResult: %@, handler: %@, completion: %@, clientError: %@}", (uint8_t *)&v17, 0x3Eu);

  }
  if (v12)
    ((void (**)(_QWORD, IDSAuthenticationSigningResult *, void *))v12)[2](v12, v3, v4);
  objc_msgSend(*(id *)(a1 + 40), "_updateSelfRetentionBasedOnInFlightRequestCount");

}

id sub_1907323F4(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  void *v4;

  if (a2)
  {
    v2 = (objc_class *)MEMORY[0x1E0D34CA8];
    v3 = a2;
    v4 = (void *)objc_msgSend([v2 alloc], "initWithDataRepresentation:", v3);

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_190732528(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  NSObject *v6;
  uint64_t v7;
  const __CFString *v8;
  void *v9;
  IDSCarrierToken *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  const __CFString *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_clientErrorForCode:underlyingError:", -1100, *(_QWORD *)(a1 + 48));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(*(id *)(a1 + 40), "daemonRequestTimer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "invalidateTimeoutAndReturnHandlerForRequestID:", *(_QWORD *)(a1 + 56));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "block");
  v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 56);
    if (*(_QWORD *)(a1 + 32))
      v8 = CFSTR("YES");
    else
      v8 = CFSTR("NO");
    v9 = (void *)MEMORY[0x19400FE1C](v5);
    v11 = 138413314;
    v12 = v7;
    v13 = 2112;
    v14 = v8;
    v15 = 2112;
    v16 = v4;
    v17 = 2112;
    v18 = v9;
    v19 = 2112;
    v20 = v2;
    _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "Received carrier token response from daemon {uuid: %@, carrierToken: %@, handler: %@, completion: %@, clientError: %@}", (uint8_t *)&v11, 0x34u);

  }
  if (v5)
  {
    if (*(_QWORD *)(a1 + 32))
      v10 = -[IDSCarrierToken initWithTokenString:]([IDSCarrierToken alloc], "initWithTokenString:", *(_QWORD *)(a1 + 32));
    else
      v10 = 0;
    ((void (**)(_QWORD, IDSCarrierToken *, void *))v5)[2](v5, v10, v2);

  }
  objc_msgSend(*(id *)(a1 + 40), "_updateSelfRetentionBasedOnInFlightRequestCount");

}

uint64_t sub_190732834(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(a1 + 40));
    v7 = 138412290;
    v8 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Timed out phone authentication signature request -- calling completion block with timeout error {completionBlock: %@}", (uint8_t *)&v7, 0xCu);

  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "_clientErrorForCode:underlyingError:", -3000, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

  }
  return objc_msgSend(*(id *)(a1 + 32), "_updateSelfRetentionBasedOnInFlightRequestCount");
}

uint64_t sub_190732A40(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(a1 + 40));
    v7 = 138412290;
    v8 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Timed out phone authentication certificate request -- calling completion block with timeout error {completionBlock: %@}", (uint8_t *)&v7, 0xCu);

  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "_clientErrorForCode:underlyingError:", -3000, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

  }
  return objc_msgSend(*(id *)(a1 + 32), "_updateSelfRetentionBasedOnInFlightRequestCount");
}

uint64_t sub_190732C4C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(a1 + 40));
    v7 = 138412290;
    v8 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Timed out phone carrier token operation -- calling completion block with timeout error {completionBlock: %@}", (uint8_t *)&v7, 0xCu);

  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "_clientErrorForCode:underlyingError:", -3000, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

  }
  return objc_msgSend(*(id *)(a1 + 32), "_updateSelfRetentionBasedOnInFlightRequestCount");
}

void sub_190732E60(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)MEMORY[0x1E0C99D50];
  v6 = a3;
  objc_msgSend(a2, "tokenString");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "__imDataWithHexString:", v8);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, id))(v4 + 16))(v4, v7, v6);

}

void sub_190732F84(uint64_t a1)
{
  char v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "_isPhoneCertificateVendorSupported");
  v3 = *(void **)(a1 + 32);
  if ((v2 & 1) != 0)
  {
    objc_msgSend(v3, "_scheduleTimeoutForPhoneSubscriptionSourceCompletionBlock:", *(_QWORD *)(a1 + 40));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 138412290;
      v10 = v4;
      _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "Client request to set current phone subscription source {uuid: %@}", (uint8_t *)&v9, 0xCu);
    }

    if (v4)
    {
      +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 48));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setPhoneUserSubscriptionSource:withRequestUUID:", v7, v4);

    }
  }
  else
  {
    objc_msgSend(v3, "_clientErrorForCode:underlyingError:", -4000, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 138412290;
      v10 = v4;
      _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "Client requested to set current phone user subscription source on an unsupported platform -- failing request {clientError: %@}", (uint8_t *)&v9, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_1907331C0(uint64_t a1)
{
  char v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "_isPhoneCertificateVendorSupported");
  v3 = *(void **)(a1 + 32);
  if ((v2 & 1) != 0)
  {
    objc_msgSend(v3, "_scheduleTimeoutForPhoneSubscriptionSourceCompletionBlock:", *(_QWORD *)(a1 + 40));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = v4;
      _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "Client request for current phone subscription source {uuid: %@}", (uint8_t *)&v8, 0xCu);
    }

    if (v4)
    {
      +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "fetchPhoneUserSubscriptionSourceWithRequestUUID:", v4);

    }
  }
  else
  {
    objc_msgSend(v3, "_clientErrorForCode:underlyingError:", -4000, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = v4;
      _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Client requested current phone user subscription source on an unsupported platform -- failing request {clientError: %@}", (uint8_t *)&v8, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

uint64_t sub_190733560()
{
  uint64_t result;

  result = MEMORY[0x19400F24C](CFSTR("FTSelectedPNRSubscription"), CFSTR("FTServices"));
  qword_1EE1E1EC0 = result;
  return result;
}

uint64_t sub_190733698(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(a1 + 40));
    v7 = 138412290;
    v8 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Timed out phone subscription source operation -- calling completion block with timeout error {completionBlock: %@}", (uint8_t *)&v7, 0xCu);

  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "_clientErrorForCode:underlyingError:", -3000, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

  }
  return objc_msgSend(*(id *)(a1 + 32), "_updateSelfRetentionBasedOnInFlightRequestCount");
}

void sub_19073387C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_clientErrorForCode:underlyingError:", -900, *(_QWORD *)(a1 + 48));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(*(id *)(a1 + 40), "daemonRequestTimer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "invalidateTimeoutAndReturnHandlerForRequestID:", *(_QWORD *)(a1 + 56));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "block");
  v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = (void *)MEMORY[0x19400FE1C](v5);
    v10 = 138413314;
    v11 = v7;
    v12 = 2112;
    v13 = v8;
    v14 = 2112;
    v15 = v4;
    v16 = 2112;
    v17 = v9;
    v18 = 2112;
    v19 = v2;
    _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "Received response after setting current phone user subscription from daemon {uuid: %@, subscriptionSource: %@, handler: %@, completion: %@, clientError: %@}", (uint8_t *)&v10, 0x34u);

  }
  if (v5)
    ((void (**)(_QWORD, uint64_t, void *))v5)[2](v5, objc_msgSend(*(id *)(a1 + 32), "integerValue"), v2);
  objc_msgSend(*(id *)(a1 + 40), "_updateSelfRetentionBasedOnInFlightRequestCount");

}

void sub_190733AE8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_clientErrorForCode:underlyingError:", -900, *(_QWORD *)(a1 + 48));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(*(id *)(a1 + 40), "daemonRequestTimer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "invalidateTimeoutAndReturnHandlerForRequestID:", *(_QWORD *)(a1 + 56));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "block");
  v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D36AA8], "sms");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = (void *)MEMORY[0x19400FE1C](v5);
    v10 = 138413314;
    v11 = v7;
    v12 = 2112;
    v13 = v8;
    v14 = 2112;
    v15 = v4;
    v16 = 2112;
    v17 = v9;
    v18 = 2112;
    v19 = v2;
    _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "Received current phone user subscription response from daemon {uuid: %@, subscriptionSource: %@, handler: %@, completion: %@, clientError: %@}", (uint8_t *)&v10, 0x34u);

  }
  if (v5)
    ((void (**)(_QWORD, uint64_t, void *))v5)[2](v5, objc_msgSend(*(id *)(a1 + 40), "_subscriptionSourceFromIntegerValue:", objc_msgSend(*(id *)(a1 + 32), "integerValue")), v2);
  objc_msgSend(*(id *)(a1 + 40), "_updateSelfRetentionBasedOnInFlightRequestCount");

}

uint64_t sub_190733E1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_190733F4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_190734A00(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "addDelegate:queue:", a1[5], a1[6]);
}

uint64_t sub_190734AA4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeDelegate:", *(_QWORD *)(a1 + 40));
}

void sub_190734BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190734BB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "accounts");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190734CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190734CFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "enabledAccounts");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190734E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190734E40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "serviceName");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190734FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190734FD8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "accountWithLoginID:service:", a1[5], a1[6]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[7] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190735130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190735148(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "accountWithUniqueID:", a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_190735290(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_setupAccountWithLoginID_aliases_password_completionHandler_);
}

uint64_t sub_190735390(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_setupAccountWithLoginID_password_completionHandler_);
}

void sub_190735520(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  int v12;
  id v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  v6 = objc_msgSend(v4, "isEqual:", *MEMORY[0x1E0D34458]);
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      LOWORD(v12) = 0;
      v9 = "  => password : REDACTED";
      v10 = v7;
      v11 = 2;
LABEL_6:
      _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v12, v11);
    }
  }
  else if (v8)
  {
    v12 = 138412546;
    v13 = v4;
    v14 = 2112;
    v15 = v5;
    v9 = "  => %@ : %@";
    v10 = v7;
    v11 = 22;
    goto LABEL_6;
  }

}

uint64_t sub_19073563C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_setupAccountWithSetupParameters_aliases_completionHandler_);
}

uint64_t sub_190735790(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "addAccount:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1907358DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "_removeAndDeregisterAccount:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_190735984(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "_removeAccount:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_190735AD8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "enableAccount:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_190735C24(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "disableAccount:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_190736E14(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_190737BB8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  void *v6;
  NSObject *v7;
  const __CFString *v8;
  int v9;
  id v10;
  __int16 v11;
  const __CFString *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "_stripFZIDPrefix");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEqual:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));

  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 154));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v3, v6);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_1907EB158((uint64_t)v3);
    }

    +[IDSLogging _IDSGroupSession](IDSLogging, "_IDSGroupSession");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 154))
        v8 = CFSTR("YES");
      else
        v8 = CFSTR("NO");
      v9 = 138412546;
      v10 = v3;
      v11 = 2112;
      v12 = v8;
      _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "currentURL: %@, _isLightweightParticipant: %@", (uint8_t *)&v9, 0x16u);
    }

  }
}

void sub_19073842C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  +[IDSLogging _IDSGroupSession_oversize](IDSLogging, "_IDSGroupSession_oversize");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = 138412546;
    v6 = v3;
    v7 = 2112;
    v8 = v4;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "%@ joinWithOptions: %@", (uint8_t *)&v5, 0x16u);
  }

}

void sub_1907384E4(uint64_t a1)
{
  _QWORD *WeakRetained;
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  +[IDSLogging _IDSGroupSession](IDSLogging, "_IDSGroupSession");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = WeakRetained[3];
    v4 = 138412290;
    v5 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Disable callScreening mode for session: %@, due to default.", (uint8_t *)&v4, 0xCu);
  }

  objc_msgSend(WeakRetained, "setCallScreeningMode:", 0);
}

uint64_t sub_1907385A8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_joinGroupSession_withOptions_);
}

void sub_190738DBC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0CB35C8];
  v5 = *MEMORY[0x1E0CB2938];
  v6[0] = CFSTR("No participants provided.");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "errorWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), 0, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_190738E98(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0CB35C8];
  v5 = *MEMORY[0x1E0CB2938];
  v6[0] = CFSTR("GroupSession is invalidated.");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "errorWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), 0, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19073908C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_registerPluginForGroup_options_);
}

uint64_t sub_1907391B4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_unregisterPluginForGroup_options_);
}

void sub_19073965C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907396AC(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t result;

  result = objc_msgSend(a2, "isGeneratedLocally");
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

uint64_t sub_1907396EC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "recvKeyMaterial:", a2);
}

uint64_t sub_1907396F8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_190739960(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_190739970(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_190739D04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_190739EB8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_19073A06C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_19073A83C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  +[IDSLogging _IDSGroupSession_oversize](IDSLogging, "_IDSGroupSession_oversize");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = 138412546;
    v6 = v3;
    v7 = 2112;
    v8 = v4;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Session %@ full received report: %@", (uint8_t *)&v5, 0x16u);
  }

}

void sub_19073A8F4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didReceiveReport:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19073AB0C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "groupSessionDidTerminate:", v3);

  }
}

void sub_19073AD8C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "groupSessionEnded:withReason:error:", v3, *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));

  }
}

void sub_19073B09C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  +[IDSLogging _IDSGroupSession_oversize](IDSLogging, "_IDSGroupSession_oversize");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = 138412546;
    v6 = v3;
    v7 = 2112;
    v8 = v4;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Group session %@, existing participants for did join %@", (uint8_t *)&v5, 0x16u);
  }

}

void sub_19073B154(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "sessionDidJoinGroup:participantInfo:error:", v3, a1[5], a1[6]);

  }
}

void sub_19073B480(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[3];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "sessionDidJoinGroup:participantUpdate:error:", v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v10[0] = *MEMORY[0x1E0D34808];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 40), "participantIdentifier"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v5;
    v10[1] = *MEMORY[0x1E0D34800];
    objc_msgSend(*(id *)(a1 + 40), "participantData");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v11[1] = v6;
    v10[2] = *MEMORY[0x1E0D34828];
    objc_msgSend(*(id *)(a1 + 40), "relaySessionID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[2] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "sessionDidJoinGroup:participantInfo:error:", v9, v8, *(_QWORD *)(a1 + 48));

  }
}

void sub_19073B80C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "sessionDidLeaveGroup:error:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19073BA74(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:participantDidJoinGroupWithInfo:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19073BCDC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:participantDidLeaveGroupWithInfo:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19073C0AC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  +[IDSLogging _IDSGroupSession_oversize](IDSLogging, "_IDSGroupSession_oversize");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = 138412546;
    v6 = v3;
    v7 = 2112;
    v8 = v4;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "didReceiveActiveParticipants: %@ for group session: %@", (uint8_t *)&v5, 0x16u);
  }

}

void sub_19073C164(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didReceiveActiveParticipants:success:", v3, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));

  }
}

void sub_19073C538(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  +[IDSLogging _IDSGroupSession_oversize](IDSLogging, "_IDSGroupSession_oversize");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = 138412546;
    v6 = v3;
    v7 = 2112;
    v8 = v4;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "didReceiveActiveLightweightParticipants: %@ for group session: %@", (uint8_t *)&v5, 0x16u);
  }

}

void sub_19073C5F0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didReceiveActiveLightweightParticipants:success:", v3, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));

  }
}

void sub_19073C85C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didRegisterPluginAllocationInfo:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19073CAC4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didUnregisterPluginAllocationInfo:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19073CD64(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didReceiveBlockedParticipantIDs:withCode:withType:isTruncated:", v3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52), *(unsigned __int8 *)(a1 + 54));
LABEL_5:

    goto LABEL_6;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didReceiveBlockedParticipantIDs:withCode:isTruncated:", v3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 54));
    goto LABEL_5;
  }
LABEL_6:

}

void sub_19073D044(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didReceiveQueryBlockedParticipantIDs:withCode:isTruncated:", v3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));

  }
}

void sub_19073D2DC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didRemoveParticipantIDs:withCode:isTruncated:", v3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));

  }
}

void sub_19073D4E0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:rejectedKeyRecoveryRequestFromURI:reason:", v3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));

  }
}

void sub_19073D850(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "sessiondidReceiveKeyUpdate:", v3);

  }
}

void sub_19073DD54(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "sessionDidReceiveParticipantUpgrade:participantType:error:", v3, *(unsigned __int16 *)(a1 + 48), *(_QWORD *)(a1 + 40));

  }
}

void sub_19073DFB8(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didReceiveJoinedParticipantID:withContext:", v3, a1[6], a1[5]);

  }
}

void sub_19073E218(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didReceiveLeftParticipantID:withContext:", v3, a1[6], a1[5]);

  }
}

void sub_19073E490(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didReceiveParticipantIDs:withCode:managementType:", v3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));

  }
}

void sub_19073E898(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "participantUpdatedForSession:", v3);

  }
}

void sub_19073EE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_19073EE60(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  int v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;

  v7 = a2;
  objc_msgSend(v7, "first");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqual:", a1[4]);

  if (v9)
  {
    objc_msgSend(v7, "second");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(NSObject **)(a1[5] + 88);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = sub_19073EF50;
    v14[3] = &unk_1E2C62510;
    v12 = a1[8];
    v15 = v10;
    v16 = v12;
    v13 = v10;
    dispatch_async(v11, v14);
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = a3;
    *a4 = 1;

  }
}

uint64_t sub_19073EF50(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_19073F19C(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didReceiveDataBlob:forParticipant:", v3, a1[5], a1[6]);

  }
}

void sub_19073F45C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didReceiveData:dataType:forParticipant:", v3, *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 56), *(_QWORD *)(a1 + 48));

  }
}

void sub_19073F694(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didReceiveServerErrorCode:", v3, *(unsigned int *)(a1 + 40));

  }
}

void sub_19073FC3C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  id v5;
  id v6;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a3;
  objc_msgSend(a2, "groupContext");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);

}

void sub_19073FE80(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  int8x16_t v11;
  _QWORD v12[4];
  int8x16_t v13;
  id v14;
  _QWORD v15[5];
  id v16;

  v3 = a2;
  v4 = objc_alloc(MEMORY[0x1E0D131F8]);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v7 = (void *)objc_msgSend(v4, "initWithInput:initialValue:", v5, v6);

  v8 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_19073FFB8;
  v15[3] = &unk_1E2C62790;
  v15[4] = *(_QWORD *)(a1 + 40);
  v16 = v3;
  v9 = v3;
  objc_msgSend(v7, "setReducerBlock:", v15);
  v12[0] = v8;
  v12[1] = 3221225472;
  v12[2] = sub_190740104;
  v12[3] = &unk_1E2C627B8;
  v11 = *(int8x16_t *)(a1 + 32);
  v10 = (id)v11.i64[0];
  v13 = vextq_s8(v11, v11, 8uLL);
  v14 = *(id *)(a1 + 48);
  objc_msgSend(v7, "reduceWithCompletion:", v12);

}

void sub_19073FFB8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v4);

  v5 = *(void **)(a1 + 40);
  objc_msgSend(v3, "currentItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_190740074;
  v8[3] = &unk_1E2C62768;
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v3;
  v7 = v3;
  objc_msgSend(v5, "fetchGroupWithGroupID:completion:", v6, v8);

}

void sub_190740074(uint64_t a1, void *a2)
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v3 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v3);

  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 40), "currentResult");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v7);

  }
  v5 = *(void **)(a1 + 40);
  objc_msgSend(v5, "currentResult");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "continueWithResult:", v6);

}

void sub_190740104(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v4);

  v5 = objc_msgSend(v3, "state");
  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0D1F458], "groupContext");
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v3, "value");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 134217984;
      v16 = objc_msgSend(v12, "count");
      _os_log_impl(&dword_1906E0000, v11, OS_LOG_TYPE_INFO, "Fetched groups with success {groups.count: %ld}", (uint8_t *)&v15, 0xCu);

    }
    objc_msgSend(MEMORY[0x1E0D1F458], "groupContext");
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      sub_1907ECBF4(v3, v13);

    v14 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v3, "value");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v14 + 16))(v14, v10, 0);
    goto LABEL_11;
  }
  if (v5 == 1)
  {
    objc_msgSend(MEMORY[0x1E0D1F458], "groupContext");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v3, "error");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 40);
      v15 = 138543619;
      v16 = (uint64_t)v7;
      v17 = 2113;
      v18 = v8;
      _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "Failed to fetch groups {error: %{public}@, groupIDs: %{private}@}", (uint8_t *)&v15, 0x16u);

    }
    v9 = *(_QWORD *)(a1 + 48);
    objc_msgSend(v3, "error");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v9 + 16))(v9, 0, v10);
LABEL_11:

  }
}

void sub_190740404(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v5 = a2;
  objc_msgSend(v3, "queue");
  v4 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v4);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_19074056C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;

  objc_msgSend(a2, "cloudKitContainer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "transportLog");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19074060C;
  v6[3] = &unk_1E2C62830;
  v5 = *(_QWORD *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  objc_msgSend(v4, "fetchChangesSinceToken:completion:", v5, v6);

}

void sub_19074060C(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  uint8_t v13[16];

  v8 = (void *)MEMORY[0x1E0D1F458];
  v9 = a5;
  v10 = a4;
  v11 = a2;
  objc_msgSend(v8, "groupContext");
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1906E0000, v12, OS_LOG_TYPE_INFO, "Fetched messages from transport log", v13, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19074082C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  IDSTransactionLogTaskHandlerAccountInfo *v10;
  void *v11;
  void *v12;
  IDSTransactionLogTaskHandlerAccountInfo *v13;
  int v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0D1F458], "groupContext");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 138543362;
      v15 = v6;
      _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Account identity for task handler - failed to get content - fail {error: %{public}@}", (uint8_t *)&v14, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "delegate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "groupContextController:accountsForAlises:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = [IDSTransactionLogTaskHandlerAccountInfo alloc];
    objc_msgSend(v5, "accountIdentity");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "serviceName");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[IDSTransactionLogTaskHandlerAccountInfo initWithAccountIdentity:aliasToAccountsMap:serviceName:](v10, "initWithAccountIdentity:aliasToAccountsMap:serviceName:", v11, v9, v12);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_190740A70(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_190740AF4;
  v3[3] = &unk_1E2C628A8;
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  objc_msgSend(v2, "groupContextWithCompletion:", v3);

}

uint64_t sub_190740AF4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel__didCreateGroup_completion_);
}

void sub_190740BBC(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_190740C40;
  v3[3] = &unk_1E2C628A8;
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  objc_msgSend(v2, "groupContextWithCompletion:", v3);

}

uint64_t sub_190740C40(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel__didCacheGroup_completion_);
}

void sub_190740D30(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_190740DC8;
  v3[3] = &unk_1E2C627E0;
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  v6 = *(id *)(a1 + 56);
  objc_msgSend(v2, "groupContextWithCompletion:", v3);

}

uint64_t sub_190740DC8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel__didUpdateGroup_withNewGroup_completion_);
}

void sub_190740E94(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_190740F18;
  v3[3] = &unk_1E2C628A8;
  v2 = *(void **)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  objc_msgSend(v2, "groupContextWithCompletion:", v3);

}

uint64_t sub_190740F18(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel__didReceiveDecryptionFailureForGroup_completion_);
}

uint64_t sub_190740F90(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  objc_msgSend(MEMORY[0x1E0D1F458], "groupContext");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Registration identities updated - clearing client cache", v4, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "setSeal:", 0);
}

void sub_19074132C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  objc_msgSend(*(id *)(a1 + 32), "object");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "delegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "groupContextController:didCreateGroup:", *(_QWORD *)(a1 + 40), v6);

  }
}

void sub_19074147C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = objc_msgSend(v6, "state");
  if (v3 == 1)
  {
    objc_msgSend(v6, "error");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(_QWORD, _QWORD, void *))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, v5);
    goto LABEL_5;
  }
  if (!v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    objc_msgSend(v6, "value");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, _QWORD))(v4 + 16))(v4, v5, 0);
LABEL_5:

  }
}

void sub_190742228(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_190742D30(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  const __CFString *v15;
  uint64_t v16;
  _DWORD v17[2];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  const __CFString *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 72))
  {
    v4 = *(void **)(v2 + 40);
    v5 = a2;
    objc_msgSend(v4, "_internal");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "serviceName");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v7, "isEqualToIgnoringCase:", CFSTR("com.apple.private.alloy.pbbridge")) & 1) != 0)
      v8 = 1;
    else
      v8 = objc_msgSend(v7, "isEqualToIgnoringCase:", CFSTR("com.apple.private.alloy.accountssync"));
    objc_msgSend(*(id *)(a1 + 32), "daemonController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "setCapabilities:forListenerID:shouldLog:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), v8);

    objc_msgSend(*(id *)(a1 + 32), "daemonController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addedDelegateForService:withCompletion:", v7, v5);

    if ((_DWORD)v8)
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(_QWORD *)(a1 + 32);
        v14 = *(_DWORD *)(v13 + 72);
        v15 = CFSTR("NO");
        v16 = *(_QWORD *)(v13 + 56);
        if (v10)
          v15 = CFSTR("YES");
        v17[0] = 67109634;
        v17[1] = v14;
        v18 = 2112;
        v19 = v16;
        v20 = 2112;
        v21 = v15;
        _os_log_impl(&dword_1906E0000, v12, OS_LOG_TYPE_DEFAULT, "setCapabilities %u  %@, result = %@", (uint8_t *)v17, 0x1Cu);
      }

    }
  }
}

id sub_190743470(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (*(_QWORD *)(a1 + 72))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v2 = *(_QWORD *)(a1 + 48);
      if (v2)
        (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, 0);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    if (*(_BYTE *)(a1 + 81))
    {
      v3 = *(_QWORD *)(a1 + 64);
      if (v3)
        (*(void (**)(uint64_t, _QWORD))(v3 + 16))(v3, 0);
    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  v4 = (id)objc_opt_self();
  return (id)objc_opt_self();
}

uint64_t sub_1907452F4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_caseInsensitiveCompare_);
}

uint64_t sub_1907452FC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "sendMessageWithSendParameters:", *(_QWORD *)(a1 + 32));
}

void sub_190745FE4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_190747BE8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:isActiveChanged:", v3, *(unsigned __int8 *)(a1 + 40));

  }
}

void sub_190747D3C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:devicesChanged:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_190747E90(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:nearbyDevicesChanged:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_190747FE4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:connectedDevicesChanged:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_190748C30(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  objc_class *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  objc_class *v11;
  void *v12;
  uint64_t v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "object");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "connection:messageIdentifier:alternateCallbackID:updatedWithResponseCode:error:lastCall:messageContext:", v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 80), *(_QWORD *)(a1 + 64));

    +[IDSTransportLog IDSConnection](IDSTransportLog, "IDSConnection");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (objc_class *)objc_opt_class();
      NSStringFromClass(v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v15 = v7;
      v16 = 2048;
      v17 = v3;
      v18 = 2112;
      v19 = v8;
      _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "  => <%@:%p> finished handling message guid: %@  (connection:messageIdentifier:alternateCallbackID:updatedWithResponseCode:error:lastCall:)", buf, 0x20u);

    }
  }
  if (*(_BYTE *)(a1 + 80) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "object");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "connection:identifier:didSendWithSuccess:error:context:", v9, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 81), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));

    +[IDSTransportLog IDSConnection](IDSTransportLog, "IDSConnection");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (objc_class *)objc_opt_class();
      NSStringFromClass(v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v15 = v12;
      v16 = 2048;
      v17 = v3;
      v18 = 2112;
      v19 = v13;
      _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "  => <%@:%p> finished handling message guid: %@  (connection:identifier:didSendWithSuccess:error:context:)", buf, 0x20u);

    }
  }

}

void sub_190749118(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  objc_class *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "connection:identifier:alternateCallbackID:willSendToDestinations:skippedDestinations:registrationPropertyToDestinations:", v4, a1[5], a1[6], a1[7], a1[8], a1[9]);

    +[IDSTransportLog IDSConnection](IDSTransportLog, "IDSConnection");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (objc_class *)objc_opt_class();
      NSStringFromClass(v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = a1[5];
      v9 = 138412802;
      v10 = v7;
      v11 = 2048;
      v12 = v3;
      v13 = 2112;
      v14 = v8;
      _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "  => <%@:%p> finished handling message guid: %@  (connection:identifier:alternateCallbackID:willSendToDestinations:skippedDestinations:registrationPropertyToDestinations:)", (uint8_t *)&v9, 0x20u);

    }
  }

}

void sub_1907495F0(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:identifier:fromURI:hasBeenDeliveredWithContext:", v3, a1[5], a1[6], a1[7]);

  }
}

void sub_19074965C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  if (*(_QWORD *)(a1 + 32) || *(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 48), "daemonController");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 56);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 40), "_internal");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "uniqueID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 64), "priority");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v2, v3, v5, v6, 0, v7, objc_msgSend(*(id *)(a1 + 64), "broadcastID"), objc_msgSend(*(id *)(a1 + 64), "connectionType"));

  }
}

void sub_19074993C(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:didSendOpportunisticDataWithIdentifier:toIDs:", v3, a1[5], a1[6]);

  }
}

void sub_190749B68(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:didCancelMessageWithSuccess:error:identifier:", v3, *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_19074A720(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:incomingOpportunisticData:withIdentifier:fromURI:context:", v3, a1[5], a1[6], a1[7], a1[8]);

  }
}

void sub_19074AF14(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 232));
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_19074AF74(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:incomingMessage:fromURI:", v3, a1[5], a1[6]);

  }
}

void sub_19074AFDC(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:incomingMessage:fromURI:context:", v3, a1[5], a1[6], a1[7]);

  }
}

void sub_19074B048(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:incomingTopLevelMessage:fromURI:messageContext:", v3, a1[5], a1[6], a1[7]);

  }
}

void sub_19074B0B4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;

  if (*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 81))
    {
      objc_msgSend(*(id *)(a1 + 32), "directMessageConnection");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "sendAppAckWithGUID:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      v3 = objc_msgSend(*(id *)(a1 + 48), "connectionType");
      objc_msgSend(*(id *)(a1 + 32), "daemonController");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "_internal");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uniqueID");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:", v4, v5, v7, v3);

    }
  }
  if (!*(_BYTE *)(a1 + 81) && (*(_QWORD *)(a1 + 64) || *(_QWORD *)(a1 + 72)))
  {
    objc_msgSend(*(id *)(a1 + 32), "daemonController");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "storageGuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "outgoingResponseIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "_internal");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uniqueID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 72);
    objc_msgSend(*(id *)(a1 + 48), "priority");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v8, v9, v11, v12, 0, v13, objc_msgSend(*(id *)(a1 + 48), "broadcastID"), objc_msgSend(*(id *)(a1 + 48), "connectionType"));

  }
}

void sub_19074B85C(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:incomingData:fromURI:context:", v3, a1[5], a1[6], a1[7]);

  }
}

void sub_19074B8C8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 89))
    {
      objc_msgSend(*(id *)(a1 + 32), "directMessageConnection");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "sendAppAckWithGUID:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      v3 = objc_msgSend(*(id *)(a1 + 48), "connectionType");
      objc_msgSend(*(id *)(a1 + 32), "daemonController");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "_internal");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uniqueID");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:", v4, v5, v7, v3);

    }
  }
  if (!*(_BYTE *)(a1 + 89) && (*(_QWORD *)(a1 + 64) || *(_QWORD *)(a1 + 72)))
  {
    objc_msgSend(*(id *)(a1 + 32), "daemonController");
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "storageGuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "outgoingResponseIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "_internal");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uniqueID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 72);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 80), "length"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "priority");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v8, v9, v11, v12, v13, v14, objc_msgSend(*(id *)(a1 + 48), "broadcastID"), objc_msgSend(*(id *)(a1 + 48), "connectionType"));

  }
}

void sub_19074BF54(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:incomingAccessoryData:fromURI:context:", v3, a1[5], a1[6], a1[7]);

  }
}

void sub_19074BFC0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  if (*(_BYTE *)(a1 + 88))
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "connectionType");
    objc_msgSend(*(id *)(a1 + 40), "daemonController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "_internal");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uniqueID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:", v4, v5, v7, v2);

  }
  if (*(_QWORD *)(a1 + 64) || *(_QWORD *)(a1 + 72))
  {
    objc_msgSend(*(id *)(a1 + 40), "daemonController");
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "storageGuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "outgoingResponseIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "_internal");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uniqueID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 72);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 80), "length"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "priority");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v8, v9, v11, v12, v13, v14, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));

  }
}

void sub_19074C5BC(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:incomingAccessoryReportMessage:accessoryID:controllerID:context:", v3, a1[5], a1[6], a1[7], a1[8]);

  }
}

void sub_19074C628(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "connectionType");
    objc_msgSend(*(id *)(a1 + 40), "daemonController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "_internal");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uniqueID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:", v4, v5, v7, v2);

  }
  if (*(_QWORD *)(a1 + 64) || *(_QWORD *)(a1 + 72))
  {
    objc_msgSend(*(id *)(a1 + 40), "daemonController");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "storageGuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "outgoingResponseIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "_internal");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uniqueID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 72);
    objc_msgSend(*(id *)(a1 + 32), "priority");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v8, v9, v11, v12, 0, v13, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));

  }
}

void sub_19074C9B4(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:incomingInvitation:fromURI:context:", v3, a1[5], a1[6], a1[7]);

  }
}

void sub_19074CC14(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:incomingInvitationUpdate:fromURI:context:", v3, a1[5], a1[6], a1[7]);

  }
}

void sub_19074D35C(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  int v6;
  const __CFString *v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "connection:incomingProtobuf:fromURI:context:", v4, a1[5], a1[6], a1[7]);

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      +[IDSLogging IDSConnection](IDSLogging, "IDSConnection");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = 138412546;
        v7 = CFSTR("(unknown)");
        v8 = 2112;
        v9 = v3;
        _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, " => Handed protobuf ID %@ to delegate: %@", (uint8_t *)&v6, 0x16u);
      }

    }
  }

}

void sub_19074D484(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 89))
    {
      objc_msgSend(*(id *)(a1 + 32), "directMessageConnection");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "sendAppAckWithGUID:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      v3 = objc_msgSend(*(id *)(a1 + 48), "connectionType");
      objc_msgSend(*(id *)(a1 + 32), "daemonController");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "_internal");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "uniqueID");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:", v4, v5, v7, v3);

    }
  }
  if (!*(_BYTE *)(a1 + 89) && (*(_QWORD *)(a1 + 64) || *(_QWORD *)(a1 + 72)))
  {
    objc_msgSend(*(id *)(a1 + 32), "daemonController");
    v17 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "storageGuid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "outgoingResponseIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "_internal");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uniqueID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)MEMORY[0x1E0CB37E8];
    v13 = *(_QWORD *)(a1 + 72);
    objc_msgSend(*(id *)(a1 + 80), "data");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "numberWithUnsignedInteger:", objc_msgSend(v14, "length"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "priority");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v8, v9, v11, v13, v15, v16, objc_msgSend(*(id *)(a1 + 48), "broadcastID"), objc_msgSend(*(id *)(a1 + 48), "connectionType"));

  }
}

void sub_19074DB7C(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:didFlushCacheForRemoteURI:fromURI:guid:", v3, a1[5], a1[6], a1[7]);

  }
}

void sub_19074DD68(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:didFlushCacheForKTPeerURI:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19074E0CC(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:incomingPendingMessageFromURI:context:", v3, a1[5], a1[6]);

  }
}

void sub_19074E470(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:incomingPendingResourceWithMetadata:guid:fromURI:context:", v3, a1[5], a1[6], a1[7], a1[8]);

  }
}

void sub_19074E964(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:account:sessionInviteReceived:fromID:transportType:options:context:messageContext:", v3, *(_QWORD *)(a1[4] + 40), a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);

  }
}

void sub_19074EC50(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:account:receivedGroupSessionParticipantUpdate:context:", v3, *(_QWORD *)(a1[4] + 40), a1[5], a1[6]);

  }
}

void sub_19074EED8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:account:receivedGroupSessionParticipantDataUpdate:", v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), *(_QWORD *)(a1 + 40));

  }
}

void sub_19074F088(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "connection:didHintCheckingTransportLogWithReason:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19074F228(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_19074F234(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

void sub_19074F248(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_19074F2AC()
{
  _IDSSessionStore *v0;
  void *v1;

  v0 = objc_alloc_init(_IDSSessionStore);
  v1 = (void *)qword_1EE1E1FC8;
  qword_1EE1E1FC8 = (uint64_t)v0;

}

void sub_19074F79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  void *v17;

  objc_sync_exit(v17);
  _Unwind_Resume(a1);
}

void sub_19074F7E0(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  uint8_t v4[16];

  +[IDSLogging DaemonProxy](IDSLogging, "DaemonProxy");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Invalidation Handled", v4, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setConnection:", 0);

}

void sub_19074F868()
{
  NSObject *v0;
  uint8_t v1[16];

  +[IDSLogging DaemonProxy](IDSLogging, "DaemonProxy");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "Interruption Handled", v1, 2u);
  }

}

void sub_19074FA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19074FA78(uint64_t a1, void *a2)
{
  uint64_t result;

  result = objc_msgSend(a2, "count");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result != 0;
  return result;
}

void sub_19074FC0C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "addObject:", *(_QWORD *)(a1 + 32));
  if (IMShouldLog() && objc_msgSend(v3, "count"))
    sub_19074FC6C(v3);

}

void sub_19074FC6C(void *a1)
{
  id v1;
  NSObject *v2;
  int v3;
  id v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0D36AA8], "watchPairing");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 138412290;
    v4 = v1;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Unacknowledged IDSServiceDelegate objects: %@", (uint8_t *)&v3, 0xCu);
  }

}

void sub_19074FF90(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(v3, "removeObject:", *(_QWORD *)(a1 + 32));
  if (IMShouldLog() && objc_msgSend(v3, "count"))
    sub_19074FC6C(v3);

}

void sub_1907500D8(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  if (IMShouldLog() && objc_msgSend(v2, "count"))
    sub_19074FC6C(v2);
  objc_msgSend(v2, "removeAllObjects");

}

uint64_t sub_19075017C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  const void *v4;
  size_t v5;
  uint64_t result;
  _QWORD destructor[5];

  v2 = *a1 - (_QWORD)a1 + a2;
  *((_QWORD *)&v3 + 1) = (v2 - 1282);
  *(_QWORD *)&v3 = v2 - 1470;
  switch((unint64_t)(v3 >> 2))
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
      result = dispatch_data_create_f();
      break;
    default:
      v4 = (const void *)(*a1 + a2);
      v5 = a1[2] - a2;
      destructor[0] = MEMORY[0x1E0C809B0];
      destructor[1] = 3221225472;
      destructor[2] = sub_1907502D8;
      destructor[3] = &unk_1E2C62C70;
      destructor[4] = a1;
      result = (uint64_t)dispatch_data_create(v4, v5, 0, destructor);
      break;
  }
  return result;
}

uint64_t sub_190750288()
{
  return _IDSLinkPacketBufferRelease();
}

uint64_t sub_19075029C()
{
  return _IDSLinkPacketBufferRelease();
}

uint64_t sub_1907502B0()
{
  return _IDSLinkPacketBufferRelease();
}

uint64_t sub_1907502C4()
{
  return _IDSLinkPacketBufferRelease();
}

uint64_t sub_1907502D8()
{
  return _IDSLinkPacketBufferRelease();
}

void sub_1907502EC(void *a1, void *a2, void *a3, uint64_t a4)
{
  void (**v7)(id, id);
  void (**v8)(id, id, _QWORD);
  id v9;
  NSObject *v10;
  uint8_t v11[16];

  v7 = a1;
  v8 = a2;
  v9 = a3;
  if (v7)
  {
    v7[2](v7, v9);
  }
  else if (v8)
  {
    v8[2](v8, v9, a4);
  }
  else
  {
    +[IDSTransportLog IDSDataChannels](IDSTransportLog, "IDSDataChannels");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Warning! No write completion handler to invoke.", v11, 2u);
    }

  }
}

void IDSLocalPairingAddPairedDevice(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (_IDSRunningInDaemon())
    sub_1907EE950();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingAddPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v9;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingAddPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v11;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  sub_190750728(v6, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_1907508A0;
  v15[3] = &unk_1E2C62C98;
  v16 = v5;
  v17 = v12;
  v13 = v12;
  v14 = v5;
  sub_1907507F8(v15, v13);

}

id sub_190750728(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[4];
  id v15;
  id v16;

  v3 = a1;
  v4 = a2;
  if (!v4)
  {
    v4 = (id)MEMORY[0x1E0C80D38];
    v5 = MEMORY[0x1E0C80D38];
  }
  if (!v3)
    v3 = &unk_1E2C5F690;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_190754668;
  v14[3] = &unk_1E2C60E28;
  v15 = v4;
  v16 = v3;
  v6 = v4;
  v7 = v3;
  v8 = (void *)MEMORY[0x19400FE1C](v14);
  v12 = (void *)MEMORY[0x19400FE1C](v8, v9, v10, v11);

  return v12;
}

void sub_1907507F8(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a1;
  v4 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_190754868;
  v7[3] = &unk_1E2C62DA8;
  v8 = v4;
  v9 = v3;
  v5 = v3;
  v6 = v4;
  +[IDSXPCDaemonController performDaemonControllerTask:](IDSXPCDaemonController, "performDaemonControllerTask:", v7);

}

uint64_t sub_1907508A0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_addPairedDevice_completion_);
}

void IDSLocalPairingAddPairedDeviceWithInfo(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (_IDSRunningInDaemon())
    sub_1907EE978();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingAddPairedDeviceWithInfo(IDSLocalPairingAddPairedDeviceInfo *__strong, __strong IDSLocalPai"
          "ringCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "info";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v9;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingAddPairedDeviceWithInfo(IDSLocalPairingAddPairedDeviceInfo *__strong, __strong IDSLocalPai"
          "ringCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "info";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v11;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  sub_190750728(v6, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_190750B38;
  v15[3] = &unk_1E2C62C98;
  v16 = v5;
  v17 = v12;
  v13 = v12;
  v14 = v5;
  sub_1907507F8(v15, v13);

}

uint64_t sub_190750B38(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_addPairedDeviceWithInfo_completion_);
}

void IDSLocalPairingUpdatePairedDevicePairingType(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  id v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  v9 = a4;
  if (_IDSRunningInDaemon())
    sub_1907EE9A0();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)MEMORY[0x19400FE1C](v8);
    *(_DWORD *)buf = 136317186;
    v24 = "void IDSLocalPairingUpdatePairedDevicePairingType(NSUUID *__strong, IDSPairingType, __strong IDSLocalPairingCo"
          "mpletionBlock, __strong dispatch_queue_t)";
    v25 = 2080;
    v26 = "cbuuid";
    v27 = 2112;
    v28 = v7;
    v29 = 2080;
    v30 = "@(pairingType)";
    v31 = 2112;
    v32 = v11;
    v33 = 2080;
    v34 = "block";
    v35 = 2048;
    v36 = v12;
    v37 = 2080;
    v38 = "queue";
    v39 = 2048;
    v40 = v9;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x5Cu);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)MEMORY[0x19400FE1C](v8);
    *(_DWORD *)buf = 136317186;
    v24 = "void IDSLocalPairingUpdatePairedDevicePairingType(NSUUID *__strong, IDSPairingType, __strong IDSLocalPairingCo"
          "mpletionBlock, __strong dispatch_queue_t)";
    v25 = 2080;
    v26 = "cbuuid";
    v27 = 2112;
    v28 = v7;
    v29 = 2080;
    v30 = "@(pairingType)";
    v31 = 2112;
    v32 = v14;
    v33 = 2080;
    v34 = "block";
    v35 = 2048;
    v36 = v15;
    v37 = 2080;
    v38 = "queue";
    v39 = 2048;
    v40 = v9;
    _os_log_impl(&dword_1906E0000, v13, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x5Cu);

  }
  sub_190750728(v8, v9);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = sub_190750E58;
  v19[3] = &unk_1E2C62CC0;
  v21 = v8;
  v22 = a2;
  v20 = v7;
  v17 = v8;
  v18 = v7;
  sub_1907507F8(v19, v16);

}

uint64_t sub_190750E58(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_updatePairedDevice_pairingType_completion_);
}

void IDSLocalPairingConnectPairedDevice(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (_IDSRunningInDaemon())
    sub_1907EE9C8();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingConnectPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v9;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingConnectPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v11;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  sub_190750728(v6, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_1907510F4;
  v15[3] = &unk_1E2C62C98;
  v16 = v5;
  v17 = v12;
  v13 = v12;
  v14 = v5;
  sub_1907507F8(v15, v13);

}

uint64_t sub_1907510F4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_connectPairedDeviceWithID_completion_);
}

void IDSLocalPairingSetupCompletedForPairedDevice(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (_IDSRunningInDaemon())
    sub_1907EE9F0();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingSetupCompletedForPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, _"
          "_strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v9;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingSetupCompletedForPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, _"
          "_strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v11;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  sub_190750728(v6, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_19075138C;
  v15[3] = &unk_1E2C62C98;
  v16 = v5;
  v17 = v12;
  v13 = v12;
  v14 = v5;
  sub_1907507F8(v15, v13);

}

uint64_t sub_19075138C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setupCompletedForPairedDeviceWithID_completion_);
}

void IDSLocalPairingSwitchActivePairedDevice(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (_IDSRunningInDaemon())
    sub_1907EEA18();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingSwitchActivePairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __stro"
          "ng dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v9;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingSwitchActivePairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __stro"
          "ng dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v11;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  sub_190750728(v6, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_190751624;
  v15[3] = &unk_1E2C62C98;
  v16 = v5;
  v17 = v12;
  v13 = v12;
  v14 = v5;
  sub_1907507F8(v15, v13);

}

uint64_t sub_190751624(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_switchActivePairedDeviceWithID_completion_);
}

void IDSLocalPairingDisconnectActivePairedDevice(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (_IDSRunningInDaemon())
    sub_1907EEA40();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)MEMORY[0x19400FE1C](v3);
    *(_DWORD *)buf = 136316162;
    v14 = "void IDSLocalPairingDisconnectActivePairedDevice(__strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v15 = 2080;
    v16 = "block";
    v17 = 2048;
    v18 = v6;
    v19 = 2080;
    v20 = "queue";
    v21 = 2048;
    v22 = v4;
    _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)MEMORY[0x19400FE1C](v3);
    *(_DWORD *)buf = 136316162;
    v14 = "void IDSLocalPairingDisconnectActivePairedDevice(__strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v15 = 2080;
    v16 = "block";
    v17 = 2048;
    v18 = v8;
    v19 = 2080;
    v20 = "queue";
    v21 = 2048;
    v22 = v4;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);

  }
  sub_190750728(v3, v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_19075185C;
  v11[3] = &unk_1E2C62CE8;
  v12 = v9;
  v10 = v9;
  sub_1907507F8(v11, v10);

}

uint64_t sub_19075185C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_disconnectActivePairedDevice_);
}

void IDSLocalPairingRedeliverMessages(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  objc_msgSend(v5, "uniqueIDOverride");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (_IDSRunningInDaemon())
    sub_1907EEA68();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v20 = "void IDSLocalPairingRedeliverMessages(IDSDevice *__strong, __strong IDSLocalPairingCompletionBlock, __strong d"
          "ispatch_queue_t)";
    v21 = 2080;
    v22 = "deviceUniqueID";
    v23 = 2112;
    v24 = v8;
    v25 = 2080;
    v26 = "block";
    v27 = 2048;
    v28 = v10;
    v29 = 2080;
    v30 = "queue";
    v31 = 2048;
    v32 = v7;
    _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v20 = "void IDSLocalPairingRedeliverMessages(IDSDevice *__strong, __strong IDSLocalPairingCompletionBlock, __strong d"
          "ispatch_queue_t)";
    v21 = 2080;
    v22 = "deviceUniqueID";
    v23 = 2112;
    v24 = v8;
    v25 = 2080;
    v26 = "block";
    v27 = 2048;
    v28 = v12;
    v29 = 2080;
    v30 = "queue";
    v31 = 2048;
    v32 = v7;
    _os_log_impl(&dword_1906E0000, v11, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  sub_190750728(v6, v7);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_190751B08;
  v16[3] = &unk_1E2C62C98;
  v17 = v8;
  v18 = v13;
  v14 = v13;
  v15 = v8;
  sub_1907507F8(v16, v14);

}

uint64_t sub_190751B08(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_redeliverMessagesForDevice_completion_);
}

void IDSLocalPairingDeletePairedDevice(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (_IDSRunningInDaemon())
    sub_1907EEA90();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingDeletePairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v9;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingDeletePairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v11;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  sub_190750728(v6, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_190751DA0;
  v15[3] = &unk_1E2C62C98;
  v16 = v5;
  v17 = v12;
  v13 = v12;
  v14 = v5;
  sub_1907507F8(v15, v13);

}

uint64_t sub_190751DA0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "deletePairedDeviceWithID:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void IDSLocalPairingUnpairStartForDevice(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (_IDSRunningInDaemon())
    sub_1907EEAB8();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingUnpairStartForDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong d"
          "ispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v9;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingUnpairStartForDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong d"
          "ispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v11;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  sub_190750728(v6, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_190752038;
  v15[3] = &unk_1E2C62C98;
  v16 = v5;
  v17 = v12;
  v13 = v12;
  v14 = v5;
  sub_1907507F8(v15, v13);

}

uint64_t sub_190752038(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_unpairStartForDeviceWithID_completion_);
}

void IDSLocalPairingStopForDevice(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (_IDSRunningInDaemon())
    sub_1907EEAE0();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingStopForDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v9;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingStopForDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v11;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  sub_190750728(v6, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_1907522D0;
  v15[3] = &unk_1E2C62C98;
  v16 = v5;
  v17 = v12;
  v13 = v12;
  v14 = v5;
  sub_1907507F8(v15, v13);

}

uint64_t sub_1907522D0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_stopLocalPairingForDeviceWithID_completion_);
}

void IDSLocalPairingUnpairForDevice(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (_IDSRunningInDaemon())
    sub_1907EEB08();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingUnpairForDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v9;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingUnpairForDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v11;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  sub_190750728(v6, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_190752568;
  v15[3] = &unk_1E2C62C98;
  v16 = v5;
  v17 = v12;
  v13 = v12;
  v14 = v5;
  sub_1907507F8(v15, v13);

}

uint64_t sub_190752568(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_unpairDeviceWithID_completion_);
}

void IDSLocalPairingForgetPairedDevice(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (_IDSRunningInDaemon())
    sub_1907EEB30();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingForgetPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v9;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v19 = "void IDSLocalPairingForgetPairedDevice(NSUUID *__strong, __strong IDSLocalPairingCompletionBlock, __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "cbuuid";
    v22 = 2112;
    v23 = v5;
    v24 = 2080;
    v25 = "block";
    v26 = 2048;
    v27 = v11;
    v28 = 2080;
    v29 = "queue";
    v30 = 2048;
    v31 = v7;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  sub_190750728(v6, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_190752800;
  v15[3] = &unk_1E2C62C98;
  v16 = v5;
  v17 = v12;
  v13 = v12;
  v14 = v5;
  sub_1907507F8(v15, v13);

}

uint64_t sub_190752800(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_forgetDeviceWithID_completion_);
}

void IDSLocalPairingGetPairingDevicesWithCompletionBlock(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (_IDSRunningInDaemon())
    sub_1907EEB58();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)MEMORY[0x19400FE1C](v3);
    *(_DWORD *)buf = 136316162;
    v18 = "void IDSLocalPairingGetPairingDevicesWithCompletionBlock(__strong IDSLocalPairingPairedDevicesCompletionBlock,"
          " __strong dispatch_queue_t)";
    v19 = 2080;
    v20 = "block";
    v21 = 2048;
    v22 = v6;
    v23 = 2080;
    v24 = "queue";
    v25 = 2048;
    v26 = v4;
    _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)MEMORY[0x19400FE1C](v3);
    *(_DWORD *)buf = 136316162;
    v18 = "void IDSLocalPairingGetPairingDevicesWithCompletionBlock(__strong IDSLocalPairingPairedDevicesCompletionBlock,"
          " __strong dispatch_queue_t)";
    v19 = 2080;
    v20 = "block";
    v21 = 2048;
    v22 = v8;
    v23 = 2080;
    v24 = "queue";
    v25 = 2048;
    v26 = v4;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);

  }
  if (!v4)
  {
    v4 = (id)MEMORY[0x1E0C80D38];
    v9 = MEMORY[0x1E0C80D38];
  }
  if (!v3)
    v3 = &unk_1E2C5FA70;
  sub_190752A90(v3, v4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_190752B60;
  v15[3] = &unk_1E2C62CE8;
  v16 = v10;
  v13[0] = v11;
  v13[1] = 3221225472;
  v13[2] = sub_190752B6C;
  v13[3] = &unk_1E2C61A88;
  v14 = v16;
  v12 = v16;
  sub_1907507F8(v15, v13);

}

id sub_190752A90(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v15[4];
  id v16;
  id v17;

  v3 = a1;
  v4 = a2;
  if (!v4)
  {
    v4 = (id)MEMORY[0x1E0C80D38];
    v5 = MEMORY[0x1E0C80D38];
  }
  v6 = &unk_1E2C5F6B0;
  if (v3)
    v6 = v3;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_1907548B8;
  v15[3] = &unk_1E2C62DD0;
  v16 = v4;
  v17 = v6;
  v7 = v6;
  v8 = v4;
  v9 = (void *)MEMORY[0x19400FE1C](v15);
  v13 = (void *)MEMORY[0x19400FE1C](v9, v10, v11, v12);

  return v13;
}

uint64_t sub_190752B60(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_getPairingDevicesWithCompletion_);
}

uint64_t sub_190752B6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void IDSLocalPairingGetPairedDevicesWithCompletionBlock(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (_IDSRunningInDaemon())
    sub_1907EEB80();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)MEMORY[0x19400FE1C](v3);
    *(_DWORD *)buf = 136316162;
    v17 = "void IDSLocalPairingGetPairedDevicesWithCompletionBlock(__strong IDSLocalPairingPairedDevicesCompletionBlock, "
          "__strong dispatch_queue_t)";
    v18 = 2080;
    v19 = "block";
    v20 = 2048;
    v21 = v6;
    v22 = 2080;
    v23 = "queue";
    v24 = 2048;
    v25 = v4;
    _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)MEMORY[0x19400FE1C](v3);
    *(_DWORD *)buf = 136316162;
    v17 = "void IDSLocalPairingGetPairedDevicesWithCompletionBlock(__strong IDSLocalPairingPairedDevicesCompletionBlock, "
          "__strong dispatch_queue_t)";
    v18 = 2080;
    v19 = "block";
    v20 = 2048;
    v21 = v8;
    v22 = 2080;
    v23 = "queue";
    v24 = 2048;
    v25 = v4;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);

  }
  sub_190752A90(v3, v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_190752DE0;
  v14[3] = &unk_1E2C62CE8;
  v15 = v9;
  v12[0] = v10;
  v12[1] = 3221225472;
  v12[2] = sub_190752DEC;
  v12[3] = &unk_1E2C61A88;
  v13 = v15;
  v11 = v15;
  sub_1907507F8(v14, v12);

}

uint64_t sub_190752DE0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_getPairedDevicesWithCompletion_);
}

uint64_t sub_190752DEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void IDSLocalPairingGetPairingRecordsWithCompletionBlock(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  uint64_t *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *);
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  _BYTE buf[24];
  void *v26;
  _BYTE v27[24];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (_IDSRunningInDaemon())
    sub_1907EEBA8();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)MEMORY[0x19400FE1C](v3);
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "void IDSLocalPairingGetPairingRecordsWithCompletionBlock(__strong IDSLocalPairingPairingRecords"
                         "CompletionBlock, __strong dispatch_queue_t)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "block";
    *(_WORD *)&buf[22] = 2048;
    v26 = v6;
    *(_WORD *)v27 = 2080;
    *(_QWORD *)&v27[2] = "queue";
    *(_WORD *)&v27[10] = 2048;
    *(_QWORD *)&v27[12] = v4;
    _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (void *)MEMORY[0x19400FE1C](v3);
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "void IDSLocalPairingGetPairingRecordsWithCompletionBlock(__strong IDSLocalPairingPairingRecords"
                         "CompletionBlock, __strong dispatch_queue_t)";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "block";
    *(_WORD *)&buf[22] = 2048;
    v26 = v8;
    *(_WORD *)v27 = 2080;
    *(_QWORD *)&v27[2] = "queue";
    *(_WORD *)&v27[10] = 2048;
    *(_QWORD *)&v27[12] = v4;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);

  }
  if (v3)
  {
    if (!v4)
    {
      v4 = (id)MEMORY[0x1E0C80D38];
      v9 = MEMORY[0x1E0C80D38];
    }
    v10 = MEMORY[0x1E0C809B0];
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = sub_19075311C;
    v22[3] = &unk_1E2C62D30;
    v4 = v4;
    v23 = v4;
    v24 = v3;
    v20[0] = v10;
    v20[1] = 3221225472;
    v20[2] = sub_190753210;
    v20[3] = &unk_1E2C62CE8;
    v11 = (id)MEMORY[0x19400FE1C](v22);
    v21 = v11;
    v15 = v10;
    v16 = 3221225472;
    v17 = sub_190753328;
    v18 = &unk_1E2C61A88;
    v19 = v11;
    v12 = v20;
    v13 = &v15;
    *(_QWORD *)buf = v10;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_190754984;
    v26 = &unk_1E2C62DF8;
    *(_QWORD *)&v27[8] = v12;
    *(_QWORD *)&v27[16] = 0x4082C00000000000;
    *(_QWORD *)v27 = v13;
    v14 = v11;
    +[IDSXPCDaemonController performDaemonControllerTask:](IDSXPCDaemonController, "performDaemonControllerTask:", buf, v15, v16, v17, v18);

  }
}

void sub_19075311C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_1907531FC;
  v15[3] = &unk_1E2C60F18;
  v10 = *(NSObject **)(a1 + 32);
  v11 = *(id *)(a1 + 40);
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v19 = v11;
  v12 = v9;
  v13 = v8;
  v14 = v7;
  dispatch_async(v10, v15);

}

uint64_t sub_1907531FC(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_190753210(uint64_t a1, void *a2)
{
  _QWORD v3[4];
  id v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_190753280;
  v3[3] = &unk_1E2C62D58;
  v4 = *(id *)(a1 + 32);
  objc_msgSend(a2, "getPairingRecordsWithCompletion:", v3);

}

void sub_190753280(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  void *v8;
  id v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = a4;
  v8 = (void *)MEMORY[0x1E0D36AA8];
  v9 = a3;
  v10 = a2;
  objc_msgSend(v8, "NRPairing");
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    sub_1907EEBD0((uint64_t)v7, v11, v12, v13, v14, v15, v16, v17);

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_190753328(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907EEC38((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void IDSLocalPairingSetAllowedTrafficClassifiersForDevice(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  id v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  objc_msgSend(v8, "uniqueID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (_IDSRunningInDaemon())
    sub_1907EECA0();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (void *)MEMORY[0x19400FE1C](v9);
    *(_DWORD *)buf = 136317186;
    v25 = "void IDSLocalPairingSetAllowedTrafficClassifiersForDevice(NSSet *__strong, IDSDevice *__strong, __strong IDSLo"
          "calPairingCompletionBlock, __strong dispatch_queue_t)";
    v26 = 2080;
    v27 = "classifiers";
    v28 = 2112;
    v29 = v7;
    v30 = 2080;
    v31 = "deviceUniqueID";
    v32 = 2112;
    v33 = v11;
    v34 = 2080;
    v35 = "block";
    v36 = 2048;
    v37 = v13;
    v38 = 2080;
    v39 = "queue";
    v40 = 2048;
    v41 = v10;
    _os_log_impl(&dword_1906E0000, v12, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x5Cu);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = (void *)MEMORY[0x19400FE1C](v9);
    *(_DWORD *)buf = 136317186;
    v25 = "void IDSLocalPairingSetAllowedTrafficClassifiersForDevice(NSSet *__strong, IDSDevice *__strong, __strong IDSLo"
          "calPairingCompletionBlock, __strong dispatch_queue_t)";
    v26 = 2080;
    v27 = "classifiers";
    v28 = 2112;
    v29 = v7;
    v30 = 2080;
    v31 = "deviceUniqueID";
    v32 = 2112;
    v33 = v11;
    v34 = 2080;
    v35 = "block";
    v36 = 2048;
    v37 = v15;
    v38 = 2080;
    v39 = "queue";
    v40 = 2048;
    v41 = v10;
    _os_log_impl(&dword_1906E0000, v14, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x5Cu);

  }
  sub_190750728(v9, v10);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_1907536B0;
  v20[3] = &unk_1E2C62D80;
  v21 = v11;
  v22 = v7;
  v23 = v16;
  v17 = v16;
  v18 = v7;
  v19 = v11;
  sub_1907507F8(v20, v17);

}

uint64_t sub_1907536B0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_setAllowedTrafficClassifiersForDevice_classifiers_completion_);
}

void IDSLocalPairingGetAllowedTrafficClassifiersForDevice(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  _QWORD block[4];
  id v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  NSObject *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  objc_msgSend(v5, "uniqueID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (_IDSRunningInDaemon())
    sub_1907EECC8();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v16 = "void IDSLocalPairingGetAllowedTrafficClassifiersForDevice(IDSDevice *__strong, __strong IDSLocalPairingTraffic"
          "ClassifiersCompletionBlock, __strong dispatch_queue_t)";
    v17 = 2080;
    v18 = "deviceUniqueID";
    v19 = 2112;
    v20 = v8;
    v21 = 2080;
    v22 = "block";
    v23 = 2048;
    v24 = v10;
    v25 = 2080;
    v26 = "queue";
    v27 = 2048;
    v28 = v7;
    _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v16 = "void IDSLocalPairingGetAllowedTrafficClassifiersForDevice(IDSDevice *__strong, __strong IDSLocalPairingTraffic"
          "ClassifiersCompletionBlock, __strong dispatch_queue_t)";
    v17 = 2080;
    v18 = "deviceUniqueID";
    v19 = 2112;
    v20 = v8;
    v21 = 2080;
    v22 = "block";
    v23 = 2048;
    v24 = v12;
    v25 = 2080;
    v26 = "queue";
    v27 = 2048;
    v28 = v7;
    _os_log_impl(&dword_1906E0000, v11, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  if (v6 && v7)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_190753940;
    block[3] = &unk_1E2C604E8;
    v14 = v6;
    dispatch_async(v7, block);

  }
}

void sub_190753940(uint64_t a1)
{
  void *v2;
  id v3;

  +[IDSPairedDeviceManager sharedInstance](IDSPairedDeviceManager, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "allowedTrafficClassifiers");
  v3 = (id)objc_claimAutoreleasedReturnValue();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void IDSLocalPairingDropAllMessagesWithoutAnyAllowedTrafficClassifier(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  objc_msgSend(v5, "uniqueID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (_IDSRunningInDaemon())
    sub_1907EECF0();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v20 = "void IDSLocalPairingDropAllMessagesWithoutAnyAllowedTrafficClassifier(IDSDevice *__strong, __strong IDSLocalPa"
          "iringCompletionBlock, __strong dispatch_queue_t)";
    v21 = 2080;
    v22 = "deviceUniqueID";
    v23 = 2112;
    v24 = v8;
    v25 = 2080;
    v26 = "block";
    v27 = 2048;
    v28 = v10;
    v29 = 2080;
    v30 = "queue";
    v31 = 2048;
    v32 = v7;
    _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316674;
    v20 = "void IDSLocalPairingDropAllMessagesWithoutAnyAllowedTrafficClassifier(IDSDevice *__strong, __strong IDSLocalPa"
          "iringCompletionBlock, __strong dispatch_queue_t)";
    v21 = 2080;
    v22 = "deviceUniqueID";
    v23 = 2112;
    v24 = v8;
    v25 = 2080;
    v26 = "block";
    v27 = 2048;
    v28 = v12;
    v29 = 2080;
    v30 = "queue";
    v31 = 2048;
    v32 = v7;
    _os_log_impl(&dword_1906E0000, v11, OS_LOG_TYPE_DEFAULT, "%s (%s: %@)   (%s: %p)   (%s: %p)", buf, 0x48u);

  }
  sub_190750728(v6, v7);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_190753C40;
  v16[3] = &unk_1E2C62C98;
  v17 = v8;
  v18 = v13;
  v14 = v13;
  v15 = v8;
  sub_1907507F8(v16, v14);

}

uint64_t sub_190753C40(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_dropAllMessagesWithoutAnyAllowedClassifierForDevice_completion_);
}

void IDSLocalPairingReunionSyncStartedForServices(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (_IDSRunningInDaemon())
    sub_1907EED18();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316162;
    v19 = "void IDSLocalPairingReunionSyncStartedForServices(NSArray *__strong, __strong IDSLocalPairingCompletionBlock, "
          "__strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "block";
    v22 = 2048;
    v23 = v9;
    v24 = 2080;
    v25 = "queue";
    v26 = 2048;
    v27 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316162;
    v19 = "void IDSLocalPairingReunionSyncStartedForServices(NSArray *__strong, __strong IDSLocalPairingCompletionBlock, "
          "__strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "block";
    v22 = 2048;
    v23 = v11;
    v24 = 2080;
    v25 = "queue";
    v26 = 2048;
    v27 = v7;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);

  }
  sub_190750728(v6, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_190753EAC;
  v15[3] = &unk_1E2C61F88;
  v16 = v5;
  v17 = v12;
  v13 = v5;
  v14 = v12;
  +[IDSXPCDaemonController performDaemonControllerTask:](IDSXPCDaemonController, "performDaemonControllerTask:", v15);

}

void sub_190753EAC(uint64_t a1, void *a2)
{
  id v3;

  objc_msgSend(a2, "reunionSyncCollaboratorWithErrorHandler:", *(_QWORD *)(a1 + 40));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reunionSyncStartedForServices:withCompletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void IDSLocalPairingReunionSyncCompletedForServices(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (_IDSRunningInDaemon())
    sub_1907EED40();
  +[IDSTransportLog NRPairing](IDSTransportLog, "NRPairing");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316162;
    v19 = "void IDSLocalPairingReunionSyncCompletedForServices(NSArray *__strong, __strong IDSLocalPairingCompletionBlock"
          ", __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "block";
    v22 = 2048;
    v23 = v9;
    v24 = 2080;
    v25 = "queue";
    v26 = 2048;
    v27 = v7;
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);

  }
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (void *)MEMORY[0x19400FE1C](v6);
    *(_DWORD *)buf = 136316162;
    v19 = "void IDSLocalPairingReunionSyncCompletedForServices(NSArray *__strong, __strong IDSLocalPairingCompletionBlock"
          ", __strong dispatch_queue_t)";
    v20 = 2080;
    v21 = "block";
    v22 = 2048;
    v23 = v11;
    v24 = 2080;
    v25 = "queue";
    v26 = 2048;
    v27 = v7;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "%s (%s: %p)   (%s: %p)", buf, 0x34u);

  }
  sub_190750728(v6, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_190754150;
  v15[3] = &unk_1E2C61F88;
  v16 = v5;
  v17 = v12;
  v13 = v5;
  v14 = v12;
  +[IDSXPCDaemonController performDaemonControllerTask:](IDSXPCDaemonController, "performDaemonControllerTask:", v15);

}

void sub_190754150(uint64_t a1, void *a2)
{
  id v3;

  objc_msgSend(a2, "reunionSyncCollaboratorWithErrorHandler:", *(_QWORD *)(a1 + 40));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reunionSyncCompletedForServices:withCompletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190754668(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  NSObject *v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(a1 + 40));
    *(_DWORD *)buf = 134218242;
    v13 = v5;
    v14 = 2112;
    v15 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "About to call local pairing completion block { block: %p, error: %@ }", buf, 0x16u);

  }
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_19075479C;
  v9[3] = &unk_1E2C60E00;
  v6 = *(NSObject **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v10 = v3;
  v11 = v7;
  v8 = v3;
  dispatch_async(v6, v9);

}

uint64_t sub_19075479C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  int v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "NRPairing");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(a1 + 40));
    v5 = 134217984;
    v6 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Calling local pairing completion block %p", (uint8_t *)&v5, 0xCu);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_190754868(uint64_t a1, void *a2)
{
  id v3;

  objc_msgSend(a2, "pairingCollaboratorWithErrorHandler:", *(_QWORD *)(a1 + 32));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1907548B8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_190754970;
  block[3] = &unk_1E2C60EC8;
  v7 = *(NSObject **)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

}

uint64_t sub_190754970(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_190754984(uint64_t a1, void *a2)
{
  id v3;

  objc_msgSend(a2, "pairingCollaboratorWithTimeout:errorHandler:", *(_QWORD *)(a1 + 32), *(double *)(a1 + 48));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_190754A14()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE20A078);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD6500;
  qword_1ECDD6500 = v0;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE1EC2A0);
  v49 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)qword_1ECDD6500, "setInterface:forSelector:argumentIndex:ofReply:", v49, sel_setupOffGridMessengerClient_withUUID_forService_, 0, 0);
  v2 = (void *)qword_1ECDD6500;
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  objc_msgSend(v3, "setWithObjects:", v4, v5, v6, objc_opt_class(), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v7, sel_resultsForDestinationURIs_senderURI_service_options_completion_, 0, 0);

  v8 = (void *)qword_1ECDD6500;
  v9 = (void *)MEMORY[0x1E0C99E60];
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  objc_msgSend(v9, "setWithObjects:", v10, v11, objc_opt_class(), 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setClasses:forSelector:argumentIndex:ofReply:", v12, sel_resultsForDestinationURIs_senderURI_service_options_completion_, 0, 1);

  v13 = (void *)qword_1ECDD6500;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setClasses:forSelector:argumentIndex:ofReply:", v14, sel_encryptOffGridMessage_completion_, 0, 0);

  v15 = (void *)qword_1ECDD6500;
  v16 = (void *)MEMORY[0x1E0C99E60];
  v17 = objc_opt_class();
  objc_msgSend(v16, "setWithObjects:", v17, objc_opt_class(), 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setClasses:forSelector:argumentIndex:ofReply:", v18, sel_encryptOffGridMessage_completion_, 0, 1);

  v19 = (void *)qword_1ECDD6500;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setClasses:forSelector:argumentIndex:ofReply:", v20, sel_decryptOffGridMessage_completion_, 0, 0);

  v21 = (void *)qword_1ECDD6500;
  v22 = (void *)MEMORY[0x1E0C99E60];
  v23 = objc_opt_class();
  objc_msgSend(v22, "setWithObjects:", v23, objc_opt_class(), 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setClasses:forSelector:argumentIndex:ofReply:", v24, sel_decryptOffGridMessage_completion_, 0, 1);

  v25 = (void *)qword_1ECDD6500;
  v26 = (void *)MEMORY[0x1E0C99E60];
  v27 = objc_opt_class();
  objc_msgSend(v26, "setWithObjects:", v27, objc_opt_class(), 0);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setClasses:forSelector:argumentIndex:ofReply:", v28, sel_sendEncryptedOffGridMessage_options_completion_, 0, 0);

  v29 = (void *)qword_1ECDD6500;
  v30 = (void *)MEMORY[0x1E0C99E60];
  v31 = objc_opt_class();
  objc_msgSend(v30, "setWithObjects:", v31, objc_opt_class(), 0);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "setClasses:forSelector:argumentIndex:ofReply:", v32, sel_sendEncryptedOffGridMessage_options_completion_, 0, 1);

  v33 = (void *)qword_1ECDD6500;
  v34 = (void *)MEMORY[0x1E0C99E60];
  v35 = objc_opt_class();
  v36 = objc_opt_class();
  objc_msgSend(v34, "setWithObjects:", v35, v36, objc_opt_class(), 0);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "setClasses:forSelector:argumentIndex:ofReply:", v37, sel_sendFetchRequestForHandles_fromHandle_completion_, 0, 0);

  v38 = (void *)qword_1ECDD6500;
  v39 = (void *)MEMORY[0x1E0C99E60];
  v40 = objc_opt_class();
  v41 = objc_opt_class();
  v42 = objc_opt_class();
  objc_msgSend(v39, "setWithObjects:", v40, v41, v42, objc_opt_class(), 0);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "setClasses:forSelector:argumentIndex:ofReply:", v43, sel_sendFetchRequestForHandles_fromHandle_completion_, 0, 1);

  v44 = (void *)qword_1ECDD6500;
  v45 = (void *)MEMORY[0x1E0C99E60];
  v46 = objc_opt_class();
  v47 = objc_opt_class();
  objc_msgSend(v45, "setWithObjects:", v46, v47, objc_opt_class(), 0);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "setClasses:forSelector:argumentIndex:ofReply:", v48, sel_donateHandlesForMessagingKeys_fromURI_options_completion_, 0, 0);

}

void sub_190754F0C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE20A0D8);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD6508;
  qword_1ECDD6508 = v0;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE1F1A60);
  v61 = (id)objc_claimAutoreleasedReturnValue();
  v2 = (void *)MEMORY[0x1E0C99E60];
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  objc_msgSend(v2, "setWithObjects:", v3, v4, objc_opt_class(), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "setClasses:forSelector:argumentIndex:ofReply:", v5, sel_contactInfoUpdated_, 0, 0);

  objc_msgSend((id)qword_1ECDD6508, "setInterface:forSelector:argumentIndex:ofReply:", v61, sel_setupOffGridStateManagerClient_withUUID_completion_, 0, 0);
  v6 = (void *)qword_1ECDD6508;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setClasses:forSelector:argumentIndex:ofReply:", v7, sel_fetchCurrentOffGridMode_, 1, 1);

  v8 = (void *)qword_1ECDD6508;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setClasses:forSelector:argumentIndex:ofReply:", v9, sel_fetchCurrentPublishStatus_, 1, 1);

  v10 = (void *)qword_1ECDD6508;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setClasses:forSelector:argumentIndex:ofReply:", v11, sel_setOffGridMode_options_completion_, 0, 0);

  v12 = (void *)qword_1ECDD6508;
  v13 = (void *)MEMORY[0x1E0C99E60];
  v14 = objc_opt_class();
  objc_msgSend(v13, "setWithObjects:", v14, objc_opt_class(), 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setClasses:forSelector:argumentIndex:ofReply:", v15, sel_invitedHandlesWithCompletion_, 0, 1);

  v16 = (void *)qword_1ECDD6508;
  v17 = (void *)MEMORY[0x1E0C99E60];
  v18 = objc_opt_class();
  v19 = objc_opt_class();
  objc_msgSend(v17, "setWithObjects:", v18, v19, objc_opt_class(), 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setClasses:forSelector:argumentIndex:ofReply:", v20, sel_inviteHandles_fromSenderHandle_withDictionaryPayload_completion_, 0, 0);

  v21 = (void *)qword_1ECDD6508;
  v22 = (void *)MEMORY[0x1E0C99E60];
  v23 = objc_opt_class();
  v24 = objc_opt_class();
  v25 = objc_opt_class();
  objc_msgSend(v22, "setWithObjects:", v23, v24, v25, objc_opt_class(), 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setClasses:forSelector:argumentIndex:ofReply:", v26, sel_inviteHandles_fromSenderHandle_withDictionaryPayload_completion_, 0, 1);

  v27 = (void *)qword_1ECDD6508;
  v28 = (void *)MEMORY[0x1E0C99E60];
  v29 = objc_opt_class();
  objc_msgSend(v28, "setWithObjects:", v29, objc_opt_class(), 0);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setClasses:forSelector:argumentIndex:ofReply:", v30, sel_removeInvitedHandles_completion_, 0, 0);

  v31 = (void *)qword_1ECDD6508;
  v32 = (void *)MEMORY[0x1E0C99E60];
  v33 = objc_opt_class();
  v34 = objc_opt_class();
  objc_msgSend(v32, "setWithObjects:", v33, v34, objc_opt_class(), 0);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setClasses:forSelector:argumentIndex:ofReply:", v35, sel_removeInvitedHandles_completion_, 0, 1);

  v36 = (void *)qword_1ECDD6508;
  v37 = (void *)MEMORY[0x1E0C99E60];
  v38 = objc_opt_class();
  v39 = objc_opt_class();
  objc_msgSend(v37, "setWithObjects:", v38, v39, objc_opt_class(), 0);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "setClasses:forSelector:argumentIndex:ofReply:", v40, sel_removeAllInvitedHandlesWithCompletion_, 0, 1);

  v41 = (void *)qword_1ECDD6508;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "setClasses:forSelector:argumentIndex:ofReply:", v42, sel_fetchStewieAvailabilityWithCompletion_, 2, 1);

  v43 = (void *)qword_1ECDD6508;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "setClasses:forSelector:argumentIndex:ofReply:", v44, sel_connectStewieWithCompletion_, 0, 1);

  v45 = (void *)qword_1ECDD6508;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "setClasses:forSelector:argumentIndex:ofReply:", v46, sel_disconnectStewieWithCompletion_, 0, 1);

  v47 = (void *)qword_1ECDD6508;
  v48 = (void *)MEMORY[0x1E0C99E60];
  v49 = objc_opt_class();
  v50 = objc_opt_class();
  v51 = objc_opt_class();
  v52 = objc_opt_class();
  objc_msgSend(v48, "setWithObjects:", v49, v50, v51, v52, objc_opt_class(), 0);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "setClasses:forSelector:argumentIndex:ofReply:", v53, sel_fetchContactsOfType_completion_, 0, 1);

  v54 = (void *)qword_1ECDD6508;
  v55 = (void *)MEMORY[0x1E0C99E60];
  v56 = objc_opt_class();
  v57 = objc_opt_class();
  v58 = objc_opt_class();
  v59 = objc_opt_class();
  objc_msgSend(v55, "setWithObjects:", v56, v57, v58, v59, objc_opt_class(), 0);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v54, "setClasses:forSelector:argumentIndex:ofReply:", v60, sel_fetchContactsOfType_phoneNumbersOnly_completion_, 0, 1);

}

void sub_190755584()
{
  _IDSDeviceConnectionActiveMap *v0;
  void *v1;

  v0 = objc_alloc_init(_IDSDeviceConnectionActiveMap);
  v1 = (void *)qword_1ECDD66F8;
  qword_1ECDD66F8 = (uint64_t)v0;

}

uint64_t sub_1907563B0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0xFFFFFFFFLL, *(_QWORD *)(a1 + 32));
}

void sub_1907563C4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _QWORD *v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  _QWORD *v11;
  id v12;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 56))
  {
    *(_BYTE *)(v1 + 125) = 1;
    v3 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
    v4 = *(_QWORD **)(a1 + 32);
    v5 = v4[8];
    v7 = MEMORY[0x1E0C809B0];
    v8 = 3221225472;
    v9 = sub_190756480;
    v10 = &unk_1E2C60820;
    v11 = v4;
    v12 = v3;
    v6 = v3;
    dispatch_async(v5, &v7);
    objc_msgSend(*(id *)(a1 + 32), "_cleanupCompletionBlock", v7, v8, v9, v10);

  }
}

void sub_190756480(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  +[IDSTransportLog IDSDeviceConnection](IDSTransportLog, "IDSDeviceConnection");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    v8 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "<%p> _IDSDeviceConnection has timed out waiting for a socket.", buf, 0xCu);
  }

  v4 = objc_alloc(MEMORY[0x1E0C99D80]);
  v5 = (void *)objc_msgSend(v4, "initWithObjectsAndKeys:", CFSTR("Socket open timed out"), *MEMORY[0x1E0CB2D50], 0);
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), 20, v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t sub_1907578CC(uint64_t a1)
{
  kdebug_trace();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1907579D8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  +[IDSTransportLog IDSDeviceConnection](IDSTransportLog, "IDSDeviceConnection");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 120);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Daemon died, closing socket: %d", (uint8_t *)v5, 8u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_close");
}

id sub_1907583D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (*(_QWORD *)(a1 + 72))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v2 = *(_QWORD *)(a1 + 48);
      if (v2)
        (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, 0);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    if (*(_BYTE *)(a1 + 81))
    {
      v3 = *(_QWORD *)(a1 + 64);
      if (v3)
        (*(void (**)(uint64_t, _QWORD))(v3 + 16))(v3, 0);
    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  v4 = (id)objc_opt_self();
  return (id)objc_opt_self();
}

void sub_190758478(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountRemoved:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_1907584E0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountAdded:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_190758548(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountUpdated:", v3, *(_QWORD *)(a1 + 40));

  }
}

uint64_t sub_1907585B0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_internal");
}

uint64_t sub_1907585B8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_internal");
}

id sub_1907591F4(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = a2;
  objc_msgSend(v2, "objectForKey:", CFSTR("uri"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", CFSTR("status"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v2) = objc_msgSend(v4, "intValue");
  if ((_DWORD)v2 == 5051)
  {
    objc_msgSend(v3, "_stripFZIDPrefix");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_1907595D8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountRemoved:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_190759640(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountAdded:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_1907596A8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountEnabled:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_190759F80(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountAdded:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_190759FE8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountUpdated:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19075A294(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountRemoved:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19075A6F8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountUpdated:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19075A760(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountAdded:", v3, *(_QWORD *)(a1 + 40));

  }
}

uint64_t sub_19075A7C8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_internal");
}

void sub_19075A7D0(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "_internal");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "uniqueID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

}

void sub_19075A824(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountUpdated:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19075A88C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountAdded:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19075A8F4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountRemoved:", v3, *(_QWORD *)(a1 + 40));

  }
}

uint64_t sub_19075AC9C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  int v4;
  const __CFString *v5;
  uint64_t v6;
  int v8;
  void *v9;
  __int16 v10;
  const __CFString *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(void **)(a1 + 32);
    v4 = objc_msgSend(v3, "isActive");
    v5 = CFSTR("NO");
    v6 = *(_QWORD *)(a1 + 40);
    v8 = 138412802;
    v9 = v3;
    if (v4)
      v5 = CFSTR("YES");
    v10 = 2112;
    v11 = v5;
    v12 = 2112;
    v13 = v6;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Setup completed for account %@ isActive %@ setupError %@", (uint8_t *)&v8, 0x20u);
  }

  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 32), "isActive"), *(_QWORD *)(a1 + 40));
}

void sub_19075ADB0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountEnabled:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19075B0C0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "accountController:accountDisabled:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19075B770(uint64_t a1, void *a2)
{
  id v3;

  objc_msgSend(a2, "pinnedIdentityCollaboratorWithErrorHandler:", &unk_1E2C5FB10);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "fetchIdentityForPinningWithCompletion:", *(_QWORD *)(a1 + 32));

}

void sub_19075B7B8(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSPinnedIdentity");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907F0AF8();

}

void sub_19075B93C(uint64_t a1, void *a2)
{
  id v3;

  objc_msgSend(a2, "pinnedIdentityCollaboratorWithErrorHandler:", &unk_1E2C5F1F0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "pinIdentityBlob:withCompletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_19075B984(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSPinnedIdentity");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907F0AF8();

}

void sub_19075BAA8(uint64_t a1, void *a2)
{
  id v3;

  objc_msgSend(a2, "pinnedIdentityCollaboratorWithErrorHandler:", &unk_1E2C5F510);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "fetchAllPinnedIdentitiesWithCompletion:", *(_QWORD *)(a1 + 32));

}

void sub_19075BAF0(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSPinnedIdentity");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907F0AF8();

}

void sub_19075BBC8(uint64_t a1, void *a2)
{
  id v2;

  objc_msgSend(a2, "pinnedIdentityCollaboratorWithErrorHandler:", &unk_1E2C601D0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "clearAllPinnedIdentities");

}

void sub_19075BC00(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSPinnedIdentity");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907F0AF8();

}

uint64_t IDSHardDeregister(unsigned int a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (_IDSRunningInDaemon())
    sub_1907F0B58();
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138412290;
    v7 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Hard deregistering, %@", (uint8_t *)&v6, 0xCu);

  }
  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "hardDeregister");

  return sleep(a1);
}

uint64_t IDSTriggerFinalDeregister(unsigned int a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (_IDSRunningInDaemon())
    sub_1907F0B80();
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 138412290;
    v7 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Triggering final deregister, %@", (uint8_t *)&v6, 0xCu);

  }
  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "triggerFinalDeregister");

  return sleep(a1);
}

uint64_t IDSClearState(unsigned int a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint8_t v6[16];

  if (_IDSRunningInDaemon())
    sub_1907F0BA8();
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Clearing IDS state", v6, 2u);
  }

  objc_msgSend(MEMORY[0x1E0D36AF8], "sharedDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setClearStateOnLaunch:", 1);

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "clearIDSState");

  return sleep(a1);
}

void sub_19075C9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19075C9BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 40), "onQueueWeakSharedInstance");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19075CA90(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 40), "onQueueWeakSharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_19075CB74(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 40), "onQueueWeakSharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

id sub_19075CBE4()
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.identityservicesd.nsxpc"), 0);
}

void sub_19075CEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19075CEDC(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  NSMapTable *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t v17[128];
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0D34D40], "xpc");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(WeakRetained, "collaboratorPromiseDictionary");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v19 = v4;
      v20 = 2048;
      v21 = WeakRetained;
      _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "IDSXPCDaemonController connection interrupted -- Dropping collaborators {collaborators: %{public}@, pointer: %p}", buf, 0x16u);

    }
    objc_msgSend(WeakRetained, "collaboratorPromiseDictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "removeAllObjects");

    objc_msgSend(WeakRetained, "syncCollaboratorDictionary");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "removeAllObjects");

    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "interruptionHandlerByTarget", 0);
    v7 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
    NSAllMapTableValues(v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v14;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v14 != v11)
            objc_enumerationMutation(v8);
          (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v12++) + 16))();
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v10);
    }

  }
}

uint64_t sub_19075D2F0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_pairingCollaboratorWithCompletion_);
}

uint64_t sub_19075D378(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_pairedDeviceManagerCollaboratorWithCompletion_);
}

void sub_19075D400(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v4 = (void *)MEMORY[0x1E0CB3898];
  v5 = a3;
  v6 = a2;
  objc_msgSend(v4, "processInfo");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "processName");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "reunionSyncCollaboratorForClientProcessName:withCompletion:", v7, v5);

}

uint64_t sub_19075D500(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_opportunisticCollaboratorWithCompletion_);
}

uint64_t sub_19075D588(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_registrationCollaboratorWithCompletion_);
}

uint64_t sub_19075D610(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_activityMonitorCollaboratorWithCompletion_);
}

uint64_t sub_19075D698(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_serverMessagingCollaboratorWithCompletion_);
}

uint64_t sub_19075D720(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_offGridMessengerCollaboratorWithCompletion_);
}

uint64_t sub_19075D7A8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_offGridStateManagerCollaboratorWithCompletion_);
}

uint64_t sub_19075D830(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_keyTransparencyCollaboratorWithCompletion_);
}

uint64_t sub_19075D8B8(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_pinnedIdentityCollaboratorWithCompletion_);
}

uint64_t sub_19075D994(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_firewallCollaboratorForService_withCompletion_);
}

uint64_t sub_19075DA24(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_groupSessionKeyValueDeliveryProviderCollaboratorWithCompletion_);
}

uint64_t sub_19075DB00(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_featureTogglerForService_withCompletion_);
}

uint64_t sub_19075DBE4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_baaSignerCollaboratorForTopic_withCompletion_);
}

uint64_t sub_19075DC74(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_interalTestingCollaboratorWithCompletion_);
}

uint64_t sub_19075DD14(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_19075DEC4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v5 = a2;
  v3 = (id)objc_opt_self();
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

}

void sub_19075DFCC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;

  v5 = a2;
  v3 = (id)objc_opt_self();
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

}

void sub_19075E45C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_19075E484(uint64_t a1, uint64_t a2)
{
  id v3;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    objc_msgSend(*(id *)(a1 + 40), "collaboratorPromiseDictionary");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "removeObjectForKey:", *(_QWORD *)(a1 + 48));

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "failWithError:", a2);
  }
}

void sub_19075E4EC(uint64_t a1, void *a2, uint64_t a3)
{
  IDSXPCConnection *v5;
  id v6;

  v6 = a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "failWithError:", a3);
  }
  else
  {
    v5 = -[IDSXPCConnection initWithRemoteObject:rootConnection:]([IDSXPCConnection alloc], "initWithRemoteObject:rootConnection:", v6, *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "fulfillWithValue:", v5);

  }
}

void sub_19075E570(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  double v6;
  id v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id (*v21)(uint64_t);
  void *v22;
  uint64_t v23;
  id v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "state");
  if (v4 == 1)
  {
    objc_msgSend(MEMORY[0x1E0D34D40], "xpc");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 40);
      objc_msgSend(v3, "error");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v26 = v13;
      v27 = 2114;
      v28 = v14;
      _os_log_impl(&dword_1906E0000, v12, OS_LOG_TYPE_DEFAULT, "Failed to get collaborator {identifier: %{public}@, error: %{public}@}", buf, 0x16u);

    }
    v15 = *(_QWORD *)(a1 + 56);
    if (v15)
    {
      objc_msgSend(v3, "error");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);

    }
    v17 = *(void **)(a1 + 48);
    objc_msgSend(v3, "error");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "failWithError:", v18);

    objc_msgSend(*(id *)(a1 + 32), "collaboratorPromiseDictionary");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "removeObjectForKey:", *(_QWORD *)(a1 + 40));
    goto LABEL_11;
  }
  if (!v4)
  {
    objc_msgSend(v3, "value");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(double *)(a1 + 64);
    v19 = MEMORY[0x1E0C809B0];
    v20 = 3221225472;
    v21 = sub_19075E7C8;
    v22 = &unk_1E2C60E28;
    v7 = *(id *)(a1 + 56);
    v23 = *(_QWORD *)(a1 + 32);
    v24 = v7;
    objc_msgSend(v5, "remoteObjectProxyWithTimeoutInSeconds:errorHandler:", &v19, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D34D40], "xpc", v19, v20, v21, v22);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v26 = v10;
      v27 = 2114;
      v28 = v8;
      _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "Got collaborator {identifier: %{public}@, proxy: %{public}@}", buf, 0x16u);
    }

    objc_msgSend(*(id *)(a1 + 48), "fulfillWithRemoteObject:", v8);
    v11 = v24;
LABEL_11:

  }
}

id sub_19075E7C8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
    (*(void (**)(void))(v1 + 16))();
  return (id)objc_opt_self();
}

void sub_19075E99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19075E9B4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  v3 = *(_QWORD *)(a1 + 48);
  if (a3)
  {
    (*(void (**)(_QWORD, uint64_t))(v3 + 16))(*(_QWORD *)(a1 + 48), a3);
  }
  else
  {
    objc_msgSend(a2, "synchronousRemoteObjectProxyWithErrorHandler:", v3);
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    objc_msgSend(*(id *)(a1 + 32), "syncCollaboratorDictionary");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, *(_QWORD *)(a1 + 40));

  }
}

void sub_19075F75C()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE20A138);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD6510;
  qword_1ECDD6510 = v0;

  +[IDSXPCGroupSessionKeyValueDeliveryInterface interface](IDSXPCGroupSessionKeyValueDeliveryInterface, "interface");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)qword_1ECDD6510, "setInterface:forSelector:argumentIndex:ofReply:", v2, sel_keyValueDeliveryForSessionID_completionHandler_, 0, 1);

}

void sub_19075F8F8(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19075F9A4;
  v6[3] = &unk_1E2C61A88;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(a2, "keyTransparencyCollaboratorWithErrorHandler:", v6);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "applicationIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "fetchPeerVerificationInfoForApplication:forURIs:withCompletion:", v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_19075F9A4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "KeyTransparency");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F0D8C();

  v5 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IDSKeyTransparencyManagerErrorDomain"), 100, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v5 + 16))(v5, MEMORY[0x1E0C9AA70], v6);

}

void sub_19075FACC(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19075FB78;
  v6[3] = &unk_1E2C61A88;
  v7 = *(id *)(a1 + 40);
  objc_msgSend(a2, "keyTransparencyCollaboratorWithErrorHandler:", v6);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "applicationIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "fetchSelfVerificationInfoForApplication:withCompletion:", v5, *(_QWORD *)(a1 + 40));

}

void sub_19075FB78(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  objc_class *v7;
  id v8;
  void *v9;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "KeyTransparency");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F0D8C();

  v5 = *(_QWORD *)(a1 + 32);
  v11 = 0;
  v12 = &v11;
  v13 = 0x2050000000;
  v6 = (void *)qword_1EE1E1FD8;
  v14 = qword_1EE1E1FD8;
  if (!qword_1EE1E1FD8)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_1907613A8;
    v10[3] = &unk_1E2C602E0;
    v10[4] = &v11;
    sub_1907613A8((uint64_t)v10);
    v6 = (void *)v12[3];
  }
  v7 = objc_retainAutorelease(v6);
  _Block_object_dispose(&v11, 8);
  v8 = objc_alloc_init(v7);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IDSKeyTransparencyManagerErrorDomain"), 100, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, void *))(v5 + 16))(v5, v8, v9);

}

void sub_19075FCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19075FD7C(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19075FE28;
  v6[3] = &unk_1E2C61A88;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(a2, "keyTransparencyCollaboratorWithErrorHandler:", v6);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "applicationIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "healSelfForApplication:withHealableErrors:withCompletion:", v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_19075FE28(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "KeyTransparency");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F0D8C();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_190760054()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)qword_1EE1E1EB8;
  v6 = qword_1EE1E1EB8;
  if (!qword_1EE1E1EB8)
  {
    v1 = (void *)sub_1907613FC();
    v0 = (id *)dlsym(v1, "kKTApplicationIdentifierIDS");
    v4[3] = (uint64_t)v0;
    qword_1EE1E1EB8 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    sub_1907F0DEC();
  return *v0;
}

void sub_1907600D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id sub_1907600F0()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)qword_1EE1E1EC8;
  v6 = qword_1EE1E1EC8;
  if (!qword_1EE1E1EC8)
  {
    v1 = (void *)sub_1907613FC();
    v0 = (id *)dlsym(v1, "kKTApplicationIdentifierIDSFaceTime");
    v4[3] = (uint64_t)v0;
    qword_1EE1E1EC8 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    sub_1907F0E5C();
  return *v0;
}

void sub_190760174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id sub_19076018C()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)qword_1EE1E1ED0;
  v6 = qword_1EE1E1ED0;
  if (!qword_1EE1E1ED0)
  {
    v1 = (void *)sub_1907613FC();
    v0 = (id *)dlsym(v1, "kKTApplicationIdentifierIDSMultiplex");
    v4[3] = (uint64_t)v0;
    qword_1EE1E1ED0 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    sub_1907F0ECC();
  return *v0;
}

void sub_190760210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190760474(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_getKeyTransparencyOptInEligiblityForApplication_withCompletion_);
}

void sub_190760668(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[4];
  id v10;

  v4 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_190760738;
  v9[3] = &unk_1E2C61A88;
  v10 = *(id *)(a1 + 40);
  objc_msgSend(a2, "keyTransparencyCollaboratorWithErrorHandler:", v9);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = v4;
  v7[1] = 3221225472;
  v7[2] = sub_1907607B0;
  v7[3] = &unk_1E2C630D0;
  v6 = *(_QWORD *)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  objc_msgSend(v5, "sendOptInUpdateForApplications:withCompletion:", v6, v7);

}

void sub_190760738(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "KeyTransparency");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F0D8C();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1907607B0(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2;
  v4 = objc_msgSend(v3, "success");
  objc_msgSend(v3, "error");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v4, v5);
}

void sub_1907609F0(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_190760A78;
  v5[3] = &unk_1E2C61A88;
  v6 = *(id *)(a1 + 40);
  objc_msgSend(a2, "keyTransparencyCollaboratorWithErrorHandler:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "sendOptInUpdateForApplications:withCompletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190760A78(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "KeyTransparency");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F0D8C();

  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D34DA8]), "initWithSuccess:serverProvidedSMT:error:", 0, 0, v3);
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

}

void sub_190760CF0(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_190760D78;
  v5[3] = &unk_1E2C61A88;
  v6 = *(id *)(a1 + 40);
  objc_msgSend(a2, "keyTransparencyCollaboratorWithErrorHandler:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "sendOptInUpdateRequest:withCompletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190760D78(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "KeyTransparency");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F0D8C();

  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_alloc(MEMORY[0x1E0D34DA8]);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IDSKeyTransparencyManagerErrorDomain"), 200, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v6, "initWithSuccess:optedInOutURIs:serverSMTByURI:error:", 0, 0, 0, v7);
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v8);

}

void sub_190760EC4(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_190760F4C;
  v5[3] = &unk_1E2C61A88;
  v6 = *(id *)(a1 + 32);
  objc_msgSend(a2, "keyTransparencyCollaboratorWithErrorHandler:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "fetchKTRegistrationStatusWithCompletion:", *(_QWORD *)(a1 + 32));

}

void sub_190760F4C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "KeyTransparency");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F0D8C();

  v5 = objc_alloc_init(MEMORY[0x1E0D34DB0]);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_190760FE8(uint64_t a1, void *a2)
{
  id v2;

  objc_msgSend(a2, "keyTransparencyCollaboratorWithErrorHandler:", &unk_1E2C60050);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "registrationDataNeedsUpdate");

}

void sub_190761020(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "KeyTransparency");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907F0D8C();

}

void sub_190761144(uint64_t a1, void *a2)
{
  id v3;

  objc_msgSend(a2, "keyTransparencyCollaboratorWithErrorHandler:", &unk_1E2C5F1B0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "peerVerificationFinishedWithResults:", *(_QWORD *)(a1 + 32));

}

void sub_19076118C(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "KeyTransparency");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907F0D8C();

}

void sub_1907612E8(uint64_t a1, void *a2)
{
  id v3;

  objc_msgSend(a2, "keyTransparencyCollaboratorWithErrorHandler:", &unk_1E2C630F0);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "cacheClearRequest:", *(_QWORD *)(a1 + 32));

}

void sub_190761330(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "KeyTransparency");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907F0D8C();

}

Class sub_1907613A8(uint64_t a1)
{
  Class result;

  sub_1907613FC();
  result = objc_getClass("KTSelfVerificationInfo");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1907F12BC();
  qword_1EE1E1FD8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1907613FC()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!qword_1ECDD65B8)
  {
    v2 = xmmword_1E2C63110;
    v3 = 0;
    qword_1ECDD65B8 = _sl_dlopen();
  }
  if (!qword_1ECDD65B8)
    sub_1907F1334(&v1);
  return qword_1ECDD65B8;
}

void sub_1907614A4(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_190761534;
  v5[3] = &unk_1E2C61A88;
  v6 = *(id *)(a1 + 32);
  objc_msgSend(a2, "keyTransparencyCollaboratorWithErrorHandler:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_190761534(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "KeyTransparency");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F0D8C();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

char *sub_1907615B0()
{
  return dlerror();
}

void sub_190761A18(_QWORD *a1)
{
  _IDSAccount *v2;
  uint64_t v3;
  void *v4;

  v2 = -[_IDSAccount initWithDictionary:uniqueID:serviceName:delegateContext:]([_IDSAccount alloc], "initWithDictionary:uniqueID:serviceName:delegateContext:", a1[5], a1[6], a1[7], a1[4]);
  v3 = a1[4];
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

}

void sub_190761C6C(_QWORD *a1)
{
  _IDSAccount *v2;
  uint64_t v3;
  void *v4;

  v2 = -[_IDSAccount initWithLoginID:uniqueID:serviceName:delegateContext:]([_IDSAccount alloc], "initWithLoginID:uniqueID:serviceName:delegateContext:", a1[5], a1[6], a1[7], a1[4]);
  v3 = a1[4];
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

}

void sub_190761D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_190761DB0()
{
  return (id)objc_opt_self();
}

void sub_190761F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190761F40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "uniqueID");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190762068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190762080(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "loginID");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907621A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907621C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "serviceName");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907622E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190762300(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "primaryServiceName");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190762408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190762420(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "accountType");

}

void sub_19076251C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190762534(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "isActive");

}

void sub_190762630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190762648(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "isUserDisabled");

}

void sub_190762744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19076275C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "canSend");

}

void sub_190762878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190762890(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "devices");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907629B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907629D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "nearbyDevices");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190762AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190762B10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "connectedDevices");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190762C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190762C50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "profileInfo");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190762D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190762D90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "aliases");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190762EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190762ED0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "aliasStrings");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190762FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190763010(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "vettedAliases");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190763138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190763150(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "aliasesToRegister");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190763278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190763290(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handles");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907633B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907633D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pseudonymURIMap");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907634F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190763510(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pseudonyms");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190763600(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setPassword:", *(_QWORD *)(a1 + 40));

}

void sub_1907636DC(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setAuthToken:", *(_QWORD *)(a1 + 40));

}

void sub_1907637D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907637E8(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "_isEnabled");

}

void sub_1907639EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190763A04(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "isUsableForOuterMessaging");

}

void sub_190763B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190763B38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "accountInfo");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190763C28(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setAccountInfo:", *(_QWORD *)(a1 + 40));

}

void sub_190763D04(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateAccountWithAccountInfo:", *(_QWORD *)(a1 + 40));

}

void sub_190763DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190763E10(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "registrationStatus");

}

void sub_190763F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190763F24(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "registrationError");

}

void sub_190764040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190764058(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "registrationAlertInfo");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190764160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190764178(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "profileValidationStatus");

}

void sub_190764274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19076428C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "profileValidationErrorReason");

}

void sub_1907643A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907643C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "nextRegistrationDate");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907644E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190764500(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dateRegistered");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190764628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190764640(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "registeredURIs");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190764768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190764780(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "accountRegisteredURIs");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907648A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907648C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "registrationCertificate");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907649E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190764A00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pushToken");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190764B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190764B40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "regionServerContext");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190764C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190764C80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "profileID");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190764D98(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addDelegate:queue:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_190764E68(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeDelegate:", *(_QWORD *)(a1 + 40));

}

void sub_190764F6C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addRegistrationDelegate:queue:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_19076503C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeRegistrationDelegate:", *(_QWORD *)(a1 + 40));

}

void sub_19076525C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190765274(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "regionID");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190765364(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setRegionID:", *(_QWORD *)(a1 + 40));

}

void sub_190765478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190765490(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "regionBasePhoneNumber");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190765580(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setRegionBasePhoneNumber:", *(_QWORD *)(a1 + 40));

}

void sub_190765694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907656AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "displayName");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19076579C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setDisplayName:", *(_QWORD *)(a1 + 40));

}

void sub_1907658B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907658C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "userUniqueIdentifier");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190765990(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "authenticateAccount");

}

void sub_190765A34(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "passwordUpdated");

}

void sub_190765B24(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateAuthorizationCredentials:token:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_190765BD8(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "validateProfile");

}

void sub_190765CA4(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addAliases:", *(_QWORD *)(a1 + 40));

}

void sub_190765D80(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeAliases:", *(_QWORD *)(a1 + 40));

}

uint64_t sub_190765E5C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_validateAliases_);
}

uint64_t sub_190765F04(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_unvalidateAliases_);
}

void sub_190766054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_190766084(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "registerAccount");

}

void sub_1907661F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_190766228(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "unregisterAccount");

}

void sub_19076639C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_1907663CC(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "forceRemoveAccount");

}

void sub_190766574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_1907665A4(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_reregisterAndReidentify:", *(unsigned __int8 *)(a1 + 40));

}

void sub_190766728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_190766758(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "deactivateAndPurgeIdentify");

}

void sub_1907667FC(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_callNearbyDevicesChanged");

}

void sub_1907668A4(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_reloadCachedDevices");

}

void IDSiCloudSignInHack(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  const __CFString *v6;
  void *v7;
  int v8;
  id v9;
  __int16 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (_IDSRunningInDaemon())
    sub_1907F16F8();
  +[IDSLogging IDSiCloudSignInHack](IDSLogging, "IDSiCloudSignInHack");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = CFSTR("YES");
    if (!v4)
      v6 = CFSTR("NO");
    v8 = 138412546;
    v9 = v3;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_INFO, "iCloud sign in hack with userName %@ password %@", (uint8_t *)&v8, 0x16u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "iCloudSignInHackWithUserName:password:", v3, v4);

}

void IDSiCloudSignOutHack()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  if (_IDSRunningInDaemon())
    sub_1907F1720();
  +[IDSLogging IDSiCloudSignInHack](IDSLogging, "IDSiCloudSignInHack");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_INFO, "iCloud sign out hack", v2, 2u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "iCloudSignOutHack");

}

void IDSKickGetDependent(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  v1 = a1;
  if (_IDSRunningInDaemon())
    sub_1907F1748();
  +[IDSLogging IDSiCloudSignInHack](IDSLogging, "IDSiCloudSignInHack");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_INFO, "Kicking get dependent", v4, 2u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "kickGetDependentForAccount:", v1);

}

void IDSReRegister(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;

  v8 = a1;
  v5 = a2;
  v6 = a3;
  if (_IDSRunningInDaemon())
    sub_1907F1770();
  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "reRegisterWithUserID:action:service:", v8, v5, v6);

}

void IDSRepairAccounts()
{
  id v0;

  if (_IDSRunningInDaemon())
    sub_1907F1798();
  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "repairAccounts");

}

id IDSCopyBestGuessIDForID(void *a1)
{
  id v1;
  id v2;
  id v3;

  v1 = a1;
  if (objc_msgSend(v1, "containsString:", CFSTR(":"))
    && (objc_msgSend(v1, "hasPrefix:", CFSTR("biz:")) & 1) == 0)
  {
    v2 = v1;
  }
  else
  {
    objc_msgSend(v1, "_bestGuessURI");
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  v3 = v2;

  return v3;
}

uint64_t IDSCopyIDForPhoneNumber()
{
  return _IDSCopyIDForPhoneNumberWithOptions();
}

uint64_t IDSCopyIDForTemporaryID(void *a1)
{
  objc_msgSend(a1, "_URIFromFZIDType:", 4);
  return objc_claimAutoreleasedReturnValue();
}

uint64_t IDSCopyIDForPseudonymID(void *a1)
{
  objc_msgSend(a1, "_URIFromFZIDType:", 5);
  return objc_claimAutoreleasedReturnValue();
}

uint64_t IDSCopyIDForAccount()
{
  id v0;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  return MEMORY[0x1E0DE7D20](v0, sel_initWithString_);
}

uint64_t IDSCopyIDForDevice(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  char v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!objc_msgSend(v1, "isLocallyPaired"))
    goto LABEL_13;
  if ((objc_msgSend(v1, "relationship") & 2) != 0)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    objc_msgSend(v1, "identities");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v19;
      v7 = *MEMORY[0x1E0D34670];
      v8 = *MEMORY[0x1E0D348C0];
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v19 != v6)
            objc_enumerationMutation(v2);
          objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * i), "objectForKey:", v7);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "isEqualToString:", v8);

          v5 |= v11;
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v4);

      if ((v5 & 1) != 0)
        goto LABEL_11;
    }
    else
    {

    }
LABEL_13:
    objc_msgSend(v1, "pushToken");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "identities");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "service");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = _IDSCopyIDForPushTokenAndIdentitiesWithService();

    goto LABEL_14;
  }
LABEL_11:
  v12 = objc_alloc(MEMORY[0x1E0CB3940]);
  objc_msgSend(v1, "uniqueIDOverride");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v12, "initWithFormat:", CFSTR("device:%@"), v13);
LABEL_14:

  return v14;
}

uint64_t IDSCopyIDForRapportPublicDeviceIdentifier(void *a1)
{
  objc_class *v1;
  id v2;
  uint64_t v3;

  v1 = (objc_class *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v3 = objc_msgSend([v1 alloc], "initWithFormat:", CFSTR("guest-device:%@"), v2);

  return v3;
}

uint64_t IDSCopyIDForSession(void *a1)
{
  objc_msgSend(a1, "destination");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t IDSCopyIDForAnonymousCloudIdentifier(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    v2 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("urn:ck:%@"), v1);
  }
  else
  {
    _IMWarn();
    v2 = 0;
  }

  return v2;
}

uint64_t IDSCopyRawAddressForDestination(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "_stripPotentialTokenURIWithToken:", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_stripFZIDPrefix");
  v2 = objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t IDSCopyAddressDestinationForDestination(void *a1)
{
  objc_msgSend(a1, "_stripPotentialTokenURIWithToken:", 0);
  return objc_claimAutoreleasedReturnValue();
}

uint64_t IDSIDHasToken()
{
  _IDSTypeForID();
  return _IDSIDTypeHasToken();
}

id IDSCopyLocalDeviceUniqueID()
{
  void *v0;
  void *v1;
  NSObject *v2;
  id v3;
  _QWORD v5[5];
  uint64_t v6;
  _QWORD v7[4];
  id v8;

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "blockUntilConnected");

  v6 = 0;
  v7[0] = &v6;
  v7[1] = 0x3032000000;
  v7[2] = sub_1906EE284;
  v7[3] = sub_1906EE114;
  v8 = 0;
  +[IDSInternalQueueController sharedInstance](IDSInternalQueueController, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_190767180;
  v5[3] = &unk_1E2C602E0;
  v5[4] = &v6;
  objc_msgSend(v1, "performBlock:waitUntilDone:", v5, 1);

  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1907F17C0((uint64_t)v7, v2);

  v3 = *(id *)(v7[0] + 40);
  _Block_object_dispose(&v6, 8);

  return v3;
}

void sub_190767164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190767180(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "listener");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "deviceIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void IDSOSVersionFromString(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("."));
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v8, "count");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v8, "objectAtIndexedSubscript:", 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *a2 = objc_msgSend(v5, "integerValue");

    if (v4 != 1)
    {
      objc_msgSend(v8, "objectAtIndexedSubscript:", 1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      a2[1] = objc_msgSend(v6, "integerValue");

      if (v4 >= 3)
      {
        objc_msgSend(v8, "objectAtIndexedSubscript:", 2);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        a2[2] = objc_msgSend(v7, "integerValue");

      }
    }
  }

}

uint64_t IDSOSVersionCompare(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  _BOOL8 v9;

  if (*a1 < *a2)
    return -1;
  if (*a1 > *a2)
    return 1;
  v2 = a1[1];
  v3 = a2[1];
  if (v2 < v3)
    return -1;
  if (v2 > v3)
    return 1;
  v5 = a1[2];
  v6 = a2[2];
  v8 = __OFSUB__(v5, v6);
  v7 = v5 - v6 < 0;
  v9 = v5 > v6;
  if (v7 != v8)
    return -1;
  else
    return v9;
}

void sub_1907674D4()
{
  IDSHomeKitManager *v0;
  void *v1;

  v0 = objc_alloc_init(IDSHomeKitManager);
  v1 = (void *)qword_1ECDD6700;
  qword_1ECDD6700 = (uint64_t)v0;

}

void sub_1907676B4(_QWORD *a1)
{
  _IDSGenericCompletionHandler *v2;
  uint64_t v3;
  void *v4;
  id v5;

  if (a1[6] && a1[4])
  {
    v2 = -[_IDSGenericCompletionHandler initWithHandler:queue:]([_IDSGenericCompletionHandler alloc], "initWithHandler:queue:", a1[6], a1[4]);
    v3 = a1[5];
    v4 = *(void **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v2;

  }
  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "homeKitGetServiceUserIDs");

}

void sub_190767860(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  _IDSGenericCompletionHandler *v5;
  uint64_t v6;
  void *v7;
  id v8;

  if (!objc_msgSend(*(id *)(a1 + 32), "length") || !objc_msgSend(*(id *)(a1 + 40), "length") || !*(_QWORD *)(a1 + 48))
  {
    v2 = objc_alloc(MEMORY[0x1E0C99D80]);
    v3 = (void *)objc_msgSend(v2, "initWithObjectsAndKeys:", CFSTR("Required Field Is Empty"), *MEMORY[0x1E0CB2D50], 0);
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), 1, v3);
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

  }
  if (*(_QWORD *)(a1 + 72) && *(_QWORD *)(a1 + 56))
  {
    v5 = -[_IDSGenericCompletionHandler initWithHandler:queue:]([_IDSGenericCompletionHandler alloc], "initWithHandler:queue:", *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 56));
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(void **)(v6 + 16);
    *(_QWORD *)(v6 + 16) = v5;

  }
  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "homeKitGetAdminAccessTokensWithServiceUserID:accessoryID:pairingToken:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_190767AAC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _IDSGenericCompletionHandler *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v2 = objc_msgSend(*(id *)(a1 + 32), "length");
  v3 = (_QWORD *)MEMORY[0x1E0CB2D50];
  if (!v2 || !objc_msgSend(*(id *)(a1 + 40), "count") || !objc_msgSend(*(id *)(a1 + 48), "length"))
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", CFSTR("A required Field Is Empty"), *v3, 0);
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), 1, v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

  }
  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToIgnoringCase:", *(_QWORD *)(a1 + 48)))
  {
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", CFSTR("ServiceUserID and AdminID can not be the same"), *v3, 0);
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), 2, v6);
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

  }
  if (*(_QWORD *)(a1 + 72) && *(_QWORD *)(a1 + 56))
  {
    v8 = -[_IDSGenericCompletionHandler initWithHandler:queue:]([_IDSGenericCompletionHandler alloc], "initWithHandler:queue:", *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 56));
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(void **)(v9 + 24);
    *(_QWORD *)(v9 + 24) = v8;

  }
  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "homeKitGetConsentTokensWithServiceUserID:accessoryIDs:adminID:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_190767D98(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  _IDSGenericCompletionHandler *v5;
  uint64_t v6;
  void *v7;
  id v8;

  if (!objc_msgSend(*(id *)(a1 + 32), "length")
    || !objc_msgSend(*(id *)(a1 + 40), "length")
    || !objc_msgSend(*(id *)(a1 + 48), "length")
    || !objc_msgSend(*(id *)(a1 + 56), "count"))
  {
    v2 = objc_alloc(MEMORY[0x1E0C99D80]);
    v3 = (void *)objc_msgSend(v2, "initWithObjectsAndKeys:", CFSTR("A required Field Is Empty"), *MEMORY[0x1E0CB2D50], 0);
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), 1, v3);
    (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();

  }
  if (*(_QWORD *)(a1 + 80) && *(_QWORD *)(a1 + 64))
  {
    v5 = -[_IDSGenericCompletionHandler initWithHandler:queue:]([_IDSGenericCompletionHandler alloc], "initWithHandler:queue:", *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64));
    v6 = *(_QWORD *)(a1 + 72);
    v7 = *(void **)(v6 + 32);
    *(_QWORD *)(v6 + 32) = v5;

  }
  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "homeKitGetUserAccessTokensWithServiceUserID:userID:userHandle:accessoryRequests:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

}

void sub_190767FFC(_QWORD *a1)
{
  _IDSGenericCompletionHandler *v2;
  uint64_t v3;
  void *v4;
  id v5;

  if (a1[9] && a1[4])
  {
    v2 = -[_IDSGenericCompletionHandler initWithHandler:queue:]([_IDSGenericCompletionHandler alloc], "initWithHandler:queue:", a1[9], a1[4]);
    v3 = a1[5];
    v4 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;

  }
  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "homeKitRefreshUserAccessTokensWithServiceUserID:userID:accessoryRequests:", a1[6], a1[7], a1[8]);

}

void sub_190768164(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "handler");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_190768290(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "handler");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1907683BC(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "handler");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1907684E8(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "handler");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_190768614(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "handler");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, _QWORD, _QWORD))v2 + 2))(v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

uint64_t sub_19076886C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (v3)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, double))(v2 + 16))(v2, -100, 0, -1.0);
  else
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, double))(v2 + 16))(v2, 0, *(unsigned __int8 *)(a1 + 56), *(double *)(a1 + 48));
}

void sub_19076932C(uint64_t a1, int a2, void *a3)
{
  NSObject *v5;
  NSObject *v6;
  uint64_t port;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void **v13;
  uint64_t *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  switch(a2)
  {
    case 4:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Listener cancelled"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v17 = *MEMORY[0x1E0CB2D50];
      v18 = v10;
      v12 = (void *)MEMORY[0x1E0C99D80];
      v13 = &v18;
      v14 = &v17;
LABEL_7:
      objc_msgSend(v12, "dictionaryWithObjects:forKeys:count:", v13, v14, 1);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (void *)objc_msgSend(v11, "initWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), 42, v15);

      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      goto LABEL_8;
    case 3:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Listener failed with error code %d"), nw_error_get_error_code(v5));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v19 = *MEMORY[0x1E0CB2D50];
      v20[0] = v10;
      v12 = (void *)MEMORY[0x1E0C99D80];
      v13 = (void **)v20;
      v14 = &v19;
      goto LABEL_7;
    case 2:
      port = nw_listener_get_port(*(nw_listener_t *)(a1 + 32));
      v8 = *(void **)(a1 + 40);
      v9 = (void *)objc_msgSend(*(id *)(a1 + 48), "copy");
      objc_msgSend(v8, "createDataBlobFrom:port:", v9, port);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
LABEL_8:

      break;
  }

}

void sub_19076950C(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 40);
  v7 = v4;
  if (v6)
    (*(void (**)(void))(v6 + 16))();
  else
    objc_storeStrong((id *)(v5 + 56), a2);

}

void sub_1907695E8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 56);
  if (v3)
  {
    *(_QWORD *)(v2 + 56) = 0;
    v7 = v3;

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v4 = v7;
  }
  else
  {
    v5 = MEMORY[0x19400FE1C](*(_QWORD *)(a1 + 40));
    v6 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;
  }

}

void sub_190769F3C()
{
  NSObject *v0;

  v0 = nw_quic_connection_copy_sec_protocol_options();
  sec_protocol_options_set_verify_block(v0, &unk_1E2C63258, MEMORY[0x1E0C80D38]);

}

uint64_t sub_190769F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, 1);
}

void sub_19076AA68(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  id v19;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v10 = objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_19076AB5C;
  v15[3] = &unk_1E2C60F18;
  v11 = *(id *)(a1 + 40);
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v19 = v11;
  v12 = v9;
  v13 = v8;
  v14 = v7;
  dispatch_async(v10, v15);

}

uint64_t sub_19076AB5C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_19076AD18(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v4 = *(_QWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19076ADB4;
  v6[3] = &unk_1E2C61A88;
  v7 = *(id *)(a1 + 56);
  objc_msgSend(a2, "baaSignerCollaboratorForTopic:withErrorHandler:", v4, v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "baaHeadersBySigningData:serverTimestamp:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

}

void sub_19076ADB4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F183C();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19076AF18(uint64_t a1, const void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  __CFDictionary *v11;
  void *v12;
  __CFDictionary *Mutable;
  void *v14;
  void *v15;
  const __CFString *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[5];
  id v24;
  id v25;
  id v26;
  const void *v27;

  v7 = a3;
  v8 = a4;
  if (a2 && objc_msgSend(v7, "count") == 2)
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D34CB8]), "initWithSHA256Digest:requestBody:serverTimestamp:", 0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v10 = *(void **)(a1 + 48);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = sub_19076B200;
    v23[3] = &unk_1E2C632D0;
    v23[4] = v10;
    v24 = v9;
    v25 = v7;
    v27 = a2;
    v26 = *(id *)(a1 + 56);
    v11 = v9;
    objc_msgSend(v10, "signData:withKey:completion:", v11, a2, v23);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "errorStringForNSError:", v8);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = Mutable;
    if (v12)
      CFDictionarySetValue(Mutable, CFSTR("x-apple-baa-error"), v12);
    objc_msgSend(*(id *)(a1 + 48), "icloudBAAVersion");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stringValue");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      CFDictionarySetValue(v11, CFSTR("x-apple-baa-version"), v15);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_1907F191C();
    }

    if (objc_msgSend(*(id *)(a1 + 48), "isVirtualMachine"))
      v16 = CFSTR("2");
    else
      v16 = CFSTR("1");
    CFDictionarySetValue(v11, CFSTR("x-apple-i-device-type"), v16);
    objc_msgSend(*(id *)(a1 + 48), "isBAASupportedHeaderValue");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
    {
      CFDictionarySetValue(v11, CFSTR("x-apple-baa-supported"), v17);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      sub_1907F189C();
    }

    v18 = objc_alloc(MEMORY[0x1E0D34E40]);
    objc_msgSend(MEMORY[0x1E0D36AF8], "keyTransparencyAccountKeyFetchMetricDeviceID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void *)objc_msgSend(v18, "initWithSuccess:error:deviceID:", 0, v8, v19);

    objc_msgSend(MEMORY[0x1E0D34E30], "loggerWithCategory:", 4000);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "logMetric:", v20);

    objc_msgSend(MEMORY[0x1E0D34CF0], "defaultLogger");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "logMetric:", v20);

    if (a2)
      CFRelease(a2);
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

  }
}

void sub_19076B200(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  IDSBAASignerContext *v13;
  void *v14;
  IDSBAASignerContext *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  const void *v26;
  id v27;

  v27 = a2;
  objc_msgSend(v27, "resultData");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(v27, "timestamp");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {

      v5 = 0;
      v6 = 1;
LABEL_18:

      goto LABEL_19;
    }
  }
  objc_msgSend(v27, "icloudResultData");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(v27, "icloudAltResultData");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {

      if (v8)
      {
LABEL_9:
        v5 = 0;
        v6 = 1;
        goto LABEL_19;
      }
    }
    else if (v8)
    {
      goto LABEL_9;
    }
    objc_msgSend(v27, "error");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v9;
    if (v9)
    {
      v5 = v9;
    }
    else
    {
      objc_msgSend(v27, "icloudAltError");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v10;
      if (v10)
      {
        v12 = v10;
      }
      else
      {
        objc_msgSend(v27, "icloudError");
        v12 = (id)objc_claimAutoreleasedReturnValue();
      }
      v5 = v12;

    }
    v6 = 0;
    goto LABEL_18;
  }

  v5 = 0;
  v6 = 1;
  if (v3)
    goto LABEL_18;
LABEL_19:
  v13 = [IDSBAASignerContext alloc];
  objc_msgSend(v27, "icloudDigest");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[IDSBAASignerContext initWithSigningDigest:](v13, "initWithSigningDigest:", v14);

  v16 = *(void **)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "headersBySigningData:baaSigningResult:baaCert:intermediateRootCert:", v17, v27, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = objc_alloc(MEMORY[0x1E0D34E40]);
  objc_msgSend(MEMORY[0x1E0D36AF8], "keyTransparencyAccountKeyFetchMetricDeviceID");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = (void *)objc_msgSend(v21, "initWithSuccess:error:deviceID:", v6, v5, v22);

  objc_msgSend(MEMORY[0x1E0D34E30], "loggerWithCategory:", 4000);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "logMetric:", v23);

  objc_msgSend(MEMORY[0x1E0D34CF0], "defaultLogger");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "logMetric:", v23);

  v26 = *(const void **)(a1 + 64);
  if (v26)
    CFRelease(v26);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_19076B580(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_19076B614;
  v6[3] = &unk_1E2C61A88;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  objc_msgSend(a2, "baaSignerCollaboratorForTopic:withErrorHandler:", v4, v6);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "purgeBAACertWithCompletion:", *(_QWORD *)(a1 + 40));

}

void sub_19076B614(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F183C();

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(uint64_t, _QWORD))(v5 + 16))(v5, 0);

}

void *sub_19076B89C()
{
  void *result;

  result = (void *)MEMORY[0x19400F258]("DeviceIdentityIssueClientCertificateWithCompletion", CFSTR("DeviceIdentity"));
  off_1EE1E1FE0 = result;
  return result;
}

void sub_19076B8C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412290;
    v9 = v5;
    _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "Completed deletion of BAA cert {error: %@}", (uint8_t *)&v8, 0xCu);
  }

  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t, BOOL))(v7 + 16))(v7, v5 == 0);

}

void *sub_19076B9E8()
{
  void *result;

  result = (void *)MEMORY[0x19400F258]("DeviceIdentityIsSupported", CFSTR("DeviceIdentity"));
  off_1EE1E1F30 = result;
  return result;
}

void sub_19076BD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_19076BD60(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  void **v10;
  void *v11;
  void **v12;
  void *v13;
  void **v14;
  void *v15;
  void **v16;
  void *v17;
  uint64_t v18;
  void **v19;
  void *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  void (*v24)(void *, NSObject *, _QWORD *);
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  _QWORD v36[5];
  id v37;
  __int128 v38;
  uint64_t v39;
  _QWORD v40[4];
  _QWORD v41[3];
  _QWORD v42[3];
  uint8_t buf[4];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v44 = v5;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Starting fetch of device identity for baa signer {validityInMinutes: %@}", buf, 0xCu);
  }

  v34 = v3;
  if (qword_1EE1E1F28 != -1)
    dispatch_once(&qword_1EE1E1F28, &unk_1E2C63360);
  if (!qword_1EE1E1EF0)
  {
    v6 = (void **)MEMORY[0x19400F258]("kMAOptionsBAAKeychainLabel", CFSTR("DeviceIdentity"));
    if (v6)
      v7 = *v6;
    else
      v7 = 0;
    objc_storeStrong((id *)&qword_1EE1E1EF0, v7);
  }
  if (!qword_1EE1E1F20)
  {
    v8 = (void **)MEMORY[0x19400F258]("kMAOptionsBAAValidity", CFSTR("DeviceIdentity"));
    if (v8)
      v9 = *v8;
    else
      v9 = 0;
    objc_storeStrong((id *)&qword_1EE1E1F20, v9);
  }
  if (!qword_1EE1E1F10)
  {
    v10 = (void **)MEMORY[0x19400F258]("kMAOptionsBAAOIDSToInclude", CFSTR("DeviceIdentity"));
    if (v10)
      v11 = *v10;
    else
      v11 = 0;
    objc_storeStrong((id *)&qword_1EE1E1F10, v11);
  }
  if (!qword_1EE1E1F18)
  {
    v12 = (void **)MEMORY[0x19400F258]("kMAOptionsBAAOIDUCRTDeviceIdentifiers", CFSTR("DeviceIdentity"));
    if (v12)
      v13 = *v12;
    else
      v13 = 0;
    objc_storeStrong((id *)&qword_1EE1E1F18, v13);
  }
  if (!qword_1EE1E1F00)
  {
    v14 = (void **)MEMORY[0x19400F258]("kMAOptionsBAAOIDDeviceOSInformation", CFSTR("DeviceIdentity"));
    if (v14)
      v15 = *v14;
    else
      v15 = 0;
    objc_storeStrong((id *)&qword_1EE1E1F00, v15);
  }
  if (!qword_1EE1E1F08)
  {
    v16 = (void **)MEMORY[0x19400F258]("kMAOptionsBAAOIDProductType", CFSTR("DeviceIdentity"));
    if (v16)
      v17 = *v16;
    else
      v17 = 0;
    objc_storeStrong((id *)&qword_1EE1E1F08, v17);
  }
  v18 = qword_1EE1E1EF8;
  if (!qword_1EE1E1EF8)
  {
    v19 = (void **)MEMORY[0x19400F258]("kMAOptionsBAAOIDDeviceIdentifiers", CFSTR("DeviceIdentity"));
    if (v19)
      v20 = *v19;
    else
      v20 = 0;
    objc_storeStrong((id *)&qword_1EE1E1EF8, v20);
    v18 = qword_1EE1E1EF8;
  }
  if (off_1EE1E1EE8
    && qword_1EE1E1EF0
    && qword_1EE1E1F20
    && qword_1EE1E1F10
    && qword_1EE1E1F18
    && qword_1EE1E1F00
    && qword_1EE1E1F08
    && v18)
  {
    v41[0] = qword_1EE1E1EF0;
    v41[1] = qword_1EE1E1F20;
    v21 = *(_QWORD *)(a1 + 32);
    v42[0] = CFSTR("com.apple.IDS");
    v42[1] = v21;
    v41[2] = qword_1EE1E1F10;
    v40[0] = qword_1EE1E1F18;
    v40[1] = qword_1EE1E1F00;
    v40[2] = qword_1EE1E1F08;
    v40[3] = v18;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v40, 4);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v42[2] = v22;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v42, v41, 3);
    v23 = objc_claimAutoreleasedReturnValue();

    v24 = (void (*)(void *, NSObject *, _QWORD *))off_1EE1E1EE8;
    objc_msgSend(*(id *)(a1 + 40), "baaQueue");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = sub_19076C194;
    v36[3] = &unk_1E2C633B0;
    v36[4] = *(_QWORD *)(a1 + 40);
    v38 = *(_OWORD *)(a1 + 48);
    v39 = *(_QWORD *)(a1 + 64);
    v26 = v34;
    v37 = v34;
    v24(v25, v23, v36);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration", v3);
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      sub_1907F19CC(v23, v27, v28, v29, v30, v31, v32, v33);
    v26 = v35;
  }

}

void *sub_19076C168()
{
  void *result;

  result = (void *)MEMORY[0x19400F258]("DeviceIdentityIssueClientCertificateWithCompletion", CFSTR("DeviceIdentity"));
  off_1EE1E1EE8 = result;
  return result;
}

void sub_19076C194(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  const __CFString *v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  __int128 v16;
  _QWORD block[4];
  id v18;
  id v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint8_t buf[4];
  const __CFString *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v10 = CFSTR("YES");
    else
      v10 = CFSTR("NO");
    *(_DWORD *)buf = 138412802;
    v24 = v10;
    v25 = 2048;
    v26 = objc_msgSend(v7, "count");
    v27 = 2112;
    v28 = v8;
    _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "Completed fetch of device identity for baa signer {referenceKey: %@, certificates: %lu, error: %@}", buf, 0x20u);
  }

  objc_msgSend(*(id *)(a1 + 32), "baaQueue");
  v11 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v11);

  objc_msgSend(*(id *)(a1 + 32), "queue");
  v12 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_19076C358;
  block[3] = &unk_1E2C63388;
  v22 = a2;
  v18 = v8;
  v19 = v7;
  v21 = *(_OWORD *)(a1 + 56);
  v16 = *(_OWORD *)(a1 + 40);
  v13 = (id)v16;
  v20 = v16;
  v14 = v7;
  v15 = v8;
  dispatch_async(v12, block);

}

uint64_t sub_19076C358(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  __SecCertificate *v5;
  CFDataRef v6;
  __SecCertificate *v7;
  CFDataRef v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    goto LABEL_2;
  if (!*(_QWORD *)(a1 + 80))
  {
LABEL_7:
    v3 = 0;
    goto LABEL_8;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "count") != 2)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
LABEL_2:
      v16 = *MEMORY[0x1E0CB3388];
      v17[0] = v2;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_8:
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IDSBAASignerErrorDomain"), 4, v3);
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v14 = *(void **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v12;

      return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }
    goto LABEL_7;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = *(_QWORD *)(a1 + 80);
  v4 = objc_alloc(MEMORY[0x1E0C99D20]);
  objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", 0);
  v5 = (__SecCertificate *)objc_claimAutoreleasedReturnValue();
  v6 = SecCertificateCopyData(v5);
  objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", 1);
  v7 = (__SecCertificate *)objc_claimAutoreleasedReturnValue();
  v8 = SecCertificateCopyData(v7);
  v9 = objc_msgSend(v4, "initWithObjects:", v6, v8, 0);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), *(id *)(a1 + 32));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_19076C500(uint64_t a1, int a2)
{
  NSObject *v4;
  const __CFString *v5;
  NSObject *v6;
  id v7;
  __int128 v8;
  _QWORD block[4];
  __int128 v10;
  __int128 v11;
  char v12;
  uint8_t buf[4];
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = CFSTR("NO");
    if (a2)
      v5 = CFSTR("YES");
    *(_DWORD *)buf = 138412290;
    v14 = v5;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Device identity fetch final block called {timedOut: %@}", buf, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "queue");
  v6 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_19076C644;
  block[3] = &unk_1E2C63400;
  v12 = a2;
  v11 = *(_OWORD *)(a1 + 56);
  v8 = *(_OWORD *)(a1 + 40);
  v7 = (id)v8;
  v10 = v8;
  dispatch_async(v6, block);

}

uint64_t sub_19076C644(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (*(_BYTE *)(a1 + 64))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v3 = *(void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;

    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IDSBAASignerErrorDomain"), 1, 0);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19076CCFC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;

  if (qword_1EE1E2008 != -1)
    dispatch_once(&qword_1EE1E2008, &unk_1E2C5F410);
  if (off_1EE1E2000)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v47 = 0;
    v48 = 0;
    off_1EE1E2000(v2, 0, &v48, &v47);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v48;
    v5 = (unint64_t)v47;
    v6 = *(_QWORD *)(a1 + 40);
    v45 = 0;
    v46 = 0;
    off_1EE1E2000(v6, 0, &v46, &v45);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v46;
    v9 = (unint64_t)v45;
    if (!(v5 | v9))
    {
      v19 = 0;
      v10 = 0;
      goto LABEL_12;
    }
    v10 = (void *)v9;
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1907F1A2C();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      sub_1907F19FC(v11, v12, v13, v14, v15, v16, v17, v18);
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v10 = 0;
    v8 = 0;
    v7 = 0;
  }

  v19 = (void *)v5;
LABEL_12:
  objc_msgSend(*(id *)(a1 + 48), "queue");
  v20 = objc_claimAutoreleasedReturnValue();
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = sub_19076D034;
  v28[3] = &unk_1E2C63490;
  v43 = *(id *)(a1 + 128);
  v29 = *(id *)(a1 + 56);
  v30 = *(id *)(a1 + 64);
  v21 = *(id *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 136);
  v31 = v21;
  v44 = v22;
  v32 = *(id *)(a1 + 80);
  v33 = *(id *)(a1 + 88);
  v34 = *(id *)(a1 + 96);
  v35 = *(id *)(a1 + 104);
  v36 = *(id *)(a1 + 112);
  v37 = *(id *)(a1 + 120);
  v38 = v4;
  v39 = v3;
  v40 = v7;
  v41 = v19;
  v42 = v10;
  v23 = v10;
  v24 = v19;
  v25 = v7;
  v26 = v3;
  v27 = v4;
  dispatch_async(v20, v28);

}

void *sub_19076D008()
{
  void *result;

  result = (void *)MEMORY[0x19400F258]("DeviceIdentityCreateHostSignature", CFSTR("DeviceIdentity"));
  off_1EE1E2000 = result;
  return result;
}

void sub_19076D034(_QWORD *a1)
{
  uint64_t v1;
  IDSBAASigningResult *v2;

  v1 = a1[18];
  v2 = -[IDSBAASigningResult initWithResultData:timestamp:error:currentTimestampInMs:icloudDigest:icloudAltDigest:icloudResultData:icloudAltResultData:icloudError:icloudAltError:hostCertChain:hostResultData:hostAltResultData:hostError:hostAltError:]([IDSBAASigningResult alloc], "initWithResultData:timestamp:error:currentTimestampInMs:icloudDigest:icloudAltDigest:icloudResultData:icloudAltResultData:icloudError:icloudAltError:hostCertChain:hostResultData:hostAltResultData:hostError:hostAltError:", a1[4], a1[5], a1[6], a1[19], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17]);
  (*(void (**)(uint64_t, IDSBAASigningResult *))(v1 + 16))(v1, v2);

}

void sub_19076D64C()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", CFSTR("x-apple-baa-version"), CFSTR("x-apple-baa-cert"), CFSTR("x-apple-baa-time"), CFSTR("x-apple-baa-sig-alt"), CFSTR("x-apple-baa-sig"), CFSTR("x-apple-baa-error"), CFSTR("x-apple-baa-host-cert"), CFSTR("x-apple-baa-host-sig-alt"), CFSTR("x-apple-baa-host-sig"), CFSTR("x-apple-baa-host-error"), CFSTR("x-apple-i-device-type"), CFSTR("x-apple-baa-supported"), 0);
  v1 = (void *)qword_1EE1E1ED8;
  qword_1EE1E1ED8 = v0;

}

void sub_19076E4D0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

id sub_19076F3B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (*(_QWORD *)(a1 + 72))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v2 = *(_QWORD *)(a1 + 48);
      if (v2)
        (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, 0);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    if (*(_BYTE *)(a1 + 81))
    {
      v3 = *(_QWORD *)(a1 + 64);
      if (v3)
        (*(void (**)(uint64_t, _QWORD))(v3 + 16))(v3, 0);
    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  v4 = (id)objc_opt_self();
  return (id)objc_opt_self();
}

uint64_t sub_19076F7E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_19077021C(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(a2, "objectForKey:", *MEMORY[0x1E0D35148]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (MEMORY[0x19400F234]())
  {
    IMCanonicalizeFormattedString();
    v3 = objc_claimAutoreleasedReturnValue();

    v2 = (void *)v3;
  }
  return v2;
}

id sub_19077035C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = *MEMORY[0x1E0D35148];
  objc_msgSend(v3, "objectForKey:", *MEMORY[0x1E0D35148]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5
    && (v6 = *(void **)(a1 + 32),
        objc_msgSend(v3, "objectForKey:", v4),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        LOBYTE(v6) = objc_msgSend(v6, "_isInvisibleAlias:", v7),
        v7,
        (v6 & 1) == 0))
  {
    v8 = v3;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t sub_19077046C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_isInvisibleAlias:", a2) ^ 1;
}

id sub_190770560(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v2 = a2;
  v3 = *MEMORY[0x1E0D35148];
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0D35148]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v2, "objectForKey:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D34EA8]), "initWithUnprefixedURI:", v5);
    objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0D35150]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "integerValue");

    objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0D35140]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
      v11 = objc_msgSend(v9, "BOOLValue");
    else
      v11 = 1;
    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D34D78]), "initWithURI:isUserVisible:validationStatus:", v6, v11, v8);

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

uint64_t sub_190771B34(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_internal");
}

void sub_1907722FC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "account:devicesChanged:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_190772458(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "account:nearbyDevicesChanged:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_1907725AC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "account:connectedDevicesChanged:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_1907726EC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "account:devicesChanged:", v3, *(_QWORD *)(a1 + 40));

  }
}

id sub_190772D68(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  void *v4;

  v2 = (objc_class *)MEMORY[0x1E0D34EA8];
  v3 = a2;
  v4 = (void *)objc_msgSend([v2 alloc], "initWithPrefixedURI:", v3);

  return v4;
}

void sub_1907734E4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:registrationStatusInfoChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190773530(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "account:isActiveChanged:", v3, *(unsigned __int8 *)(a1 + 40));

  }
}

void sub_190773790(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:aliasesChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1907737DC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "account:isActiveChanged:", v3, *(unsigned __int8 *)(a1 + 40));

  }
}

void sub_1907739E4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:vettedAliasesChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190773BD4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:profileChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190773DC4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:loginChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_190773FB4(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:displayNameChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1907741FC(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "account:pseudonymsChanged:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

uint64_t sub_1907746F4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_internal");
}

uint64_t sub_1907748CC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_internal");
}

void sub_190774A00(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "refreshRegistrationForAccount:", *(_QWORD *)(a1 + 32));

}

void sub_1907750D4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x1Cu);
}

uint64_t sub_1907750F8()
{
  void *v0;

  return objc_msgSend(v0, "accountType");
}

void sub_190775144()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE20A198);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD6518;
  qword_1ECDD6518 = v0;

}

void sub_190775308(uint64_t a1)
{
  IDSService *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  IDSService *v7;
  _QWORD v8[4];
  IDSService *v9;
  id v10;

  v2 = objc_alloc_init(IDSService);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned __int8 *)(a1 + 56);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1907753CC;
  v8[3] = &unk_1E2C63630;
  v6 = *(id *)(a1 + 48);
  v9 = v2;
  v10 = v6;
  v7 = v2;
  +[_IDSService serviceWithIdentifier:commands:manuallyAckMessages:delegateContext:completion:](_IDSService, "serviceWithIdentifier:commands:manuallyAckMessages:delegateContext:completion:", v3, v4, v5, v7, v8);

}

void sub_1907753CC(uint64_t a1, void *a2, uint64_t a3)
{
  void (*v6)(void);
  id v7;

  v7 = a2;
  if (!v7 || a3)
  {
    v6 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  else
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 8), a2);
    v6 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  v6();

}

uint64_t sub_19077566C(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "addDelegate:queue:", a1[5], a1[6]);
}

uint64_t sub_190775710(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeDelegate:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1907757BC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "performGroupTask:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_190775850(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_setProtobufAction_forProtobufType_isResponse_);
}

uint64_t sub_1907758F0(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_setProtobufAction_forProtobufType_isResponse_);
}

void sub_1907759E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907759F8(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "protobufActionForType:isResponse:", *(unsigned __int16 *)(a1 + 48), 0);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_190775B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190775B24(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "protobufActionForType:isResponse:", *(unsigned __int16 *)(a1 + 48), 1);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_190775CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190775D08(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendProtobuf:fromAccount:toDestinations:priority:options:identifier:error:", a1[5], a1[6], a1[7], a1[10], a1[8], a1[11], a1[12]);
  *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = result;
  return result;
}

void sub_190775EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190775EF8(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendProtobuf:fromAccount:toDestinations:priority:options:identifier:error:", a1[5], 0, a1[6], a1[9], a1[7], a1[10], a1[11]);
  *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_1907760A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907760B8(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendOpportunisticData:options:identifier:error:", a1[5], a1[6], a1[7], a1[9]);
  *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_1907761FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190776214(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "cancelOpportunisticDataWithIdentifier:error:", a1[5], a1[7]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_19077640C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190776424(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendMessage:fromAccount:toDestinations:priority:options:identifier:error:", a1[5], a1[6], a1[7], a1[10], a1[8], a1[11], a1[12]);
  *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = result;
  return result;
}

void sub_1907765E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907765F8(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendMessage:fromAccount:toDestinations:priority:options:identifier:error:", a1[5], 0, a1[6], a1[9], a1[7], a1[10], a1[11]);
  *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_190776754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19077676C(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "cancelMessageWithOptions:identifier:error:", a1[5], a1[7], a1[8]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_1907768DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907768F4(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "cancelMessageWithOptions:destination:identifier:error:", a1[5], a1[6], a1[8], a1[9]);
  *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_190776A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190776A80(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "cancelMessageWithOptions:destinations:identifier:error:", a1[5], a1[6], a1[8], a1[9]);
  *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_190776C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190776C64(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendData:fromAccount:toDestinations:priority:options:identifier:error:", a1[5], a1[6], a1[7], a1[10], a1[8], a1[11], a1[12]);
  *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = result;
  return result;
}

void sub_190776E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190776E38(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendData:fromAccount:toDestinations:priority:options:identifier:error:", a1[5], 0, a1[6], a1[9], a1[7], a1[10], a1[11]);
  *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_190777010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190777028(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendAccessoryData:toAccessoryID:accessToken:options:identifier:error:", a1[5], a1[6], a1[7], a1[8], a1[10], a1[11]);
  *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = result;
  return result;
}

void sub_1907771C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907771DC(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendInvitation:fromAccount:toDestination:options:identifier:error:", a1[5], 0, a1[6], a1[7], a1[9], a1[10]);
  *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_190777378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190777390(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendInvitationUpdate:fromAccount:toDestination:options:identifier:error:", a1[5], 0, a1[6], a1[7], a1[9], a1[10]);
  *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_1907774B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907774CC(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "setWakingPushPriority:error:", a1[6], a1[7]);
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = result;
  return result;
}

void sub_190777644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19077765C(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendData:priority:options:identifier:error:", a1[5], a1[8], a1[6], a1[9], a1[10]);
  *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_19077782C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190777844(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendResourceAtURL:metadata:fromAccount:toDestinations:priority:options:identifier:error:", a1[5], a1[6], 0, a1[7], a1[10], a1[8], a1[11], a1[12]);
  *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = result;
  return result;
}

void sub_1907779A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907779B8(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "getProgressUpdateForIdentifier:error:", a1[5], a1[7]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_190777B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190777B44(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendAheadGroup:priority:options:identifier:completion:", a1[5], a1[8], a1[6], a1[9], &unk_1E2C5FC30);
  *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_190777C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190777C9C(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "reportSpamMessage:", a1[5]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

uint64_t sub_190777D88(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_sendAckForMessageWithContext_);
}

void sub_190777E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190777EA4(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendCertifiedDeliveryReceipt:", a1[5]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_190777FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190777FF8(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "cancelIdentifier:error:", a1[5], a1[7]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_190778178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190778190(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "sendServerMessage:command:fromAccount:", a1[5], a1[6], a1[7]);
  *(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_190778298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907782B0(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "registrationRestrictionReason");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907783D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907783EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "serviceDomain");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190778518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190778530(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "iCloudAccount");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19077865C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190778674(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "internalAccounts");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907787A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907787B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "serviceProperties");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identifier");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907788E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907788F8(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "canSend");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_190778A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190778A5C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "deviceForFromID:", a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190778BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190778BD8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "linkedDeviceForFromID:withRelationship:", a1[5], a1[7]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190778D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190778D20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "firstRoutableInternetDestinationForSelf");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190778E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190778E8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "deviceForUniqueID:", a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190778FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190778FF8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "devicesForBTUUID:", a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19077914C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190779164(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "uriForFromID:", a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_190779240(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_setPreferInfraWiFi_);
}

void sub_1907792D8(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setNeedsLaunchOnNearbyDevicesChanged:", v1);

}

void sub_1907793E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190779400(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_internal");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "needsLaunchOnNearbyDevicesChanged");

}

uint64_t sub_190779500(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_setLinkPreferences_);
}

uint64_t sub_1907795A8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_startOTRTest_);
}

uint64_t sub_190779654(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_setPretendingToBeFull_);
}

void sub_190779738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_190779750(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isPretendingToBeFull");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_190779814(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_testCloudQRConnection);
}

void sub_190779954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19077996C(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "updateSubServices:forDevice:", a1[5], a1[6]);
  *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_190779ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190779AE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "datagramConnectionForSessionDestination:error:", a1[5], a1[7]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190779C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190779C6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "datagramConnectionForSessionDestination:uid:error:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190779DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190779DD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "datagramConnectionForSocketDescriptor:error:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_190779F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190779F54(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "streamConnectionForSessionDestination:error:", a1[5], a1[7]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19077A09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19077A0B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "streamConnectionForSocketDescriptor:error:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19077A31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19077A334(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "datagramChannelForSessionDestination:options:error:", a1[5], a1[6], a1[8]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[7] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19077A480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19077A498(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "datagramChannelForSocketDescriptor:error:", *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_19077A7F4(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "aliasStrings");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "containsObject:", *(_QWORD *)(a1 + 32));

  return v4;
}

id sub_19077A844(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v2 = a2;
  if ((objc_msgSend(v2, "isEqualToIgnoringCase:", *MEMORY[0x1E0D35208]) & 1) != 0)
    v3 = 0;
  else
    v3 = v2;

  return v3;
}

void sub_19077A960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19077A978(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "maxEffectivePayloadSize");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_19077AA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19077AAB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "URIs");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19077ABE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19077ABF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "pseudonymURIMap");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19077AD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19077AD64(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "pseudonymForPseudonymURI:", a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19077AEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19077AED0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "pseudonymsForMaskedURI:", a1[5]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19077B050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19077B068(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1[4] + 8), "pseudonymsForMaskedURI:matchingProperties:", a1[5], a1[6]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[7] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19077B284(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v2 = a1[4];
  v3 = a1[5];
  v4 = *(void **)(v2 + 8);
  v5 = a1[6];
  if (v5)
  {
    objc_msgSend(*(id *)(v2 + 8), "provisionPseudonymWithProperties:requestProperties:completion:", a1[5], v5, a1[7]);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D34E20], "defaultProperties");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "provisionPseudonymWithProperties:requestProperties:completion:", v3, v6, a1[7]);

  }
}

void sub_19077B49C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v2 = a1[4];
  v3 = a1[5];
  v4 = *(void **)(v2 + 8);
  v6 = a1[6];
  v5 = a1[7];
  if (v5)
  {
    objc_msgSend(*(id *)(v2 + 8), "provisionPseudonymForURI:withProperties:requestProperties:completion:", a1[5], a1[6], v5, a1[8]);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D34E20], "defaultProperties");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "provisionPseudonymForURI:withProperties:requestProperties:completion:", v3, v6, v7, a1[8]);

  }
}

void sub_19077B734(double *a1)
{
  uint64_t v2;
  void *v3;
  double v4;
  id v5;

  v2 = *((_QWORD *)a1 + 5);
  v3 = *(void **)(*((_QWORD *)a1 + 4) + 8);
  v4 = a1[7];
  objc_msgSend(MEMORY[0x1E0D34E20], "defaultProperties");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "renewPseudonym:forUpdatedExpiryEpoch:requestProperties:completion:", v2, v5, *((_QWORD *)a1 + 6), v4);

}

void sub_19077B880(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = a1[5];
  v3 = *(void **)(a1[4] + 8);
  objc_msgSend(MEMORY[0x1E0D34E20], "defaultProperties");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "revokePseudonym:requestProperties:completion:", v2, v4, a1[6]);

}

void sub_19077BA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19077BA4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "pseudonymPropertiesWithFeatureID:scopeID:expiryDurationInSeconds:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(double *)(a1 + 64));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_19077BD50(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_signData_withAlgorithm_options_completion_);
}

uint64_t sub_19077BECC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_verifySignedData_matchesExpectedData_withTokenURI_forAlgorithm_options_completion_);
}

uint64_t sub_19077BFF4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_reportAction_ofTempURI_fromURI_withCompletion_);
}

uint64_t sub_19077C0A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "scheduleTransactionLogTask:", *(_QWORD *)(a1 + 40));
}

void IDSAppleCareSignIDSIn(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a1;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (_IDSRunningInDaemon())
    sub_1907F4F58();
  sub_19077C1AC(v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    if (qword_1EE1E2028 != -1)
      dispatch_once(&qword_1EE1E2028, &unk_1E2C5FFB0);
    +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "appleCareSignInUserName:DSID:authToken:requestID:", v15, v9, v10, v13);

  }
}

id sub_19077C1AC(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  IDSDaemonResponseHandler *v9;
  void *v10;
  double v11;
  void *v12;
  _QWORD v14[4];
  id v15;

  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x19400FE1C](v3);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_19077C4B0;
  v14[3] = &unk_1E2C604E8;
  v15 = v3;
  v6 = v5;
  v7 = v4;
  v8 = v3;
  v9 = -[IDSDaemonResponseHandler initWithBlock:queue:]([IDSDaemonResponseHandler alloc], "initWithBlock:queue:", v6, v7);

  sub_19077C52C();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (qword_1EE1E2018 != -1)
    dispatch_once(&qword_1EE1E2018, &unk_1E2C60230);
  if (byte_1EE1E2010)
    v11 = (double)IMGetDomainIntForKey();
  else
    v11 = 60.0;
  objc_msgSend(v10, "scheduleTimeoutWithResponseHandler:timeoutInterval:timeoutBlock:", v9, v14, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void IDSAppleCareSignIDSOut(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a1;
  v3 = a2;
  if (_IDSRunningInDaemon())
    sub_1907F4F80();
  sub_19077C1AC(v6, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    if (qword_1EE1E2028 != -1)
      dispatch_once(&qword_1EE1E2028, &unk_1E2C5FFB0);
    +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "appleCareSignOutUserWithRequestID:", v4);

  }
}

void IDSAppleCareSetDaemonDisconnectedBlock(void *a1, void *a2)
{
  id v3;
  id v4;
  IDSAppleCareDaemonResponseListener *v5;
  id v6;
  IDSAppleCareDaemonResponseListener *v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  v3 = a1;
  v4 = a2;
  if (_IDSRunningInDaemon())
    sub_1907F4FA8();
  v5 = [IDSAppleCareDaemonResponseListener alloc];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_19077C4A4;
  v10[3] = &unk_1E2C604E8;
  v11 = v3;
  v6 = v3;
  v7 = -[IDSAppleCareDaemonResponseListener initWithDisconnectedBlockAndNoTimeout:](v5, "initWithDisconnectedBlockAndNoTimeout:", v10);
  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "listener");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addHandler:", v7);

}

uint64_t sub_19077C4A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19077C4B0(uint64_t a1)
{
  id v2;
  id v3;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v3 = (id)objc_msgSend(v2, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D34730], 2, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
}

id sub_19077C52C()
{
  if (qword_1EE1E1E70 != -1)
    dispatch_once(&qword_1EE1E1E70, &unk_1E2C5FC50);
  return (id)qword_1EE1E1E98;
}

void sub_19077C56C()
{
  IDSDaemonRequestTimer *v0;
  void *v1;

  v0 = objc_alloc_init(IDSDaemonRequestTimer);
  v1 = (void *)qword_1EE1E1E98;
  qword_1EE1E1E98 = (uint64_t)v0;

}

uint64_t sub_19077C594()
{
  uint64_t result;

  result = IMGetDomainBoolForKey();
  byte_1EE1E2010 = result;
  return result;
}

void sub_19077C5C0()
{
  IDSAppleCareDaemonResponseListener *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v0 = [IDSAppleCareDaemonResponseListener alloc];
  sub_19077C52C();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = -[IDSAppleCareDaemonResponseListener initWithRequestTimer:](v0, "initWithRequestTimer:", v1);
  v3 = (void *)qword_1EE1E2020;
  qword_1EE1E2020 = v2;

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "listener");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addHandler:", qword_1EE1E2020);

}

void IDSiCloudSignIn(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  const __CFString *v18;
  void *v19;
  int v20;
  id v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const __CFString *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  if (_IDSRunningInDaemon())
    sub_1907F4FD0();
  objc_msgSend(MEMORY[0x1E0D36AA8], "iCloud");
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = CFSTR("YES");
    v20 = 138413570;
    v21 = v11;
    if (!v13)
      v18 = CFSTR("NO");
    v22 = 2112;
    v23 = v12;
    v24 = 2112;
    v25 = v18;
    v26 = 2112;
    v27 = v14;
    v28 = 2112;
    v29 = v15;
    v30 = 2112;
    v31 = v16;
    _os_log_impl(&dword_1906E0000, v17, OS_LOG_TYPE_DEFAULT, "iCloud sign in with userName %@ authToken %@ password %@ accountInfo %@ status %@ and handles %@", (uint8_t *)&v20, 0x3Eu);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "iCloudSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:", v11, v12, v13, v14, v15, v16);

}

void IDSiCloudSignOut()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  if (_IDSRunningInDaemon())
    sub_1907F4FF8();
  objc_msgSend(MEMORY[0x1E0D36AA8], "iCloud");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "iCloud sign out", v2, 2u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "iCloudSignOut");

}

void IDSiCloudUpdate(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  id v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (_IDSRunningInDaemon())
    sub_1907F5020();
  objc_msgSend(MEMORY[0x1E0D36AA8], "iCloud");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412546;
    v8 = v3;
    v9 = 2112;
    v10 = v4;
    _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "iCloud update for userName %@ accountInfo %@", (uint8_t *)&v7, 0x16u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "iCloudUpdateForUserName:accountInfo:", v3, v4);

}

void IDSiCloudModify(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_IDSRunningInDaemon())
    sub_1907F5048();
  objc_msgSend(MEMORY[0x1E0D36AA8], "iCloud");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 138412290;
    v5 = v1;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "iCloud modify for userName %@", (uint8_t *)&v4, 0xCu);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "iCloudModifyForUserName:", v1);

}

void IDSiTunesSignIn(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  const __CFString *v18;
  void *v19;
  int v20;
  id v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const __CFString *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  if (_IDSRunningInDaemon())
    sub_1907F5070();
  objc_msgSend(MEMORY[0x1E0D36AA8], "iCloud");
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = CFSTR("YES");
    v20 = 138413570;
    v21 = v11;
    if (!v13)
      v18 = CFSTR("NO");
    v22 = 2112;
    v23 = v12;
    v24 = 2112;
    v25 = v18;
    v26 = 2112;
    v27 = v14;
    v28 = 2112;
    v29 = v15;
    v30 = 2112;
    v31 = v16;
    _os_log_impl(&dword_1906E0000, v17, OS_LOG_TYPE_DEFAULT, "iTunes sign in with userName %@ authToken %@ password %@ accountInfo %@ status %@ and handles %@", (uint8_t *)&v20, 0x3Eu);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "iTunesSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:", v11, v12, v13, v14, v15, v16);

}

void IDSiTunesSignOut()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  if (_IDSRunningInDaemon())
    sub_1907F5098();
  objc_msgSend(MEMORY[0x1E0D36AA8], "iCloud");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "iTunes sign out", v2, 2u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "iTunesSignOut");

}

void IDSGameCenterSignIn(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  const __CFString *v18;
  void *v19;
  int v20;
  id v21;
  __int16 v22;
  id v23;
  __int16 v24;
  const __CFString *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  if (_IDSRunningInDaemon())
    sub_1907F50C0();
  objc_msgSend(MEMORY[0x1E0D36AA8], "iCloud");
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = CFSTR("YES");
    v20 = 138413570;
    v21 = v11;
    if (!v13)
      v18 = CFSTR("NO");
    v22 = 2112;
    v23 = v12;
    v24 = 2112;
    v25 = v18;
    v26 = 2112;
    v27 = v14;
    v28 = 2112;
    v29 = v15;
    v30 = 2112;
    v31 = v16;
    _os_log_impl(&dword_1906E0000, v17, OS_LOG_TYPE_DEFAULT, "GameCenter sign in with userName %@ authToken %@ password %@ accountInfo %@ status %@ and handles %@", (uint8_t *)&v20, 0x3Eu);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "gameCenterSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:", v11, v12, v13, v14, v15, v16);

}

void IDSGameCenterSignOut()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  if (_IDSRunningInDaemon())
    sub_1907F50E8();
  objc_msgSend(MEMORY[0x1E0D36AA8], "iCloud");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1906E0000, v0, OS_LOG_TYPE_DEFAULT, "GameCenter sign out", v2, 2u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "gameCenterSignOut");

}

void IDSGameCenterModify(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_IDSRunningInDaemon())
    sub_1907F5110();
  objc_msgSend(MEMORY[0x1E0D36AA8], "iCloud");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 138412290;
    v5 = v1;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "GameCenter modify for userName %@", (uint8_t *)&v4, 0xCu);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "gameCenterModifyForUserName:", v1);

}

void IDSUpdateUser(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  int v7;
  id v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "iCloud");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412546;
    v8 = v3;
    v9 = 2112;
    v10 = v4;
    _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "IDS update user { oldUserName: %@, newUserName: %@ }", (uint8_t *)&v7, 0x16u);
  }

  +[IDSDaemonController sharedInstance](IDSDaemonController, "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "updateUserWithOldUserName:newUserName:", v3, v4);

}

void sub_19077D3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19077D3BC(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "count");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_19077D510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19077D528(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  IDSDaemonRequestContext *v12;

  objc_msgSend(*(id *)(a1 + 32), "_criticalFindRequestContextWithResponseHandler:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

    v6 = objc_alloc(MEMORY[0x1E0D36AE0]);
    v7 = *(double *)(a1 + 64);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    v9 = *(_QWORD *)(a1 + 32);
    dispatch_get_global_queue(0, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend(v6, "initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:", v8, 1, v9, sel__handleSystemTimerFired_, v8, v10, v7);

    v12 = -[IDSDaemonRequestContext initWithResponseHandler:timeoutBlock:systemTimer:]([IDSDaemonRequestContext alloc], "initWithResponseHandler:timeoutBlock:systemTimer:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v11);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKeyedSubscript:", v12, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

    v2 = 0;
  }

}

uint64_t sub_19077D804(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__criticalInvokeTimeoutBlockForRequestID_);
}

uint64_t sub_19077D904(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19077D9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19077D9FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 32), "_criticalInvalidateTimeoutAndReturnHandlerForRequestID:", *(_QWORD *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19077DB54(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "allKeys");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 32), "_criticalInvalidateTimeoutAndReturnHandlerForRequestID:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v6));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        if (v7)
          objc_msgSend(*(id *)(a1 + 40), "addObject:", v7);

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "count"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInMethod:object:file:lineNumber:description:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), CFSTR("IDSDaemonRequestTimer.m"), 205, CFSTR("The request context map should be empty after canceling all countdowns."));

  }
}

void sub_19077E29C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  objc_msgSend(v4, "_internal");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setDelegateCapabilities:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 88));

  objc_msgSend(v4, "_internal");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = *(_QWORD *)(a1 + 32);
  +[IDSInternalQueueController sharedInstance](IDSInternalQueueController, "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "queue");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_19077E38C;
  v10[3] = &unk_1E2C60550;
  v11 = *(id *)(a1 + 40);
  objc_msgSend(v6, "addDelegate:queue:completion:", v7, v9, v10);

}

void sub_19077E38C(uint64_t a1)
{
  id v2;

  +[_IDSXPCCheckinManager sharedInstance](_IDSXPCCheckinManager, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "noteFinishedTransactionForService:", *(_QWORD *)(a1 + 32));

}

id sub_19077EA40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (*(_QWORD *)(a1 + 72))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v2 = *(_QWORD *)(a1 + 48);
      if (v2)
        (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, 0);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    if (*(_BYTE *)(a1 + 81))
    {
      v3 = *(_QWORD *)(a1 + 64);
      if (v3)
        (*(void (**)(uint64_t, _QWORD))(v3 + 16))(v3, 0);
    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  v4 = (id)objc_opt_self();
  return (id)objc_opt_self();
}

void sub_19077EC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_19077EC68(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "serviceAllowedTrafficClassifiersDidReset:", v3);

  }
}

void sub_19077EFBC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:token:time:error:", v3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(double *)(a1 + 56));

  }
}

void sub_19077F1EC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:didCancelMessageWithSuccess:error:identifier:", v3, *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_19077FAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;

  _Block_object_dispose(&a72, 8);
  _Block_object_dispose(&STACK[0x228], 8);
  _Block_object_dispose(&STACK[0x2E0], 8);
  _Block_object_dispose(&STACK[0x310], 8);
  _Block_object_dispose((const void *)(v72 - 192), 8);
  _Block_object_dispose((const void *)(v72 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_19077FB58(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t v19[128];
  uint8_t buf[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "lock");
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "ACKTracker");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v21 = v5;
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "%@ Update cache with active device", buf, 0xCu);
    }

    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    objc_msgSend(*(id *)(a1 + 40), "internalAccounts", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v16;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v16 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v10);
          objc_msgSend(*(id *)(a1 + 48), "daemonListener");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "uniqueID");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "switchActivePairedDevice:forAccount:", v3, v13);

          objc_msgSend(v11, "_reloadCachedDevices");
          ++v10;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v8);
    }

    objc_msgSend(*(id *)(a1 + 48), "daemonListener");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "switchActivePairedDevice:forService:", v3, *(_QWORD *)(a1 + 56));

    objc_msgSend(*(id *)(a1 + 48), "_reloadCachedLinkedDevices");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "unlock");

}

void sub_19077FD64(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  id v5;
  int8x16_t v6;
  _QWORD v7[4];
  int8x16_t v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "ACKTracker");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v11 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "%@ Pre didSwitch call back block", buf, 0xCu);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    +[IDSInternalQueueController sharedInstance](IDSInternalQueueController, "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_19077FEC8;
    v7[3] = &unk_1E2C60780;
    v9 = *(_QWORD *)(a1 + 72);
    v6 = *(int8x16_t *)(a1 + 40);
    v5 = (id)v6.i64[0];
    v8 = vextq_s8(v6, v6, 8uLL);
    objc_msgSend(v4, "performBlock:waitUntilDone:", v7, 1);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  }
}

void sub_19077FEC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(a1 + 32), "_activeDeviceForUniqueID:", *(_QWORD *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_19077FF04(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  id v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "awaitAcknowledgementFromServiceDelegate:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_acknowledgementBlockWithDelegateIdentifier:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D36AA8], "ACKTracker");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    v10 = 138413058;
    v11 = v8;
    v12 = 2048;
    v13 = v3;
    v14 = 2112;
    v15 = v9;
    v16 = 2112;
    v17 = v4;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "%@ Notifying delegate %p of active device switch to %@ (delegateIdentifier %@)", (uint8_t *)&v10, 0x2Au);
  }

  objc_msgSend(v3, "service:didSwitchActivePairedDevice:acknowledgementBlock:", *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v6);
}

void sub_190780054(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "ACKTracker");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "%@ Pre devicesChanged call back block", (uint8_t *)&v7, 0xCu);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    objc_msgSend(*(id *)(a1 + 48), "devices");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  }
}

void sub_190780150(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "ACKTracker");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[4];
    v6 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
    v7 = 138412802;
    v8 = v5;
    v9 = 2048;
    v10 = v3;
    v11 = 2112;
    v12 = v6;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "%@ Notifying delegate %p of devices changing (devices %@)", (uint8_t *)&v7, 0x20u);
  }

  objc_msgSend(v3, "service:devicesChanged:", a1[5], *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
}

void sub_190780248(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "ACKTracker");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "%@ Pre linkedDevicesChanged call back block", (uint8_t *)&v7, 0xCu);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    objc_msgSend(*(id *)(a1 + 48), "linkedDevicesWithRelationship:", 2);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
  }
}

void sub_190780348(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "ACKTracker");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a1[4];
    v6 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
    v7 = 138412802;
    v8 = v5;
    v9 = 2048;
    v10 = v3;
    v11 = 2112;
    v12 = v6;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "%@ Notifying delegate %p of linked devices changing (devices %@)", (uint8_t *)&v7, 0x20u);
  }

  objc_msgSend(v3, "service:linkedDevicesChanged:", a1[5], *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
}

void sub_190780440(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "ACKTracker");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[4];
    v10 = 138412290;
    v11 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "%@ Group notify", (uint8_t *)&v10, 0xCu);
  }

  (*(void (**)(void))(a1[6] + 16))();
  v4 = *(_QWORD *)(a1[7] + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

  v6 = *(_QWORD *)(a1[8] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0;

  v8 = *(_QWORD *)(a1[9] + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = 0;

}

void sub_1907807CC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  uint8_t v5[16];

  objc_msgSend(*(id *)(a1 + 32), "object");
  v2 = objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v2, "_stopAwaitingQuickSwitchAcknowledgementFromDelegateWithIdentifier:", *(_QWORD *)(a1 + 40));

  objc_msgSend(*(id *)(a1 + 32), "object");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = objc_msgSend(v3, "_isDroppingMessages");

  if ((v2 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D36AA8], "watchPairing");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Stopped suspending traffic to the daemon.", v5, 2u);
    }

  }
}

void sub_190780960(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:linkedDevicesChanged:", v3, *(_QWORD *)(a1 + 40));

  }
}

uint64_t sub_190780BB4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_internal");
}

uint64_t sub_190780DA8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_internal");
}

uint64_t sub_190780F9C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_internal");
}

uint64_t sub_190781190(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_internal");
}

void sub_190781250(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  const __CFString *v6;
  NSObject *v7;
  int v8;
  id v9;
  __int16 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134217984;
    v9 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for registrationRestrictionReason if it responds.", (uint8_t *)&v8, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:registrationRestrictionReasonChanged:", v5, *(_QWORD *)(a1 + 40));

    v6 = CFSTR("YES");
  }
  else
  {
    v6 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134218242;
    v9 = v3;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for registrationRestrictionReason - doesRespondToSelector? %@", (uint8_t *)&v8, 0x16u);
  }

}

void sub_1907813BC(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  id v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v5, "_internal");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 138412546;
    v9 = v4;
    v10 = 2112;
    v11 = v7;
    _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "   %@ => %@", (uint8_t *)&v8, 0x16u);

  }
}

void sub_190781D34(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = 138412546;
    v8 = v5;
    v9 = 2048;
    v10 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling active accounts changed %@ with delegate %p", (uint8_t *)&v7, 0x16u);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "object");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:activeAccountsChanged:", v6, *(_QWORD *)(a1 + 32));

  }
}

uint64_t sub_190781E3C(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  const __CFString *v9;
  const __CFString *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t buf[4];
  const __CFString *v17;
  __int16 v18;
  const __CFString *v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v1 = a1;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v13 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if ((objc_msgSend(v6, "isTransientAllowlistedAccount", (_QWORD)v12) & 1) != 0
          || objc_msgSend(v6, "isFirstGDRAllowlistedAccount"))
        {
          objc_msgSend(MEMORY[0x1E0D36AA8], "IDSService");
          v8 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            if (objc_msgSend(v6, "isTransientAllowlistedAccount"))
              v9 = CFSTR("YES");
            else
              v9 = CFSTR("NO");
            if (objc_msgSend(v6, "isFirstGDRAllowlistedAccount"))
              v10 = CFSTR("YES");
            else
              v10 = CFSTR("NO");
            *(_DWORD *)buf = 138412546;
            v17 = v9;
            v18 = 2112;
            v19 = v10;
            _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "*** Account wants to drop devicesChanged callback {account.isTransientAllowlistedAccount: %@, account.isFirstGDRAllowlistedAccount: %@}", buf, 0x16u);
          }

          v7 = 1;
          goto LABEL_21;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
      v7 = 0;
      if (v3)
        continue;
      break;
    }
  }
  else
  {
    v7 = 0;
  }
LABEL_21:

  return v7;
}

void sub_190782698(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  NSObject *v11;
  int v12;
  id v13;
  __int16 v14;
  const __CFString *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 134217984;
    v13 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingOpportunisticData if it responds.", (uint8_t *)&v12, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    objc_msgSend(*(id *)(a1 + 64), "prefixedURI");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:incomingOpportunisticData:withIdentifier:fromID:context:", v5, v6, v7, v8, v9, *(_QWORD *)(a1 + 72));

    v10 = CFSTR("YES");
  }
  else
  {
    v10 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 134218242;
    v13 = v3;
    v14 = 2112;
    v15 = v10;
    _os_log_impl(&dword_1906E0000, v11, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingOpportunisticData - doesRespondToSelector? %@", (uint8_t *)&v12, 0x16u);
  }

}

void sub_19078283C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "connectionType");
    objc_msgSend(*(id *)(a1 + 40), "daemonController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 64), "_internal");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "account");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_internal");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "uniqueID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:", v4, v5, v9, v2);

  }
  if (*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 48))
  {
    objc_msgSend(*(id *)(a1 + 40), "daemonController");
    v17 = (id)objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 72);
    objc_msgSend(*(id *)(a1 + 64), "_internal");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "account");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "_internal");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "uniqueID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "priority");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v11, v10, v15, 0, 0, v16, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));

  }
}

void sub_190782FD4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134217984;
    v12 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingData if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:incomingData:fromID:context:", v5, v6, v7, v8, *(_QWORD *)(a1 + 64));

    v9 = CFSTR("YES");
  }
  else
  {
    v9 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134218242;
    v12 = v3;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingData - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }

}

void sub_190783174(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  +[IDSTransportLog IDSService](IDSTransportLog, "IDSService");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "outgoingResponseIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v23 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Sending app-level ack dispatch called for message %@", buf, 0xCu);

  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (*(_BYTE *)(a1 + 97))
    {
      objc_msgSend(*(id *)(a1 + 40), "_internal");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "sendAppAckForDirectMessage:", *(_QWORD *)(a1 + 48));
    }
    else
    {
      v5 = objc_msgSend(*(id *)(a1 + 32), "connectionType");
      objc_msgSend(*(id *)(a1 + 56), "daemonController");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(_QWORD *)(a1 + 48);
      objc_msgSend(*(id *)(a1 + 64), "prefixedURI");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "_internal");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "account");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "_internal");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "uniqueID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:", v6, v7, v11, v5);

    }
  }
  if (!*(_BYTE *)(a1 + 97) && (*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 80)))
  {
    objc_msgSend(*(id *)(a1 + 56), "daemonController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = *(_QWORD *)(a1 + 48);
    v21 = *(_QWORD *)(a1 + 72);
    objc_msgSend(*(id *)(a1 + 40), "_internal");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "account");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "_internal");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "uniqueID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(a1 + 80);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 88), "length"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "priority");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v21, v20, v16, v17, v18, v19, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));

  }
}

void sub_1907839B0(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = sub_190783A1C;
  v2[3] = &unk_1E2C63BF0;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "performGroupTask:", v2);

}

void sub_190783A1C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_190783AAC;
  v6[3] = &unk_1E2C62768;
  v7 = v4;
  v8 = v3;
  v5 = v3;
  objc_msgSend(v5, "_groupFromPublicDataRepresentation:completion:", v7, v6);

}

void sub_190783AAC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  id v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    +[IDSLogging _IDSService](IDSLogging, "_IDSService");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 138412290;
      v13 = v6;
      _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Error converting Group Data to ENGroup %@", (uint8_t *)&v12, 0xCu);
    }

  }
  else if (v5)
  {
    objc_msgSend(MEMORY[0x1E0D34D40], "groupCrypto");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v5, "groupID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138543362;
      v13 = v9;
      _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "Received sentAhead group {groupID: %{public}@}", (uint8_t *)&v12, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 40), "cacheIncomingGroup:completion:", v5, &unk_1E2C63BC8);
  }
  else
  {
    +[IDSLogging _IDSService](IDSLogging, "_IDSService");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v12 = 138412546;
      v13 = 0;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "No error returned however unable to create group from data (timeout?) %@, Original Data: %@", (uint8_t *)&v12, 0x16u);
    }

  }
}

void sub_190783C78(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 138412290;
    v5 = v2;
    _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "Group Share Persisted %@", (uint8_t *)&v4, 0xCu);
  }

}

void sub_190783D28(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  +[IDSTransportLog IDSService](IDSTransportLog, "IDSService");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*(id *)(a1 + 32), "outgoingResponseIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v23 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Sending app-level ack dispatch called for message %@", buf, 0xCu);

  }
  if (*(_BYTE *)(a1 + 96))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "connectionType");
    objc_msgSend(*(id *)(a1 + 40), "daemonController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 64), "_internal");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "account");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_internal");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uniqueID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:", v6, v7, v11, v4);

  }
  if (*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 80))
  {
    objc_msgSend(*(id *)(a1 + 40), "daemonController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = *(_QWORD *)(a1 + 72);
    v21 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 64), "_internal");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "account");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "_internal");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "uniqueID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(a1 + 80);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 88), "length"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "priority");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v20, v21, v16, v17, v18, v19, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));

  }
}

void sub_1907843B4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134217984;
    v12 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingAccessoryData if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:incomingAccessoryData:fromAccessoryID:context:", v5, v6, v7, v8, *(_QWORD *)(a1 + 64));

    v9 = CFSTR("YES");
  }
  else
  {
    v9 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134218242;
    v12 = v3;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingAccessoryData - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }

}

void sub_190784554(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "connectionType");
    objc_msgSend(*(id *)(a1 + 40), "daemonController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 64), "_internal");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "account");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_internal");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "uniqueID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:", v4, v5, v9, v2);

  }
  if (*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 80))
  {
    objc_msgSend(*(id *)(a1 + 40), "daemonController");
    v10 = objc_claimAutoreleasedReturnValue();
    v19 = *(_QWORD *)(a1 + 48);
    v20 = (id)v10;
    v11 = *(_QWORD *)(a1 + 72);
    objc_msgSend(*(id *)(a1 + 64), "_internal");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "account");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "_internal");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "uniqueID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)(a1 + 80);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 88), "length"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "priority");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v11, v19, v15, v16, v17, v18, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));

  }
}

void sub_190784B5C(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  const __CFString *v6;
  NSObject *v7;
  int v8;
  id v9;
  __int16 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134217984;
    v9 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingAccessoryReportMessage if it responds.", (uint8_t *)&v8, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:incomingAccessoryReportMessage:controllerID:accessoryID:context:", v5, a1[5], a1[6], a1[7], a1[8], a1[9]);

    v6 = CFSTR("YES");
  }
  else
  {
    v6 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134218242;
    v9 = v3;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingAccessoryReportMessage - doesRespondToSelector? %@", (uint8_t *)&v8, 0x16u);
  }

}

void sub_190784CD0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;

  if (*(_BYTE *)(a1 + 88))
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "connectionType");
    objc_msgSend(*(id *)(a1 + 40), "daemonController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    objc_msgSend(*(id *)(a1 + 64), "_internal");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "account");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_internal");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "uniqueID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:", v4, v5, v9, v2);

  }
  if (*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 80))
  {
    objc_msgSend(*(id *)(a1 + 40), "daemonController");
    v18 = (id)objc_claimAutoreleasedReturnValue();
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 72);
    objc_msgSend(*(id *)(a1 + 64), "_internal");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "account");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "_internal");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "uniqueID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)(a1 + 80);
    objc_msgSend(*(id *)(a1 + 32), "priority");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v11, v10, v15, v16, 0, v17, objc_msgSend(*(id *)(a1 + 32), "broadcastID"), objc_msgSend(*(id *)(a1 + 32), "connectionType"));

  }
}

id sub_190785304(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  NSObject *v7;

  v4 = a3;
  objc_msgSend(a2, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v6 = v5;
  }
  else
  {
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        sub_1907F5FD8();

    }
    v6 = 0;
  }

  return v6;
}

void sub_1907853AC(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  const __CFString *v6;
  NSObject *v7;
  int v8;
  id v9;
  __int16 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134217984;
    v9 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingInvitation if it responds.", (uint8_t *)&v8, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:incomingInvitation:withContext:", v5, a1[5], a1[6], a1[7]);

    v6 = CFSTR("YES");
  }
  else
  {
    v6 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134218242;
    v9 = v3;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingInvitation - doesRespondToSelector? %@", (uint8_t *)&v8, 0x16u);
  }

}

void sub_1907859C4(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  const __CFString *v6;
  NSObject *v7;
  int v8;
  id v9;
  __int16 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134217984;
    v9 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingInvitationUpdate if it responds.", (uint8_t *)&v8, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:incomingInvitationUpdate:withContext:", v5, a1[5], a1[6], a1[7]);

    v6 = CFSTR("YES");
  }
  else
  {
    v6 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134218242;
    v9 = v3;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingInvitationUpdate - doesRespondToSelector? %@", (uint8_t *)&v8, 0x16u);
  }

}

void sub_1907865A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 216));
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_190786630(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  dispatch_get_global_queue(9, 0);
  v4 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1907866E4;
  v7[3] = &unk_1E2C62368;
  v8 = *(id *)(a1 + 32);
  v10 = a2;
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v9 = v5;
  v11 = v6;
  dispatch_async(v4, v7);

}

void sub_1907866E4(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  int v4;
  id v5;
  NSObject *v6;
  const __CFString *v7;
  uint64_t v8;
  id v9;
  uint8_t buf[4];
  const __CFString *v11;
  __int16 v12;
  id v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = a1[4];
  v9 = 0;
  v4 = objc_msgSend(v2, "removeItemAtURL:error:", v3, &v9);
  v5 = v9;

  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("NO");
    v8 = a1[6];
    *(_DWORD *)buf = 138412802;
    if (v4)
      v7 = CFSTR("YES");
    v11 = v7;
    v12 = 2112;
    v13 = v5;
    v14 = 1024;
    v15 = v8;
    _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "Remove file success: %@, error: %@ (accessed %d)", buf, 0x1Cu);
  }

  if (a1[5])
    sandbox_extension_release();

}

void sub_190786814(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134217984;
    v12 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingResource if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:incomingResourceAtURL:fromID:context:", v5, v6, v7, v8, *(_QWORD *)(a1 + 64));

    v9 = CFSTR("YES");
  }
  else
  {
    v9 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134218242;
    v12 = v3;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingResource - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }

  objc_msgSend(*(id *)(a1 + 72), "incrementAccessCount");
}

void sub_1907869BC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  NSObject *v11;
  int v12;
  id v13;
  __int16 v14;
  const __CFString *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 134217984;
    v13 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingResource with metadata if it responds.", (uint8_t *)&v12, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    objc_msgSend(*(id *)(a1 + 64), "prefixedURI");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:incomingResourceAtURL:metadata:fromID:context:", v5, v6, v7, v8, v9, *(_QWORD *)(a1 + 72));

    v10 = CFSTR("YES");
  }
  else
  {
    v10 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 134218242;
    v13 = v3;
    v14 = 2112;
    v15 = v10;
    _os_log_impl(&dword_1906E0000, v11, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingResource with metadata - doesRespondToSelector? %@", (uint8_t *)&v12, 0x16u);
  }

  objc_msgSend(*(id *)(a1 + 80), "incrementAccessCount");
}

void sub_190786B68(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134217984;
    v12 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingMessage if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:incomingMessage:fromID:", v5, v6, v7, v8);

    v9 = CFSTR("YES");
  }
  else
  {
    v9 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134218242;
    v12 = v3;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingMessage - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }

}

void sub_190786CFC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134217984;
    v12 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingMessage with context if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:incomingMessage:fromID:context:", v5, v6, v7, v8, *(_QWORD *)(a1 + 64));

    v9 = CFSTR("YES");
  }
  else
  {
    v9 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134218242;
    v12 = v3;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingMessage with context - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }

}

void sub_190786E9C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  os_activity_scope_state_s state;
  NSObject *v20;

  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  v20 = _os_activity_create(&dword_1906E0000, "Service finished calling out", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v20, &state);
  if (*(_BYTE *)(a1 + 88))
  {
    if (*(_BYTE *)(a1 + 89))
    {
      objc_msgSend(*(id *)(a1 + 32), "_internal");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "sendAppAckForDirectMessage:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      v3 = objc_msgSend(*(id *)(a1 + 48), "connectionType");
      objc_msgSend(*(id *)(a1 + 56), "daemonController");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 64), "prefixedURI");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "_internal");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "account");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "_internal");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "uniqueID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:", v4, v5, v9, v3);

    }
  }
  if (!*(_BYTE *)(a1 + 89) && (*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 80)))
  {
    objc_msgSend(*(id *)(a1 + 56), "daemonController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = *(_QWORD *)(a1 + 72);
    v11 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "_internal");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "account");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "_internal");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "uniqueID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)(a1 + 80);
    objc_msgSend(*(id *)(a1 + 48), "priority");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v18, v11, v15, v16, 0, v17, objc_msgSend(*(id *)(a1 + 48), "broadcastID"), objc_msgSend(*(id *)(a1 + 48), "connectionType"));

  }
  os_activity_scope_leave(&state);
  cut_arc_os_release();

}

void sub_1907870B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_190787928(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_190787980(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint8_t v17[16];
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE buf[12];
  __int16 v23;
  void *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    +[IDSTransportLog IDSService](IDSTransportLog, "IDSService");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      NSStringFromSelector(*(SEL *)(a1 + 80));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v3;
      v23 = 2112;
      v24 = v5;
      v25 = 2048;
      v26 = v6;
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, " => Delgate %p responds to: %@, passing along protobuf: %p", buf, 0x20u);

    }
    objc_msgSend(v3, "methodSignatureForSelector:", *(_QWORD *)(a1 + 80));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DB8], "invocationWithMethodSignature:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setSelector:", *(_QWORD *)(a1 + 80));
    objc_msgSend(v8, "setTarget:", v3);
    v9 = (id)objc_msgSend(*(id *)(a1 + 40), "prefixedURI");
    v10 = *(_QWORD *)(a1 + 56);
    v21 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)buf = v9;
    v20 = *(_QWORD *)(a1 + 32);
    v11 = (id)objc_msgSend(*(id *)(v10 + 40), "object");
    v18 = *(_QWORD *)(a1 + 64);
    v19 = v11;
    objc_msgSend(v8, "setArgument:atIndex:", &v20, 2);
    objc_msgSend(v8, "setArgument:atIndex:", &v19, 3);
    objc_msgSend(v8, "setArgument:atIndex:", &v21, 4);
    objc_msgSend(v8, "setArgument:atIndex:", buf, 5);
    objc_msgSend(v8, "setArgument:atIndex:", &v18, 6);
    objc_msgSend(v8, "invokeWithTarget:", v3);
    +[IDSTransportLog IDSService](IDSTransportLog, "IDSService");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1906E0000, v12, OS_LOG_TYPE_DEFAULT, "   * Done handling", v17, 2u);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    +[IDSTransportLog IDSService](IDSTransportLog, "IDSService");
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      NSStringFromSelector(*(SEL *)(a1 + 88));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v3;
      v23 = 2112;
      v24 = v14;
      v25 = 2048;
      v26 = v15;
      _os_log_impl(&dword_1906E0000, v13, OS_LOG_TYPE_DEFAULT, " => Delgate %p responds to: %@, passing along protobuf: %p", buf, 0x20u);

    }
    objc_msgSend(v3, "performSelector:withObject:", *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 32));
    +[IDSTransportLog IDSService](IDSTransportLog, "IDSService");
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906E0000, v16, OS_LOG_TYPE_DEFAULT, "   * Done handling", buf, 2u);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
  }

}

void sub_190787CB8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;
  int v12;
  id v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    +[IDSTransportLog IDSService](IDSTransportLog, "IDSService");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v12 = 134218240;
      v13 = v3;
      v14 = 2048;
      v15 = v5;
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, " => Delgate %p responds unhandled protobuf passing along protobuf: %p", (uint8_t *)&v12, 0x16u);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "object");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:incomingUnhandledProtobuf:fromID:context:", v6, v8, v7, v9, *(_QWORD *)(a1 + 64));

    objc_msgSend(*(id *)(a1 + 64), "messageSequenceNumber");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "unsignedIntegerValue");
    kdebug_trace();

    +[IDSTransportLog IDSService](IDSTransportLog, "IDSService");
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_1906E0000, v11, OS_LOG_TYPE_DEFAULT, "   * Done handling", (uint8_t *)&v12, 2u);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
  }

}

void sub_190787E7C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24))
  {
    +[IDSLogging _IDSService](IDSLogging, "_IDSService");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1907F62A8(a1, v2, v3);

  }
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(_BYTE *)(a1 + 105))
    {
      objc_msgSend(*(id *)(a1 + 40), "_internal");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "sendAppAckForDirectMessage:", *(_QWORD *)(a1 + 32));
    }
    else
    {
      v5 = objc_msgSend(*(id *)(a1 + 48), "connectionType");
      objc_msgSend(*(id *)(a1 + 56), "daemonController");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = *(_QWORD *)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 64), "prefixedURI");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "_internal");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "account");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "_internal");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "uniqueID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:", v6, v7, v11, v5);

    }
  }
  if (!*(_BYTE *)(a1 + 105) && (*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 80)))
  {
    objc_msgSend(*(id *)(a1 + 56), "daemonController");
    v12 = objc_claimAutoreleasedReturnValue();
    v24 = *(_QWORD *)(a1 + 72);
    v22 = (void *)v12;
    v23 = *(_QWORD *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "_internal");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "account");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "_internal");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "uniqueID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = (void *)MEMORY[0x1E0CB37E8];
    v18 = *(_QWORD *)(a1 + 80);
    objc_msgSend(*(id *)(a1 + 88), "data");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "numberWithUnsignedInteger:", objc_msgSend(v19, "length"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "priority");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v24, v23, v16, v18, v20, v21, objc_msgSend(*(id *)(a1 + 48), "broadcastID"), objc_msgSend(*(id *)(a1 + 48), "connectionType"));

  }
}

void sub_190788554(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  id v13;
  __int16 v14;
  const __CFString *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 134217984;
    v13 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingTopLevelMessage if it responds.", (uint8_t *)&v12, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:incomingTopLevelMessage:fromID:messageContext:", v5, v6, v7, v8, *(_QWORD *)(a1 + 64));

    v9 = CFSTR("YES");
  }
  else
  {
    v9 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(_QWORD *)(a1 + 72);
    v12 = 134218498;
    v13 = v3;
    v14 = 2112;
    v15 = v9;
    v16 = 2112;
    v17 = v11;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingTopLevelMessage - doesRespondToSelector? %@ guid: %@", (uint8_t *)&v12, 0x20u);
  }

}

void sub_190788700(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  if (*(_QWORD *)(a1 + 32) || *(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 48), "daemonController");
    v9 = (id)objc_claimAutoreleasedReturnValue();
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 56), "_internal");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "account");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "_internal");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "uniqueID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 64), "priority");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:", v2, v3, v7, 0, 0, v8, objc_msgSend(*(id *)(a1 + 64), "broadcastID"), objc_msgSend(*(id *)(a1 + 64), "connectionType"));

  }
}

void sub_190788994(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134217984;
    v12 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingPendingMessage if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "prefixedURI");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:incomingPendingMessageOfType:fromID:context:", v5, v7, v6, v8, *(_QWORD *)(a1 + 56));

    v9 = CFSTR("YES");
  }
  else
  {
    v9 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134218242;
    v12 = v3;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingPendingMessage - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }

}

void sub_190788CB8(uint64_t a1, int a2)
{
  void *v4;
  uint64_t v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "daemonController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(_QWORD *)(a1 + 40);
  v6 = v4;
  if (a2)
    objc_msgSend(v4, "downloadPendingResourceWithMessageGUID:", v5);
  else
    objc_msgSend(v4, "deletePendingResourceWithMessageGUID:", v5);

}

void sub_190788D08(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134217984;
    v12 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to IDSService delegate %p for incomingPendingResourceWithMetadata if it responds.", (uint8_t *)&v11, 0xCu);
  }

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "prefixedURI");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "service:account:pendingResourceWithMetadata:fromID:acknowledgementBlock:context:", v5, v6, v7, v8, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 64));

    v9 = CFSTR("YES");
  }
  else
  {
    v9 = CFSTR("NO");
  }
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 134218242;
    v12 = v3;
    v13 = 2112;
    v14 = v9;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Done for IDSService delegate %p for incomingPendingMessage - doesRespondToSelector? %@", (uint8_t *)&v11, 0x16u);
  }

}

void sub_190789250(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  __CFDictionary *v13;
  __CFDictionary *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint8_t buf[4];
  id v35;
  __int16 v36;
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  +[IDSLogging IDSConnection](IDSLogging, "IDSConnection");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v35 = v7;
    v36 = 2112;
    v37 = v9;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "DecryptedEngramData %@ %@", buf, 0x16u);
  }

  objc_msgSend(MEMORY[0x1E0D34D40], "groupCrypto");
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v7, "length"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138543362;
    v35 = v12;
    _os_log_impl(&dword_1906E0000, v11, OS_LOG_TYPE_DEFAULT, "  {decryptedData.length: %{public}@}", buf, 0xCu);

  }
  v13 = (__CFDictionary *)objc_msgSend(*(id *)(a1 + 32), "mutableCopy");
  v14 = v13;
  if (v7)
    CFDictionarySetValue(v13, CFSTR("IDSIncomingMessageDecryptedData"), v7);
  if (*MEMORY[0x1E0D34878] && v14)
    CFDictionaryRemoveValue(v14, (const void *)*MEMORY[0x1E0D34878]);
  if (v8)
    CFDictionarySetValue(v14, (const void *)*MEMORY[0x1E0D34880], v8);
  v33 = v8;
  -[__CFDictionary objectForKey:](v14, "objectForKey:", CFSTR("IDSIncomingMessageDecryptedData"), v9);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "originalCommand");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "integerValue");

  if (v17 == 242)
  {
    objc_msgSend(v15, "_FTOptionallyDecompressData");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = 0;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "originalCommand");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "integerValue");

    if (v21 == 243)
    {
      objc_msgSend(v15, "_FTOptionallyDecompressData");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      JWDecodeDictionary();
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      v19 = 0;
      v18 = 0;
      goto LABEL_18;
    }
    objc_msgSend(*(id *)(a1 + 48), "_payloadFromDecryptedData:", v15);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 0;
  }
  v23 = 0;
LABEL_18:
  if (v19)
    v24 = v19;
  else
    v24 = v18;
  v25 = v24;
  v26 = v25;
  if (v25)
    v27 = v25;
  else
    v27 = v23;
  v28 = v27;

  objc_msgSend(*(id *)(a1 + 40), "setUsedEngram:", 1);
  objc_msgSend(*(id *)(a1 + 40), "originalCommand");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(v29, "integerValue");

  if (v30 > 241)
  {
    if (v30 == 242)
    {
      objc_msgSend(*(id *)(a1 + 48), "connection:incomingData:fromURI:context:", *(_QWORD *)(a1 + 56), v28, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40));
    }
    else if (v30 == 243)
    {
      v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D34E08]), "initWithDictionary:", v28);
      objc_msgSend(*(id *)(a1 + 48), "connection:incomingProtobuf:fromURI:context:", *(_QWORD *)(a1 + 56), v31, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40));

    }
  }
  else if (v30 == 100 || v30 == 227)
  {
    objc_msgSend(*(id *)(a1 + 48), "connection:incomingMessage:fromURI:context:", *(_QWORD *)(a1 + 56), v28, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 48), "connection:incomingTopLevelMessage:fromURI:messageContext:", *(_QWORD *)(a1 + 56), v14, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40));
  }

}

void sub_1907895EC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;

  v3 = a2;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1907896B0;
  v8[3] = &unk_1E2C63DF8;
  v4 = *(_QWORD *)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v13 = *(id *)(a1 + 56);
  v10 = v3;
  v5 = *(id *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v11 = v5;
  v12 = v6;
  v7 = v3;
  objc_msgSend(v7, "fetchGroupWithGroupID:completion:", v4, v8);

}

void sub_1907896B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  void *v30;
  void *v31;
  int v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  NSObject *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  id obj;
  uint64_t v55;
  void *v56;
  _QWORD v57[4];
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  id v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint8_t buf[4];
  void *v75;
  __int16 v76;
  void *v77;
  _BYTE v78[128];
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  +[IDSLogging IDSConnection](IDSLogging, "IDSConnection");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v75 = v8;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Decrypting Engram Message, Org Payload %@", buf, 0xCu);
  }

  v9 = *MEMORY[0x1E0D34878];
  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", *MEMORY[0x1E0D34878]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "_IDSDataFromBase64String:", v12);
    v13 = objc_claimAutoreleasedReturnValue();
LABEL_7:
    v51 = (void *)v13;
    goto LABEL_9;
  }
  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v9);
    v13 = objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
  v51 = 0;
LABEL_9:

  v14 = objc_opt_class();
  sub_190785304(v14, *(void **)(a1 + 32), (void *)*MEMORY[0x1E0D34890]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "objectForKey:", CFSTR("t"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v17 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v15, "objectForKey:", CFSTR("t"), v15);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "_IDSDataFromBase64String:", v18);
    v19 = objc_claimAutoreleasedReturnValue();
LABEL_13:
    v20 = (void *)v19;
    goto LABEL_15;
  }
  objc_msgSend(v15, "objectForKey:", CFSTR("t"), v15);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v15, "objectForKey:", CFSTR("t"));
    v19 = objc_claimAutoreleasedReturnValue();
    goto LABEL_13;
  }
  v20 = 0;
LABEL_15:
  v52 = a1;
  v50 = v6;

  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v53 = v5;
  objc_msgSend(v5, "participants");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v79, 16);
  if (v21)
  {
    v22 = v21;
    v55 = *(_QWORD *)v71;
    v56 = 0;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v71 != v55)
          objc_enumerationMutation(obj);
        v24 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * i);
        v66 = 0u;
        v67 = 0u;
        v68 = 0u;
        v69 = 0u;
        objc_msgSend(v24, "devices");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v66, v78, 16);
        if (v26)
        {
          v27 = v26;
          v28 = *(_QWORD *)v67;
          while (2)
          {
            for (j = 0; j != v27; ++j)
            {
              if (*(_QWORD *)v67 != v28)
                objc_enumerationMutation(v25);
              v30 = *(void **)(*((_QWORD *)&v66 + 1) + 8 * j);
              objc_msgSend(v30, "identifier");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              v32 = objc_msgSend(v31, "isEqual:", v20);

              if (v32)
              {
                v33 = v30;

                v56 = v33;
                goto LABEL_30;
              }
            }
            v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v66, v78, 16);
            if (v27)
              continue;
            break;
          }
        }
LABEL_30:

      }
      v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v79, 16);
    }
    while (v22);
  }
  else
  {
    v56 = 0;
  }

  v65 = 0;
  v34 = v53;
  v35 = v51;
  v36 = v56;
  objc_msgSend(v53, "verifyAndRevealData:sendingDevice:cypherIdentifier:error:", v51, v56, &stru_1E2C65AE8, &v65);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = v65;
  v39 = v38;
  if (v38)
  {
    if (objc_msgSend(v38, "code") == -67808)
    {
      v40 = *(void **)(v52 + 40);
      v41 = *(_QWORD *)(v52 + 48);
      v57[0] = MEMORY[0x1E0C809B0];
      v57[1] = 3221225472;
      v57[2] = sub_190789CD4;
      v57[3] = &unk_1E2C63DD0;
      v42 = v50;
      v58 = v50;
      v59 = v51;
      v60 = v56;
      v43 = *(id *)(v52 + 64);
      v44 = *(_QWORD *)(v52 + 56);
      v64 = v43;
      v61 = v44;
      v62 = *(id *)(v52 + 32);
      v63 = *(id *)(v52 + 48);
      objc_msgSend(v40, "_fetchGroupWithGroupID:skipCache:completion:", v41, 1, v57);

    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(v52 + 56) + 8), "_internal");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "serviceName");
      v46 = (void *)objc_claimAutoreleasedReturnValue();

      +[IDSLogging IDSConnection](IDSLogging, "IDSConnection");
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v75 = v50;
        v76 = 2112;
        v77 = v46;
        _os_log_impl(&dword_1906E0000, v47, OS_LOG_TYPE_DEFAULT, "Failed decrypting Engram {error: %@, serviceName: %@}", buf, 0x16u);
      }

      objc_msgSend(*(id *)(v52 + 56), "daemonController");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "failedDecryptingMessage:reason:forGroupID:onService:", *(_QWORD *)(v52 + 32), 800, *(_QWORD *)(v52 + 48), v46);

      v34 = v53;
      v42 = v50;
      v35 = v51;
      v36 = v56;
    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(v52 + 64) + 16))();
    v42 = v50;
  }

}

void sub_190789CD4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 8), "_internal");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "serviceName");
    v6 = (id)objc_claimAutoreleasedReturnValue();

    +[IDSLogging IDSConnection](IDSLogging, "IDSConnection");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v19 = v8;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Failed decrypting Engram {error: %@, serviceName: %@}", buf, 0x16u);
    }

    objc_msgSend(*(id *)(a1 + 56), "daemonController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "failedDecryptingMessage:reason:forGroupID:onService:", *(_QWORD *)(a1 + 64), 800, *(_QWORD *)(a1 + 72), v6);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 48);
    v17 = 0;
    objc_msgSend(v3, "verifyAndRevealData:sendingDevice:cypherIdentifier:error:", v10, v11, &stru_1E2C65AE8, &v17);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v17;
    if (v9)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 8), "_internal");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "serviceName");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      +[IDSLogging IDSConnection](IDSLogging, "IDSConnection");
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        v19 = v15;
        v20 = 2112;
        v21 = v13;
        _os_log_impl(&dword_1906E0000, v14, OS_LOG_TYPE_DEFAULT, "Failed decrypting Engram {error: %@, serviceName: %@}", buf, 0x16u);
      }

      objc_msgSend(*(id *)(a1 + 56), "daemonController");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "failedDecryptingMessage:reason:forGroupID:onService:", *(_QWORD *)(a1 + 64), 804, *(_QWORD *)(a1 + 72), v13);

    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
    }
  }

}

uint64_t sub_19078A358(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_internal");
}

void sub_19078A360(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "object");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_callDelegatesForDevicesChanged");

}

void sub_19078A46C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:devicesChanged:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19078A5AC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:nearbyDevicesChanged:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19078A7D8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:connectedDevicesChanged:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19078ACF8(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:account:identifier:sentBytes:totalBytes:", v3, a1[5], a1[6], a1[7], a1[8]);

  }
}

void sub_19078AD64(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v5 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v4) = *(_BYTE *)(a1 + 88);
    objc_msgSend(v5, "service:account:messageIdentifier:alternateCallbackID:updatedWithResponseCode:error:lastCall:", v3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64), v4);
LABEL_5:

    goto LABEL_6;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v4) = *(_BYTE *)(a1 + 88);
    objc_msgSend(v5, "service:account:messageIdentifier:alternateCallbackID:updatedWithResponseCode:error:lastCall:messageContext:", v3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 64), v4, *(_QWORD *)(a1 + 72));
    goto LABEL_5;
  }
LABEL_6:

}

void sub_19078B180(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:account:identifier:alternateCallbackID:willSendToDestinations:skippedDestinations:registrationPropertyToDestinations:", v3, a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);

  }
}

void sub_19078B4C0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:account:identifier:didSendWithSuccess:error:context:", v3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
LABEL_5:

    goto LABEL_6;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:account:identifier:didSendWithSuccess:error:", v3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 56));
    goto LABEL_5;
  }
LABEL_6:

}

void sub_19078B788(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "service:account:identifier:hasBeenDeliveredWithContext:", v3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 64), "prefixedURI");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "service:account:identifier:fromID:hasBeenDeliveredWithContext:", v4, v5, v6, v7, *(_QWORD *)(a1 + 56));

  }
}

void sub_19078BA28(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:didFlushCacheForRemoteURI:fromURI:guid:", v3, a1[5], a1[6], a1[7]);

  }
}

void sub_19078BBFC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:didFlushCacheForKTPeerURI:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19078BED4(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:account:inviteReceivedForSession:fromID:withOptions:", v3, a1[5], a1[6], a1[7], a1[8]);
LABEL_7:

    goto LABEL_8;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:account:inviteReceivedForSession:fromID:withContext:", v3, a1[5], a1[6], a1[7], a1[9]);
    goto LABEL_7;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:account:inviteReceivedForSession:fromID:", v3, a1[5], a1[6], a1[7]);
    goto LABEL_7;
  }
LABEL_8:

}

void sub_19078C180(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:account:receivedGroupSessionParticipantUpdate:context:", v3, a1[5], a1[6], a1[7]);
LABEL_5:

    goto LABEL_6;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:account:receivedGroupSessionParticipantUpdate:", v3, a1[5], a1[6]);
    goto LABEL_5;
  }
LABEL_6:

}

void sub_19078C32C(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:account:receivedGroupSessionParticipantDataUpdate:", v3, a1[5], a1[6]);

  }
}

void sub_19078C530(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:didSendOpportunisticDataWithIdentifier:toIDs:", v3, a1[5], a1[6]);

  }
}

void sub_19078C6E8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "serviceSpaceDidBecomeAvailable:", v3);

  }
}

uint64_t sub_19078CE44(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_loadCachedLinkedDevices");
}

uint64_t sub_19078D214(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_internal");
}

uint64_t sub_19078D920(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "properties");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToPseudonymProperties:", *(_QWORD *)(a1 + 32)) ^ 1;

  return v4;
}

uint64_t sub_19078DC38(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel__calloutPseudonymsDidUpdate);
}

id IDSServiceCalculatedPseudonymChanges_0(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t k;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t m;
  void *v44;
  void *v45;
  uint64_t n;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  char v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  void *v62;
  void *v63;
  int v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t ii;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t jj;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t kk;
  IDSServicePseudonymChange *v98;
  void *v99;
  void *v101;
  id v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  void *v106;
  void *v107;
  void *v108;
  void *context;
  uint64_t v110;
  void *v111;
  id v112;
  int v113;
  int v114;
  id v115;
  id v116;
  id v117;
  void *v118;
  void *v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  void *v123;
  id obj;
  id v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  _BYTE v166[128];
  _BYTE v167[128];
  _BYTE v168[128];
  _BYTE v169[128];
  _BYTE v170[128];
  _BYTE v171[128];
  _BYTE v172[128];
  _BYTE v173[128];
  _BYTE v174[128];
  _BYTE v175[128];
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v104 = a2;
  v101 = (void *)MEMORY[0x19400FC60]();
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v162 = 0u;
  v163 = 0u;
  v164 = 0u;
  v165 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v162, v175, 16);
  v7 = 0x1E2C5D000uLL;
  v123 = v4;
  v102 = v5;
  v105 = v6;
  if (v6)
  {
    v103 = *(_QWORD *)v163;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v163 != v103)
          objc_enumerationMutation(v5);
        v110 = v8;
        v9 = *(_QWORD *)(*((_QWORD *)&v162 + 1) + 8 * v8);
        context = (void *)MEMORY[0x19400FC60](v6);
        objc_msgSend(v5, "objectForKey:", v9, v101);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v104, "objectForKey:", v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v119 = v11;
        if (v11)
        {
          objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", v10);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", v11);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = (void *)objc_msgSend(v12, "mutableCopy");
          objc_msgSend(v14, "minusSet:", v13);
          v106 = v13;
          v111 = (void *)objc_msgSend(v13, "mutableCopy");
          v112 = v12;
          objc_msgSend(v111, "minusSet:", v12);
          v108 = v14;
          if (objc_msgSend(v14, "count") || objc_msgSend(v111, "count"))
          {
            v15 = objc_alloc_init(MEMORY[0x1E0C99E20]);
            v121 = objc_alloc_init(MEMORY[0x1E0C99E20]);
            v16 = objc_alloc_init(MEMORY[0x1E0C99E08]);
            v154 = 0u;
            v155 = 0u;
            v156 = 0u;
            v157 = 0u;
            obj = v14;
            v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v154, v173, 16);
            if (v17)
            {
              v18 = v17;
              v19 = *(_QWORD *)v155;
              do
              {
                for (i = 0; i != v18; ++i)
                {
                  if (*(_QWORD *)v155 != v19)
                    objc_enumerationMutation(obj);
                  v21 = *(void **)(*((_QWORD *)&v154 + 1) + 8 * i);
                  objc_msgSend(v21, "URI");
                  v22 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v15, "addObject:", v22);

                  objc_msgSend(v21, "URI");
                  v23 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v16, "setObject:forKey:", v21, v23);

                }
                v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v154, v173, 16);
              }
              while (v18);
            }
            v107 = v15;

            v152 = 0u;
            v153 = 0u;
            v150 = 0u;
            v151 = 0u;
            v24 = v111;
            v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v150, v172, 16);
            if (v25)
            {
              v26 = v25;
              v27 = *(_QWORD *)v151;
              do
              {
                for (j = 0; j != v26; ++j)
                {
                  if (*(_QWORD *)v151 != v27)
                    objc_enumerationMutation(v24);
                  v29 = *(void **)(*((_QWORD *)&v150 + 1) + 8 * j);
                  objc_msgSend(v29, "URI");
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v121, "addObject:", v30);

                  objc_msgSend(v29, "URI");
                  v31 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v16, "setObject:forKey:", v29, v31);

                }
                v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v150, v172, 16);
              }
              while (v26);
            }

            v32 = (void *)objc_msgSend(v107, "mutableCopy");
            objc_msgSend(v32, "minusSet:", v121);
            v33 = (void *)objc_msgSend(v121, "mutableCopy");
            objc_msgSend(v33, "minusSet:", v107);
            v148 = 0u;
            v149 = 0u;
            v146 = 0u;
            v147 = 0u;
            v117 = v32;
            v34 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v146, v171, 16);
            v125 = v16;
            if (v34)
            {
              v35 = v34;
              v36 = *(_QWORD *)v147;
              do
              {
                for (k = 0; k != v35; ++k)
                {
                  if (*(_QWORD *)v147 != v36)
                    objc_enumerationMutation(v117);
                  objc_msgSend(v16, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v146 + 1) + 8 * k));
                  v38 = (void *)objc_claimAutoreleasedReturnValue();
                  v39 = (void *)objc_msgSend(objc_alloc(*(Class *)(v7 + 3864)), "initWithPseudonym:changeType:updateFlags:", v38, 0, 0);
                  objc_msgSend(v4, "addObject:", v39);

                  v16 = v125;
                }
                v35 = objc_msgSend(v117, "countByEnumeratingWithState:objects:count:", &v146, v171, 16);
              }
              while (v35);
            }

            v144 = 0u;
            v145 = 0u;
            v142 = 0u;
            v143 = 0u;
            v116 = v33;
            v40 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v142, v170, 16);
            if (v40)
            {
              v41 = v40;
              v42 = *(_QWORD *)v143;
              do
              {
                for (m = 0; m != v41; ++m)
                {
                  if (*(_QWORD *)v143 != v42)
                    objc_enumerationMutation(v116);
                  objc_msgSend(v16, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v142 + 1) + 8 * m));
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  v45 = (void *)objc_msgSend(objc_alloc(*(Class *)(v7 + 3864)), "initWithPseudonym:changeType:updateFlags:", v44, 1, 0);
                  objc_msgSend(v4, "addObject:", v45);

                }
                v41 = objc_msgSend(v116, "countByEnumeratingWithState:objects:count:", &v142, v170, 16);
              }
              while (v41);
            }

            v140 = 0u;
            v141 = 0u;
            v138 = 0u;
            v139 = 0u;
            v115 = v24;
            v11 = v119;
            v122 = objc_msgSend(v115, "countByEnumeratingWithState:objects:count:", &v138, v169, 16);
            if (v122)
            {
              v120 = *(_QWORD *)v139;
              v118 = v10;
              do
              {
                for (n = 0; n != v122; ++n)
                {
                  if (*(_QWORD *)v139 != v120)
                    objc_enumerationMutation(v115);
                  v47 = *(void **)(*((_QWORD *)&v138 + 1) + 8 * n);
                  v134 = 0u;
                  v135 = 0u;
                  v136 = 0u;
                  v137 = 0u;
                  v48 = obj;
                  v49 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v134, v168, 16);
                  if (v49)
                  {
                    v50 = v49;
                    v51 = *(_QWORD *)v135;
LABEL_44:
                    v52 = 0;
                    while (1)
                    {
                      if (*(_QWORD *)v135 != v51)
                        objc_enumerationMutation(v48);
                      v53 = *(void **)(*((_QWORD *)&v134 + 1) + 8 * v52);
                      objc_msgSend(v53, "URI");
                      v54 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v47, "URI");
                      v55 = (void *)objc_claimAutoreleasedReturnValue();
                      v56 = objc_msgSend(v54, "isEqualToURI:", v55);

                      if ((v56 & 1) != 0)
                        break;
                      if (v50 == ++v52)
                      {
                        v50 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v134, v168, 16);
                        if (v50)
                          goto LABEL_44;
                        v57 = v48;
                        v7 = 0x1E2C5D000;
                        v10 = v118;
                        v11 = v119;
                        goto LABEL_69;
                      }
                    }
                    v57 = v53;

                    v7 = 0x1E2C5D000;
                    v10 = v118;
                    v11 = v119;
                    if (!v57)
                      goto LABEL_70;
                    objc_msgSend(v57, "properties");
                    v58 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v47, "properties");
                    v59 = (void *)objc_claimAutoreleasedReturnValue();
                    v60 = v58;
                    if ((objc_msgSend(v60, "isEqualToPseudonymProperties:", v59) & 1) != 0)
                    {
                      v61 = 0;
                    }
                    else
                    {
                      objc_msgSend(v60, "featureID");
                      v62 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v59, "featureID");
                      v63 = (void *)objc_claimAutoreleasedReturnValue();
                      v64 = objc_msgSend(v62, "isEqualToString:", v63);

                      v65 = v64 ^ 1u;
                      objc_msgSend(v60, "scopeID");
                      v66 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v59, "scopeID");
                      v67 = objc_claimAutoreleasedReturnValue();
                      if (v66 == (void *)v67)
                      {

                      }
                      else
                      {
                        v68 = (void *)v67;
                        objc_msgSend(v60, "scopeID");
                        v69 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend(v59, "scopeID");
                        v70 = (void *)objc_claimAutoreleasedReturnValue();
                        v113 = objc_msgSend(v69, "isEqualToString:", v70);

                        if (!v113)
                          v65 |= 2uLL;
                      }
                      objc_msgSend(v60, "allowedServices");
                      v71 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v71, "__imSetFromArray");
                      v72 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v59, "allowedServices");
                      v73 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v73, "__imSetFromArray");
                      v74 = (void *)objc_claimAutoreleasedReturnValue();
                      v114 = objc_msgSend(v72, "isEqual:", v74);

                      if (v114)
                        v61 = v65;
                      else
                        v61 = v65 | 8;
                      objc_msgSend(v60, "expiryEpoch");
                      v76 = v75;
                      objc_msgSend(v59, "expiryEpoch");
                      v78 = v76 - v77;
                      if (v78 < 0.0)
                        v78 = -v78;
                      if (v78 > 1.0)
                        v61 |= 4uLL;
                      v7 = 0x1E2C5D000uLL;
                      v10 = v118;
                      v11 = v119;
                    }

                    v79 = (void *)objc_msgSend(objc_alloc(*(Class *)(v7 + 3864)), "initWithPseudonym:changeType:updateFlags:", v47, 2, v61);
                    objc_msgSend(v123, "addObject:", v79);

                  }
                  else
                  {
                    v57 = v48;
                  }
LABEL_69:

LABEL_70:
                  v16 = v125;
                }
                v122 = objc_msgSend(v115, "countByEnumeratingWithState:objects:count:", &v138, v169, 16);
              }
              while (v122);
            }

            v4 = v123;
            v5 = v102;
          }

LABEL_74:
          v80 = v110;
          goto LABEL_83;
        }
        v160 = 0u;
        v161 = 0u;
        v158 = 0u;
        v159 = 0u;
        v112 = v10;
        v81 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", &v158, v174, 16);
        if (!v81)
          goto LABEL_74;
        v82 = v81;
        v83 = *(_QWORD *)v159;
        do
        {
          for (ii = 0; ii != v82; ++ii)
          {
            if (*(_QWORD *)v159 != v83)
              objc_enumerationMutation(v112);
            v85 = (void *)objc_msgSend(objc_alloc(*(Class *)(v7 + 3864)), "initWithPseudonym:changeType:updateFlags:", *(_QWORD *)(*((_QWORD *)&v158 + 1) + 8 * ii), 0, 0);
            objc_msgSend(v4, "addObject:", v85);

          }
          v82 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", &v158, v174, 16);
        }
        while (v82);
        v80 = v110;
        v11 = 0;
LABEL_83:

        objc_autoreleasePoolPop(context);
        v8 = v80 + 1;
      }
      while (v8 != v105);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v162, v175, 16);
      v105 = v6;
    }
    while (v6);
  }

  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  v86 = v104;
  v87 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v130, v167, 16);
  if (v87)
  {
    v88 = v87;
    v89 = *(_QWORD *)v131;
    do
    {
      for (jj = 0; jj != v88; ++jj)
      {
        if (*(_QWORD *)v131 != v89)
          objc_enumerationMutation(v86);
        v91 = *(_QWORD *)(*((_QWORD *)&v130 + 1) + 8 * jj);
        objc_msgSend(v5, "objectForKey:", v91, v101);
        v92 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v92)
        {
          objc_msgSend(v86, "objectForKey:", v91);
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          v126 = 0u;
          v127 = 0u;
          v128 = 0u;
          v129 = 0u;
          v94 = objc_msgSend(v93, "countByEnumeratingWithState:objects:count:", &v126, v166, 16);
          if (v94)
          {
            v95 = v94;
            v96 = *(_QWORD *)v127;
            do
            {
              for (kk = 0; kk != v95; ++kk)
              {
                if (*(_QWORD *)v127 != v96)
                  objc_enumerationMutation(v93);
                v98 = -[IDSServicePseudonymChange initWithPseudonym:changeType:updateFlags:]([IDSServicePseudonymChange alloc], "initWithPseudonym:changeType:updateFlags:", *(_QWORD *)(*((_QWORD *)&v126 + 1) + 8 * kk), 1, 0);
                objc_msgSend(v123, "addObject:", v98);

              }
              v95 = objc_msgSend(v93, "countByEnumeratingWithState:objects:count:", &v126, v166, 16);
            }
            while (v95);
          }

          v4 = v123;
          v5 = v102;
        }

      }
      v88 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v130, v167, 16);
    }
    while (v88);
  }

  v99 = (void *)objc_msgSend(v4, "copy");
  objc_autoreleasePoolPop(v101);

  return v99;
}

void sub_19078EA04(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:didUpdatePseudonymsWithChanges:", v3, *(_QWORD *)(a1 + 40));

  }
}

id sub_19078EC54(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v25;
  const __CFString *v26;
  uint64_t v27;
  const __CFString *v28;
  uint64_t v29;
  const __CFString *v30;
  uint64_t v31;
  const __CFString *v32;
  uint64_t v33;
  const __CFString *v34;
  uint64_t v35;
  const __CFString *v36;
  uint64_t v37;
  const __CFString *v38;
  uint64_t v39;
  const __CFString *v40;
  uint64_t v41;
  _QWORD v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  if (a1 <= 499)
  {
    if (a1 > 299)
    {
      if (a1 == 300)
      {
        v21 = (void *)MEMORY[0x1E0CB35C8];
        v22 = *MEMORY[0x1E0D34AD8];
        v37 = *MEMORY[0x1E0CB2D50];
        v38 = CFSTR("Internal server error");
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        v4 = v21;
        v5 = v22;
        v6 = 300;
        goto LABEL_22;
      }
      if (a1 == 400)
      {
        v11 = (void *)MEMORY[0x1E0CB35C8];
        v12 = *MEMORY[0x1E0D34AD8];
        v35 = *MEMORY[0x1E0CB2D50];
        v36 = CFSTR("Invalid URI");
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        v4 = v11;
        v5 = v12;
        v6 = 400;
        goto LABEL_22;
      }
    }
    else
    {
      if (a1 == 100)
      {
        v17 = (void *)MEMORY[0x1E0CB35C8];
        v18 = *MEMORY[0x1E0D34AD8];
        v41 = *MEMORY[0x1E0CB2D50];
        v42[0] = CFSTR("Feature disabled");
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v42, &v41, 1);
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        v4 = v17;
        v5 = v18;
        v6 = 100;
        goto LABEL_22;
      }
      if (a1 == 200)
      {
        v7 = (void *)MEMORY[0x1E0CB35C8];
        v8 = *MEMORY[0x1E0D34AD8];
        v39 = *MEMORY[0x1E0CB2D50];
        v40 = CFSTR("Server error");
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1);
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        v4 = v7;
        v5 = v8;
        v6 = 200;
        goto LABEL_22;
      }
    }
LABEL_24:
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D34AD8], a1, 0);
    return (id)objc_claimAutoreleasedReturnValue();
  }
  if (a1 <= 699)
  {
    if (a1 == 500)
    {
      v19 = (void *)MEMORY[0x1E0CB35C8];
      v20 = *MEMORY[0x1E0D34AD8];
      v33 = *MEMORY[0x1E0CB2D50];
      v34 = CFSTR("Missing entitlements");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v34, &v33, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v19;
      v5 = v20;
      v6 = 500;
      goto LABEL_22;
    }
    if (a1 == 600)
    {
      v9 = (void *)MEMORY[0x1E0CB35C8];
      v10 = *MEMORY[0x1E0D34AD8];
      v31 = *MEMORY[0x1E0CB2D50];
      v32 = CFSTR("Unable to send request");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v9;
      v5 = v10;
      v6 = 600;
      goto LABEL_22;
    }
    goto LABEL_24;
  }
  if (a1 == 700)
  {
    v13 = (void *)MEMORY[0x1E0CB35C8];
    v14 = *MEMORY[0x1E0D34AD8];
    v29 = *MEMORY[0x1E0CB2D50];
    v30 = CFSTR("Pseudonym limit reached");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v13;
    v5 = v14;
    v6 = 700;
    goto LABEL_22;
  }
  if (a1 == 800)
  {
    v15 = (void *)MEMORY[0x1E0CB35C8];
    v16 = *MEMORY[0x1E0D34AD8];
    v27 = *MEMORY[0x1E0CB2D50];
    v28 = CFSTR("Request failed");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v15;
    v5 = v16;
    v6 = 800;
    goto LABEL_22;
  }
  if (a1 != 900)
    goto LABEL_24;
  v1 = (void *)MEMORY[0x1E0CB35C8];
  v2 = *MEMORY[0x1E0D34AD8];
  v25 = *MEMORY[0x1E0CB2D50];
  v26 = CFSTR("Max number of in flight provisions reached");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v1;
  v5 = v2;
  v6 = 900;
LABEL_22:
  objc_msgSend(v4, "errorWithDomain:code:userInfo:", v5, v6, v3);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  return v23;
}

void sub_19078F3F4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  sub_19078EC54(600);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_19078F7AC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  sub_19078EC54(600);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_19078FB48(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  sub_19078EC54(600);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

id sub_19078FF44(void *a1)
{
  id v1;
  void *v2;
  int v3;
  id v4;
  void *v5;
  int v6;
  void *v7;
  int v8;
  void *v9;

  v1 = a1;
  objc_msgSend(v1, "domain");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0D34AD8]);

  if (v3)
  {
    sub_19078EC54(objc_msgSend(v1, "code"));
    v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v1, "domain");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0D34C60]);

    if (v6)
    {
      sub_190790BD4(objc_msgSend(v1, "code"));
      v4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v1, "domain");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "isEqualToString:", *MEMORY[0x1E0D34BA8]);

      if (v8)
      {
        sub_190792098(objc_msgSend(v1, "code"));
        v4 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v4 = v1;
      }
    }
  }
  v9 = v4;

  return v9;
}

uint64_t sub_190790030(uint64_t a1)
{
  NSObject *v2;
  const __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  const __CFString *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 64))
      v3 = CFSTR("YES");
    else
      v3 = CFSTR("NO");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v8 = 138413058;
    v9 = v4;
    v10 = 2112;
    v11 = v3;
    v12 = 2112;
    v13 = v5;
    v14 = 2112;
    v15 = v6;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "finishedProvisioningPseudonym called - block invoke {pseudonym: %@, success:%@, requestUUID: %@, error:%@}", (uint8_t *)&v8, 0x2Au);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

uint64_t sub_1907903BC(uint64_t a1)
{
  NSObject *v2;
  const __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  const __CFString *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 64))
      v3 = CFSTR("YES");
    else
      v3 = CFSTR("NO");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v8 = 138413058;
    v9 = v4;
    v10 = 2112;
    v11 = v3;
    v12 = 2112;
    v13 = v5;
    v14 = 2112;
    v15 = v6;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "finishedRenewingPseudonym called - block invoke {pseudonym: %@, success:%@, requestUUID: %@, error:%@}", (uint8_t *)&v8, 0x2Au);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

uint64_t sub_190790710(uint64_t a1)
{
  NSObject *v2;
  const __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  const __CFString *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 56))
      v3 = CFSTR("YES");
    else
      v3 = CFSTR("NO");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v7 = 138412802;
    v8 = v3;
    v9 = 2112;
    v10 = v4;
    v11 = 2112;
    v12 = v5;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "finishedRevokingPseudonymWithSuccess called - block invoke {success:%@, requestUUID: %@, error:%@}", (uint8_t *)&v7, 0x20u);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

id sub_190790BD4(int a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  const __CFString *v38;
  uint64_t v39;
  const __CFString *v40;
  uint64_t v41;
  const __CFString *v42;
  uint64_t v43;
  const __CFString *v44;
  uint64_t v45;
  const __CFString *v46;
  uint64_t v47;
  const __CFString *v48;
  uint64_t v49;
  const __CFString *v50;
  uint64_t v51;
  const __CFString *v52;
  uint64_t v53;
  const __CFString *v54;
  uint64_t v55;
  const __CFString *v56;
  uint64_t v57;
  const __CFString *v58;
  uint64_t v59;
  const __CFString *v60;
  uint64_t v61;
  const __CFString *v62;
  uint64_t v63;
  const __CFString *v64;
  uint64_t v65;
  _QWORD v66[2];

  v66[1] = *MEMORY[0x1E0C80C00];
  v1 = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_19;
    case 1:
      v2 = (void *)MEMORY[0x1E0CB35C8];
      v3 = *MEMORY[0x1E0D34C60];
      v65 = *MEMORY[0x1E0CB2D50];
      v66[0] = CFSTR("Invalid parameters");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v66, &v65, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v2;
      v6 = v3;
      v7 = 1;
      goto LABEL_18;
    case 2:
      v9 = (void *)MEMORY[0x1E0CB35C8];
      v10 = *MEMORY[0x1E0D34C60];
      v63 = *MEMORY[0x1E0CB2D50];
      v64 = CFSTR("URI not a token URI");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v64, &v63, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v9;
      v6 = v10;
      v7 = 2;
      goto LABEL_18;
    case 3:
      v11 = (void *)MEMORY[0x1E0CB35C8];
      v12 = *MEMORY[0x1E0D34C60];
      v61 = *MEMORY[0x1E0CB2D50];
      v62 = CFSTR("Daemon disconnected");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v62, &v61, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v11;
      v6 = v12;
      v7 = 3;
      goto LABEL_18;
    case 4:
      v13 = (void *)MEMORY[0x1E0CB35C8];
      v14 = *MEMORY[0x1E0D34C60];
      v59 = *MEMORY[0x1E0CB2D50];
      v60 = CFSTR("Missing entitlements");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v60, &v59, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v13;
      v6 = v14;
      v7 = 4;
      goto LABEL_18;
    case 5:
      v15 = (void *)MEMORY[0x1E0CB35C8];
      v16 = *MEMORY[0x1E0D34C60];
      v57 = *MEMORY[0x1E0CB2D50];
      v58 = CFSTR("Service has no application key");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v58, &v57, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v15;
      v6 = v16;
      v7 = 5;
      goto LABEL_18;
    case 6:
      v17 = (void *)MEMORY[0x1E0CB35C8];
      v18 = *MEMORY[0x1E0D34C60];
      v55 = *MEMORY[0x1E0CB2D50];
      v56 = CFSTR("Cannot perform query");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v17;
      v6 = v18;
      v7 = 6;
      goto LABEL_18;
    case 7:
      v19 = (void *)MEMORY[0x1E0CB35C8];
      v20 = *MEMORY[0x1E0D34C60];
      v53 = *MEMORY[0x1E0CB2D50];
      v54 = CFSTR("Query failed");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v54, &v53, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v19;
      v6 = v20;
      v7 = 7;
      goto LABEL_18;
    case 8:
      v21 = (void *)MEMORY[0x1E0CB35C8];
      v22 = *MEMORY[0x1E0D34C60];
      v51 = *MEMORY[0x1E0CB2D50];
      v52 = CFSTR("Query rate limited");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v52, &v51, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v21;
      v6 = v22;
      v7 = 8;
      goto LABEL_18;
    case 9:
      v23 = (void *)MEMORY[0x1E0CB35C8];
      v24 = *MEMORY[0x1E0D34C60];
      v49 = *MEMORY[0x1E0CB2D50];
      v50 = CFSTR("Remote identity unregistered");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v23;
      v6 = v24;
      v7 = 9;
      goto LABEL_18;
    case 10:
      v25 = (void *)MEMORY[0x1E0CB35C8];
      v26 = *MEMORY[0x1E0D34C60];
      v47 = *MEMORY[0x1E0CB2D50];
      v48 = CFSTR("Remote identity registered without signing key type");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v25;
      v6 = v26;
      v7 = 10;
      goto LABEL_18;
    case 11:
      v27 = (void *)MEMORY[0x1E0CB35C8];
      v28 = *MEMORY[0x1E0D34C60];
      v45 = *MEMORY[0x1E0CB2D50];
      v46 = CFSTR("Unable to load signing key type");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v27;
      v6 = v28;
      v7 = 11;
      goto LABEL_18;
    case 12:
      v29 = (void *)MEMORY[0x1E0CB35C8];
      v30 = *MEMORY[0x1E0D34C60];
      v43 = *MEMORY[0x1E0CB2D50];
      v44 = CFSTR("MessageProtection signing/verification error");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v44, &v43, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v29;
      v6 = v30;
      v7 = 12;
      goto LABEL_18;
    case 13:
      v31 = (void *)MEMORY[0x1E0CB35C8];
      v32 = *MEMORY[0x1E0D34C60];
      v39 = *MEMORY[0x1E0CB2D50];
      v40 = CFSTR("SecKey signing/verification error");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v31;
      v6 = v32;
      v7 = 13;
      goto LABEL_18;
    case 14:
      v33 = (void *)MEMORY[0x1E0CB35C8];
      v34 = *MEMORY[0x1E0D34C60];
      v41 = *MEMORY[0x1E0CB2D50];
      v42 = CFSTR("Local device unregistered");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v42, &v41, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v33;
      v6 = v34;
      v7 = 14;
      goto LABEL_18;
    case 15:
      v35 = (void *)MEMORY[0x1E0CB35C8];
      v36 = *MEMORY[0x1E0D34C60];
      v37 = *MEMORY[0x1E0CB2D50];
      v38 = CFSTR("Failed to diversify key");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = v35;
      v6 = v36;
      v7 = 15;
LABEL_18:
      objc_msgSend(v5, "errorWithDomain:code:userInfo:", v6, v7, v4);
      v1 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_19:
      result = v1;
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D34C60]);
      result = (id)objc_claimAutoreleasedReturnValue();
      break;
  }
  return result;
}

void sub_1907911F0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  sub_190790BD4(3);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_19079123C(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v3 = a1[8];
  v4 = a1[4];
  v5 = (void *)a1[5];
  v6 = a2;
  objc_msgSend(v5, "serviceProperties");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "signData:withAlgorithm:onService:options:requestUUID:", v4, v3, v7, a1[6], a1[7]);

}

void sub_190791718(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  sub_190790BD4(3);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_190791764(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[10];
  v6 = (void *)a1[6];
  v7 = a2;
  objc_msgSend(v6, "serviceProperties");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "identifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "verifySignedData:matchesData:forAlgorithm:onService:tokenUri:options:requestUUID:", v3, v4, v5, v8, a1[7], a1[8], a1[9]);

}

uint64_t sub_190791A30(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_190791C94(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

id sub_190792098(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  const __CFString *v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  const __CFString *v22;
  uint64_t v23;
  const __CFString *v24;
  uint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  if (a1 <= 299)
  {
    if (a1 == 100)
    {
      v13 = (void *)MEMORY[0x1E0CB35C8];
      v14 = *MEMORY[0x1E0D34BA8];
      v25 = *MEMORY[0x1E0CB2D50];
      v26[0] = CFSTR("Feature disabled");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v13;
      v5 = v14;
      v6 = 100;
      goto LABEL_12;
    }
    if (a1 == 200)
    {
      v7 = (void *)MEMORY[0x1E0CB35C8];
      v8 = *MEMORY[0x1E0D34BA8];
      v23 = *MEMORY[0x1E0CB2D50];
      v24 = CFSTR("Server error");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v7;
      v5 = v8;
      v6 = 200;
      goto LABEL_12;
    }
LABEL_14:
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D34BA8], a1, 0);
    return (id)objc_claimAutoreleasedReturnValue();
  }
  if (a1 == 300)
  {
    v9 = (void *)MEMORY[0x1E0CB35C8];
    v10 = *MEMORY[0x1E0D34BA8];
    v21 = *MEMORY[0x1E0CB2D50];
    v22 = CFSTR("Internal server error");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v9;
    v5 = v10;
    v6 = 300;
    goto LABEL_12;
  }
  if (a1 == 400)
  {
    v11 = (void *)MEMORY[0x1E0CB35C8];
    v12 = *MEMORY[0x1E0D34BA8];
    v19 = *MEMORY[0x1E0CB2D50];
    v20 = CFSTR("Invalid URI");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v11;
    v5 = v12;
    v6 = 400;
    goto LABEL_12;
  }
  if (a1 != 500)
    goto LABEL_14;
  v1 = (void *)MEMORY[0x1E0CB35C8];
  v2 = *MEMORY[0x1E0D34BA8];
  v17 = *MEMORY[0x1E0CB2D50];
  v18 = CFSTR("Missing entitlements");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v1;
  v5 = v2;
  v6 = 500;
LABEL_12:
  objc_msgSend(v4, "errorWithDomain:code:userInfo:", v5, v6, v3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

void sub_190792328(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  sub_190792098(600);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

void sub_190792CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_190792EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

BOOL sub_190793A4C(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a2, "_internal");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "accountType") == 0;

  return v3;
}

uint64_t sub_190793A88(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = a3;
  objc_msgSend(a2, "loginID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "loginID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v5, "compare:", v6);
  return v7;
}

id sub_190793AF4(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;

  v2 = a2;
  if ((objc_msgSend(v2, "hasPrefix:", CFSTR("device:")) & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    objc_msgSend(v2, "_stripPotentialTokenURIWithToken:", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_stripFZIDPrefix");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v3;
}

BOOL sub_190793B60(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "registrationStatus") == 5;
}

void sub_19079498C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = a1[5];
  v1 = a1[6];
  v3 = a1[4];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), 14, 0);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v1 + 16))(v1, v3, v2, v4);

}

uint64_t sub_190794A00(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(a1[6] + 16))(a1[6], a1[4], a1[5], a2);
}

void sub_190795128(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = a1[5];
  v1 = a1[6];
  v3 = a1[4];
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), 14, 0);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v1 + 16))(v1, v3, v2, v4);

}

uint64_t sub_19079519C(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(a1[6] + 16))(a1[6], a1[4], a1[5], a2);
}

void sub_190796890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,os_activity_scope_state_s state,char a39)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_1907969F0(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;

  v2 = objc_alloc(MEMORY[0x1E0C99D80]);
  v3 = (void *)objc_msgSend(v2, "initWithObjectsAndKeys:", CFSTR("Out of space"), *MEMORY[0x1E0CB2D50], 0);
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), 27, v3);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_190796AD8;
  v7[3] = &unk_1E2C63EE0;
  v5 = *(void **)(a1 + 40);
  v8 = *(id *)(a1 + 32);
  v9 = v5;
  v10 = v4;
  v6 = v4;
  objc_msgSend(v8, "_callDelegatesWithBlock:", v7);

}

void sub_190796AD8(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:account:identifier:didSendWithSuccess:error:", v3, 0, a1[5], 0, a1[6]);

  }
}

void sub_1907973FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,os_activity_scope_state_s state,char a39)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_190797A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_19079AF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,os_activity_scope_state_s state,char a32)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_19079B210(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  int v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;

  v5 = a2;
  v6 = a3;
  +[IDSInternalQueueController sharedInstance](IDSInternalQueueController, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "assertQueueIsCurrent");

  if (v8)
  {
    objc_msgSend(MEMORY[0x1E0D34D40], "utilities");
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1907F85CC();

  }
  if (v6)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("IDSSendMessageOptionFromID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "_sendingAccountForAccount:destination:fromID:", 0, 0, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "_internal");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "uniqueID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v14 = (void *)MEMORY[0x1E0D34D18];
    objc_msgSend(*(id *)(a1 + 48), "destinations");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "destinationWithStrings:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = *(_QWORD *)(a1 + 48);
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = sub_19079B414;
    v26[3] = &unk_1E2C640F0;
    v18 = *(id *)(a1 + 32);
    v19 = *(_QWORD *)(a1 + 40);
    v27 = v18;
    v28 = v19;
    v29 = v11;
    v30 = v16;
    v20 = *(void **)(a1 + 56);
    v21 = *(_QWORD *)(a1 + 64);
    v31 = v13;
    v22 = *(_QWORD *)(a1 + 72);
    v33 = v21;
    v34 = v22;
    v32 = v20;
    v23 = v13;
    v24 = v16;
    v25 = v11;
    objc_msgSend(v5, "_publicDataRepresentationForGroup:completion:", v17, v26);

  }
}

void sub_19079B414(uint64_t a1, void *a2)
{
  id v3;
  __CFDictionary *v4;
  __CFDictionary *v5;
  const void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void (*v15)(void);
  NSObject *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  const __CFString *v27;
  uint64_t v28;
  const __CFString *v29;
  uint8_t buf[4];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", *(_QWORD *)(a1 + 32));
  v4 = (__CFDictionary *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v3)
    CFDictionarySetValue(v4, CFSTR("IDSSendMessageOptionDataToEncrypt"), v3);
  v6 = (const void *)MEMORY[0x1E0C9AAB0];
  CFDictionarySetValue(v5, CFSTR("IDSSendMessageOptionTopLevelDictionary"), MEMORY[0x1E0C9AAB0]);
  CFDictionarySetValue(v5, CFSTR("IDSSendMessageOptionCommand"), &unk_1E2CAE318);
  CFDictionarySetValue(v5, CFSTR("IDSSendMessageOptionEncryptPayload"), v6);
  CFDictionarySetValue(v5, CFSTR("IDSSendMessageOptionAlwaysSkipSelfKey"), v6);
  if (!objc_msgSend(*(id *)(a1 + 40), "canSendMessageWithAccount:toDestination:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)))
  {
    +[IDSLogging _IDSService](IDSLogging, "_IDSService");
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(*(id *)(a1 + 48), "_internal");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v31 = v17;
      _os_log_impl(&dword_1906E0000, v16, OS_LOG_TYPE_DEFAULT, "sendMessage - Unable to send message to this destination from this account %@", buf, 0xCu);

    }
    v26 = *MEMORY[0x1E0CB2D50];
    v27 = CFSTR("Destination device is not active for this account");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)MEMORY[0x1E0CB35C8];
    v19 = 37;
    goto LABEL_15;
  }
  if (!*(_QWORD *)(a1 + 64)
    || (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "objectForKeyedSubscript:"),
        (v7 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    +[IDSLogging _IDSService](IDSLogging, "_IDSService");
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(*(id *)(a1 + 48), "_internal");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v31 = v21;
      _os_log_impl(&dword_1906E0000, v20, OS_LOG_TYPE_DEFAULT, "sendMessage - Could not find connection for account %@", buf, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 40), "_logConnectionMap");
    +[IDSLogging _IDSService](IDSLogging, "_IDSService");
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "_internal");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "accounts");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v31 = v24;
      _os_log_impl(&dword_1906E0000, v22, OS_LOG_TYPE_DEFAULT, "sendMessage - All accounts %@", buf, 0xCu);

    }
    v28 = *MEMORY[0x1E0CB2D50];
    v29 = CFSTR("Could not find valid account");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)MEMORY[0x1E0CB35C8];
    v19 = 7;
LABEL_15:
    objc_msgSend(v18, "errorWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), v19, v8);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    v15 = *(void (**)(void))(*(_QWORD *)(a1 + 72) + 16);
    goto LABEL_16;
  }
  v8 = v7;
  objc_msgSend(v7, "_internal");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D50], "data");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v25 = 0;
  objc_msgSend(v9, "sendData:toDestinations:priority:options:identifier:error:", v10, v11, v12, v5, v13, &v25);
  v14 = v25;

  v15 = *(void (**)(void))(*(_QWORD *)(a1 + 72) + 16);
LABEL_16:
  v15();

}

uint64_t sub_19079C698(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19079C7E0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "service:didHintCheckingTransportLogWithReason:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_19079C950(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 32);
      v10 = 138412546;
      v11 = v6;
      v12 = 2112;
      v13 = v3;
      v7 = "Failed to send group ahead {group: %@, error: %@}";
LABEL_6:
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v10, 0x16u);
    }
  }
  else if (v5)
  {
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(a1 + 40);
    v10 = 138412546;
    v11 = v8;
    v12 = 2112;
    v13 = v9;
    v7 = "Did send group ahead {group: %@ identifier: %@}";
    goto LABEL_6;
  }

}

void sub_19079CFEC()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", CFSTR("accountsd"), CFSTR("addressbooksyncd"), CFSTR("airplayutil"), CFSTR("amsaccountsd"), CFSTR("assistantd"), CFSTR("Assistive Control"), CFSTR("audioDeviceTest"), CFSTR("audioperftest"), CFSTR("Bridge"), CFSTR("CallHistorySyncHelper"), CFSTR("Carousel"), CFSTR("carouseluitrigger"), CFSTR("ClarityBoard"), CFSTR("cloudpaird"), CFSTR("com.apple.accessibility.AccessibilityUIServer"), CFSTR("com.apple.audio.virtualaudio.IntegrationTests.xctrunner"), CFSTR("com.apple.FTLivePhotoService"),
         CFSTR("companion_proxy"),
         CFSTR("companionappd"),
         CFSTR("companioncamerad"),
         CFSTR("companionfindlocallyd"),
         CFSTR("companionmessagesd"),
         CFSTR("coreautomationd"),
         CFSTR("coreduetd"),
         CFSTR("demod"),
         CFSTR("diagnosticextensionsd"),
         CFSTR("ekgremlin"),
         CFSTR("eventkitsyncd"),
         CFSTR("fmflocatord"),
         CFSTR("gamed"),
         CFSTR("HealthKitControl"),
         CFSTR("homeutil"),
         CFSTR("HomeKitTestHostApp"),
         CFSTR("IDSInvitationTestApp"),
         CFSTR("idsrelay"),
         CFSTR("idstool"),
         CFSTR("IMAP Unit Tests-Runner"),
         CFSTR("IMNotificationServiceAgent"),
         CFSTR("IntegrationTests-Runner"),
         CFSTR("iosdiagnosticsd"),
         CFSTR("iTester"),
         CFSTR("itesterd.mobile"),
         CFSTR("itunescloudd"),
         CFSTR("Legacy Account Migration Tests-"),
         CFSTR("libassistantdTests-Runner"),
         CFSTR("livabilityd"),
         CFSTR("loctilestool"),
         CFSTR("mediaremoted"),
         CFSTR("Messages Catalyst"),
         CFSTR("MessageUnitTests-Runner"),
         CFSTR("MessagesViewService"),
         CFSTR("minilab"),
         CFSTR("mobiletimerd"),
         CFSTR("mstreamd"),
         CFSTR("Music"),
         CFSTR("nanoappregistryd"),
         CFSTR("nanobackupd"),
         CFSTR("nanofindlocallyd"),
         CFSTR("nanomediaremotelinkagent"),
         CFSTR("nanomessagesd"),
         CFSTR("nanomediatool"));
  v1 = (void *)qword_1ECDD6600;
  qword_1ECDD6600 = v0;

}

uint64_t sub_19079D500@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 12) = 2112;
  *(_QWORD *)(a2 + 14) = result;
  return result;
}

void sub_19079E490(_QWORD *a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v5;
  id v6;

  v6 = a2;
  objc_msgSend(*(id *)(a1[4] + 32), "objectForKey:", a1[5]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_msgSend(v3, "copy");

  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD, _QWORD, id))v4)[2](v4, v5, a1[6], 0, v6);

  }
  objc_msgSend(*(id *)(a1[4] + 32), "removeObjectForKey:", a1[5]);

}

void sub_19079EA7C(_QWORD *a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v5;
  id v6;

  v6 = a2;
  objc_msgSend(*(id *)(a1[4] + 32), "objectForKey:", a1[5]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_msgSend(v3, "copy");

  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD, _QWORD, id))v4)[2](v4, v5, a1[6], a1[7], v6);

  }
  objc_msgSend(*(id *)(a1[4] + 32), "removeObjectForKey:", a1[5]);

}

void sub_19079EB24(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  IMGetXPCDictionaryFromDictionary();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  +[IDSLogging IDQuery](IDSLogging, "IDQuery");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 138412802;
    v13 = v4;
    v14 = 2112;
    v15 = v5;
    v16 = 2112;
    v17 = v6;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Received cached id status {destinations: %@, service: %@, error: %@}", (uint8_t *)&v12, 0x20u);
  }

  objc_msgSend(*(id *)(a1[4] + 32), "objectForKey:", a1[5]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_msgSend(v8, "copy");

  if (v9)
    ((void (**)(_QWORD, void *, void *, _QWORD, void *))v9)[2](v9, v4, v5, a1[6], v6);
  if (a1[5])
  {
    objc_msgSend(*(id *)(a1[4] + 32), "removeObjectForKey:");
    +[IDSLogging IDQuery](IDSLogging, "IDQuery");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(void **)(a1[4] + 32);
      v12 = 138412290;
      v13 = v11;
      _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "transactionID map after REMOVE %@", (uint8_t *)&v12, 0xCu);
    }

  }
}

uint64_t sub_19079F35C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0D34EA8], "URIWithPrefixedURI:withServiceLoggingHint:", a2, *(_QWORD *)(a1 + 32));
}

void sub_19079F374(_QWORD *a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v5;
  id v6;

  v6 = a2;
  objc_msgSend(*(id *)(a1[4] + 32), "objectForKey:", a1[5]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_msgSend(v3, "copy");

  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD, _QWORD, id))v4)[2](v4, v5, a1[6], a1[7], v6);

  }
  objc_msgSend(*(id *)(a1[4] + 32), "removeObjectForKey:", a1[5]);

}

void sub_19079F41C(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *v17;
  void *v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  IMGetXPCDataFromDictionary();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  objc_msgSend(v5, "setWithObjects:", v6, v7, v8, v9, objc_opt_class(), 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v10, v4, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  +[IDSLogging IDQuery](IDSLogging, "IDQuery");
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    v20 = v11;
    v21 = 2112;
    v22 = v12;
    v23 = 2112;
    v24 = v13;
    _os_log_impl(&dword_1906E0000, v14, OS_LOG_TYPE_DEFAULT, "Received id status {destinations: %@, service: %@, error: %@}", buf, 0x20u);
  }

  objc_msgSend(*(id *)(a1[4] + 32), "objectForKey:", a1[5]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_msgSend(v15, "copy");

  if (v16)
    ((void (**)(_QWORD, void *, void *, _QWORD, void *))v16)[2](v16, v11, v12, a1[6], v13);
  if (a1[5])
  {
    objc_msgSend(*(id *)(a1[4] + 32), "removeObjectForKey:");
    +[IDSLogging IDQuery](IDSLogging, "IDQuery");
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(void **)(a1[4] + 32);
      *(_DWORD *)buf = 138412290;
      v20 = v18;
      _os_log_impl(&dword_1906E0000, v17, OS_LOG_TYPE_DEFAULT, "transactionID map after REMOVE %@", buf, 0xCu);
    }

  }
}

void sub_19079FC74(_QWORD *a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v5;
  id v6;

  v6 = a2;
  objc_msgSend(*(id *)(a1[4] + 32), "objectForKey:", a1[5]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_msgSend(v3, "copy");

  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD, _QWORD, id))v4)[2](v4, v5, a1[6], a1[7], v6);

  }
  objc_msgSend(*(id *)(a1[4] + 32), "removeObjectForKey:", a1[5]);

}

void sub_19079FD1C(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *v17;
  void *v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  IMGetXPCDataFromDictionary();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  objc_msgSend(v5, "setWithObjects:", v6, v7, v8, v9, objc_opt_class(), 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v10, v4, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  +[IDSLogging IDQuery](IDSLogging, "IDQuery");
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    v20 = v11;
    v21 = 2112;
    v22 = v12;
    v23 = 2112;
    v24 = v13;
    _os_log_impl(&dword_1906E0000, v14, OS_LOG_TYPE_DEFAULT, "Received id status {destinations: %@, service: %@, error: %@}", buf, 0x20u);
  }

  objc_msgSend(*(id *)(a1[4] + 32), "objectForKey:", a1[5]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_msgSend(v15, "copy");

  if (v16)
    ((void (**)(_QWORD, void *, void *, _QWORD, void *))v16)[2](v16, v11, v12, a1[6], v13);
  if (a1[5])
  {
    objc_msgSend(*(id *)(a1[4] + 32), "removeObjectForKey:");
    +[IDSLogging IDQuery](IDSLogging, "IDQuery");
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(void **)(a1[4] + 32);
      *(_DWORD *)buf = 138412290;
      v20 = v18;
      _os_log_impl(&dword_1906E0000, v17, OS_LOG_TYPE_DEFAULT, "transactionID map after REMOVE %@", buf, 0xCu);
    }

  }
}

void sub_1907A05A8(_QWORD *a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v5;
  id v6;

  v6 = a2;
  objc_msgSend(*(id *)(a1[4] + 32), "objectForKey:", a1[5]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_msgSend(v3, "copy");

  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *, _QWORD, _QWORD, id))v4)[2](v4, v5, a1[6], a1[7], v6);

  }
  objc_msgSend(*(id *)(a1[4] + 32), "removeObjectForKey:", a1[5]);

}

void sub_1907A0650(_QWORD *a1, void *a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void (**v18)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *v19;
  void *v20;
  void *v21;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  IMGetXPCDataFromDictionary();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  objc_msgSend(v21, "setWithObjects:", v4, v5, v6, v7, v8, v9, v10, v11, objc_opt_class(), 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", v12, v3, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  IMGetXPCStringFromDictionary();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  IMGetXPCKeyedCodableFromDictionaryWithSecureCoding();
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  +[IDSLogging IDQuery](IDSLogging, "IDQuery");
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    v24 = v13;
    v25 = 2112;
    v26 = v14;
    v27 = 2112;
    v28 = v15;
    _os_log_impl(&dword_1906E0000, v16, OS_LOG_TYPE_DEFAULT, "Received id status {destinations: %@, service: %@, error: %@}", buf, 0x20u);
  }

  objc_msgSend(*(id *)(a1[4] + 32), "objectForKey:", a1[5]);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_msgSend(v17, "copy");

  if (v18)
    ((void (**)(_QWORD, void *, void *, _QWORD, void *))v18)[2](v18, v13, v14, a1[6], v15);
  if (a1[5])
  {
    objc_msgSend(*(id *)(a1[4] + 32), "removeObjectForKey:");
    +[IDSLogging IDQuery](IDSLogging, "IDQuery");
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(void **)(a1[4] + 32);
      *(_DWORD *)buf = 138412290;
      v24 = v20;
      _os_log_impl(&dword_1906E0000, v19, OS_LOG_TYPE_DEFAULT, "transactionID map after REMOVE %@", buf, 0xCu);
    }

  }
}

void sub_1907A0C30(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD block[5];
  uint8_t buf[16];

  +[IDSLogging IDQuery](IDSLogging, "IDQuery");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Query service disconnected", buf, 2u);
  }

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(NSObject **)(v3 + 56);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1907A0CEC;
  block[3] = &unk_1E2C60550;
  block[4] = v3;
  dispatch_async(v4, block);
}

void sub_1907A0CEC(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_1907A0D08(uint64_t a1, void *a2)
{
  id v3;
  void (**v4)(_QWORD, _QWORD);
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void (**)(_QWORD, _QWORD))MEMORY[0x19400FE1C](*(_QWORD *)(a1 + 32));
  if (MEMORY[0x1940102E4](v3) == MEMORY[0x1E0C81310])
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", xpc_dictionary_get_string(v3, (const char *)*MEMORY[0x1E0C81270]));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[IDSLogging IDQuery](IDSLogging, "IDQuery");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1907F8A88((uint64_t)v6, v7);

    if (v4)
    {
      v8 = (void *)MEMORY[0x1E0CB35C8];
      v11 = *MEMORY[0x1E0CB2938];
      v12[0] = v6;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "errorWithDomain:code:userInfo:", CFSTR("IDSIDQueryControllerErrorDomain"), -1000, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v4)[2](v4, v10);

    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
      (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
  }

}

id sub_1907A14F8()
{
  IDSXPCDaemonController *v0;
  void *v1;
  void *v2;
  id v3;

  v0 = [IDSXPCDaemonController alloc];
  +[IDSInternalQueueController sharedInstance](IDSInternalQueueController, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "queue");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = -[IDSXPCDaemonController initSyncControllerWithQueue:](v0, "initSyncControllerWithQueue:", v2);

  return v3;
}

void sub_1907A1644(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a1;
  v4 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1907A45AC;
  v7[3] = &unk_1E2C62DA8;
  v8 = v4;
  v9 = v3;
  v5 = v3;
  v6 = v4;
  +[IDSXPCDaemonController performDaemonControllerTask:](IDSXPCDaemonController, "performDaemonControllerTask:", v7);

}

uint64_t sub_1907A16EC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "requestSelectedSubscriptionsWithCompletion:", *(_QWORD *)(a1 + 32));
}

uint64_t sub_1907A18E0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "selectSubscription:withCompletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_1907A1AD4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "unselectSubscription:withCompletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_1907A1CC8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setSelectedSubscriptions:withCompletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1907A1EC4(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1907A1F4C;
  v5[3] = &unk_1E2C61A88;
  v6 = *(id *)(a1 + 40);
  objc_msgSend(a2, "registrationCollaboratorWithErrorHandler:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeTemporaryPhoneAlias:withCompletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1907A1F4C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F8EEC();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1907A21B4(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1907A223C;
  v5[3] = &unk_1E2C61A88;
  v6 = *(id *)(a1 + 40);
  objc_msgSend(a2, "registrationCollaboratorWithErrorHandler:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "disableTemporaryPhoneAlias:withCompletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1907A223C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F8EEC();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1907A24A4(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1907A252C;
  v5[3] = &unk_1E2C61A88;
  v6 = *(id *)(a1 + 40);
  objc_msgSend(a2, "registrationCollaboratorWithErrorHandler:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "enableTemporaryPhoneAlias:withCompletion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_1907A252C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F8EEC();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1907A2684(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "requestUnselectedTemporaryPhoneAliasesWithCompletion:", *(_QWORD *)(a1 + 32));
}

void sub_1907A284C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907A2880(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a3)
  {
    v8 = v3;
    v9 = v4;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1907A28E8;
    v5[3] = &unk_1E2C642E0;
    v6 = *(_OWORD *)(result + 32);
    v7 = *(_QWORD *)(result + 48);
    return objc_msgSend(a2, "requestSelectedSubscriptionsWithCompletion:", v5);
  }
  return result;
}

void sub_1907A28E8(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void **v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (v10)
  {
    v6 = (void **)(*(_QWORD *)(a1[4] + 8) + 40);
    v7 = v10;
  }
  else
  {
    v6 = (void **)(*(_QWORD *)(a1[5] + 8) + 40);
    v7 = v5;
  }
  v8 = v7;
  v9 = *v6;
  *v6 = v8;

  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
}

void sub_1907A2C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907A2C64(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a3)
  {
    v9 = v3;
    v10 = v4;
    v5 = *(_QWORD *)(result + 32);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_1907A2CD0;
    v6[3] = &unk_1E2C642E0;
    v7 = *(_OWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    return objc_msgSend(a2, "selectSubscription:withCompletion:", v5, v6);
  }
  return result;
}

void sub_1907A2CD0(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void **v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (v10)
  {
    v6 = (void **)(*(_QWORD *)(a1[4] + 8) + 40);
    v7 = v10;
  }
  else
  {
    v6 = (void **)(*(_QWORD *)(a1[5] + 8) + 40);
    v7 = v5;
  }
  v8 = v7;
  v9 = *v6;
  *v6 = v8;

  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
}

void sub_1907A3010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907A304C(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a3)
  {
    v9 = v3;
    v10 = v4;
    v5 = *(_QWORD *)(result + 32);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_1907A30B8;
    v6[3] = &unk_1E2C642E0;
    v7 = *(_OWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    return objc_msgSend(a2, "unselectSubscription:withCompletion:", v5, v6);
  }
  return result;
}

void sub_1907A30B8(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void **v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (v10)
  {
    v6 = (void **)(*(_QWORD *)(a1[4] + 8) + 40);
    v7 = v10;
  }
  else
  {
    v6 = (void **)(*(_QWORD *)(a1[5] + 8) + 40);
    v7 = v5;
  }
  v8 = v7;
  v9 = *v6;
  *v6 = v8;

  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
}

void sub_1907A33F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907A3434(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a3)
  {
    v9 = v3;
    v10 = v4;
    v5 = *(_QWORD *)(result + 32);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_1907A34A0;
    v6[3] = &unk_1E2C642E0;
    v7 = *(_OWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    return objc_msgSend(a2, "setSelectedSubscriptions:withCompletion:", v5, v6);
  }
  return result;
}

void sub_1907A34A0(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void **v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (v10)
  {
    v6 = (void **)(*(_QWORD *)(a1[4] + 8) + 40);
    v7 = v10;
  }
  else
  {
    v6 = (void **)(*(_QWORD *)(a1[5] + 8) + 40);
    v7 = v5;
  }
  v8 = v7;
  v9 = *v6;
  *v6 = v8;

  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
}

void sub_1907A37E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907A381C(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a3)
  {
    v9 = v3;
    v10 = v4;
    v5 = *(_QWORD *)(result + 32);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_1907A3888;
    v6[3] = &unk_1E2C64358;
    v7 = *(_OWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    return objc_msgSend(a2, "removeTemporaryPhoneAlias:withCompletion:", v5, v6);
  }
  return result;
}

void sub_1907A3888(_QWORD *a1, char a2, void *a3)
{
  id v6;
  id v7;

  v6 = a3;
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
  if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    v7 = v6;
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a3);
    v6 = v7;
  }
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;

}

void sub_1907A3BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907A3BF0(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a3)
  {
    v9 = v3;
    v10 = v4;
    v5 = *(_QWORD *)(result + 32);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_1907A3C5C;
    v6[3] = &unk_1E2C64358;
    v7 = *(_OWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    return objc_msgSend(a2, "enableTemporaryPhoneAlias:withCompletion:", v5, v6);
  }
  return result;
}

void sub_1907A3C5C(_QWORD *a1, char a2, void *a3)
{
  id v6;
  id v7;

  v6 = a3;
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
  if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    v7 = v6;
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a3);
    v6 = v7;
  }
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;

}

void sub_1907A3F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907A3FC4(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a3)
  {
    v9 = v3;
    v10 = v4;
    v5 = *(_QWORD *)(result + 32);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_1907A4030;
    v6[3] = &unk_1E2C64358;
    v7 = *(_OWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    return objc_msgSend(a2, "disableTemporaryPhoneAlias:withCompletion:", v5, v6);
  }
  return result;
}

void sub_1907A4030(_QWORD *a1, char a2, void *a3)
{
  id v6;
  id v7;

  v6 = a3;
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
  if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    v7 = v6;
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a3);
    v6 = v7;
  }
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;

}

void sub_1907A426C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907A42A0(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a3)
  {
    v8 = v3;
    v9 = v4;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1907A4308;
    v5[3] = &unk_1E2C642E0;
    v6 = *(_OWORD *)(result + 32);
    v7 = *(_QWORD *)(result + 48);
    return objc_msgSend(a2, "requestUnselectedTemporaryPhoneAliasesWithCompletion:", v5);
  }
  return result;
}

void sub_1907A4308(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void **v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (v10)
  {
    v6 = (void **)(*(_QWORD *)(a1[4] + 8) + 40);
    v7 = v10;
  }
  else
  {
    v6 = (void **)(*(_QWORD *)(a1[5] + 8) + 40);
    v7 = v5;
  }
  v8 = v7;
  v9 = *v6;
  *v6 = v8;

  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
}

void sub_1907A452C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907A4548(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1907A45AC(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1907A463C;
  v5[3] = &unk_1E2C61A88;
  v6 = *(id *)(a1 + 32);
  objc_msgSend(a2, "registrationCollaboratorWithErrorHandler:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1907A463C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907F8EEC();

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1907A4F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907A4FA0(uint64_t a1)
{
  IDSXPCConnectionRemoteObjectPromise *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;

  v2 = [IDSXPCConnectionRemoteObjectPromise alloc];
  +[IDSXPCGroupSessionKeyValueDeliveryInterface interface](IDSXPCGroupSessionKeyValueDeliveryInterface, "interface");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[IDSInternalQueueController sharedInstance](IDSInternalQueueController, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "queue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[IDSXPCConnectionRemoteObjectPromise initWithInterface:queue:](v2, "initWithInterface:queue:", v3, v5);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1907A50A0;
  v11[3] = &unk_1E2C643D0;
  v9 = *(id *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v12 = v9;
  v13 = v10;
  +[IDSXPCDaemonController performDaemonControllerTask:](IDSXPCDaemonController, "performDaemonControllerTask:", v11);

}

void sub_1907A50A0(uint64_t a1, void *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;

  v4 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = sub_1907A5174;
  v12[3] = &unk_1E2C64380;
  v13 = *(id *)(a1 + 32);
  objc_msgSend(a2, "groupSessionKeyValueDeliveryProviderCollaboratorWithErrorHandler:", v12);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(void **)(a1 + 32);
  v9[0] = v4;
  v9[1] = 3221225472;
  v9[2] = sub_1907A51DC;
  v9[3] = &unk_1E2C643A8;
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 40);
  v10 = v7;
  v11 = v8;
  objc_msgSend(v5, "keyValueDeliveryForSessionID:completionHandler:", v7, v9);

}

void sub_1907A5174(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "GroupSessionKeyValueDelivery");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1907F94F8();

}

void sub_1907A51DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0D34D40], "GroupSessionKeyValueDelivery");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1907F94F8();

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "failWithError:", v6);
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 138412290;
      v10 = v5;
      _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "keyValueDelivery: %@", (uint8_t *)&v9, 0xCu);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "fulfillWithRemoteObject:", v5);
  }

}

void sub_1907A53A8(uint64_t a1)
{
  void *v2;
  void *v3;
  IDSGroupSessionKeyValueDeliveryHandlerProxy *v4;

  v4 = -[IDSGroupSessionKeyValueDeliveryHandlerProxy initWithHandler:]([IDSGroupSessionKeyValueDeliveryHandlerProxy alloc], "initWithHandler:", *(_QWORD *)(a1 + 32));
  v2 = *(void **)(*(_QWORD *)(a1 + 40) + 16);
  -[IDSGroupSessionKeyValueDeliveryHandlerProxy handlerUUID](v4, "handlerUUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addDeliveryHandler:uuid:", v4, v3);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "addObject:", v4);
}

void sub_1907A54D4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t buf[4];
  uint64_t v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v15;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v15 != v5)
        objc_enumerationMutation(v2);
      v7 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v6);
      objc_msgSend(v7, "handler", (_QWORD)v14);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(void **)(a1 + 40);

      if (v8 == v9)
        break;
      if (v4 == ++v6)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v20, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v10 = v7;

    if (!v10)
      goto LABEL_12;
    v11 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
    -[NSObject handlerUUID](v10, "handlerUUID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "removeDeliveryHandler:", v12);

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "removeObject:", v10);
  }
  else
  {
LABEL_9:

LABEL_12:
    objc_msgSend(MEMORY[0x1E0D34D40], "GroupSessionKeyValueDelivery", (_QWORD)v14);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v19 = v13;
      _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "removeDeliveryHandler: could not find proxy for handler %@", buf, 0xCu);
    }
  }

}

void sub_1907A573C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D34D40], "GroupSessionKeyValueDelivery");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 40);
    v7[0] = 67109376;
    v7[1] = v3;
    v8 = 2048;
    v9 = v4;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "requestDataForKey: getting key %d for participant %llu", (uint8_t *)v7, 0x12u);
  }

  v5 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  if (v5)
  {
    objc_msgSend(v5, "requestDataForKey:participantID:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D34D40], "GroupSessionKeyValueDelivery");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "requestDataForKey: xpc not ready", (uint8_t *)v7, 2u);
    }

  }
}

void sub_1907A5978(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  int v19;
  uint64_t v20;
  const __CFString *v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D34D40], "GroupSessionKeyValueDelivery");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 64);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412802;
    v23 = v4;
    v24 = 1024;
    v25 = v3;
    v26 = 2112;
    v27 = v5;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "sendData: sending data: %@ with key: %d for capability: %@", buf, 0x1Cu);
  }

  v6 = *(void **)(*(_QWORD *)(a1 + 48) + 16);
  if (!v6)
  {
    v7 = (void *)MEMORY[0x1E0CB35C8];
    v20 = *MEMORY[0x1E0CB2938];
    v21 = CFSTR("XPC doesn't set up");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "errorWithDomain:code:userInfo:", CFSTR("IDSXPCConnectionErrorDomain"), -3000, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = *(_QWORD *)(a1 + 56);
    if (v10)
      (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v9);

    v6 = *(void **)(*(_QWORD *)(a1 + 48) + 16);
  }
  v11 = *(unsigned int *)(a1 + 64);
  v12 = *(unsigned int *)(a1 + 68);
  v13 = *(void **)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_1907A5B7C;
  v15[3] = &unk_1E2C64420;
  v16 = v13;
  v19 = *(_DWORD *)(a1 + 64);
  v17 = *(id *)(a1 + 40);
  v18 = *(id *)(a1 + 56);
  objc_msgSend(v6, "sendData:forKey:encryption:capability:withCompletion:", v16, v11, v12, v14, v15);

}

void sub_1907A5B7C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "GroupSessionKeyValueDelivery");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v9 = 138412802;
    v10 = v6;
    v11 = 1024;
    v12 = v5;
    v13 = 2112;
    v14 = v7;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "sendData: finished sending data: %@ with key: %d for capability:%@", (uint8_t *)&v9, 0x1Cu);
  }

  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v3);

}

uint64_t sub_1907A5D30(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), sel_test_receiveData_forKey_fromParticipant_);
}

id sub_1907A6374(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  unint64_t v5;
  __CFString **v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  int v12;
  __CFString *v13;
  uint64_t v14;
  id v15;
  void *v16;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "domain");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "isEqualToIgnoringCase:", *MEMORY[0x1E0D34418]);

    if (v4)
    {
      v5 = objc_msgSend(v2, "code") - 101;
      if (v5 < 5)
      {
        v6 = &off_1E2C64468[v5];
        v7 = &unk_19080A7C0;
LABEL_12:
        v13 = *v6;
        v14 = v7[v5];
LABEL_14:
        v15 = objc_alloc(MEMORY[0x1E0C99D80]);
        v16 = (void *)objc_msgSend(v15, "initWithObjectsAndKeys:", v2, *MEMORY[0x1E0CB3388], v13, *MEMORY[0x1E0CB2D50], 0);
        v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), v14, v16);

        goto LABEL_15;
      }
    }
    else
    {
      objc_msgSend(v2, "domain");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "isEqualToIgnoringCase:", *MEMORY[0x1E0D34B90]);

      if (v10)
      {
        v5 = objc_msgSend(v2, "code") - 1;
        if (v5 < 0x25)
        {
          v6 = &off_1E2C64490[v5];
          v7 = &unk_19080A7E8;
          goto LABEL_12;
        }
      }
      else
      {
        objc_msgSend(v2, "domain");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "isEqualToIgnoringCase:", *MEMORY[0x1E0D344F8]);

        if (v12)
        {
          v5 = objc_msgSend(v2, "code") + 1;
          if (v5 < 4)
          {
            v6 = &off_1E2C645B8[v5];
            v7 = &unk_19080A910;
            goto LABEL_12;
          }
        }
      }
    }
    v13 = 0;
    v14 = 200;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_15:

  return v8;
}

id sub_1907A6530()
{
  if (qword_1EE1E2038 != -1)
    dispatch_once(&qword_1EE1E2038, &unk_1E2C5FCD0);
  return (id)qword_1EE1E2030;
}

void sub_1907A6570()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "bundleIdentifier");
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)qword_1EE1E2030;
  qword_1EE1E2030 = v1;

  if (!qword_1EE1E2030)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "executablePath");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "lastPathComponent");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)qword_1EE1E2030;
    qword_1EE1E2030 = v4;

  }
}

uint64_t IDSLog(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = a2;
  v4 = a1;
  sub_1907A6530();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = _IDSLog();

  return v6;
}

uint64_t IDSWarn(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  sub_1907A6530();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = _IDSWarn();

  return v3;
}

void sub_1907A6740()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "IDSService");
  v1 = (void *)qword_1ECDD6570;
  qword_1ECDD6570 = (uint64_t)v0;

}

void sub_1907A67B0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "QRAllocator");
  v1 = (void *)qword_1EE1E2040;
  qword_1EE1E2040 = (uint64_t)v0;

}

void sub_1907A6820()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "IDSConnection");
  v1 = (void *)qword_1ECDD6558;
  qword_1ECDD6558 = (uint64_t)v0;

}

void sub_1907A6890()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "IDSDeviceConnection");
  v1 = (void *)qword_1EE1E2050;
  qword_1EE1E2050 = (uint64_t)v0;

}

void sub_1907A6900()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "IDSDataChannels");
  v1 = (void *)qword_1EE1E2060;
  qword_1EE1E2060 = (uint64_t)v0;

}

void sub_1907A6970()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "IDSLocalSetup");
  v1 = (void *)qword_1EE1E2070;
  qword_1EE1E2070 = (uint64_t)v0;

}

void sub_1907A69E0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "IDSReportSpam");
  v1 = (void *)qword_1EE1E1E78;
  qword_1EE1E1E78 = (uint64_t)v0;

}

void sub_1907A6A50()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Transport", "NRPairing");
  v1 = (void *)qword_1EE1E1E38;
  qword_1EE1E1E38 = (uint64_t)v0;

}

void sub_1907A6AC0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "");
  v1 = (void *)qword_1EE1E2080;
  qword_1EE1E2080 = (uint64_t)v0;

}

void sub_1907A6B30()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "transactionLog");
  v1 = (void *)qword_1EE1E2090;
  qword_1EE1E2090 = (uint64_t)v0;

}

void sub_1907A6BA0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "DaemonListener");
  v1 = (void *)qword_1ECDD6638;
  qword_1ECDD6638 = (uint64_t)v0;

}

void sub_1907A6C10()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSService");
  v1 = (void *)qword_1EE1E20A0;
  qword_1EE1E20A0 = (uint64_t)v0;

}

void sub_1907A6C80()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSConnection");
  v1 = (void *)qword_1EE1E20B0;
  qword_1EE1E20B0 = (uint64_t)v0;

}

void sub_1907A6CF0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSConnection-oversize");
  v1 = (void *)qword_1ECDD6430;
  qword_1ECDD6430 = (uint64_t)v0;

}

void sub_1907A6D60()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSDirectMessagingConnection");
  v1 = (void *)qword_1ECDD65D8;
  qword_1ECDD65D8 = (uint64_t)v0;

}

void sub_1907A6DD0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "continuity");
  v1 = (void *)qword_1EE1E20C0;
  qword_1EE1E20C0 = (uint64_t)v0;

}

void sub_1907A6E40()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSSession");
  v1 = (void *)qword_1EE1E20D0;
  qword_1EE1E20D0 = (uint64_t)v0;

}

void sub_1907A6EB0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "CFS");
  v1 = (void *)qword_1EE1E20D8;
  qword_1EE1E20D8 = (uint64_t)v0;

}

void sub_1907A6F20()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "_IDSGroupSession");
  v1 = (void *)qword_1EE1E20E8;
  qword_1EE1E20E8 = (uint64_t)v0;

}

void sub_1907A6F90()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "_IDSGroupSession-oversize");
  v1 = (void *)qword_1EE1E20F8;
  qword_1EE1E20F8 = (uint64_t)v0;

}

void sub_1907A7000()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "DaemonProxy");
  v1 = (void *)qword_1EE1E2108;
  qword_1EE1E2108 = (uint64_t)v0;

}

void sub_1907A7070()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "GUIDTRACE");
  v1 = (void *)qword_1ECDD6580;
  qword_1ECDD6580 = (uint64_t)v0;

}

void sub_1907A70E0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSDevice");
  v1 = (void *)qword_1EE1E2118;
  qword_1EE1E2118 = (uint64_t)v0;

}

void sub_1907A7150()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSDeviceConnection");
  v1 = (void *)qword_1EE1E2128;
  qword_1EE1E2128 = (uint64_t)v0;

}

void sub_1907A71C0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSDataChannels");
  v1 = (void *)qword_1EE1E2138;
  qword_1EE1E2138 = (uint64_t)v0;

}

void sub_1907A7230()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSRealTimeEncryptionProxy");
  v1 = (void *)qword_1EE1E2148;
  qword_1EE1E2148 = (uint64_t)v0;

}

void sub_1907A72A0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "IDSiCloudSignInHack");
  v1 = (void *)qword_1EE1E2158;
  qword_1EE1E2158 = (uint64_t)v0;

}

void sub_1907A7310()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.IDS", "_IDSSession");
  v1 = (void *)qword_1EE1E2168;
  qword_1EE1E2168 = (uint64_t)v0;

}

void sub_1907A8834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1907A8868(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  void *v4;
  uint64_t v5;
  uint8_t v6[16];

  objc_msgSend(MEMORY[0x1E0D34D40], "xpc");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "IDSXPCConnection interrupted", v6, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_cleanupAllPendingTransactions");
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(void))(v5 + 16))();

}

void sub_1907A8904(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  void *v4;
  uint64_t v5;
  uint8_t v6[16];

  objc_msgSend(MEMORY[0x1E0D34D40], "xpc");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "IDSXPCConnection invalidated", v6, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_cleanupAllPendingTransactions");
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(void))(v5 + 16))();

}

id sub_1907A8BC0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
    (*(void (**)(void))(v1 + 16))();
  return (id)objc_opt_self();
}

id sub_1907A8CC8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
    (*(void (**)(void))(v1 + 16))();
  return (id)objc_opt_self();
}

id sub_1907A8E24(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
    (*(void (**)(void))(v1 + 16))();
  return (id)objc_opt_self();
}

uint64_t sub_1907A92A0(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_invoke);
}

uint64_t sub_1907A92A8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return pthread_dependency_fulfill_np();
}

uint64_t sub_1907A9450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
}

void sub_1907A9BA4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void (**v8)(_QWORD);
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void (**v15)(_QWORD, _QWORD);
  uint64_t v16;
  void *v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D34D40], "xpc");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    v19 = v3;
    v20 = 2114;
    v21 = v4;
    v22 = 2114;
    v23 = v5;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "xpc message timed out -- calling error {selector: %{public}@, uuid: %{public}@, timeout: %{public}@}", buf, 0x20u);
  }

  objc_msgSend(*(id *)(a1 + 56), "connection");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "pendingTransactions");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40));
  v8 = (void (**)(_QWORD))objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 56), "connection");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "pendingTransactions");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Timed-out expecting response for @selector(%@)"), *(_QWORD *)(a1 + 32));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)MEMORY[0x1E0CB35C8];
    v16 = *MEMORY[0x1E0CB2938];
    v17 = v11;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "errorWithDomain:code:userInfo:", CFSTR("IDSXPCConnectionErrorDomain"), -1000, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 56), "errorHandler");
    v15 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v15)[2](v15, v14);

    v8[2](v8);
  }

}

void sub_1907A9D94(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D34D40], "xpc");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = 138543618;
    v6 = v3;
    v7 = 2114;
    v8 = v4;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Clearing transaction timeout timer {selector: %{public}@, uuid: %{public}@}", (uint8_t *)&v5, 0x16u);
  }

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 48));
}

void sub_1907A9E54(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD);
  void (**v8)(void);

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "connection");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pendingTransactions");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40));
  v8 = (void (**)(void))objc_claimAutoreleasedReturnValue();

  if (v8)
    v8[2]();
  objc_msgSend(*(id *)(a1 + 32), "errorHandler");
  v7 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, id))v7)[2](v7, v4);

}

void sub_1907A9EFC(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD, _QWORD);
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "errorHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "errorHandler");
    v4 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id))v4)[2](v4, v5);

  }
}

void sub_1907AA4E0(id *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  NSObject *v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  +[IDSInternalQueueController sharedInstance](IDSInternalQueueController, "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "queue");
  v6 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1907AA5AC;
  v7[3] = &unk_1E2C60330;
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = a3;
  dispatch_async(v6, v7);

}

void sub_1907AA5AC(uint64_t a1)
{
  unsigned __int8 *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _BYTE v20[10];
  unsigned __int8 *v21;
  _BYTE v22[10];
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "object");
  v2 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v19 = 138412802;
    *(_QWORD *)v20 = v4;
    *(_WORD *)&v20[8] = 2048;
    v21 = v2;
    *(_WORD *)v22 = 2112;
    *(_QWORD *)&v22[2] = v5;
    _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "Received device state note {uniqueID: %@, weakSelf: %p, nearbyID: %@}", (uint8_t *)&v19, 0x20u);
  }

  if (v2)
  {
    v6 = v2[36];
    v7 = v2[37];
    v8 = v2[39];
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (*MEMORY[0x1E0D35030] & v9) != 0;
    v2[36] = v10;
    v11 = (*MEMORY[0x1E0D35028] & v9) != 0;
    v2[37] = v11;
    v12 = (*MEMORY[0x1E0D35020] & v9) != 0;
    v2[39] = v12;
    v13 = v6 == v10 && v7 == v11;
    v14 = !v13;
    if (!v13)
      objc_msgSend(v2, "_nearbyStateChanged");
    if (v7 == v11)
    {
      if (v8 == v12)
      {
        if (!v14)
          goto LABEL_20;
        goto LABEL_19;
      }
    }
    else
    {
      objc_msgSend(v2, "_connectedStateChanged");
      if (v8 == v12)
        goto LABEL_19;
    }
    objc_msgSend(v2, "_cloudConnectedStateChanged");
LABEL_19:
    objc_msgSend(v2, "_stateChanged");
LABEL_20:
    objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = v2[36];
      v17 = v2[37];
      v18 = v2[39];
      v19 = 67110400;
      *(_DWORD *)v20 = v6;
      *(_WORD *)&v20[4] = 1024;
      *(_DWORD *)&v20[6] = v7;
      LOWORD(v21) = 1024;
      *(_DWORD *)((char *)&v21 + 2) = v8;
      HIWORD(v21) = 1024;
      *(_DWORD *)v22 = v16;
      *(_WORD *)&v22[4] = 1024;
      *(_DWORD *)&v22[6] = v17;
      v23 = 1024;
      v24 = v18;
      _os_log_impl(&dword_1906E0000, v15, OS_LOG_TYPE_DEFAULT, "Device note -- old: {isNearby: %d, isConnected: %d, isCloudConnected: %d} new: {isNearby: %d, isConnected: %d, isCloudConnected: %d}", (uint8_t *)&v19, 0x26u);
    }

  }
}

void sub_1907AD198()
{
  NSObject *v0;
  dispatch_queue_t v1;
  void *v2;
  NSObject *attr;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_UTILITY, 0);
  attr = objc_claimAutoreleasedReturnValue();

  v1 = dispatch_queue_create("com.apple._IDSDevice.notification", attr);
  v2 = (void *)qword_1ECDD6628;
  qword_1ECDD6628 = (uint64_t)v1;

}

void sub_1907AD590(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (objc_msgSend(v5, "count"))
  {
    objc_msgSend(*(id *)(a1 + 32), "_cacheForService:", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v6, "mutableCopy");

    if (v7)
      objc_msgSend(v7, "addEntriesFromDictionary:", v5);
    else
      v7 = (void *)objc_msgSend(v5, "mutableCopy");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setObject:forKey:", v7, v8);

  }
}

void sub_1907AD708(uint64_t a1)
{
  id WeakRetained;
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  __int16 v7[8];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = *(id *)(*(_QWORD *)(a1 + 32) + 24);

  if (WeakRetained == v3)
  {
    +[IDSLogging IDQuery](IDSLogging, "IDQuery");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 0;
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Purging idStatusCache", (uint8_t *)v7, 2u);
    }

    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;

  }
}

uint64_t sub_1907AD938(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1907ADB88(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  id v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    +[IDSLogging IDQuery](IDSLogging, "IDQuery");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 138412546;
      v7 = v3;
      v8 = 2112;
      v9 = v5;
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Notifying delegate %@ about KT peer verification results for service: %@", (uint8_t *)&v6, 0x16u);
    }

    objc_msgSend(v3, "idsKTVerifierResultsUpdatedForDestinations:service:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  }

}

void sub_1907AE314(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  _QWORD *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  uint8_t buf[4];
  id v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = (void *)MEMORY[0x19400FC60]();
  v14 = *(_QWORD **)(a1 + 32);
  if (v14[3])
    objc_msgSend(v14, "_updateCacheWithDictionary:service:", v9, *(_QWORD *)(a1 + 40));
  +[IDSLogging IDQuery](IDSLogging, "IDQuery");
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v27 = v10;
    v28 = 2112;
    v29 = v9;
    _os_log_impl(&dword_1906E0000, v15, OS_LOG_TYPE_DEFAULT, "Received results for service: %@  updates %@", buf, 0x16u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_delegateMapForListenerID:service:", *(_QWORD *)(a1 + 48), v10);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = *(void **)(a1 + 32);
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = sub_1907AE538;
  v24[3] = &unk_1E2C61A38;
  v18 = v9;
  v25 = v18;
  objc_msgSend(v17, "_callDelegatesWithBlock:delegateMap:", v24, v16);
  if (*(_QWORD *)(a1 + 56))
  {
    v19 = objc_alloc(MEMORY[0x1E0D13220]);
    v20 = v19;
    if (v12)
    {
      v21 = (void *)objc_msgSend(v19, "initWithError:", v12);
    }
    else
    {
      objc_msgSend(v18, "objectForKey:", v10);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1907AE6C4(v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = (void *)objc_msgSend(v20, "initWithSuccess:", v23);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

  }
  objc_autoreleasePoolPop(v13);

}

void sub_1907AE538(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = *(void **)(a1 + 32);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1907AE5C8;
    v5[3] = &unk_1E2C61A10;
    v6 = v4;
    objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v5);

  }
}

void sub_1907AE5C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a2;
  +[IDSLogging IDQuery](IDSLogging, "IDQuery");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v11 = 138412290;
    v12 = v8;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Notifying delegate %@ about ID status update", (uint8_t *)&v11, 0xCu);
  }

  v9 = *(void **)(a1 + 32);
  sub_1907AE6C4(v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "idStatusUpdatedForDestinations:service:", v10, v6);
}

id sub_1907AE6C4(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char isKindOfClass;
  void *v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v7);
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();
        objc_msgSend(v3, "objectForKeyedSubscript:", v8, (_QWORD)v14);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if ((isKindOfClass & 1) != 0)
        {
          objc_msgSend(v8, "prefixedURI");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, v11);

        }
        else
        {
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, v8);
        }

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v5);
  }

  v12 = (void *)objc_msgSend(v2, "copy");
  return v12;
}

void sub_1907AE854(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  NSObject *v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (*(_BYTE *)(a1 + 48))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v13 = *(void **)(a1 + 40);
    v14 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 56);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1907AE97C;
    block[3] = &unk_1E2C62200;
    v20 = v13;
    v16 = v9;
    v17 = v10;
    v18 = v11;
    v19 = v12;
    dispatch_async(v14, block);

  }
}

uint64_t sub_1907AE97C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1[8] + 16))(a1[8], a1[4], a1[5], a1[6], a1[7]);
}

void sub_1907AEC28(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  if (*(_BYTE *)(a1 + 48))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1907AECD8;
    v5[3] = &unk_1E2C60E00;
    v4 = *(NSObject **)(a1 + 32);
    v7 = *(id *)(a1 + 40);
    v6 = v3;
    dispatch_async(v4, v5);

  }
}

uint64_t sub_1907AECD8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1907AEDF0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v6 = v3;
    if (objc_msgSend(v3, "state"))
    {
      (*(void (**)(uint64_t, _QWORD))(v4 + 16))(v4, MEMORY[0x1E0C9AA70]);
    }
    else
    {
      objc_msgSend(v6, "value");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

    }
    v3 = v6;
  }

}

void sub_1907AF00C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 48))
  {
    if (!objc_msgSend(v3, "state"))
    {
      objc_msgSend(v4, "value");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "objectForKey:", *(_QWORD *)(a1 + 32));
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        objc_msgSend(v6, "integerValue");
      }
      else
      {
        +[IDSLogging IDQuery](IDSLogging, "IDQuery");
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          IDSLoggableDescriptionForHandleOnService();
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "value");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = 138412546;
          v11 = v8;
          v12 = 2112;
          v13 = v9;
          _os_log_error_impl(&dword_1906E0000, v7, OS_LOG_TYPE_ERROR, "Destination \"%@\" not found in id query results %@. Verify destination is a properly formed IDS destination (and not just the handle string).", (uint8_t *)&v10, 0x16u);

        }
      }

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_1907AF2CC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 40))
  {
    if (!objc_msgSend(v3, "state"))
    {
      objc_msgSend(v4, "value");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "objectForKey:", *(_QWORD *)(a1 + 32));
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        objc_msgSend(v6, "integerValue");
      }
      else
      {
        +[IDSLogging IDQuery](IDSLogging, "IDQuery");
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_1907FACE0((uint64_t *)(a1 + 32), v4, v7);

      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_1907AF484(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v6 = v3;
    if (objc_msgSend(v3, "state"))
    {
      (*(void (**)(uint64_t, _QWORD))(v4 + 16))(v4, MEMORY[0x1E0C9AA70]);
    }
    else
    {
      objc_msgSend(v6, "value");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

    }
    v3 = v6;
  }

}

void sub_1907AF638(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    objc_msgSend(a2, "objectForKey:", *(_QWORD *)(a1 + 32));
    v3 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, objc_msgSend(v3, "integerValue"));

  }
}

void sub_1907AF894(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  void (**v28)(_QWORD);
  void *v29;
  id v30;
  void *context;
  id v33;
  id v34;
  uint64_t v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  id v40;
  _QWORD v41[4];
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t buf[4];
  id v52;
  __int16 v53;
  id v54;
  __int16 v55;
  id v56;
  _BYTE v57[128];
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v34 = a3;
  v33 = a4;
  v30 = a5;
  context = (void *)MEMORY[0x19400FC60]();
  v9 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v10 = v8;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
  if (v11)
  {
    v12 = v11;
    v35 = *(_QWORD *)v48;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v48 != v35)
          objc_enumerationMutation(v10);
        v14 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * i);
        objc_msgSend(v9, "appendFormat:", CFSTR("\n    \"%@\" =     (\n"), v14);
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        objc_msgSend(v10, "objectForKeyedSubscript:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v43, v57, 16);
        if (v16)
        {
          v17 = v16;
          v18 = *(_QWORD *)v44;
          do
          {
            for (j = 0; j != v17; ++j)
            {
              if (*(_QWORD *)v44 != v18)
                objc_enumerationMutation(v15);
              objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * j), "debugDescription");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v9, "appendFormat:", CFSTR("        %@\n"), v20);

            }
            v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v43, v57, 16);
          }
          while (v17);
        }

        objc_msgSend(v9, "appendString:", CFSTR("   );\n"));
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
    }
    while (v12);
  }

  +[IDSLogging IDSConnection_oversize](IDSLogging, "IDSConnection_oversize");
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    v52 = v34;
    v53 = 2112;
    v54 = v30;
    v55 = 2112;
    v56 = v9;
    _os_log_impl(&dword_1906E0000, v21, OS_LOG_TYPE_DEFAULT, "Received results for service: %@ error: %@ updates {%@}", buf, 0x20u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_delegateMapForListenerID:service:", *(_QWORD *)(a1 + 40), v34);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = *(void **)(a1 + 32);
  v24 = MEMORY[0x1E0C809B0];
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 3221225472;
  v41[2] = sub_1907AFC68;
  v41[3] = &unk_1E2C61A38;
  v25 = v10;
  v42 = v25;
  objc_msgSend(v23, "_callDelegatesWithBlock:delegateMap:", v41, v22);
  v36[0] = v24;
  v36[1] = 3221225472;
  v36[2] = sub_1907AFDF4;
  v36[3] = &unk_1E2C647F0;
  v39 = *(id *)(a1 + 56);
  v26 = v25;
  v37 = v26;
  v40 = *(id *)(a1 + 64);
  v27 = v30;
  v38 = v27;
  v28 = (void (**)(_QWORD))MEMORY[0x19400FE1C](v36);
  v29 = v28;
  if (*(_BYTE *)(a1 + 72))
    v28[2](v28);
  else
    dispatch_async(*(dispatch_queue_t *)(a1 + 48), v28);

  objc_autoreleasePoolPop(context);
}

void sub_1907AFC68(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = *(void **)(a1 + 32);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_1907AFCF8;
    v5[3] = &unk_1E2C61A10;
    v6 = v4;
    objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v5);

  }
}

void sub_1907AFCF8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a2;
  +[IDSLogging IDQuery](IDSLogging, "IDQuery");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 32);
    v11 = 138412290;
    v12 = v8;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Notifying delegate %@ about ID status update", (uint8_t *)&v11, 0xCu);
  }

  v9 = *(void **)(a1 + 32);
  sub_1907AE6C4(v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "idStatusUpdatedForDestinations:service:", v10, v6);
}

void sub_1907AFDF4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1 || (v1 = *(_QWORD *)(a1 + 56)) != 0)
  {
    sub_1907AE6C4(*(void **)(a1 + 32));
    v2 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t))(v1 + 16))(v1);

  }
}

void sub_1907AFE84(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  NSObject *v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (*(_BYTE *)(a1 + 48))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v13 = *(void **)(a1 + 40);
    v14 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 56);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1907AFFAC;
    block[3] = &unk_1E2C62200;
    v20 = v13;
    v16 = v9;
    v17 = v10;
    v18 = v11;
    v19 = v12;
    dispatch_async(v14, block);

  }
}

uint64_t sub_1907AFFAC(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1[8] + 16))(a1[8], a1[4], a1[5], a1[6], a1[7]);
}

void sub_1907B01AC(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;

  v8 = a2;
  v9 = a3;
  v10 = a5;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[2] = sub_1907B02D0;
  v17[3] = &unk_1E2C64868;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(void **)(a1 + 40);
  v13 = *(NSObject **)(v11 + 56);
  v17[1] = 3221225472;
  v18 = v9;
  v19 = v8;
  v20 = v11;
  v21 = v12;
  v25 = *(id *)(a1 + 64);
  v22 = *(id *)(a1 + 48);
  v23 = v10;
  v24 = *(id *)(a1 + 56);
  v14 = v10;
  v15 = v8;
  v16 = v9;
  dispatch_async(v13, v17);

}

void sub_1907B02D0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x19400FC60]();
  +[IDSLogging IDSConnection_oversize](IDSLogging, "IDSConnection_oversize");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v20 = v4;
    v21 = 2112;
    v22 = v5;
    _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "Received results for service: %@  updates {%@}", buf, 0x16u);
  }

  objc_msgSend(*(id *)(a1 + 48), "_delegateMapForListenerID:service:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1907B04D0;
  v16[3] = &unk_1E2C646D8;
  v8 = *(void **)(a1 + 48);
  v17 = *(id *)(a1 + 40);
  v18 = *(id *)(a1 + 32);
  objc_msgSend(v8, "_callDelegatesWithBlock:delegateMap:", v16, v6);
  if (*(_QWORD *)(a1 + 88))
  {
    if (objc_msgSend(*(id *)(a1 + 64), "waitForReply"))
    {
      v9 = *(_QWORD *)(a1 + 88);
      sub_1907AE6C4(*(void **)(a1 + 40));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *, _QWORD))(v9 + 16))(v9, v10, *(_QWORD *)(a1 + 72));
    }
    else
    {
      block[0] = v7;
      block[1] = 3221225472;
      block[2] = sub_1907B0698;
      block[3] = &unk_1E2C60EC8;
      v11 = *(NSObject **)(a1 + 80);
      v15 = *(id *)(a1 + 88);
      v13 = *(id *)(a1 + 40);
      v14 = *(id *)(a1 + 72);
      dispatch_async(v11, block);

      v10 = v15;
    }

  }
  objc_autoreleasePoolPop(v2);
}

void sub_1907B04D0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  uint8_t buf[4];
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v5 = *(void **)(a1 + 32);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1907B060C;
    v8[3] = &unk_1E2C64840;
    v6 = v4;
    v9 = v6;
    objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v8);
    +[IDSLogging IDQuery](IDSLogging, "IDQuery");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v11 = v3;
      _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Notifying delegate %@ about ID status update", buf, 0xCu);
    }

    objc_msgSend(v3, "idStatusUpdatedForDestinations:service:", v6, *(_QWORD *)(a1 + 40));
  }

}

void sub_1907B060C(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a2;
  objc_msgSend(v5, "numberWithInteger:", objc_msgSend(a3, "status"));
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(a1 + 32);
  objc_msgSend(v6, "prefixedURI");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "setObject:forKeyedSubscript:", v9, v8);
}

void sub_1907B0698(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 48);
  sub_1907AE6C4(*(void **)(a1 + 32));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, _QWORD))(v2 + 16))(v2, v3, *(_QWORD *)(a1 + 40));

}

void sub_1907B08A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  int v8;
  id v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  +[IDSLogging IDQuery](IDSLogging, "IDQuery");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412546;
    v9 = v6;
    v10 = 1024;
    v11 = objc_msgSend(v5, "count");
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Received cache for service %@, %d count", (uint8_t *)&v8, 0x12u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_updateCacheWithDictionary:service:", v5, *(_QWORD *)(a1 + 40));
}

void sub_1907B0F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1907B1014(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!qword_1ECDD65C0)
  {
    v4 = xmmword_1E2C648D8;
    v5 = 0;
    qword_1ECDD65C0 = _sl_dlopen();
  }
  if (!qword_1ECDD65C0)
    sub_1907FAD90(&v3);
  result = objc_getClass("KTVerifierResult");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1907FAE0C();
  qword_1ECDD65A8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1907B1130()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE20A1F8);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD6520;
  qword_1ECDD6520 = v0;

  v2 = (void *)qword_1ECDD6520;
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  objc_msgSend(v3, "setWithObjects:", v4, v5, objc_opt_class(), 0);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_copyOpportunisticCacheWithBlock_, 0, 1);

}

void sub_1907B13B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1907B13D8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_sendStatsRequestViaDaemon");

}

void sub_1907B2BF4(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

void sub_1907B32A4(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = nw_connection_state_to_string();
    v6 = *(_QWORD *)(a1 + 32);
    v8 = 136315394;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "addDirectConnectionForLinkID connection event %s for %@", (uint8_t *)&v8, 0x16u);
  }

  v7 = *(void **)(a1 + 40);
  if (a2 == 3)
  {
    objc_msgSend(v7, "setDirectConnectionReady:", 1);
    objc_msgSend(*(id *)(a1 + 48), "reportEvent:forLinkID:", *MEMORY[0x1E0D34788], *(unsigned __int8 *)(a1 + 64));
    objc_msgSend(*(id *)(a1 + 48), "_readFromDirectConnection:linkID:linkContext:connectionInfo:", *(_QWORD *)(a1 + 32), *(char *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
  }
  else
  {
    objc_msgSend(v7, "setDirectConnectionReady:", 0);
    if (a2 == 4)
    {
      objc_msgSend(*(id *)(a1 + 48), "reportEvent:forLinkID:", *MEMORY[0x1E0D34778], *(unsigned __int8 *)(a1 + 64));
      objc_msgSend(*(id *)(a1 + 48), "_removeDirectConnection:", *(_QWORD *)(a1 + 32));
      nw_connection_cancel(*(nw_connection_t *)(a1 + 32));
    }
    else if (a2 == 5)
    {
      objc_msgSend(*(id *)(a1 + 48), "reportEvent:forLinkID:", *MEMORY[0x1E0D34770], *(unsigned __int8 *)(a1 + 64));
    }
  }
}

void sub_1907B39F4(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  NSObject *v9;
  NSObject *v10;
  id v11;
  void *v12;
  dispatch_data_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  size_t v18;
  NSObject *v19;
  NSObject *v20;
  unsigned __int8 ecn_flag;
  NSObject *v22;
  uint64_t v23;
  void *buffer_ptr;
  size_t size_ptr;
  uint8_t buf[4];
  _BYTE v27[10];
  _BYTE v28[10];
  __int16 v29;
  size_t v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = v11;
  if (v9 && !v11)
  {
    buffer_ptr = (void *)0xAAAAAAAAAAAAAAAALL;
    size_ptr = 0xAAAAAAAAAAAAAAAALL;
    v13 = dispatch_data_create_map(v9, (const void **)&buffer_ptr, &size_ptr);
    if (!v13)
    {
LABEL_24:
      if (a4)
        objc_msgSend(*(id *)(a1 + 32), "_readFromDirectConnection:linkID:linkContext:connectionInfo:", *(_QWORD *)(a1 + 48), *(char *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));

      goto LABEL_27;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (v14 && *(_BYTE *)(v14 + 8))
    {
      +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        if (objc_msgSend(*(id *)(a1 + 40), "connectionType") == 1)
          v16 = 80;
        else
          v16 = 82;
        v17 = *(char *)(a1 + 64);
        v23 = *(_QWORD *)(a1 + 48);
        v18 = size_ptr;
        sub_1907B3CD8((uint64_t)buffer_ptr, size_ptr);
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)v27 = v16;
        *(_WORD *)&v27[4] = 1024;
        *(_DWORD *)&v27[6] = v17;
        *(_WORD *)v28 = 2048;
        *(_QWORD *)&v28[2] = v23;
        v29 = 2048;
        v30 = v18;
        v31 = 2080;
        v32 = byte_1EE1E2180;
        _os_log_impl(&dword_1906E0000, v15, OS_LOG_TYPE_DEFAULT, " ** direct reading (%c) linkID %d connection <%p> datagram length %zu\npacket:\n%s", buf, 0x2Cu);
      }

      objc_msgSend(*(id *)(a1 + 32), "_dumpLinkContextConnectionsInfo");
    }
    if (v10)
    {
      v19 = nw_protocol_copy_ip_definition();
      v20 = nw_content_context_copy_protocol_metadata(v10, v19);

      if (!v20)
      {
        ecn_flag = 0;
        goto LABEL_23;
      }
      ecn_flag = nw_ip_metadata_get_ecn_flag(v20);
    }
    else
    {
      +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906E0000, v20, OS_LOG_TYPE_DEFAULT, "nw_connection_receive_message: Null context", buf, 2u);
      }
      ecn_flag = 0;
    }

LABEL_23:
    objc_msgSend(*(id *)(a1 + 32), "_processIncomingDatagram:datagramSize:linkID:DSCP:linkContext:connectionInfo:", buffer_ptr, size_ptr, *(char *)(a1 + 64), ecn_flag, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
    goto LABEL_24;
  }
  +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)v27 = v12;
    *(_WORD *)&v27[8] = 2112;
    *(_QWORD *)v28 = v9;
    _os_log_impl(&dword_1906E0000, v22, OS_LOG_TYPE_DEFAULT, "nw_connection_receive_message in _readFromDirectConnection failed %@ %@", buf, 0x16u);
  }

LABEL_27:
}

uint64_t sub_1907B3CD8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  char v8;
  char v9;
  char v10;
  char *v11;
  uint64_t v12;
  char v13;

  if (a2 >= 1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 2000;
    if (a2 < 2000)
      v4 = a2;
    while (1)
    {
      v5 = *(unsigned __int8 *)(result + v2);
      v6 = (v5 >> 4) + 87;
      if (v5 < 0xA0)
        LOBYTE(v6) = (*(_BYTE *)(result + v2) >> 4) | 0x30;
      v7 = v5 & 0xF;
      v8 = v5 & 0xF | 0x30;
      v9 = (v5 & 0xF) + 87;
      v10 = v7 >= 0xA ? v9 : v8;
      v11 = &byte_1EE1E2180[v3];
      *v11 = v6;
      v12 = v3 + 2;
      v11[1] = v10;
      if ((~(_DWORD)v2 & 0xF) == 0)
        break;
      if ((v2 & 1) != 0)
      {
        v13 = 32;
        goto LABEL_13;
      }
LABEL_14:
      ++v2;
      v3 = v12;
      if (v4 == v2)
        goto LABEL_17;
    }
    v13 = 10;
LABEL_13:
    byte_1EE1E2180[v12] = v13;
    LODWORD(v12) = v3 + 3;
    goto LABEL_14;
  }
  LODWORD(v12) = 0u;
LABEL_17:
  byte_1EE1E2180[(int)v12] = 0;
  return result;
}

void sub_1907B4604(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

nw_protocol_metadata_t sub_1907B4A90(int a1, int a2)
{
  uint64_t *v3;
  nw_protocol_metadata_t v4;
  nw_service_class_t v5;
  nw_protocol_metadata_t metadata;
  nw_protocol_metadata_t v7;
  NSObject *v8;
  nw_protocol_metadata_t v9;
  nw_ip_ecn_flag_t v10;

  if (a1 <= 699)
  {
    if (a1 == 100 || a1 == 200)
    {
      v3 = &qword_1EE1E38F8;
      v4 = (nw_protocol_metadata_t)qword_1EE1E38F8;
      if (qword_1EE1E38F8)
        goto LABEL_19;
      v5 = nw_service_class_background;
      goto LABEL_18;
    }
    if (a1 == 600)
    {
      v3 = &qword_1EE1E3900;
      v4 = (nw_protocol_metadata_t)qword_1EE1E3900;
      if (qword_1EE1E3900)
        goto LABEL_19;
      v5 = nw_service_class_responsive_data;
      goto LABEL_18;
    }
LABEL_24:
    if (!a2)
    {
      v9 = 0;
      return v9;
    }
    goto LABEL_25;
  }
  if (a1 == 700)
  {
    v3 = &qword_1EE1E3908;
    v4 = (nw_protocol_metadata_t)qword_1EE1E3908;
    if (qword_1EE1E3908)
      goto LABEL_19;
    v5 = nw_service_class_interactive_video;
    goto LABEL_18;
  }
  if (a1 != 800)
  {
    if (a1 == 900)
    {
      v3 = &qword_1EE1E3918;
      v4 = (nw_protocol_metadata_t)qword_1EE1E3918;
      if (qword_1EE1E3918)
        goto LABEL_19;
      v5 = nw_service_class_signaling;
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  v3 = &qword_1EE1E3910;
  v4 = (nw_protocol_metadata_t)qword_1EE1E3910;
  if (qword_1EE1E3910)
    goto LABEL_19;
  v5 = nw_service_class_interactive_voice;
LABEL_18:
  metadata = nw_ip_create_metadata();
  v7 = (nw_protocol_metadata_t)*v3;
  *v3 = (uint64_t)metadata;

  nw_ip_metadata_set_service_class((nw_protocol_metadata_t)*v3, v5);
  v4 = (nw_protocol_metadata_t)*v3;
LABEL_19:
  v8 = v4;
  v9 = v8;
  if (a2)
  {
    if (v8)
    {
LABEL_26:
      v10 = a2 & 3;
      v8 = v9;
      goto LABEL_27;
    }
LABEL_25:
    v9 = nw_ip_create_metadata();
    goto LABEL_26;
  }
  if (v8)
  {
    v10 = nw_ip_ecn_flag_non_ect;
LABEL_27:
    nw_ip_metadata_set_ecn_flag(v8, v10);
  }
  return v9;
}

void sub_1907B4BC8(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t error_code;
  NSObject *v6;
  int v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  int v11;
  _BOOL4 v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  int v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint8_t buf[4];
  _BYTE v40[10];
  _BYTE v41[38];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
    error_code = nw_error_get_error_code(v3);
  else
    error_code = 0;
  objc_msgSend(*(id *)(a1 + 32), "setTotalPacketsSentOnLink:", objc_msgSend(*(id *)(a1 + 32), "totalPacketsSentOnLink") + 1);
  if ((_DWORD)error_code)
  {
    +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)v40 = 1;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = v7;
      *(_WORD *)v41 = 1024;
      *(_DWORD *)&v41[2] = error_code;
      v8 = "DCW failed for %d packet(s), %uB (%d).";
      v9 = v6;
      v10 = 20;
LABEL_26:
      _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    }
  }
  else
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "hasSentPacket") & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "setHasSentPacket:", 1);
      objc_msgSend(*(id *)(a1 + 40), "reportEvent:forLinkID:", *MEMORY[0x1E0D34790], *(unsigned __int8 *)(a1 + 92));
    }
    ids_monotonic_time();
    objc_msgSend(*(id *)(a1 + 32), "setLastPacketSentTime:");
    objc_msgSend(*(id *)(a1 + 40), "_reportLinkMetricsForLinkContext:", *(_QWORD *)(a1 + 32));
    v11 = objc_msgSend(*(id *)(a1 + 32), "delegatedLinkID");
    +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
    v6 = objc_claimAutoreleasedReturnValue();
    v12 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      if (v12)
      {
        v13 = *(_DWORD *)(a1 + 88);
        v14 = objc_msgSend(*(id *)(a1 + 32), "connectionType") - 1;
        if (v14 > 3)
          v15 = 63;
        else
          v15 = dword_19080A950[v14];
        v19 = objc_msgSend(*(id *)(a1 + 32), "linkID");
        v20 = objc_msgSend(*(id *)(a1 + 32), "delegatedLinkID");
        if (*(_BYTE *)(a1 + 93))
          v21 = "qpod";
        else
          v21 = "udp";
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)v40 = v13;
        *(_WORD *)&v40[4] = 1024;
        *(_DWORD *)&v40[6] = 1;
        *(_WORD *)v41 = 1024;
        *(_DWORD *)&v41[2] = v15;
        *(_WORD *)&v41[6] = 1024;
        *(_DWORD *)&v41[8] = v19;
        *(_WORD *)&v41[12] = 1024;
        *(_DWORD *)&v41[14] = v20;
        *(_WORD *)&v41[18] = 2080;
        *(_QWORD *)&v41[20] = v21;
        *(_WORD *)&v41[28] = 2048;
        *(_QWORD *)&v41[30] = nw_connection_get_id();
        v8 = "DCW %uB/%1d (%c %d/%d — %s [C%llu])";
        v9 = v6;
        v10 = 52;
        goto LABEL_26;
      }
    }
    else if (v12)
    {
      v16 = *(_DWORD *)(a1 + 88);
      v17 = objc_msgSend(*(id *)(a1 + 32), "connectionType") - 1;
      if (v17 > 3)
        v18 = 63;
      else
        v18 = dword_19080A950[v17];
      v22 = objc_msgSend(*(id *)(a1 + 32), "linkID");
      if (*(_BYTE *)(a1 + 93))
        v23 = "qpod";
      else
        v23 = "udp";
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)v40 = v16;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 1;
      *(_WORD *)v41 = 1024;
      *(_DWORD *)&v41[2] = v18;
      *(_WORD *)&v41[6] = 1024;
      *(_DWORD *)&v41[8] = v22;
      *(_WORD *)&v41[12] = 2080;
      *(_QWORD *)&v41[14] = v23;
      *(_WORD *)&v41[22] = 2048;
      *(_QWORD *)&v41[24] = nw_connection_get_id();
      v8 = "DCW %uB/%1d (%c %d — %s [C%llu])";
      v9 = v6;
      v10 = 46;
      goto LABEL_26;
    }
  }

  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v24 && *(_BYTE *)(v24 + 8))
  {
    +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      if (objc_msgSend(*(id *)(a1 + 32), "connectionType") == 1)
        v26 = 80;
      else
        v26 = 82;
      v27 = *(char *)(a1 + 92);
      v28 = *(_QWORD *)(a1 + 48);
      v29 = *(_DWORD *)(a1 + 88);
      sub_1907B3CD8(**(_QWORD **)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 80) + 16));
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)v40 = v26;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = v27;
      *(_WORD *)v41 = 2048;
      *(_QWORD *)&v41[2] = v28;
      *(_WORD *)&v41[10] = 1024;
      *(_DWORD *)&v41[12] = error_code;
      *(_WORD *)&v41[16] = 1024;
      *(_DWORD *)&v41[18] = v29;
      *(_WORD *)&v41[22] = 2080;
      *(_QWORD *)&v41[24] = byte_1EE1E2180;
      _os_log_impl(&dword_1906E0000, v25, OS_LOG_TYPE_DEFAULT, " ** direct write (%c) linkID %d connection <%p> error %d datagram length %u\npacket:\n%s", buf, 0x2Eu);
    }

    objc_msgSend(*(id *)(a1 + 40), "_dumpLinkContextConnectionsInfo");
  }
  if (v4)
  {
    +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *(_QWORD *)(a1 + 40);
      v32 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(a1 + 64));
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)v40 = v31;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)v41 = error_code;
      *(_WORD *)&v41[4] = 2048;
      *(_QWORD *)&v41[6] = v32;
      _os_log_impl(&dword_1906E0000, v30, OS_LOG_TYPE_DEFAULT, "<%@> direct write failed error_number %d calling completion handler %p", buf, 0x1Cu);

    }
    v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Failed to send write bytes (%d)"), error_code);
    v34 = objc_alloc(MEMORY[0x1E0C99D80]);
    v35 = (void *)objc_msgSend(v34, "initWithObjectsAndKeys:", v33, *MEMORY[0x1E0CB2D50], 0);
    v36 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v37 = (void *)objc_msgSend(v36, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D34510], 6, v35);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_logSendingStats:", *(unsigned int *)(a1 + 88));
    v37 = 0;
  }
  v38 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v38 && !*(_BYTE *)(v38 + 68))
    sub_1907502EC(*(void **)(a1 + 64), *(void **)(a1 + 72), v37, *(unsigned int *)(a1 + 88));

}

void sub_1907B6964(uint64_t a1)
{
  _IDSDevice *v2;
  uint64_t v3;
  void *v4;

  v2 = -[_IDSDevice initWithDictionary:]([_IDSDevice alloc], "initWithDictionary:", *(_QWORD *)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

}

void sub_1907B6A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1907B6AA4()
{
  return (id)objc_opt_self();
}

void sub_1907B6BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B6BB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "fullDescription");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B6CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B6CE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "compactDescription");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B6DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B6E08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "description");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B6F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B6F30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "uniqueID");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B7040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B7058(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "uniqueIDOverride");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B7168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B7180(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "productVersion");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B7290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B72A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "productName");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B73B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B73D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "productBuildVersion");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B751C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B7534(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "modelIdentifier");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B7644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B765C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "name");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B776C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B7784(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "service");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B7874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B788C(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isNearby");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B7974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B798C(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isConnected");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B7A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B7A8C(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isCloudConnected");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B7B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B7B8C(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "locallyPresent");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B7C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B7C8C(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isDefaultPairedDevice");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B7D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B7D8C(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isLocallyPaired");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B7E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B7E8C(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isActive");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B7F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B7FAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "capabilities");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B809C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B80B4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "relationship");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B819C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B81B4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isHSATrusted");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B82CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B82E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "linkedUserURIs");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_1907B83BC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_setNSUUID_);
}

void sub_1907B849C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B84B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "nsuuid");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B85C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B85DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "stableBluetoothIdentifier");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B86CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B86E4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "supportsiCloudPairing");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B87CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B87E4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "supportsTethering");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B88CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B88E4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "supportsHandoff");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B89CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B89E4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "supportsApplePay");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B8ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B8AE4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "supportsSMSRelay");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B8BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B8BE4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "supportsMMSRelay");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B8CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B8CE4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "supportsPhoneCalls");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B8DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B8DE4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "deviceType");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B8EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B8F04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "deviceColor");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B9014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B902C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "enclosureColor");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B913C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B9154(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "lastActivityDate");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B9264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B927C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "pushToken");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907B938C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907B93A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "identities");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_1907B947C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "_addIdentity:", *(_QWORD *)(a1 + 40));
}

void sub_1907B953C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B9554(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "pairingProtocolVersion");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B963C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B9654(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "minCompatibilityVersion");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B973C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B9754(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "maxCompatibilityVersion");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907B983C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907B9854(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "serviceMinCompatibilityVersion");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1907B9924(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "_setAccount:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1907B99CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "_setService:", *(_QWORD *)(a1 + 40));
}

void sub_1907BA7F8()
{
  NSObject *v0;
  NSObject *v1;
  dispatch_queue_t v2;
  void *v3;
  void *v4;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_initially_inactive(v0);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = dispatch_queue_create("IDSDataChannelsRealTimeQueue", v1);
  v3 = (void *)qword_1EE1E3928;
  qword_1EE1E3928 = (uint64_t)v2;

  IDSRealTimeContext();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  nw_queue_context_target_dispatch_queue();

  dispatch_activate((dispatch_object_t)qword_1EE1E3928);
}

void sub_1907BA97C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1907BAAB0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1907BAB4C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1907BAC0C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1907BBA7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1907BBABC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  int nexus_instance;
  uint64_t v6;
  int is_null;
  unsigned __int8 *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  NSObject *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint8_t *v28;
  id v29;
  uint8_t v30[4];
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  void *v34;
  _QWORD *v35;
  int v36;
  _BYTE buf[18];
  __int16 v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD v41[2];
  unsigned __int8 src[16];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSTransportLog IDSDataChannels](IDSTransportLog, "IDSDataChannels");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "nw_path_evaluator_set_update_handler called update handler with path %@", buf, 0xCu);
  }

  memset(src, 170, sizeof(src));
  v36 = 0;
  nexus_instance = nw_path_get_nexus_instance();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (nexus_instance)
  {
    is_null = uuid_is_null((const unsigned __int8 *)(v6 + 160));
    v8 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 160);
    if (is_null)
    {
      uuid_copy(v8, src);
    }
    else if (uuid_compare(v8, src))
    {
      +[IDSTransportLog IDSDataChannels](IDSTransportLog, "IDSDataChannels");
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v20 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v20;
        _os_log_impl(&dword_1906E0000, v19, OS_LOG_TYPE_DEFAULT, "%@: close due to the new ids instance.", buf, 0xCu);
      }

      v21 = *(_QWORD **)(a1 + 32);
      v22 = v21[1];
      if (*(_BYTE *)(v22 + 116))
      {
        v31 = MEMORY[0x1E0C809B0];
        v32 = 3221225472;
        v33 = sub_1907BC168;
        v34 = &unk_1E2C64AD8;
        v35 = v21;
        IDSTransportThreadAddBlock();

      }
      else
      {
        v25 = *(_QWORD *)(v22 + 16);
        if (v25)
        {
          v40[0] = CFSTR("event-type");
          v40[1] = CFSTR("connected-link");
          v41[0] = &unk_1E2CAE348;
          objc_msgSend(v21, "connectedLinks");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v41[1] = v26;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, v40, 2);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(uint64_t, void *))(v25 + 16))(v25, v27);

          v21 = *(_QWORD **)(a1 + 32);
        }
        objc_msgSend(v21, "close");
      }
      goto LABEL_48;
    }
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 136))
    {
      +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "nw_path_get_nexus_instance returned yes", buf, 2u);
      }

      *(_DWORD *)v30 = 0;
      nw_path_get_nexus_key();
      if (os_channel_attr_create())
      {
        os_channel_attr_set_key();
        os_channel_attr_set();
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 136) = os_channel_create_extended();
        os_channel_attr_destroy();
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 136))
        {
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 120) = os_channel_get_fd();
          os_channel_ring_id();
          v10 = os_channel_rx_ring();
          os_channel_ring_id();
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 144) = os_channel_tx_ring();
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 152) = v10;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = 1;
          +[IDSTransportLog IDSDataChannels](IDSTransportLog, "IDSDataChannels");
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            v12 = *(_QWORD *)(a1 + 32);
            v13 = *(_QWORD *)(v12 + 8);
            v14 = *(_QWORD *)(v13 + 136);
            LODWORD(v13) = *(_DWORD *)(v13 + 120);
            *(_DWORD *)buf = 134218498;
            *(_QWORD *)&buf[4] = v14;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v13;
            v38 = 2112;
            v39 = v12;
            _os_log_impl(&dword_1906E0000, v11, OS_LOG_TYPE_DEFAULT, "_internal->_osChannel %p channelFD_get %d %@", buf, 0x1Cu);
          }

          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 117))
          {
            IDSTransportThreadInit();
            v29 = *(id *)(a1 + 32);
            IDSTransportThreadAddBlock();

          }
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
          goto LABEL_47;
        }
        +[IDSTransportLog IDSDataChannels](IDSTransportLog, "IDSDataChannels");
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v24 = "os_channel_create failed";
          v28 = buf;
LABEL_45:
          _os_log_impl(&dword_1906E0000, v23, OS_LOG_TYPE_DEFAULT, v24, v28, 2u);
        }
LABEL_46:

        nw_path_evaluator_cancel();
LABEL_47:
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
        goto LABEL_48;
      }
      +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
      v16 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      *(_WORD *)buf = 0;
      v17 = "initWithDestination: os_channel_attr_create failed";
      v18 = buf;
      goto LABEL_33;
    }
  }
  else if (!*(_QWORD *)(v6 + 136))
  {
    +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906E0000, v15, OS_LOG_TYPE_DEFAULT, "nw_path_get_nexus_instance returned no", buf, 2u);
    }

    memset(buf, 170, 16);
    nw_path_get_nexus_agent_uuid();
    if ((nw_path_assert_agent() & 1) != 0)
    {
      if ((nw_path_uses_nexus() & 1) != 0)
      {
        if ((nw_path_request_nexus() & 1) != 0)
        {
          +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
          v16 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
LABEL_34:

            goto LABEL_48;
          }
          *(_WORD *)v30 = 0;
          v17 = "nw_path_request_nexus succeeded";
          v18 = v30;
LABEL_33:
          _os_log_impl(&dword_1906E0000, v16, OS_LOG_TYPE_DEFAULT, v17, v18, 2u);
          goto LABEL_34;
        }
        +[IDSTransportLog IDSDataChannels](IDSTransportLog, "IDSDataChannels");
        v23 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          goto LABEL_46;
        *(_WORD *)v30 = 0;
        v24 = "nw_path_request_nexus failed - cannot recover";
      }
      else
      {
        +[IDSTransportLog IDSDataChannels](IDSTransportLog, "IDSDataChannels");
        v23 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          goto LABEL_46;
        *(_WORD *)v30 = 0;
        v24 = "nw_path_uses_nexus failed - cannot recover";
      }
    }
    else
    {
      +[IDSTransportLog IDSDataChannels](IDSTransportLog, "IDSDataChannels");
      v23 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        goto LABEL_46;
      *(_WORD *)v30 = 0;
      v24 = "nw_path_assert_agent failed";
    }
    v28 = v30;
    goto LABEL_45;
  }
LABEL_48:

}

uint64_t sub_1907BC168(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD v7[2];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = *(_QWORD *)(v2[1] + 16);
  if (v3)
  {
    v7[0] = CFSTR("event-type");
    v7[1] = CFSTR("connected-link");
    v8[0] = &unk_1E2CAE348;
    objc_msgSend(v2, "connectedLinks");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v8[1] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

    v2 = *(_QWORD **)(a1 + 32);
  }
  return objc_msgSend(v2, "close");
}

void sub_1907BC240(uint64_t a1)
{
  id v2;
  id v3;

  v3 = *(id *)(a1 + 32);
  v2 = *(id *)(a1 + 32);
  IDSTransportThreadAddSocket();

}

uint64_t sub_1907BC2F4(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if (*(_BYTE *)(v2[1] + 8))
  {
    +[IDSTransportLog IDSDataChannels](IDSTransportLog, "IDSDataChannels");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v6 = 138412290;
      v7 = v4;
      _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "readable for %@", (uint8_t *)&v6, 0xCu);
    }

    v2 = *(_QWORD **)(a1 + 32);
  }
  return objc_msgSend(v2, "scheduleRead");
}

void sub_1907BC3B8(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 52));
  v2 = *(_QWORD **)(a1 + 32);
  if (*(_BYTE *)(v2[1] + 8))
  {
    +[IDSTransportLog IDSDataChannels](IDSTransportLog, "IDSDataChannels");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = 138412290;
      v6 = v4;
      _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "writable for %@", (uint8_t *)&v5, 0xCu);
    }

    v2 = *(_QWORD **)(a1 + 32);
  }
  objc_msgSend(v2, "sendMetadata");
  IDSTransportThreadSuspendSocket();
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 52));
}

double sub_1907BC4B0()
{
  if (qword_1EE1E3938 != -1)
    dispatch_once(&qword_1EE1E3938, &unk_1E2C64C30);
  return *(double *)&qword_1EE1E3940 * (double)mach_continuous_time();
}

void sub_1907C3DF4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1907C3F84(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1907C4394(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v5, v7);
  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v7, v5);

}

void sub_1907C4C74(uint64_t a1, id *a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v10;
  dispatch_data_t v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  os_unfair_lock_s *lock;
  void *buffer_ptr;
  size_t size_ptr;
  uint8_t buf[4];
  _BYTE v29[14];
  __int16 v30;
  size_t v31;
  __int16 v32;
  int v33;
  _QWORD v34[2];
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  lock = (os_unfair_lock_s *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56);
  os_unfair_lock_lock(lock);
  if (!a3)
  {
    +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_QWORD *)(a1 + 32);
      v20 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(*(_QWORD *)(v19 + 8) + 16));
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)v29 = v19;
      *(_WORD *)&v29[8] = 1024;
      *(_DWORD *)&v29[10] = a4;
      v30 = 2048;
      v31 = (size_t)v20;
      _os_log_impl(&dword_1906E0000, v18, OS_LOG_TYPE_DEFAULT, "<%@> read failed %d due to datagram_count 0 - calling event handler %p", buf, 0x1Cu);

    }
    v21 = *(_QWORD **)(a1 + 32);
    v22 = *(_QWORD *)(v21[1] + 16);
    if (v22)
    {
      v34[0] = CFSTR("event-type");
      v34[1] = CFSTR("connected-link");
      v35[0] = &unk_1E2CAE348;
      objc_msgSend(v21, "connectedLinks");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v35[1] = v23;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, v34, 2);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v22 + 16))(v22, v24);

      v21 = *(_QWORD **)(a1 + 32);
    }
    objc_msgSend(v21, "close");
    goto LABEL_20;
  }
  while (1)
  {
    v10 = *a2;
    buffer_ptr = (void *)0xAAAAAAAAAAAAAAAALL;
    size_ptr = 0xAAAAAAAAAAAAAAAALL;
    v11 = dispatch_data_create_map(v10, (const void **)&buffer_ptr, &size_ptr);
    v12 = *(_QWORD **)(a1 + 32);
    v13 = v12[1];
    if (*(_BYTE *)(v13 + 8))
    {
      +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 112);
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)v29 = a3;
        *(_WORD *)&v29[4] = 2048;
        *(_QWORD *)&v29[6] = buffer_ptr;
        v30 = 2048;
        v31 = size_ptr;
        v32 = 1024;
        v33 = v15;
        _os_log_impl(&dword_1906E0000, v14, OS_LOG_TYPE_DEFAULT, " ** reading %u packets remaining: mapped %p length %zu hasMetadata %u", buf, 0x22u);
      }

      v12 = *(_QWORD **)(a1 + 32);
      v13 = v12[1];
    }
    if (!*(_BYTE *)(v13 + 112))
    {
      objc_msgSend(v12, "_logReceivingStats:", size_ptr);
      v16 = *(_QWORD *)(a1 + 64);
      if (v16)
      {
        v4 &= 0xFFFFFFFFFFFF0000;
        (*(void (**)(uint64_t, void *, _QWORD, _QWORD, uint64_t, _QWORD))(v16 + 16))(v16, buffer_ptr, size_ptr, 0, v4, 0);
      }
      else
      {
        v5 &= 0xFFFFFFFFFFFF0000;
        (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
      }
      goto LABEL_12;
    }
    if ((objc_msgSend(v12, "processDatagram:datagramSize:readHandler:readHandlerWithOptions:", buffer_ptr, size_ptr, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)) & 1) == 0)break;
LABEL_12:
    v17 = (id)objc_opt_self();

    ++a2;
    if (!--a3)
      goto LABEL_19;
  }

LABEL_19:
  objc_msgSend(*(id *)(a1 + 32), "readFromNWConnection:maximumDatagrams:readHandler:readHandlerWithOptions:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 80), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
LABEL_20:
  os_unfair_lock_unlock(lock);
}

void sub_1907C4F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_1907C5334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_1907C57A4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1907C5B68(uint64_t a1)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 40) != -1)
    IDSTransportThreadRemoveSocket();
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return os_channel_destroy();
  return result;
}

void sub_1907C5F40(uint64_t a1)
{
  uint64_t v2;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 52));
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_QWORD *)(v2 + 136))
  {
    IDSTransportThreadInit();
    IDSTransportThreadAddBlock();
  }
  else
  {
    *(_BYTE *)(v2 + 117) = 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 52));
}

uint64_t sub_1907C5FE0()
{
  return IDSTransportThreadAddSocket();
}

uint64_t sub_1907C6054(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if (*(_BYTE *)(v2[1] + 8))
  {
    +[IDSTransportLog IDSDataChannels](IDSTransportLog, "IDSDataChannels");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v6 = 138412290;
      v7 = v4;
      _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "readable for %@", (uint8_t *)&v6, 0xCu);
    }

    v2 = *(_QWORD **)(a1 + 32);
  }
  return objc_msgSend(v2, "scheduleRead");
}

void sub_1907C6118(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 52));
  v2 = *(_QWORD **)(a1 + 32);
  if (*(_BYTE *)(v2[1] + 8))
  {
    +[IDSTransportLog IDSDataChannels](IDSTransportLog, "IDSDataChannels");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = 138412290;
      v6 = v4;
      _os_log_impl(&dword_1906E0000, v3, OS_LOG_TYPE_DEFAULT, "writable for %@", (uint8_t *)&v5, 0xCu);
    }

    v2 = *(_QWORD **)(a1 + 32);
  }
  objc_msgSend(v2, "sendMetadata");
  IDSTransportThreadSuspendSocket();
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 52));
}

void sub_1907C6354(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  uint64_t *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  id v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (a2)
  {
    if (a2 == 3)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = 1;
      +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD *)(a1 + 32);
        v8 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(*(_QWORD *)(v7 + 8) + 16));
        *(_DWORD *)buf = 138412546;
        v28 = v7;
        v29 = 2048;
        v30 = v8;
        _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "<%@> got event connected and calls event handler %p", buf, 0x16u);

      }
      os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 52));
      objc_msgSend(*(id *)(a1 + 32), "sendMetadata");
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 52));
      objc_msgSend(*(id *)(a1 + 32), "scheduleRead");
      goto LABEL_16;
    }
    if ((a2 & 0xFFFFFFFE) == 4)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) = 0;
      +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *(_QWORD *)(a1 + 32);
        v20 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(*(_QWORD *)(v19 + 8) + 16));
        *(_DWORD *)buf = 138412802;
        v28 = v19;
        v29 = 2112;
        v30 = v5;
        v31 = 2048;
        v32 = v20;
        _os_log_impl(&dword_1906E0000, v18, OS_LOG_TYPE_DEFAULT, "<%@> got event disconnected with error %@ and calls event handler %p", buf, 0x20u);

      }
      v21 = *(_QWORD **)(a1 + 32);
      v13 = *(_QWORD *)(v21[1] + 16);
      if (v13)
      {
        objc_msgSend(v21, "connectedLinks", CFSTR("event-type"), CFSTR("connected-link"), &unk_1E2CAE348);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v24[1] = v14;
        v15 = (void *)MEMORY[0x1E0C99D80];
        v16 = v24;
        v17 = &v23;
        goto LABEL_15;
      }
    }
  }
  else
  {
    +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(*(_QWORD *)(v10 + 8) + 16));
      *(_DWORD *)buf = 138412802;
      v28 = v10;
      v29 = 2112;
      v30 = v5;
      v31 = 2048;
      v32 = v11;
      _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "<%@> got event error %@ and calls event handler %p", buf, 0x20u);

    }
    v12 = *(_QWORD **)(a1 + 32);
    v13 = *(_QWORD *)(v12[1] + 16);
    if (v13)
    {
      v25[0] = CFSTR("event-type");
      v25[1] = CFSTR("connected-link");
      v26[0] = &unk_1E2CAE540;
      objc_msgSend(v12, "connectedLinks");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v26[1] = v14;
      v15 = (void *)MEMORY[0x1E0C99D80];
      v16 = v26;
      v17 = v25;
LABEL_15:
      objc_msgSend(v15, "dictionaryWithObjects:forKeys:count:", v16, v17, 2);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v22);

    }
  }
LABEL_16:

}

void sub_1907C72B4(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t error_code;
  uint64_t v6;
  unint64_t v7;
  double v8;
  NSObject *v9;
  double v10;
  int v11;
  uint64_t v12;
  void *v13;
  double v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  _BYTE v30[14];
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
    error_code = nw_error_get_error_code(v3);
  else
    error_code = 0;
  if (qword_1EE1E3938 != -1)
    dispatch_once(&qword_1EE1E3938, &unk_1E2C64C30);
  v6 = mach_continuous_time();
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8))
  {
    v7 = v6;
    v8 = *(double *)&qword_1EE1E3940;
    +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = v8 * (double)v7;
      v11 = *(char *)(a1 + 76);
      v12 = *(_QWORD *)(a1 + 32);
      v13 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(a1 + 40));
      v14 = *(double *)(a1 + 56);
      v15 = v14 - *(double *)(a1 + 64);
      *(_DWORD *)buf = 138413826;
      v26 = v12;
      v27 = 1024;
      v28 = v11;
      v29 = 1024;
      *(_DWORD *)v30 = error_code;
      *(_WORD *)&v30[4] = 2048;
      *(_QWORD *)&v30[6] = v13;
      v31 = 2048;
      v32 = v15;
      v33 = 2048;
      v34 = v10 - v14;
      v35 = 2048;
      v36 = v10;
      _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "<%@> write linkID %d error_number %d calling completion handler %p dataCreateTime %0.6lf writeTime %0.6lf [%013.6lf]", buf, 0x40u);

    }
  }
  if (v4)
  {
    +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD *)(a1 + 32);
      v18 = (void *)MEMORY[0x19400FE1C](*(_QWORD *)(a1 + 40));
      *(_DWORD *)buf = 138412802;
      v26 = v17;
      v27 = 1024;
      v28 = error_code;
      v29 = 2048;
      *(_QWORD *)v30 = v18;
      _os_log_impl(&dword_1906E0000, v16, OS_LOG_TYPE_DEFAULT, "<%@> write failed error_number %d calling completion handler %p", buf, 0x1Cu);

    }
    v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Failed to send write bytes (%d)"), error_code);
    v20 = objc_alloc(MEMORY[0x1E0C99D80]);
    v21 = (void *)objc_msgSend(v20, "initWithObjectsAndKeys:", v19, *MEMORY[0x1E0CB2D50], 0);
    v22 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v23 = (void *)objc_msgSend(v22, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D34510], 6, v21);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_logSendingStats:", *(unsigned int *)(a1 + 72));
    v23 = 0;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v24 && !*(_BYTE *)(v24 + 68))
    sub_1907502EC(*(void **)(a1 + 40), *(void **)(a1 + 48), v23, *(unsigned int *)(a1 + 72));

}

uint64_t sub_1907C7818(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = 0;
  v4 = 0;
  do
  {
    v5 = (*(_DWORD *)(a1 + 88) - 1);
    if (v4 == v5)
      v6 = *(_QWORD *)(a1 + 48);
    else
      v6 = 0;
    v7 = *(_QWORD *)(a1 + 72) + v3;
    v1 = v1 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)(v7 + 8);
    result = objc_msgSend(*(id *)(a1 + 32), "_writeToNWConnection:datagram:datagramSize:currentDatagramCount:totalDatagramCount:datagramInfo:datagramOptions:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v4), *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v4), v4, *(_DWORD *)(a1 + 88), *(_QWORD *)v7, v1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v4), v6);
    v3 += 10;
  }
  while (v4++ != v5);
  return result;
}

void sub_1907C8C94(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t error_code;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
    error_code = nw_error_get_error_code(v3);
  else
    error_code = 0;
  +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    v22 = v7;
    v23 = 1024;
    v24 = error_code;
    _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "<%@> write error_number %d calling setChannelPreferences", buf, 0x12u);
  }

  if (v4)
  {
    +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v22 = v9;
      v23 = 1024;
      v24 = error_code;
      _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "<%@> write failed error_number %d calling setChannelPreferences", buf, 0x12u);
    }

    v10 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Failed to send write bytes (%d)"), error_code);
    v11 = objc_alloc(MEMORY[0x1E0C99D80]);
    v12 = (void *)objc_msgSend(v11, "initWithObjectsAndKeys:", v10, *MEMORY[0x1E0CB2D50], 0);
    v13 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v14 = objc_msgSend(v13, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D34510], 6, v12);
    v15 = (void *)v14;
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 16);
    if (v16)
    {
      v19[0] = CFSTR("event-type");
      v19[1] = CFSTR("error-key");
      v20[0] = &unk_1E2CAE540;
      v20[1] = v14;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 2);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v17);

    }
  }
  else
  {
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8))
      goto LABEL_13;
    +[IDSLogging IDSDataChannels](IDSLogging, "IDSDataChannels");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v22 = v18;
      _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "<%@> write done for setChannelPreferences", buf, 0xCu);
    }
  }

LABEL_13:
}

uint64_t sub_1907CBF00(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__reportMKIArrival_time_isLocallyGenerated_);
}

uint64_t sub_1907CC1BC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__reportFirstIncomingPacketTimeForMKI_time_participantID_);
}

uint64_t sub_1907CC478(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__reportFirstOutgoingPacketTimeForMKI_time_participantID_);
}

uint64_t IDSEstimateAdditionalOverheadForDatagramOptions(unsigned int *a1)
{
  unsigned int v1;
  int v2;
  int v3;
  int v4;
  int v5;

  if (*((_BYTE *)a1 + 80) || *((_BYTE *)a1 + 112) || *((_BYTE *)a1 + 113) || (v1 = *a1, (*a1 & 0x30000) != 0))
  {
    v1 = *a1;
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }
  if ((v1 & 0x800) != 0)
    v2 += 2;
  if ((v1 & 2) != 0)
  {
    v3 = *((char *)a1 + 19);
    if (v3 > 0)
      v2 += 2;
    if (v3 >= 2)
      v2 = v2 + 2 * *((unsigned __int8 *)a1 + 19) - 1;
  }
  if ((v1 & 1) != 0)
    v2 += 8;
  v4 = v2 + ((v1 >> 3) & 1);
  if ((v1 & 0x10) != 0)
    v4 += 2;
  v5 = v4 + ((v1 >> 5) & 1);
  if ((v1 & 0x40) != 0)
    LOWORD(v5) = v5 + 2;
  if ((v1 & 0x200) != 0)
    return (unsigned __int16)(v5 + 8);
  else
    return (unsigned __int16)v5;
}

uint64_t IDSWorstCaseOverheadForDatagramOptions(unsigned int *a1)
{
  __int16 LinkOverhead;

  LinkOverhead = GLUtilGetLinkOverhead();
  return (unsigned __int16)(IDSEstimateAdditionalOverheadForDatagramOptions(a1) + LinkOverhead);
}

uint64_t IDSGroupEncryptionShortMKILength()
{
  return 2;
}

double sub_1907CCEEC()
{
  unint64_t v0;
  unint64_t v1;
  double result;
  mach_timebase_info info;

  info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info(&info);
  LODWORD(v1) = info.denom;
  LODWORD(v0) = info.numer;
  result = (double)v0 / (double)v1 / 1000000000.0;
  qword_1EE1E3940 = *(_QWORD *)&result;
  return result;
}

void sub_1907CD854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 144), 8);
  objc_destroyWeak((id *)(v35 - 112));
  _Unwind_Resume(a1);
}

void sub_1907CD898(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  int v12;
  const __CFString *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSServerMessaging");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("NO");
    v8 = *(_QWORD *)(a1 + 32);
    v12 = 138412802;
    if (a2)
      v7 = CFSTR("YES");
    v13 = v7;
    v14 = 2112;
    v15 = v5;
    v16 = 2112;
    v17 = v8;
    _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "Finished sending parakeet storage fetch -- ip service{success: %@, error: %@, identifier: %@}", (uint8_t *)&v12, 0x20u);
  }

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v5;
  v11 = v5;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1907CD9B8(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  int v12;
  const __CFString *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSServerMessaging");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("NO");
    v8 = *(_QWORD *)(a1 + 32);
    v12 = 138412802;
    if (a2)
      v7 = CFSTR("YES");
    v13 = v7;
    v14 = 2112;
    v15 = v5;
    v16 = 2112;
    v17 = v8;
    _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "Finished sending parakeet storage fetch -- offgrid service {success: %@, error: %@, identifier: %@}", (uint8_t *)&v12, 0x20u);
  }

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v5;
  v11 = v5;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1907CDAD8(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    v3 = 0;
    v4 = 1;
  }
  else
  {
    v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v6 = v5;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
      objc_msgSend(v5, "addObject:");
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
      objc_msgSend(v6, "addObject:");
    v7 = (void *)MEMORY[0x1E0CB35C8];
    v10 = *MEMORY[0x1E0CB2F70];
    v8 = (void *)objc_msgSend(v6, "copy");
    v11[0] = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "errorWithDomain:code:userInfo:", CFSTR("IDSParakeetMessagingErrorDomain"), 2, v9);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    v4 = 0;
  }
  objc_msgSend(WeakRetained, "_noteSentFetchForIdentifier:success:error:", *(_QWORD *)(a1 + 32), v4, v3);

}

void sub_1907CDFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1907CDFD8(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_noteAckTimerFiredForIdentifier:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v5, "invalidate");

}

void sub_1907CE758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1907CE784(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id WeakRetained;
  NSObject *v10;
  const __CFString *v11;
  int v12;
  const __CFString *v13;
  __int16 v14;
  id v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSServerMessaging");
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = CFSTR("NO");
    v12 = 138412802;
    if ((_DWORD)a2)
      v11 = CFSTR("YES");
    v13 = v11;
    v14 = 2112;
    v15 = v7;
    v16 = 2112;
    v17 = v8;
    _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Finished sending parakeet stop {success: %@, error: %@, context: %@}", (uint8_t *)&v12, 0x20u);
  }

  objc_msgSend(WeakRetained, "_noteSentStopForIdentifier:success:error:", *(_QWORD *)(a1 + 32), a2, v7);
}

void sub_1907CEAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1907CEAD8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  NSObject *v7;
  const __CFString *v8;
  uint64_t v9;
  void *v10;
  int v11;
  const __CFString *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(MEMORY[0x1E0D34D40], "IDSServerMessaging");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = CFSTR("NO");
    v9 = *(_QWORD *)(a1 + 32);
    v11 = 138412802;
    if ((_DWORD)a2)
      v8 = CFSTR("YES");
    v12 = v8;
    v13 = 2112;
    v14 = v5;
    v15 = 2112;
    v16 = v9;
    _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Finished cancelling parakeet stop {success: %@, error: %@, UUID: %@}", (uint8_t *)&v11, 0x20u);
  }

  objc_msgSend(*(id *)(a1 + 32), "UUIDString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "_noteCanceledFetchForIdentifier:success:error:", v10, a2, v5);

}

void sub_1907CED38(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "originalGUID");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "_noteAckedMessageWithMessageIdentifier:", v2);

}

uint64_t sub_1907CF0E0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "state");
}

uint64_t sub_1907CF148(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__temporarilyStoreMessage_forServiceIdentifier_);
}

void sub_1907CF1D0(uint64_t a1, void *a2)
{
  id v3;
  _IDSXPCCheckInInfo *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32));
  v4 = (_IDSXPCCheckInInfo *)objc_claimAutoreleasedReturnValue();
  +[IDSLogging _IDSService](IDSLogging, "_IDSService");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = 138412290;
    v8 = v6;
    _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "Finalized check in -- finishing {service: %@}", (uint8_t *)&v7, 0xCu);
  }

  if (!v4)
  {
    v4 = objc_alloc_init(_IDSXPCCheckInInfo);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, *(_QWORD *)(a1 + 32));
  }
  -[_IDSXPCCheckInInfo setTempObject:](v4, "setTempObject:", 0);
  -[_IDSXPCCheckInInfo setFinishedTransaction:](v4, "setFinishedTransaction:", 1);

}

void sub_1907CF35C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  objc_msgSend(v6, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "connection");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "cancel");

    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 32));
  }

}

void sub_1907CF3E0(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v6));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "connection");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "cancel");

        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  objc_msgSend(v2, "removeAllObjects");

}

void sub_1907CF5A0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3 && (objc_msgSend(v3, "finishedTransaction") & 1) == 0)
  {
    v5 = (void *)MEMORY[0x194010278](*(_QWORD *)(a1 + 40));
    +[IDSLogging _IDSService](IDSLogging, "_IDSService");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = 138412546;
      v9 = v7;
      v10 = 2080;
      v11 = v5;
      _os_log_impl(&dword_1906E0000, v6, OS_LOG_TYPE_DEFAULT, "Client received xpc-wake event -- storing {service: %@, description: %s}", (uint8_t *)&v8, 0x16u);
    }

    free(v5);
    objc_msgSend(v4, "setTempObject:", *(_QWORD *)(a1 + 40));
  }

}

void sub_1907CF940(_QWORD *a1)
{
  _IDSDeviceConnection *v2;
  uint64_t v3;
  void *v4;

  v2 = -[_IDSDeviceConnection initWithDevice:options:completionHandler:queue:]([_IDSDeviceConnection alloc], "initWithDevice:options:completionHandler:queue:", a1[5], a1[6], a1[8], a1[7]);
  v3 = a1[4];
  v4 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = v2;

}

void sub_1907CFBDC(uint64_t a1)
{
  _IDSDeviceConnection *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;

  v2 = [_IDSDeviceConnection alloc];
  v4 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1907CFCDC;
  v10[3] = &unk_1E2C64E10;
  v11 = *(id *)(a1 + 32);
  v12 = *(id *)(a1 + 56);
  v13 = *(id *)(a1 + 64);
  +[IDSInternalQueueController sharedInstance](IDSInternalQueueController, "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "queue");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[_IDSDeviceConnection initWithDevice:options:completionHandler:queue:](v2, "initWithDevice:options:completionHandler:queue:", v4, v3, v10, v6);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 8);
  *(_QWORD *)(v8 + 8) = v7;

}

void sub_1907CFCDC(uint64_t a1, CFSocketNativeHandle a2, void *a3)
{
  id v5;
  CFReadStreamRef v6;
  CFWriteStreamRef v7;
  const __CFString *v8;
  const void *v9;
  NSObject *v10;
  __CFWriteStream *v11;
  __CFReadStream *v12;
  id v13;
  _QWORD v14[4];
  id v15;
  CFReadStreamRef v16;
  CFWriteStreamRef v17;
  id v18;
  CFWriteStreamRef writeStream;
  CFReadStreamRef readStream;

  v5 = a3;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    readStream = 0;
    writeStream = 0;
    CFStreamCreatePairWithSocket((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, &readStream, &writeStream);
    v8 = (const __CFString *)*MEMORY[0x1E0C9B2E8];
    v9 = (const void *)*MEMORY[0x1E0C9AE50];
    CFReadStreamSetProperty(readStream, (CFStreamPropertyKey)*MEMORY[0x1E0C9B2E8], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
    CFWriteStreamSetProperty(writeStream, v8, v9);
    v6 = readStream;
    v7 = writeStream;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setStreamPairWithInputStream:outputStream:", readStream, writeStream);
  }
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1907CFE34;
  v14[3] = &unk_1E2C61008;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  v10 = *(NSObject **)(a1 + 40);
  v18 = *(id *)(a1 + 48);
  v11 = v7;
  v12 = v6;
  v13 = v5;
  dispatch_async(v10, v14);

}

void sub_1907CFE34(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;

  v2 = *(id *)(a1 + 32);
  v3 = v2;
  if ((!*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 48)) && !*(_QWORD *)(a1 + 32))
  {
    v7 = v2;
    v4 = objc_alloc(MEMORY[0x1E0C99D80]);
    v5 = (void *)objc_msgSend(v4, "initWithObjectsAndKeys:", CFSTR("Unable to create input and output stream"), *MEMORY[0x1E0CB2D50], 0);
    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("com.apple.identityservices.error"), 19, v5);

    v3 = (id)v6;
  }
  v8 = v3;
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1907CFFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D0008(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "updateConnectionWithOptions:error:", a1[5], a1[7]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_1907D012C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1907D0144()
{
  return (id)objc_opt_self();
}

void sub_1907D0240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907D0258(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "description");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_1907D0354(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "setStreamPairWithInputStream:outputStream:", a1[5], a1[6]);
}

void sub_1907D041C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D0434(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "socket");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907D053C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907D0554(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "inputStream");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1907D0664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907D067C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "outputStream");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_1907D072C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "close");
}

void sub_1907D07EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D0804(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "mtu");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1907D090C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907D0924(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "metrics");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id ACAccountForIDSAccount(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a2;
  v4 = a1;
  objc_msgSend((id)MEMORY[0x19400F24C](CFSTR("FTPasswordManager"), CFSTR("FTServices")), "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "profileID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "loginID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "acAccountWithProfileID:username:accountStore:", v6, v7, v3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void IDSGetServiceUserIDsWithCompletionBlock(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v3 = a1;
  v4 = a2;
  if (_IDSRunningInDaemon())
    sub_1907FBC20();
  if (v3)
  {
    +[IDSHomeKitManager sharedInstance](IDSHomeKitManager, "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_1907D0B50;
    v6[3] = &unk_1E2C64E38;
    v7 = v3;
    objc_msgSend(v5, "getServiceUserIDsWithCompletionBlock:queue:", v6, v4);

  }
}

uint64_t sub_1907D0B50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void IDSGetAdminAccessTokensWithCompletionBlock(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  _QWORD v15[4];
  id v16;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  if (_IDSRunningInDaemon())
    sub_1907FBC48();
  if (v12)
  {
    +[IDSHomeKitManager sharedInstance](IDSHomeKitManager, "sharedInstance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_1907D0C58;
    v15[3] = &unk_1E2C64E38;
    v16 = v12;
    objc_msgSend(v14, "getAdminAccessTokensWithWithServiceUserID:accessoryID:pairingToken:completionBlock:queue:", v9, v10, v11, v15, v13);

  }
}

uint64_t sub_1907D0C58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void IDSGetConsentTokensWithCompletionBlock(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  _QWORD v15[4];
  id v16;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  if (_IDSRunningInDaemon())
    sub_1907FBC70();
  if (v12)
  {
    +[IDSHomeKitManager sharedInstance](IDSHomeKitManager, "sharedInstance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_1907D0D60;
    v15[3] = &unk_1E2C64E38;
    v16 = v12;
    objc_msgSend(v14, "getConsentTokensWithServiceUserID:accessoryIDs:adminID:completionBlock:queue:", v9, v10, v11, v15, v13);

  }
}

uint64_t sub_1907D0D60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void IDSGetUserAccessTokensWithCompletionBlock(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  _QWORD v18[4];
  id v19;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  if (_IDSRunningInDaemon())
    sub_1907FBC98();
  if (v15)
  {
    +[IDSHomeKitManager sharedInstance](IDSHomeKitManager, "sharedInstance");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = sub_1907D0E84;
    v18[3] = &unk_1E2C64E38;
    v19 = v15;
    objc_msgSend(v17, "getUserAccessTokensWithServiceUserID:userID:userHandle:accessoryRequests:completionBlock:queue:", v11, v12, v13, v14, v18, v16);

  }
}

uint64_t sub_1907D0E84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void IDSRefreshUserAccessTokensWithCompletionBlock(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v13 = a1;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (_IDSRunningInDaemon())
    sub_1907FBCC0();

}

void sub_1907D0F50()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE20A258);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD6528;
  qword_1ECDD6528 = v0;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE203488);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v2 = (void *)qword_1ECDD6528;
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  objc_msgSend(v3, "setWithObjects:", v4, v5, objc_opt_class(), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_currentSubscriptionsForActivity_completion_, 0, 1);

  objc_msgSend((id)qword_1ECDD6528, "setInterface:forSelector:argumentIndex:ofReply:", v7, sel_setupActivityMonitorClient_forActivity_, 0, 0);
}

void sub_1907D1AF4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v4 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1907D1B9C;
  v7[3] = &unk_1E2C60E00;
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t sub_1907D1B9C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1907D1BAC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "service");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1907D1C64;
  v7[3] = &unk_1E2C61A88;
  v8 = *(id *)(a1 + 48);
  objc_msgSend(v4, "featureTogglerCollaboratorForService:withErrorHandler:", v5, v7);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "retrieveFeatureToggleStateForOptions:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1907D1C64(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "FeatureToggler");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907FBD78((uint64_t)v3, v4, v5);

  objc_msgSend(v3, "domain");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v6, "isEqualToString:", CFSTR("IDSXPCConnectionErrorDomain")))
  {

    goto LABEL_7;
  }
  v7 = objc_msgSend(v3, "code");

  if (v7 != -2000)
  {
LABEL_7:
    v8 = *(_QWORD *)(a1 + 32);
    v9 = 2;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a1 + 32);
  v9 = 3;
LABEL_8:
  +[IDSFeatureToggleRetrievalResult resultWithError:](IDSFeatureToggleRetrievalResult, "resultWithError:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v10);

}

void sub_1907D1F4C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v4 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1907D1FF4;
  v7[3] = &unk_1E2C60E00;
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t sub_1907D1FF4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1907D2004(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "service");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1907D20BC;
  v7[3] = &unk_1E2C61A88;
  v8 = *(id *)(a1 + 48);
  objc_msgSend(v4, "featureTogglerCollaboratorForService:withErrorHandler:", v5, v7);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "updateFeatureToggleStateWithOptions:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1907D20BC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D34D40], "FeatureToggler");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907FBD78((uint64_t)v3, v4, v5);

  objc_msgSend(v3, "domain");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v6, "isEqualToString:", CFSTR("IDSXPCConnectionErrorDomain")))
  {

    goto LABEL_7;
  }
  v7 = objc_msgSend(v3, "code");

  if (v7 != -2000)
  {
LABEL_7:
    v8 = *(_QWORD *)(a1 + 32);
    v9 = 2;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(a1 + 32);
  v9 = 3;
LABEL_8:
  +[IDSFeatureToggleUpdateResult resultWithError:](IDSFeatureToggleUpdateResult, "resultWithError:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v10);

}

void sub_1907D223C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE20A2B8);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD6530;
  qword_1ECDD6530 = v0;

  v2 = (void *)qword_1ECDD6530;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_updateFeatureToggleStateWithOptions_completion_, 0, 0);

  v4 = (void *)qword_1ECDD6530;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setClasses:forSelector:argumentIndex:ofReply:", v5, sel_updateFeatureToggleStateWithOptions_completion_, 0, 1);

  v6 = (void *)qword_1ECDD6530;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setClasses:forSelector:argumentIndex:ofReply:", v7, sel_retrieveFeatureToggleStateForOptions_completion_, 0, 0);

  v8 = (void *)qword_1ECDD6530;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setClasses:forSelector:argumentIndex:ofReply:", v9, sel_retrieveFeatureToggleStateForOptions_completion_, 0, 1);

}

uint64_t sub_1907D2448(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setFromID:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1907D2564(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "addDelegate:queue:", a1[5], a1[6]);
}

uint64_t sub_1907D25E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeDelegate:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1907D26B0(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "removeDelegate:forService:listenerID:", a1[7], a1[5], a1[6]);
}

uint64_t sub_1907D2804(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_addListenerID_forService_);
}

void sub_1907D299C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D29C0(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "removeListenerID:forService:", a1[5], a1[6]);
  *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_1907D2CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907D2D00(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1907D2DC0;
  v8[3] = &unk_1E2C628F8;
  v9 = *(id *)(a1 + 80);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = objc_msgSend(v3, "refreshIDStatusForDestinations:service:preferredFromID:listenerID:forceRefresh:queue:completionBlock:", v2, v4, v5, v6, 0, v7, v8);

}

void sub_1907D2DC0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v6 = v3;
    if (objc_msgSend(v3, "state"))
    {
      (*(void (**)(uint64_t, _QWORD))(v4 + 16))(v4, MEMORY[0x1E0C9AA70]);
    }
    else
    {
      objc_msgSend(v6, "value");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

    }
    v3 = v6;
  }

}

void sub_1907D3124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907D3144(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1907D3204;
  v8[3] = &unk_1E2C628F8;
  v9 = *(id *)(a1 + 80);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = objc_msgSend(v3, "refreshIDStatusForDestinations:service:preferredFromID:listenerID:forceRefresh:queue:completionBlock:", v2, v4, v5, v6, 1, v7, v8);

}

void sub_1907D3204(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v6 = v3;
    if (objc_msgSend(v3, "state"))
    {
      (*(void (**)(uint64_t, _QWORD))(v4 + 16))(v4, MEMORY[0x1E0C9AA70]);
    }
    else
    {
      objc_msgSend(v6, "value");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

    }
    v3 = v6;
  }

}

void sub_1907D3568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D3588(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "refreshIDStatusForDestinations:service:preferredFromID:listenerID:forceRefresh:queue:completionBlock:", a1[5], a1[6], a1[7], a1[8], 0, a1[9], a1[10]);
  *(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 24) = result;
  return result;
}

void sub_1907D3848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D3868(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "refreshIDStatusForDestination:service:preferredFromID:listenerID:queue:completionBlock:", a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  *(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 24) = result;
  return result;
}

void sub_1907D3B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907D3BB0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1907D3C68;
  v8[3] = &unk_1E2C628F8;
  v9 = *(id *)(a1 + 80);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = objc_msgSend(v3, "requiredIDStatusForDestinations:service:preferredFromID:listenerID:queue:completionBlock:", v2, v4, v5, v6, v7, v8);

}

void sub_1907D3C68(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v6 = v3;
    if (objc_msgSend(v3, "state"))
    {
      (*(void (**)(uint64_t, _QWORD))(v4 + 16))(v4, MEMORY[0x1E0C9AA70]);
    }
    else
    {
      objc_msgSend(v6, "value");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

    }
    v3 = v6;
  }

}

void sub_1907D3F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D3F74(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "requiredIDStatusForDestination:service:preferredFromID:listenerID:queue:completionBlock:", a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  *(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 24) = result;
  return result;
}

void sub_1907D419C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D41B4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "currentIDStatusForDestinations:service:preferredFromID:respectExpiry:listenerID:queue:completionBlock:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 96), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = result;
  return result;
}

void sub_1907D43EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D4404(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "currentIDStatusForDestination:service:preferredFromID:respectExpiry:listenerID:queue:completionBlock:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 96), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = result;
  return result;
}

void sub_1907D47A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D47C8(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "idInfoForDestinations:service:preferredFromID:infoTypes:options:listenerID:queue:completionBlock:", a1[5], a1[6], a1[7], a1[13], a1[8], a1[9], a1[10], a1[11]);
  *(_BYTE *)(*(_QWORD *)(a1[12] + 8) + 24) = result;
  return result;
}

void sub_1907D48F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D4908(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "_hasCacheForService:", a1[5]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_1907D4A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D4A68(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "_currentCachedIDStatusForDestination:service:listenerID:", a1[5], a1[6], a1[7]);
  *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24) = result;
  return result;
}

void sub_1907D4C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D4C20(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "_warmupQueryCacheForService:", a1[5]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

void sub_1907D4DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D4DD4(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "_flushQueryCacheForService:", a1[5]);
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = result;
  return result;
}

uint64_t sub_1907D4EB8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel__setCurrentIDStatus_forDestination_service_);
}

uint64_t sub_1907D4F28(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_flushQueryCache);
}

void sub_1907D51A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907D51D0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  IMSingleObjectArray();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1907D5280;
  v9[3] = &unk_1E2C64F60;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(id *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 72);
  v10 = v7;
  v11 = v8;
  objc_msgSend(v2, "_sync_refreshIDStatusForDestinations:service:preferredFromID:listenerID:completionBlock:", v3, v6, v4, v5, v9);

}

void sub_1907D5280(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  if (objc_msgSend(v6, "state")
    || (objc_msgSend(v6, "value"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v4, "objectForKey:", *(_QWORD *)(a1 + 32)),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v4,
        !v5))
  {
    v3 = 0;
  }
  else
  {
    v3 = objc_msgSend(v5, "integerValue");

  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v3;

}

void sub_1907D55A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D55CC(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];

  v1 = a1[5];
  v2 = *(void **)(a1[4] + 8);
  v3 = a1[6];
  v4 = a1[7];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1907D5630;
  v7[3] = &unk_1E2C64FB0;
  v5 = a1[8];
  v7[4] = a1[9];
  return objc_msgSend(v2, "_sync_refreshIDStatusForDestinations:service:preferredFromID:listenerID:completionBlock:", v1, v3, v4, v5, v7);
}

void sub_1907D5630(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = objc_msgSend(v5, "state");
  if (v3)
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend(v5, "value");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v4);
  if (!v3)

}

void sub_1907D5960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907D5988(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  IMSingleObjectArray();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(unsigned __int8 *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1907D5A48;
  v10[3] = &unk_1E2C64FD8;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(id *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 72);
  v11 = v8;
  v12 = v9;
  objc_msgSend(v2, "_sync_currentIDStatusForDestinations:service:preferredFromID:respectExpiry:listenerID:completionBlock:", v3, v7, v5, v4, v6, v10);

}

void sub_1907D5A48(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(a2, "objectForKey:", *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    v3 = (void *)objc_msgSend(v3, "integerValue");
    v4 = v5;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v3;

}

void sub_1907D5D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D5DA4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(unsigned __int8 *)(a1 + 80);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1907D5E0C;
  v8[3] = &unk_1E2C65028;
  v6 = *(_QWORD *)(a1 + 64);
  v8[4] = *(_QWORD *)(a1 + 72);
  return objc_msgSend(v2, "_sync_currentIDStatusForDestinations:service:preferredFromID:respectExpiry:listenerID:completionBlock:", v1, v3, v4, v5, v6, v8);
}

void sub_1907D5E0C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1907D608C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D60AC(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "currentRemoteDevicesForDestinations:service:preferredFromID:listenerID:queue:completionBlock:", a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  *(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 24) = result;
  return result;
}

void sub_1907D635C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D637C(_QWORD *a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1[4] + 8), "currentRemoteDevicesForDestinations:service:preferredFromID:listenerID:queue:completionBlockWithError:", a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
  *(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 24) = result;
  return result;
}

void sub_1907D65F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D6614(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];

  v1 = a1[5];
  v2 = *(void **)(a1[4] + 8);
  v3 = a1[6];
  v4 = a1[7];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1907D6678;
  v7[3] = &unk_1E2C65028;
  v5 = a1[8];
  v7[4] = a1[9];
  return objc_msgSend(v2, "_sync_currentRemoteDevicesForDestinations:service:preferredFromID:listenerID:completionBlock:", v1, v3, v4, v5, v7);
}

void sub_1907D6678(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1907D675C(uint64_t a1, uint64_t a2)
{
  id v3;

  objc_msgSend(MEMORY[0x1E0D1F460], "participantsFromEndpoints:", a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1907D75B0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = a2;
  objc_msgSend(v2, "object");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "continuityDidUpdateState:", v4);

}

uint64_t sub_1907D7678(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleReconnect);
}

uint64_t sub_1907D7788(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1907D77F8(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = a2;
  objc_msgSend(v2, "object");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "continuityDidUpdateState:", v4);

}

void sub_1907D789C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "continuity:didStartAdvertisingOfType:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_1907D7954(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "continuity:didStopAdvertisingOfType:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_1907D7A3C(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "continuity:didStopAdvertisingOfType:withError:", v3, a1[6], a1[5]);

  }
}

void sub_1907D7B24(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(a1 + 48);
    sub_1907A6374(*(void **)(a1 + 40));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "continuity:didFailToStartAdvertisingOfType:withError:", v3, v4, v5);

  }
}

void sub_1907D7BFC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "continuity:didStartScanningForType:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_1907D7CB4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "continuity:didStopScanningForType:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_1907D7D9C(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(a1 + 48);
    sub_1907A6374(*(void **)(a1 + 40));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "continuity:didFailToStartScanningForType:withError:", v3, v4, v5);

  }
}

void sub_1907D7ED0(_QWORD *a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", a1[4]);
    objc_msgSend(*(id *)(a1[5] + 8), "object");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "continuity:didDiscoverType:withData:fromPeer:", v4, a1[7], a1[6], v3);

  }
}

void sub_1907D7FE8(_QWORD *a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", a1[4]);
    objc_msgSend(*(id *)(a1[5] + 8), "object");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "continuity:didLosePeer:type:", v4, v3, a1[6]);

  }
}

void sub_1907D812C(_QWORD *a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", a1[4]);
    objc_msgSend(*(id *)(a1[5] + 8), "object");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "continuity:didStartTrackingPeer:type:error:", v4, v3, a1[7], a1[6]);

  }
}

void sub_1907D8244(_QWORD *a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", a1[4]);
    objc_msgSend(*(id *)(a1[5] + 8), "object");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "continuity:didStopTrackingPeer:type:", v4, v3, a1[6]);

  }
}

uint64_t sub_1907D8318(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "UUIDString");
}

void sub_1907D8360()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE20A318);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD6538;
  qword_1ECDD6538 = v0;

  v2 = (void *)qword_1ECDD6538;
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  objc_msgSend(v3, "setWithObjects:", v4, objc_opt_class(), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v5, sel_baaHeadersBySigningData_serverTimestamp_completion_, 0, 0);

  v6 = (void *)qword_1ECDD6538;
  v7 = (void *)MEMORY[0x1E0C99E60];
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  objc_msgSend(v7, "setWithObjects:", v8, v9, v10, v11, objc_opt_class(), 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setClasses:forSelector:argumentIndex:ofReply:", v12, sel_baaHeadersBySigningData_serverTimestamp_completion_, 0, 1);

  v13 = (void *)qword_1ECDD6538;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setClasses:forSelector:argumentIndex:ofReply:", v14, sel_baaHeadersBySigningData_serverTimestamp_completion_, 1, 1);

  v15 = (void *)qword_1ECDD6538;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setClasses:forSelector:argumentIndex:ofReply:", v16, sel_baaHeadersBySigningData_serverTimestamp_completion_, 2, 1);

}

void sub_1907D8588()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  id v91;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE20A378);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD6540;
  qword_1ECDD6540 = v0;

  v2 = (void *)qword_1ECDD6540;
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  objc_msgSend(v3, "setWithObjects:", v4, v5, objc_opt_class(), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_addEntries_withCompletion_, 0, 1);

  v7 = (void *)qword_1ECDD6540;
  v8 = (void *)MEMORY[0x1E0C99E60];
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  objc_msgSend(v8, "setWithObjects:", v9, v10, objc_opt_class(), 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setClasses:forSelector:argumentIndex:ofReply:", v11, sel_addEntries_withCompletion_, 0, 0);

  v12 = (void *)qword_1ECDD6540;
  v13 = (void *)MEMORY[0x1E0C99E60];
  v14 = objc_opt_class();
  v15 = objc_opt_class();
  objc_msgSend(v13, "setWithObjects:", v14, v15, objc_opt_class(), 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setClasses:forSelector:argumentIndex:ofReply:", v16, sel_currentEntries_, 0, 1);

  v17 = (void *)qword_1ECDD6540;
  v18 = (void *)MEMORY[0x1E0C99E60];
  v19 = objc_opt_class();
  v20 = objc_opt_class();
  objc_msgSend(v18, "setWithObjects:", v19, v20, objc_opt_class(), 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setClasses:forSelector:argumentIndex:ofReply:", v21, sel_currentEntries_, 0, 0);

  v22 = (void *)qword_1ECDD6540;
  v23 = (void *)MEMORY[0x1E0C99E60];
  v24 = objc_opt_class();
  v25 = objc_opt_class();
  objc_msgSend(v23, "setWithObjects:", v24, v25, objc_opt_class(), 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setClasses:forSelector:argumentIndex:ofReply:", v26, sel_currentDonatedEntries_, 0, 1);

  v27 = (void *)qword_1ECDD6540;
  v28 = (void *)MEMORY[0x1E0C99E60];
  v29 = objc_opt_class();
  v30 = objc_opt_class();
  objc_msgSend(v28, "setWithObjects:", v29, v30, objc_opt_class(), 0);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setClasses:forSelector:argumentIndex:ofReply:", v31, sel_currentDonatedEntries_, 0, 0);

  v32 = (void *)qword_1ECDD6540;
  v33 = (void *)MEMORY[0x1E0C99E60];
  v34 = objc_opt_class();
  v35 = objc_opt_class();
  objc_msgSend(v33, "setWithObjects:", v34, v35, objc_opt_class(), 0);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "setClasses:forSelector:argumentIndex:ofReply:", v36, sel_recentlyBlockedEntries_, 0, 1);

  v37 = (void *)qword_1ECDD6540;
  v38 = (void *)MEMORY[0x1E0C99E60];
  v39 = objc_opt_class();
  v40 = objc_opt_class();
  objc_msgSend(v38, "setWithObjects:", v39, v40, objc_opt_class(), 0);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "setClasses:forSelector:argumentIndex:ofReply:", v41, sel_recentlyBlockedEntries_, 0, 0);

  v42 = (void *)qword_1ECDD6540;
  v43 = (void *)MEMORY[0x1E0C99E60];
  v44 = objc_opt_class();
  v45 = objc_opt_class();
  objc_msgSend(v43, "setWithObjects:", v44, v45, objc_opt_class(), 0);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "setClasses:forSelector:argumentIndex:ofReply:", v46, sel_removeAllDonatedEntries_, 0, 1);

  v47 = (void *)qword_1ECDD6540;
  v48 = (void *)MEMORY[0x1E0C99E60];
  v49 = objc_opt_class();
  v50 = objc_opt_class();
  objc_msgSend(v48, "setWithObjects:", v49, v50, objc_opt_class(), 0);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "setClasses:forSelector:argumentIndex:ofReply:", v51, sel_removeAllDonatedEntries_, 0, 0);

  v52 = (void *)qword_1ECDD6540;
  v53 = (void *)MEMORY[0x1E0C99E60];
  v54 = objc_opt_class();
  v55 = objc_opt_class();
  objc_msgSend(v53, "setWithObjects:", v54, v55, objc_opt_class(), 0);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v52, "setClasses:forSelector:argumentIndex:ofReply:", v56, sel_removeAllEntries_, 0, 1);

  v57 = (void *)qword_1ECDD6540;
  v58 = (void *)MEMORY[0x1E0C99E60];
  v59 = objc_opt_class();
  v60 = objc_opt_class();
  objc_msgSend(v58, "setWithObjects:", v59, v60, objc_opt_class(), 0);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v57, "setClasses:forSelector:argumentIndex:ofReply:", v61, sel_removeAllEntries_, 0, 0);

  v62 = (void *)qword_1ECDD6540;
  v63 = (void *)MEMORY[0x1E0C99E60];
  v64 = objc_opt_class();
  v65 = objc_opt_class();
  objc_msgSend(v63, "setWithObjects:", v64, v65, objc_opt_class(), 0);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v62, "setClasses:forSelector:argumentIndex:ofReply:", v66, sel_removeEntries_withCompletion_, 0, 1);

  v67 = (void *)qword_1ECDD6540;
  v68 = (void *)MEMORY[0x1E0C99E60];
  v69 = objc_opt_class();
  v70 = objc_opt_class();
  objc_msgSend(v68, "setWithObjects:", v69, v70, objc_opt_class(), 0);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v67, "setClasses:forSelector:argumentIndex:ofReply:", v71, sel_removeEntries_withCompletion_, 0, 0);

  v72 = (void *)qword_1ECDD6540;
  v73 = (void *)MEMORY[0x1E0C99E60];
  v74 = objc_opt_class();
  v75 = objc_opt_class();
  objc_msgSend(v73, "setWithObjects:", v74, v75, objc_opt_class(), 0);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v72, "setClasses:forSelector:argumentIndex:ofReply:", v76, sel_removeDonatedEntries_withCompletion_, 0, 1);

  v77 = (void *)qword_1ECDD6540;
  v78 = (void *)MEMORY[0x1E0C99E60];
  v79 = objc_opt_class();
  v80 = objc_opt_class();
  objc_msgSend(v78, "setWithObjects:", v79, v80, objc_opt_class(), 0);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v77, "setClasses:forSelector:argumentIndex:ofReply:", v81, sel_removeDonatedEntries_withCompletion_, 0, 0);

  v82 = (void *)qword_1ECDD6540;
  v83 = (void *)MEMORY[0x1E0C99E60];
  v84 = objc_opt_class();
  v85 = objc_opt_class();
  objc_msgSend(v83, "setWithObjects:", v84, v85, objc_opt_class(), 0);
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v82, "setClasses:forSelector:argumentIndex:ofReply:", v86, sel_replaceEntries_replaceAll_withCompletion_, 0, 1);

  v87 = (void *)qword_1ECDD6540;
  v88 = (void *)MEMORY[0x1E0C99E60];
  v89 = objc_opt_class();
  v90 = objc_opt_class();
  objc_msgSend(v88, "setWithObjects:", v89, v90, objc_opt_class(), 0);
  v91 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v87, "setClasses:forSelector:argumentIndex:ofReply:", v91, sel_replaceEntries_replaceAll_withCompletion_, 0, 0);

}

uint64_t sub_1907D9C68(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_cleanupSession_);
}

uint64_t sub_1907DA2C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1907DA494(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "sessionEnded:withReason:error:", v3, *(unsigned int *)(*(_QWORD *)(a1 + 32) + 156), 0);
LABEL_5:

    goto LABEL_6;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "sessionEnded:", v3);
    goto LABEL_5;
  }
LABEL_6:

}

void sub_1907DCA0C(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:receivedInvitationAcceptFromID:withData:", v3, a1[5], a1[6]);
LABEL_5:

    goto LABEL_6;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:receivedInvitationAcceptFromID:", v3, a1[5]);
    goto LABEL_5;
  }
LABEL_6:

}

void sub_1907DCCF4(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:receivedInvitationDeclineFromID:withData:", v3, a1[5], a1[6]);
LABEL_5:

    goto LABEL_6;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:receivedInvitationDeclineFromID:", v3, a1[5]);
    goto LABEL_5;
  }
LABEL_6:

}

void sub_1907DCFDC(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  objc_msgSend(*(id *)(a1[4] + 8), "object");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v4, "session:receivedInvitationCancelFromID:withData:", v3, a1[5], a1[6]);
    }
    else if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v4, "session:receivedInvitationCancelFromID:", v3, a1[5]);
    }
  }

}

void sub_1907DD294(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:receivedSessionMessageFromID:withData:", v3, a1[5], a1[6]);

  }
}

void sub_1907DD51C(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1[4] + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:receivedSessionEndFromID:withData:", v3, a1[5], a1[6]);

  }
}

void sub_1907DD7A4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "session:invitationSentToTokens:shouldBreakBeforeMake:", v3, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));

  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "session:invitationSentToTokens:", v4, *(_QWORD *)(a1 + 40));

  }
}

void sub_1907DD9E4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "allocationDone:sessionInfo:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_1907DDC18(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "sessionStarted:", v3);

  }
}

void sub_1907DDE98(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "sessionEnded:withReason:error:", v4, *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
LABEL_6:

      goto LABEL_7;
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "sessionEnded:", v4);
      goto LABEL_6;
    }
  }
LABEL_7:

}

void sub_1907DE88C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "object");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "session:didReceiveReport:", v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_1907DE9CC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    +[IDSLogging _IDSSession](IDSLogging, "_IDSSession");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = objc_msgSend(*(id *)(a1 + 32), "hash");
      v6 = objc_msgSend(*(id *)(a1 + 32), "length");
      v7 = 134218240;
      v8 = v5;
      v9 = 2048;
      v10 = v6;
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_INFO, "UNRL: Received data Daemon -> Client  (data hash: %lu)  (length: %lu)", (uint8_t *)&v7, 0x16u);
    }

    objc_msgSend(v3, "session:didReceiveData:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24), *(_QWORD *)(a1 + 32));
  }

}

void sub_1907DEBA8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x26u);
}

char *sub_1907DEBD8@<X0>(int __errnum@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = a2;
  return strerror(__errnum);
}

id sub_1907DEBEC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v4;

  v3 = (void *)IDSCopyIDForDevice(a3);
  objc_msgSend(MEMORY[0x1E0D34D18], "destinationWithDeviceURI:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id sub_1907DEC30(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v4;

  v3 = (void *)IDSCopyIDForRapportPublicDeviceIdentifier(a3);
  objc_msgSend(MEMORY[0x1E0D34D18], "destinationWithRapportPublicIdentifierURI:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1907DF178(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1907DF244;
  block[3] = &unk_1E2C60EC8;
  v8 = *(id *)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

}

uint64_t sub_1907DF244(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1907DF304(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1907DF3D0;
  block[3] = &unk_1E2C60EC8;
  v8 = *(id *)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

}

uint64_t sub_1907DF3D0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1907DF490(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1907DF55C;
  block[3] = &unk_1E2C60EC8;
  v8 = *(id *)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

}

uint64_t sub_1907DF55C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1907DF61C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v7 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1907DF6E8;
  block[3] = &unk_1E2C60EC8;
  v8 = *(id *)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

}

uint64_t sub_1907DF6E8(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1907DF7A8(uint64_t a1, void *a2, char a3)
{
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  char v12;

  v5 = a2;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v6 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1907DF858;
  block[3] = &unk_1E2C60E50;
  v7 = *(id *)(a1 + 40);
  v10 = v5;
  v11 = v7;
  v12 = a3;
  v8 = v5;
  dispatch_async(v6, block);

}

uint64_t sub_1907DF858(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48));
}

void sub_1907DF934(uint64_t a1, char a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  _QWORD block[4];
  id v10;
  id v11;
  char v12;

  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v6 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1907DF9E4;
  block[3] = &unk_1E2C60E50;
  v7 = *(id *)(a1 + 40);
  v12 = a2;
  v10 = v5;
  v11 = v7;
  v8 = v5;
  dispatch_async(v6, block);

}

uint64_t sub_1907DF9E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

void sub_1907DFAC8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v4 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1907DFB70;
  v7[3] = &unk_1E2C60E00;
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t sub_1907DFB70(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1907DFC18(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v4 = objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1907DFCC0;
  v7[3] = &unk_1E2C60E00;
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t sub_1907DFCC0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1907DFD68(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[4];
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "queue");
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1907DFDEC;
  block[3] = &unk_1E2C604E8;
  v4 = *(id *)(a1 + 40);
  dispatch_async(v2, block);

}

uint64_t sub_1907DFDEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1907DFEA4(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[4];
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "queue");
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1907DFF28;
  block[3] = &unk_1E2C604E8;
  v4 = *(id *)(a1 + 40);
  dispatch_async(v2, block);

}

uint64_t sub_1907DFF28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1907E0574()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE20A3D8);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD6548;
  qword_1ECDD6548 = v0;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE1EDE90);
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setClasses:forSelector:argumentIndex:ofReply:", v2, sel_handleReceivedIncomingMessageData_identifier_context_, 2, 0);

  objc_msgSend((id)qword_1ECDD6548, "setInterface:forSelector:argumentIndex:ofReply:", v7, sel_setupServerMessagingClient_withUUID_forTopic_commands_, 0, 0);
  v3 = (void *)qword_1ECDD6548;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setClasses:forSelector:argumentIndex:ofReply:", v4, sel_sendMessageData_onTopic_withOptions_identifier_completion_, 2, 0);

  v5 = (void *)qword_1ECDD6548;
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_sendCertifiedDeliveryReceipt_, 0, 0);

}

void sub_1907E0774(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1907E0788()
{
  IDSXPCDaemonController *v0;
  void *v1;
  void *v2;
  id v3;

  v0 = [IDSXPCDaemonController alloc];
  +[IDSInternalQueueController sharedInstance](IDSInternalQueueController, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "queue");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = -[IDSXPCDaemonController initSyncControllerWithQueue:](v0, "initSyncControllerWithQueue:", v2);

  return v3;
}

id sub_1907E07F4()
{
  return +[IDSXPCDaemonController weakSharedInstance](IDSXPCDaemonController, "weakSharedInstance");
}

void sub_1907E0A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907E0A90(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1907E0C18(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1907E0C34(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_handleInterruption");

}

void sub_1907E0C60(uint64_t a1, void *a2)
{
  void *v4;
  _QWORD v5[4];
  id v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1907E0CF0;
  v5[3] = &unk_1E2C61A88;
  v6 = *(id *)(a1 + 32);
  objc_msgSend(a2, "activityMonitorCollaboratorWithErrorHandler:", v5);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1907E0CF0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    sub_1907FEC54((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1907E10C8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1907E10E4(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_BYTE *)(a1 + 48))
      v5 = WeakRetained;
    else
      v5 = 0;
    objc_msgSend(v6, "setupActivityMonitorClient:forActivity:", v5, *(_QWORD *)(a1 + 32));
  }

}

void sub_1907E1348(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1907E1440()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE20A438);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDD6550;
  qword_1ECDD6550 = v0;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE1F8E58);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)qword_1ECDD6550, "setInterface:forSelector:argumentIndex:ofReply:", v2, sel_addDeliveryHandler_uuid_, 0, 0);

}

double sub_1907E1838()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", CFSTR("batch-query-time-limit"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_msgSend(v1, "doubleValue");
    v3 = v2;
  }
  else
  {
    v3 = 60.0;
  }

  return v3;
}

uint64_t sub_1907E1E00()
{
  void *v0;
  void *v1;
  uint64_t v2;

  objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", CFSTR("batch-query-use-death-timer"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v2 = objc_msgSend(v1, "BOOLValue");
  else
    v2 = 0;

  return v2;
}

void sub_1907E1E84(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  double v18;
  void *v19;
  void *v20;
  double v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  id v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 56));
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48))
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(void **)(v5 + 48);
    *(_QWORD *)(v5 + 48) = v4;

  }
  v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v8 = *(id *)(a1 + 40);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v23 != v11)
          objc_enumerationMutation(v8);
        v13 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * i);
        objc_msgSend(v3, "objectForKey:", v13, (_QWORD)v22);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v14, "integerValue"))
          objc_msgSend(v7, "setObject:forKey:", v14, v13);
        else
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "addObject:", v13);

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    }
    while (v10);
  }

  +[IDSLogging IDQuery](IDSLogging, "IDQuery");
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v27 = v7;
    _os_log_impl(&dword_1906E0000, v15, OS_LOG_TYPE_DEFAULT, "Received cached results %@", buf, 0xCu);
  }

  if (!objc_msgSend(v3, "count"))
  {
    +[IDSLogging IDQuery](IDSLogging, "IDQuery");
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906E0000, v16, OS_LOG_TYPE_DEFAULT, "Received 0 cached results, query all destinations", buf, 2u);
    }

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "addObjectsFromArray:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40));
  }
  if (objc_msgSend(v7, "count", (_QWORD)v22))
    objc_msgSend(*(id *)(a1 + 32), "_calloutToDelegateWithResult:error:", v7, 0);
  v17 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v17 + 64))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v18 = sub_1907E2174();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "objectForKey:", CFSTR("batch-query-first-interval"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      if (v20)
      {
        objc_msgSend(v20, "doubleValue");
        v18 = v21;
      }
      else
      {
        v18 = 1.0;
      }

    }
    objc_msgSend((id)v17, "_scheduleNextQuery:", v18);
    v17 = *(_QWORD *)(a1 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 56));

}

double sub_1907E2174()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", CFSTR("batch-query-interval"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
  {
    objc_msgSend(v1, "doubleValue");
    v3 = v2;
  }
  else
  {
    v3 = 3.0;
  }

  return v3;
}

void sub_1907E26E8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging IDQuery](IDSLogging, "IDQuery");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412290;
    v9 = v3;
    _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Received results %@", (uint8_t *)&v8, 0xCu);
  }

  v5 = objc_msgSend(v3, "state");
  if (v5 == 1)
  {
    objc_msgSend(v3, "error");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 0;
  }
  else
  {
    if (v5)
    {
      v6 = 0;
    }
    else
    {
      objc_msgSend(v3, "value");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v7 = 0;
  }
  objc_msgSend(*(id *)(a1 + 32), "_calloutToDelegateWithResult:error:", v6, v7);

}

void sub_1907E2A2C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    +[IDSLogging IDQuery](IDSLogging, "IDQuery");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v11 = 134217984;
      v12 = v3;
      _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Calling out to old delegate %p", (uint8_t *)&v11, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "idStatusUpdatedForDestinations:", *(_QWORD *)(a1 + 40));
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    +[IDSLogging IDQuery](IDSLogging, "IDQuery");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v11 = 134218242;
      v12 = v5;
      v13 = 2112;
      v14 = v6;
      _os_log_impl(&dword_1906E0000, v4, OS_LOG_TYPE_DEFAULT, "Calling out to old delegate %p for service %@", (uint8_t *)&v11, 0x16u);
    }

    objc_msgSend(*(id *)(a1 + 32), "idStatusUpdatedForDestinations:service:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8));
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    +[IDSLogging IDQuery](IDSLogging, "IDQuery");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v11 = 134217984;
      v12 = v8;
      _os_log_impl(&dword_1906E0000, v7, OS_LOG_TYPE_DEFAULT, "Returning results to delegate %p", (uint8_t *)&v11, 0xCu);
    }

    v9 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 88), "object");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "batchQueryController:updatedDestinationsStatus:onService:error:", v10, *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), *(_QWORD *)(a1 + 56));

  }
}

void sub_1907E2F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1907E2F8C()
{
  return (id)objc_opt_self();
}

uint64_t sub_1907E3074(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[4] + 8), "setDelegate:queue:", a1[5], a1[6]);
}

uint64_t sub_1907E313C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), sel_sendMKMRecoveryRequestToGroup_);
}

uint64_t sub_1907E3164(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_updateAvailability);
}

uint64_t sub_1907E332C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateAvailability");
}

void sub_1907E3A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  cut_arc_os_release();
  _Unwind_Resume(a1);
}

void sub_1907E3A38(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v7);

  +[IDSLogging transactionLog](IDSLogging, "transactionLog");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412290;
      v12 = v6;
      _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "failed to get token {error: %@}", (uint8_t *)&v11, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_completeWithError:", v6);
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_INFO, "Got token", (uint8_t *)&v11, 2u);
    }

    +[IDSLogging transactionLog](IDSLogging, "transactionLog");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412290;
      v12 = v5;
      _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "!setState Token=%@", (uint8_t *)&v11, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "qPerformWithToken:", v5);
  }

}

void sub_1907E3CAC(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  _QWORD v17[5];
  id v18;
  char v19;
  uint8_t buf[4];
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v12 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v12);

  +[IDSLogging transactionLog](IDSLogging, "transactionLog");
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a4);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v21 = v14;
    _os_log_impl(&dword_1906E0000, v13, OS_LOG_TYPE_DEFAULT, "!addState moreComing=%@", buf, 0xCu);

  }
  if (v11)
  {
    +[IDSLogging transactionLog](IDSLogging, "transactionLog");
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v11;
      _os_log_impl(&dword_1906E0000, v15, OS_LOG_TYPE_DEFAULT, "Failed to fetch messages {error: %@}", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_completeWithError:", v11);
  }
  else
  {
    v16 = *(void **)(a1 + 32);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = sub_1907E3E90;
    v17[3] = &unk_1E2C653B0;
    v17[4] = v16;
    v18 = v10;
    v19 = a4;
    objc_msgSend(v16, "qIngestMessages:completion:", v9, v17);

  }
}

void sub_1907E3E90(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  char v11;
  uint8_t buf[4];
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (v4)
  {
    +[IDSLogging transactionLog](IDSLogging, "transactionLog");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v13 = v4;
      _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "Failed to ingest messages {error: %@}", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_completeWithError:", v4);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "delegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(a1 + 40);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1907E3FD4;
    v9[3] = &unk_1E2C65388;
    v11 = *(_BYTE *)(a1 + 48);
    v9[4] = v8;
    v10 = v7;
    objc_msgSend(v6, "taskHandler:persistToken:completion:", v8, v10, v9);

  }
}

void sub_1907E3FD4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IDSLogging transactionLog](IDSLogging, "transactionLog");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 40);
      v10 = 138412546;
      v11 = v6;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_DEFAULT, "Failed to persist token {token: %@, error: %@}", (uint8_t *)&v10, 0x16u);
    }

  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_1906E0000, v5, OS_LOG_TYPE_INFO, "Persisted token", (uint8_t *)&v10, 2u);
    }

    v7 = *(unsigned __int8 *)(a1 + 48);
    +[IDSLogging transactionLog](IDSLogging, "transactionLog");
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v7)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10) = 0;
        _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_INFO, "moreComing -- continue", (uint8_t *)&v10, 2u);
      }

      objc_msgSend(*(id *)(a1 + 32), "qPerformWithToken:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v10) = 0;
        _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "No more coming -- done", (uint8_t *)&v10, 2u);
      }

      objc_msgSend(*(id *)(a1 + 32), "_completeWithError:", 0);
    }
  }

}

void sub_1907E43D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  id v13;
  id v14;
  id v15;
  uint8_t buf[4];
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v7);

  if (v6)
  {
    +[IDSLogging transactionLog](IDSLogging, "transactionLog");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v17 = v6;
      _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "Failed to get account information {error: %{public}@}", buf, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    v9 = *(void **)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 40);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_1907E4558;
    v12[3] = &unk_1E2C65450;
    v12[4] = v9;
    v11 = *(_QWORD *)(a1 + 48);
    v13 = *(id *)(a1 + 56);
    v14 = v5;
    v15 = *(id *)(a1 + 64);
    objc_msgSend(v9, "qFetchParticipantsFromDeviceMessges:andGroupsFromGroupMessages:completion:", v10, v11, v12);

  }
}

void sub_1907E4558(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint8_t buf[4];
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    +[IDSLogging transactionLog](IDSLogging, "transactionLog");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v23 = v9;
      _os_log_impl(&dword_1906E0000, v10, OS_LOG_TYPE_DEFAULT, "Failed to get groups or participants {error: %{public}@}", buf, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v12 = *(void **)(a1 + 32);
    v11 = *(void **)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 48);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = sub_1907E4700;
    v16[3] = &unk_1E2C65428;
    v14 = v11;
    v15 = *(_QWORD *)(a1 + 32);
    v17 = v14;
    v18 = v15;
    v21 = *(id *)(a1 + 56);
    v19 = v7;
    v20 = v8;
    objc_msgSend(v12, "_transactionMessagesFromTransportMessages:withParticipants:groups:accountInfo:completion:", v14, v19, v20, v13, v16);

  }
}

void sub_1907E4700(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  _QWORD v18[4];
  id v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  +[IDSLogging transactionLog](IDSLogging, "transactionLog");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (!v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 48);
      v16 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)buf = 138478595;
      v21 = v14;
      v22 = 2113;
      v23 = v15;
      v24 = 2113;
      v25 = v16;
      v26 = 2114;
      v27 = v6;
      _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_DEFAULT, "Failed to get transaction messages from transport messges {transportMessages: %{private}@, participants: %{private}@, groups: %{private}@, error: %{public}@}", buf, 0x2Au);
    }

    v17 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
    goto LABEL_10;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v9 = objc_msgSend(*(id *)(a1 + 32), "count");
    *(_DWORD *)buf = 134218240;
    v21 = v9;
    v22 = 2048;
    v23 = objc_msgSend(v5, "count");
    _os_log_impl(&dword_1906E0000, v8, OS_LOG_TYPE_INFO, "got transaction messages from transport messages {transactionMessages.count: %ld, transportMessages.count: %ld}", buf, 0x16u);
  }

  objc_msgSend(*(id *)(a1 + 40), "syncTask");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "batchProcessingBlock");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    v17 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
LABEL_10:
    v17();
    goto LABEL_11;
  }
  objc_msgSend(*(id *)(a1 + 40), "syncTask");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "batchProcessingBlock");
  v13 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1907E4930;
  v18[3] = &unk_1E2C65400;
  v19 = *(id *)(a1 + 64);
  ((void (**)(_QWORD, id, _QWORD *))v13)[2](v13, v5, v18);

LABEL_11:
}

uint64_t sub_1907E4930(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1907E4CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 224), 8);
  _Block_object_dispose((const void *)(v37 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1907E4D14(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v7);

  +[IDSLogging transactionLog](IDSLogging, "transactionLog");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 48);
      v17 = 138543875;
      v18 = (uint64_t)v6;
      v19 = 2113;
      v20 = (uint64_t)v5;
      v21 = 2113;
      v22 = v10;
      _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "Error getting participants from device messages {error: %{public}@, participants: %{private}@, deviceMessages: %{private}@}", (uint8_t *)&v17, 0x20u);
    }

    v11 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    v12 = v6;
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v13 = objc_msgSend(v5, "count");
      v14 = objc_msgSend(*(id *)(a1 + 40), "count");
      v17 = 134218240;
      v18 = v13;
      v19 = 2048;
      v20 = v14;
      _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_INFO, "Got participants {participants.count: %ld, destinations: %ld}", (uint8_t *)&v17, 0x16u);
    }

    v11 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    v12 = v5;
  }
  v15 = v12;
  v16 = *v11;
  *v11 = v15;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1907E4EBC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "queue");
  v7 = objc_claimAutoreleasedReturnValue();
  dispatch_assert_queue_V2(v7);

  +[IDSLogging transactionLog](IDSLogging, "transactionLog");
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 48);
      v17 = 138543875;
      v18 = (uint64_t)v6;
      v19 = 2113;
      v20 = (uint64_t)v5;
      v21 = 2113;
      v22 = v10;
      _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_DEFAULT, "Error getting groups from group messages {error: %{public}@, groups: %{private}@, groupMessages: %{private}@}", (uint8_t *)&v17, 0x20u);
    }

    v11 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    v12 = v6;
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v13 = objc_msgSend(v5, "count");
      v14 = objc_msgSend(*(id *)(a1 + 40), "count");
      v17 = 134218240;
      v18 = v13;
      v19 = 2048;
      v20 = v14;
      _os_log_impl(&dword_1906E0000, v9, OS_LOG_TYPE_INFO, "Got groups {groups.count: %ld, groupIDs.count: %ld}", (uint8_t *)&v17, 0x16u);
    }

    v11 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    v12 = v5;
  }
  v15 = v12;
  v16 = *v11;
  *v11 = v15;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_1907E5064(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40), 0);
  +[IDSLogging transactionLog](IDSLogging, "transactionLog");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40);
    v5 = 138543362;
    v6 = v3;
    _os_log_impl(&dword_1906E0000, v2, OS_LOG_TYPE_DEFAULT, "Error getting groups or participants {error: %{public}@}", (uint8_t *)&v5, 0xCu);
  }

  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

void sub_1907E61F0(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 138543362;
  v7 = v4;
  sub_1906F0C98(&dword_1906E0000, a2, v5, "Instantiating %{public}@ from daemon -- returning nil", (uint8_t *)&v6);

  sub_1906F0CA4();
}

void sub_1907E6278(NSObject *a1)
{
  void *v2;
  int v3;
  const char *v4;
  __int16 v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = 136315394;
  v4 = "-[IDSContinuity initWithDelegate:queue:]";
  v5 = 2112;
  v6 = v2;
  _os_log_error_impl(&dword_1906E0000, a1, OS_LOG_TYPE_ERROR, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", (uint8_t *)&v3, 0x16u);

  sub_1906F0CA4();
}

void sub_1907E6320(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 136315138;
  v4 = "-[IDSContinuity startTrackingPeer:]";
  sub_1906F0C98(&dword_1906E0000, a1, a3, "%s is deprecated, please use startTrackingPeer:forType:", (uint8_t *)&v3);
}

void sub_1907E6398(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 136315138;
  v4 = "-[IDSContinuity stopTrackingPeer:]";
  sub_1906F0C98(&dword_1906E0000, a1, a3, "%s is deprecated, please use stopTrackingPeer:forType:", (uint8_t *)&v3);
}

void sub_1907E6410(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 138543362;
  v7 = v4;
  sub_1906F0C98(&dword_1906E0000, a2, v5, "Instantiating %{public}@ from daemon -- returning nil", (uint8_t *)&v6);

  sub_1906F3A6C();
}

void sub_1907E649C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138412290;
  v4 = a1;
  sub_1906F0C98(&dword_1906E0000, a2, a3, "Exception returned from daemon: %@", (uint8_t *)&v3);
  sub_1906F3A58();
}

void sub_1907E6504()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "Remote Object exists, not creating new remote object", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6530()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3ACC(*MEMORY[0x1E0C80C00]);
  sub_1906F3A60();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "  Grabbing remote daemon port (listener ID: %@)", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E6594()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A60();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "  Ensuring connection to daemon (has checked: %@)", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E6614()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3ACC(*MEMORY[0x1E0C80C00]);
  sub_1906F3A60();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "  Built object: %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E6678()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3ACC(*MEMORY[0x1E0C80C00]);
  sub_1906F3A60();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "ConnectionID %lu is more recent, ignoring.", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E66DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "Flushed send queue", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6708()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "We're still connected, hiding the disconnect!", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6734()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "We're still not connected, kicking off disconnect notification", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6760()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "Tried to connect to IDS daemon but we got no remote object ... handling as if the remote object died.", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E678C()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_1906F3A60();
  v3 = 2112;
  v4 = v0;
  _os_log_debug_impl(&dword_1906E0000, v1, OS_LOG_TYPE_DEBUG, "Set services: %@  (Previous: %@)", v2, 0x16u);
  sub_1906F3A58();
}

void sub_1907E6814()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F3A6C();
}

void sub_1907E68A4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F3A6C();
}

void sub_1907E6934()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3ACC(*MEMORY[0x1E0C80C00]);
  sub_1906F3A60();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Tried to remove non existent listener with ID: %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E6994()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  v2 = 138412802;
  sub_1906F3A74();
  sub_1906F3AA4(&dword_1906E0000, v0, v1, "Set %@: %@  for listener ID: %@", v2);
  sub_1906F3A6C();
}

void sub_1907E6A04()
{
  uint64_t v0;
  os_log_t v1;
  int v2;

  v2 = 138412802;
  sub_1906F3A74();
  sub_1906F3AA4(&dword_1906E0000, v0, v1, "Set %@: %@  for listener ID: %@", v2);
  sub_1906F3A6C();
}

void sub_1907E6A74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "Cleaning up LOCAL object", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6AA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "Cleaning up REMOTE object", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6ACC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "Disconnected from agent (local)...", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6AF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "Disconnected from agent (remote)...", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6B24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "Will auto reconnect...", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6B50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, " ...auto reconnecting", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6B7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "System application did suspend", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6BA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "System application did enter background", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6BD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "System application did enter foreground", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6C00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906F3A24(&dword_1906E0000, v0, v1, "System application did resume", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E6C2C()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getKTVerificationInfoClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("IDSXPCKeyTransparency.m"), 13, CFSTR("Unable to find class %s"), "KTVerificationInfo");

  __break(1u);
}

void sub_1907E6CA4(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TransparencyLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("IDSXPCKeyTransparency.m"), 12, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1907E6D20()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getKTLoggableDataClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("IDSXPCKeyTransparency.m"), 17, CFSTR("Unable to find class %s"), "KTLoggableData");

  __break(1u);
}

void sub_1907E6D98()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getKTSelfVerificationHealableErrorsClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("IDSXPCKeyTransparency.m"), 16, CFSTR("Unable to find class %s"), "KTSelfVerificationHealableErrors");

  __break(1u);
}

void sub_1907E6E10()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getKTVerifierResultClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("IDSXPCKeyTransparency.m"), 14, CFSTR("Unable to find class %s"), "KTVerifierResult");

  __break(1u);
}

void sub_1907E6E88()
{
  __assert_rtn("IDSSecurityKeyRollingRollKeys", "IDSSecurityKeyRolling.m", 19, "!_IDSRunningInDaemon()");
}

void sub_1907E6EB0()
{
  __assert_rtn("IDSSecurityKeyRollingRegenerateRegisteredIdentity", "IDSSecurityKeyRolling.m", 31, "!_IDSRunningInDaemon()");
}

void sub_1907E6ED8()
{
  __assert_rtn("IDSLocalSetupStart", "IDSLocalSetup.m", 20, "!_IDSRunningInDaemon()");
}

void sub_1907E6F00()
{
  __assert_rtn("IDSLocalSetupCompleted", "IDSLocalSetup.m", 27, "!_IDSRunningInDaemon()");
}

void sub_1907E6F28()
{
  __assert_rtn("IDSLocalSetupStop", "IDSLocalSetup.m", 34, "!_IDSRunningInDaemon()");
}

void sub_1907E6F50()
{
  __assert_rtn("IDSLocalSetupUnpair", "IDSLocalSetup.m", 41, "!_IDSRunningInDaemon()");
}

void sub_1907E6F78()
{
  __assert_rtn("IDSLocalSetupUnpairStart", "IDSLocalSetup.m", 51, "!_IDSRunningInDaemon()");
}

void sub_1907E6FA0()
{
  __assert_rtn("IDSAddPairedDevice", "IDSLocalSetup.m", 58, "!_IDSRunningInDaemon()");
}

void sub_1907E6FC8()
{
  __assert_rtn("IDSConfigureDemoMode", "IDSLocalSetup.m", 66, "!_IDSRunningInDaemon()");
}

void sub_1907E6FF0()
{
  __assert_rtn("IDSConnectPairedDevice", "IDSLocalSetup.m", 82, "!_IDSRunningInDaemon()");
}

void sub_1907E7018()
{
  __assert_rtn("IDSDeletePairedDevice", "IDSLocalSetup.m", 89, "!_IDSRunningInDaemon()");
}

void sub_1907E7040()
{
  __assert_rtn("IDSDeletePairedDeviceWithCompletion", "IDSLocalSetup.m", 97, "!_IDSRunningInDaemon()");
}

void sub_1907E7068()
{
  __assert_rtn("IDSDeletePairedDeviceWithCompletionBlock", "IDSLocalSetup.m", 109, "!_IDSRunningInDaemon()");
}

void sub_1907E7090()
{
  __assert_rtn("IDSGetPairedDevicesWithCompletionBlock", "IDSLocalSetup.m", 115, "!_IDSRunningInDaemon()");
}

void sub_1907E70B8()
{
  __assert_rtn("IDSGetPairedDevices", "IDSLocalSetup.m", 137, "!_IDSRunningInDaemon()");
}

void sub_1907E70E0()
{
  __assert_rtn("IDSGetDeliveryStatsWithCompletionBlock", "IDSLocalSetup.m", 145, "!_IDSRunningInDaemon()");
}

void sub_1907E7108()
{
  __assert_rtn("IDSInitialLocalSyncStarted", "IDSLocalSetup.m", 155, "!_IDSRunningInDaemon()");
}

void sub_1907E7130()
{
  __assert_rtn("IDSInitialLocalSyncStartedForServices", "IDSLocalSetup.m", 171, "!_IDSRunningInDaemon()");
}

void sub_1907E7158()
{
  __assert_rtn("IDSInitialLocalSyncCompleted", "IDSLocalSetup.m", 163, "!_IDSRunningInDaemon()");
}

void sub_1907E7180()
{
  __assert_rtn("IDSInitialLocalSyncCompletedForServices", "IDSLocalSetup.m", 179, "!_IDSRunningInDaemon()");
}

void sub_1907E71A8()
{
  __assert_rtn("IDSIncomingAccountSyncMessage", "IDSLocalSetup.m", 187, "!_IDSRunningInDaemon()");
}

void sub_1907E71D0()
{
  __assert_rtn("IDSSetAllowedTrafficClassifiersForDevice", "IDSLocalSetup.m", 194, "!_IDSRunningInDaemon()");
}

void sub_1907E71F8()
{
  __assert_rtn("IDSGetAllowedTrafficClassifiersForDevice", "IDSLocalSetup.m", 208, "!_IDSRunningInDaemon()");
}

void sub_1907E7220()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E72AC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E7338()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E73C4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E7454(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCD8(&dword_1906E0000, a1, a3, "Invalid context", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907E7484(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCD8(&dword_1906E0000, a1, a3, "Invalid stream name", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907E74B4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E7540(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "Received error: %@", (uint8_t *)&v2, 0xCu);
}

float sub_1907E75B4(int a1, uint8_t *buf, uint64_t a3, os_log_t log)
{
  float result;

  *(_DWORD *)buf = 67109888;
  *((_DWORD *)buf + 1) = a1;
  *((_WORD *)buf + 4) = 2048;
  *(_QWORD *)(buf + 10) = 1;
  *((_WORD *)buf + 9) = 2048;
  *(_QWORD *)(buf + 20) = 4;
  *((_WORD *)buf + 14) = 2048;
  *(_QWORD *)(buf + 30) = a3;
  _os_log_error_impl(&dword_1906E0000, log, OS_LOG_TYPE_ERROR, "malformed tlv received ((%d + %zu + %zu > %lu)", buf, 0x26u);
  return result;
}

void sub_1907E761C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E76AC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCC8(&dword_1906E0000, a1, a3, "Invalid TLV size for type %d", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907E7718(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCC8(&dword_1906E0000, a1, a3, "Invalid TLV size for type %d", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907E7784(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCC8(&dword_1906E0000, a1, a3, "Invalid TLV size for type %d", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907E77F0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCC8(&dword_1906E0000, a1, a3, "Invalid TLV size for type %d", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907E785C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCC8(&dword_1906E0000, a1, a3, "Invalid TLV size for type %d", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907E78C8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E7954()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E79E0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E7A6C(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = 134218240;
  v5 = a1;
  v6 = 2048;
  v7 = v3;
  _os_log_error_impl(&dword_1906E0000, log, OS_LOG_TYPE_ERROR, "IDSGroupSession method invoked without a valid internal session! { self: %p, _internal: %p }", (uint8_t *)&v4, 0x16u);
}

void sub_1907E7AF4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E7B80()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E7C0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "Error fetching OffGrid messenger collaborator {error: %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E7C6C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCD8(&dword_1906E0000, a1, a3, "IDSOffGridMessenger - Fatal Error - No handle found", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907E7C9C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCD8(&dword_1906E0000, a1, a3, "IDSOffGridMessenger - Fatal Error - Handles not specified.", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907E7CCC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCD8(&dword_1906E0000, a1, a3, "IDSOffGridMessenger - Fatal Error - Service Update to SMS is not supported onGrid.", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907E7CFC()
{
  __assert_rtn("IDSReportiMessageSpam", "IDSReportiMessageSpam.m", 73, "!_IDSRunningInDaemon()");
}

void sub_1907E7D24()
{
  __assert_rtn("IDSReportiMessageUnknownSenderWithBlackholeAndJunkStatus", "IDSReportiMessageSpam.m", 102, "!_IDSRunningInDaemon()");
}

void sub_1907E7D4C()
{
  __assert_rtn("IDSCheckiMessageUnknownSender", "IDSReportiMessageSpam.m", 117, "!_IDSRunningInDaemon()");
}

void sub_1907E7D74()
{
  __assert_rtn("_IDSScheduleTimeoutForReportiMessageSpamCheckUnkownCompletionBlock", "IDSReportiMessageSpam.m", 57, "!_IDSRunningInDaemon()");
}

void sub_1907E7D9C()
{
  __assert_rtn("_IDSScheduleTimeoutForAnyCompletionBlock", "IDSReportiMessageSpam.m", 47, "!_IDSRunningInDaemon()");
}

void sub_1907E7DC4()
{
  __assert_rtn("_IDSListenForReportiMessageSpamResponses", "IDSReportiMessageSpam.m", 32, "!_IDSRunningInDaemon()");
}

void sub_1907E7DEC(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = 138543362;
  v6 = v4;
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "Instantiating %{public}@ from daemon -- returning nil", (uint8_t *)&v5, 0xCu);

}

void sub_1907E7E84(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  sub_1906F0C98(&dword_1906E0000, a2, v5, "Instantiating %{public}@ from daemon -- returning nil", v6);

  sub_1906F0CA4();
}

void sub_1907E7F08()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCC0(&dword_1906E0000, v0, v1, "%@ accountDictionariesForService %@");
  sub_1906F3A58();
}

void sub_1907E7F68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A60();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "All accounts after first connection to daemon: %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E7FD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A60();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "All enabledAccounts %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E803C()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCAC(&dword_1906E0000, v0, v1, "IDSDaemonListener _removeAccountOnIvarQueue %@ was told of an account without a unique id or service name: %@");
  sub_1906F3A58();
}

void sub_1907E809C()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCAC(&dword_1906E0000, v0, v1, "IDSDaemonListener accountAdded %@ was told of an account without a unique id or service name: %@");
  sub_1906F3A58();
}

void sub_1907E80FC()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCAC(&dword_1906E0000, v0, v1, "IDSDaemonListener accountRemoved %@ was told of an account without a unique id or service name: %@");
  sub_1906F3A58();
}

void sub_1907E815C()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCAC(&dword_1906E0000, v0, v1, "IDSDaemonListener accountEnabled was told of an account without a unique id %@ or service %@");
  sub_1906F3A58();
}

void sub_1907E81BC()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCAC(&dword_1906E0000, v0, v1, "IDSDaemonListener accountDisabled was told of an account without a unique id %@ or service %@");
  sub_1906F3A58();
}

void sub_1907E821C()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCAC(&dword_1906E0000, v0, v1, "IDSDaemonListener accountInfoChanged %@ was told of an account without a unique id or service name: %@");
  sub_1906F3A58();
}

void sub_1907E827C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  sub_190705F08();
  sub_1906F0C98(&dword_1906E0000, v0, v1, "Found existing local device, removing %@", v2);
  sub_1906F3A58();
}

void sub_1907E82E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Refresh registration for account %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E8340()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Direct messaging peer identifier: %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E83A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A60();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Device identifier from daemon: %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E8408()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Deferred setup on ivar queue, got enabled accounts %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E8468()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Deferred setup on ivar queue, got accounts %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E84C8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1906E0000, log, OS_LOG_TYPE_ERROR, "Unnecessary invocation of deviceIdentifierDidChange:", v1, 2u);
}

void sub_1907E8508()
{
  uint64_t v0;
  os_log_t v1;

  sub_1906F3A60();
  sub_19070FCC0(&dword_1906E0000, v0, v1, "Device identifier changing from %@ to %@");
  sub_1906F3A58();
}

void sub_1907E8578(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = 138543362;
  v6 = v4;
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "Instantiating %{public}@ from daemon -- returning nil", (uint8_t *)&v5, 0xCu);

  sub_1906F0CA4();
}

void sub_1907E8608()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E8694()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E8720()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E87AC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E8838()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E88C4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E8950()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E89DC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E8A68(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_1906E0000, log, OS_LOG_TYPE_FAULT, "IDSActivity is not allowed for non-tvOS devices.", v1, 2u);
}

void sub_1907E8AA8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a2, a3, "Error checking for isListening {xpcError: %@}", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907E8B0C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a2, a3, "Error setting isListening {xpcError: %@}", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907E8B70(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a2, a3, "Error getting current subscriptions {xpcError: %@}", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907E8BD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "validateStrictDecodingForSentInvitation: Failed to validate strict decoding for invitation with error {%@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E8C34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190716510(*MEMORY[0x1E0C80C00]);
  sub_1906F3A60();
  sub_190705EF8(&dword_1906E0000, v0, v1, "sendInvitationToDestination: Invitation {%@} not added to pendingInvitations. Calling serverAcknowledgedBlock", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E8C94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190716510(*MEMORY[0x1E0C80C00]);
  sub_1906F3A60();
  sub_190705EF8(&dword_1906E0000, v0, v1, "cancelInvitation: Invitation {%@} not removed from pendingInvitations. Calling serverAcknowledgedBlock", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E8CF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190716510(*MEMORY[0x1E0C80C00]);
  sub_1906F3A60();
  sub_190705EF8(&dword_1906E0000, v0, v1, "acceptInvitation: Invitation {%@} not removed from receivedInvitations. Calling serverAcknowledgedBlock", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E8D54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190716510(*MEMORY[0x1E0C80C00]);
  sub_1906F3A60();
  sub_190705EF8(&dword_1906E0000, v0, v1, "declineInvitation: Invitation {%@} not removed from receivedInvitations. Calling serverAcknowledgedBlock", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E8DB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Validating Invitation: Null invitation, dropping", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E8DE0(void *a1, NSObject *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "uniqueID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  sub_1906F0C98(&dword_1906E0000, a2, v5, "Validating Invitation: There is no stored invitation with unique id {%@}", v6);

  sub_1907164E8();
}

void sub_1907E8E74(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  objc_msgSend(a1, "senderMergeID");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)sub_190716520(), "senderMergeID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1907164F8();
  sub_1906F3A90(&dword_1906E0000, v3, v4, "Validating Invitation: Sender merge ID for received invitation {%@} does not match the stored invitation {%@}", v5, v6, v7, v8, v9);

  sub_1907164E8();
}

void sub_1907E8F04(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  objc_msgSend(a1, "senderMergeID");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)sub_190716520(), "senderMergeID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1907164F8();
  sub_1906F3A90(&dword_1906E0000, v3, v4, "Validating Invitation: Sender mergeId {%@} does not match stored invitation's sender mergeId {%@}", v5, v6, v7, v8, v9);

  sub_1907164E8();
}

void sub_1907E8F94(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "expirationDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  sub_1906F0C98(&dword_1906E0000, a2, v4, "Validating Invitation: Expiry date has passed {%@}", v5);

}

void sub_1907E901C(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  objc_msgSend(a1, "state");
  objc_msgSend((id)sub_190716520(), "uniqueID");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "UUIDString");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1907164F8();
  sub_1906F3A90(&dword_1906E0000, v3, v4, "IncomingInvitation: Invalid Invitaion state %ld. Not delivered {%@} to delegate", v5, v6, v7, v8, v9);

  sub_1907164E8();
}

void sub_1907E90B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "IncomingInvitation: No delegate found for manager:incomingInvitation:", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E90E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "IncomingInvitation: No delegate found for manager:senderDidCancelInvitation:", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E910C(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  objc_msgSend(a1, "state");
  objc_msgSend((id)sub_190716520(), "uniqueID");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "UUIDString");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1907164F8();
  sub_1906F3A90(&dword_1906E0000, v3, v4, "IncomingInvitationUpdate: Invalid Invitaion state %ld. Not delivered {%@} to delegate", v5, v6, v7, v8, v9);

  sub_1907164E8();
}

void sub_1907E91A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "IncomingInvitationUpdate: No delegate found for manager:receiverDidAcceptInvitation:", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E91D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "IncomingInvitationUpdate: No delegate found for manager:receiverDidDeclineInvitation:", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E91FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "InvitationManager didSendWithSuccess: No invitation found with identifier {%@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E925C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "Error fetching server messaging collaborator {error: %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E92BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "No delegates found to handle incoming server message { guid: %@ }", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E931C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1906E0000, log, OS_LOG_TYPE_ERROR, "No delegates found to handle final storage indication", v1, 2u);
}

void sub_1907E935C()
{
  __assert_rtn("IDSRegistrationControlDisableRegistrationType", "IDSRegistrationControl.m", 102, "!_IDSRunningInDaemon()");
}

void sub_1907E9384()
{
  __assert_rtn("_IDSScheduleTimeoutForRegistrtionControlActionCompletionBlock", "IDSRegistrationControl.m", 59, "!_IDSRunningInDaemon()");
}

void sub_1907E93AC()
{
  __assert_rtn("_IDSListenForRegistrationControlResponses", "IDSRegistrationControl.m", 30, "!_IDSRunningInDaemon()");
}

void sub_1907E93D4()
{
  __assert_rtn("IDSRegistrationControlEnableRegistrationType", "IDSRegistrationControl.m", 115, "!_IDSRunningInDaemon()");
}

void sub_1907E93FC()
{
  __assert_rtn("IDSRegistrationControlGetStateForRegistrationType", "IDSRegistrationControl.m", 129, "!_IDSRunningInDaemon()");
}

void sub_1907E9424()
{
  __assert_rtn("_IDSScheduleTimeoutForRegistrtionControlStateCompletionBlock", "IDSRegistrationControl.m", 72, "!_IDSRunningInDaemon()");
}

void sub_1907E944C()
{
  __assert_rtn("IDSRegistrationControlSyncGetStateForRegistrationType", "IDSRegistrationControl.m", 143, "!_IDSRunningInDaemon()");
}

void sub_1907E9474()
{
  __assert_rtn("_IDSScheduleTimeoutForAnyCompletionBlockWithSync", "IDSRegistrationControl.m", 43, "!_IDSRunningInDaemon()");
}

void sub_1907E949C()
{
  objc_class *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v0 = (objc_class *)sub_19071E880();
  NSStringFromClass(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  sub_19071E86C(&dword_1906E0000, v2, v3, "Instantiating %{public}@ from daemon -- returning nil", v4, v5, v6, v7, v8);

  sub_1906F0CA4();
}

void sub_1907E9514()
{
  objc_class *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (objc_class *)sub_19071E880();
  NSStringFromClass(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19071E86C(&dword_1906E0000, v2, v3, "Instantiating %{public}@ from daemon -- returning nil", v4, v5, v6, v7, 2u);

  sub_1906F0CA4();
}

void sub_1907E9590()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E961C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E96A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E9734()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E97C0()
{
  __assert_rtn("IDSProcessVMRequest", "IDSVM.m", 61, "!_IDSRunningInDaemon()");
}

void sub_1907E97E8(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  v4 = 138412546;
  v5 = a1;
  v6 = 2112;
  v7 = v3;
  _os_log_error_impl(&dword_1906E0000, log, OS_LOG_TYPE_ERROR, "Request ID %@ error fetching VM request data %@", (uint8_t *)&v4, 0x16u);
}

void sub_1907E9874(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "Process does not have sandbox permission to access IDS mach port -- connection will fail! {portName: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_1907E98E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Failed IDSDaemonRequestConnection, no reply", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E9914()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Daemon didn't grant connection", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E9940()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Received Connection Invalid", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E996C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Received Connection Interrupted", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907E9998(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 138543362;
  v7 = v4;
  sub_1906F0C98(&dword_1906E0000, a2, v5, "Instantiating %{public}@ from daemon -- returning nil", (uint8_t *)&v6);

}

void sub_1907E9A28(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138412290;
  v4 = a1;
  sub_1906F0C98(&dword_1906E0000, a2, a3, "Couldn't find completion block for vm request %@", (uint8_t *)&v3);
}

void sub_1907E9A94()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E9B20()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907E9BAC(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "Instantiating %{public}@ from daemon -- returning nil", v5, 0xCu);

}

void sub_1907E9C40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_19072CF0C(&dword_1906E0000, v0, v1, "Cannot save invalid device info: %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E9CA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "Cannot delete empty CBUUID {cbuuid: %{private}@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E9D00(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s: Empty completion block/queue", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907E9D70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "XPC Connection Error - Failed to get localDeviceInfo {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E9DD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "getLocalDeviceInfoFailed {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E9E30(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s: Empty completion block/queue", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907E9EA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "XPC Connection error - Failed to get pairedDeviceInfo {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E9F00()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "getPairedDeviceInfo error {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907E9F60(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19072CF0C(&dword_1906E0000, a1, a3, "%s: Empty completion block/queue", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907E9FD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "XPC Connection error - Failed to constuct RA response dictionary {error: %{public}@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907EA030()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "Error fetching off grid state manager collaborator {error: %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907EA090()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "Error fetching off grid state manager collaborator { error: %@ }", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907EA0F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "Failed to fetch OffGridMode: %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907EA150()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "Failed to fetch PublishStatus: %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907EA1B0(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_fault_impl(&dword_1906E0000, log, OS_LOG_TYPE_FAULT, "Failed to create IDSAuthenticationSigningResult due to a mismatch between subscription identifiers and authentication certificates! {subscriptionIdentifiers: %@, authenticationCertificates: %@}", (uint8_t *)&v3, 0x16u);
}

void sub_1907EA234(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_1906E0000, log, OS_LOG_TYPE_FAULT, "Failed to weak link FTSelectedPNRSubscription from FTServices for synchronous fetch of phone user subscription source", v1, 2u);
}

void sub_1907EA274(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  _os_log_error_impl(&dword_1906E0000, log, OS_LOG_TYPE_ERROR, "Failing xpc connection promise {pendingInvocations: %{public}@, error: %{public}@}", (uint8_t *)&v3, 0x16u);
}

void sub_1907EA2F8(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = 138543362;
  v6 = v4;
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "Instantiating %{public}@ from daemon -- returning nil", (uint8_t *)&v5, 0xCu);

  sub_1906F0CA4();
}

void sub_1907EA38C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EA41C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EA4AC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1906E0000, log, OS_LOG_TYPE_ERROR, "Tried to create IDSAccountController with empty service, ignoring...", v1, 2u);
}

void sub_1907EA4EC(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 40);
  v4 = *a2;
  v5 = 138412546;
  v6 = v3;
  v7 = 2112;
  v8 = v4;
  _os_log_debug_impl(&dword_1906E0000, log, OS_LOG_TYPE_DEBUG, "Found existing IDSAccountController %@ for service %@", (uint8_t *)&v5, 0x16u);
  sub_1906F3A58();
}

void sub_1907EA57C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EA608()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EA694(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906F3A48(&dword_1906E0000, a2, a3, "%p will be removed from account controller map automatically", a5, a6, a7, a8, 0);
  sub_1906F3A58();
}

void sub_1907EA6F8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906F3A48(&dword_1906E0000, a2, a3, "Deallocing IDSAccountController %@", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907EA75C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EA7E8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EA874()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EA900(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = 134218498;
  v5 = a1;
  v6 = 2112;
  v7 = v2;
  v8 = 2112;
  v9 = v3;
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "_IDSGroupSession was deallocated without being invalidated -- this may indicate an orphaned daemon session! { self: %p, uniqueID: %@, instanceID: %@ }", (uint8_t *)&v4, 0x20u);
}

void sub_1907EA98C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EAA18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Empty account ID", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907EAA44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Empty instance ID", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907EAA70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Empty unique ID", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907EAA9C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EAB28()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EABB4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EAC40()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EACCC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EAD58()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EADE4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EAE70()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EAEFC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EAF88()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB014()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB0A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "updateParticipantType: invalid _fromID", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907EB0CC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB158(uint64_t a1)
{
  int v1;
  uint64_t v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 138412546;
  v2 = a1;
  v3 = 2080;
  v4 = "currentDestinationsLightweightStatus";
  _os_log_error_impl(&dword_1906E0000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", (uint8_t *)&v1, 0x16u);
}

void sub_1907EB1E8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB274()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB300()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB38C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB418()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB4A4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB530()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB5BC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB648()
{
  __assert_rtn("-[_IDSGroupSession registerPluginWithOptions:]", "_IDSGroupSession.m", 434, "options[IDSGroupSessionPluginNameKey]");
}

void sub_1907EB670()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB6FC()
{
  __assert_rtn("-[_IDSGroupSession unregisterPluginWithOptions:]", "_IDSGroupSession.m", 442, "options[IDSGroupSessionPluginNameKey]");
}

void sub_1907EB724()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB7B0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB83C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB8CC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB958()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EB9E4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EBA70()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EBAFC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EBB88()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EBC14()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EBCA0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EBD2C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EBDB8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EBE44()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EBED0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EBF5C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EBFE8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC074()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC100()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC18C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC218()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC2A4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC330()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC3BC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC448()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC4D4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC560()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC5EC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC678()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC704()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC790()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC81C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC8A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC934()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EC9C0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ECA50()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ECADC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ECB68()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ECBF4(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "value");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = 138477827;
  v5 = v3;
  _os_log_debug_impl(&dword_1906E0000, a2, OS_LOG_TYPE_DEBUG, "Fetch groupds {groups: %{private}@}", (uint8_t *)&v4, 0xCu);

  sub_1906F0CA4();
}

void sub_1907ECC80()
{
  objc_class *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (objc_class *)objc_opt_class();
  NSStringFromClass(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19071E86C(&dword_1906E0000, v2, v3, "Instantiating %{public}@ from daemon -- returning nil", v4, v5, v6, v7, 2u);

  sub_1906F0CA4();
}

void sub_1907ECD00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_190742238();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_1906F3A58();
}

void sub_1907ECD80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_190742238();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_1906F3A58();
}

void sub_1907ECE00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_190742238();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, v5);
  sub_1906F3A58();
}

void sub_1907ECE80(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "Instantiating %{public}@ from daemon -- returning nil", v5, 0xCu);

  sub_1906F0CA4();
}

void sub_1907ECF0C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ECF98()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED024()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED0B0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED13C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED1C8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED254()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED2E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  sub_1906F3A90(&dword_1906E0000, v0, v1, "QueueOneIdentifier not a string! [%@]\ncallstack %@", v2, v3, v4, v5, 2u);

}

void sub_1907ED38C()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19074F234(&dword_1906E0000, v0, v1, "Invalid %@ value was given! {given: %@}");
  sub_1906F3A58();
}

void sub_1907ED3EC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED478()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19070FC94();
  sub_19074F228(&dword_1906E0000, v0, (uint64_t)v0, "%@ unable to plist-serialize dictionary %@ !!", v1);
  sub_1906F3A58();
}

void sub_1907ED4E0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED570()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED5FC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED688()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED714()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED7A0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED82C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED8B8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED944()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907ED9D0()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19074F254();
  sub_19074F228(&dword_1906E0000, v0, (uint64_t)v0, "%@ not connecting to identityservicesd - no serviceName for account %@", v1);
  sub_1906F3A58();
}

void sub_1907EDA3C()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19074F254();
  sub_19074F228(&dword_1906E0000, v0, (uint64_t)v0, "Failed to connect to identityservicesd; %@ %@", v1);
  sub_1906F3A58();
}

void sub_1907EDAA8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EDB34()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EDBC0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EDC4C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1906E0000, log, OS_LOG_TYPE_ERROR, "IDS sending success is NO though error is unset", v1, 2u);
}

void sub_1907EDC8C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EDD18()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EDDA4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EDE30()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EDEBC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EDF48()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EDFD8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EE064()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EE0F0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EE17C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EE208()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EE294(uint64_t a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 40), "serviceName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  sub_19074F248(&dword_1906E0000, a2, v4, "Ignoring for: %@", v5);

  sub_1906F0CA4();
}

void sub_1907EE318()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  sub_190705F08();
  sub_19074F248(&dword_1906E0000, v0, v1, "Recipient topic: %@", v2);
  sub_1906F3A58();
}

void sub_1907EE37C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  sub_190705F08();
  sub_19074F248(&dword_1906E0000, v0, v1, "Received context: %@", v2);
  sub_1906F3A58();
}

void sub_1907EE3E0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EE46C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EE4F8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EE584()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EE610()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19074F234(&dword_1906E0000, v0, v1, "Instantiating %{public}@ from daemon -- returning nil");
  sub_1906F3A58();
}

void sub_1907EE670()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EE6FC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EE788()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EE814()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EE8A0(NSObject *a1)
{
  void *v2;
  int v3;
  const char *v4;
  __int16 v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = 136315394;
  v4 = "-[_IDSSessionStore sessionForAccount:fromID:identifier:transportType:]";
  v5 = 2112;
  v6 = v2;
  _os_log_error_impl(&dword_1906E0000, a1, OS_LOG_TYPE_ERROR, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", (uint8_t *)&v3, 0x16u);

}

void sub_1907EE950()
{
  __assert_rtn("IDSLocalPairingAddPairedDevice", "IDSLocalPairing.m", 79, "!_IDSRunningInDaemon()");
}

void sub_1907EE978()
{
  __assert_rtn("IDSLocalPairingAddPairedDeviceWithInfo", "IDSLocalPairing.m", 89, "!_IDSRunningInDaemon()");
}

void sub_1907EE9A0()
{
  __assert_rtn("IDSLocalPairingUpdatePairedDevicePairingType", "IDSLocalPairing.m", 100, "!_IDSRunningInDaemon()");
}

void sub_1907EE9C8()
{
  __assert_rtn("IDSLocalPairingConnectPairedDevice", "IDSLocalPairing.m", 111, "!_IDSRunningInDaemon()");
}

void sub_1907EE9F0()
{
  __assert_rtn("IDSLocalPairingSetupCompletedForPairedDevice", "IDSLocalPairing.m", 121, "!_IDSRunningInDaemon()");
}

void sub_1907EEA18()
{
  __assert_rtn("IDSLocalPairingSwitchActivePairedDevice", "IDSLocalPairing.m", 132, "!_IDSRunningInDaemon()");
}

void sub_1907EEA40()
{
  __assert_rtn("IDSLocalPairingDisconnectActivePairedDevice", "IDSLocalPairing.m", 143, "!_IDSRunningInDaemon()");
}

void sub_1907EEA68()
{
  __assert_rtn("IDSLocalPairingRedeliverMessages", "IDSLocalPairing.m", 156, "!_IDSRunningInDaemon()");
}

void sub_1907EEA90()
{
  __assert_rtn("IDSLocalPairingDeletePairedDevice", "IDSLocalPairing.m", 166, "!_IDSRunningInDaemon()");
}

void sub_1907EEAB8()
{
  __assert_rtn("IDSLocalPairingUnpairStartForDevice", "IDSLocalPairing.m", 176, "!_IDSRunningInDaemon()");
}

void sub_1907EEAE0()
{
  __assert_rtn("IDSLocalPairingStopForDevice", "IDSLocalPairing.m", 186, "!_IDSRunningInDaemon()");
}

void sub_1907EEB08()
{
  __assert_rtn("IDSLocalPairingUnpairForDevice", "IDSLocalPairing.m", 196, "!_IDSRunningInDaemon()");
}

void sub_1907EEB30()
{
  __assert_rtn("IDSLocalPairingForgetPairedDevice", "IDSLocalPairing.m", 206, "!_IDSRunningInDaemon()");
}

void sub_1907EEB58()
{
  __assert_rtn("IDSLocalPairingGetPairingDevicesWithCompletionBlock", "IDSLocalPairing.m", 216, "!_IDSRunningInDaemon()");
}

void sub_1907EEB80()
{
  __assert_rtn("IDSLocalPairingGetPairedDevicesWithCompletionBlock", "IDSLocalPairing.m", 230, "!_IDSRunningInDaemon()");
}

void sub_1907EEBA8()
{
  __assert_rtn("IDSLocalPairingGetPairingRecordsWithCompletionBlock", "IDSLocalPairing.m", 242, "!_IDSRunningInDaemon()");
}

void sub_1907EEBD0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a2, a3, "Failed to get pairing records {error: %{public}@}", a5, a6, a7, a8, 2u);
}

void sub_1907EEC38(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a2, a3, "Failed to get pairing collaborator {error: %{public}@}", a5, a6, a7, a8, 2u);
}

void sub_1907EECA0()
{
  __assert_rtn("IDSLocalPairingSetAllowedTrafficClassifiersForDevice", "IDSLocalPairing.m", 271, "!_IDSRunningInDaemon()");
}

void sub_1907EECC8()
{
  __assert_rtn("IDSLocalPairingGetAllowedTrafficClassifiersForDevice", "IDSLocalPairing.m", 282, "!_IDSRunningInDaemon()");
}

void sub_1907EECF0()
{
  __assert_rtn("IDSLocalPairingDropAllMessagesWithoutAnyAllowedTrafficClassifier", "IDSLocalPairing.m", 298, "!_IDSRunningInDaemon()");
}

void sub_1907EED18()
{
  __assert_rtn("IDSLocalPairingReunionSyncStartedForServices", "IDSLocalPairing.m", 309, "!_IDSRunningInDaemon()");
}

void sub_1907EED40()
{
  __assert_rtn("IDSLocalPairingReunionSyncCompletedForServices", "IDSLocalPairing.m", 321, "!_IDSRunningInDaemon()");
}

void sub_1907EED68(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_msgSend(a1, "_internal");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19074F254();
  sub_1906F3A90(&dword_1906E0000, v2, v3, "_IDSDeviceConnection was created without an IDSDevice %@ or service %@", v4, v5, v6, v7, v8);

  sub_1907164E8();
}

void sub_1907EEDEC(void *a1, int a2, NSObject *a3)
{
  void *v5;
  void *v6;
  _DWORD v7[2];
  __int16 v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "_internal");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "service");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = 67109378;
  v7[1] = a2;
  v8 = 2112;
  v9 = v6;
  _os_log_error_impl(&dword_1906E0000, a3, OS_LOG_TYPE_ERROR, "_IDSDeviceConnection cannot be created: client is leaking sockets (%d active connection, service %@).", (uint8_t *)v7, 0x12u);

  sub_1907164E8();
}

void sub_1907EEE9C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EEF28()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19074F254();
  _os_log_error_impl(&dword_1906E0000, v0, OS_LOG_TYPE_ERROR, "Failed to connect to identityservicesd; %@ %@",
    v1,
    0x16u);
}

void sub_1907EEFA0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EF02C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EF0B8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EF144()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EF1D0()
{
  uint64_t v0;
  os_log_t v1;

  sub_1906F3ACC(*MEMORY[0x1E0C80C00]);
  sub_19075B128();
  sub_19070FCC0(&dword_1906E0000, v0, v1, "IDSAccountController created with service %@ serviceToken %@");
  sub_1906F3A58();
}

void sub_1907EF234()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EF2C0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EF34C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EF3D8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EF464()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EF4F0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EF57C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EF608()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_190705F08();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl(&dword_1906E0000, v1, OS_LOG_TYPE_ERROR, "Failed to connect to identityservicesd; %@ %@",
    v2,
    0x16u);
  sub_1906F3A58();
}

void sub_1907EF688()
{
  uint64_t v0;
  os_log_t v1;

  sub_1906F3ACC(*MEMORY[0x1E0C80C00]);
  sub_19075B128();
  sub_19070FCC0(&dword_1906E0000, v0, v1, "Adding listener with ID %@ topics %@");
  sub_1906F3A58();
}

void sub_1907EF6EC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EF778()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A60();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Daemon disconnected, we'll need to reload accounts for service: %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907EF7DC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EF868(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "__imSetByApplyingBlock:", &unk_1E2C5F130);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  sub_19074F248(&dword_1906E0000, a2, v4, "New account set %@", v5);

  sub_1906F0CA4();
}

void sub_1907EF8F0(id *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*a1, "__imSetByApplyingBlock:", &unk_1E2C5FAF0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  sub_19074F248(&dword_1906E0000, a2, v4, "Old account set %@", v5);

  sub_1906F0CA4();
}

void sub_1907EF97C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EFA08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3ACC(*MEMORY[0x1E0C80C00]);
  sub_1906F3A60();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "New enabled accounts set %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907EFA68()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EFAF4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EFB80()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EFC0C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EFC98()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EFD24()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EFDB0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EFE3C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EFEC8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EFF54()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907EFFE0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F006C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "**** Account added has no uniqueID **** %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F00CC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCC8(&dword_1906E0000, a2, a3, "Account added was of unknown account type %d, bailing...", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907F0130()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F01BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "**** Account removed has no uniqueID **** %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F021C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Did not find an existing account to remove with unique ID %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F027C()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCC0(&dword_1906E0000, v0, v1, "Received account removed %@ for topic %@");
  sub_1906F3A58();
}

void sub_1907F02DC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F0368()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "**** Account updated has no uniqueID **** %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F03C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "Could not create IDSAccount with info %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F0428(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCC8(&dword_1906E0000, a2, a3, "Account updated was of unknown account type %d, ignoring...", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907F048C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Did not find an existing account to update with unique ID %@, creating one", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F04EC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F0578()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Removing accounts %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F05D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Accounts Modified %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F0638()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Original accounts %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F0698()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F0724()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F07B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Account enabled - no unique ID, bailing...", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907F07DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Account enabled - no service, bailing...", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907F0808()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Adding enabled account %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F0868()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCC0(&dword_1906E0000, v0, v1, "Received account enabled %@ on service %@");
  sub_1906F3A58();
}

void sub_1907F08C8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F0954()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Account disabled - no unique ID, bailing...", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907F0980()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Account disabled - no service, bailing...", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907F09AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_1906F3A48(&dword_1906E0000, v0, v1, "Removing enabled account %@", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F0A0C()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCC0(&dword_1906E0000, v0, v1, "Received account disabled %@ on service %@");
  sub_1906F3A58();
}

void sub_1907F0A6C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F0AF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "Error fetching pinned identity collaborator {error: %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F0B58()
{
  __assert_rtn("IDSHardDeregister", "IDSRegistrationReset.m", 30, "!_IDSRunningInDaemon()");
}

void sub_1907F0B80()
{
  __assert_rtn("IDSTriggerFinalDeregister", "IDSRegistrationReset.m", 38, "!_IDSRunningInDaemon()");
}

void sub_1907F0BA8()
{
  __assert_rtn("IDSClearState", "IDSRegistrationReset.m", 46, "!_IDSRunningInDaemon()");
}

void sub_1907F0BD0(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = 138543362;
  v6 = v4;
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "Instantiating %{public}@ from daemon -- returning nil", (uint8_t *)&v5, 0xCu);

}

void sub_1907F0C6C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  IDSDataProtectionClassStringFromDataProtectionClass();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19075F704();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "Failed to get data for publicIdentity {dataProtectionClass: %{public}@, error: %{public}@}", v3, v4, v5, v6, v7);

  sub_1907164E8();
}

void sub_1907F0CFC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  IDSDataProtectionClassStringFromDataProtectionClass();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19075F704();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "Failed to get data for fullIdentity {dataProtectionClass: %{public}@, error: %{public}@}", v3, v4, v5, v6, v7);

  sub_1907164E8();
}

void sub_1907F0D8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "Error fetching key transparency collaborator {error: %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F0DEC()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getkKTApplicationIdentifierIDS(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("IDSKeyTransparencyManager.m"), 19, CFSTR("%s"), sub_1907615B0());

  __break(1u);
}

void sub_1907F0E5C()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getkKTApplicationIdentifierIDSFaceTime(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("IDSKeyTransparencyManager.m"), 20, CFSTR("%s"), sub_1907615B0());

  __break(1u);
}

void sub_1907F0ECC()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getkKTApplicationIdentifierIDSMultiplex(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("IDSKeyTransparencyManager.m"), 21, CFSTR("%s"), sub_1907615B0());

  __break(1u);
}

void sub_1907F0F3C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil completion -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F0FAC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil KT application -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F101C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil completion -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F108C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil KT application -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F10FC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil completion -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F116C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil KT application -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F11DC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil completion -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F124C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil optInOutRequest -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F12BC()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getKTSelfVerificationInfoClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("IDSKeyTransparencyManager.m"), 17, CFSTR("Unable to find class %s"), "KTSelfVerificationInfo");

  __break(1u);
}

void sub_1907F1334(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TransparencyLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("IDSKeyTransparencyManager.m"), 14, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1907F13B0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F143C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F14C8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F1554()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F15E0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F166C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F16F8()
{
  __assert_rtn("IDSiCloudSignInHack", "IDSiCloudSignInHack.m", 17, "!_IDSRunningInDaemon()");
}

void sub_1907F1720()
{
  __assert_rtn("IDSiCloudSignOutHack", "IDSiCloudSignInHack.m", 23, "!_IDSRunningInDaemon()");
}

void sub_1907F1748()
{
  __assert_rtn("IDSKickGetDependent", "IDSiCloudSignInHack.m", 29, "!_IDSRunningInDaemon()");
}

void sub_1907F1770()
{
  __assert_rtn("IDSReRegister", "IDSiCloudSignInHack.m", 35, "!_IDSRunningInDaemon()");
}

void sub_1907F1798()
{
  __assert_rtn("IDSRepairAccounts", "IDSiCloudSignInHack.m", 40, "!_IDSRunningInDaemon()");
}

void sub_1907F17C0(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v3 = 138412290;
  v4 = v2;
  _os_log_debug_impl(&dword_1906E0000, a2, OS_LOG_TYPE_DEBUG, "Client request for IDSCopyLocalDeviceUniqueID: %@", (uint8_t *)&v3, 0xCu);
}

void sub_1907F183C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "Error fetching baa signer collaborator {error: %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F189C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F191C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F199C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19076E4D0(&dword_1906E0000, a1, a3, "purgeBAACertNoXPC failed to weak link DeviceIdentity symbols", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907F19CC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19076E4D0(&dword_1906E0000, a1, a3, "fetchBAAIdentityIfNeededWithCompletion failed to weak link DeviceIdentity symbols", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907F19FC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19076E4D0(&dword_1906E0000, a1, a3, "signData failed to weak link DeviceIdentity symbols", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907F1A2C()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_190705F08();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl(&dword_1906E0000, v1, OS_LOG_TYPE_ERROR, "Host signature failed {sigError: %@, altSigError: %@", v2, 0x16u);
  sub_1906F3A58();
}

void sub_1907F1AA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_19072CF0C(&dword_1906E0000, v0, v1, "Failed signing legacy baa data in baa signer {error : %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F1B08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_19072CF0C(&dword_1906E0000, v0, v1, "Failed signing baa data in baa signer {error : %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F1B68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F1BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F1C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F1CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F1D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F1DE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F1E68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F1EE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F1F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F1FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F2068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F20E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F2168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907F21E8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCD8(&dword_1906E0000, a1, a3, "Tried to create an account with empty service name, bailing...", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907F2218(int a1, NSObject *a2)
{
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "Tried to create an account with unknown account type %d, bailing...", (uint8_t *)v2, 8u);
  sub_1906F3A34();
}

void sub_1907F2288()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2314()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F23A0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F242C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F24B8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2544()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F25D0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F265C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F26E8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2774()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2800()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F288C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2918()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F29A4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2A30()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2ABC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2B48()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2BD4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2C60()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2CEC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2D78()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2E04()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2E90()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2F1C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F2FA8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3034()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F30C0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F314C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F31D8(id *a1, NSObject *a2)
{
  void *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*a1, "__imArrayByApplyingBlock:", &unk_1E2C63548);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = 67109120;
  v4[1] = objc_msgSend(v3, "count");
  _os_log_debug_impl(&dword_1906E0000, a2, OS_LOG_TYPE_DEBUG, "Devices updated %d", (uint8_t *)v4, 8u);

  sub_1906F3A58();
}

void sub_1907F3278(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;

  objc_msgSend(a2, "_internal");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_debug_impl(&dword_1906E0000, a4, OS_LOG_TYPE_DEBUG, "Adding IDSDevice %@", a1, 0xCu);

}

void sub_1907F32EC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3378()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3404()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3490()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F351C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F35A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3634()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F36C0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F374C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F37D8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3864()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F38F0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl(&dword_1906E0000, log, OS_LOG_TYPE_DEBUG, "Local account, ignoring request for keychain registration", v1, 2u);
  sub_1906F3A34();
}

void sub_1907F392C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F39B8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3A44()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3AD0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3B5C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3BE8(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_msgSend(a1, "serviceName");
  objc_claimAutoreleasedReturnValue();
  sub_1907750F8();
  sub_1907750B0();
  sub_1907750D4(&dword_1906E0000, v2, v3, "Registered URIs for %@ with service type %@ account type %d", v4, v5, v6, v7, v8);

  sub_1907750E8();
}

void sub_1907F3C68()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3CF4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3D80(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_msgSend(a1, "serviceName");
  objc_claimAutoreleasedReturnValue();
  sub_1907750F8();
  sub_1907750B0();
  sub_1907750D4(&dword_1906E0000, v2, v3, "Registration cert for %@ with service type %@ account type %d", v4, v5, v6, v7, v8);

  sub_1907750E8();
}

void sub_1907F3E00()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3E8C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_msgSend(a1, "serviceName");
  objc_claimAutoreleasedReturnValue();
  sub_1907750F8();
  sub_1907750B0();
  sub_1907750D4(&dword_1906E0000, v2, v3, "Push token for %@ with service type %@ account type %d", v4, v5, v6, v7, v8);

  sub_1907750E8();
}

void sub_1907F3F0C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F3F98()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F4024()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19074F254();
  sub_19074F228(&dword_1906E0000, v0, (uint64_t)v0, "%@ not connecting to identityservicesd - no serviceName for config %@", v1);
  sub_1906F3A58();
}

void sub_1907F4090()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F411C()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCC0(&dword_1906E0000, v0, v1, "Account %@ received registration status changed: %@");
  sub_1906F3A58();
}

void sub_1907F417C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F4208()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCC0(&dword_1906E0000, v0, v1, "Account %@ received aliases changed: %@");
  sub_1906F3A58();
}

void sub_1907F4268()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F42F4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906F3A48(&dword_1906E0000, a2, a3, "Account received %@ vetted aliases changed", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F4358()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F43E4()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCC0(&dword_1906E0000, v0, v1, "Account received %@ profile changed: %@");
  sub_1906F3A58();
}

void sub_1907F4444()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F44D0()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCC0(&dword_1906E0000, v0, v1, "Account %@ received login changed: %@");
  sub_1906F3A58();
}

void sub_1907F4530()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F45BC()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCC0(&dword_1906E0000, v0, v1, "Account received %@ displayName changed: %@");
  sub_1906F3A58();
}

void sub_1907F461C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F46A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F4734()
{
  uint64_t v0;
  os_log_t v1;

  sub_19070FC94();
  sub_19070FCC0(&dword_1906E0000, v0, v1, "Account received %@ dependentDevicesUpdated %@");
  sub_1906F3A58();
}

void sub_1907F4794()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F4820()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F48AC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F4938(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906F3A48(&dword_1906E0000, a2, a3, "Account %@ received request to refresh registration", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F499C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F4A28(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "Cannot force remove an account that is not a temporary phone account: %@", (uint8_t *)&v2, 0xCu);
  sub_1906F3A58();
}

void sub_1907F4A98()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F4B24()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F4BB0(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138543362;
  v4 = a1;
  sub_1906F0C98(&dword_1906E0000, a2, a3, "Call made to deprecated IDSService API with service domain %{public}@", (uint8_t *)&v3);
  sub_1906F3A58();
}

void sub_1907F4C18()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F4CA4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F4D30(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19072CF0C(&dword_1906E0000, a1, a3, "Called unimplemented function, please remove calls to %s", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F4DA0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19072CF0C(&dword_1906E0000, a1, a3, "Called unimplemented function, please remove calls to %s", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F4E10(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19072CF0C(&dword_1906E0000, a1, a3, "Called unimplemented function, please remove calls to %s", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F4E80(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19072CF0C(&dword_1906E0000, a1, a3, "Called unimplemented function, please remove calls to %s", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F4EF0(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138412290;
  v4 = a1;
  sub_1906F0C98(&dword_1906E0000, a2, a3, "Unable to retrieve firewall, invalid service identifier -- failing {self: %@}", (uint8_t *)&v3);
  sub_1906F3A58();
}

void sub_1907F4F58()
{
  __assert_rtn("IDSAppleCareSignIDSIn", "IDSAppleCareSignIn.m", 78, "!_IDSRunningInDaemon()");
}

void sub_1907F4F80()
{
  __assert_rtn("IDSAppleCareSignIDSOut", "IDSAppleCareSignIn.m", 92, "!_IDSRunningInDaemon()");
}

void sub_1907F4FA8()
{
  __assert_rtn("IDSAppleCareSetDaemonDisconnectedBlock", "IDSAppleCareSignIn.m", 104, "!_IDSRunningInDaemon()");
}

void sub_1907F4FD0()
{
  __assert_rtn("IDSiCloudSignIn", "IDSiCloudSignIn.m", 17, "!_IDSRunningInDaemon()");
}

void sub_1907F4FF8()
{
  __assert_rtn("IDSiCloudSignOut", "IDSiCloudSignIn.m", 23, "!_IDSRunningInDaemon()");
}

void sub_1907F5020()
{
  __assert_rtn("IDSiCloudUpdate", "IDSiCloudSignIn.m", 29, "!_IDSRunningInDaemon()");
}

void sub_1907F5048()
{
  __assert_rtn("IDSiCloudModify", "IDSiCloudSignIn.m", 35, "!_IDSRunningInDaemon()");
}

void sub_1907F5070()
{
  __assert_rtn("IDSiTunesSignIn", "IDSiCloudSignIn.m", 41, "!_IDSRunningInDaemon()");
}

void sub_1907F5098()
{
  __assert_rtn("IDSiTunesSignOut", "IDSiCloudSignIn.m", 47, "!_IDSRunningInDaemon()");
}

void sub_1907F50C0()
{
  __assert_rtn("IDSGameCenterSignIn", "IDSiCloudSignIn.m", 53, "!_IDSRunningInDaemon()");
}

void sub_1907F50E8()
{
  __assert_rtn("IDSGameCenterSignOut", "IDSiCloudSignIn.m", 59, "!_IDSRunningInDaemon()");
}

void sub_1907F5110()
{
  __assert_rtn("IDSGameCenterModify", "IDSiCloudSignIn.m", 65, "!_IDSRunningInDaemon()");
}

void sub_1907F5138(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  sub_1906F0C98(&dword_1906E0000, a2, v5, "Instantiating %{public}@ from daemon -- returning", v6);

  sub_1906F0CA4();
}

void sub_1907F51BC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5248(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = (objc_class *)objc_opt_class();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  sub_1906F0C98(&dword_1906E0000, a2, v5, "Instantiating %{public}@ from daemon -- returning nil", v6);

  sub_1906F0CA4();
}

void sub_1907F52D0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  sub_190705F08();
  sub_1906F0C98(&dword_1906E0000, v0, v1, "No definition found for service: %@. IDSService cannot be created!", v2);
  sub_1906F3A58();
}

void sub_1907F5334()
{
  void *v0;
  _DWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t *v4;

  sub_19079D51C();
  *v1 = 136315394;
  sub_19079D500(v2, (uint64_t)v1, (uint64_t)"-[_IDSService initWithService:commands:manuallyAckMessages:delegateContext:]");
  sub_19074F228(&dword_1906E0000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);

  sub_19079D514();
}

void sub_1907F5380()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F540C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5498()
{
  void *v0;
  _DWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t *v4;

  sub_19079D51C();
  *v1 = 136315394;
  sub_19079D500(v2, (uint64_t)v1, (uint64_t)"-[_IDSService daemonConnected]");
  sub_19074F228(&dword_1906E0000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);

  sub_19079D514();
}

void sub_1907F54E4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5570()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F55FC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F568C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5718()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F57A4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5830()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F58BC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5948()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F59D4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5A60()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5AEC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5B78()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5C04()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5C90()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5D1C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5DA8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5E34()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5EC0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5F4C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F5FD8()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19070FC94();
  _os_log_fault_impl(&dword_1906E0000, v0, OS_LOG_TYPE_FAULT, "*** Account wants to drop devicesChanged callback {account.isTransientAllowlistedAccount: %@, account.isFirstGDRAllowlistedAccount: %@}", v1, 0x16u);
  sub_1906F3A58();
}

void sub_1907F6048()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F60D4()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_190705F08();
  _os_log_fault_impl(&dword_1906E0000, v0, OS_LOG_TYPE_FAULT, "Given resource URL appears unacceptable! [%@]", v1, 0xCu);
  sub_1906F3A58();
}

void sub_1907F6140(int *a1, uint8_t *buf, os_log_t log)
{
  int v3;

  v3 = *a1;
  *(_DWORD *)buf = 67109120;
  *((_DWORD *)buf + 1) = v3;
  _os_log_fault_impl(&dword_1906E0000, log, OS_LOG_TYPE_FAULT, "Failed to consume sandbox extension! {errno: %d}", buf, 8u);
}

void sub_1907F6188()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6218()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F62A8(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412290;
  v5 = v3;
  sub_1906F0C98(&dword_1906E0000, a2, a3, "No delegate was registered that could handle protobuf %@", (uint8_t *)&v4);
  sub_1906F3A58();
}

void sub_1907F6314()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F63A0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F642C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F64B8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6544()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F65D0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F665C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F66E8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6774()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6800()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F688C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6918()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F69A4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6A30()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6ABC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6B48()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6BD4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6C60()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6CEC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6D78()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6E04()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6E90()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6F1C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F6FA8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7034()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F70C0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F714C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F71D8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7264()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F72F0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F737C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7408()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7494()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_19070FC94();
  sub_19074F228(&dword_1906E0000, v0, (uint64_t)v0, "Told to diversify an invalid key type {options: %@, self: %@}", v1);
  sub_1906F3A58();
}

void sub_1907F74FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Ignoring sub-services update, couldn't find active device", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907F7528(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "_internal");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  sub_1906F0C98(&dword_1906E0000, a2, v4, "Ignoring sub-services update, couldn't find uniqueID for device %@", v5);

  sub_1906F0CA4();
}

void sub_1907F75A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7634()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Triggering Internal resend of Sub Services to daemon", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907F7660()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F76EC()
{
  void *v0;
  _DWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t *v4;

  sub_19079D51C();
  *v1 = 136315394;
  sub_19079D500(v2, (uint64_t)v1, (uint64_t)"-[_IDSService setProtobufAction:forProtobufType:isResponse:]");
  sub_19074F228(&dword_1906E0000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);

  sub_19079D514();
}

void sub_1907F7738()
{
  void *v0;
  _DWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t *v4;

  sub_19079D51C();
  *v1 = 136315394;
  sub_19079D500(v2, (uint64_t)v1, (uint64_t)"-[_IDSService protobufActionForType:isResponse:]");
  sub_19074F228(&dword_1906E0000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);

  sub_19079D514();
}

void sub_1907F7784()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Sending message on a client that is not sandboxed!", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907F77B0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F783C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F78C8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7954()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F79E0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7A6C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7AF8()
{
  void *v0;
  _DWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t *v4;

  sub_19079D51C();
  *v1 = 136315394;
  sub_19079D500(v2, (uint64_t)v1, (uint64_t)"-[_IDSService sendProtobuf:fromAccount:toDestinations:priority:options:identifier:error:]");
  sub_19074F228(&dword_1906E0000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);

  sub_19079D514();
}

void sub_1907F7B44()
{
  void *v0;
  _DWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t *v4;

  sub_19079D51C();
  *v1 = 136315394;
  sub_19079D500(v2, (uint64_t)v1, (uint64_t)"-[_IDSService sendData:fromAccount:toDestinations:priority:options:identifier:error:]");
  sub_19074F228(&dword_1906E0000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);

  sub_19079D514();
}

void sub_1907F7B90()
{
  void *v0;
  _DWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t *v4;

  sub_19079D51C();
  *v1 = 136315394;
  sub_19079D500(v2, (uint64_t)v1, (uint64_t)"-[_IDSService sendAccessoryData:toAccessoryID:accessToken:options:identifier:error:]");
  sub_19074F228(&dword_1906E0000, v3, (uint64_t)v3, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v4);

  sub_19079D514();
}

void sub_1907F7BDC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "setWakingPushPriority - invalid priority", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907F7C08()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7C94()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7D20()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7DAC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7E38()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7EC4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7F50()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F7FDC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F8068()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F80F4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F8180()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F820C(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 136315138;
  v4 = "-[_IDSService setNeedsLaunchOnNearbyDevicesChanged:]";
  sub_1906F3A58();
}

void sub_1907F8280()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F830C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F8398()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F8424()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F84B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *MEMORY[0x1E0D34980];
  v4 = 138412546;
  v5 = v3;
  v6 = 2080;
  v7 = "resourceTransferMessageDict";
  sub_19074F228(&dword_1906E0000, MEMORY[0x1E0C81028], a3, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", (uint8_t *)&v4);
  sub_1906F3A58();
}

void sub_1907F8540()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F85CC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F8658()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "No valid service identifier to report spam.", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907F8684()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "No spam message type specified.", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907F86B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "No message type specified.", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907F86DC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F8768()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Call made to manually ack a message, however this service does not support manually acking of messages", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907F8794()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F8820()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "sendCertifiedDeliveryReceipt given nil certified delivery context", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907F884C(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  objc_msgSend(a1, "service");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3A90(&dword_1906E0000, v2, v3, "sendCertifiedDeliveryReceipt context passed to incorrect service { context.service: %@, service: %@ }", v4, v5, v6, v7, 2u);

  sub_1907164E8();
}

void sub_1907F88DC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F8968()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F89F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  objc_msgSend(*(id *)(a2 + 120), "serviceName");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3A90(&dword_1906E0000, v2, v3, "ABORT: %@ (initializing service %@) IS NOT SANDBOXED", v4, v5, v6, v7, 2u);

  sub_1907164E8();
}

void sub_1907F8A88(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "Error requesting client: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1907F8AFC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F8B6C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F8BDC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil subscription -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F8C4C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F8CBC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil subscription -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F8D2C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F8D9C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil subscription -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F8E0C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F8E7C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil alias -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F8EEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "Error fetching registration collaborator {error: %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907F8F4C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F8FBC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil alias -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F902C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F909C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil alias -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F910C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with a nil completion -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F917C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil subscription -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F91EC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil subscription -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F925C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil subscription -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F92CC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil alias -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F933C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil alias -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F93AC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a1, a3, "%s called with nil alias -- returning", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F941C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a2, a3, "Error fetching sync registration collaborator {err: %@}", a5, a6, a7, a8, 2u);
  sub_1906F3A58();
}

void sub_1907F9488(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "handleGroupSessionKeyValues: keyValues is not a dictionary. Is: %@", (uint8_t *)&v2, 0xCu);
  sub_1906F3A58();
}

void sub_1907F94F8()
{
  uint64_t v0;
  os_log_t v1;

  sub_1907A5E54();
  sub_19070FCAC(&dword_1906E0000, v0, v1, "failed to get keyValueDelivery for session %@: %@");
  sub_1906F3A58();
}

void sub_1907F955C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F95E8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9674()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9700()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F978C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9818()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F98A4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9930()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F99BC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9A48()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9AD4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9B60()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9BEC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9C78()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9D04()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9D90()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9E1C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9EA8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9F34()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907F9FC0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA04C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA0D8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA164()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA1F0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA27C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA308()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA394()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA420()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA4AC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA538()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA5C4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA650()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA6DC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA768()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA7F4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA880()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA90C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FA998()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FAA24()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FAAB0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FAB3C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FABC8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FAC54()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FACE0(uint64_t *a1, void *a2, NSObject *a3)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  objc_msgSend(a2, "value");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 138412546;
  v7 = v4;
  v8 = 2112;
  v9 = v5;
  _os_log_error_impl(&dword_1906E0000, a3, OS_LOG_TYPE_ERROR, "Destination \"%@\" not found in id query results %@. Verify destination is a properly formed IDS destination (and not just the handle string).", (uint8_t *)&v6, 0x16u);

}

void sub_1907FAD90(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *TransparencyLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("_IDSIDQueryController.m"), 24, CFSTR("%s"), *a1);

  __break(1u);
}

void sub_1907FAE0C()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getKTVerifierResultClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("_IDSIDQueryController.m"), 25, CFSTR("Unable to find class %s"), "KTVerifierResult");

  __break(1u);
}

void sub_1907FAE84(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCD8(&dword_1906E0000, a1, a3, "_processIncomingDatagram: IDSHBHDecryptDataWithKey failed!", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907FAEB4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCD8(&dword_1906E0000, a1, a3, "_makeDirectPacketBufferFromDatagram: IDSHBHEncryptDataWithKey failed!", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907FAEE4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1906FBCD8(&dword_1906E0000, a1, a3, "_makeDirectPacketBufferFromDatagram: encryptedData length is greater than maxBufferLength!", a5, a6, a7, a8, 0);
  sub_1906F3A34();
}

void sub_1907FAF14()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FAFA0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FB02C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FB0B8()
{
  objc_class *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (objc_class *)sub_19071E880();
  NSStringFromClass(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_19071E86C(&dword_1906E0000, v2, v3, "Instantiating %{public}@ from daemon -- returning nil", v4, v5, v6, v7, 2u);

  sub_1906F0CA4();
}

void sub_1907FB138()
{
  __assert_rtn("-[IDSDatagramChannel underlyingFileDescriptor]", "IDSDataChannels.m", 901, "_internal->_operationMode == IDSDatagramChannelOperationModeFileDescriptor");
}

void sub_1907FB160()
{
  __assert_rtn("-[IDSDatagramChannel start]", "IDSDataChannels.m", 2689, "_internal->_readHandler");
}

void sub_1907FB188()
{
  __assert_rtn("-[IDSDatagramChannel start]", "IDSDataChannels.m", 2694, "_internal->_eventHandler");
}

void sub_1907FB1B0()
{
  __assert_rtn("-[IDSDatagramChannel start]", "IDSDataChannels.m", 2699, "_internal->_operationMode == IDSDatagramChannelOperationModeDispatch");
}

void sub_1907FB1D8()
{
  __assert_rtn("-[IDSDatagramChannel _writeToOSChannelDatagrams:datagramSizes:datagramInfo:datagramOptions:datagramCount:completionHandler:]", "IDSDataChannels.m", 2741, "_internal->_operationMode == IDSDatagramChannelOperationModeFileDescriptor");
}

void sub_1907FB200()
{
  __assert_rtn("-[IDSDatagramChannel _writeToNWConnectionArrayOfDatagrams:datagramSizes:datagramInfo:datagramOptions:datagramCount:completionHandler:]", "IDSDataChannels.m", 2962, "_internal->_operationMode == IDSDatagramChannelOperationModeDispatch");
}

void sub_1907FB228()
{
  __assert_rtn("-[IDSDatagramChannel readyToRead]", "IDSDataChannels.m", 3208, "_internal->_readHandler");
}

void sub_1907FB250()
{
  __assert_rtn("-[IDSDatagramChannel readyToRead]", "IDSDataChannels.m", 3213, "_internal->_eventHandler");
}

void sub_1907FB278()
{
  __assert_rtn("-[IDSDatagramChannel readyToRead]", "IDSDataChannels.m", 3205, "_internal->_operationMode == IDSDatagramChannelOperationModeFileDescriptor");
}

void sub_1907FB2A0(unsigned __int8 a1, NSObject *a2)
{
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "Could not reportDictionary with type %d because dictionary is too large", (uint8_t *)v2, 8u);
}

void sub_1907FB318()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "_noteSentStop - no state machine found, rejecting {identifier: %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907FB378()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_1907CF0E8();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", sub_1907CF0E0(v0, v1));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1907CF0C8();
  sub_1906F3A90(&dword_1906E0000, v3, v4, "_noteSentStop - state machine not in expected state, rejecting {identifier: %@, stateMachine.state: %@}", v5, v6, v7, v8, v9);

  sub_1907164E8();
}

void sub_1907FB408()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "_noteAckTimer - no state machine found, rejecting {identifier: %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907FB468()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  sub_1907CF0E8();
  objc_msgSend(v0, "incomingMessagesWithoutAcks");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1907CF0C8();
  sub_1906F3A90(&dword_1906E0000, v2, v3, "_noteAckTimer - moving back into fetching {identifier: %@, incomingMessagesWithoutAcks: %@}", v4, v5, v6, v7, v8);

  sub_1907164E8();
}

void sub_1907FB4E8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_1907CF0E8();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", sub_1907CF0E0(v0, v1));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1907CF0C8();
  sub_1906F3A90(&dword_1906E0000, v3, v4, "_noteAckTimer - state machine not in expected state, rejecting {identifier: %@, stateMachine.state: %@}", v5, v6, v7, v8, v9);

  sub_1907164E8();
}

void sub_1907FB578()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "_noteReceivedStop - no state machine found, rejecting {identifier: %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907FB5D8(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", sub_1907CF0E0(a1, a2));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1907164F8();
  sub_1906F3A90(&dword_1906E0000, v3, v4, "_noteReceivedStop - state machine not in expected state, rejecting {identifier: %@, stateMachine.state: %@}", v5, v6, v7, v8, v9);

  sub_1907164E8();
}

void sub_1907FB670()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "_noteSentFetch - no state machine found, rejecting {identifier: %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907FB6D0(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", sub_1907CF0E0(a1, a2));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1907164F8();
  sub_1906F3A90(&dword_1906E0000, v3, v4, "_noteSentFetch - state machine not in expected state, rejecting {identifier: %@, stateMachine.state: %@}", v5, v6, v7, v8, v9);

  sub_1907164E8();
}

void sub_1907FB768()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "_noteSentCancel - no state machine found, rejecting {identifier: %@}", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907FB7C8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  sub_1907CF0E8();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", sub_1907CF0E0(v0, v1));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1907CF0C8();
  sub_1906F3A90(&dword_1906E0000, v3, v4, "_noteSentCancel - state machine not in expected state, rejecting {identifier: %@, stateMachine.state: %@}", v5, v6, v7, v8, v9);

  sub_1907164E8();
}

void sub_1907FB858(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1906E0000, log, OS_LOG_TYPE_ERROR, "_noteAckedMessage - no message identifier, rejecting", v1, 2u);
}

void sub_1907FB898(void *a1, NSObject *a2)
{
  void *v3;
  uint8_t v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "incomingMessagesWithoutAcks");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "_noteAckedMessage - more messages to be acked remain {incomingMessagesWithoutAcks: %@", v4, 0xCu);

}

void sub_1907FB928()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  sub_190705F08();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl(&dword_1906E0000, v1, OS_LOG_TYPE_ERROR, "Context has a service that does not match parakeet! {contextService: %@, context: %@}", v2, 0x16u);
  sub_1906F3A58();
}

void sub_1907FB9A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_190705F08();
  sub_190705EF8(&dword_1906E0000, v0, v1, "No delegate to handle incoming server message { context: %@ }", v2, v3, v4, v5, v6);
  sub_1906F3A58();
}

void sub_1907FBA04(uint64_t *a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = 138412290;
  v4 = v2;
  _os_log_error_impl(&dword_1906E0000, a2, OS_LOG_TYPE_ERROR, "Client setup service -- failed check in! {service: %@}", (uint8_t *)&v3, 0xCu);
}

void sub_1907FBA7C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FBB08()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsNotCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FBB94()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FBC20()
{
  __assert_rtn("IDSGetServiceUserIDsWithCompletionBlock", "IDSHomeKit.m", 13, "!_IDSRunningInDaemon()");
}

void sub_1907FBC48()
{
  __assert_rtn("IDSGetAdminAccessTokensWithCompletionBlock", "IDSHomeKit.m", 25, "!_IDSRunningInDaemon()");
}

void sub_1907FBC70()
{
  __assert_rtn("IDSGetConsentTokensWithCompletionBlock", "IDSHomeKit.m", 38, "!_IDSRunningInDaemon()");
}

void sub_1907FBC98()
{
  __assert_rtn("IDSGetUserAccessTokensWithCompletionBlock", "IDSHomeKit.m", 50, "!_IDSRunningInDaemon()");
}

void sub_1907FBCC0()
{
  __assert_rtn("IDSRefreshUserAccessTokensWithCompletionBlock", "IDSHomeKit.m", 63, "!_IDSRunningInDaemon()");
}

void sub_1907FBCE8()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_1906F3A3C();
  _os_log_fault_impl(&dword_1906E0000, v0, OS_LOG_TYPE_FAULT, "Client attempted to initialize feature toggler with nil service identifier or nil queue", v1, 2u);
  sub_1906F3A34();
}

void sub_1907FBD20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Client retrieving feature toggle with no completion block", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907FBD4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Client retrieving feature toggle with no feature ID", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907FBD78(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138412290;
  v4 = a1;
  sub_1906F0C98(&dword_1906E0000, a2, a3, "Error fetching feature toggler collaborator {error: %@}", (uint8_t *)&v3);
}

void sub_1907FBDE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Client updating feature toggle with no completion block", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907FBE10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1906F3A3C();
  sub_1906FBCD8(&dword_1906E0000, v0, v1, "Client setting feature toggle with no feature ID", v2, v3, v4, v5, v6);
  sub_1906F3A34();
}

void sub_1907FBE3C(void *a1, NSObject *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = 134217984;
  v5 = objc_msgSend(a1, "state");
  sub_1906F0C98(&dword_1906E0000, a2, v3, "Client setting feature toggle to invalid state %lu", (uint8_t *)&v4);
}

void sub_1907FBEBC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FBF48()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FBFD4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC060()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC0EC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC178()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC204()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC290()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC31C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC3A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC434()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC4C0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC54C(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = (objc_class *)sub_19071E880();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_190705F08();
  sub_1906F0C98(&dword_1906E0000, a2, v5, "Instantiating %{public}@ from daemon -- returning nil", v6);

  sub_1906F0CA4();
}

void sub_1907FC5CC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC658()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC6E4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC770()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC7FC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC888()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FC914(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138412290;
  v4 = CFSTR("_IDSSession");
  sub_1906F0C98(&dword_1906E0000, a1, a3, "%@: Empty destinations set", (uint8_t *)&v3);
  sub_1906F3A58();
}

void sub_1907FC988(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138412290;
  v4 = CFSTR("_IDSSession");
  sub_1906F0C98(&dword_1906E0000, a1, a3, "%@: Empty account ID", (uint8_t *)&v3);
  sub_1906F3A58();
}

void sub_1907FC9FC(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138412290;
  v4 = CFSTR("_IDSSession");
  sub_1906F0C98(&dword_1906E0000, a1, a3, "%@: Empty unique ID", (uint8_t *)&v3);
  sub_1906F3A58();
}

void sub_1907FCA70()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FCAFC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FCB88()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FCC14()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FCCA0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FCD2C(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138412290;
  v4 = CFSTR("_IDSSession");
  sub_1906F0C98(&dword_1906E0000, a1, a3, "%@ - existing socket pair, ignoring request to create", (uint8_t *)&v3);
  sub_1906F3A58();
}

void sub_1907FCDA0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FCE2C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1907DEBE0();
  sub_1907DEBD8(v0, *MEMORY[0x1E0C80C00]);
  sub_1907DEBC8();
  sub_1907DEB88();
  sub_1907DEBA8(&dword_1906E0000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
  sub_1907DEBBC();
}

void sub_1907FCEAC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1907DEBE0();
  sub_1907DEBD8(v0, *MEMORY[0x1E0C80C00]);
  sub_1907DEBC8();
  sub_1907DEB88();
  sub_1907DEBA8(&dword_1906E0000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
  sub_1907DEBBC();
}

void sub_1907FCF2C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1907DEBE0();
  sub_1907DEBD8(v0, *MEMORY[0x1E0C80C00]);
  sub_1907DEBC8();
  sub_1907DEB88();
  sub_1907DEBA8(&dword_1906E0000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
  sub_1907DEBBC();
}

void sub_1907FCFAC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1907DEBE0();
  sub_1907DEBD8(v0, *MEMORY[0x1E0C80C00]);
  sub_1907DEBC8();
  sub_1907DEB88();
  sub_1907DEBA8(&dword_1906E0000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
  sub_1907DEBBC();
}

void sub_1907FD02C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1907DEBE0();
  sub_1907DEBD8(v0, *MEMORY[0x1E0C80C00]);
  sub_1907DEBC8();
  sub_1907DEB88();
  sub_1907DEBA8(&dword_1906E0000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
  sub_1907DEBBC();
}

void sub_1907FD0AC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1907DEBE0();
  sub_1907DEBD8(v0, *MEMORY[0x1E0C80C00]);
  sub_1907DEBC8();
  sub_1907DEB88();
  sub_1907DEBA8(&dword_1906E0000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
  sub_1907DEBBC();
}

void sub_1907FD12C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1907DEBE0();
  sub_1907DEBD8(v0, *MEMORY[0x1E0C80C00]);
  sub_1907DEBC8();
  sub_1907DEB88();
  sub_1907DEBA8(&dword_1906E0000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
  sub_1907DEBBC();
}

void sub_1907FD1AC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1907DEBE0();
  sub_1907DEBD8(v0, *MEMORY[0x1E0C80C00]);
  sub_1907DEBC8();
  sub_1907DEB88();
  sub_1907DEBA8(&dword_1906E0000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
  sub_1907DEBBC();
}

void sub_1907FD22C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1907DEBE0();
  sub_1907DEBD8(v0, *MEMORY[0x1E0C80C00]);
  sub_1907DEBC8();
  sub_1907DEB88();
  sub_1907DEBA8(&dword_1906E0000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
  sub_1907DEBBC();
}

void sub_1907FD2AC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1907DEBE0();
  sub_1907DEBD8(v0, *MEMORY[0x1E0C80C00]);
  sub_1907DEBC8();
  sub_1907DEB88();
  sub_1907DEBA8(&dword_1906E0000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
  sub_1907DEBBC();
}

void sub_1907FD32C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1907DEBE0();
  sub_1907DEBD8(v0, *MEMORY[0x1E0C80C00]);
  sub_1907DEBC8();
  sub_1907DEB88();
  sub_1907DEBA8(&dword_1906E0000, v1, v2, "%@ - %@ %d (%s)", v3, v4, v5, v6, 2u);
  sub_1907DEBBC();
}

void sub_1907FD3AC()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FD440()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FD4CC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FD558()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FD5E4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FD670()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FD6FC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FD788()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FD814()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FD8A0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FD92C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FD9B8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FDA44()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FDAD0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FDB5C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FDBE8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FDC74()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FDD00()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FDD8C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FDE18()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FDEA4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FDF30()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FDFBC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE048()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE0D4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE160(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138412290;
  v4 = CFSTR("_IDSSession");
  sub_1906F0C98(&dword_1906E0000, a1, a3, "%@ - No socket pair connection setup, ignoring...", (uint8_t *)&v3);
  sub_1906F3A58();
}

void sub_1907FE1D4(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138412290;
  v4 = CFSTR("_IDSSession");
  sub_1906F0C98(&dword_1906E0000, a1, a3, "%@ - No data to send, ignoring...", (uint8_t *)&v3);
  sub_1906F3A58();
}

void sub_1907FE248(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const __CFString *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138412290;
  v4 = CFSTR("_IDSSession");
  sub_1906F0C98(&dword_1906E0000, a1, a3, "%@ - Session not connected can't send data yet, ignoring...", (uint8_t *)&v3);
  sub_1906F3A58();
}

void sub_1907FE2BC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE348()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE3D4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE460()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE4EC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE578()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE604()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE690()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE71C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE7A8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE834()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE8C0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE94C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FE9D8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1906F3AB8();
  sub_1906F3A90(&dword_1906E0000, v1, v2, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", v3, v4, v5, v6, 2u);

  sub_1906F0CA4();
}

void sub_1907FEA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907FEAE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907FEB64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_19076E4C0();
  sub_190742228(&dword_1906E0000, MEMORY[0x1E0C81028], v0, "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s", v1, v2, v3, v4, 2u);
  sub_1906F3A58();
}

void sub_1907FEBE4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a2, a3, "Error fetching sync activity monitor collaborator {err: %@}", a5, a6, a7, a8, 2u);
}

void sub_1907FEC54(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_190705EF8(&dword_1906E0000, a2, a3, "Error fetching activity monitor collaborator {error: %@}", a5, a6, a7, a8, 2u);
}

void sub_1907FECBC(NSObject *a1)
{
  void *v2;
  int v3;
  const char *v4;
  __int16 v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = 136315394;
  v4 = "-[IDSRealTimeEncryptionProxy initWithAccount:]";
  v5 = 2112;
  v6 = v2;
  _os_log_error_impl(&dword_1906E0000, a1, OS_LOG_TYPE_ERROR, "IDSInternalQueue - assertQueueIsCurrent in %s failed {symbols: %@}. The only acceptable callstack includes dealloc.", (uint8_t *)&v3, 0x16u);

  sub_1906F0CA4();
}

void sub_1907FED64(void *a1, void *a2, NSObject *a3)
{
  void *v6;
  void *v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "recipientAlias");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a2, "aliasToAccountsMap");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 138478339;
  v9 = v6;
  v10 = 2113;
  v11 = v7;
  v12 = 2113;
  v13 = a1;
  _os_log_error_impl(&dword_1906E0000, a3, OS_LOG_TYPE_ERROR, "Failed to get account for recipient alias {alias: %{private}@, accounts: %{private}@, message: %{private}@}", (uint8_t *)&v8, 0x20u);

}

CCCryptorStatus CCCryptorCreateWithMode(CCOperation op, CCMode mode, CCAlgorithm alg, CCPadding padding, const void *iv, const void *key, size_t keyLength, const void *tweak, size_t tweakLength, int numRounds, CCModeOptions options, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1E0C800A0](*(_QWORD *)&op, *(_QWORD *)&mode, *(_QWORD *)&alg, *(_QWORD *)&padding, iv, key, keyLength, tweak);
}

uint64_t CCCryptorGCMAddAAD()
{
  return MEMORY[0x1E0C800B8]();
}

uint64_t CCCryptorGCMDecrypt()
{
  return MEMORY[0x1E0C800C0]();
}

uint64_t CCCryptorGCMEncrypt()
{
  return MEMORY[0x1E0C800C8]();
}

uint64_t CCCryptorGCMFinalize()
{
  return MEMORY[0x1E0C800D0]();
}

uint64_t CCCryptorGCMReset()
{
  return MEMORY[0x1E0C800E8]();
}

uint64_t CCCryptorGCMSetIV()
{
  return MEMORY[0x1E0C800F0]();
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1E0C80108](cryptorRef);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80328](data, *(_QWORD *)&len, md);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

Boolean CFReadStreamSetProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1E0C98BA8](stream, propertyName, propertyValue);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

void CFStreamCreatePairWithSocket(CFAllocatorRef alloc, CFSocketNativeHandle sock, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream)
{
  MEMORY[0x1E0C98EC8](alloc, *(_QWORD *)&sock, readStream, writeStream);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x1E0C99128](string);
}

Boolean CFWriteStreamSetProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1E0C99670](stream, propertyName, propertyValue);
}

uint64_t CUTIsInternalInstall()
{
  return MEMORY[0x1E0D131D0]();
}

uint64_t CUTProcessNameForPid()
{
  return MEMORY[0x1E0D131D8]();
}

uint64_t GLUtilGetLinkOverhead()
{
  return MEMORY[0x1E0D343F0]();
}

uint64_t IDSByteBufferInitForRead()
{
  return MEMORY[0x1E0D34470]();
}

uint64_t IDSByteBufferInitForWrite()
{
  return MEMORY[0x1E0D34478]();
}

uint64_t IDSByteBufferInitForWriteWithAllocatedSpace()
{
  return MEMORY[0x1E0D34480]();
}

uint64_t IDSByteBufferReadField()
{
  return MEMORY[0x1E0D34488]();
}

uint64_t IDSByteBufferRelease()
{
  return MEMORY[0x1E0D34490]();
}

uint64_t IDSByteBufferWriteField()
{
  return MEMORY[0x1E0D34498]();
}

uint64_t IDSDataProtectionClassStringFromDataProtectionClass()
{
  return MEMORY[0x1E0D345B0]();
}

uint64_t IDSDeviceTypeFromProductName()
{
  return MEMORY[0x1E0D346F0]();
}

uint64_t IDSGetMainBundleIdentifier()
{
  return MEMORY[0x1E0D34738]();
}

uint64_t IDSGetUUIDData()
{
  return MEMORY[0x1E0D34740]();
}

uint64_t IDSHBHDecryptDataWithKey()
{
  return MEMORY[0x1E0D34848]();
}

uint64_t IDSHBHEncryptDataWithKey()
{
  return MEMORY[0x1E0D34850]();
}

uint64_t IDSIDAliasFixedSalt()
{
  return MEMORY[0x1E0D34858]();
}

uint64_t IDSIDAliasHashUInt64()
{
  return MEMORY[0x1E0D34860]();
}

uint64_t IDSIDAliasHashUUIDString()
{
  return MEMORY[0x1E0D34868]();
}

uint64_t IDSIsValidAccountType()
{
  return MEMORY[0x1E0D34898]();
}

uint64_t IDSIsValidSigningAlgorithm()
{
  return MEMORY[0x1E0D348A0]();
}

uint64_t IDSIsVirtualMachine()
{
  return MEMORY[0x1E0D348A8]();
}

uint64_t IDSLinkPacketBufferAddBufferStart()
{
  return MEMORY[0x1E0D348B0]();
}

uint64_t IDSLinkPacketBufferCleanup()
{
  return MEMORY[0x1E0D348B8]();
}

uint64_t IDSLoggableDescriptionForHandleOnService()
{
  return MEMORY[0x1E0D348C8]();
}

uint64_t IDSLoggableDescriptionForHandlesOnService()
{
  return MEMORY[0x1E0D348D0]();
}

uint64_t IDSPEMFormatCertificates()
{
  return MEMORY[0x1E0D34A48]();
}

uint64_t IDSParseDERCertificatesFromChain()
{
  return MEMORY[0x1E0D34A58]();
}

uint64_t IDSPowerLogDictionary()
{
  return MEMORY[0x1E0D34A68]();
}

uint64_t IDSRealTimeContext()
{
  return MEMORY[0x1E0D34AE0]();
}

uint64_t IDSTransportThreadAddBlock()
{
  return MEMORY[0x1E0D34C70]();
}

uint64_t IDSTransportThreadAddSocket()
{
  return MEMORY[0x1E0D34C78]();
}

uint64_t IDSTransportThreadInit()
{
  return MEMORY[0x1E0D34C80]();
}

uint64_t IDSTransportThreadRemoveSocket()
{
  return MEMORY[0x1E0D34C88]();
}

uint64_t IDSTransportThreadSuspendSocket()
{
  return MEMORY[0x1E0D34C90]();
}

uint64_t IMAreEmailsLogicallyTheSame()
{
  return MEMORY[0x1E0D362E8]();
}

uint64_t IMAreObjectsLogicallySame()
{
  return MEMORY[0x1E0D362F0]();
}

uint64_t IMCanonicalizeFormattedString()
{
  return MEMORY[0x1E0D36348]();
}

uint64_t IMCreateDictionaryFromXPCObjectWithStandardAllowlist()
{
  return MEMORY[0x1E0D363A8]();
}

uint64_t IMDispatchForNotify()
{
  return MEMORY[0x1E0D36400]();
}

uint64_t IMGetAppValueForKey()
{
  return MEMORY[0x1E0D364A8]();
}

uint64_t IMGetDomainBoolForKey()
{
  return MEMORY[0x1E0D364E8]();
}

uint64_t IMGetDomainBoolForKeyWithDefaultValue()
{
  return MEMORY[0x1E0D364F0]();
}

uint64_t IMGetDomainIntForKey()
{
  return MEMORY[0x1E0D364F8]();
}

uint64_t IMGetDomainValueForKey()
{
  return MEMORY[0x1E0D36500]();
}

uint64_t IMGetMainBundleIdentifier()
{
  return MEMORY[0x1E0D36530]();
}

uint64_t IMGetXPCDataFromDictionary()
{
  return MEMORY[0x1E0D36558]();
}

uint64_t IMGetXPCDictionaryFromDictionary()
{
  return MEMORY[0x1E0D36560]();
}

uint64_t IMGetXPCKeyedCodableFromDictionaryWithSecureCoding()
{
  return MEMORY[0x1E0D36570]();
}

uint64_t IMGetXPCStringFromDictionary()
{
  return MEMORY[0x1E0D36578]();
}

uint64_t IMInsertArraysToXPCDictionary()
{
  return MEMORY[0x1E0D36598]();
}

uint64_t IMInsertBoolsToXPCDictionary()
{
  return MEMORY[0x1E0D365A0]();
}

uint64_t IMInsertDictionariesToXPCDictionary()
{
  return MEMORY[0x1E0D365B8]();
}

uint64_t IMInsertIntsToXPCDictionary()
{
  return MEMORY[0x1E0D365C0]();
}

uint64_t IMInsertKeyedCodableObjectsToXPCDictionary()
{
  return MEMORY[0x1E0D365C8]();
}

uint64_t IMInsertNSStringsToXPCDictionary()
{
  return MEMORY[0x1E0D365D0]();
}

uint64_t IMLogBacktrace()
{
  return MEMORY[0x1E0D36610]();
}

uint64_t IMLogSimulateCrashForException()
{
  return MEMORY[0x1E0D36628]();
}

uint64_t IMShouldLog()
{
  return MEMORY[0x1E0D36830]();
}

uint64_t IMSingleObjectArray()
{
  return MEMORY[0x1E0D36838]();
}

uint64_t IMStringIsPhoneNumber()
{
  return MEMORY[0x1E0D36890]();
}

uint64_t IMUserScopedNotification()
{
  return MEMORY[0x1E0D36960]();
}

uint64_t IMWeakLinkClass()
{
  return MEMORY[0x1E0D36970]();
}

uint64_t IMWeakLinkSymbol()
{
  return MEMORY[0x1E0D36978]();
}

uint64_t IMXPCConfigureConnection()
{
  return MEMORY[0x1E0D36980]();
}

uint64_t IMXPCCreateConnectionForServiceWithQueue()
{
  return MEMORY[0x1E0D36988]();
}

uint64_t JWCopyInvocationArguments()
{
  return MEMORY[0x1E0D369C8]();
}

uint64_t JWDecodeDictionary()
{
  return MEMORY[0x1E0D369E0]();
}

uint64_t JWEncodeDictionary()
{
  return MEMORY[0x1E0D369F0]();
}

uint64_t JWUUIDPushObjectToString()
{
  return MEMORY[0x1E0D369F8]();
}

NSArray *__cdecl NSAllMapTableValues(NSMapTable *table)
{
  return (NSArray *)MEMORY[0x1E0CB2858](table);
}

BOOL NSMapMember(NSMapTable *table, const void *key, void **originalKey, void **value)
{
  return MEMORY[0x1E0CB2DC0](table, key, originalKey, value);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

uint64_t OSLogHandleForIDSCategory()
{
  return MEMORY[0x1E0D36B28]();
}

uint64_t OSLogHandleForTransportCategory()
{
  return MEMORY[0x1E0D36B40]();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1E0CD5F60](certificate);
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0CD6390](key, algorithm, dataToSign, error);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1E0CD65A0](rnd, count, bytes);
}

uint64_t StunUtilPrepareOutgoingChannelData()
{
  return MEMORY[0x1E0D34EB0]();
}

uint64_t StunUtilProcessIncomingChannelData()
{
  return MEMORY[0x1E0D34EB8]();
}

uint64_t StunUtilProcessIncomingChannelDataWithoutChannelHeader()
{
  return MEMORY[0x1E0D34EC0]();
}

uint64_t TrafficClassForIDSOpenSocketPriorityLevel()
{
  return MEMORY[0x1E0D34EC8]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _IDSBinaryStringForValue()
{
  return MEMORY[0x1E0D34ED8]();
}

uint64_t _IDSCopyCallerID()
{
  return MEMORY[0x1E0D34EE0]();
}

uint64_t _IDSCopyIDForAccessory()
{
  return MEMORY[0x1E0D34EE8]();
}

uint64_t _IDSCopyIDForBusinessID()
{
  return MEMORY[0x1E0D34EF0]();
}

uint64_t _IDSCopyIDForEmailAddress()
{
  return MEMORY[0x1E0D34EF8]();
}

uint64_t _IDSCopyIDForPhoneNumberWithOptions()
{
  return MEMORY[0x1E0D34F00]();
}

uint64_t _IDSCopyIDForPushTokenAndIdentitiesWithService()
{
  return MEMORY[0x1E0D34F08]();
}

uint64_t _IDSCopyIDForTokenWithURI()
{
  return MEMORY[0x1E0D34F10]();
}

uint64_t _IDSDestinationHasValidPrefix()
{
  return MEMORY[0x1E0D34F20]();
}

uint64_t _IDSFZIDTypeFromIDSIDType()
{
  return MEMORY[0x1E0D34F28]();
}

uint64_t _IDSIDSIDTypeFromFZIDType()
{
  return MEMORY[0x1E0D34F38]();
}

uint64_t _IDSIDTypeHasToken()
{
  return MEMORY[0x1E0D34F40]();
}

uint64_t _IDSIsValidPushPriority()
{
  return MEMORY[0x1E0D34F48]();
}

uint64_t _IDSIsValidSendMode()
{
  return MEMORY[0x1E0D34F50]();
}

uint64_t _IDSIsValidWakingPushPriority()
{
  return MEMORY[0x1E0D34F58]();
}

uint64_t _IDSLinkPacketBufferCreate()
{
  return MEMORY[0x1E0D34F60]();
}

uint64_t _IDSLinkPacketBufferRelease()
{
  return MEMORY[0x1E0D34F68]();
}

uint64_t _IDSLog()
{
  return MEMORY[0x1E0D34F70]();
}

uint64_t _IDSLogV()
{
  return MEMORY[0x1E0D34F80]();
}

uint64_t _IDSPrefersPhoneNumbersForServiceIdentifier()
{
  return MEMORY[0x1E0D34F88]();
}

uint64_t _IDSQuickRelayProtocolVersionNumber()
{
  return MEMORY[0x1E0D34F90]();
}

uint64_t _IDSRegistrationServiceTypeForString()
{
  return MEMORY[0x1E0D34F98]();
}

uint64_t _IDSRunningInDaemon()
{
  return MEMORY[0x1E0D34FA0]();
}

uint64_t _IDSServiceFromRegistrationServiceType()
{
  return MEMORY[0x1E0D34FA8]();
}

uint64_t _IDSShouldLog()
{
  return MEMORY[0x1E0D34FB0]();
}

uint64_t _IDSStringFromIDSRegistrationStatus()
{
  return MEMORY[0x1E0D34FB8]();
}

uint64_t _IDSSupportsDirectMessaging()
{
  return MEMORY[0x1E0D34FC0]();
}

uint64_t _IDSTypeForID()
{
  return MEMORY[0x1E0D34FC8]();
}

uint64_t _IDSWarn()
{
  return MEMORY[0x1E0D34FD0]();
}

uint64_t _IMWarn()
{
  return MEMORY[0x1E0D36BA8]();
}

uint64_t _StringForIDSAccountType()
{
  return MEMORY[0x1E0D34FE8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1E0C80FC0](dso, description, activity, *(_QWORD *)&flags);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int clonefile(const char *a1, const char *a2, uint32_t a3)
{
  return MEMORY[0x1E0C82678](a1, a2, *(_QWORD *)&a3);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

uLong crc32_z(uLong crc, const Bytef *buf, z_size_t len)
{
  return MEMORY[0x1E0DE92B8](crc, buf, len);
}

uint64_t cut_arc_os_release()
{
  return MEMORY[0x1E0D13248]();
}

uint64_t cut_dispatch_log_queue()
{
  return MEMORY[0x1E0D13250]();
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BF8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CB0](buffer, size, queue, destructor);
}

uint64_t dispatch_data_create_f()
{
  return MEMORY[0x1E0C82CC8]();
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CD0](data, buffer_ptr, size_ptr);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1E0C82CE8](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1E0C82D08](key);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x1E0C82E80](queue, key, context, destructor);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x1E0C83078](*(_QWORD *)&a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

uid_t getuid(void)
{
  return MEMORY[0x1E0C83828]();
}

uint64_t ids_monotonic_time()
{
  return MEMORY[0x1E0D34FF8]();
}

uint64_t im_dispatch_after_primary_queue()
{
  return MEMORY[0x1E0D36BC0]();
}

uint64_t im_dispatch_async_with_timeout()
{
  return MEMORY[0x1E0D36BC8]();
}

uint64_t im_local_object_peer_event_handler()
{
  return MEMORY[0x1E0D36BD0]();
}

uint64_t im_notify_register_dispatch()
{
  return MEMORY[0x1E0D36BE0]();
}

uint64_t im_primary_queue()
{
  return MEMORY[0x1E0D36BF0]();
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1E0C83970](*(_QWORD *)&a1, a2, a3);
}

uint64_t isRunningTests()
{
  return MEMORY[0x1E0D35000]();
}

uint64_t jw_uuid_to_data()
{
  return MEMORY[0x1E0D36BF8]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1E0C83C70]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

char *__cdecl mktemp(char *a1)
{
  return (char *)MEMORY[0x1E0C841C0](a1);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

void nw_connection_batch(nw_connection_t connection, dispatch_block_t batch_block)
{
  MEMORY[0x1E0CCEFA8](connection, batch_block);
}

void nw_connection_cancel(nw_connection_t connection)
{
  MEMORY[0x1E0CCEFB8](connection);
}

nw_path_t nw_connection_copy_current_path(nw_connection_t connection)
{
  return (nw_path_t)MEMORY[0x1E0CCEFE8](connection);
}

nw_parameters_t nw_connection_copy_parameters(nw_connection_t connection)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF018](connection);
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  return (nw_connection_t)MEMORY[0x1E0CCF030](endpoint, parameters);
}

uint64_t nw_connection_create_with_client_id()
{
  return MEMORY[0x1E0CCF048]();
}

uint64_t nw_connection_create_with_connected_socket()
{
  return MEMORY[0x1E0CCF050]();
}

uint64_t nw_connection_create_with_connected_socket_and_parameters()
{
  return MEMORY[0x1E0CCF058]();
}

uint64_t nw_connection_get_id()
{
  return MEMORY[0x1E0CCF098]();
}

uint64_t nw_connection_read_multiple()
{
  return MEMORY[0x1E0CCF120]();
}

void nw_connection_receive(nw_connection_t connection, uint32_t minimum_incomplete_length, uint32_t maximum_length, nw_connection_receive_completion_t completion)
{
  MEMORY[0x1E0CCF128](connection, *(_QWORD *)&minimum_incomplete_length, *(_QWORD *)&maximum_length, completion);
}

uint64_t nw_connection_receive_multiple()
{
  return MEMORY[0x1E0CCF138]();
}

uint64_t nw_connection_reset_traffic_class()
{
  return MEMORY[0x1E0CCF158]();
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
  MEMORY[0x1E0CCF168](connection, content, context, is_complete, completion);
}

uint64_t nw_connection_set_event_handler()
{
  return MEMORY[0x1E0CCF190]();
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
  MEMORY[0x1E0CCF1B0](connection, queue);
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
  MEMORY[0x1E0CCF1C0](connection, handler);
}

void nw_connection_start(nw_connection_t connection)
{
  MEMORY[0x1E0CCF1D8](connection);
}

uint64_t nw_connection_state_to_string()
{
  return MEMORY[0x1E0CCF1E8]();
}

nw_protocol_metadata_t nw_content_context_copy_protocol_metadata(nw_content_context_t context, nw_protocol_definition_t protocol)
{
  return (nw_protocol_metadata_t)MEMORY[0x1E0CCF218](context, protocol);
}

nw_content_context_t nw_content_context_create(const char *context_identifier)
{
  return (nw_content_context_t)MEMORY[0x1E0CCF220](context_identifier);
}

void nw_content_context_set_expiration_milliseconds(nw_content_context_t context, uint64_t expiration_milliseconds)
{
  MEMORY[0x1E0CCF248](context, expiration_milliseconds);
}

void nw_content_context_set_metadata_for_protocol(nw_content_context_t context, nw_protocol_metadata_t protocol_metadata)
{
  MEMORY[0x1E0CCF258](context, protocol_metadata);
}

uint64_t nw_content_context_set_packet_id()
{
  return MEMORY[0x1E0CCF260]();
}

uint64_t nw_endpoint_create_apple_service()
{
  return MEMORY[0x1E0CCF398]();
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return (nw_endpoint_t)MEMORY[0x1E0CCF3B0](hostname, port);
}

int nw_error_get_error_code(nw_error_t error)
{
  return MEMORY[0x1E0CCF468](error);
}

nw_protocol_definition_t nw_framer_create_definition(const char *identifier, uint32_t flags, nw_framer_start_handler_t start_handler)
{
  return (nw_protocol_definition_t)MEMORY[0x1E0CCF5E8](identifier, *(_QWORD *)&flags, start_handler);
}

nw_protocol_options_t nw_framer_create_options(nw_protocol_definition_t framer_definition)
{
  return (nw_protocol_options_t)MEMORY[0x1E0CCF5F0](framer_definition);
}

BOOL nw_framer_deliver_input_no_copy(nw_framer_t framer, size_t input_length, nw_framer_message_t message, BOOL is_complete)
{
  return MEMORY[0x1E0CCF5F8](framer, input_length, message, is_complete);
}

nw_framer_message_t nw_framer_message_create(nw_framer_t framer)
{
  return (nw_framer_message_t)MEMORY[0x1E0CCF618](framer);
}

BOOL nw_framer_parse_input(nw_framer_t framer, size_t minimum_incomplete_length, size_t maximum_length, uint8_t *temp_buffer, nw_framer_parse_completion_t parse)
{
  return MEMORY[0x1E0CCF628](framer, minimum_incomplete_length, maximum_length, temp_buffer, parse);
}

void nw_framer_set_input_handler(nw_framer_t framer, nw_framer_input_handler_t input_handler)
{
  MEMORY[0x1E0CCF650](framer, input_handler);
}

void nw_framer_set_output_handler(nw_framer_t framer, nw_framer_output_handler_t output_handler)
{
  MEMORY[0x1E0CCF658](framer, output_handler);
}

void nw_framer_write_output(nw_framer_t framer, const uint8_t *output_buffer, size_t output_length)
{
  MEMORY[0x1E0CCF670](framer, output_buffer, output_length);
}

BOOL nw_framer_write_output_no_copy(nw_framer_t framer, size_t output_length)
{
  return MEMORY[0x1E0CCF678](framer, output_length);
}

uint64_t nw_group_descriptor_create_apple_id()
{
  return MEMORY[0x1E0CCF680]();
}

nw_protocol_metadata_t nw_ip_create_metadata(void)
{
  return (nw_protocol_metadata_t)MEMORY[0x1E0CCF778]();
}

nw_ip_ecn_flag_t nw_ip_metadata_get_ecn_flag(nw_protocol_metadata_t metadata)
{
  return MEMORY[0x1E0CCF780](metadata);
}

void nw_ip_metadata_set_ecn_flag(nw_protocol_metadata_t metadata, nw_ip_ecn_flag_t ecn_flag)
{
  MEMORY[0x1E0CCF790](metadata, *(_QWORD *)&ecn_flag);
}

void nw_ip_metadata_set_service_class(nw_protocol_metadata_t metadata, nw_service_class_t service_class)
{
  MEMORY[0x1E0CCF7A0](metadata, *(_QWORD *)&service_class);
}

void nw_ip_options_set_disable_fragmentation(nw_protocol_options_t options, BOOL disable_fragmentation)
{
  MEMORY[0x1E0CCF7A8](options, disable_fragmentation);
}

nw_listener_t nw_listener_create_with_port(const char *port, nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x1E0CCF7E8](port, parameters);
}

uint16_t nw_listener_get_port(nw_listener_t listener)
{
  return MEMORY[0x1E0CCF7F0](listener);
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
  MEMORY[0x1E0CCF810](listener, handler);
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
  MEMORY[0x1E0CCF820](listener, queue);
}

void nw_listener_set_state_changed_handler(nw_listener_t listener, nw_listener_state_changed_handler_t handler)
{
  MEMORY[0x1E0CCF828](listener, handler);
}

void nw_listener_start(nw_listener_t listener)
{
  MEMORY[0x1E0CCF830](listener);
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return (nw_protocol_stack_t)MEMORY[0x1E0CCF8C8](parameters);
}

nw_parameters_t nw_parameters_create(void)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF930]();
}

uint64_t nw_parameters_create_quic_stream()
{
  return MEMORY[0x1E0CCF978]();
}

nw_parameters_t nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  return (nw_parameters_t)MEMORY[0x1E0CCF980](configure_tls, configure_tcp);
}

uint64_t nw_parameters_set_account_id()
{
  return MEMORY[0x1E0CCFA50]();
}

uint64_t nw_parameters_set_context()
{
  return MEMORY[0x1E0CCFA90]();
}

uint64_t nw_parameters_set_data_mode()
{
  return MEMORY[0x1E0CCFA98]();
}

uint64_t nw_parameters_set_indefinite()
{
  return MEMORY[0x1E0CCFB10]();
}

uint64_t nw_parameters_set_local_address()
{
  return MEMORY[0x1E0CCFB30]();
}

uint64_t nw_parameters_set_required_netagent_classes()
{
  return MEMORY[0x1E0CCFC00]();
}

uint64_t nw_path_assert_agent()
{
  return MEMORY[0x1E0CCFCA0]();
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return MEMORY[0x1E0CCFD10]();
}

uint64_t nw_path_evaluator_cancel()
{
  return MEMORY[0x1E0CCFD20]();
}

uint64_t nw_path_evaluator_copy_path()
{
  return MEMORY[0x1E0CCFD38]();
}

uint64_t nw_path_evaluator_set_update_handler()
{
  return MEMORY[0x1E0CCFD58]();
}

uint64_t nw_path_get_nexus_agent_uuid()
{
  return MEMORY[0x1E0CCFDB0]();
}

uint64_t nw_path_get_nexus_instance()
{
  return MEMORY[0x1E0CCFDB8]();
}

uint64_t nw_path_get_nexus_key()
{
  return MEMORY[0x1E0CCFDC0]();
}

uint64_t nw_path_request_nexus()
{
  return MEMORY[0x1E0CCFE78]();
}

uint64_t nw_path_uses_nexus()
{
  return MEMORY[0x1E0CCFE90]();
}

nw_protocol_definition_t nw_protocol_copy_ip_definition(void)
{
  return (nw_protocol_definition_t)MEMORY[0x1E0CCFEA0]();
}

uint64_t nw_protocol_copy_qpod_definition()
{
  return MEMORY[0x1E0CCFEA8]();
}

uint64_t nw_protocol_stack_append_application_protocol()
{
  return MEMORY[0x1E0CCFFC0]();
}

nw_protocol_options_t nw_protocol_stack_copy_internet_protocol(nw_protocol_stack_t stack)
{
  return (nw_protocol_options_t)MEMORY[0x1E0CCFFD0](stack);
}

void nw_protocol_stack_prepend_application_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
  MEMORY[0x1E0CCFFF8](stack, protocol);
}

uint64_t nw_queue_context_target_dispatch_queue()
{
  return MEMORY[0x1E0CD0110]();
}

uint64_t nw_quic_connection_copy_sec_protocol_options()
{
  return MEMORY[0x1E0CD0150]();
}

sec_protocol_options_t nw_tls_copy_sec_protocol_options(nw_protocol_options_t options)
{
  return (sec_protocol_options_t)MEMORY[0x1E0CD03C8](options);
}

nw_protocol_options_t nw_tls_create_options(void)
{
  return (nw_protocol_options_t)MEMORY[0x1E0CD03D0]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84510](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84518](state);
}

uint64_t os_channel_advance_slot()
{
  return MEMORY[0x1E0C84548]();
}

uint64_t os_channel_attr_create()
{
  return MEMORY[0x1E0C84550]();
}

uint64_t os_channel_attr_destroy()
{
  return MEMORY[0x1E0C84558]();
}

uint64_t os_channel_attr_set()
{
  return MEMORY[0x1E0C84568]();
}

uint64_t os_channel_attr_set_key()
{
  return MEMORY[0x1E0C84570]();
}

uint64_t os_channel_available_slot_count()
{
  return MEMORY[0x1E0C84578]();
}

uint64_t os_channel_create_extended()
{
  return MEMORY[0x1E0C84588]();
}

uint64_t os_channel_destroy()
{
  return MEMORY[0x1E0C84590]();
}

uint64_t os_channel_get_fd()
{
  return MEMORY[0x1E0C845C8]();
}

uint64_t os_channel_get_next_slot()
{
  return MEMORY[0x1E0C845E0]();
}

uint64_t os_channel_ring_id()
{
  return MEMORY[0x1E0C84620]();
}

uint64_t os_channel_rx_ring()
{
  return MEMORY[0x1E0C84638]();
}

uint64_t os_channel_set_slot_properties()
{
  return MEMORY[0x1E0C84640]();
}

uint64_t os_channel_sync()
{
  return MEMORY[0x1E0C84660]();
}

uint64_t os_channel_tx_ring()
{
  return MEMORY[0x1E0C84668]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

uint64_t os_log_shim_legacy_logging_enabled()
{
  return MEMORY[0x1E0C84768]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1E0C84C40](*(_QWORD *)&pid, *(_QWORD *)&flavor, arg, buffer, *(_QWORD *)&buffersize);
}

uint64_t pthread_dependency_fulfill_np()
{
  return MEMORY[0x1E0C84D60]();
}

uint64_t pthread_dependency_init_np()
{
  return MEMORY[0x1E0C84D68]();
}

uint64_t pthread_dependency_wait_np()
{
  return MEMORY[0x1E0C84D70]();
}

uint64_t pthread_main_thread_np()
{
  return MEMORY[0x1E0C84E10]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1E0C85178]();
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x1E0C851A0]();
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1E0C851A8]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x1E0C851F8]();
}

void sec_protocol_options_add_pre_shared_key(sec_protocol_options_t options, dispatch_data_t psk, dispatch_data_t psk_identity)
{
  MEMORY[0x1E0CD7210](options, psk, psk_identity);
}

void sec_protocol_options_set_verify_block(sec_protocol_options_t options, sec_protocol_verify_t verify_block, dispatch_queue_t verify_block_queue)
{
  MEMORY[0x1E0CD7350](options, verify_block, verify_block_queue);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1E0C85388](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, *(_QWORD *)&a5);
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1E0C85438](*(_QWORD *)&a1);
}

int socketpair(int a1, int a2, int a3, int *a4)
{
  return MEMORY[0x1E0C85458](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

uint64_t throwsIDSAbortException()
{
  return MEMORY[0x1E0D35248]();
}

void uuid_clear(uuid_t uu)
{
  MEMORY[0x1E0C85A00](uu);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1E0C85A08](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
  MEMORY[0x1E0C85A10](dst, src);
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1E0C85A30](uu);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1E0C85A38](in, uu);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

void xpc_array_set_string(xpc_object_t xarray, size_t index, const char *string)
{
  MEMORY[0x1E0C85ED0](xarray, index, string);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F68](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x1E0C86038](connection, message, replyq, handler);
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1E0C86048](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86108](object);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86260](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

xpc_object_t xpc_fd_create(int fd)
{
  return (xpc_object_t)MEMORY[0x1E0C864A0](*(_QWORD *)&fd);
}

int xpc_fd_dup(xpc_object_t xfd)
{
  return MEMORY[0x1E0C864B0](xfd);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1E0C86570](xint);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1E0C86758](xstring);
}

