void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

uint64_t InputOrigin.aceInputOrigin.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

SiriUtilities::InputOrigin_optional __swiftcall InputOrigin.init(aceValue:)(Swift::String aceValue)
{
  char *v1;
  char v2;
  void *object;
  uint64_t countAndFlagsBits;
  char *v5;
  void *v6;
  char v8;
  void *v9;
  SiriUtilities::InputOrigin_optional result;
  void *v12;
  void *v14;
  void *v16;
  void *v18;
  void *v20;
  void *v22;
  void *v24;
  void *v26;
  void *v28;
  void *v30;
  void *v32;
  void *v34;
  void *v36;
  void *v38;
  void *v40;
  void *v42;
  char v44;

  object = aceValue._object;
  countAndFlagsBits = aceValue._countAndFlagsBits;
  v5 = v1;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == aceValue._countAndFlagsBits && v6 == object)
  {
    v8 = 0;
LABEL_13:
    OUTLINED_FUNCTION_2_0();
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  v8 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_14:
    result.value = OUTLINED_FUNCTION_2_0();
    goto LABEL_15;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v9 == object)
  {
    v8 = 1;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 1;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v12 == object)
  {
    v8 = 2;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 2;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v14 == object)
  {
    v8 = 3;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 3;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v16 == object)
  {
    v8 = 4;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 4;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v18 == object)
  {
    v8 = 5;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 5;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v20 == object)
  {
    v8 = 6;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 6;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v22 == object)
  {
    v8 = 7;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 7;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v24 == object)
  {
    v8 = 8;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 8;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v26 == object)
  {
    v8 = 9;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 9;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v28 == object)
  {
    v8 = 10;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 10;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v30 == object)
  {
    v8 = 11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 11;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v32 == object)
  {
    v8 = 12;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 12;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v34 == object)
  {
    v8 = 13;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 13;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v36 == object)
  {
    v8 = 14;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 14;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v38 == object)
  {
    v8 = 15;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 15;
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v40 == object)
  {
    v8 = 16;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    v8 = 16;
    goto LABEL_14;
  }
  v8 = 17;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v42 == object)
    goto LABEL_13;
  v44 = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_0();
  result.value = swift_bridgeObjectRelease();
  if ((v44 & 1) != 0)
    v8 = 17;
  else
    v8 = 18;
LABEL_15:
  *v5 = v8;
  return result;
}

SiriUtilities::InputOrigin_optional static InputOrigin.from(aceInputOrigin:)(uint64_t a1, void *a2)
{
  Swift::String v4;

  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  return InputOrigin.init(aceValue:)(v4);
}

SiriUtilities::InputOrigin_optional __swiftcall InputOrigin.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  SiriUtilities::InputOrigin_optional result;
  char v5;

  v2 = v1;
  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  v5 = 18;
  if (v3 < 0x12)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t InputOrigin.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1C2F2FF2C + 4 * byte_1C2F80510[*v0]))(0xD000000000000015, 0x80000001C2F84940);
}

unint64_t sub_1C2F2FF2C()
{
  return 0xD000000000000012;
}

uint64_t sub_1C2F2FF64@<X0>(uint64_t a1@<X8>)
{
  return a1 + 3;
}

uint64_t sub_1C2F2FF74()
{
  return 0x6547746E65696C63;
}

uint64_t sub_1C2F300B0()
{
  return 0x6665526F54706174;
}

void sub_1C2F300D0()
{
  JUMPOUT(0x1C2F300DCLL);
}

uint64_t sub_1C2F300E8()
{
  return 0x6972546563696F76;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InputOrigin()
{
  return specialized == infix<A>(_:_:)();
}

void protocol witness for Hashable.hashValue.getter in conformance InputOrigin()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InputOrigin()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance InputOrigin()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::InputOrigin_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InputOrigin(Swift::String *a1)
{
  return InputOrigin.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InputOrigin@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = InputOrigin.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t default argument 2 of TransformationRegistry.canTransform(from:to:lengthLimit:)()
{
  return 5;
}

uint64_t default argument 1 of TransformationRegistry.transform<A>(_:to:lengthLimit:tryAllPaths:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[16];
  uint64_t v6;
  uint64_t v7;

  TypeInformation.init(for:)((uint64_t)v5);
  v2 = v6;
  v3 = v7;
  swift_bridgeObjectRelease();
  result = OUTLINED_FUNCTION_2_0();
  *a1 = v2;
  a1[1] = v3;
  return result;
}

uint64_t default argument 2 of TransformationRegistry.transform<A>(_:to:lengthLimit:tryAllPaths:)()
{
  return 5;
}

uint64_t default argument 3 of TransformationRegistry.transform<A>(_:to:lengthLimit:tryAllPaths:)()
{
  return 0;
}

uint64_t default argument 3 of TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)()
{
  return 0;
}

uint64_t default argument 1 of IdleTracker.init(lock:name:queue:timeout:timeoutAction:)()
{
  return 0x63617254656C6449;
}

uint64_t default argument 3 of IdleTracker.init(lock:name:queue:timeout:timeoutAction:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultTimeout != -1)
    swift_once();
  v2 = type metadata accessor for DispatchTimeInterval();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static IdleTracker.defaultTimeout);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void (*default argument 4 of IdleTracker.init(lock:name:queue:timeout:timeoutAction:)())()
{
  return implicit closure #1 in variable initialization expression of static IdleTracker.defaultAction;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t lazy protocol witness table accessor for type InputOrigin and conformance InputOrigin()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin;
  if (!lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for InputOrigin, &type metadata for InputOrigin);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for InputOrigin(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xEF)
  {
    if (a2 + 17 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 17) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 18;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v5 = v6 - 18;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InputOrigin(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1C2F303A4 + 4 * byte_1C2F80527[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1C2F303D8 + 4 * byte_1C2F80522[v4]))();
}

uint64_t sub_1C2F303D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F303E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F303E8);
  return result;
}

uint64_t sub_1C2F303F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F303FCLL);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1C2F30400(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F30408(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for InputOrigin(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for InputOrigin(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for InputOrigin()
{
  return &type metadata for InputOrigin;
}

uint64_t initializeBufferWithCopyOfBuffer for _opaque_pthread_t(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

void *__swift_memcpy8192_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2000uLL);
}

uint64_t getEnumTagSinglePayload for _opaque_pthread_t(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 0x2000))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _opaque_pthread_t(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8184) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 8168) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 8088) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 8024) = 0u;
    *(_OWORD *)(result + 8008) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 7928) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 7848) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 7768) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 7688) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 7624) = 0u;
    *(_OWORD *)(result + 7608) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 7528) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 7448) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 7368) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 7288) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 7224) = 0u;
    *(_OWORD *)(result + 7208) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 7128) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 7048) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 6968) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 6888) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 6824) = 0u;
    *(_OWORD *)(result + 6808) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 6728) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 6648) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 6568) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 6488) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 6424) = 0u;
    *(_OWORD *)(result + 6408) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 6328) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 6248) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 6168) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 6088) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 6024) = 0u;
    *(_OWORD *)(result + 6008) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 5928) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 0x2000) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_t(uint64_t a1)
{
  type metadata accessor for _opaque_pthread_t(a1, &lazy cache variable for type metadata for _opaque_pthread_t);
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _opaque_pthread_mutex_t(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _opaque_pthread_mutex_t(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_mutex_t(uint64_t a1)
{
  type metadata accessor for _opaque_pthread_t(a1, &lazy cache variable for type metadata for _opaque_pthread_mutex_t);
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CTError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CTError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for CTError(uint64_t a1)
{
  type metadata accessor for _opaque_pthread_t(a1, &lazy cache variable for type metadata for CTError);
}

void type metadata accessor for CFDictionaryRef(uint64_t a1)
{
  type metadata accessor for _opaque_pthread_t(a1, &lazy cache variable for type metadata for CFDictionaryRef);
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for _opaque_pthread_t(a1, &lazy cache variable for type metadata for CFStringRef);
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance NSDataWritingOptions(_QWORD *a1, uint64_t *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for __darwin_pthread_handler_rec(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __darwin_pthread_handler_rec(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void type metadata accessor for __darwin_pthread_handler_rec(uint64_t a1)
{
  type metadata accessor for _opaque_pthread_t(a1, (unint64_t *)&lazy cache variable for type metadata for __darwin_pthread_handler_rec);
}

void type metadata accessor for _opaque_pthread_t(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void TransformationRegistry.fallback.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t OUTLINED_FUNCTION_0_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_1_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t NSBundle.packageId.getter()
{
  void *v0;
  uint64_t result;
  uint64_t v2;

  result = outlined bridged method (pb) of @objc NSBundle.bundleIdentifier.getter(v0);
  if (!v2)
    return 0x3E6C696E3CLL;
  return result;
}

uint64_t NSBundle.configData.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_bundlePath);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

double static NSBundle.packageFrom(_:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  Swift::String v7;
  unint64_t v8;
  double result;

  v6 = type metadata accessor for NSBundle();
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  v8 = (unint64_t)NSBundle.__allocating_init(path:)(v7);
  if (v8)
  {
    *(_QWORD *)(a3 + 24) = v6;
    *(_QWORD *)(a3 + 32) = &protocol witness table for NSBundle;
    *(_QWORD *)a3 = v8;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

NSBundle_optional __swiftcall NSBundle.__allocating_init(path:)(Swift::String path)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v3;
  void *v4;
  objc_class *v5;
  Swift::Bool v6;
  objc_class *v7;
  NSBundle_optional result;

  object = path._object;
  countAndFlagsBits = path._countAndFlagsBits;
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4 = (void *)MEMORY[0x1C3BCDDDC](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  v5 = (objc_class *)objc_msgSend(v3, sel_initWithPath_, v4);

  v7 = v5;
  result.value.super.isa = v7;
  result.is_nil = v6;
  return result;
}

void NSBundle.loadPlugin()()
{
  void *v0;

  if (one-time initialization token for pluginLoaderLog != -1)
    swift_once();
  specialized static Logger.withSignpost<A>(name:log:completion:)((uint64_t)"LoadPlugin", 10, 2, (void *)static Logger.pluginLoaderLog, v0);
}

uint64_t closure #1 in NSBundle.loadPlugin()@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t ObjCClassMetadata;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  id v10;
  os_log_type_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  os_log_type_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  os_log_type_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;

  if ((objc_msgSend(a1, sel_isLoaded) & 1) != 0 || (objc_msgSend(a1, sel_load) & 1) != 0)
  {
    if (objc_msgSend(a1, sel_principalClass))
    {
      ObjCClassMetadata = swift_getObjCClassMetadata();
      if (dynamic_cast_existential_1_conditional(ObjCClassMetadata))
      {
        v7 = v6;
        result = (*(uint64_t (**)(void))(v6 + 8))();
        *a2 = result;
        a2[1] = v7;
        return result;
      }
      if (one-time initialization token for loader != -1)
        swift_once();
      v25 = OUTLINED_FUNCTION_13();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.loader);
      v26 = OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_9();
      v27 = OUTLINED_FUNCTION_11();
      if (OUTLINED_FUNCTION_5(v27))
      {
        OUTLINED_FUNCTION_4();
        OUTLINED_FUNCTION_6();
        v28 = OUTLINED_FUNCTION_2_1(4.8149e-34);
        OUTLINED_FUNCTION_7(v28, v29, v30);
        OUTLINED_FUNCTION_0_1();

        OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_3(&dword_1C2F2D000, v31, v32, "Bundle %s has unexpected principal class; cannot be loaded as a plugin");
        OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_1_1();
      }

      v33 = 2;
    }
    else
    {
      if (one-time initialization token for loader != -1)
        swift_once();
      v9 = OUTLINED_FUNCTION_13();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.loader);
      v10 = OUTLINED_FUNCTION_10();
      OUTLINED_FUNCTION_9();
      v11 = OUTLINED_FUNCTION_11();
      if (OUTLINED_FUNCTION_5(v11))
      {
        OUTLINED_FUNCTION_4();
        OUTLINED_FUNCTION_6();
        v12 = OUTLINED_FUNCTION_2_1(4.8149e-34);
        OUTLINED_FUNCTION_7(v12, v13, v14);
        OUTLINED_FUNCTION_0_1();

        OUTLINED_FUNCTION_2_0();
        OUTLINED_FUNCTION_3(&dword_1C2F2D000, v15, v16, "Bundle %s has no principalClass; cannot be loaded as a plugin");
        OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_1_1();
      }

      v33 = 1;
    }
  }
  else
  {
    if (one-time initialization token for loader != -1)
      swift_once();
    v17 = OUTLINED_FUNCTION_13();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.loader);
    v18 = OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_9();
    v19 = OUTLINED_FUNCTION_11();
    if (OUTLINED_FUNCTION_5(v19))
    {
      OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_6();
      v20 = OUTLINED_FUNCTION_2_1(4.8149e-34);
      OUTLINED_FUNCTION_7(v20, v21, v22);
      OUTLINED_FUNCTION_0_1();

      OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_3(&dword_1C2F2D000, v23, v24, "Bundle %s failed to load as a plugin");
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_1_1();
    }

    v33 = 0;
  }
  lazy protocol witness table accessor for type PluginBundleError and conformance PluginBundleError();
  swift_allocError();
  *v34 = v33;
  return swift_willThrow();
}

uint64_t protocol witness for PluginPackage.packageId.getter in conformance NSBundle()
{
  return NSBundle.packageId.getter();
}

uint64_t protocol witness for PluginPackage.configData.getter in conformance NSBundle()
{
  return NSBundle.configData.getter();
}

double protocol witness for static PluginPackage.packageFrom(_:) in conformance NSBundle@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return static NSBundle.packageFrom(_:)(a1, a2, a3);
}

unint64_t protocol witness for PluginPackage.isLoaded.getter in conformance NSBundle()
{
  return (unint64_t)@nonobjc NSBundle.isLoaded.getter() & 1;
}

id @nonobjc NSBundle.isLoaded.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_isLoaded);
}

void protocol witness for PluginPackage.loadPlugin() in conformance NSBundle()
{
  NSBundle.loadPlugin()();
}

BOOL static PluginBundleError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PluginBundleError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int PluginBundleError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PluginBundleError()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t outlined bridged method (pb) of @objc NSBundle.bundleIdentifier.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_bundleIdentifier);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t type metadata accessor for NSBundle()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSBundle;
  if (!lazy cache variable for type metadata for NSBundle)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PluginBundleError and conformance PluginBundleError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginBundleError and conformance PluginBundleError;
  if (!lazy protocol witness table cache variable for type PluginBundleError and conformance PluginBundleError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PluginBundleError, &type metadata for PluginBundleError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginBundleError and conformance PluginBundleError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginBundleError and conformance PluginBundleError;
  if (!lazy protocol witness table cache variable for type PluginBundleError and conformance PluginBundleError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PluginBundleError, &type metadata for PluginBundleError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginBundleError and conformance PluginBundleError);
  }
  return result;
}

uint64_t dispatch thunk of PluginPackage.packageId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PluginPackage.configData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static PluginPackage.packageFrom(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of PluginPackage.isLoaded.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PluginPackage.loadPlugin()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t getEnumTagSinglePayload for PluginBundleError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginBundleError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2F3189C + 4 * byte_1C2F80715[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C2F318D0 + 4 * byte_1C2F80710[v4]))();
}

uint64_t sub_1C2F318D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F318D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F318E0);
  return result;
}

uint64_t sub_1C2F318EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F318F4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C2F318F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F31900(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PluginBundleError()
{
  return &type metadata for PluginBundleError;
}

uint64_t dynamic_cast_existential_1_conditional(uint64_t a1)
{
  if (swift_conformsToProtocol2())
    return a1;
  else
    return 0;
}

uint64_t OUTLINED_FUNCTION_0_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_1_1()
{
  JUMPOUT(0x1C3BCEEB0);
}

uint64_t OUTLINED_FUNCTION_2_1(float a1)
{
  float *v1;

  *v1 = a1;
  return NSBundle.packageId.getter();
}

void OUTLINED_FUNCTION_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_4()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_5(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_6()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_7(uint64_t a1, unint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_8()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_9()
{
  return Logger.logObject.getter();
}

id OUTLINED_FUNCTION_10()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_11()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_13()
{
  return type metadata accessor for Logger();
}

uint64_t specialized == infix<A>(_:_:)()
{
  return 1;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = InputOrigin.rawValue.getter();
  v2 = v1;
  if (v0 == InputOrigin.rawValue.getter() && v2 == v3)
    OUTLINED_FUNCTION_21();
  else
    LOBYTE(v0) = OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_2_0();
  return v0 & 1;
}

void specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;

  v2 = 0xE900000000000073;
  v3 = 0x656974696C697455;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6F4C6E6967756C50;
    else
      v5 = 0x6D6E6F7269766E45;
    if (v4 == 1)
      v6 = 0xEC00000072656461;
    else
      v6 = 0xEB00000000746E65;
  }
  else
  {
    v5 = 0x656974696C697455;
    v6 = 0xE900000000000073;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 0x6F4C6E6967756C50;
    else
      v3 = 0x6D6E6F7269766E45;
    if (a2 == 1)
      v2 = 0xEC00000072656461;
    else
      v2 = 0xEB00000000746E65;
  }
  if (v5 != v3 || v6 != v2)
    OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_9_0();
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0x737961776C61;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x726576656ELL;
    else
      v4 = 0x6552657275636573;
    if (v3 == 1)
      v5 = 0xE500000000000000;
    else
      v5 = 0xEE00737473657571;
  }
  else
  {
    v5 = 0xE600000000000000;
    v4 = 0x737961776C61;
  }
  if (a2)
  {
    if (a2 == 1)
      v2 = 0x726576656ELL;
    else
      v2 = 0x6552657275636573;
    if (a2 == 1)
      v6 = 0xE500000000000000;
    else
      v6 = 0xEE00737473657571;
  }
  else
  {
    v6 = 0xE600000000000000;
  }
  if (v4 == v2 && v5 == v6)
    OUTLINED_FUNCTION_21();
  else
    OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_9_0();
}

{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 1701601613;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x656C616D6546;
    else
      v4 = 0x6E776F6E6B6E55;
    if (v3 == 1)
      v5 = 0xE600000000000000;
    else
      v5 = 0xE700000000000000;
  }
  else
  {
    v5 = 0xE400000000000000;
    v4 = 1701601613;
  }
  if (a2)
  {
    if (a2 == 1)
      v2 = 0x656C616D6546;
    else
      v2 = 0x6E776F6E6B6E55;
    if (a2 == 1)
      v6 = 0xE600000000000000;
    else
      v6 = 0xE700000000000000;
  }
  else
  {
    v6 = 0xE400000000000000;
  }
  if (v4 == v2 && v5 == v6)
    OUTLINED_FUNCTION_21();
  else
    OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_9_0();
}

void specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD00000000000001CLL;
  else
    v3 = 0x6E776F6E6B6E75;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0x80000001C2F84B20;
  if ((a2 & 1) != 0)
    v5 = 0xD00000000000001CLL;
  else
    v5 = 0x6E776F6E6B6E75;
  if ((a2 & 1) != 0)
    v6 = 0x80000001C2F84B20;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    OUTLINED_FUNCTION_21();
  else
    OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_9_0();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7244676F6C616944;
  else
    v3 = 0x4479616C70736944;
  if (v2)
    v4 = 0xED00006E65766972;
  else
    v4 = 0xEC0000006E657669;
  if ((a2 & 1) != 0)
    v5 = 0x7244676F6C616944;
  else
    v5 = 0x4479616C70736944;
  if ((a2 & 1) != 0)
    v6 = 0xEC0000006E657669;
  else
    v6 = 0xED00006E65766972;
  if (v3 == v5 && v4 == v6)
    OUTLINED_FUNCTION_21();
  else
    OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_9_0();
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1C2F31D20(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C2F31D8C + 4 * byte_1C2F80834[a2]))(0x6E6F6973726556);
}

void sub_1C2F31D8C(uint64_t a1)
{
  uint64_t v1;

  if (a1 == 0x6E6F6973726556 && v1 == 0xE700000000000000)
    OUTLINED_FUNCTION_21();
  else
    OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_9_0();
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void static DeviceRestrictions.none.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

SiriUtilities::DeviceRestrictions __swiftcall DeviceRestrictions.init(rawValue:)(SiriUtilities::DeviceRestrictions rawValue)
{
  SiriUtilities::DeviceRestrictions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static DeviceRestrictions.guestMode.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

void static DeviceRestrictions.carDNDMode.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

void static DeviceRestrictions.spokenNotificationsOverDoAP.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

void static DeviceRestrictions.phoneFeaturesUnavailable.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

void static DeviceRestrictions.starkMode.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

void static DeviceRestrictions.pinLock.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

void static DeviceRestrictions.unauthenticatedByWatchProximity.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

void static DeviceRestrictions.unauthenticatedByHeadphonesState.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

void static DeviceRestrictions.supportsVehicleData.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

void static DeviceRestrictions.headGestureRecognitionAvailable.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

uint64_t DeviceRestrictions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t DeviceRestrictions.aceSet.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = MEMORY[0x1E0DEE9E8];
  if ((*v0 & 1) != 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_10_0();
    if ((v1 & 2) == 0)
    {
LABEL_3:
      if ((v1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_3;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_10_0();
  if ((v1 & 4) == 0)
  {
LABEL_4:
    if ((v1 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_10_0();
  if ((v1 & 8) == 0)
  {
LABEL_5:
    if ((v1 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_10_0();
  if ((v1 & 0x10) == 0)
  {
LABEL_6:
    if ((v1 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_10_0();
  if ((v1 & 0x20) == 0)
  {
LABEL_7:
    if ((v1 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_10_0();
  if ((v1 & 0x40) == 0)
  {
LABEL_8:
    if ((v1 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_10_0();
  if ((v1 & 0x80) == 0)
  {
LABEL_9:
    if ((v1 & 0x100) == 0)
      goto LABEL_10;
LABEL_21:
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_10_0();
    if ((v1 & 0x200) == 0)
      return v3;
    goto LABEL_11;
  }
LABEL_20:
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_10_0();
  if ((v1 & 0x100) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v1 & 0x200) != 0)
  {
LABEL_11:
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_10_0();
  }
  return v3;
}

SiriUtilities::DeviceRestrictions __swiftcall DeviceRestrictions.init(aceValue:)(Swift::OpaquePointer aceValue)
{
  _QWORD *v1;
  _QWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  SiriUtilities::DeviceRestrictions result;
  uint64_t v13;
  char v14;

  v2 = v1;
  if (*((_QWORD *)aceValue._rawValue + 2))
  {
    do
    {
      v3 = OUTLINED_FUNCTION_19();
      OUTLINED_FUNCTION_22(v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
      OUTLINED_FUNCTION_27();
    }
    while (!v11);
  }
  OUTLINED_FUNCTION_2_0();
  *v2 = 0;
  OUTLINED_FUNCTION_18();
  return result;
}

SiriUtilities::DeviceRestrictions __swiftcall DeviceRestrictions.init(aceValue:)(Swift::String aceValue)
{
  uint64_t *v1;
  char v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t *v5;
  void *v6;
  SiriUtilities::DeviceRestrictions result;
  uint64_t v9;
  void *v10;
  void *v12;
  void *v14;
  void *v16;
  void *v18;
  void *v20;
  void *v22;
  void *v24;
  void *v26;
  char v28;

  object = aceValue._object;
  countAndFlagsBits = aceValue._countAndFlagsBits;
  v5 = v1;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == aceValue._countAndFlagsBits && v6 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_5_0();
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result.rawValue = OUTLINED_FUNCTION_2_0();
LABEL_8:
    v9 = 1;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v10 == object)
  {
    v9 = 2;
    result.rawValue = OUTLINED_FUNCTION_5_0();
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result.rawValue = OUTLINED_FUNCTION_2_0();
    v9 = 2;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v12 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_5_0();
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result.rawValue = OUTLINED_FUNCTION_2_0();
LABEL_24:
    v9 = 4;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v14 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_5_0();
    goto LABEL_32;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result.rawValue = OUTLINED_FUNCTION_2_0();
LABEL_32:
    v9 = 8;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v16 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_5_0();
    goto LABEL_40;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result.rawValue = OUTLINED_FUNCTION_2_0();
LABEL_40:
    v9 = 16;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v18 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_5_0();
    goto LABEL_48;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result.rawValue = OUTLINED_FUNCTION_2_0();
LABEL_48:
    v9 = 32;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v20 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_5_0();
    goto LABEL_56;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result.rawValue = OUTLINED_FUNCTION_2_0();
LABEL_56:
    v9 = 64;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v22 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_5_0();
    goto LABEL_64;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result.rawValue = OUTLINED_FUNCTION_2_0();
LABEL_64:
    v9 = 128;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v24 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_5_0();
    goto LABEL_72;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result.rawValue = OUTLINED_FUNCTION_2_0();
LABEL_72:
    v9 = 256;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v26 == object)
  {
    result.rawValue = OUTLINED_FUNCTION_5_0();
    v9 = 512;
  }
  else
  {
    v28 = OUTLINED_FUNCTION_0_0();
    OUTLINED_FUNCTION_2_0();
    result.rawValue = OUTLINED_FUNCTION_7_0();
    if ((v28 & 1) != 0)
      v9 = 512;
    else
      v9 = 0;
  }
LABEL_9:
  *v5 = v9;
  return result;
}

void specialized OptionSet.union(_:)(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

void static DeviceRestrictions.from(aceRestrictions:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;

  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    do
    {
      v3 = OUTLINED_FUNCTION_19();
      OUTLINED_FUNCTION_22(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
      OUTLINED_FUNCTION_27();
    }
    while (!v11);
    OUTLINED_FUNCTION_2_0();
  }
  *a2 = 0;
  OUTLINED_FUNCTION_18();
}

SiriUtilities::DeviceRestrictions static DeviceRestrictions.from(aceRestriction:)(uint64_t a1, void *a2)
{
  Swift::String v4;

  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  return DeviceRestrictions.init(aceValue:)(v4);
}

SiriUtilities::DeviceRestrictions protocol witness for OptionSet.init(rawValue:) in conformance DeviceRestrictions(Swift::Int *a1)
{
  return DeviceRestrictions.init(rawValue:)(*a1);
}

void protocol witness for SetAlgebra.union(_:) in conformance DeviceRestrictions(_QWORD *a1@<X8>)
{
  specialized OptionSet.union(_:)(a1);
}

void protocol witness for SetAlgebra.intersection(_:) in conformance DeviceRestrictions(_QWORD *a1@<X8>)
{
  specialized OptionSet.intersection(_:)(a1);
}

void specialized OptionSet.intersection(_:)(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance DeviceRestrictions(_QWORD *a1)
{
  _QWORD *v1;

  return specialized OptionSet.symmetricDifference(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance DeviceRestrictions(uint64_t a1, _QWORD *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance DeviceRestrictions(_QWORD *a1)
{
  return specialized OptionSet<>.remove(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance DeviceRestrictions(_QWORD *a1)
{
  return specialized OptionSet<>.update(with:)(*a1);
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance DeviceRestrictions(uint64_t *a1)
{
  return specialized OptionSet<>.formUnion(_:)(*a1);
}

uint64_t specialized OptionSet<>.formUnion(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 |= result;
  return result;
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance DeviceRestrictions(uint64_t *a1)
{
  return specialized OptionSet<>.formIntersection(_:)(*a1);
}

uint64_t specialized OptionSet<>.formIntersection(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 &= result;
  return result;
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance DeviceRestrictions(_QWORD *a1)
{
  return specialized OptionSet<>.formSymmetricDifference(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance DeviceRestrictions(_QWORD *a1)
{
  _QWORD *v1;

  return specialized SetAlgebra.subtracting(_:)(*a1, *v1);
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance DeviceRestrictions(uint64_t *a1)
{
  uint64_t *v1;

  return specialized SetAlgebra.isSubset(of:)(*a1, *v1);
}

BOOL specialized SetAlgebra.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance DeviceRestrictions(_QWORD *a1)
{
  _QWORD *v1;

  return specialized SetAlgebra.isDisjoint(with:)(*a1, *v1);
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance DeviceRestrictions(uint64_t *a1)
{
  uint64_t *v1;

  return specialized SetAlgebra.isSuperset(of:)(*a1, *v1);
}

BOOL specialized SetAlgebra.isSuperset(of:)(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance DeviceRestrictions()
{
  uint64_t *v0;

  return specialized SetAlgebra.isEmpty.getter(*v0);
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance DeviceRestrictions()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance DeviceRestrictions(_QWORD *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

SiriUtilities::DeviceRestrictions protocol witness for RawRepresentable.init(rawValue:) in conformance DeviceRestrictions@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  SiriUtilities::DeviceRestrictions result;

  result.rawValue = DeviceRestrictions.init(rawValue:)(*a1).rawValue;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance DeviceRestrictions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = DeviceRestrictions.rawValue.getter();
  *a1 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DeviceRestrictions(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

void specialized Set._Variant.insert(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_12();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_25();
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  OUTLINED_FUNCTION_11_0();
  if ((v7 & 1) == 0)
  {
LABEL_16:
    OUTLINED_FUNCTION_23();
    swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_15();
    v14 = OUTLINED_FUNCTION_26();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v14, v15, v16, v17);
    OUTLINED_FUNCTION_24(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
    *v0 = v2;
    v0[1] = v1;
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_17();
  v9 = v9 && v8 == v1;
  if (!v9 && (OUTLINED_FUNCTION_3_0() & 1) == 0)
  {
    v10 = ~v5;
    do
    {
      v6 = (v6 + 1) & v10;
      OUTLINED_FUNCTION_11_0();
      if ((v11 & 1) == 0)
        goto LABEL_16;
      OUTLINED_FUNCTION_17();
      v13 = v9 && v12 == v1;
    }
    while (!v13 && (OUTLINED_FUNCTION_3_0() & 1) == 0);
  }
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_16();
LABEL_17:
  OUTLINED_FUNCTION_14();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_12();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_7_0();
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  OUTLINED_FUNCTION_11_0();
  if ((v7 & 1) == 0)
  {
LABEL_16:
    OUTLINED_FUNCTION_23();
    swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_15();
    v14 = OUTLINED_FUNCTION_26();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v14, v15, v16, v17);
    OUTLINED_FUNCTION_24(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
    *v0 = v2;
    v0[1] = v1;
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_17();
  v9 = v9 && v8 == v1;
  if (!v9 && (OUTLINED_FUNCTION_3_0() & 1) == 0)
  {
    v10 = ~v5;
    do
    {
      v6 = (v6 + 1) & v10;
      OUTLINED_FUNCTION_11_0();
      if ((v11 & 1) == 0)
        goto LABEL_16;
      OUTLINED_FUNCTION_17();
      v13 = v9 && v12 == v1;
    }
    while (!v13 && (OUTLINED_FUNCTION_3_0() & 1) == 0);
  }
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_16();
LABEL_17:
  OUTLINED_FUNCTION_14();
}

unint64_t lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions;
  if (!lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for DeviceRestrictions, &type metadata for DeviceRestrictions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions;
  if (!lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for DeviceRestrictions, &type metadata for DeviceRestrictions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions;
  if (!lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for DeviceRestrictions, &type metadata for DeviceRestrictions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions;
  if (!lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for DeviceRestrictions, &type metadata for DeviceRestrictions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceRestrictions()
{
  return &type metadata for DeviceRestrictions;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::UInt v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  __int128 v23;
  __int128 v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[40];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v5 = *v2;
  Hasher.init(_seed:)();
  v6 = *a2;
  v36 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)v37 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 40);
  *(_QWORD *)&v37[32] = *((_QWORD *)a2 + 7);
  Hasher._combine(_:)(v6);
  v41 = *(_QWORD *)v37;
  v39 = *(_OWORD *)&v37[8];
  v40 = v36;
  v38 = *(_OWORD *)&v37[24];
  swift_bridgeObjectRetain();
  outlined retain of TransformationCapability((uint64_t)a2);
  outlined retain of TypeIdentifier((uint64_t)&v40);
  OUTLINED_FUNCTION_20();
  Hasher._combine(_:)(*(Swift::UInt *)v37);
  outlined release of TypeIdentifier((uint64_t)&v40);
  outlined retain of TypeIdentifier((uint64_t)&v39);
  OUTLINED_FUNCTION_20();
  outlined release of TypeIdentifier((uint64_t)&v39);
  outlined retain of TypeIdentifier((uint64_t)&v38);
  OUTLINED_FUNCTION_20();
  outlined release of TypeIdentifier((uint64_t)&v38);
  outlined release of TransformationCapability((uint64_t)a2);
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v5 + 32);
  v9 = v7 & ~v8;
  v10 = v5 + 56;
  v33 = a2;
  v34 = a1;
  v32 = v2;
  if (((*(_QWORD *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v11 = ~v8;
    v12 = *(_QWORD *)(v5 + 48);
    while (1)
    {
      v13 = (_QWORD *)(v12 + (v9 << 6));
      if ((_DWORD)v6 == *(unsigned __int8 *)v13)
      {
        v15 = v13[3];
        v14 = v13[4];
        v17 = v13[5];
        v16 = v13[6];
        v18 = v13[7];
        v19 = v13[1] == (_QWORD)v36 && v13[2] == *((_QWORD *)&v36 + 1);
        if ((v19 || (OUTLINED_FUNCTION_3_0() & 1) != 0) && v15 == *(_QWORD *)v37)
        {
          v20 = v14 == *(_QWORD *)&v37[8] && v17 == *(_QWORD *)&v37[16];
          if (v20 || (OUTLINED_FUNCTION_3_0() & 1) != 0)
          {
            v21 = v16 == *(_QWORD *)&v37[24] && v18 == *(_QWORD *)&v37[32];
            if (v21 || (OUTLINED_FUNCTION_3_0() & 1) != 0)
              break;
          }
        }
      }
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_21;
    }
    swift_bridgeObjectRelease();
    outlined release of TransformationCapability((uint64_t)v33);
    v26 = *(_QWORD *)(*v32 + 48) + (v9 << 6);
    v28 = *(_QWORD *)(v26 + 8);
    v27 = *(_QWORD *)(v26 + 16);
    v30 = *(_QWORD *)(v26 + 40);
    v29 = *(_QWORD *)(v26 + 48);
    v31 = *(_QWORD *)(v26 + 56);
    *(_BYTE *)v34 = *(_BYTE *)v26;
    *(_QWORD *)(v34 + 8) = v28;
    *(_QWORD *)(v34 + 16) = v27;
    *(_OWORD *)(v34 + 24) = *(_OWORD *)(v26 + 24);
    *(_QWORD *)(v34 + 40) = v30;
    *(_QWORD *)(v34 + 48) = v29;
    *(_QWORD *)(v34 + 56) = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v35 = *v32;
    *v32 = 0x8000000000000000;
    outlined retain of TransformationCapability((uint64_t)v33);
    specialized _NativeSet.insertNew(_:at:isUnique:)((Swift::Int)v33, v9, isUniquelyReferenced_nonNull_native);
    *v32 = v35;
    swift_bridgeObjectRelease();
    v23 = v33[1];
    *(_OWORD *)v34 = *v33;
    *(_OWORD *)(v34 + 16) = v23;
    v24 = v33[3];
    *(_OWORD *)(v34 + 32) = v33[2];
    *(_OWORD *)(v34 + 48) = v24;
    return 1;
  }
}

uint64_t outlined retain of TransformationCapability(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined retain of TypeIdentifier(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of TypeIdentifier(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of TransformationCapability(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
      *v28 = v18;
      v28[1] = v19;
      ++*(_QWORD *)(v4 + 16);
      if (v7)
        goto LABEL_6;
LABEL_7:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v14 >= v8)
        goto LABEL_32;
      v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v8)
          goto LABEL_32;
        v15 = v30[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v8)
            goto LABEL_32;
          v15 = v30[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              v1 = v0;
              v29 = 1 << *(_BYTE *)(v2 + 32);
              if (v29 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              else
                *v30 = -1 << v29;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_39;
                if (v11 >= v8)
                  goto LABEL_32;
                v15 = v30[v11];
                ++v16;
                if (v15)
                  goto LABEL_20;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_20:
      v7 = (v15 - 1) & v15;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TypeIdentifier>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
      *v28 = v18;
      v28[1] = v19;
      ++*(_QWORD *)(v4 + 16);
      if (v7)
        goto LABEL_6;
LABEL_7:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v14 >= v8)
        goto LABEL_32;
      v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v8)
          goto LABEL_32;
        v15 = v30[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v8)
            goto LABEL_32;
          v15 = v30[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              v1 = v0;
              v29 = 1 << *(_BYTE *)(v2 + 32);
              if (v29 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              else
                *v30 = -1 << v29;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_39;
                if (v11 >= v8)
                  goto LABEL_32;
                v15 = v30[v11];
                ++v16;
                if (v15)
                  goto LABEL_20;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_20:
      v7 = (v15 - 1) & v15;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

void specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[4];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TransformationCapability>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = 1 << *(_BYTE *)(v2 + 32);
    v5 = (_QWORD *)(v2 + 56);
    v6 = -1;
    if (v4 < 64)
      v6 = ~(-1 << v4);
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v4 + 63) >> 6;
    swift_retain();
    v9 = 0;
    if (!v7)
      goto LABEL_6;
LABEL_5:
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
    {
      v15 = (_OWORD *)(*(_QWORD *)(v2 + 48) + (i << 6));
      v16 = v15[1];
      v19[0] = *v15;
      v19[1] = v16;
      v17 = v15[3];
      v19[2] = v15[2];
      v19[3] = v17;
      specialized _NativeSet._unsafeInsertNew(_:)((unsigned __int8 *)v19, v3);
      if (v7)
        goto LABEL_5;
LABEL_6:
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
LABEL_28:
        __break(1u);
        return;
      }
      if (v12 >= v8)
        goto LABEL_22;
      v13 = v5[v12];
      ++v9;
      if (!v13)
      {
        v9 = v12 + 1;
        if (v12 + 1 >= v8)
          goto LABEL_22;
        v13 = v5[v9];
        if (!v13)
        {
          v9 = v12 + 2;
          if (v12 + 2 >= v8)
            goto LABEL_22;
          v13 = v5[v9];
          if (!v13)
          {
            v14 = v12 + 3;
            if (v14 >= v8)
            {
LABEL_22:
              swift_release();
              v18 = 1 << *(_BYTE *)(v2 + 32);
              if (v18 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v18 + 63) >> 6, (_QWORD *)(v2 + 56));
              else
                *v5 = -1 << v18;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v13 = v5[v14];
            if (!v13)
            {
              while (1)
              {
                v9 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_28;
                if (v9 >= v8)
                  goto LABEL_22;
                v13 = v5[v9];
                ++v14;
                if (v13)
                  goto LABEL_19;
              }
            }
            v9 = v14;
          }
        }
      }
LABEL_19:
      v7 = (v13 - 1) & v13;
    }
  }
  swift_release();
  *v1 = v3;
}

__n128 specialized _NativeSet._unsafeInsertNew(_:)(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[40];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  Hasher.init(_seed:)();
  v9 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)v10 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v10[16] = *(_OWORD *)(a1 + 40);
  *(_QWORD *)&v10[32] = *((_QWORD *)a1 + 7);
  Hasher._combine(_:)(*a1);
  v14 = *(_QWORD *)v10;
  v12 = *(_OWORD *)&v10[8];
  v13 = v9;
  v11 = *(_OWORD *)&v10[24];
  outlined retain of TransformationCapability((uint64_t)a1);
  outlined retain of TypeIdentifier((uint64_t)&v13);
  String.hash(into:)();
  Hasher._combine(_:)(*(Swift::UInt *)v10);
  outlined release of TypeIdentifier((uint64_t)&v13);
  outlined retain of TypeIdentifier((uint64_t)&v12);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v12);
  outlined retain of TypeIdentifier((uint64_t)&v11);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v11);
  outlined release of TransformationCapability((uint64_t)a1);
  Hasher._finalize()();
  v4 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  v5 = *(_QWORD *)(a2 + 48) + (v4 << 6);
  result = *(__n128 *)a1;
  v7 = *((_OWORD *)a1 + 1);
  v8 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(v5 + 32) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v5 + 48) = v8;
  *(__n128 *)v5 = result;
  *(_OWORD *)(v5 + 16) = v7;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  a3 = v12 & ~v13;
  v14 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v11 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = *v16 == a1 && v16[1] == a2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v19 = (_QWORD *)(v15 + 16 * a3);
        v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v21 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v22 = (_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * a3);
  *v22 = a1;
  v22[1] = a2;
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v21 + 16) = v25;
}

{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  a3 = v12 & ~v13;
  v14 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v11 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = *v16 == a1 && v16[1] == a2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v19 = (_QWORD *)(v15 + 16 * a3);
        v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v21 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v22 = (_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * a3);
  *v22 = a1;
  v22[1] = a2;
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v21 + 16) = v25;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 *v32;
  __int128 v33;
  _BYTE v34[40];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v5 = (unsigned __int8 *)result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  v32 = (__int128 *)result;
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_28;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_28;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  v9 = *v5;
  v33 = *(_OWORD *)(v5 + 8);
  *(_OWORD *)v34 = *(_OWORD *)(v5 + 24);
  *(_OWORD *)&v34[16] = *(_OWORD *)(v5 + 40);
  *(_QWORD *)&v34[32] = *((_QWORD *)v5 + 7);
  Hasher._combine(_:)(v9);
  v38 = *(_QWORD *)v34;
  v36 = *(_OWORD *)&v34[8];
  v37 = v33;
  v35 = *(_OWORD *)&v34[24];
  outlined retain of TransformationCapability((uint64_t)v5);
  outlined retain of TypeIdentifier((uint64_t)&v37);
  String.hash(into:)();
  Hasher._combine(_:)(*(Swift::UInt *)v34);
  outlined release of TypeIdentifier((uint64_t)&v37);
  outlined retain of TypeIdentifier((uint64_t)&v36);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v36);
  outlined retain of TypeIdentifier((uint64_t)&v35);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v35);
  outlined release of TransformationCapability((uint64_t)v5);
  result = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v10;
  v11 = v8 + 56;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v8 + 48);
    do
    {
      v14 = (_QWORD *)(v13 + (a2 << 6));
      if ((_DWORD)v9 == *(unsigned __int8 *)v14)
      {
        result = v14[1];
        v16 = v14[3];
        v15 = v14[4];
        v18 = v14[5];
        v17 = v14[6];
        v19 = v14[7];
        v20 = result == (_QWORD)v33 && v14[2] == *((_QWORD *)&v33 + 1);
        if (v20 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
          if (v16 == *(_QWORD *)v34)
          {
            v21 = v15 == *(_QWORD *)&v34[8] && v18 == *(_QWORD *)&v34[16];
            if (v21 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
            {
              if (v17 == *(_QWORD *)&v34[24] && v19 == *(_QWORD *)&v34[32])
                goto LABEL_31;
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0)
                goto LABEL_31;
            }
          }
        }
      }
      a2 = (a2 + 1) & v12;
    }
    while (((*(_QWORD *)(v11 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_28:
  v23 = *v31;
  *(_QWORD *)(*v31 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v24 = (_OWORD *)(*(_QWORD *)(v23 + 48) + (a2 << 6));
  v25 = *v32;
  v26 = v32[1];
  v27 = v32[3];
  v24[2] = v32[2];
  v24[3] = v27;
  *v24 = v25;
  v24[1] = v26;
  v28 = *(_QWORD *)(v23 + 16);
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (!v29)
  {
    *(_QWORD *)(v23 + 16) = v30;
    return result;
  }
  __break(1u);
LABEL_31:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_36;
    if (v14 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TypeIdentifier>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_36;
    if (v14 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

void specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[4];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TransformationCapability>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release();
LABEL_24:
    *v1 = v3;
    return;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = v2 + 56;
  v6 = -1;
  if (v4 < 64)
    v6 = ~(-1 << v4);
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  v9 = 0;
  if (!v7)
    goto LABEL_6;
LABEL_5:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    v15 = (_OWORD *)(*(_QWORD *)(v2 + 48) + (i << 6));
    v17 = v15[2];
    v16 = v15[3];
    v18 = v15[1];
    v19[0] = *v15;
    v19[1] = v18;
    v19[2] = v17;
    v19[3] = v16;
    outlined retain of TransformationCapability((uint64_t)v19);
    specialized _NativeSet._unsafeInsertNew(_:)((unsigned __int8 *)v19, v3);
    if (v7)
      goto LABEL_5;
LABEL_6:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v8)
      goto LABEL_22;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v8)
        goto LABEL_22;
      v13 = *(_QWORD *)(v5 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v8)
          goto LABEL_22;
        v13 = *(_QWORD *)(v5 + 8 * v9);
        if (!v13)
          break;
      }
    }
LABEL_19:
    v7 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v8)
  {
LABEL_22:
    swift_release_n();
    goto LABEL_24;
  }
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v8)
      goto LABEL_22;
    v13 = *(_QWORD *)(v5 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3BCEDC0]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void OUTLINED_FUNCTION_0_2()
{
  specialized Set._Variant.insert(_:)();
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_3_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_7_0()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_8_0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
}

uint64_t OUTLINED_FUNCTION_10_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_12()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_15()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_16()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 48) + 16 * v2);
  v4 = v3[1];
  *v0 = *v3;
  v0[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_17()
{
  uint64_t v0;
  uint64_t v1;

  return *(_QWORD *)(v1 + 16 * v0);
}

uint64_t OUTLINED_FUNCTION_19()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_20()
{
  return String.hash(into:)();
}

Swift::Int OUTLINED_FUNCTION_22(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v11;
  Swift::String v12;

  v12._countAndFlagsBits = v10;
  v12._object = v11;
  return DeviceRestrictions.init(aceValue:)(v12).rawValue;
}

uint64_t OUTLINED_FUNCTION_23()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  *v10 = a10;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_25()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_26()
{
  uint64_t v0;

  return v0;
}

BOOL static ExecutionLocation.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  return v2
      || (OUTLINED_FUNCTION_3_0() & 1) != 0
      || (OUTLINED_FUNCTION_5_1() & 1) != 0 && (OUTLINED_FUNCTION_5_1() & 1) != 0;
}

uint64_t ExecutionLocation.isUnknown.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  char v5;
  char v8;
  char v10;
  BOOL v12;

  OUTLINED_FUNCTION_13_1();
  v1 = *v0;
  v2 = v0[1];
  v4 = v1 == v3 && v2 == 0xE700000000000000;
  if (v4 || (OUTLINED_FUNCTION_6_0(), (OUTLINED_FUNCTION_1_2() & 1) != 0))
  {
    v5 = 1;
  }
  else
  {
    if (v1 == 1701736302 && v2 == 0xE400000000000000)
      goto LABEL_26;
    OUTLINED_FUNCTION_6_0();
    v8 = OUTLINED_FUNCTION_3_0();
    v5 = 0;
    if ((v8 & 1) != 0)
      return v5 & 1;
    if (v1 == 0x726576726573 && v2 == 0xE600000000000000)
    {
LABEL_26:
      v5 = 0;
      return v5 & 1;
    }
    OUTLINED_FUNCTION_6_0();
    v10 = OUTLINED_FUNCTION_3_0();
    v5 = 0;
    v12 = v1 == 0x656369766564 && v2 == 0xE600000000000000;
    if ((v10 & 1) == 0 && !v12)
    {
      OUTLINED_FUNCTION_6_0();
      v5 = OUTLINED_FUNCTION_3_0() ^ 1;
    }
  }
  return v5 & 1;
}

SiriUtilities::ExecutionLocation __swiftcall ExecutionLocation.init(rawValue:)(SiriUtilities::ExecutionLocation rawValue)
{
  SiriUtilities::ExecutionLocation *v1;

  *v1 = rawValue;
  return rawValue;
}

void static ExecutionLocation.none.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_1(a1);
}

void static ExecutionLocation.server.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_1(a1);
}

void static ExecutionLocation.device.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_1(a1);
}

void static ExecutionLocation.unknown.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_1(a1);
}

uint64_t ExecutionLocation.isNone.getter()
{
  _QWORD *v0;

  if (*v0 == 1701736302 && v0[1] == 0xE400000000000000)
    return specialized == infix<A>(_:_:)();
  else
    return OUTLINED_FUNCTION_3_0();
}

uint64_t ExecutionLocation.isServer.getter()
{
  _QWORD *v0;

  if (*v0 == 0x726576726573 && v0[1] == 0xE600000000000000)
    return specialized == infix<A>(_:_:)();
  else
    return OUTLINED_FUNCTION_3_0();
}

uint64_t ExecutionLocation.isDevice.getter()
{
  _QWORD *v0;

  if (*v0 == 0x656369766564 && v0[1] == 0xE600000000000000)
    return specialized == infix<A>(_:_:)();
  else
    return OUTLINED_FUNCTION_3_0();
}

uint64_t ExecutionLocation.rawValue.getter()
{
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_6_0();
}

void ExecutionLocation.description.getter()
{
  if ((OUTLINED_FUNCTION_5_1() & 1) != 0)
    OUTLINED_FUNCTION_9_1();
  else
    OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_7_1();
}

void ExecutionLocation.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  Swift::String v5;
  Swift::String v6;

  v2 = *v0;
  v1 = v0[1];
  if ((OUTLINED_FUNCTION_5_1() & 1) == 0
    || ((OUTLINED_FUNCTION_13_1(), v2 == v3) ? (v4 = v1 == 0xE700000000000000) : (v4 = 0),
        v4 || (OUTLINED_FUNCTION_11_1(), (OUTLINED_FUNCTION_1_2() & 1) != 0)))
  {
    OUTLINED_FUNCTION_4_0();
  }
  else
  {
    OUTLINED_FUNCTION_4_0();
    v5._countAndFlagsBits = OUTLINED_FUNCTION_11_1();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 41;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
  }
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_7_1();
}

uint64_t ExecutionLocation.hash(into:)()
{
  if ((OUTLINED_FUNCTION_5_1() & 1) == 0)
    OUTLINED_FUNCTION_4_0();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void ExecutionLocation.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_14_0();
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    OUTLINED_FUNCTION_14_0();
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v7 = v6;
    OUTLINED_FUNCTION_12_0(v5);
    *a2 = v5;
    a2[1] = v7;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  OUTLINED_FUNCTION_3_1();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void ExecutionLocation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  v1 = dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  OUTLINED_FUNCTION_12_0(v1);
  OUTLINED_FUNCTION_3_1();
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

Swift::Int ExecutionLocation.hashValue.getter()
{
  Hasher.init(_seed:)();
  if ((ExecutionLocation.isUnknown.getter() & 1) != 0)
    OUTLINED_FUNCTION_9_1();
  else
    OUTLINED_FUNCTION_4_0();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExecutionLocation()
{
  Hasher.init(_seed:)();
  if ((ExecutionLocation.isUnknown.getter() & 1) == 0)
    swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ExecutionLocation and conformance ExecutionLocation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExecutionLocation and conformance ExecutionLocation;
  if (!lazy protocol witness table cache variable for type ExecutionLocation and conformance ExecutionLocation)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for ExecutionLocation, &type metadata for ExecutionLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionLocation and conformance ExecutionLocation);
  }
  return result;
}

void protocol witness for Decodable.init(from:) in conformance ExecutionLocation(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  ExecutionLocation.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance ExecutionLocation(_QWORD *a1)
{
  ExecutionLocation.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for ExecutionLocation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ExecutionLocation()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for ExecutionLocation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for ExecutionLocation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExecutionLocation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExecutionLocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutionLocation()
{
  return &type metadata for ExecutionLocation;
}

uint64_t OUTLINED_FUNCTION_1_2()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_4_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_5_1()
{
  return ExecutionLocation.isUnknown.getter();
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_8_1(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v1;
  a1[1] = v2;
}

uint64_t OUTLINED_FUNCTION_11_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_12_0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  uint64_t v0;

  return v0;
}

uint64_t TransformationChain.init(transformation:)(__int128 *a1)
{
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C2F80B40;
  outlined init with take of Transforming(a1, v2 + 32);
  return v2;
}

uint64_t outlined init with take of Transforming(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t TransformationChain.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t TransformationChain.withAddedStep(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 8))(&v21, v4, v5);
  v7 = v21;
  v6 = v22;
  TransformationChain.outputType.getter(a2);
  if (v7 == v19 && v6 == v20)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      TransformationChain.outputType.getter(a2);
      v10 = v21;
      v11 = v22;
      v12 = a1[3];
      v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v12);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v13 + 8))(&v19, v12, v13);
      v14 = v19;
      v15 = v20;
      lazy protocol witness table accessor for type TransformationChainError and conformance TransformationChainError();
      swift_allocError();
      *v16 = v10;
      v16[1] = v11;
      v16[2] = v14;
      v16[3] = v15;
      return swift_willThrow();
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2F80B40;
  outlined init with copy of Transforming((uint64_t)a1, inited + 32);
  v21 = a2;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  return v21;
}

void TransformationChain.outputType.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 40 * v1 - 8), *(_QWORD *)(a1 + 40 * v1 + 16));
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_9_0();
  }
  else
  {
    __break(1u);
  }
}

unint64_t lazy protocol witness table accessor for type TransformationChainError and conformance TransformationChainError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationChainError and conformance TransformationChainError;
  if (!lazy protocol witness table cache variable for type TransformationChainError and conformance TransformationChainError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationChainError, &type metadata for TransformationChainError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationChainError and conformance TransformationChainError);
  }
  return result;
}

uint64_t outlined init with copy of Transforming(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void TransformationChain.inputType.getter(_QWORD *a1)
{
  if (a1[2])
  {
    __swift_project_boxed_opaque_existential_1(a1 + 4, a1[7]);
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_9_0();
  }
  else
  {
    __break(1u);
  }
}

uint64_t TransformationChain.typeErasedTransform(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  outlined init with copy of Any(a1, (uint64_t)v15);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = a2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of Transforming(v7, (uint64_t)v12);
      v8 = v13;
      v9 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      (*(void (**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t))(v9 + 24))(v11, v15, v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      if (v3)
        break;
      outlined init with take of Any(v11, v15);
      v7 += 40;
      if (!--v6)
        goto LABEL_7;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    outlined init with take of Any(v15, a3);
  }
  return swift_bridgeObjectRelease();
}

void protocol witness for Transforming.inputType.getter in conformance TransformationChain()
{
  _QWORD **v0;

  TransformationChain.inputType.getter(*v0);
}

void protocol witness for Transforming.outputType.getter in conformance TransformationChain()
{
  uint64_t *v0;

  TransformationChain.outputType.getter(*v0);
}

uint64_t protocol witness for Transforming.typeErasedTransform(_:) in conformance TransformationChain@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;

  return TransformationChain.typeErasedTransform(_:)(a1, *v2, a2);
}

void specialized Array.append<A>(contentsOf:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_2_3();
  if (v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = OUTLINED_FUNCTION_5_2();
  if (!v7 || v5 > *(_QWORD *)(v2 + 24) >> 1)
  {
    if (v4 <= v5)
      v8 = v5;
    else
      v8 = v4;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v8, 1, v2);
    v2 = v9;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_14;
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_3_2();
  if (v11 != v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(v0 + 32, v3, v2 + 40 * v10 + 32);
  if (!v3)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *v1 = v2;
    OUTLINED_FUNCTION_1_3();
    return;
  }
  v12 = *(_QWORD *)(v2 + 16);
  v6 = __OFADD__(v12, v3);
  v13 = v12 + v3;
  if (!v6)
  {
    *(_QWORD *)(v2 + 16) = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_2_3();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_5_2() || v4 > *(_QWORD *)(v2 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v6;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_3_2();
  if (v8 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(v0 + 32, v3, v2 + (v7 << 6) + 32);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *v1 = v2;
    OUTLINED_FUNCTION_1_3();
    return;
  }
  v9 = *(_QWORD *)(v2 + 16);
  v5 = __OFADD__(v9, v3);
  v10 = v9 + v3;
  if (!v5)
  {
    *(_QWORD *)(v2 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

ValueMetadata *type metadata accessor for TransformationChain()
{
  return &type metadata for TransformationChain;
}

uint64_t destroy for TransformationChainError()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for TransformationChainError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TransformationChainError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for TransformationChainError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformationChainError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationChainError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for TransformationChainError()
{
  return 0;
}

ValueMetadata *type metadata accessor for TransformationChainError()
{
  return &type metadata for TransformationChainError;
}

uint64_t OUTLINED_FUNCTION_0_3()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t key path setter for SiriEnvironmentStorage.storage : SiriEnvironmentStorage(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 96);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t SiriEnvironmentStorage.storage.getter()
{
  OUTLINED_FUNCTION_25_0();
  return swift_bridgeObjectRetain();
}

uint64_t SiriEnvironmentStorage.storage.setter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriEnvironmentStorage.storage.modify())()
{
  OUTLINED_FUNCTION_25_0();
  return SiriEnvironmentStorage.storage.modify;
}

uint64_t SiriEnvironmentStorage.__allocating_init<A>(namespace:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  SiriEnvironmentStorage.init<A>(namespace:)();
  return v0;
}

uint64_t SiriEnvironmentStorage.init<A>(namespace:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = Dictionary.init(dictionaryLiteral:)();
  return v0;
}

void SiriEnvironmentStorage.subscript.getter(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;

  v9 = type metadata accessor for DecodingError();
  v69 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v68 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v70 = (char *)&v63 - v15;
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v63 - v18;
  v72 = a3;
  v20 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v17, v21);
  v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88);
  v25 = OUTLINED_FUNCTION_13_2();
  v26 = v24(v25);
  if (*(_QWORD *)(v26 + 16) && (v27 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v28 & 1) != 0))
  {
    v65 = a4;
    v66 = a1;
    v67 = v9;
    v29 = (uint64_t *)(*(_QWORD *)(v26 + 56) + 16 * v27);
    v31 = *v29;
    v30 = v29[1];
    outlined copy of Data._Representation(*v29, v30);
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_2_0();
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    v32 = v71;
    v33 = v72;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v32)
    {
      v65 = v31;
      v71 = (void *)v30;
      swift_release();
      v75 = v32;
      v34 = v32;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v35 = v67;
      if (swift_dynamicCast())
      {

        v36 = v69;
        v37 = (uint64_t)v70;
        (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v70, v19, v35);
        if (one-time initialization token for environment != -1)
          swift_once();
        v38 = OUTLINED_FUNCTION_13();
        __swift_project_value_buffer(v38, (uint64_t)static Logger.environment);
        v39 = (uint64_t)v68;
        v64 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
        v64(v68, v37, v35);
        OUTLINED_FUNCTION_7_2();
        v40 = Logger.logObject.getter();
        v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v40, v41))
        {
          v42 = OUTLINED_FUNCTION_4_1();
          v63 = OUTLINED_FUNCTION_4_1();
          v74 = v63;
          *(_DWORD *)v42 = 136315650;
          OUTLINED_FUNCTION_13_2();
          v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, a2, &v74);
          OUTLINED_FUNCTION_16_0();
          OUTLINED_FUNCTION_5_3();
          *(_WORD *)(v42 + 12) = 2080;
          v43 = _typeName(_:qualified:)();
          v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v74);
          OUTLINED_FUNCTION_16_0();
          OUTLINED_FUNCTION_21_0();
          *(_WORD *)(v42 + 22) = 2080;
          v45 = LocalizedError.errorDescription.getter();
          if (v46)
          {
            v47 = v46;
          }
          else
          {
            v45 = 0;
            v47 = 0xE000000000000000;
          }
          v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, &v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_2_0();
          OUTLINED_FUNCTION_26_0(v39);
          _os_log_impl(&dword_1C2F2D000, v40, v41, "Unable to decode Data for key \"%s\" to type %s with error %s", (uint8_t *)v42, 0x20u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_1_1();
        }
        OUTLINED_FUNCTION_6_1();
        OUTLINED_FUNCTION_26_0(v39);

        v59 = (unint64_t)v71;
        OUTLINED_FUNCTION_24_0();
        lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError, (uint64_t (*)(uint64_t))type metadata accessor for SiriEnvironmentStorage.StorageError, (uint64_t)&protocol conformance descriptor for SiriEnvironmentStorage.StorageError);
        OUTLINED_FUNCTION_1_4();
        v64(v60, v37, v35);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        outlined consume of Data._Representation(v65, v59);
        OUTLINED_FUNCTION_26_0(v37);

      }
      else
      {

        if (one-time initialization token for environment != -1)
          swift_once();
        v54 = OUTLINED_FUNCTION_13();
        __swift_project_value_buffer(v54, (uint64_t)static Logger.environment);
        OUTLINED_FUNCTION_7_2();
        v55 = Logger.logObject.getter();
        v56 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v55, v56))
        {
          v57 = (uint8_t *)OUTLINED_FUNCTION_4_1();
          v75 = (id)OUTLINED_FUNCTION_4_1();
          *(_DWORD *)v57 = 136315138;
          OUTLINED_FUNCTION_13_2();
          v58 = OUTLINED_FUNCTION_9_2();
          OUTLINED_FUNCTION_17_0(v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_5_3();
          _os_log_impl(&dword_1C2F2D000, v55, v56, "An unknown error occured while trying to retreive and decode the data for key \"%s\" from Environment Storage", v57, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_1_1();
        }

        OUTLINED_FUNCTION_6_1();
        v61 = v65;
        OUTLINED_FUNCTION_24_0();
        lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError, (uint64_t (*)(uint64_t))type metadata accessor for SiriEnvironmentStorage.StorageError, (uint64_t)&protocol conformance descriptor for SiriEnvironmentStorage.StorageError);
        OUTLINED_FUNCTION_1_4();
        *v62 = v32;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        outlined consume of Data._Representation(v61, (unint64_t)v71);
      }
    }
    else
    {
      outlined consume of Data._Representation(v31, v30);
      swift_release();
      v53 = v65;
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v65, v23, v33);
      __swift_storeEnumTagSinglePayload(v53, 0, 1, v33);
    }
  }
  else
  {
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_2_0();
    if (one-time initialization token for environment != -1)
      swift_once();
    v48 = OUTLINED_FUNCTION_13();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.environment);
    OUTLINED_FUNCTION_7_2();
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)OUTLINED_FUNCTION_4_1();
      v75 = (id)OUTLINED_FUNCTION_4_1();
      *(_DWORD *)v51 = 136315138;
      OUTLINED_FUNCTION_13_2();
      v52 = OUTLINED_FUNCTION_9_2();
      OUTLINED_FUNCTION_17_0(v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_5_3();
      _os_log_impl(&dword_1C2F2D000, v49, v50, "Data for key \"%s\" does not exist in Environment Storage", v51, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_1();
    }

    OUTLINED_FUNCTION_6_1();
    OUTLINED_FUNCTION_24_0();
    lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError, (uint64_t (*)(uint64_t))type metadata accessor for SiriEnvironmentStorage.StorageError, (uint64_t)&protocol conformance descriptor for SiriEnvironmentStorage.StorageError);
    OUTLINED_FUNCTION_1_4();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
}

uint64_t SiriEnvironmentStorage.updateStorage(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25[2];

  v1 = v0;
  if (one-time initialization token for environment != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.environment);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = OUTLINED_FUNCTION_4_1();
    v25[0] = OUTLINED_FUNCTION_4_1();
    *(_DWORD *)v5 = 136315394;
    OUTLINED_FUNCTION_15_0();
    v6 = Dictionary.Keys.description.getter();
    v8 = v7;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_14_1();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    OUTLINED_FUNCTION_19();
    v9 = Set.description.getter();
    v11 = v10;
    OUTLINED_FUNCTION_7_0();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_14_1();
    OUTLINED_FUNCTION_14_1();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F2D000, v3, v4, "Environment Storage updating. Adding keys %s and removing keys %s. ", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_1();
  }

  swift_bridgeObjectRelease_n();
  v12 = swift_bridgeObjectRelease_n();
  v13 = *(void (**)(void))(*(_QWORD *)v1 + 88);
  v14 = ((uint64_t (*)(uint64_t))v13)(v12);
  v15 = OUTLINED_FUNCTION_15_0();
  v16 = specialized Dictionary.merging(_:uniquingKeysWith:)(v15, v14);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 96))(v16);
  swift_retain();
  v17 = OUTLINED_FUNCTION_19();
  specialized Sequence.forEach(_:)(v17, v1);
  OUTLINED_FUNCTION_7_0();
  swift_retain_n();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)OUTLINED_FUNCTION_4_1();
    v25[0] = OUTLINED_FUNCTION_4_1();
    *(_DWORD *)v20 = 136315138;
    v13();
    v21 = Dictionary.Keys.description.getter();
    v23 = v22;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_22_0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F2D000, v18, v19, "Enviroment Storage finished updating. Current keys in storage are %s", v20, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_1();
  }

  return OUTLINED_FUNCTION_22_0();
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_BYTE *);
  void (*v19)(_BYTE *, _QWORD);
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  char v23;
  char v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  int64_t v37;
  _BYTE v38[32];
  uint64_t v39;

  v3 = a1;
  v35 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v36 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v34 = a2;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v37 = v8;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 104);
    swift_bridgeObjectRetain();
    v19 = (void (*)(_BYTE *, _QWORD))v18(v38);
    v21 = v20;
    swift_bridgeObjectRetain();
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    v24 = v23;
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v39 = *v21;
      v26 = v39;
      *v21 = 0x8000000000000000;
      v27 = v3;
      v28 = *(_QWORD *)(v26 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v28);
      v29 = v39;
      swift_bridgeObjectRelease();
      v30 = (uint64_t *)(*(_QWORD *)(v29 + 56) + 16 * v22);
      v31 = *v30;
      v32 = v30[1];
      _NativeDictionary._delete(at:)();
      *v21 = v29;
      swift_bridgeObjectRelease();
      v33 = v32;
      v3 = v27;
      a2 = v34;
      outlined consume of Data._Representation(v31, v33);
    }
    v19(v38, 0);
    result = swift_bridgeObjectRelease();
    v8 = v37;
    if (v6)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v36)
      goto LABEL_25;
    v12 = *(_QWORD *)(v35 + 8 * v11);
    v13 = v8 + 1;
    if (!v12)
    {
      v13 = v8 + 2;
      if (v8 + 2 >= v36)
        goto LABEL_25;
      v12 = *(_QWORD *)(v35 + 8 * v13);
      if (!v12)
      {
        v13 = v8 + 3;
        if (v8 + 3 >= v36)
          goto LABEL_25;
        v12 = *(_QWORD *)(v35 + 8 * v13);
        if (!v12)
        {
          v13 = v8 + 4;
          if (v8 + 4 >= v36)
            goto LABEL_25;
          v12 = *(_QWORD *)(v35 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v6 = (v12 - 1) & v12;
    v37 = v13;
  }
  v14 = v8 + 5;
  if (v8 + 5 >= v36)
  {
LABEL_25:
    swift_release();
    return swift_release();
  }
  v12 = *(_QWORD *)(v35 + 8 * v14);
  if (v12)
  {
    v13 = v8 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v36)
      goto LABEL_25;
    v12 = *(_QWORD *)(v35 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t SiriEnvironmentStorage.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SiriEnvironmentStorage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    OUTLINED_FUNCTION_15_0();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = String.UTF8View._foreignCount()();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x1E0DEE9D8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
LABEL_6:
  specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(void (*a1)(void))
{
  a1();
  return _typeName(_:qualified:)();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  OUTLINED_FUNCTION_2_4();
  OUTLINED_FUNCTION_11_2();
  v4 = OUTLINED_FUNCTION_8_2();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;

  OUTLINED_FUNCTION_2_4();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_11_2();
  swift_bridgeObjectRelease();
  v4 = OUTLINED_FUNCTION_8_2();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

uint64_t type metadata accessor for SiriEnvironmentStorage.StorageError()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SiriEnvironmentStorage.StorageError;
  if (!type metadata singleton initialization cache for SiriEnvironmentStorage.StorageError)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1C2F36FB0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for SiriEnvironmentStorage()
{
  return objc_opt_self();
}

uint64_t method lookup function for SiriEnvironmentStorage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriEnvironmentStorage.storage.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of SiriEnvironmentStorage.storage.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SiriEnvironmentStorage.storage.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SiriEnvironmentStorage.__allocating_init<A>(namespace:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SiriEnvironmentStorage.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SiriEnvironmentStorage.updateStorage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

char *initializeBufferWithCopyOfBuffer for SiriEnvironmentStorage.StorageError(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v9[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v10 = *a2;
      v11 = v10;
      *(_QWORD *)a1 = v10;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
      }
      v8 = type metadata accessor for DecodingError();
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for SiriEnvironmentStorage.StorageError(id *a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {

  }
  else if (!EnumCaseMultiPayload)
  {
    v3 = type metadata accessor for DecodingError();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
}

_QWORD *initializeWithCopy for SiriEnvironmentStorage.StorageError(_QWORD *a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  id v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v8 = *a2;
    v9 = v8;
    *a1 = v8;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = type metadata accessor for DecodingError();
    (*(void (**)(_QWORD *, void **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for SiriEnvironmentStorage.StorageError(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  id v9;

  if (a1 != a2)
  {
    outlined destroy of SiriEnvironmentStorage.StorageError((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v8 = *a2;
      v9 = v8;
      *a1 = v8;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = type metadata accessor for DecodingError();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of SiriEnvironmentStorage.StorageError(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SiriEnvironmentStorage.StorageError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for SiriEnvironmentStorage.StorageError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for DecodingError();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for SiriEnvironmentStorage.StorageError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of SiriEnvironmentStorage.StorageError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for DecodingError();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t destructiveInjectEnumTag for SiriEnvironmentStorage.StorageError()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for SiriEnvironmentStorage.StorageError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DecodingError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  OUTLINED_FUNCTION_2_4();
  Hasher._combine(_:)(*(_QWORD *)(a1 + 16));
  v2 = OUTLINED_FUNCTION_8_2();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x1C3BCE6AC](*(_QWORD *)(v1 + 40), a1, 4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  Swift::Int v6;

  OUTLINED_FUNCTION_2_4();
  OUTLINED_FUNCTION_19();
  String.hash(into:)();
  OUTLINED_FUNCTION_7_0();
  Hasher._combine(_:)(a3);
  v6 = OUTLINED_FUNCTION_8_2();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_27_0();
  type metadata accessor for CodingUserInfoKey();
  v1 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_27_0();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v1 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 *a1)
{
  Swift::Int v2;
  __int128 v4;
  _BYTE v5[40];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  OUTLINED_FUNCTION_2_4();
  v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)v5 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v5[16] = *(_OWORD *)(a1 + 40);
  *(_QWORD *)&v5[32] = *((_QWORD *)a1 + 7);
  Hasher._combine(_:)(*a1);
  v9 = *(_QWORD *)v5;
  v7 = *(_OWORD *)&v5[8];
  v8 = v4;
  v6 = *(_OWORD *)&v5[24];
  outlined retain of TransformationCapability((uint64_t)a1);
  outlined retain of TypeIdentifier((uint64_t)&v8);
  String.hash(into:)();
  Hasher._combine(_:)(*(Swift::UInt *)v5);
  outlined release of TypeIdentifier((uint64_t)&v8);
  outlined retain of TypeIdentifier((uint64_t)&v7);
  OUTLINED_FUNCTION_12_1();
  outlined release of TypeIdentifier((uint64_t)&v7);
  outlined retain of TypeIdentifier((uint64_t)&v6);
  OUTLINED_FUNCTION_12_1();
  outlined release of TypeIdentifier((uint64_t)&v6);
  outlined release of TransformationCapability((uint64_t)a1);
  v2 = OUTLINED_FUNCTION_8_2();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  char v15;
  _QWORD v17[2];

  v3 = v2;
  v17[1] = a1;
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v14(v9, *(_QWORD *)(v3 + 48) + v13 * v11, v5);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v15 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  char v15;
  _QWORD v17[2];

  v3 = v2;
  v17[1] = a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v6 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v14(v9, *(_QWORD *)(v3 + 48) + v13 * v11, v5);
      lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v15 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    v8 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(*(_QWORD *)(v7 + 8 * result) + 16) != v8)
    {
      v9 = ~v5;
      for (result = (result + 1) & v9;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v9)
      {
        if (*(_QWORD *)(*(_QWORD *)(v7 + 8 * result) + 16) == v8)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v11 = ~v6;
    v12 = *(_QWORD *)(v4 + 48);
    do
    {
      v13 = (_QWORD *)(v12 + 24 * v7);
      v14 = v13[2];
      v15 = *v13 == a1 && v13[1] == a2;
      if ((v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && v14 == a3)
        break;
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = ~v4;
    v7 = *(_QWORD *)(v2 + 48);
    v8 = *(unsigned __int8 *)a1;
    v24 = a1[2];
    v25 = a1[1];
    v22 = a1[4];
    v23 = a1[3];
    v20 = a1[6];
    v21 = a1[5];
    v19 = a1[7];
    do
    {
      v9 = (_QWORD *)(v7 + (v5 << 6));
      if (v8 == *(unsigned __int8 *)v9)
      {
        v10 = v9[3];
        v11 = v9[4];
        v12 = v9[5];
        v13 = v9[6];
        v14 = v9[7];
        v15 = v9[1] == v25 && v9[2] == v24;
        if ((v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) && v10 == v23)
        {
          v16 = v11 == v22 && v12 == v21;
          if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            v17 = v13 == v20 && v14 == v19;
            if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
          }
        }
      }
      v5 = (v5 + 1) & v6;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

uint64_t lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1C3BCEDD8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[3];
  uint64_t v35;

  specialized LazyMapSequence.makeIterator()(a1, a2, a3, v34);
  v30 = v34[0];
  v31 = v34[1];
  v32 = v34[2];
  v33 = v35;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v27);
  v7 = *((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    while (1)
    {
      v8 = v27;
      v9 = v28;
      v10 = v29;
      v11 = (_QWORD *)*a5;
      v13 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v7);
      v14 = v11[2];
      v15 = (v12 & 1) == 0;
      if (__OFADD__(v14, v15))
        break;
      v16 = v12;
      if (v11[3] >= v14 + v15)
      {
        if ((a4 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
        v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
        if ((v16 & 1) != (v18 & 1))
          goto LABEL_16;
        v13 = v17;
      }
      v19 = (_QWORD *)*a5;
      if ((v16 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v20 = v19[7] + 16 * v13;
        outlined consume of Data._Representation(*(_QWORD *)v20, *(_QWORD *)(v20 + 8));
        *(_QWORD *)v20 = v9;
        *(_QWORD *)(v20 + 8) = v10;
      }
      else
      {
        v19[(v13 >> 6) + 8] |= 1 << v13;
        v21 = (uint64_t *)(v19[6] + 16 * v13);
        *v21 = v8;
        v21[1] = v7;
        v22 = (_QWORD *)(v19[7] + 16 * v13);
        *v22 = v9;
        v22[1] = v10;
        v23 = v19[2];
        v24 = __OFADD__(v23, 1);
        v25 = v23 + 1;
        if (v24)
          goto LABEL_15;
        v19[2] = v25;
      }
      specialized LazyMapSequence.Iterator.next()(&v27);
      v7 = *((_QWORD *)&v27 + 1);
      a4 = 1;
      if (!*((_QWORD *)&v27 + 1))
        goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of [String : Data].Iterator._Variant();
    return swift_release();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_4()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_2_4()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_4_1()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_5_3()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_6_1()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_7_2()
{
  return swift_bridgeObjectRetain_n();
}

Swift::Int OUTLINED_FUNCTION_8_2()
{
  return Hasher._finalize()();
}

uint64_t OUTLINED_FUNCTION_9_2()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v0, (uint64_t *)(v2 - 72));
}

uint64_t OUTLINED_FUNCTION_11_2()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_12_1()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_13_2()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_14_1()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_15_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_17_0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t OUTLINED_FUNCTION_21_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_22_0()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_24_0()
{
  return type metadata accessor for SiriEnvironmentStorage.StorageError();
}

uint64_t OUTLINED_FUNCTION_25_0()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_26_0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_27_0()
{
  return 0;
}

uint64_t static Buildable.builder()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Builder(0, a1, a2, a4);
  return Builder.__allocating_init()();
}

uint64_t type metadata accessor for Builder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Builder);
}

uint64_t Builder.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  Builder.init()();
  return v0;
}

uint64_t static Buildable.withBuilder(_:)(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;

  type metadata accessor for Builder(0, a3, a4, a4);
  v7 = Builder.__allocating_init()();
  a1(&v7);
  if (v4)
    return swift_release();
  swift_retain();
  Builder.build()();
  return swift_release_n();
}

uint64_t Builder.build()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = *(_QWORD *)(v1 + 88);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 8);
  v5 = swift_retain();
  return v4(v5, v2, v3);
}

uint64_t Builder.init()()
{
  uint64_t v0;

  OUTLINED_FUNCTION_6_2();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  *(_QWORD *)(v0 + 16) = Dictionary.init(dictionaryLiteral:)();
  return v0;
}

void Builder.subscript.getter()
{
  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_5_4();
}

{
  OUTLINED_FUNCTION_1_5();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_5_4();
}

void sub_1C2F384EC()
{
  int v0;

  swift_release();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v0 = OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_10_1(v0);
  OUTLINED_FUNCTION_9_3();
}

void key path getter for Builder.subscript<A>(dynamicMember:) : <A><A1>Builder<A>AA1()
{
  Builder.subscript.getter();
}

{
  Builder.subscript.getter();
}

void Builder.subscript.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _BYTE v14[32];

  v4 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8);
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = v14 - v7 + 16;
  v9 = *(_QWORD *)(v4 - 8);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x1E0C80A78](v10, v11);
  OUTLINED_FUNCTION_2_5();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v4) == 1)
  {
    OUTLINED_FUNCTION_14_2((uint64_t)v8);
    OUTLINED_FUNCTION_0_4();
    OUTLINED_FUNCTION_6_2();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_19_0();
    OUTLINED_FUNCTION_21_1();
    OUTLINED_FUNCTION_14_2(a1);
    outlined destroy of Any?((uint64_t)v14);
    OUTLINED_FUNCTION_12_2();
  }
  else
  {
    OUTLINED_FUNCTION_16_1(v2, (uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
    v12 = OUTLINED_FUNCTION_28();
    OUTLINED_FUNCTION_16_1((uint64_t)v12, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
    OUTLINED_FUNCTION_0_4();
    OUTLINED_FUNCTION_6_2();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_25_1();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_21_1();
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_29(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  }
  OUTLINED_FUNCTION_3_3();
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _BYTE v15[32];

  v4 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = v15 - v7 + 16;
  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x1E0C80A78](v11, v12);
  OUTLINED_FUNCTION_2_5();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
  {
    OUTLINED_FUNCTION_14_2((uint64_t)v8);
    OUTLINED_FUNCTION_0_4();
    OUTLINED_FUNCTION_6_2();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_19_0();
    OUTLINED_FUNCTION_21_1();
    OUTLINED_FUNCTION_14_2(a1);
    outlined destroy of Any?((uint64_t)v15);
    OUTLINED_FUNCTION_12_2();
  }
  else
  {
    OUTLINED_FUNCTION_16_1(v2, (uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
    v13 = OUTLINED_FUNCTION_28();
    OUTLINED_FUNCTION_16_1((uint64_t)v13, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
    OUTLINED_FUNCTION_0_4();
    OUTLINED_FUNCTION_6_2();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_25_1();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_21_1();
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_29(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  }
  OUTLINED_FUNCTION_3_3();
}

void Builder.subscript.modify()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v1 = OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_27_1(v1);
  v2 = type metadata accessor for Optional();
  v0[2] = v2;
  v0[3] = *(_QWORD *)(v2 - 8);
  v0[4] = OUTLINED_FUNCTION_17_1();
  v3 = OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_23_0((uint64_t)v3);
  Builder.subscript.getter();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = OUTLINED_FUNCTION_13_3();
  v2 = OUTLINED_FUNCTION_27_1(v1);
  v4 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v3 + 8);
  v2[2] = v4;
  v2[3] = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_17_1();
  v5 = OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_23_0((uint64_t)v5);
  Builder.subscript.getter();
}

void sub_1C2F38720()
{
  OUTLINED_FUNCTION_9_0();
}

void Builder.subscript.modify(uint64_t **a1, char a2)
{
  Builder.subscript.modify(a1, a2, (void (*)(void *, uint64_t))Builder.subscript.setter);
}

{
  Builder.subscript.modify(a1, a2, (void (*)(void *, uint64_t))Builder.subscript.setter);
}

void sub_1C2F3877C()
{
  int v0;

  swift_release();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v0 = OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_10_1(v0);
  OUTLINED_FUNCTION_9_3();
}

uint64_t key path setter for Builder.subscript<A>(dynamicMember:) : <A><A1>Builder<A>AA1(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(char *, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v15 - v10;
  v12 = *a3;
  (*(void (**)(char *, uint64_t))(v13 + 16))((char *)&v15 - v10, a1);
  swift_retain();
  return a5(v11, v12);
}

void sub_1C2F38A44()
{
  OUTLINED_FUNCTION_9_0();
}

void Builder.subscript.modify(uint64_t **a1, char a2, void (*a3)(void *, uint64_t))
{
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = (void *)(*a1)[4];
  v6 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v7 = v4[2];
    v8 = v4[3];
    v9 = *v4;
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[4], v6, v7);
    swift_retain();
    a3(v5, v9);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    v10 = *v4;
    swift_retain();
    a3(v6, v10);
  }
  free(v6);
  free(v5);
  free(v4);
}

void Builder.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = a1;
  swift_retain();
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_9_0();
}

uint64_t closure #1 in Builder.subscript.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v7[3];
  uint64_t v8;

  v8 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a3 + 8);
  v4 = v8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(boxed_opaque_existential_0, a1, v4);
  swift_beginAccess();
  type metadata accessor for PartialKeyPath();
  type metadata accessor for Dictionary();
  swift_retain();
  Dictionary.subscript.setter();
  swift_endAccess();
  return swift_retain();
}

uint64_t Builder.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Builder.__deallocating_deinit()
{
  Builder.deinit();
  return swift_deallocClassInstance();
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1C2F38D0C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Builder.subscript.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Builder.subscript.getter(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t sub_1C2F38D44(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for Builder.subscript<A>(dynamicMember:) : <A><A1>Builder<A>AA1(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t))Builder.subscript.setter);
}

uint64_t sub_1C2F38D6C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for Builder.subscript<A>(dynamicMember:) : <A><A1>Builder<A>AA1(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t))Builder.subscript.setter);
}

uint64_t dispatch thunk of Buildable.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata completion function for Builder()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for Builder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Builder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1C3BCED6C](a1, v6, a5);
}

uint64_t OUTLINED_FUNCTION_0_4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = v0;
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_1_5()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_2_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_5_4()
{
  JUMPOUT(0x1C3BCDD88);
}

uint64_t OUTLINED_FUNCTION_6_2()
{
  return type metadata accessor for PartialKeyPath();
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  return type metadata accessor for PartialKeyPath();
}

uint64_t OUTLINED_FUNCTION_10_1(int a1)
{
  uint64_t v1;
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(v1, a1 ^ 1u, 1, v2);
}

__n128 OUTLINED_FUNCTION_11_3(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_12_2()
{
  return swift_release();
}

void *OUTLINED_FUNCTION_13_3()
{
  return malloc(0x30uLL);
}

uint64_t OUTLINED_FUNCTION_14_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_15_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_16_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void *OUTLINED_FUNCTION_17_1()
{
  size_t v0;

  return malloc(v0);
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  return type metadata accessor for Dictionary();
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  return Dictionary.removeValue(forKey:)();
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  return Dictionary.subscript.setter();
}

uint64_t OUTLINED_FUNCTION_21_1()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_23_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_24_1()
{
  return 24;
}

uint64_t OUTLINED_FUNCTION_25_1()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_26_1()
{
  return swift_retain();
}

_QWORD *OUTLINED_FUNCTION_27_1(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  *v3 = result;
  *result = v1;
  result[1] = v2;
  return result;
}

uint64_t *OUTLINED_FUNCTION_28()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
  return __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v1 - 112));
}

uint64_t OUTLINED_FUNCTION_29@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t CurrentDevice.setIdentifiedUserMeCard(_:)(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t (*v5)(void *);

  v5 = *(uint64_t (**)(void *))(*(_QWORD *)v1 + 216);
  v3 = a1;
  return v5(a1);
}

Swift::Void __swiftcall CurrentDevice.setDeviceIdiom(_:)(SiriUtilities::DeviceIdiom a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_0_5((_BYTE *)a1);
  OUTLINED_FUNCTION_2_6(*(uint64_t (**)(uint64_t))(v1 + 264));
  OUTLINED_FUNCTION_1_6();
}

Swift::Void __swiftcall CurrentDevice.setIsTextToSpeechEnabled(_:)(Swift::Bool a1)
{
  uint64_t v1;

  (*(void (**)(Swift::Bool))(*(_QWORD *)v1 + 312))(a1);
}

Swift::Void __swiftcall CurrentDevice.setIsLockedWithPasscode(_:)(Swift::Bool a1)
{
  uint64_t v1;

  (*(void (**)(Swift::Bool))(*(_QWORD *)v1 + 360))(a1);
}

Swift::Void __swiftcall CurrentDevice.setSiriVoiceGender(_:)(SiriUtilities::SiriVoiceGender a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_0_5((_BYTE *)a1);
  OUTLINED_FUNCTION_2_6(*(uint64_t (**)(uint64_t))(v1 + 408));
  OUTLINED_FUNCTION_1_6();
}

Swift::Void __swiftcall CurrentDevice.setPreferencesLanguageCode(_:)(Swift::String_optional a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  void (*v4)(uint64_t, void *);

  object = a1.value._object;
  countAndFlagsBits = a1.value._countAndFlagsBits;
  v4 = *(void (**)(uint64_t, void *))(*(_QWORD *)v1 + 456);
  swift_bridgeObjectRetain();
  v4(countAndFlagsBits, object);
}

uint64_t CurrentDevice.setSiriLocale(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for Locale();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 504))(v6);
}

Swift::Void __swiftcall CurrentDevice.setIsVoiceTriggerEnabled(_:)(Swift::Bool a1)
{
  uint64_t v1;

  (*(void (**)(Swift::Bool))(*(_QWORD *)v1 + 552))(a1);
}

Swift::Void __swiftcall CurrentDevice.setPersonalDomainsAuthenticationMode(_:)(SiriUtilities::PersonalDomainsAuthenticationMode_optional a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_0_5((_BYTE *)a1.value);
  OUTLINED_FUNCTION_2_6(*(uint64_t (**)(uint64_t))(v1 + 600));
  OUTLINED_FUNCTION_1_6();
}

Swift::Void __swiftcall CurrentDevice.setRestrictions(_:)(SiriUtilities::DeviceRestrictions a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v2 = *(_QWORD *)a1.rawValue;
  v3[0] = DeviceRestrictions.aceSet.getter();
  v3[1] = v2;
  (*(void (**)(_QWORD *))(*(_QWORD *)v1 + 648))(v3);
}

uint64_t CurrentDevice.setRestrictedCommands(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD v5[2];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v3 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v1 + 648);
  swift_bridgeObjectRetain();
  return v3(v5);
}

Swift::Void __swiftcall CurrentDevice.setDeviceClass(_:)(SiriUtilities::DeviceClass_optional a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_0_5((_BYTE *)a1.value);
  OUTLINED_FUNCTION_2_6(*(uint64_t (**)(uint64_t))(v1 + 744));
  OUTLINED_FUNCTION_1_6();
}

_BYTE *OUTLINED_FUNCTION_0_5(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 1) = *result;
  return result;
}

uint64_t OUTLINED_FUNCTION_2_6@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  uint64_t v1;

  return a1(v1 - 1);
}

uint64_t SiriEnvironment.networkAvailability.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  v1 = type metadata accessor for NetworkAvailability();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v0 + 248);
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, v2, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);
  return v5(v1, v1, v3);
}

uint64_t type metadata accessor for NetworkAvailability()
{
  return objc_opt_self();
}

uint64_t key path setter for SiriEnvironment.networkAvailability : SiriEnvironment()
{
  uint64_t v0;

  v0 = swift_retain();
  return SiriEnvironment.networkAvailability.setter(v0);
}

uint64_t SiriEnvironment.networkAvailability.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for NetworkAvailability();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 256);
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, v4, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);
  return v7(a1, v3, v3, v5);
}

void SiriEnvironment.networkAvailability.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  a1[1] = v1;
  v3 = type metadata accessor for NetworkAvailability();
  a1[2] = v3;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 248);
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, v5, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);
  a1[3] = v6;
  *a1 = v4(v3, v3, v6);
  OUTLINED_FUNCTION_9_0();
}

void SiriEnvironment.networkAvailability.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
  {
    v2 = OUTLINED_FUNCTION_25_1();
    OUTLINED_FUNCTION_75(v2);
    swift_release();
  }
  else
  {
    OUTLINED_FUNCTION_75(*a1);
    OUTLINED_FUNCTION_1_3();
  }
}

uint64_t NetworkAvailability.Status.init(reachabilityState:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = result == 1;
  if (result == 2)
    v2 = 2;
  *a2 = v2;
  return result;
}

uint64_t NetworkAvailability.Status.description.getter()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_74();
  v2 = 0x616C696176616E75;
  if (!v3)
    v2 = 0x6C62616C69617661;
  if (v0)
    return v2;
  else
    return v1;
}

BOOL static NetworkAvailability.Status.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void NetworkAvailability.Status.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
  OUTLINED_FUNCTION_31();
}

Swift::Int NetworkAvailability.Status.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t key path setter for NetworkAvailability.mock : NetworkAvailability(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 184);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t NetworkAvailability.mock.getter()
{
  OUTLINED_FUNCTION_2_7();
  return swift_retain();
}

void NetworkAvailability.mock.setter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v1 + 16) = a1;
  swift_release();
  OUTLINED_FUNCTION_33();
}

void NetworkAvailability.mock.modify()
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_31();
}

_QWORD *key path getter for NetworkAvailability.status : NetworkAvailability@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 200))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for NetworkAvailability.status : NetworkAvailability(char *a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  v2 = *a2;
  v4 = *a1;
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 208))(&v4);
}

uint64_t NetworkAvailability.status.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  specialized static MockablePublished.subscript.getter(v1, KeyPath, a1);
  OUTLINED_FUNCTION_5_5();
  return swift_release();
}

void sub_1C2F396DC()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_10_2();
  (*(void (**)(uint64_t *__return_ptr))(v1 + 200))(&v2);
  *v0 = v2;
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F3970C(char *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;

  v2 = *a2;
  v3 = *a1;
  (*(void (**)(char *))(*(_QWORD *)v2 + 208))(&v3);
  OUTLINED_FUNCTION_27_2();
}

uint64_t specialized static MockablePublished.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  void (*v6)(_QWORD *, _QWORD);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  _QWORD v13[5];

  v13[4] = a1;
  swift_retain();
  v6 = (void (*)(_QWORD *, _QWORD))swift_readAtKeyPath();
  v8 = *v7;
  swift_retain();
  v6(v13, 0);
  v9 = swift_release();
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(v9);
  if (v10
    && ((*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v10 + 144))(v13, a2),
        swift_release(),
        v11 = v13[0],
        LOBYTE(v13[0]) != 3))
  {
    result = swift_release();
    *a3 = v11;
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)v8 + 104))();
    return swift_release();
  }
  return result;
}

uint64_t specialized static MockablePublished.subscript.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(_QWORD *, _QWORD);
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v11[5];

  v11[4] = a1;
  swift_retain();
  v4 = (void (*)(_QWORD *, _QWORD))swift_readAtKeyPath();
  v6 = *v5;
  swift_retain();
  v4(v11, 0);
  v7 = swift_release();
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(v7);
  if (v8
    && ((*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v8 + 144))(v11, a2),
        swift_release(),
        v9 = v11[0],
        LOBYTE(v11[0]) != 2))
  {
    swift_release();
    return v9 & 1;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v6 + 104))(v11);
    swift_release();
    return LOBYTE(v11[0]);
  }
}

void specialized static MockablePublished.subscript.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_35();
  v0 = OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_48(v0);
  OUTLINED_FUNCTION_42();
  v1 = OUTLINED_FUNCTION_70();
  if (v1 && (OUTLINED_FUNCTION_16_2(v1, v2), v1 = OUTLINED_FUNCTION_0_6(), v3 != 1))
  {
    OUTLINED_FUNCTION_12_2();
  }
  else
  {
    OUTLINED_FUNCTION_24_2(v1);
    OUTLINED_FUNCTION_12_2();
  }
  OUTLINED_FUNCTION_76();
}

{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_25_2();
  v1 = OUTLINED_FUNCTION_26_2();
  OUTLINED_FUNCTION_39(v1);
  OUTLINED_FUNCTION_42();
  v2 = OUTLINED_FUNCTION_23_1();
  if (v2 && (OUTLINED_FUNCTION_9_4(v2, v3), OUTLINED_FUNCTION_0_6(), v4 != 10))
  {
    OUTLINED_FUNCTION_5_5();
    *v0 = v4;
  }
  else
  {
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_5_5();
  }
  OUTLINED_FUNCTION_11_4();
}

{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_25_2();
  v1 = OUTLINED_FUNCTION_26_2();
  OUTLINED_FUNCTION_39(v1);
  OUTLINED_FUNCTION_42();
  v2 = OUTLINED_FUNCTION_23_1();
  if (v2 && (OUTLINED_FUNCTION_9_4(v2, v3), OUTLINED_FUNCTION_0_6(), v4 != 3))
  {
    OUTLINED_FUNCTION_5_5();
    *v0 = v4;
  }
  else
  {
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_5_5();
  }
  OUTLINED_FUNCTION_11_4();
}

{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_25_2();
  v1 = OUTLINED_FUNCTION_26_2();
  OUTLINED_FUNCTION_39(v1);
  OUTLINED_FUNCTION_42();
  v2 = OUTLINED_FUNCTION_23_1();
  if (v2 && (OUTLINED_FUNCTION_9_4(v2, v3), OUTLINED_FUNCTION_0_6(), v4 != 4))
  {
    OUTLINED_FUNCTION_5_5();
    *v0 = v4;
  }
  else
  {
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_5_5();
  }
  OUTLINED_FUNCTION_11_4();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_25_2();
  v1 = OUTLINED_FUNCTION_26_2();
  OUTLINED_FUNCTION_39(v1);
  OUTLINED_FUNCTION_42();
  v2 = OUTLINED_FUNCTION_23_1();
  if (v2 && (OUTLINED_FUNCTION_9_4(v2, v3), OUTLINED_FUNCTION_0_6(), v4))
  {
    OUTLINED_FUNCTION_5_5();
    *v0 = v4;
    v0[1] = v5;
  }
  else
  {
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_5_5();
  }
  OUTLINED_FUNCTION_11_4();
}

{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_25_2();
  v1 = OUTLINED_FUNCTION_26_2();
  OUTLINED_FUNCTION_39(v1);
  OUTLINED_FUNCTION_42();
  v2 = OUTLINED_FUNCTION_23_1();
  if (v2 && (OUTLINED_FUNCTION_9_4(v2, v3), OUTLINED_FUNCTION_0_6(), v4 != 8))
  {
    OUTLINED_FUNCTION_5_5();
    *v0 = v4;
  }
  else
  {
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_5_5();
  }
  OUTLINED_FUNCTION_11_4();
}

uint64_t specialized static MockablePublished.subscript.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v4;

  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_35();
  v0 = OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_48(v0);
  OUTLINED_FUNCTION_42();
  v1 = OUTLINED_FUNCTION_70();
  if (v1 && (OUTLINED_FUNCTION_16_2(v1, v2), v1 = OUTLINED_FUNCTION_0_6(), v4 != 2))
  {
    OUTLINED_FUNCTION_12_2();
    return v4 & 1;
  }
  else
  {
    OUTLINED_FUNCTION_24_2(v1);
    OUTLINED_FUNCTION_12_2();
    return v4;
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_35();
  v0 = OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_48(v0);
  OUTLINED_FUNCTION_42();
  v1 = OUTLINED_FUNCTION_70();
  if (v1 && (OUTLINED_FUNCTION_16_2(v1, v2), v1 = OUTLINED_FUNCTION_0_6(), v6 != 1))
  {
    v3 = v5;
    OUTLINED_FUNCTION_12_2();
  }
  else
  {
    OUTLINED_FUNCTION_24_2(v1);
    OUTLINED_FUNCTION_12_2();
    return v5;
  }
  return v3;
}

void specialized static MockablePublished.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _QWORD);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];
  uint64_t v18;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_73();
  MEMORY[0x1E0C80A78](v6, v7);
  OUTLINED_FUNCTION_34();
  v10 = v9 - v8;
  v18 = a1;
  OUTLINED_FUNCTION_85();
  v11 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  v13 = *v12;
  OUTLINED_FUNCTION_17_2();
  v11(v17, 0);
  v14 = swift_release();
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(v14);
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 144))(a2);
    OUTLINED_FUNCTION_0_6();
    v16 = OUTLINED_FUNCTION_83();
    if (__swift_getEnumTagSinglePayload(v10, 1, v16) != 1)
    {
      OUTLINED_FUNCTION_4_3();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a3, v10, v16);
      goto LABEL_6;
    }
    v15 = outlined destroy of Locale?(v10);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 104))(v15);
  OUTLINED_FUNCTION_4_3();
LABEL_6:
  OUTLINED_FUNCTION_1_3();
}

void specialized static MockablePublished.subscript.getter(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1;
  OUTLINED_FUNCTION_35();
  v2 = OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_48(v2);

  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x60))();
  if (v3 && (OUTLINED_FUNCTION_16_2(v3, v4), v3 = OUTLINED_FUNCTION_0_6(), v5 != 1))
  {
    OUTLINED_FUNCTION_12_2();
  }
  else
  {
    OUTLINED_FUNCTION_24_2(v3);
    OUTLINED_FUNCTION_12_2();
  }
  OUTLINED_FUNCTION_76();
}

uint64_t NetworkAvailability.status.setter(char *a1)
{
  uint64_t v1;
  char v2;

  v2 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_15_2();
  return specialized static MockablePublished.subscript.setter(v2, v1);
}

void specialized static MockablePublished.subscript.setter(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_43(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, v2, (void (*)(uint64_t))type metadata accessor for CurrentDevice);
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_60();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_4_3();
  v3 = OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_13_4(v3, v4, v5, v6, v7, v8, v9, v10, v19, v21);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_12_2();
  v20 = (uint64_t)a1;
  v11 = a1;
  OUTLINED_FUNCTION_80((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, v20);

  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_12_3();
}

void specialized static MockablePublished.subscript.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_43(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, v0, (void (*)(uint64_t))type metadata accessor for CurrentDevice);
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_60();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_4_3();
  v1 = OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_13_4(v1, v2, v3, v4, v5, v6, v7, v8, v17, v19);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_67();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_4_3();
  v9 = OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_32(v9, v10, v11, v12, v13, v14, v15, v16, v18, v20);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_12_3();
}

void specialized static MockablePublished.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_43(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, v5, (void (*)(uint64_t))type metadata accessor for CurrentDevice);
  OUTLINED_FUNCTION_56();
  ObservableObjectPublisher.send()();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_20_1();
  OUTLINED_FUNCTION_4_3();
  v6 = OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_62(v6, v7, v8, v9, v10, v11, v12, v13, a3, v22, v23, v24);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_20_1();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_12_2();
  v14 = OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_80(v14, v15, v16, v17, v18, v19, v20, v21, a1);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_51();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_43(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, v5, (void (*)(uint64_t))type metadata accessor for CurrentDevice);
  OUTLINED_FUNCTION_56();
  ObservableObjectPublisher.send()();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_20_1();
  OUTLINED_FUNCTION_4_3();
  v6 = OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_62(v6, v7, v8, v9, v10, v11, v12, v13, a3, v22, v23, v24);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_20_1();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_12_2();
  v14 = OUTLINED_FUNCTION_81();
  OUTLINED_FUNCTION_80(v14, v15, v16, v17, v18, v19, v20, v21, a1);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_51();
}

void specialized static MockablePublished.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = OUTLINED_FUNCTION_83();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  OUTLINED_FUNCTION_34();
  v9 = v8 - v7;
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_43(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, v10, (void (*)(uint64_t))type metadata accessor for CurrentDevice);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  OUTLINED_FUNCTION_0_6();
  v15 = a2;
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_72();
  OUTLINED_FUNCTION_86();
  v11 = OUTLINED_FUNCTION_4_3();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 152))(&v13, v11);
  OUTLINED_FUNCTION_0_6();
  CurrentValueSubject.send(_:)();
  OUTLINED_FUNCTION_0_6();
  v15 = a2;
  OUTLINED_FUNCTION_85();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_72();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_4_3();
  v12 = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a1, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 112))(v9);
  OUTLINED_FUNCTION_86();
  swift_release();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_0_6();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  OUTLINED_FUNCTION_3_3();
}

uint64_t specialized static MockablePublished.subscript.setter(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v10 = a1;
  type metadata accessor for NetworkAvailability();
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, v4, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  v9 = a2;
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  v5 = swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v8 + 152))(&v7, v5);
  swift_release();
  CurrentValueSubject.send(_:)();
  swift_release();
  v9 = a2;
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  LOBYTE(v7) = a1;
  (*(void (**)(uint64_t *))(*(_QWORD *)v8 + 112))(&v7);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void specialized static MockablePublished.subscript.setter(void *a1, void *a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  type metadata accessor for CurrentProcess();
  OUTLINED_FUNCTION_43(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess, v4, (void (*)(uint64_t))type metadata accessor for CurrentProcess);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  OUTLINED_FUNCTION_60();
  OUTLINED_FUNCTION_0_6();
  v5 = a2;
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_3_4();

  v6 = OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_13_4(v6, v7, v8, v9, v10, v11, v12, v13, v23, v25);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_99();
  OUTLINED_FUNCTION_0_6();
  v14 = v5;
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_3_4();

  OUTLINED_FUNCTION_12_2();
  v24 = (uint64_t)a1;
  v15 = a1;
  OUTLINED_FUNCTION_80((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, v24);

  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_12_3();
}

void (*NetworkAvailability.status.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  KeyPath = swift_getKeyPath();
  v3[4] = KeyPath;
  v3[5] = swift_getKeyPath();
  OUTLINED_FUNCTION_25_0();
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 176);
  v6 = OUTLINED_FUNCTION_38();
  v7 = v5(v6);
  if (v7
    && ((*(void (**)(uint64_t))(*(_QWORD *)v7 + 144))(KeyPath),
        OUTLINED_FUNCTION_0_6(),
        v8 = *((unsigned __int8 *)v3 + 49),
        v8 != 3))
  {
    OUTLINED_FUNCTION_5_5();
    *((_BYTE *)v3 + 48) = v8;
  }
  else
  {
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_5_5();
  }
  return NetworkAvailability.status.modify;
}

void NetworkAvailability.status.modify(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  char v3;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v3 = *(_BYTE *)(*(_QWORD *)a1 + 48);
  OUTLINED_FUNCTION_17_2();
  specialized static MockablePublished.subscript.setter(v3, v2);
  free(v1);
}

uint64_t key path setter for NetworkAvailability.$status : NetworkAvailability(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 232);
  swift_retain();
  return v3(&v5);
}

void NetworkAvailability.$status.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void NetworkAvailability.$status.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2_7();
  v0 = OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_64(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_33();
}

void NetworkAvailability.$status.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  NetworkAvailability.$status.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t NetworkAvailability.$status.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (uint64_t (*)(uint64_t *))NetworkAvailability.$status.setter);
}

uint64_t key path getter for NetworkAvailability.isAvailable : NetworkAvailability@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for NetworkAvailability.isAvailable : NetworkAvailability(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 256))(*a1);
}

uint64_t NetworkAvailability.isAvailable.getter()
{
  return NetworkAvailability.isAvailable.getter();
}

{
  uint64_t v0;
  uint64_t KeyPath;
  char v2;

  KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  v2 = specialized static MockablePublished.subscript.getter(v0, KeyPath);
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_12_2();
  return v2 & 1;
}

uint64_t NetworkAvailability.isAvailable.setter(char a1)
{
  return NetworkAvailability.isAvailable.setter(a1);
}

{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_15_2();
  return OUTLINED_FUNCTION_53(a1, v1);
}

void NetworkAvailability.isAvailable.modify(_QWORD *a1)
{
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_101(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_94(KeyPath);
  v2 = swift_getKeyPath();
  v3 = OUTLINED_FUNCTION_28_0(v2);
  OUTLINED_FUNCTION_95(v3);
  OUTLINED_FUNCTION_9_0();
}

uint64_t key path setter for NetworkAvailability.$isAvailable : NetworkAvailability(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 280);
  swift_retain();
  return v3(&v5);
}

void NetworkAvailability.$isAvailable.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void NetworkAvailability.$isAvailable.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2_7();
  v0 = OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_64(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_33();
}

void NetworkAvailability.$isAvailable.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  NetworkAvailability.$isAvailable.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t NetworkAvailability.$isAvailable.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (uint64_t (*)(uint64_t *))NetworkAvailability.$isAvailable.setter);
}

uint64_t key path getter for NetworkAvailability.isExpensive : NetworkAvailability@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 296))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for NetworkAvailability.isExpensive : NetworkAvailability(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 304))(*a1);
}

uint64_t NetworkAvailability.isExpensive.getter()
{
  return NetworkAvailability.isAvailable.getter();
}

uint64_t NetworkAvailability.isExpensive.setter(char a1)
{
  return NetworkAvailability.isAvailable.setter(a1);
}

void NetworkAvailability.isExpensive.modify(_QWORD *a1)
{
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_101(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_94(KeyPath);
  v2 = swift_getKeyPath();
  v3 = OUTLINED_FUNCTION_28_0(v2);
  OUTLINED_FUNCTION_95(v3);
  OUTLINED_FUNCTION_9_0();
}

uint64_t NetworkAvailability.isAvailable.modify(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)a1;
  v2 = *(_BYTE *)(a1 + 24);
  OUTLINED_FUNCTION_38();
  return OUTLINED_FUNCTION_53(v2, v1);
}

uint64_t key path setter for NetworkAvailability.$isExpensive : NetworkAvailability(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 328);
  swift_retain();
  return v3(&v5);
}

void NetworkAvailability.$isExpensive.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void NetworkAvailability.$isExpensive.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2_7();
  v0 = OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_64(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_33();
}

void NetworkAvailability.$isExpensive.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  NetworkAvailability.$isExpensive.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t NetworkAvailability.$isExpensive.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (uint64_t (*)(uint64_t *))NetworkAvailability.$isExpensive.setter);
}

uint64_t key path getter for NetworkAvailability.isConstrained : NetworkAvailability@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 344))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for NetworkAvailability.isConstrained : NetworkAvailability(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 352))(*a1);
}

uint64_t NetworkAvailability.isConstrained.getter()
{
  return NetworkAvailability.isAvailable.getter();
}

uint64_t NetworkAvailability.isConstrained.setter(char a1)
{
  return NetworkAvailability.isAvailable.setter(a1);
}

void NetworkAvailability.isConstrained.modify(_QWORD *a1)
{
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_101(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_94(KeyPath);
  v2 = swift_getKeyPath();
  v3 = OUTLINED_FUNCTION_28_0(v2);
  OUTLINED_FUNCTION_95(v3);
  OUTLINED_FUNCTION_9_0();
}

uint64_t key path setter for NetworkAvailability.$isConstrained : NetworkAvailability(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 376);
  swift_retain();
  return v3(&v5);
}

void NetworkAvailability.$isConstrained.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void NetworkAvailability.$isConstrained.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2_7();
  v0 = OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_64(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_33();
}

void NetworkAvailability.$isConstrained.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  NetworkAvailability.$isConstrained.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t NetworkAvailability.$isConstrained.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (uint64_t (*)(uint64_t *))NetworkAvailability.$isConstrained.setter);
}

uint64_t key path getter for NetworkAvailability.isInAirplaneMode : NetworkAvailability@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 392))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for NetworkAvailability.isInAirplaneMode : NetworkAvailability(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 400))(*a1);
}

uint64_t NetworkAvailability.isInAirplaneMode.getter()
{
  return NetworkAvailability.isAvailable.getter();
}

uint64_t NetworkAvailability.isInAirplaneMode.setter(char a1)
{
  return NetworkAvailability.isAvailable.setter(a1);
}

void NetworkAvailability.isInAirplaneMode.modify(_QWORD *a1)
{
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_101(a1);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_94(KeyPath);
  v2 = swift_getKeyPath();
  v3 = OUTLINED_FUNCTION_28_0(v2);
  OUTLINED_FUNCTION_95(v3);
  OUTLINED_FUNCTION_9_0();
}

uint64_t key path setter for NetworkAvailability.$isInAirplaneMode : NetworkAvailability(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 424);
  swift_retain();
  return v3(&v5);
}

void NetworkAvailability.$isInAirplaneMode.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void NetworkAvailability.$isInAirplaneMode.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2_7();
  v0 = OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_64(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_33();
}

void NetworkAvailability.$isInAirplaneMode.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  NetworkAvailability.$isInAirplaneMode.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t NetworkAvailability.$isInAirplaneMode.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (uint64_t (*)(uint64_t *))NetworkAvailability.$isInAirplaneMode.setter);
}

uint64_t NetworkAvailability.$status.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v5;

  v5 = *a1;
  if ((a2 & 1) == 0)
    return a3(&v5);
  OUTLINED_FUNCTION_38();
  a3(&v5);
  return swift_release();
}

id NetworkAvailability.networkReachability.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 64);
}

void NetworkAvailability.__allocating_init(storage:)()
{
  OUTLINED_FUNCTION_37();
  NetworkAvailability.init(storage:)();
  OUTLINED_FUNCTION_31();
}

id NetworkAvailability.init(storage:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id result;
  void *v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  void (*v23)(uint64_t);
  uint64_t v24;
  id v25;
  uint64_t v26;

  v1 = (uint64_t)v0;
  v26 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v2 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v3);
  OUTLINED_FUNCTION_34();
  v6 = v5 - v4;
  type metadata accessor for OS_dispatch_queue.Attributes();
  v7 = (void (*)(uint64_t))MEMORY[0x1E0DEF810];
  OUTLINED_FUNCTION_73();
  MEMORY[0x1E0C80A78](v8, v9);
  OUTLINED_FUNCTION_34();
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_73();
  MEMORY[0x1E0C80A78](v10, v11);
  OUTLINED_FUNCTION_34();
  v0[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<NetworkAvailability.Status>);
  OUTLINED_FUNCTION_36();
  specialized MockablePublished.init(wrappedValue:)(0, &demangling cache variable for type metadata for CurrentValueSubject<NetworkAvailability.Status, Never>);
  v0[3] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<Bool>);
  OUTLINED_FUNCTION_36();
  specialized MockablePublished.init(wrappedValue:)(1);
  v0[4] = v13;
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_66();
  v0[5] = v14;
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_66();
  v0[6] = v15;
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_66();
  v0[7] = v16;
  v0[8] = objc_msgSend(objc_allocWithZone((Class)SUNetworkReachability), sel_init);
  v0[13] = dispatch_semaphore_create(1);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v6, *MEMORY[0x1E0DEF8D0], v26);
  v17 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for NWPathMonitor();
  OUTLINED_FUNCTION_18_1();
  v0[9] = NWPathMonitor.init()();
  type metadata accessor for NetworkAvailability.PathUpdateHandler(0);
  v18 = OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_69();
  *(_QWORD *)(v1 + 80) = v18;
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CFA9B8]), sel_initWithQueue_, v17);
  if (result)
  {
    v20 = result;
    *(_QWORD *)(v1 + 88) = result;
    type metadata accessor for NetworkAvailability.AirplaneModeUpdateHandler(0);
    v21 = OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_69();
    *(_QWORD *)(v1 + 96) = v21;
    objc_msgSend(v20, sel_refresh);
    LOBYTE(v20) = objc_msgSend(v20, sel_airplaneMode);
    swift_getKeyPath();
    swift_getKeyPath();
    OUTLINED_FUNCTION_25_1();
    specialized static MockablePublished.subscript.setter((char)v20, v1);
    v22 = *(void (**)(uint64_t))(**(_QWORD **)(v1 + 80) + 104);
    OUTLINED_FUNCTION_25_1();
    OUTLINED_FUNCTION_15_2();
    v22(v1);
    OUTLINED_FUNCTION_0_6();
    OUTLINED_FUNCTION_15_2();
    OUTLINED_FUNCTION_38();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWPath) -> ())?((uint64_t)partial apply for implicit closure #2 in implicit closure #1 in NetworkAvailability.init(storage:));
    NWPathMonitor.pathUpdateHandler.setter();
    OUTLINED_FUNCTION_0_6();
    OUTLINED_FUNCTION_5_5();
    OUTLINED_FUNCTION_15_2();
    NWPathMonitor.start(queue:)();
    OUTLINED_FUNCTION_0_6();
    v23 = *(void (**)(uint64_t))(**(_QWORD **)(v1 + 96) + 104);
    OUTLINED_FUNCTION_25_1();
    OUTLINED_FUNCTION_15_2();
    v23(v1);
    OUTLINED_FUNCTION_0_6();
    v24 = *(_QWORD *)(v1 + 96);
    v25 = *(id *)(v1 + 88);
    OUTLINED_FUNCTION_15_2();
    objc_msgSend(v25, sel_setDelegate_, v24);

    OUTLINED_FUNCTION_0_6();
    swift_release();
    return (id)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void NetworkAvailability.PathUpdateHandler.__allocating_init()()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_69();
  OUTLINED_FUNCTION_31();
}

uint64_t implicit closure #2 in implicit closure #1 in NetworkAvailability.init(storage:)()
{
  return specialized SafeCallback.reify(_:)(partial apply for closure #1 in NetworkAvailability.PathUpdateHandler.handlePathUpdate(_:));
}

void NetworkAvailability.deinit()
{
  uint64_t v0;
  void *v1;
  void *v2;

  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_97();

  v2 = *(void **)(v0 + 72);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWPath) -> ())?(0);
  NWPathMonitor.pathUpdateHandler.setter();
  NWPathMonitor.cancel()();
  objc_msgSend(*(id *)(v0 + 88), sel_setDelegate_, 0);
  OUTLINED_FUNCTION_92();
  OUTLINED_FUNCTION_98();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  swift_release();
  OUTLINED_FUNCTION_31();
}

uint64_t NetworkAvailability.__deallocating_deinit()
{
  NetworkAvailability.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized SafeCallback.reify(_:)(void (*a1)(void))
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 96))();
  if (result)
  {
    a1();
    return swift_release();
  }
  return result;
}

void NetworkAvailability.handlePathUpdate(_:)(uint64_t a1)
{
  id *v1;
  id *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  _QWORD v57[2];
  char *v58;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;

  v2 = v1;
  v4 = type metadata accessor for NWPath.Status();
  v63 = *(_QWORD *)(v4 - 8);
  v64 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  OUTLINED_FUNCTION_34();
  v61 = v7 - v6;
  v8 = type metadata accessor for NWPath();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v58 = (char *)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v65 = (char *)v57 - v15;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)v57 - v17;
  v19 = v1[13];
  OUTLINED_FUNCTION_97();

  if (one-time initialization token for logger != -1)
    swift_once();
  v20 = OUTLINED_FUNCTION_13();
  v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.logger);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v62 = a1;
  v59 = v22;
  v22(v18, a1, v8);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = OUTLINED_FUNCTION_4_1();
    v57[1] = v21;
    v26 = (uint8_t *)v25;
    v27 = OUTLINED_FUNCTION_4_1();
    v60 = v8;
    v67 = v27;
    *(_DWORD *)v26 = 136315138;
    v28 = NWPath.networkAvailabilityDebugInformation.getter();
    v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v60);
    _os_log_impl(&dword_1C2F2D000, v23, v24, "Received NWPath update: %s", v26, 0xCu);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_1_1();
  }
  OUTLINED_FUNCTION_100((uint64_t)v18);

  v30 = v62;
  NWPath.isExpensive.getter();
  OUTLINED_FUNCTION_63(*((uint64_t (**)(void))*v1 + 38));
  NWPath.isConstrained.getter();
  OUTLINED_FUNCTION_63(*((uint64_t (**)(void))*v1 + 44));
  v31 = v61;
  NWPath.status.getter();
  v32 = v31;
  v34 = v63;
  v33 = v64;
  v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 88))(v31, v64);
  v36 = v35 == *MEMORY[0x1E0CCEAB0] || v35 == *MEMORY[0x1E0CCEAA0];
  v37 = (uint64_t)v65;
  if (v36)
  {
    v38 = NWPath.supportsDNS.getter();
    v39 = v59;
    v59((char *)v37, v30, v8);
    if ((v38 & 1) != 0)
    {
      v40 = NWPath.supportsIPv4.getter();
      v41 = (uint64_t)v58;
      v39(v58, v37, v8);
      if ((v40 & 1) != 0)
        v42 = 1;
      else
        v42 = NWPath.supportsIPv6.getter();
      OUTLINED_FUNCTION_100(v41);
    }
    else
    {
      v42 = 0;
    }
    OUTLINED_FUNCTION_100(v37);
    if ((v42 & 1) != 0)
      v43 = 2;
    else
      v43 = 1;
    OUTLINED_FUNCTION_63(*((uint64_t (**)(void))*v2 + 32));
    LOBYTE(v67) = v43;
    OUTLINED_FUNCTION_77();
  }
  else
  {
    OUTLINED_FUNCTION_63(*((uint64_t (**)(void))*v2 + 32));
    LOBYTE(v67) = 1;
    OUTLINED_FUNCTION_77();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  }
  swift_retain_n();
  v44 = Logger.logObject.getter();
  v45 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = OUTLINED_FUNCTION_4_1();
    v67 = OUTLINED_FUNCTION_4_1();
    *(_DWORD *)v46 = 136315394;
    (*((void (**)(uint64_t *__return_ptr))*v2 + 25))(&v66);
    OUTLINED_FUNCTION_74();
    v51 = v50 & 0xFFFF0000FFFFLL | 0xEC000000656C0000;
    v52 = 0x616C696176616E75;
    if (!v36)
    {
      v52 = 0x6C62616C69617661;
      v51 = 0xE900000000000065;
    }
    if (v47)
      v53 = v52;
    else
      v53 = v49;
    if (v47)
      v54 = v51;
    else
      v54 = v48;
    v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    v55 = swift_bridgeObjectRelease();
    *(_WORD *)(v46 + 12) = 1024;
    v56 = (*((uint64_t (**)(uint64_t))*v2 + 31))(v55);
    OUTLINED_FUNCTION_12_2();
    LODWORD(v66) = v56 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_12_2();
    _os_log_impl(&dword_1C2F2D000, v44, v45, "NetworkAvailability.status set to %s. NetworkAvailability.isAvailable set to %{BOOL}d", (uint8_t *)v46, 0x12u);
    OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_1_1();
  }

  swift_release_n();
  NetworkAvailability.recheckAirplaneModeUnderLock()();
  OUTLINED_FUNCTION_92();
  OUTLINED_FUNCTION_98();

  OUTLINED_FUNCTION_3_3();
}

uint64_t NWPath.networkAvailabilityDebugInformation.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C2F80D10;
  *(_QWORD *)(v0 + 32) = NWPath.debugDescription.getter();
  *(_QWORD *)(v0 + 40) = v1;
  strcpy((char *)v28, "isExpensive: ");
  HIWORD(v28[1]) = -4864;
  v2 = NWPath.isExpensive.getter();
  v3 = (v2 & 1) == 0;
  if ((v2 & 1) != 0)
    v4 = 1702195828;
  else
    v4 = 0x65736C6166;
  if (v3)
    v5 = 0xE500000000000000;
  else
    v5 = 0xE400000000000000;
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7 = v28[1];
  *(_QWORD *)(v0 + 48) = v28[0];
  *(_QWORD *)(v0 + 56) = v7;
  strcpy((char *)v28, "supportsDNS: ");
  HIWORD(v28[1]) = -4864;
  v8 = NWPath.supportsDNS.getter();
  v9 = (v8 & 1) == 0;
  if ((v8 & 1) != 0)
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if (v9)
    v11 = 0xE500000000000000;
  else
    v11 = 0xE400000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13 = v28[1];
  *(_QWORD *)(v0 + 64) = v28[0];
  *(_QWORD *)(v0 + 72) = v13;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v28, "supportsIPv4: ");
  HIBYTE(v28[1]) = -18;
  v14 = NWPath.supportsIPv4.getter();
  v15 = (v14 & 1) == 0;
  if ((v14 & 1) != 0)
    v16 = 1702195828;
  else
    v16 = 0x65736C6166;
  if (v15)
    v17 = 0xE500000000000000;
  else
    v17 = 0xE400000000000000;
  v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v19 = v28[1];
  *(_QWORD *)(v0 + 80) = v28[0];
  *(_QWORD *)(v0 + 88) = v19;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v28, "supportsIPv6: ");
  HIBYTE(v28[1]) = -18;
  v20 = NWPath.supportsIPv6.getter();
  v21 = (v20 & 1) == 0;
  if ((v20 & 1) != 0)
    v22 = 1702195828;
  else
    v22 = 0x65736C6166;
  if (v21)
    v23 = 0xE500000000000000;
  else
    v23 = 0xE400000000000000;
  v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25 = v28[1];
  *(_QWORD *)(v0 + 96) = v28[0];
  *(_QWORD *)(v0 + 104) = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  v26 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t NetworkAvailability.AirplaneModeUpdateHandler.airplaneModeChanged()()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    NetworkAvailability.airplaneModeChanged()();
    return swift_release();
  }
  return result;
}

uint64_t @objc NetworkAvailability.AirplaneModeUpdateHandler.airplaneModeChanged()()
{
  swift_retain();
  NetworkAvailability.AirplaneModeUpdateHandler.airplaneModeChanged()();
  return swift_release();
}

uint64_t NetworkAvailability.PathUpdateHandler.__deallocating_deinit()
{
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

void NetworkAvailability.airplaneModeChanged()()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  id v5;

  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_97();

  if (one-time initialization token for logger != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.logger);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)OUTLINED_FUNCTION_4_1();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1C2F2D000, v2, v3, "Received airplaneModeChanged callback", v4, 2u);
    OUTLINED_FUNCTION_1_1();
  }

  NetworkAvailability.recheckAirplaneModeUnderLock()();
  v5 = OUTLINED_FUNCTION_92();
  OUTLINED_FUNCTION_98();

}

uint64_t NetworkAvailability.recheckAirplaneModeUnderLock()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = *(void **)(v0 + 88);
  objc_msgSend(v2, sel_refresh);
  v3 = objc_msgSend(v2, sel_airplaneMode);
  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 392))();
  if (v3 != (result & 1))
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v5 = OUTLINED_FUNCTION_13();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.logger);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)OUTLINED_FUNCTION_4_1();
      v9 = OUTLINED_FUNCTION_4_1();
      *(_DWORD *)v8 = 136315138;
      v12 = v9;
      if (v3)
        v10 = 20047;
      else
        v10 = 4605519;
      if (v3)
        v11 = 0xE200000000000000;
      else
        v11 = 0xE300000000000000;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F2D000, v6, v7, "Airplane mode changed: now %s", v8, 0xCu);
      OUTLINED_FUNCTION_59();
      OUTLINED_FUNCTION_1_1();
    }

    return OUTLINED_FUNCTION_63(*(uint64_t (**)(void))(*(_QWORD *)v1 + 400));
  }
  return result;
}

void sub_1C2F3C080()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_10_2();
  v1 = (*(uint64_t (**)(void))(v0 + 248))();
  OUTLINED_FUNCTION_96(v1);
  OUTLINED_FUNCTION_31();
}

void sub_1C2F3C0A4(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_49(a1);
  (*(void (**)(uint64_t))(v2 + 256))(v1);
  OUTLINED_FUNCTION_31();
}

void sub_1C2F3C0C4()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_10_2();
  v1 = (*(uint64_t (**)(void))(v0 + 296))();
  OUTLINED_FUNCTION_96(v1);
  OUTLINED_FUNCTION_31();
}

void sub_1C2F3C0E8(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_49(a1);
  (*(void (**)(uint64_t))(v2 + 304))(v1);
  OUTLINED_FUNCTION_31();
}

void sub_1C2F3C108()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_10_2();
  v1 = (*(uint64_t (**)(void))(v0 + 344))();
  OUTLINED_FUNCTION_96(v1);
  OUTLINED_FUNCTION_31();
}

void sub_1C2F3C12C(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_49(a1);
  (*(void (**)(uint64_t))(v2 + 352))(v1);
  OUTLINED_FUNCTION_31();
}

void sub_1C2F3C14C()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_10_2();
  v1 = (*(uint64_t (**)(void))(v0 + 392))();
  OUTLINED_FUNCTION_96(v1);
  OUTLINED_FUNCTION_31();
}

void sub_1C2F3C170(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_49(a1);
  (*(void (**)(uint64_t))(v2 + 400))(v1);
  OUTLINED_FUNCTION_31();
}

void (*protocol witness for MockableEnvironmentProvider.mock.modify in conformance NetworkAvailability(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 192))();
  return protocol witness for MockableEnvironmentProvider.mock.modify in conformance NetworkAvailability;
}

void protocol witness for MockableEnvironmentProvider.mock.modify in conformance NetworkAvailability(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t protocol witness for SiriEnvironmentProvider.init(storage:) in conformance NetworkAvailability()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 440))();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance NetworkAvailability@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for NetworkAvailability();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void specialized MockablePublished.init(wrappedValue:)(void *a1)
{
  specialized MockablePublished.init(wrappedValue:)(a1, &demangling cache variable for type metadata for CurrentValueSubject<SAPerson?, Never>);
}

{
  specialized MockablePublished.init(wrappedValue:)(a1, &demangling cache variable for type metadata for CurrentValueSubject<IdleTracker?, Never>);
}

void specialized MockablePublished.init(wrappedValue:)(char a1)
{
  specialized MockablePublished.init(wrappedValue:)(a1, &demangling cache variable for type metadata for CurrentValueSubject<DeviceIdiom, Never>);
}

{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Bool, Never>);
  OUTLINED_FUNCTION_18_1();
  v2 = OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_91(v2);
  OUTLINED_FUNCTION_27_2();
}

{
  specialized MockablePublished.init(wrappedValue:)(a1, &demangling cache variable for type metadata for CurrentValueSubject<SiriVoiceGender, Never>);
}

{
  specialized MockablePublished.init(wrappedValue:)(a1, &demangling cache variable for type metadata for CurrentValueSubject<PersonalDomainsAuthenticationMode?, Never>);
}

{
  specialized MockablePublished.init(wrappedValue:)(a1, &demangling cache variable for type metadata for CurrentValueSubject<DeviceClass?, Never>);
}

void specialized MockablePublished.init(wrappedValue:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<String?, Never>);
  OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_93();
  v2[4] = OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_7_1();
}

{
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Restrictions, Never>);
  OUTLINED_FUNCTION_18_1();
  OUTLINED_FUNCTION_93();
  v2[4] = OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_7_1();
}

uint64_t specialized MockablePublished.init(wrappedValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v2 = v1;
  v4 = OUTLINED_FUNCTION_83();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v16 - v11;
  OUTLINED_FUNCTION_89(v2 + *(_QWORD *)(*(_QWORD *)v2 + 88), a1);
  OUTLINED_FUNCTION_89((uint64_t)v12, a1);
  OUTLINED_FUNCTION_89((uint64_t)v9, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Locale, Never>);
  OUTLINED_FUNCTION_18_1();
  v13 = CurrentValueSubject.init(_:)();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v12, v4);
  v14((char *)a1, v4);
  *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 96)) = v13;
  return v2;
}

void specialized MockablePublished.init(wrappedValue:)(char a1, uint64_t *a2)
{
  uint64_t v2;

  OUTLINED_FUNCTION_61(a1, a2);
  OUTLINED_FUNCTION_18_1();
  v2 = OUTLINED_FUNCTION_65();
  OUTLINED_FUNCTION_91(v2);
  OUTLINED_FUNCTION_27_2();
}

void specialized MockablePublished.init(wrappedValue:)(void *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v5;
  uint64_t v6;

  v3 = v2;
  *(_QWORD *)(v3 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_18_1();
  v5 = a1;
  v6 = OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_91(v6);
  OUTLINED_FUNCTION_7_1();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3BCEDCC](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for NetworkAvailability.PathUpdateHandler(uint64_t a1)
{
  return type metadata accessor for NetworkAvailability.PathUpdateHandler(a1, (uint64_t *)&type metadata singleton initialization cache for NetworkAvailability.PathUpdateHandler);
}

uint64_t type metadata accessor for NetworkAvailability.AirplaneModeUpdateHandler(uint64_t a1)
{
  return type metadata accessor for NetworkAvailability.PathUpdateHandler(a1, (uint64_t *)&type metadata singleton initialization cache for NetworkAvailability.AirplaneModeUpdateHandler);
}

uint64_t type metadata accessor for NetworkAvailability.PathUpdateHandler(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in NetworkAvailability.init(storage:)()
{
  return implicit closure #2 in implicit closure #1 in NetworkAvailability.init(storage:)();
}

uint64_t outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWPath) -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkAvailability.Status and conformance NetworkAvailability.Status()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkAvailability.Status and conformance NetworkAvailability.Status;
  if (!lazy protocol witness table cache variable for type NetworkAvailability.Status and conformance NetworkAvailability.Status)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for NetworkAvailability.Status, &type metadata for NetworkAvailability.Status);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkAvailability.Status and conformance NetworkAvailability.Status);
  }
  return result;
}

void associated type witness table accessor for MockableEnvironmentProvider.Provider : SiriEnvironmentProvider in NetworkAvailability(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, a2, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);
}

void instantiation function for generic protocol witness table for NetworkAvailability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, a2, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);
  *(_QWORD *)(a1 + 8) = v3;
}

{
  uint64_t v3;

  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, a2, (void (*)(uint64_t))type metadata accessor for NetworkAvailability);
  *(_QWORD *)(a1 + 8) = v3;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in NetworkAvailability()
{
  return MEMORY[0x1E0C96020];
}

void sub_1C2F3C6D0(uint64_t *a1@<X8>)
{
  *a1 = SiriEnvironment.networkAvailability.getter();
  OUTLINED_FUNCTION_31();
}

void sub_1C2F3C6F8()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_10_2();
  *v0 = (*(uint64_t (**)(void))(v1 + 176))();
  OUTLINED_FUNCTION_31();
}

void sub_1C2F3C720()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F3C74C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F3C778()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F3C7A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F3C7D0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

uint64_t method lookup function for NetworkAvailability()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NetworkAvailability.mock.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of NetworkAvailability.status.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of NetworkAvailability.status.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NetworkAvailability.status.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of NetworkAvailability.$status.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of NetworkAvailability.$status.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of NetworkAvailability.$status.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of NetworkAvailability.isAvailable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of NetworkAvailability.isAvailable.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of NetworkAvailability.isAvailable.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of NetworkAvailability.$isAvailable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of NetworkAvailability.$isAvailable.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of NetworkAvailability.$isAvailable.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of NetworkAvailability.isExpensive.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of NetworkAvailability.isExpensive.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of NetworkAvailability.isExpensive.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of NetworkAvailability.$isExpensive.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of NetworkAvailability.$isExpensive.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of NetworkAvailability.$isExpensive.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of NetworkAvailability.isConstrained.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of NetworkAvailability.isConstrained.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of NetworkAvailability.isConstrained.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of NetworkAvailability.$isConstrained.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of NetworkAvailability.$isConstrained.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of NetworkAvailability.$isConstrained.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of NetworkAvailability.isInAirplaneMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of NetworkAvailability.isInAirplaneMode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of NetworkAvailability.isInAirplaneMode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of NetworkAvailability.$isInAirplaneMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of NetworkAvailability.$isInAirplaneMode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of NetworkAvailability.$isInAirplaneMode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of NetworkAvailability.__allocating_init(storage:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 440))();
}

uint64_t storeEnumTagSinglePayload for NetworkAvailability.Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2F3C9D8 + 4 * byte_1C2F80D25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C2F3CA0C + 4 * byte_1C2F80D20[v4]))();
}

uint64_t sub_1C2F3CA0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F3CA14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F3CA1CLL);
  return result;
}

uint64_t sub_1C2F3CA28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F3CA30);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C2F3CA34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F3CA3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NetworkAvailability.Status()
{
  return &type metadata for NetworkAvailability.Status;
}

uint64_t type metadata completion function for NetworkAvailability.PathUpdateHandler()
{
  return swift_initClassMetadata2();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1() & 1;
}

void lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](_QWORD *a1, uint64_t *a2)
{
  if (!*a1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    OUTLINED_FUNCTION_82();
  }
  OUTLINED_FUNCTION_31();
}

void lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (!*a1)
  {
    a3(a2);
    OUTLINED_FUNCTION_82();
  }
  OUTLINED_FUNCTION_31();
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in NetworkAvailability.PathUpdateHandler.handlePathUpdate(_:)()
{
  uint64_t v0;

  NetworkAvailability.handlePathUpdate(_:)(*(_QWORD *)(v0 + 16));
  OUTLINED_FUNCTION_31();
}

uint64_t OUTLINED_FUNCTION_0_6()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_2_7()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_3_4()
{
  return swift_getAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_4_3()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_5_5()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_7_4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t OUTLINED_FUNCTION_8_3()
{
  return swift_retain();
}

_QWORD *OUTLINED_FUNCTION_9_4(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))((uint64_t *)va, v2);
}

_QWORD *OUTLINED_FUNCTION_13_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a10 + 152))(&a9);
}

uint64_t OUTLINED_FUNCTION_14_3()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_15_2()
{
  return swift_retain();
}

_QWORD *OUTLINED_FUNCTION_16_2(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))((uint64_t *)va, v2);
}

uint64_t OUTLINED_FUNCTION_17_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_18_1()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_20_1()
{
  return swift_getAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_21_2()
{
  return dispatch thunk of ObservableObject.objectWillChange.getter();
}

uint64_t OUTLINED_FUNCTION_23_1()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

_QWORD *OUTLINED_FUNCTION_24_2(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 104))((uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_25_2()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_26_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_28_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 16) = a1;
  return specialized static MockablePublished.subscript.getter(v2, v3);
}

uint64_t OUTLINED_FUNCTION_30()
{
  return type metadata accessor for CurrentDevice();
}

uint64_t OUTLINED_FUNCTION_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  char v10;

  a9 = v10;
  return (*(uint64_t (**)(char *))(*(_QWORD *)a10 + 112))(&a9);
}

uint64_t OUTLINED_FUNCTION_35()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_36()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_37()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_38()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_39(uint64_t a1, ...)
{
  uint64_t (*v1)(char *, _QWORD);
  va_list va;

  va_start(va, a1);
  return v1(va, 0);
}

uint64_t OUTLINED_FUNCTION_40()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_42()
{
  return swift_release();
}

void OUTLINED_FUNCTION_43(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t))
{
  lazy protocol witness table accessor for type NetworkAvailability and conformance NetworkAvailability(a1, 255, a3);
}

uint64_t OUTLINED_FUNCTION_44(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 8) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_45()
{
  return type metadata accessor for CurrentDevice();
}

uint64_t OUTLINED_FUNCTION_48(uint64_t a1, ...)
{
  uint64_t (*v1)(char *, _QWORD);
  va_list va;

  va_start(va, a1);
  return v1(va, 0);
}

uint64_t OUTLINED_FUNCTION_49(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t OUTLINED_FUNCTION_53(char a1, uint64_t a2)
{
  return specialized static MockablePublished.subscript.setter(a1, a2);
}

uint64_t OUTLINED_FUNCTION_54()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t OUTLINED_FUNCTION_55()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t OUTLINED_FUNCTION_56()
{
  return dispatch thunk of ObservableObject.objectWillChange.getter();
}

_QWORD *OUTLINED_FUNCTION_57(uint64_t a1, ...)
{
  _QWORD *(*v1)(uint64_t *__return_ptr);
  va_list va;

  va_start(va, a1);
  return v1((uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_59()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_60()
{
  ObservableObjectPublisher.send()();
}

uint64_t OUTLINED_FUNCTION_61(char a1, uint64_t *a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 16) = a1;
  return __swift_instantiateConcreteTypeFromMangledName(a2);
}

_QWORD *OUTLINED_FUNCTION_62(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a12 + 152))(&a11);
}

uint64_t OUTLINED_FUNCTION_63@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v9)(uint64_t *);

  return v9(&a9);
}

uint64_t OUTLINED_FUNCTION_65()
{
  return CurrentValueSubject.init(_:)();
}

void OUTLINED_FUNCTION_66()
{
  specialized MockablePublished.init(wrappedValue:)(0);
}

uint64_t OUTLINED_FUNCTION_67()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t OUTLINED_FUNCTION_69()
{
  return swift_weakInit();
}

uint64_t OUTLINED_FUNCTION_70()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t OUTLINED_FUNCTION_71()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t OUTLINED_FUNCTION_72()
{
  return swift_getAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_75(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v2, v1);
}

uint64_t OUTLINED_FUNCTION_77()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 208))(v1 - 88);
}

void OUTLINED_FUNCTION_79(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  *v10 = a10;
}

uint64_t OUTLINED_FUNCTION_80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v9)(uint64_t *);

  return v9(&a9);
}

uint64_t OUTLINED_FUNCTION_81()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_82()
{
  JUMPOUT(0x1C3BCEDD8);
}

uint64_t OUTLINED_FUNCTION_83()
{
  return type metadata accessor for Locale();
}

uint64_t OUTLINED_FUNCTION_85()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_86()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_87()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t OUTLINED_FUNCTION_88()
{
  return CurrentValueSubject.init(_:)();
}

uint64_t OUTLINED_FUNCTION_89(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

id OUTLINED_FUNCTION_90()
{
  uint64_t v0;

  return *(id *)(v0 + 104);
}

uint64_t OUTLINED_FUNCTION_91(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

id OUTLINED_FUNCTION_92()
{
  uint64_t v0;

  return *(id *)(v0 + 104);
}

uint64_t OUTLINED_FUNCTION_93()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_94(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_95(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result & 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_96(uint64_t result)
{
  _BYTE *v1;

  *v1 = result & 1;
  return result;
}

void OUTLINED_FUNCTION_97()
{
  OS_dispatch_semaphore.wait()();
}

Swift::Int OUTLINED_FUNCTION_98()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t OUTLINED_FUNCTION_99()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t OUTLINED_FUNCTION_100(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

_QWORD *OUTLINED_FUNCTION_101(_QWORD *result)
{
  uint64_t v1;

  *result = v1;
  return result;
}

uint64_t withTimeout<A>(seconds:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v5 + 48) = a3;
  *(_QWORD *)(v5 + 56) = a4;
  *(_QWORD *)(v5 + 40) = a2;
  *(double *)(v5 + 32) = a5;
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 64) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for Result();
  *(_QWORD *)(v5 + 72) = v6;
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 88) = swift_task_alloc();
  v7 = swift_task_alloc();
  *(_QWORD *)(v5 + 96) = v7;
  v11 = OUTLINED_FUNCTION_39_0(v7, v8, v9, v10);
  *(_QWORD *)(v5 + 104) = v11;
  *(_QWORD *)(v5 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 120) = OUTLINED_FUNCTION_28_1();
  *(_QWORD *)(v5 + 128) = OUTLINED_FUNCTION_28_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v5 + 136) = swift_task_alloc();
  OUTLINED_FUNCTION_4_4();
  return OUTLINED_FUNCTION_3_5();
}

uint64_t withTimeout<A>(seconds:operation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v5);
  v6 = (_QWORD *)OUTLINED_FUNCTION_37();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v2;
  v6[5] = v4;
  v6[6] = v3;
  swift_retain();
  v7 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC(v1, (uint64_t)&async function pointer to partial apply for closure #1 in withTimeout<A>(seconds:operation:), (uint64_t)v6);
  *(_QWORD *)(v0 + 144) = v7;
  v8 = OUTLINED_FUNCTION_37();
  *(_QWORD *)(v0 + 152) = v8;
  *(_QWORD *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v7;
  swift_retain();
  v9 = (_QWORD *)OUTLINED_FUNCTION_28_1();
  *(_QWORD *)(v0 + 160) = v9;
  *v9 = v0;
  v9[1] = withTimeout<A>(seconds:operation:);
  return withCooperativeTimeout<A>(seconds:cancellableOperation:)(*(_QWORD *)(v0 + 128), (uint64_t)&async function pointer to partial apply for closure #2 in withTimeout<A>(seconds:operation:), v8, *(_QWORD *)(v0 + 56), *(double *)(v0 + 32));
}

{
  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_1_7();
  swift_release();
  OUTLINED_FUNCTION_4_4();
  return OUTLINED_FUNCTION_2_8();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[14] + 16))(v0[15], v0[16], v0[13]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = v0[11];
    v1 = v0[12];
    v3 = v0[9];
    v4 = v0[10];
    v5 = v0[3];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 32))(v1, v0[15], v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
    _ss6ResultOsRi_zrlE3getxyq_YKF(v3, (uint64_t)(v0 + 2), v5);
    v9 = v0[16];
    v10 = v0[14];
    v11 = v0[13];
    swift_release();
    OUTLINED_FUNCTION_26_3();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    OUTLINED_FUNCTION_14_4();
    OUTLINED_FUNCTION_22_2();
    OUTLINED_FUNCTION_30_0();
    OUTLINED_FUNCTION_25_3();
    OUTLINED_FUNCTION_40_0();
    v12 = (uint64_t (*)(void))OUTLINED_FUNCTION_19_1();
  }
  else
  {
    v6 = v0[16];
    v7 = v0[13];
    v8 = v0[14];
    MEMORY[0x1C3BCE058](v0[18], v0[7], v0[8], MEMORY[0x1E0DEDB38]);
    lazy protocol witness table accessor for type TimeoutError and conformance TimeoutError();
    OUTLINED_FUNCTION_32_0();
    OUTLINED_FUNCTION_31_0();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    OUTLINED_FUNCTION_26_3();
    swift_task_dealloc();
    OUTLINED_FUNCTION_22_2();
    OUTLINED_FUNCTION_30_0();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_25_3();
    v12 = (uint64_t (*)(void))v0[1];
  }
  return OUTLINED_FUNCTION_16_3(v12);
}

uint64_t type metadata accessor for CooperativeTimeoutResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CooperativeTimeoutResult);
}

uint64_t closure #1 in withTimeout<A>(seconds:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = closure #1 in withTimeout<A>(seconds:operation:);
  return v8(a1);
}

uint64_t closure #1 in withTimeout<A>(seconds:operation:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_1_7();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t partial apply for closure #1 in withTimeout<A>(seconds:operation:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;

  OUTLINED_FUNCTION_38_0();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_8_4(v0);
  v2 = OUTLINED_FUNCTION_15_3(v1);
  return closure #1 in withTimeout<A>(seconds:operation:)(v2, v3, v4, v5);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload(a1, 1, v5) == 1)
  {
    outlined destroy of CheckedContinuation<(), Error>?(a1, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t closure #2 in withTimeout<A>(seconds:operation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for CancellationError();
  v3[6] = v4;
  v3[7] = *(_QWORD *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in withTimeout<A>(seconds:operation:)()
{
  uint64_t *v0;
  _QWORD *v1;

  swift_retain();
  v1 = (_QWORD *)OUTLINED_FUNCTION_28_1();
  v0[9] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #2 in withTimeout<A>(seconds:operation:);
  return withCancellableContinuation<A>(body:)(v0[3], (uint64_t)partial apply for closure #1 in closure #2 in withTimeout<A>(seconds:operation:), v0[4], v0[5]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v3)(void);

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_4_4();
    return OUTLINED_FUNCTION_3_5();
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_14_4();
    v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_7_5(v3);
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 80);
  swift_release();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    v4 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    MEMORY[0x1C3BCE058](v5, v4, v3, MEMORY[0x1E0DEDB38]);
  }
  swift_willThrow();
  OUTLINED_FUNCTION_14_4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #2 in withTimeout<A>(seconds:operation:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = swift_task_alloc();
  v7 = (_QWORD *)OUTLINED_FUNCTION_8_4(v6);
  *v7 = v2;
  v7[1] = closure #1 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:);
  return closure #2 in withTimeout<A>(seconds:operation:)(a1, v4, v5);
}

uint64_t closure #1 in closure #2 in withTimeout<A>(seconds:operation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #2 in withTimeout<A>(seconds:operation:), (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #2 in withTimeout<A>(seconds:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v4[2] = a4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v5 = type metadata accessor for Result();
  v4[3] = v5;
  v4[4] = *(_QWORD *)(v5 - 8);
  v4[5] = swift_task_alloc();
  v6 = (_QWORD *)swift_task_alloc();
  v4[6] = v6;
  *v6 = v4;
  v6[1] = closure #1 in closure #1 in closure #2 in withTimeout<A>(seconds:operation:);
  return Task.result.getter();
}

uint64_t closure #1 in closure #1 in closure #2 in withTimeout<A>(seconds:operation:)()
{
  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_4();
  return OUTLINED_FUNCTION_2_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  ManagedContinuation.resume(with:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  OUTLINED_FUNCTION_22_2();
  return OUTLINED_FUNCTION_7_5(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized ManagedContinuation.resume(with:)(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v8);
  a2 &= 1u;
  outlined copy of Result<(), Error>(a1, a2);
  specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v7, a1, a2);
  outlined consume of Result<(), Error>(a1, a2);
  return outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v7, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload(a1, 1, v6) == 1)
  {
    outlined destroy of CheckedContinuation<(), Error>?(a1, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t specialized withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t specialized withCancellableContinuation<A>(body:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedContinuation<()>);
  swift_allocObject();
  v5 = *(_OWORD *)(v0 + 24);
  v1 = specialized ManagedContinuation.().init()();
  *(_QWORD *)(v0 + 40) = v1;
  v2 = OUTLINED_FUNCTION_36_0();
  *(_QWORD *)(v0 + 48) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v5;
  *(_QWORD *)&v5 = (char *)&async function pointer to specialized withTaskCancellationHandler<A>(handler:operation:)
                 + async function pointer to specialized withTaskCancellationHandler<A>(handler:operation:);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = specialized withCancellableContinuation<A>(body:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v5)(*(_QWORD *)(v0 + 16), (uint64_t)partial apply for specialized closure #1 in withCancellableContinuation<A>(body:), v1, (uint64_t)&async function pointer to partial apply for specialized closure #2 in withCancellableContinuation<A>(body:), v2);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_11_5();
  if (!v0)
    swift_task_dealloc();
  OUTLINED_FUNCTION_4_4();
  return OUTLINED_FUNCTION_3_5();
}

{
  uint64_t (*v0)(void);

  swift_release();
  v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_0_7(v0);
}

{
  uint64_t v0;

  swift_release();
  OUTLINED_FUNCTION_14_4();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t withCooperativeTimeout<A>(seconds:cancellableOperation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a3;
  *(_QWORD *)(v5 + 48) = a4;
  *(_QWORD *)(v5 + 32) = a2;
  *(double *)(v5 + 24) = a5;
  *(_QWORD *)(v5 + 16) = a1;
  return OUTLINED_FUNCTION_17_3();
}

uint64_t withCooperativeTimeout<A>(seconds:cancellableOperation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = OUTLINED_FUNCTION_36_0();
  *(_QWORD *)(v0 + 56) = v3;
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  *(_QWORD *)(v3 + 40) = v2;
  OUTLINED_FUNCTION_39_0(v3, v5, v6, v7);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v8;
  *v8 = v0;
  v8[1] = withCooperativeTimeout<A>(seconds:cancellableOperation:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_14_4();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t lazy protocol witness table accessor for type TimeoutError and conformance TimeoutError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeoutError and conformance TimeoutError;
  if (!lazy protocol witness table cache variable for type TimeoutError and conformance TimeoutError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TimeoutError, &type metadata for TimeoutError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeoutError and conformance TimeoutError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimeoutError and conformance TimeoutError;
  if (!lazy protocol witness table cache variable for type TimeoutError and conformance TimeoutError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TimeoutError, &type metadata for TimeoutError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeoutError and conformance TimeoutError);
  }
  return result;
}

uint64_t _ss6ResultOsRi_zrlE3getxyq_YKF@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v3, *(_QWORD *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 + 64) = a5;
  *(double *)(v6 + 56) = a6;
  *(_QWORD *)(v6 + 40) = a3;
  *(_QWORD *)(v6 + 48) = a4;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 72) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v7 = type metadata accessor for Result();
  *(_QWORD *)(v6 + 80) = v7;
  type metadata accessor for Optional();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 96) = swift_task_alloc();
  *(_QWORD *)(v6 + 104) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 112) = swift_task_alloc();
  *(_QWORD *)(v6 + 120) = swift_task_alloc();
  *(_QWORD *)(v6 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v6 + 136) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(void);

  v1 = v0[17];
  v2 = v0[8];
  v3 = v0[7];
  v5 = v0[5];
  v4 = v0[6];
  type metadata accessor for TaskPriority();
  OUTLINED_FUNCTION_21_3();
  v6 = (_QWORD *)OUTLINED_FUNCTION_37();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v2;
  v6[5] = v5;
  v6[6] = v4;
  v0[18] = type metadata accessor for ThrowingTaskGroup();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:), (uint64_t)v6);
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_21_3();
  v7 = (_QWORD *)OUTLINED_FUNCTION_37();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v2;
  v7[5] = v3;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v1, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:), (uint64_t)v7);
  OUTLINED_FUNCTION_33_0();
  v8 = (_QWORD *)OUTLINED_FUNCTION_9_5();
  v0[19] = v8;
  *v8 = v0;
  v8[1] = closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:);
  OUTLINED_FUNCTION_4_4();
  return v10();
}

{
  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_4();
  return OUTLINED_FUNCTION_2_8();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  void **v12;
  void *v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t (*v22)(void);

  v1 = v0[12];
  v2 = v0[10];
  result = __swift_getEnumTagSinglePayload(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v5 = v0[15];
    v4 = v0[16];
    v6 = v0[13];
    v8 = v0[8];
    v7 = v0[9];
    v9 = (_QWORD *)v0[4];
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v0[20] = v10;
    v10(v4, v1, v2);
    MEMORY[0x1C3BCE094](*v9, v8, v7, MEMORY[0x1E0DEDB38]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v2);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v12 = (void **)v0[15];
    if (EnumCaseMultiPayload == 1)
    {
      v13 = *v12;
      v0[21] = *v12;
      v0[2] = v13;
      v14 = v13;
      if ((swift_dynamicCast() & 1) != 0)
      {
        v15 = (_QWORD *)OUTLINED_FUNCTION_9_5();
        v0[22] = v15;
        *v15 = v0;
        v15[1] = closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:);
        OUTLINED_FUNCTION_4_4();
        return v22();
      }

    }
    else
    {
      (*(void (**)(void **, _QWORD))(v0[13] + 8))(v12, v0[10]);
    }
    v16 = v0[16];
    v17 = OUTLINED_FUNCTION_24_3();
    v18(v17, v16);
    type metadata accessor for CooperativeTimeoutResult(0, v6, v19, v20);
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_22_2();
    OUTLINED_FUNCTION_14_4();
    OUTLINED_FUNCTION_30_0();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_25_3();
    OUTLINED_FUNCTION_40_0();
    v21 = (uint64_t (*)(void))OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_16_3(v21);
  }
  return result;
}

{
  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_4();
  return OUTLINED_FUNCTION_2_8();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  void *v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);

  v2 = v0[10];
  v3 = v0[11];
  result = __swift_getEnumTagSinglePayload(v3, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v6 = (void (*)(uint64_t, uint64_t, uint64_t))v0[20];
    v5 = (void *)v0[21];
    v7 = v0[14];
    (*(void (**)(_QWORD, uint64_t))(v0[13] + 8))(v0[16], v2);

    v6(v7, v3, v2);
    v8 = v0[14];
    v9 = OUTLINED_FUNCTION_24_3();
    v10(v9, v8);
    type metadata accessor for CooperativeTimeoutResult(0, v1, v11, v12);
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_14_4();
    OUTLINED_FUNCTION_22_2();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_30_0();
    OUTLINED_FUNCTION_25_3();
    OUTLINED_FUNCTION_40_0();
    v13 = (uint64_t (*)(void))OUTLINED_FUNCTION_19_1();
    return OUTLINED_FUNCTION_7_5(v13);
  }
  return result;
}

uint64_t partial apply for closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = *((_QWORD *)v2 + 2);
  v7 = *((_QWORD *)v2 + 3);
  v8 = *((_QWORD *)v2 + 4);
  v9 = v2[5];
  v10 = swift_task_alloc();
  v11 = (_QWORD *)OUTLINED_FUNCTION_8_4(v10);
  *v11 = v3;
  v11[1] = closure #1 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:);
  return closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(a1, a2, v7, v8, v6, v9);
}

uint64_t closure #1 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = closure #1 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:);
  return v8(a1);
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v10);
  v11 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11) == 1)
  {
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v10, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    v12 = dispatch thunk of Actor.unownedExecutor.getter();
    v14 = v13;
    swift_unknownObjectRelease();
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = *v4;
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t closure #2 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(double a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = closure #2 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:);
  return static Task<>.sleepCooperatively(seconds:)(a1);
}

uint64_t closure #2 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)()
{
  void *v0;

  OUTLINED_FUNCTION_1_7();
  if (v0)

  OUTLINED_FUNCTION_4_4();
  return OUTLINED_FUNCTION_2_8();
}

{
  uint64_t v0;

  lazy protocol witness table accessor for type CoopTimeoutError and conformance CoopTimeoutError();
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_31_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Task<>.sleepCooperatively(seconds:)(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
  return OUTLINED_FUNCTION_17_3();
}

uint64_t static Task<>.sleepCooperatively(seconds:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v1 = v0[2];
  v2 = OUTLINED_FUNCTION_37();
  v0[3] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)OUTLINED_FUNCTION_9_5();
  v0[4] = v3;
  *v3 = v0;
  v3[1] = static Task<>.sleepCooperatively(seconds:);
  return v5();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_10_3();
  if (!v0)
    swift_release();
  OUTLINED_FUNCTION_4_4();
  return OUTLINED_FUNCTION_3_5();
}

{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_19_1();
  return v0();
}

{
  uint64_t v0;

  swift_release();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ThrowingTaskGroup.nextResult(isolation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3[2] = a2;
  v3[3] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  v3[4] = v4;
  *v4 = v3;
  v4[1] = ThrowingTaskGroup.nextResult(isolation:);
  return ThrowingTaskGroup.nextResult()();
}

uint64_t ThrowingTaskGroup.nextResult(isolation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_10_3();
  if (!v1)
    return OUTLINED_FUNCTION_7_5(*(uint64_t (**)(void))(v2 + 8));
  if (*(_QWORD *)(v0 + 16))
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return OUTLINED_FUNCTION_3_5();
}

{
  return swift_unexpectedError();
}

uint64_t TimeoutError.localizedDescription.getter()
{
  return 0x74756F656D6974;
}

uint64_t static TimeoutError.== infix(_:_:)()
{
  return 1;
}

void TimeoutError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

void TimeoutError.hashValue.getter()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_35_0();
  Hasher._finalize()();
  OUTLINED_FUNCTION_34_0();
}

void protocol witness for Hashable.hashValue.getter in conformance TimeoutError()
{
  TimeoutError.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance TimeoutError()
{
  TimeoutError.hash(into:)();
}

uint64_t closure #1 in static Task<>.sleepCooperatively(seconds:)(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v8);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(double *)(v9 + 32) = a2;
  *(_QWORD *)(v9 + 40) = a1;
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8);
  swift_retain();
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
    v11 = 0;
    v12 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    if (*(_QWORD *)(v9 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = dispatch thunk of Actor.unownedExecutor.getter();
      v12 = v13;
      swift_unknownObjectRelease();
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:);
  *(_QWORD *)(v14 + 24) = v9;
  if (v12 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v12;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1C2F3ED34()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Task<>.sleepCooperatively(seconds:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static Task<>.sleepCooperatively(seconds:)(a1, *(double *)(v1 + 16));
}

ValueMetadata *type metadata accessor for TimeoutError()
{
  return &type metadata for TimeoutError;
}

uint64_t type metadata instantiation function for CooperativeTimeoutResult()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for CooperativeTimeoutResult()
{
  uint64_t result;
  unint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  result = type metadata accessor for Result();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

id *initializeBufferWithCopyOfBuffer for CooperativeTimeoutResult(id *a1, id *a2, uint64_t a3)
{
  id *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  char v17;
  id v18;
  id v19;
  char v20;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 2) > 0x18)
  {
    v8 = (char *)*a2;
    *v3 = *a2;
    v3 = (id *)&v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    v9 = v5 + 1;
    v10 = *((unsigned __int8 *)a2 + v5 + 1);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    v12 = *((unsigned __int8 *)a2 + v5);
    if (v10 == 1)
    {
      if (v12 >= 2)
      {
        if (v5 <= 3)
          v13 = v5;
        else
          v13 = 4;
        __asm { BR              X13 }
      }
      if (v12 == 1)
      {
        v15 = *a2;
        v16 = *a2;
        *v3 = v15;
        v17 = 1;
      }
      else
      {
        (*(void (**)(id *))(v4 + 16))(a1);
        v17 = 0;
      }
      *((_BYTE *)v3 + v5) = v17;
      *((_BYTE *)v3 + v9) = 1;
    }
    else
    {
      if (v12 >= 2)
      {
        if (v5 <= 3)
          v14 = v5;
        else
          v14 = 4;
        __asm { BR              X13 }
      }
      if (v12 == 1)
      {
        v18 = *a2;
        v19 = *a2;
        *v3 = v18;
        v20 = 1;
      }
      else
      {
        (*(void (**)(id *))(v4 + 16))(a1);
        v20 = 0;
      }
      *((_BYTE *)v3 + v5) = v20;
      *((_BYTE *)v3 + v9) = 0;
    }
  }
  return v3;
}

void destroy for CooperativeTimeoutResult(id *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = v3 + 1;
  v5 = *((unsigned __int8 *)a1 + v3 + 1);
  if (v5 >= 2)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    ((void (*)(void))((char *)&loc_1C2F3F0D0 + 4 * byte_1C2F8109F[v6]))();
    return;
  }
  v7 = *((unsigned __int8 *)a1 + v3);
  if (v5 == 1)
  {
    if (v7 >= 2)
    {
      if (v3 <= 3)
        v8 = v3;
      else
        v8 = 4;
      ((void (*)(void))((char *)&loc_1C2F3F174 + 4 * byte_1C2F810A9[v8]))();
      return;
    }
LABEL_19:
    if (v7 == 1)

    else
      (*(void (**)(void))(v2 + 8))();
    return;
  }
  if (v7 < 2)
    goto LABEL_19;
  if (v3 <= 3)
    v9 = v3;
  else
    v9 = 4;
  ((void (*)(void))((char *)&loc_1C2F3F174 + 4 * byte_1C2F810A4[v9]))();
}

_QWORD *initializeWithCopy for CooperativeTimeoutResult(_QWORD *a1, id *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  char v14;
  char v15;
  id v16;
  id v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = v5 + 1;
  v7 = *((unsigned __int8 *)a2 + v5 + 1);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  v9 = *((unsigned __int8 *)a2 + v5);
  if (v7 == 1)
  {
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 1)
    {
      v12 = *a2;
      v13 = *a2;
      *a1 = v12;
      v14 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      v14 = 0;
    }
    v15 = 1;
  }
  else
  {
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v11 = v5;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 1)
    {
      v16 = *a2;
      v17 = *a2;
      v15 = 0;
      *a1 = v16;
      v14 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      v14 = 0;
      v15 = 0;
    }
  }
  *((_BYTE *)a1 + v5) = v14;
  *((_BYTE *)a1 + v6) = v15;
  return a1;
}

id *assignWithCopy for CooperativeTimeoutResult(id *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  char v21;
  char v22;
  void *v23;
  id v24;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = v7 + 1;
    v9 = *((unsigned __int8 *)a1 + v7 + 1);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    v11 = *((unsigned __int8 *)a1 + v7);
    if (v9 == 1)
    {
      if (v11 >= 2)
      {
        if (v7 <= 3)
          v12 = v7;
        else
          v12 = 4;
        __asm { BR              X12 }
      }
    }
    else if (v11 >= 2)
    {
      if (v7 <= 3)
        v13 = v7;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v14 = *((unsigned __int8 *)a2 + v8);
    if (v14 >= 2)
    {
      if (v8 <= 3)
        v15 = v8;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = *((unsigned __int8 *)a2 + v7);
    if (v14 == 1)
    {
      if (v16 >= 2)
      {
        if (v7 <= 3)
          v17 = v7;
        else
          v17 = 4;
        __asm { BR              X12 }
      }
      if (v16 == 1)
      {
        v19 = *a2;
        v20 = v19;
        *a1 = v19;
        v21 = 1;
      }
      else
      {
        (*(void (**)(id *, void **, uint64_t))(v6 + 16))(a1, a2, v5);
        v21 = 0;
      }
      v22 = 1;
    }
    else
    {
      if (v16 >= 2)
      {
        if (v7 <= 3)
          v18 = v7;
        else
          v18 = 4;
        __asm { BR              X12 }
      }
      if (v16 == 1)
      {
        v23 = *a2;
        v24 = v23;
        v22 = 0;
        *a1 = v23;
        v21 = 1;
      }
      else
      {
        (*(void (**)(id *, void **, uint64_t))(v6 + 16))(a1, a2, v5);
        v21 = 0;
        v22 = 0;
      }
    }
    *((_BYTE *)a1 + v7) = v21;
    *((_BYTE *)a1 + v8) = v22;
  }
  return a1;
}

_QWORD *initializeWithTake for CooperativeTimeoutResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = v5 + 1;
  v7 = *((unsigned __int8 *)a2 + v5 + 1);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  v9 = *((unsigned __int8 *)a2 + v5);
  if (v7 == 1)
  {
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 1)
    {
      *a1 = *a2;
    }
    else
    {
      (*(void (**)(_QWORD *))(v4 + 32))(a1);
      LOBYTE(v9) = 0;
    }
    v12 = 1;
  }
  else
  {
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v11 = v5;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 1)
    {
      v12 = 0;
      *a1 = *a2;
      LOBYTE(v9) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *))(v4 + 32))(a1);
      LOBYTE(v9) = 0;
      v12 = 0;
    }
  }
  *((_BYTE *)a1 + v5) = v9;
  *((_BYTE *)a1 + v6) = v12;
  return a1;
}

id *assignWithTake for CooperativeTimeoutResult(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = v7 + 1;
    v9 = *((unsigned __int8 *)a1 + v7 + 1);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    v11 = *((unsigned __int8 *)a1 + v7);
    if (v9 == 1)
    {
      if (v11 >= 2)
      {
        if (v7 <= 3)
          v12 = v7;
        else
          v12 = 4;
        __asm { BR              X12 }
      }
    }
    else if (v11 >= 2)
    {
      if (v7 <= 3)
        v13 = v7;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v14 = *((unsigned __int8 *)a2 + v8);
    if (v14 >= 2)
    {
      if (v8 <= 3)
        v15 = v8;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = *((unsigned __int8 *)a2 + v7);
    if (v14 == 1)
    {
      if (v16 >= 2)
      {
        if (v7 <= 3)
          v17 = v7;
        else
          v17 = 4;
        __asm { BR              X12 }
      }
      if (v16 == 1)
      {
        *a1 = *a2;
        v19 = 1;
      }
      else
      {
        (*(void (**)(id *, id *, uint64_t))(v6 + 32))(a1, a2, v5);
        v19 = 0;
      }
      v20 = 1;
    }
    else
    {
      if (v16 >= 2)
      {
        if (v7 <= 3)
          v18 = v7;
        else
          v18 = 4;
        __asm { BR              X12 }
      }
      if (v16 == 1)
      {
        v20 = 0;
        *a1 = *a2;
        v19 = 1;
      }
      else
      {
        (*(void (**)(id *, id *, uint64_t))(v6 + 32))(a1, a2, v5);
        v19 = 0;
        v20 = 0;
      }
    }
    *((_BYTE *)a1 + v7) = v19;
    *((_BYTE *)a1 + v8) = v20;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CooperativeTimeoutResult(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 2;
  v5 = 8 * (v3 + 2);
  if ((v3 + 2) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3 + 1);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1C2F3FD5C + 4 * byte_1C2F81108[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for CooperativeTimeoutResult(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v5 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64) > 8uLL)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v6 = v5 + 2;
  v7 = 8 * (v5 + 2);
  if (a3 < 0xFF)
  {
    v8 = 0u;
  }
  else if (v6 <= 3)
  {
    v10 = ((a3 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v9 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -2)
    {
      v11 = v9 & ~(-1 << v7);
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v11;
      }
      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 2);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for CooperativeTimeoutResult(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (v2 <= 8)
    v2 = 8;
  v3 = v2 + 1;
  v4 = *(unsigned __int8 *)(a1 + v2 + 1);
  if (v4 < 2)
    return v4;
  if (v3 <= 3)
    v5 = v3;
  else
    v5 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1C2F3FFA0 + 4 * byte_1C2F81116[v5]))();
}

void destructiveInjectEnumTag for CooperativeTimeoutResult(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v4 <= 8)
    v4 = 8;
  v5 = v4 + 1;
  if (a2 > 1)
  {
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a5;
  *(double *)(v5 + 16) = a1;
  return swift_task_switch();
}

void closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:)()
{
  uint64_t v0;
  double v1;
  _QWORD *v2;

  v1 = *(double *)(v0 + 16) * 1000000000.0;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19)
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v2;
    *v2 = v0;
    v2[1] = closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:);
    static Task<>.sleep(_:)();
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:)()
{
  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_4_4();
  return OUTLINED_FUNCTION_2_8();
}

{
  uint64_t v0;

  ManagedContinuation<A>.resume()();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

void CoopTimeoutError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int CoopTimeoutError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance TimeoutError()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_35_0();
  Hasher._finalize()();
  OUTLINED_FUNCTION_34_0();
}

void specialized closure #1 in withCancellableContinuation<A>(body:)()
{
  void *v0;

  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
  v0 = (void *)swift_allocError();
  CancellationError.init()();
  specialized ManagedContinuation.resume(with:)(v0, 1);

}

uint64_t specialized closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t specialized closure #2 in withCancellableContinuation<A>(body:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = OUTLINED_FUNCTION_36_0();
  *(_QWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = specialized closure #2 in withCancellableContinuation<A>(body:);
  OUTLINED_FUNCTION_4_4();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_11_5();
  if (v0)
  {
    OUTLINED_FUNCTION_4_4();
    return OUTLINED_FUNCTION_3_5();
  }
  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_7_5(*(uint64_t (**)(void))(v1 + 8));
  }
}

{
  uint64_t v0;

  swift_task_dealloc();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

void specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  void *v5;

  specialized ManagedContinuation.setContinuation(_:)(a1);
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
    v5 = (void *)swift_allocError();
    CancellationError.init()();
    specialized ManagedContinuation.resume(with:)(v5, 1);

  }
  else
  {
    a3(a2);
  }
}

uint64_t specialized ManagedContinuation.setContinuation(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v5, a1, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v5, 0, 0xFFu);
  return outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v5, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
}

uint64_t specialized withTaskCancellationHandler<A>(handler:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  if (!__isPlatformVersionAtLeast(2, 18, 0, 0))
    return swift_task_switch();
  v6 = (_QWORD *)swift_task_alloc();
  v5[7] = v6;
  *v6 = v5;
  v6[1] = specialized withTaskCancellationHandler<A>(handler:operation:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

uint64_t specialized withTaskCancellationHandler<A>(handler:operation:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_1_7();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = (int *)v0[5];
  v0[8] = swift_task_addCancellationHandler();
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[9] = v2;
  *v2 = v0;
  v2[1] = specialized withTaskCancellationHandler<A>(handler:operation:);
  return v4(v0[2]);
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_5_6();
  *v2 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_4_4();
  return OUTLINED_FUNCTION_2_8();
}

{
  uint64_t (*v0)(void);

  swift_task_removeCancellationHandler();
  v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_0_7(v0);
}

{
  uint64_t v0;

  swift_task_removeCancellationHandler();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized ManagedContinuation.().init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v3 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = -1;
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104)) = v4;
  v5 = v4;
  v6 = (void *)MEMORY[0x1C3BCDDDC](0xD000000000000027, 0x80000001C2F85180);
  objc_msgSend(v5, sel_setName_, v6);

  return v0;
}

void partial apply for specialized closure #1 in withCancellableContinuation<A>(body:)()
{
  specialized closure #1 in withCancellableContinuation<A>(body:)();
}

uint64_t partial apply for specialized closure #2 in withCancellableContinuation<A>(body:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = swift_task_alloc();
  v3 = (_QWORD *)OUTLINED_FUNCTION_8_4(v2);
  v4 = OUTLINED_FUNCTION_12_4(v3);
  return specialized closure #2 in withCancellableContinuation<A>(body:)(v4, v5, v6, v1);
}

void partial apply for specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  uint64_t v1;

  specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type CancellationError and conformance CancellationError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CancellationError and conformance CancellationError;
  if (!lazy protocol witness table cache variable for type CancellationError and conformance CancellationError)
  {
    v1 = type metadata accessor for CancellationError();
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DF05E8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError);
  }
  return result;
}

id outlined copy of Result<(), Error>(id result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

void outlined consume of Result<(), Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t sub_1C2F408F8()
{
  OUTLINED_FUNCTION_29_1();
  swift_release();
  OUTLINED_FUNCTION_27_3();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:)()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(double *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = swift_task_alloc();
  v4 = (_QWORD *)OUTLINED_FUNCTION_8_4(v3);
  v5 = OUTLINED_FUNCTION_12_4(v4);
  return closure #1 in closure #1 in static Task<>.sleepCooperatively(seconds:)(v1, v5, v6, v7, v2);
}

uint64_t outlined destroy of CheckedContinuation<(), Error>?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_1_7();
  v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_19_1();
  return OUTLINED_FUNCTION_0_7(v0);
}

uint64_t sub_1C2F40A54()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_8_4(v0);
  v2 = OUTLINED_FUNCTION_18_2(v1);
  return OUTLINED_FUNCTION_13_5(v2, v3, v4, v5);
}

uint64_t objectdestroyTm()
{
  OUTLINED_FUNCTION_29_1();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;

  OUTLINED_FUNCTION_38_0();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_8_4(v0);
  v2 = OUTLINED_FUNCTION_15_3(v1);
  return closure #1 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(v2, v3, v4, v5);
}

uint64_t sub_1C2F40B40()
{
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_27_3();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(double *)(v0 + 40);
  v3 = swift_task_alloc();
  v4 = (_QWORD *)OUTLINED_FUNCTION_8_4(v3);
  *v4 = v1;
  v4[1] = closure #1 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:);
  return closure #2 in closure #1 in withCooperativeTimeout<A>(seconds:cancellableOperation:)(v2);
}

unint64_t lazy protocol witness table accessor for type CoopTimeoutError and conformance CoopTimeoutError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CoopTimeoutError and conformance CoopTimeoutError;
  if (!lazy protocol witness table cache variable for type CoopTimeoutError and conformance CoopTimeoutError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for CoopTimeoutError, &unk_1E7CD72E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoopTimeoutError and conformance CoopTimeoutError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CoopTimeoutError and conformance CoopTimeoutError;
  if (!lazy protocol witness table cache variable for type CoopTimeoutError and conformance CoopTimeoutError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for CoopTimeoutError, &unk_1E7CD72E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoopTimeoutError and conformance CoopTimeoutError);
  }
  return result;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #2 in withTimeout<A>(seconds:operation:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in withTimeout<A>(seconds:operation:)(a1, v1);
}

uint64_t sub_1C2F40C5C()
{
  OUTLINED_FUNCTION_29_1();
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_27_3();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in withTimeout<A>(seconds:operation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = swift_task_alloc();
  v3 = (_QWORD *)OUTLINED_FUNCTION_8_4(v2);
  v4 = OUTLINED_FUNCTION_12_4(v3);
  return closure #1 in closure #1 in closure #2 in withTimeout<A>(seconds:operation:)(v4, v5, v6, v1);
}

uint64_t getEnumTagSinglePayload for TimeoutError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for TimeoutError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C2F40D78 + 4 * byte_1C2F8111B[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C2F40D98 + 4 * byte_1C2F81120[v4]))();
}

_BYTE *sub_1C2F40D78(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C2F40D98(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2F40DA0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2F40DA8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2F40DB0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2F40DB8(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for CoopTimeoutError()
{
  return &unk_1E7CD72E8;
}

uint64_t OUTLINED_FUNCTION_0_7(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_1_7()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_2_8()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_3_5()
{
  return swift_task_switch();
}

void OUTLINED_FUNCTION_5_6()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_7_5(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_8_4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_9_5()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_10_3()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 40) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_11_5()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_12_4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_13_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_14_4()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_15_3(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_16_3(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_17_3()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_18_2(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_19_1()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_21_3()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_22_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_24_3()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t OUTLINED_FUNCTION_25_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_26_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_27_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_28_1()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_29_1()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_30_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_31_0()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_32_0()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_33_0()
{
  uint64_t v0;
  uint64_t *v1;

  return outlined destroy of CheckedContinuation<(), Error>?(v0, v1);
}

void OUTLINED_FUNCTION_35_0()
{
  Hasher._combine(_:)(0);
}

uint64_t OUTLINED_FUNCTION_36_0()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_37_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_39_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for CooperativeTimeoutResult(0, v4, a3, a4);
}

uint64_t OUTLINED_FUNCTION_40_0()
{
  return swift_task_dealloc();
}

uint64_t ObjectEntry.init(key:value:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_unknownObjectWeakInit();
  swift_unknownObjectRelease();
  v8 = a3 + *(int *)(type metadata accessor for ObjectEntry(0, a2, v6, v7) + 28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v8, a1, a2);
}

uint64_t ObjectAssociation.cache.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ObjectAssociation.count.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = v0[6];
  v2 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 3, v1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X8>), _QWORD *, _QWORD, uint64_t, uint64_t))(v2 + 24))(&v4, partial apply for closure #1 in ObjectAssociation.count.getter, v0, MEMORY[0x1E0DEB418], v1, v2);
  return v4;
}

uint64_t closure #1 in ObjectAssociation.count.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *a1;
  v4 = ObjectAssociation.cache.getter();
  v7 = type metadata accessor for ObjectEntry(0, *(_QWORD *)(v3 + 80), v5, v6);
  v8 = MEMORY[0x1C3BCDD4C](v4, MEMORY[0x1E0DEA520], v7, MEMORY[0x1E0DEA528]);
  result = swift_bridgeObjectRelease();
  *a2 = v8;
  return result;
}

uint64_t partial apply for closure #1 in ObjectAssociation.count.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in ObjectAssociation.count.getter(v1, a1);
}

uint64_t ObjectAssociation.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_allocObject();
  ObjectAssociation.init()(v0, v1, v2, v3);
  return v0;
}

_QWORD *ObjectAssociation.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_1_8(a1, a2, a3, a4);
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  v4[2] = Dictionary.init(dictionaryLiteral:)();
  v5 = type metadata accessor for DispatchSemaphoreLock();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = dispatch_semaphore_create(1);
  v4[6] = v5;
  v4[7] = &protocol witness table for DispatchSemaphoreLock;
  v4[3] = v6;
  return v4;
}

uint64_t key path setter for ObjectAssociation.subscript(_:) : <A>ObjectAssociation<A>A(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t);
  uint64_t v14;

  v6 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v14 - v8;
  v10 = *a3;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v14 - v8, a1);
  v12 = *(uint64_t (**)(char *, uint64_t))(**(_QWORD **)a2 + 152);
  swift_unknownObjectRetain();
  return v12(v9, v10);
}

uint64_t ObjectAssociation.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v6 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v7 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_2_9();
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v22 - v11;
  v13 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v10, v14);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, a1, v7);
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v6) == 1)
  {
    v17 = *(void (**)(char *, uint64_t))(v3 + 8);
    v17(v12, v7);
    ObjectAssociation.clear(for:)(a2, v18, v19, v20);
    swift_unknownObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v17)(a1, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, v6);
    ObjectAssociation.store(value:for:)((uint64_t)v16, a2);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v6);
  }
}

void (*ObjectAssociation.subscript.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = OUTLINED_FUNCTION_3_6();
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  ObjectAssociation.value(for:)(a2);
  return ObjectAssociation.subscript.modify;
}

void ObjectAssociation.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v5 = v2[2];
    v6 = v2[3];
    v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    swift_unknownObjectRetain();
    ObjectAssociation.subscript.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    v8 = *v2;
    swift_unknownObjectRetain();
    ObjectAssociation.subscript.setter((uint64_t)v4, v8);
  }
  free(v4);
  free(v3);
  free(v2);
}

Swift::Void __swiftcall ObjectAssociation.clearAll()()
{
  ObjectAssociation.clearAll()((uint64_t)partial apply for closure #1 in ObjectAssociation.clearAll());
}

uint64_t closure #1 in ObjectAssociation.clearAll()(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  swift_beginAccess();
  type metadata accessor for ObjectEntry(0, *(_QWORD *)(v1 + 80), v2, v3);
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(0);
  return swift_endAccess();
}

Swift::Void __swiftcall ObjectAssociation.flush()()
{
  ObjectAssociation.clearAll()((uint64_t)partial apply for closure #1 in ObjectAssociation.flush());
}

uint64_t ObjectAssociation.clearAll()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v1[6]);
  return OUTLINED_FUNCTION_0_8(a1, (uint64_t)v1, MEMORY[0x1E0DEE9C0] + 8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 24));
}

uint64_t closure #1 in ObjectAssociation.flush()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD v16[6];

  type metadata accessor for ObjectEntry(255, *(_QWORD *)(*(_QWORD *)a1 + 80), a3, a4);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v16 - v7;
  ObjectAssociation.cache.getter();
  v9 = swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16[1] = v9;
  v10 = type metadata accessor for Dictionary.Keys();
  MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DE9ED0], v10);
  v11 = Sequence.filter(_:)();
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = (uint64_t *)(v11 + 32);
    swift_beginAccess();
    type metadata accessor for Dictionary();
    do
    {
      v14 = *v13++;
      v16[5] = v14;
      Dictionary.removeValue(forKey:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      --v12;
    }
    while (v12);
    swift_endAccess();
  }
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in ObjectAssociation.flush()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = type metadata accessor for ObjectEntry(255, *(_QWORD *)(*(_QWORD *)a2 + 80), a3, a4);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v15 - v9;
  v11 = *a1;
  v12 = ObjectAssociation.cache.getter();
  v16 = v11;
  MEMORY[0x1C3BCDD88](&v16, v12, MEMORY[0x1E0DEA520], v5, MEMORY[0x1E0DEA528]);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v5))
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return 1;
  }
  v14 = MEMORY[0x1C3BCEF88](v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (!v14)
    return 1;
  swift_unknownObjectRelease();
  return 0;
}

uint64_t ObjectAssociation.store(value:for:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = v2[7];
  __swift_project_boxed_opaque_existential_1(v2 + 3, v2[6]);
  v8 = v2;
  v9 = a2;
  v10 = a2;
  v11 = a1;
  return OUTLINED_FUNCTION_0_8((uint64_t)partial apply for closure #1 in ObjectAssociation.store(value:for:), (uint64_t)&v7, MEMORY[0x1E0DEE9C0] + 8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 24));
}

uint64_t closure #1 in ObjectAssociation.store(value:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v18[6];

  v6 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ObjectEntry(255, v6, v10, v11);
  v13 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a4, v6);
  swift_unknownObjectRetain();
  ObjectEntry.init(key:value:)((uint64_t)v9, v6, (uint64_t)v16);
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v12);
  v18[5] = a2;
  swift_beginAccess();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  return swift_endAccess();
}

uint64_t ObjectAssociation.value(for:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t (*)@<X0>(uint64_t@<X3>, uint64_t@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = v1[6];
  v4 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v3);
  v9 = v1;
  v10 = a1;
  v11 = a1;
  v5 = *(uint64_t (**)(uint64_t (*)@<X0>(uint64_t@<X3>, uint64_t@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))(v4 + 24);
  v6 = OUTLINED_FUNCTION_3_6();
  return v5(partial apply for closure #1 in ObjectAssociation.value(for:), &v8, v6, v3, v4);
}

uint64_t closure #1 in ObjectAssociation.value(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];

  v29 = a3;
  v32 = a5;
  v33 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v6 = type metadata accessor for ObjectEntry(255, v33, a3, a4);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v30 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v28 - v14;
  v16 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v13, v17);
  v19 = (char *)&v28 - v18;
  v20 = ObjectAssociation.cache.getter();
  v31 = a2;
  v34[0] = a2;
  MEMORY[0x1C3BCDD88](v34, v20, MEMORY[0x1E0DEA520], v6, MEMORY[0x1E0DEA528]);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v15, v6);
    v21 = MEMORY[0x1C3BCEF88](v19);
    if (v21)
    {
      v22 = v21;
      swift_unknownObjectRelease();
      if (v22 == v29)
      {
        v26 = v32;
        v25 = v33;
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v32, &v19[*(int *)(v6 + 28)], v33);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v6);
        v24 = 0;
        return __swift_storeEnumTagSinglePayload(v26, v24, 1, v25);
      }
    }
    v34[4] = v31;
    swift_beginAccess();
    type metadata accessor for Dictionary();
    v23 = v30;
    Dictionary.removeValue(forKey:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v23, v7);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v6);
  }
  v24 = 1;
  v26 = v32;
  v25 = v33;
  return __swift_storeEnumTagSinglePayload(v26, v24, 1, v25);
}

uint64_t ObjectAssociation.clear(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  _QWORD *v16;
  uint64_t v17;

  OUTLINED_FUNCTION_1_8(a1, a2, a3, a4);
  v7 = OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_2_9();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v15[-v10];
  v12 = v4[6];
  v13 = v4[7];
  __swift_project_boxed_opaque_existential_1(v4 + 3, v12);
  v16 = v4;
  v17 = a1;
  (*(void (**)(uint64_t (*)(), _BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 24))(partial apply for closure #1 in ObjectAssociation.clear(for:), v15, v7, v12, v13);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v11, v7);
}

uint64_t closure #1 in ObjectAssociation.clear(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  swift_beginAccess();
  type metadata accessor for ObjectEntry(255, *(_QWORD *)(v1 + 80), v2, v3);
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  return swift_endAccess();
}

uint64_t ObjectAssociation.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return v0;
}

uint64_t ObjectAssociation.__deallocating_deinit()
{
  ObjectAssociation.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ObjectEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObjectEntry);
}

uint64_t partial apply for closure #1 in ObjectAssociation.clearAll()()
{
  uint64_t *v0;

  return closure #1 in ObjectAssociation.clearAll()(v0);
}

uint64_t partial apply for closure #1 in ObjectAssociation.flush()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in ObjectAssociation.flush()(v4, a2, a3, a4);
}

uint64_t sub_1C2F42048(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 144))(*a2);
}

uint64_t sub_1C2F42078()
{
  return 8;
}

_QWORD *sub_1C2F42084(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for ObjectAssociation()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ObjectAssociation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObjectAssociation);
}

uint64_t method lookup function for ObjectAssociation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ObjectAssociation.count.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ObjectAssociation.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of ObjectAssociation.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ObjectAssociation.subscript.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ObjectAssociation.subscript.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ObjectAssociation.clearAll()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of ObjectAssociation.flush()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t type metadata completion function for ObjectEntry()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ObjectEntry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  v5 = v4 + ((unsigned __int16)((v3 & 0xF8) + 23) & (unsigned __int16)~(v3 & 0xF8) & 0x1F8);
  swift_retain();
  return v5;
}

uint64_t destroy for ObjectEntry(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakDestroy();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for ObjectEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = swift_unknownObjectWeakCopyInit();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(unsigned __int8 *)(v7 + 80) + 8 + v6) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for ObjectEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = swift_unknownObjectWeakCopyAssign();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(unsigned __int8 *)(v7 + 80) + 8 + v6) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for ObjectEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = swift_unknownObjectWeakTakeInit();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(unsigned __int8 *)(v7 + 80) + 8 + v6) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for ObjectEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = swift_unknownObjectWeakTakeAssign();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(unsigned __int8 *)(v7 + 80) + 8 + v6) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectEntry(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_18;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v5 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v12 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v12 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return __swift_getEnumTagSinglePayload((a1 + v7 + 8) & ~v7, v6, v4);
      return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_18;
LABEL_11:
  v13 = (v11 - 1) << v10;
  if (v9 > 3)
    v13 = 0;
  if (!(_DWORD)v9)
    return (v6 + v13 + 1);
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1C2F42478 + 4 * byte_1C2F81310[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for ObjectEntry(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  char v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(_QWORD *)(v6 + 64);
  v9 = 8 * v8;
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v8 <= 3)
    {
      v14 = ((v11 + ~(-1 << v9)) >> v9) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v15 = v13 & ~(-1 << v9);
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t partial apply for closure #1 in closure #1 in ObjectAssociation.flush()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in closure #1 in ObjectAssociation.flush()(a1, v4, a3, a4) & 1;
}

uint64_t partial apply for closure #1 in ObjectAssociation.store(value:for:)()
{
  uint64_t *v0;

  return closure #1 in ObjectAssociation.store(value:for:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in ObjectAssociation.clear(for:)()
{
  uint64_t v0;

  return closure #1 in ObjectAssociation.clear(for:)(*(uint64_t **)(v0 + 16));
}

uint64_t partial apply for closure #1 in ObjectAssociation.value(for:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in ObjectAssociation.value(for:)(v2[2], v2[3], v2[4], a1, a2);
}

uint64_t OUTLINED_FUNCTION_0_8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  return a4(a1, a2, a3, v4, v5);
}

uint64_t OUTLINED_FUNCTION_1_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return type metadata accessor for ObjectEntry(255, *(_QWORD *)(*(_QWORD *)v4 + 80), a3, a4);
}

uint64_t OUTLINED_FUNCTION_3_6()
{
  return type metadata accessor for Optional();
}

uint64_t key path getter for CoreTelephonyAPIBridge.createAndLaunchConnection : CoreTelephonyAPIBridge@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer);
  a2[1] = v5;
  return swift_retain();
}

uint64_t key path setter for CoreTelephonyAPIBridge.createAndLaunchConnection : CoreTelephonyAPIBridge(uint64_t *a1, void (**a2)())
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out OpaquePointer);
  a2[1] = (void (*)())v5;
  return result;
}

void CoreTelephonyAPIBridge.createAndLaunchConnection.getter()
{
  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_31();
}

void CoreTelephonyAPIBridge.createAndLaunchConnection.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_9_6();
  swift_release();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_9_0();
}

uint64_t (*CoreTelephonyAPIBridge.createAndLaunchConnection.modify())()
{
  return destructiveProjectEnumData for InputOrigin;
}

uint64_t key path getter for CoreTelephonyAPIBridge.createOnTargetQueue : CoreTelephonyAPIBridge@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned CTError);
  a2[1] = v5;
  return swift_retain();
}

uint64_t key path setter for CoreTelephonyAPIBridge.createOnTargetQueue : CoreTelephonyAPIBridge(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed OpaquePointer) -> (@out CTError);
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

void CoreTelephonyAPIBridge.createOnTargetQueue.getter()
{
  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_31();
}

void CoreTelephonyAPIBridge.createOnTargetQueue.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_9_6();
  swift_release();
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v0;
  OUTLINED_FUNCTION_9_0();
}

uint64_t (*CoreTelephonyAPIBridge.createOnTargetQueue.modify())()
{
  return destructiveProjectEnumData for InputOrigin;
}

uint64_t key path getter for CoreTelephonyAPIBridge.registerBlockForNotification : CoreTelephonyAPIBridge@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = _ss13OpaquePointerVSo11CFStringRefaSo012CFDictionaryD0aSgIegg_So7CTErroraIegyggd_AbDxq_Ri_zRi0_zRi__Ri0__r0_lyAGytIsegnr_AIIegnnnr_TRTA;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t *@<X1>, uint64_t *@<X2>, uint64_t *@<X8>))v5;
  return swift_retain();
}

uint64_t _ss13OpaquePointerVSo11CFStringRefaSo012CFDictionaryD0aSgIegg_So7CTErroraIegyggd_AbDxq_Ri_zRi0_zRi__Ri0__r0_lyAGytIsegnr_AIIegnnnr_TR@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t (*)(uint64_t a1), uint64_t)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v7 = *a1;
  v8 = *a2;
  v10 = *a3;
  v9 = a3[1];
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  swift_retain();
  v12 = a4(v7, v8, partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CFDictionaryRef?) -> (@out ()), v11);
  result = swift_release();
  *a5 = v12;
  return result;
}

uint64_t key path setter for CoreTelephonyAPIBridge.registerBlockForNotification : CoreTelephonyAPIBridge(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 32) = _ss13OpaquePointerVSo11CFStringRefaxq_Ri_zRi0_zRi__Ri0__r0_lySo012CFDictionaryD0aSgytIsegnr_So7CTErroraIegnnnr_AbdGIegg_AIIegyggd_TRTA;
  *(_QWORD *)(a2 + 40) = v5;
  return result;
}

uint64_t _ss13OpaquePointerVSo11CFStringRefaxq_Ri_zRi0_zRi__Ri0__r0_lySo012CFDictionaryD0aSgytIsegnr_So7CTErroraIegnnnr_AbdGIegg_AIIegyggd_TR(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t *, uint64_t *, _QWORD *))
{
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;

  v12 = a2;
  v13 = a1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  v11[0] = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CFDictionaryRef?) -> ();
  v11[1] = v8;
  swift_retain();
  a5(&v10, &v13, &v12, v11);
  swift_release();
  return v10;
}

void CoreTelephonyAPIBridge.registerBlockForNotification.getter()
{
  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_31();
}

void CoreTelephonyAPIBridge.registerBlockForNotification.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_9_6();
  swift_release();
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v0;
  OUTLINED_FUNCTION_9_0();
}

uint64_t (*CoreTelephonyAPIBridge.registerBlockForNotification.modify())()
{
  return destructiveProjectEnumData for InputOrigin;
}

uint64_t key path getter for CoreTelephonyAPIBridge.unregisterForAllNotifications : CoreTelephonyAPIBridge@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned CTError);
  a2[1] = v5;
  return swift_retain();
}

uint64_t key path setter for CoreTelephonyAPIBridge.unregisterForAllNotifications : CoreTelephonyAPIBridge(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 48) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed OpaquePointer) -> (@out CTError);
  *(_QWORD *)(a2 + 56) = v5;
  return result;
}

void CoreTelephonyAPIBridge.unregisterForAllNotifications.getter()
{
  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_31();
}

void CoreTelephonyAPIBridge.unregisterForAllNotifications.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_9_6();
  swift_release();
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v0;
  OUTLINED_FUNCTION_9_0();
}

uint64_t (*CoreTelephonyAPIBridge.unregisterForAllNotifications.modify())()
{
  return destructiveProjectEnumData for InputOrigin;
}

const char *one-time initialization function for clientIdentifier()
{
  const char *result;

  result = closure #1 in variable initialization expression of static CoreTelephonyAPIBridge.clientIdentifier();
  static CoreTelephonyAPIBridge.clientIdentifier = (uint64_t)result;
  return result;
}

const char *closure #1 in variable initialization expression of static CoreTelephonyAPIBridge.clientIdentifier()
{
  const char *result;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = getprogname();
  if (result)
  {
    v4 = String.init(cString:)();
    v5 = v1;
    v2._countAndFlagsBits = 0x614D20544152692DLL;
    v2._object = (void *)0xED0000726567616ELL;
    String.append(_:)(v2);
    v3 = MEMORY[0x1C3BCDDDC](v4, v5);
    swift_bridgeObjectRelease();
    return (const char *)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *CoreTelephonyAPIBridge.clientIdentifier.unsafeMutableAddressor()
{
  if (one-time initialization token for clientIdentifier != -1)
    swift_once();
  return &static CoreTelephonyAPIBridge.clientIdentifier;
}

id static CoreTelephonyAPIBridge.clientIdentifier.getter()
{
  if (one-time initialization token for clientIdentifier != -1)
    swift_once();
  return (id)static CoreTelephonyAPIBridge.clientIdentifier;
}

void CoreTelephonyAPIBridge.init()(uint64_t (**a1)()@<X8>)
{
  *a1 = closure #1 in CoreTelephonyAPIBridge.init();
  a1[1] = 0;
  a1[2] = (uint64_t (*)())closure #2 in CoreTelephonyAPIBridge.init();
  a1[3] = 0;
  a1[4] = (uint64_t (*)())closure #3 in CoreTelephonyAPIBridge.init();
  a1[5] = 0;
  a1[6] = closure #4 in CoreTelephonyAPIBridge.init();
  a1[7] = 0;
}

uint64_t closure #1 in CoreTelephonyAPIBridge.init()()
{
  uint64_t result;

  if (one-time initialization token for clientIdentifier != -1)
    swift_once();
  result = _CTServerConnectionCreateAndLaunchWithIdentifier();
  if (!result)
    __break(1u);
  return result;
}

void closure #2 in CoreTelephonyAPIBridge.init()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for clientIdentifier != -1)
    swift_once();
  OUTLINED_FUNCTION_10_4((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef?, @guaranteed CFDictionaryRef?) -> (), MEMORY[0x1E0C809B0], 1107296256, v2, v3);
  _CTServerConnectionCreateOnTargetQueue();
  OUTLINED_FUNCTION_7_6();
  if (!a1)
    __break(1u);
}

void thunk for @escaping @callee_guaranteed (@guaranteed CFStringRef?, @guaranteed CFDictionaryRef?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t closure #3 in CoreTelephonyAPIBridge.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_10_4((uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed CFDictionaryRef?) -> (), MEMORY[0x1E0C809B0], 1107296256, v6, v7);
  swift_retain();
  swift_release();
  _CTServerConnectionRegisterBlockForNotification();
  OUTLINED_FUNCTION_7_6();
  return a4;
}

void thunk for @escaping @callee_guaranteed (@guaranteed CFDictionaryRef?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t destroy for CoreTelephonyAPIBridge()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for CoreTelephonyAPIBridge(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for CoreTelephonyAPIBridge(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for CoreTelephonyAPIBridge(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreTelephonyAPIBridge(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreTelephonyAPIBridge(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreTelephonyAPIBridge()
{
  return &type metadata for CoreTelephonyAPIBridge;
}

uint64_t sub_1C2F43330()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed OpaquePointer) -> (@out CTError)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_1_9(a1, a2, a3, a4, a5, a6, a7, a8, v8, v9);
  OUTLINED_FUNCTION_27_2();
}

void partial apply for thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned CTError)(_QWORD *a1)
{
  uint64_t *v1;

  *v1 = OUTLINED_FUNCTION_6_3(a1);
  OUTLINED_FUNCTION_31();
}

uint64_t _ss13OpaquePointerVSo11CFStringRefaxq_Ri_zRi0_zRi__Ri0__r0_lySo012CFDictionaryD0aSgytIsegnr_So7CTErroraIegnnnr_AbdGIegg_AIIegyggd_TRTA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return _ss13OpaquePointerVSo11CFStringRefaxq_Ri_zRi0_zRi__Ri0__r0_lySo012CFDictionaryD0aSgytIsegnr_So7CTErroraIegnnnr_AbdGIegg_AIIegyggd_TR(a1, a2, a3, a4, *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *, _QWORD *))(v4 + 16));
}

void partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CFDictionaryRef?) -> ()(_QWORD *a1)
{
  uint64_t v1;

  (*(void (**)(_QWORD))(v1 + 16))(*a1);
  OUTLINED_FUNCTION_31();
}

uint64_t _ss13OpaquePointerVSo11CFStringRefaSo012CFDictionaryD0aSgIegg_So7CTErroraIegyggd_AbDxq_Ri_zRi0_zRi__Ri0__r0_lyAGytIsegnr_AIIegnnnr_TRTA@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  return _ss13OpaquePointerVSo11CFStringRefaSo012CFDictionaryD0aSgIegg_So7CTErroraIegyggd_AbDxq_Ri_zRi0_zRi__Ri0__r0_lyAGytIsegnr_AIIegnnnr_TR(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t))(v4 + 16), a4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CFDictionaryRef?) -> (@out ())(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

void partial apply for thunk for @escaping @callee_guaranteed () -> (@out OpaquePointer)()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v1);
  OUTLINED_FUNCTION_27_2();
}

void partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer)(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = (*(uint64_t (**)(void))(v1 + 16))();
  OUTLINED_FUNCTION_31();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

_QWORD *OUTLINED_FUNCTION_1_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *(*v11)(uint64_t *__return_ptr, uint64_t *);

  v11 = *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t *))(v10 + 16);
  a10 = a1;
  return v11(&a9, &a10);
}

uint64_t OUTLINED_FUNCTION_6_3(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void OUTLINED_FUNCTION_7_6()
{
  const void *v0;

  _Block_release(v0);
}

void *OUTLINED_FUNCTION_10_4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  a4 = a1;
  a5 = v5;
  return _Block_copy(&a2);
}

void TransformationCapability.type.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t TransformationCapability.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

BOOL static TransformationCapability.TransformationCapabilityType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void TransformationCapability.TransformationCapabilityType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static TransformationCapability.TransformationCapabilityType.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void TransformationCapability.TransformationCapabilityType.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t TransformationCapability.TransformationCapabilityType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x64656D616ELL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465707974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t TransformationCapability.TransformationCapabilityType.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t TransformationCapability.TransformationCapabilityType.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t TransformationCapability.TransformationCapabilityType.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6465707974;
  else
    return 0x64656D616ELL;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TransformationCapability.TransformationCapabilityType.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static TransformationCapability.TransformationCapabilityType.CodingKeys.== infix(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance TransformationCapability.TransformationCapabilityType.CodingKeys()
{
  char *v0;

  TransformationCapability.TransformationCapabilityType.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance TransformationCapability.TransformationCapabilityType.CodingKeys(uint64_t a1)
{
  char *v1;

  TransformationCapability.TransformationCapabilityType.CodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TransformationCapability.TransformationCapabilityType.CodingKeys()
{
  char *v0;

  return TransformationCapability.TransformationCapabilityType.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TransformationCapability.TransformationCapabilityType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TransformationCapability.TransformationCapabilityType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance TransformationCapability.TransformationCapabilityType.CodingKeys()
{
  return TransformationCapability.TransformationCapabilityType.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TransformationCapability.TransformationCapabilityType.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = TransformationCapability.TransformationCapabilityType.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TransformationCapability.TransformationCapabilityType.CodingKeys()
{
  lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TransformationCapability.TransformationCapabilityType.CodingKeys()
{
  lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TransformationCapability.TransformationCapabilityType.NamedCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t TransformationCapability.TransformationCapabilityType.NamedCodingKeys.stringValue.getter()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = TransformationCapability.TransformationCapabilityType.NamedCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys()
{
  return TransformationCapability.TransformationCapabilityType.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized == infix<A>(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys()
{
  lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys()
{
  lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys()
{
  lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys()
{
  lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys();
  return CodingKey.debugDescription.getter();
}

void TransformationCapability.TransformationCapabilityType.encode(to:)()
{
  char *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_21_4();
  v3 = v2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TransformationCapability.TransformationCapabilityType.TypedCodingKeys>);
  v20 = *(_QWORD *)(v4 - 8);
  v21 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  OUTLINED_FUNCTION_24_4();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TransformationCapability.TransformationCapabilityType.NamedCodingKeys>);
  v18 = *(_QWORD *)(v6 - 8);
  v19 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  OUTLINED_FUNCTION_34();
  v10 = v9 - v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TransformationCapability.TransformationCapabilityType.CodingKeys>);
  v12 = OUTLINED_FUNCTION_26_4(v11);
  MEMORY[0x1E0C80A78](v12, v13);
  OUTLINED_FUNCTION_34();
  v16 = v15 - v14;
  v17 = *v0;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v17 & 1) != 0)
  {
    OUTLINED_FUNCTION_29_2();
    OUTLINED_FUNCTION_22_3();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v1, v21);
  }
  else
  {
    lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys();
    OUTLINED_FUNCTION_22_3();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v10, v19);
  }
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v16, v11);
  OUTLINED_FUNCTION_0_9();
}

unint64_t lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.TransformationCapabilityType.CodingKeys, &unk_1E7CD7990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.TransformationCapabilityType.CodingKeys, &unk_1E7CD7990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.TransformationCapabilityType.CodingKeys, &unk_1E7CD7990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.TransformationCapabilityType.CodingKeys, &unk_1E7CD7990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.TransformationCapabilityType.TypedCodingKeys, &unk_1E7CD79D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.TransformationCapabilityType.TypedCodingKeys, &unk_1E7CD79D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.TransformationCapabilityType.TypedCodingKeys, &unk_1E7CD79D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.TransformationCapabilityType.NamedCodingKeys, &unk_1E7CD79B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.TransformationCapabilityType.NamedCodingKeys, &unk_1E7CD79B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.TransformationCapabilityType.NamedCodingKeys, &unk_1E7CD79B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys);
  }
  return result;
}

void TransformationCapability.TransformationCapabilityType.hashValue.getter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = OUTLINED_FUNCTION_17_4();
  OUTLINED_FUNCTION_32_1(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_34_0();
}

void TransformationCapability.TransformationCapabilityType.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_21_4();
  v3 = v2;
  v35 = v4;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TransformationCapability.TransformationCapabilityType.TypedCodingKeys>);
  v5 = OUTLINED_FUNCTION_26_4(v33);
  MEMORY[0x1E0C80A78](v5, v6);
  OUTLINED_FUNCTION_34();
  v36 = v8 - v7;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TransformationCapability.TransformationCapabilityType.NamedCodingKeys>);
  v9 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v10);
  OUTLINED_FUNCTION_34();
  v13 = v12 - v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TransformationCapability.TransformationCapabilityType.CodingKeys>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  OUTLINED_FUNCTION_25_4();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.CodingKeys and conformance TransformationCapability.TransformationCapabilityType.CodingKeys();
  OUTLINED_FUNCTION_28_2();
  if (v0)
    goto LABEL_9;
  v31 = v13;
  v32 = v3;
  v17 = KeyedDecodingContainer.allKeys.getter();
  v18 = *(_QWORD *)(v17 + 16);
  v19 = v14;
  if (!v18)
  {
    v26 = v1;
LABEL_8:
    v27 = type metadata accessor for DecodingError();
    OUTLINED_FUNCTION_32_0();
    v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v29 = &type metadata for TransformationCapability.TransformationCapabilityType;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x1E0DEC450], v27);
    swift_willThrow();
    OUTLINED_FUNCTION_14_5();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v26, v19);
    v3 = v32;
LABEL_9:
    v30 = (uint64_t)v3;
    goto LABEL_10;
  }
  v20 = *(_BYTE *)(v17 + 32);
  specialized ArraySlice.subscript.getter(1, v18, v17, v17 + 32, 0, (2 * v18) | 1);
  v22 = v21;
  v24 = v23;
  swift_bridgeObjectRelease();
  if (v22 != v24 >> 1)
  {
    v26 = v1;
    v19 = v14;
    goto LABEL_8;
  }
  if ((v20 & 1) != 0)
  {
    OUTLINED_FUNCTION_29_2();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v25 = v35;
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v33);
  }
  else
  {
    lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.NamedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.NamedCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v25 = v35;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v31, v34);
  }
  OUTLINED_FUNCTION_14_5();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v1, v14);
  *v25 = v20;
  v30 = (uint64_t)v32;
LABEL_10:
  __swift_destroy_boxed_opaque_existential_1(v30);
  OUTLINED_FUNCTION_0_9();
}

void protocol witness for Decodable.init(from:) in conformance TransformationCapability.TransformationCapabilityType()
{
  TransformationCapability.TransformationCapabilityType.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance TransformationCapability.TransformationCapabilityType()
{
  TransformationCapability.TransformationCapabilityType.encode(to:)();
}

uint64_t TransformationCapability.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *((_QWORD *)v0 + 3);
  Hasher._combine(_:)(*v0);
  OUTLINED_FUNCTION_13_6();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_15_0();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_19();
  String.hash(into:)();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_15_0();
  String.hash(into:)();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_13_0();
  return OUTLINED_FUNCTION_12_5();
}

uint64_t static TransformationCapability.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v8 = a2[3];
  v7 = a2[4];
  v10 = a2[5];
  v9 = a2[6];
  v11 = a1[1] == a2[1] && a1[2] == a2[2];
  if (((v12 = a2[7], v11) || (OUTLINED_FUNCTION_3_0() & 1) != 0)
    && v2 == v8
    && (v3 == v7 ? (v13 = v4 == v10) : (v13 = 0),
        (v13 || (OUTLINED_FUNCTION_3_0() & 1) != 0)
     && (v5 == v9 ? (v14 = v6 == v12) : (v14 = 0), v14 || (OUTLINED_FUNCTION_3_0() & 1) != 0)))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t TransformationCapability.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEA0000000000726FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void TransformationCapability.TransformationCapabilityType.CodingKeys.hashValue.getter(char a1)
{
  OUTLINED_FUNCTION_17_4();
  Hasher._combine(_:)(a1 & 1);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_34_0();
}

uint64_t TransformationCapability.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7470697263736564;
  else
    return 1701869940;
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance TransformationCapability.TransformationCapabilityType.CodingKeys()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = Hasher.init(_seed:)();
  OUTLINED_FUNCTION_32_1(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_34_0();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TransformationCapability.CodingKeys()
{
  char *v0;

  return TransformationCapability.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TransformationCapability.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TransformationCapability.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TransformationCapability.CodingKeys()
{
  lazy protocol witness table accessor for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TransformationCapability.CodingKeys()
{
  lazy protocol witness table accessor for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void TransformationCapability.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_21_4();
  v3 = v2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TransformationCapability.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  OUTLINED_FUNCTION_25_4();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType();
  OUTLINED_FUNCTION_8_5();
  if (!v0)
  {
    lazy protocol witness table accessor for type TransformationDescriptor and conformance TransformationDescriptor();
    OUTLINED_FUNCTION_8_5();
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
  OUTLINED_FUNCTION_0_9();
}

void TransformationCapability.hashValue.getter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  OUTLINED_FUNCTION_10_5();
  v0 = Hasher.init(_seed:)();
  OUTLINED_FUNCTION_33_1(v0, v1, v2, v3, v4, v5, v6, v7, v16, v18);
  OUTLINED_FUNCTION_13_6();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_15_0();
  v8 = OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_31_1(v8, v9, v10, v11, v12, v13, v14, v15, v17, v19);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_19_2();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_14();
}

void TransformationCapability.init(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  OUTLINED_FUNCTION_21_4();
  v2 = v1;
  v4 = v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TransformationCapability.CodingKeys>);
  MEMORY[0x1E0C80A78](v5, v6);
  OUTLINED_FUNCTION_24_4();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  lazy protocol witness table accessor for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys();
  OUTLINED_FUNCTION_28_2();
  if (!v0)
  {
    lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType();
    OUTLINED_FUNCTION_6_4();
    lazy protocol witness table accessor for type TransformationDescriptor and conformance TransformationDescriptor();
    OUTLINED_FUNCTION_6_4();
    OUTLINED_FUNCTION_23_2();
    *(_BYTE *)v4 = v7;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v8;
    *(_OWORD *)(v4 + 24) = v9;
    *(_OWORD *)(v4 + 40) = v10;
    *(_QWORD *)(v4 + 56) = v11;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  OUTLINED_FUNCTION_0_9();
}

void __swiftcall TransformationCapability.init(type:descriptor:)(SiriUtilities::TransformationCapability *__return_ptr retstr, SiriUtilities::TransformationCapability::TransformationCapabilityType type, SiriUtilities::TransformationDescriptor *descriptor)
{
  uint64_t countAndFlagsBits;
  void *object;
  void *v5;
  __int128 v6;

  countAndFlagsBits = descriptor->id.name._countAndFlagsBits;
  object = descriptor->id.name._object;
  v5 = descriptor->outputType.encoding._object;
  retstr->type = *(_BYTE *)type;
  retstr->descriptor.id.name._countAndFlagsBits = countAndFlagsBits;
  retstr->descriptor.id.name._object = object;
  v6 = *(_OWORD *)&descriptor->inputType.encoding._object;
  *(_OWORD *)&retstr->descriptor.id.version = *(_OWORD *)&descriptor->id.version;
  *(_OWORD *)&retstr->descriptor.inputType.encoding._object = v6;
  retstr->descriptor.outputType.encoding._object = v5;
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance TransformationCapability()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  OUTLINED_FUNCTION_10_5();
  v0 = Hasher.init(_seed:)();
  OUTLINED_FUNCTION_33_1(v0, v1, v2, v3, v4, v5, v6, v7, v16, v18);
  OUTLINED_FUNCTION_13_6();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_15_0();
  v8 = OUTLINED_FUNCTION_18_3();
  OUTLINED_FUNCTION_31_1(v8, v9, v10, v11, v12, v13, v14, v15, v17, v19);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_19_2();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_14();
}

void protocol witness for Decodable.init(from:) in conformance TransformationCapability()
{
  TransformationCapability.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance TransformationCapability()
{
  TransformationCapability.encode(to:)();
}

uint64_t specialized TransformationPluginPackage.exposedCapabilities()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  specialized TransformationPluginPackage.loadTransformationPlugin()();
  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(ObjectType, v1);
  if (one-time initialization token for kToTyped != -1)
    swift_once();
  v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v3, (void (*)(uint64_t *__return_ptr, _QWORD *))kToTyped);
  swift_bridgeObjectRelease();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32))(ObjectType, v1);
  if (one-time initialization token for kToNamed != -1)
    swift_once();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v5, (void (*)(uint64_t *__return_ptr, _QWORD *))kToNamed);
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)();
  swift_unknownObjectRelease();
  return v4;
}

uint64_t TransformationPluginPackage.exposedCapabilities()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  TransformationPluginPackage.loadTransformationPlugin()(a1, a2);
  v3 = v2;
  ObjectType = swift_getObjectType();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(ObjectType, v3);
  if (one-time initialization token for kToTyped != -1)
    swift_once();
  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v5, (void (*)(uint64_t *__return_ptr, _QWORD *))kToTyped);
  swift_bridgeObjectRelease();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3);
  if (one-time initialization token for kToNamed != -1)
    swift_once();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v7, (void (*)(uint64_t *__return_ptr, _QWORD *))kToNamed);
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)();
  swift_unknownObjectRelease();
  return v6;
}

void specialized TransformationPluginPackage.loadTransformationPlugin()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  if (one-time initialization token for pluginLoaderLog != -1)
    swift_once();
  specialized static Logger.withSignpost<A>(name:log:completion:)((uint64_t)"LoadPlugin", 10, 2, (void *)static Logger.pluginLoaderLog, v0);
  if (!v1)
  {
    v3 = v2;
    swift_getObjectType();
    if (!dynamic_cast_existential_1_conditional(v3))
    {
      lazy protocol witness table accessor for type PluginBundleError and conformance PluginBundleError();
      swift_allocError();
      *v4 = 2;
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
}

uint64_t TransformationPluginPackage.loadTransformationPlugin()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE *v5;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 40))();
  if (!v2)
  {
    v4 = result;
    swift_getObjectType();
    result = dynamic_cast_existential_1_conditional(v4);
    if (!result)
    {
      lazy protocol witness table accessor for type PluginBundleError and conformance PluginBundleError();
      OUTLINED_FUNCTION_32_0();
      *v5 = 2;
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(uint64_t a1, void (*a2)(uint64_t *__return_ptr, _QWORD *))
{
  int64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _QWORD v26[2];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v38 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v38;
    v5 = (_QWORD *)(a1 + 80);
    do
    {
      v6 = *(v5 - 5);
      v8 = *(v5 - 2);
      v7 = *(v5 - 1);
      v9 = *v5;
      v26[0] = *(v5 - 6);
      v26[1] = v6;
      v27 = *((_OWORD *)v5 - 2);
      v28 = v8;
      v29 = v7;
      v30 = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2(&v31, v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = v31;
      v11 = v32;
      v12 = v33;
      v13 = v34;
      v15 = v35;
      v14 = v36;
      v16 = v37;
      v38 = v3;
      v18 = *(_QWORD *)(v3 + 16);
      v17 = *(_QWORD *)(v3 + 24);
      if (v18 >= v17 >> 1)
      {
        v20 = v37;
        v24 = v34;
        v22 = v36;
        v23 = v32;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1);
        v14 = v22;
        v11 = v23;
        v13 = v24;
        v16 = v20;
        v3 = v38;
      }
      *(_QWORD *)(v3 + 16) = v18 + 1;
      v19 = v3 + (v18 << 6);
      *(_BYTE *)(v19 + 32) = v10;
      *(_QWORD *)(v19 + 40) = v11;
      *(_QWORD *)(v19 + 48) = v12;
      *(_OWORD *)(v19 + 56) = v13;
      *(_QWORD *)(v19 + 72) = v15;
      *(_QWORD *)(v19 + 80) = v14;
      v5 += 7;
      *(_QWORD *)(v19 + 88) = v16;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t specialized TransformationPluginPackage.get(capability:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(_QWORD *__return_ptr, __int128 *, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *boxed_opaque_existential_0;
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  specialized TransformationPluginPackage.loadTransformationPlugin()();
  v5 = v4;
  v16 = *(_OWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 24);
  ObjectType = swift_getObjectType();
  v12 = *(_OWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 24);
  v7 = *(void (**)(_QWORD *__return_ptr, __int128 *, uint64_t, uint64_t))(v5 + 40);
  outlined retain of TypeIdentifier((uint64_t)&v16);
  v7(v14, &v12, ObjectType, v5);
  outlined release of TypeIdentifier((uint64_t)&v16);
  v8 = v15;
  if (v15)
  {
    v9 = __swift_project_boxed_opaque_existential_1(v14, v15);
    *(_QWORD *)(a2 + 24) = v8;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a2);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(boxed_opaque_existential_0, v9, v8);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    swift_unknownObjectRelease();
    result = outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v14, &demangling cache variable for type metadata for Transforming?);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t TransformationPluginPackage.get(capability:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  void (*v11)(_QWORD *__return_ptr, _QWORD *, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *boxed_opaque_existential_0;
  uint64_t result;
  _QWORD v16[3];
  _QWORD v17[3];
  uint64_t v18;

  v6 = a1[1];
  v5 = a1[2];
  v7 = a1[3];
  TransformationPluginPackage.loadTransformationPlugin()(a2, a3);
  v9 = v8;
  ObjectType = swift_getObjectType();
  v16[0] = v6;
  v16[1] = v5;
  v16[2] = v7;
  v11 = *(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t, uint64_t))(v9 + 40);
  OUTLINED_FUNCTION_19();
  v11(v17, v16, ObjectType, v9);
  OUTLINED_FUNCTION_7_0();
  v12 = v18;
  if (v18)
  {
    v13 = __swift_project_boxed_opaque_existential_1(v17, v18);
    *(_QWORD *)(a4 + 24) = v12;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a4);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(boxed_opaque_existential_0, v13, v12);
    swift_unknownObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    swift_unknownObjectRelease();
    result = outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v17, &demangling cache variable for type metadata for Transforming?);
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t NSBundle.getTransformations(key:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *object;
  uint64_t countAndFlagsBits;
  void *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v31;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  SiriUtilities::TransformationDescriptor_optional v36;
  uint64_t v37;
  _OWORD v38[3];

  v3 = v2;
  v5 = (void *)MEMORY[0x1C3BCDDDC]();
  v6 = objc_msgSend(v2, sel_objectForInfoDictionaryKey_, v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v38, 0, 32);
  }
  outlined init with take of Any?((uint64_t)v38, (uint64_t)&v36);
  if (!v36.value.inputType.encoding._countAndFlagsBits)
  {
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)&v36, &demangling cache variable for type metadata for Any?);
    return MEMORY[0x1E0DEE9D8];
  }
  v33 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
  if ((swift_dynamicCast() & 1) == 0)
    return MEMORY[0x1E0DEE9D8];
  v34 = *(_QWORD *)(v37 + 16);
  if (!v34)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v7 = 0;
  v8 = MEMORY[0x1E0DEE9D8];
  v31 = v3;
  do
  {
    v9 = swift_bridgeObjectRetain();
    TransformationDescriptor.init(from:)(&v36, (Swift::OpaquePointer)v9);
    object = v36.value.id.name._object;
    if (v36.value.id.name._object)
    {
      countAndFlagsBits = v36.value.id.name._countAndFlagsBits;
      v35 = *(_OWORD *)&v36.value.id.version;
      v13 = v36.value.outputType.encoding._countAndFlagsBits;
      v12 = v36.value.outputType.encoding._object;
      v14 = v36.value.inputType.encoding._object;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v8 = v28;
      }
      v15 = *(_QWORD *)(v8 + 16);
      if (v15 >= *(_QWORD *)(v8 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v8 = v29;
      }
      *(_QWORD *)(v8 + 16) = v15 + 1;
      v16 = v8 + 56 * v15;
      *(_QWORD *)(v16 + 32) = countAndFlagsBits;
      *(_QWORD *)(v16 + 40) = object;
      *(_OWORD *)(v16 + 48) = v35;
      *(_QWORD *)(v16 + 64) = v14;
      *(_QWORD *)(v16 + 72) = v13;
      *(_QWORD *)(v16 + 80) = v12;
    }
    else
    {
      if (one-time initialization token for logger != -1)
        swift_once();
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.logger);
      swift_bridgeObjectRetain_n();
      v18 = v3;
      v19 = Logger.logObject.getter();
      v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = swift_slowAlloc();
        v22 = swift_slowAlloc();
        v36.value.id.name._countAndFlagsBits = v22;
        *(_DWORD *)v21 = 136315650;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v21 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v33, &v36.value.id.name._countAndFlagsBits);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v21 + 12) = 2048;
        *(_QWORD *)(v21 + 14) = v7;
        *(_WORD *)(v21 + 22) = 2080;
        v23 = objc_msgSend(v18, sel_bundlePath);
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v26 = v25;

        *(_QWORD *)(v21 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v36.value.id.name._countAndFlagsBits);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2F2D000, v19, v20, "Could not load %s[%ld] from %s", (uint8_t *)v21, 0x20u);
        swift_arrayDestroy();
        v27 = v22;
        v3 = v31;
        MEMORY[0x1C3BCEEB0](v27, -1, -1);
        MEMORY[0x1C3BCEEB0](v21, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    ++v7;
  }
  while (v34 != v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t NSBundle.advertisedCapabilities()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = OUTLINED_FUNCTION_11_6((uint64_t)"SiriUtilitiesTypedTransformations");
  if (one-time initialization token for kToTyped != -1)
    swift_once();
  v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v0, (void (*)(uint64_t *__return_ptr, _QWORD *))kToTyped);
  OUTLINED_FUNCTION_7_0();
  v6 = v1;
  if (!*(_QWORD *)(v1 + 16))
  {
    v2 = NSBundle.getTransformations(key:)(0xD000000000000025, 0x80000001C2F852C0);
    v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v2, (void (*)(uint64_t *__return_ptr, _QWORD *))kToTyped);
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_7_0();
    v6 = v3;
  }
  v4 = OUTLINED_FUNCTION_11_6((uint64_t)"SiriUtilitiesNamedTransformations");
  if (one-time initialization token for kToNamed != -1)
    swift_once();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities24TransformationDescriptorVG_AF0F10CapabilityVs5NeverOTg504_s13d11Utilities24fg7VAA0C10h11VIgnr_AcEs5I11OIegnrzr_TRAhKIgnr_Tf1cn_n(v4, (void (*)(uint64_t *__return_ptr, _QWORD *))kToNamed);
  OUTLINED_FUNCTION_13_0();
  specialized Array.append<A>(contentsOf:)();
  return v6;
}

uint64_t protocol witness for PluginCapabilityExposing.advertisedCapabilities() in conformance NSBundle()
{
  return NSBundle.advertisedCapabilities()();
}

uint64_t protocol witness for PluginCapabilityExposing.exposedCapabilities() in conformance NSBundle()
{
  return specialized TransformationPluginPackage.exposedCapabilities()();
}

uint64_t protocol witness for PluginCapabilityExposing.get(capability:) in conformance NSBundle@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[4];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v3 = a1[3];
  v5[2] = a1[2];
  v5[3] = v3;
  return specialized TransformationPluginPackage.get(capability:)((uint64_t)v5, a2);
}

uint64_t closure #1 in toCapability(type:)@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v3 = a1[1];
  v6 = a1[4];
  v5 = a1[5];
  v7 = a1[6];
  *(_BYTE *)a3 = a2 & 1;
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = v3;
  *(_OWORD *)(a3 + 24) = *((_OWORD *)a1 + 1);
  *(_QWORD *)(a3 + 40) = v6;
  *(_QWORD *)(a3 + 48) = v5;
  *(_QWORD *)(a3 + 56) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for kToTyped()
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 1;
  kToTyped = (uint64_t)closure #1 in toCapability(type:)partial apply;
  unk_1ED4F80B0 = result;
  return result;
}

uint64_t one-time initialization function for kToNamed()
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 0;
  kToNamed = (uint64_t)partial apply for closure #1 in toCapability(type:);
  unk_1ED4F80A0 = result;
  return result;
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2)
    goto LABEL_10;
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0)
    return swift_unknownObjectRetain();
LABEL_12:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.CodingKeys, &unk_1E7CD7900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.CodingKeys, &unk_1E7CD7900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.CodingKeys, &unk_1E7CD7900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.CodingKeys, &unk_1E7CD7900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.CodingKeys and conformance TransformationCapability.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.TransformationCapabilityType, &type metadata for TransformationCapability.TransformationCapabilityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.TransformationCapabilityType, &type metadata for TransformationCapability.TransformationCapabilityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType;
  if (!lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability.TransformationCapabilityType, &type metadata for TransformationCapability.TransformationCapabilityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability.TransformationCapabilityType and conformance TransformationCapability.TransformationCapabilityType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationDescriptor and conformance TransformationDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationDescriptor, &type metadata for TransformationDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationDescriptor, &type metadata for TransformationDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationDescriptor, &type metadata for TransformationDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor and conformance TransformationDescriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationCapability and conformance TransformationCapability()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability;
  if (!lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability, &type metadata for TransformationCapability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability;
  if (!lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability, &type metadata for TransformationCapability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability;
  if (!lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability, &type metadata for TransformationCapability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability;
  if (!lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationCapability, &type metadata for TransformationCapability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationCapability and conformance TransformationCapability);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for NSBundle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type NSBundle and conformance NSBundle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type NSBundle and conformance NSBundle()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type NSBundle and conformance NSBundle;
  if (!lazy protocol witness table cache variable for type NSBundle and conformance NSBundle)
  {
    v1 = type metadata accessor for NSBundle();
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for NSBundle, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSBundle and conformance NSBundle);
  }
  return result;
}

uint64_t destroy for TransformationCapability()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TransformationCapability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TransformationCapability(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TransformationCapability(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformationCapability(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationCapability(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TransformationCapability()
{
  return &type metadata for TransformationCapability;
}

ValueMetadata *type metadata accessor for TransformationCapability.TransformationCapabilityType()
{
  return &type metadata for TransformationCapability.TransformationCapabilityType;
}

void *type metadata accessor for TransformationCapability.CodingKeys()
{
  return &unk_1E7CD7900;
}

uint64_t getEnumTagSinglePayload for TransformationCapability.TransformationCapabilityType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationCapability.TransformationCapabilityType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C2F45A1C + 4 * byte_1C2F81405[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C2F45A50 + 4 * asc_1C2F81400[v4]))();
}

uint64_t sub_1C2F45A50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F45A58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F45A60);
  return result;
}

uint64_t sub_1C2F45A6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F45A74);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C2F45A78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F45A80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for TransformationCapability.TransformationCapabilityType.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void *type metadata accessor for TransformationCapability.TransformationCapabilityType.CodingKeys()
{
  return &unk_1E7CD7990;
}

void *type metadata accessor for TransformationCapability.TransformationCapabilityType.NamedCodingKeys()
{
  return &unk_1E7CD79B0;
}

void *type metadata accessor for TransformationCapability.TransformationCapabilityType.TypedCodingKeys()
{
  return &unk_1E7CD79D0;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in toCapability(type:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in toCapability(type:)(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t OUTLINED_FUNCTION_5_7()
{
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_6_4()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_8_5()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_11_6@<X0>(uint64_t a1@<X8>)
{
  return NSBundle.getTransformations(key:)(0xD000000000000021, (a1 - 32) | 0x8000000000000000);
}

uint64_t OUTLINED_FUNCTION_12_5()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_13_6()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_14_5()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_17_4()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_18_3()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_19_2()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_22_3()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_23_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_26_4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = *(_QWORD *)(result - 8);
  return result;
}

uint64_t OUTLINED_FUNCTION_28_2()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

unint64_t OUTLINED_FUNCTION_29_2()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return lazy protocol witness table accessor for type TransformationCapability.TransformationCapabilityType.TypedCodingKeys and conformance TransformationCapability.TransformationCapabilityType.TypedCodingKeys();
}

void OUTLINED_FUNCTION_31_1(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

void OUTLINED_FUNCTION_32_1(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

void OUTLINED_FUNCTION_33_1(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

Swift::Void __swiftcall TransformationRegistry.registerCommonTransformers()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  void (*v3)(char *);

  if (one-time initialization token for _commonTransformers != -1)
    swift_once();
  v1 = *((_QWORD *)static TransformationRegistry._commonTransformers + 2);
  if (v1)
  {
    v2 = (char *)static TransformationRegistry._commonTransformers + 32;
    v3 = *(void (**)(char *))(*(_QWORD *)v0 + 184);
    swift_bridgeObjectRetain();
    do
    {
      v3(v2);
      v2 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
}

_QWORD *one-time initialization function for _commonTransformers()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C2F819D0;
  *(_QWORD *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, Int32>);
  *(_QWORD *)(v0 + 64) = &protocol witness table for Transformer<A, B>;
  v1 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 32) = v1;
  v1[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v1[3] = 0;
  v1[4] = specialized closure #1 in Transformer.init(transform:);
  v1[5] = 0;
  *(_QWORD *)(v0 + 96) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, Int64>);
  *(_QWORD *)(v0 + 104) = &protocol witness table for Transformer<A, B>;
  v2 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 72) = v2;
  v2[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v2[3] = 0;
  v2[4] = specialized closure #1 in Transformer.init(transform:);
  v2[5] = 0;
  *(_QWORD *)(v0 + 136) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, UInt32>);
  *(_QWORD *)(v0 + 144) = &protocol witness table for Transformer<A, B>;
  v3 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 112) = v3;
  v3[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v3[3] = 0;
  v3[4] = specialized closure #1 in Transformer.init(transform:);
  v3[5] = 0;
  *(_QWORD *)(v0 + 176) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, UInt64>);
  *(_QWORD *)(v0 + 184) = &protocol witness table for Transformer<A, B>;
  v4 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 152) = v4;
  v4[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v4[3] = 0;
  v4[4] = specialized closure #1 in Transformer.init(transform:);
  v4[5] = 0;
  *(_QWORD *)(v0 + 216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, Double>);
  *(_QWORD *)(v0 + 224) = &protocol witness table for Transformer<A, B>;
  v5 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 192) = v5;
  v5[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v5[3] = 0;
  v5[4] = specialized closure #1 in Transformer.init(transform:);
  v5[5] = 0;
  *(_QWORD *)(v0 + 256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, Float>);
  *(_QWORD *)(v0 + 264) = &protocol witness table for Transformer<A, B>;
  v6 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 232) = v6;
  v6[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v6[3] = 0;
  v6[4] = specialized closure #1 in Transformer.init(transform:);
  v6[5] = 0;
  *(_QWORD *)(v0 + 296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, String>);
  *(_QWORD *)(v0 + 304) = &protocol witness table for Transformer<A, B>;
  v7 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 272) = v7;
  v7[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v7[3] = 0;
  v7[4] = specialized closure #1 in Transformer.init(transform:);
  v7[5] = 0;
  *(_QWORD *)(v0 + 336) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int, Bool>);
  *(_QWORD *)(v0 + 344) = &protocol witness table for Transformer<A, B>;
  v8 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 312) = v8;
  v8[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v8[3] = 0;
  v8[4] = specialized closure #1 in Transformer.init(transform:);
  v8[5] = 0;
  *(_QWORD *)(v0 + 376) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, Int>);
  *(_QWORD *)(v0 + 384) = &protocol witness table for Transformer<A, B>;
  v9 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 352) = v9;
  v9[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v9[3] = 0;
  v9[4] = specialized closure #1 in Transformer.init(transform:);
  v9[5] = 0;
  *(_QWORD *)(v0 + 416) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, Int64>);
  *(_QWORD *)(v0 + 424) = &protocol witness table for Transformer<A, B>;
  v10 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 392) = v10;
  v10[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v10[3] = 0;
  v10[4] = specialized closure #1 in Transformer.init(transform:);
  v10[5] = 0;
  *(_QWORD *)(v0 + 456) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, UInt32>);
  *(_QWORD *)(v0 + 464) = &protocol witness table for Transformer<A, B>;
  v11 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 432) = v11;
  v11[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v11[3] = 0;
  v11[4] = specialized closure #1 in Transformer.init(transform:);
  v11[5] = 0;
  *(_QWORD *)(v0 + 496) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, UInt64>);
  *(_QWORD *)(v0 + 504) = &protocol witness table for Transformer<A, B>;
  v12 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 472) = v12;
  v12[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v12[3] = 0;
  v12[4] = specialized closure #1 in Transformer.init(transform:);
  v12[5] = 0;
  *(_QWORD *)(v0 + 536) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, Double>);
  *(_QWORD *)(v0 + 544) = &protocol witness table for Transformer<A, B>;
  v13 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 512) = v13;
  v13[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v13[3] = 0;
  v13[4] = specialized closure #1 in Transformer.init(transform:);
  v13[5] = 0;
  *(_QWORD *)(v0 + 576) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, Float>);
  *(_QWORD *)(v0 + 584) = &protocol witness table for Transformer<A, B>;
  v14 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 552) = v14;
  v14[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v14[3] = 0;
  v14[4] = specialized closure #1 in Transformer.init(transform:);
  v14[5] = 0;
  *(_QWORD *)(v0 + 616) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int32, String>);
  *(_QWORD *)(v0 + 624) = &protocol witness table for Transformer<A, B>;
  v15 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 592) = v15;
  v15[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v15[3] = 0;
  v15[4] = specialized closure #1 in Transformer.init(transform:);
  v15[5] = 0;
  *(_QWORD *)(v0 + 656) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, Int32>);
  *(_QWORD *)(v0 + 664) = &protocol witness table for Transformer<A, B>;
  v16 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 632) = v16;
  v16[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v16[3] = 0;
  v16[4] = specialized closure #1 in Transformer.init(transform:);
  v16[5] = 0;
  *(_QWORD *)(v0 + 696) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, Int>);
  *(_QWORD *)(v0 + 704) = &protocol witness table for Transformer<A, B>;
  v17 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 672) = v17;
  v17[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v17[3] = 0;
  v17[4] = specialized closure #1 in Transformer.init(transform:);
  v17[5] = 0;
  *(_QWORD *)(v0 + 736) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, UInt32>);
  *(_QWORD *)(v0 + 744) = &protocol witness table for Transformer<A, B>;
  v18 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 712) = v18;
  v18[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v18[3] = 0;
  v18[4] = specialized closure #1 in Transformer.init(transform:);
  v18[5] = 0;
  *(_QWORD *)(v0 + 776) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, UInt64>);
  *(_QWORD *)(v0 + 784) = &protocol witness table for Transformer<A, B>;
  v19 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 752) = v19;
  v19[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v19[3] = 0;
  v19[4] = specialized closure #1 in Transformer.init(transform:);
  v19[5] = 0;
  *(_QWORD *)(v0 + 816) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, Double>);
  *(_QWORD *)(v0 + 824) = &protocol witness table for Transformer<A, B>;
  v20 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 792) = v20;
  v20[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v20[3] = 0;
  v20[4] = specialized closure #1 in Transformer.init(transform:);
  v20[5] = 0;
  *(_QWORD *)(v0 + 856) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, Float>);
  *(_QWORD *)(v0 + 864) = &protocol witness table for Transformer<A, B>;
  v21 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 832) = v21;
  v21[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v21[3] = 0;
  v21[4] = specialized closure #1 in Transformer.init(transform:);
  v21[5] = 0;
  *(_QWORD *)(v0 + 896) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Int64, String>);
  *(_QWORD *)(v0 + 904) = &protocol witness table for Transformer<A, B>;
  v22 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 872) = v22;
  v22[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v22[3] = 0;
  v22[4] = specialized closure #1 in Transformer.init(transform:);
  v22[5] = 0;
  *(_QWORD *)(v0 + 936) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, Int32>);
  *(_QWORD *)(v0 + 944) = &protocol witness table for Transformer<A, B>;
  v23 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 912) = v23;
  v23[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v23[3] = 0;
  v23[4] = specialized closure #1 in Transformer.init(transform:);
  v23[5] = 0;
  *(_QWORD *)(v0 + 976) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, Int64>);
  *(_QWORD *)(v0 + 984) = &protocol witness table for Transformer<A, B>;
  v24 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 952) = v24;
  v24[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v24[3] = 0;
  v24[4] = specialized closure #1 in Transformer.init(transform:);
  v24[5] = 0;
  *(_QWORD *)(v0 + 1016) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, Int>);
  *(_QWORD *)(v0 + 1024) = &protocol witness table for Transformer<A, B>;
  v25 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 992) = v25;
  v25[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v25[3] = 0;
  v25[4] = specialized closure #1 in Transformer.init(transform:);
  v25[5] = 0;
  *(_QWORD *)(v0 + 1056) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, UInt64>);
  *(_QWORD *)(v0 + 1064) = &protocol witness table for Transformer<A, B>;
  v26 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1032) = v26;
  v26[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v26[3] = 0;
  v26[4] = specialized closure #1 in Transformer.init(transform:);
  v26[5] = 0;
  *(_QWORD *)(v0 + 1096) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, Double>);
  *(_QWORD *)(v0 + 1104) = &protocol witness table for Transformer<A, B>;
  v27 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1072) = v27;
  v27[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v27[3] = 0;
  v27[4] = specialized closure #1 in Transformer.init(transform:);
  v27[5] = 0;
  *(_QWORD *)(v0 + 1136) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, Float>);
  *(_QWORD *)(v0 + 1144) = &protocol witness table for Transformer<A, B>;
  v28 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1112) = v28;
  v28[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v28[3] = 0;
  v28[4] = specialized closure #1 in Transformer.init(transform:);
  v28[5] = 0;
  *(_QWORD *)(v0 + 1176) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt32, String>);
  *(_QWORD *)(v0 + 1184) = &protocol witness table for Transformer<A, B>;
  v29 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1152) = v29;
  v29[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v29[3] = 0;
  v29[4] = specialized closure #1 in Transformer.init(transform:);
  v29[5] = 0;
  *(_QWORD *)(v0 + 1216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, Int32>);
  *(_QWORD *)(v0 + 1224) = &protocol witness table for Transformer<A, B>;
  v30 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1192) = v30;
  v30[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v30[3] = 0;
  v30[4] = specialized closure #1 in Transformer.init(transform:);
  v30[5] = 0;
  *(_QWORD *)(v0 + 1256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, Int64>);
  *(_QWORD *)(v0 + 1264) = &protocol witness table for Transformer<A, B>;
  v31 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1232) = v31;
  v31[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v31[3] = 0;
  v31[4] = specialized closure #1 in Transformer.init(transform:);
  v31[5] = 0;
  *(_QWORD *)(v0 + 1296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, UInt32>);
  *(_QWORD *)(v0 + 1304) = &protocol witness table for Transformer<A, B>;
  v32 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1272) = v32;
  v32[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v32[3] = 0;
  v32[4] = specialized closure #1 in Transformer.init(transform:);
  v32[5] = 0;
  *(_QWORD *)(v0 + 1336) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, Int>);
  *(_QWORD *)(v0 + 1344) = &protocol witness table for Transformer<A, B>;
  v33 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1312) = v33;
  v33[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v33[3] = 0;
  v33[4] = specialized closure #1 in Transformer.init(transform:);
  v33[5] = 0;
  *(_QWORD *)(v0 + 1376) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, Double>);
  *(_QWORD *)(v0 + 1384) = &protocol witness table for Transformer<A, B>;
  v34 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1352) = v34;
  v34[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v34[3] = 0;
  v34[4] = specialized closure #1 in Transformer.init(transform:);
  v34[5] = 0;
  *(_QWORD *)(v0 + 1416) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, Float>);
  *(_QWORD *)(v0 + 1424) = &protocol witness table for Transformer<A, B>;
  v35 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1392) = v35;
  v35[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v35[3] = 0;
  v35[4] = specialized closure #1 in Transformer.init(transform:);
  v35[5] = 0;
  *(_QWORD *)(v0 + 1456) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UInt64, String>);
  *(_QWORD *)(v0 + 1464) = &protocol witness table for Transformer<A, B>;
  v36 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1432) = v36;
  v36[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v36[3] = 0;
  v36[4] = specialized closure #1 in Transformer.init(transform:);
  v36[5] = 0;
  *(_QWORD *)(v0 + 1496) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, Int32>);
  *(_QWORD *)(v0 + 1504) = &protocol witness table for Transformer<A, B>;
  v37 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1472) = v37;
  v37[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v37[3] = 0;
  v37[4] = specialized closure #1 in Transformer.init(transform:);
  v37[5] = 0;
  *(_QWORD *)(v0 + 1536) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, Int64>);
  *(_QWORD *)(v0 + 1544) = &protocol witness table for Transformer<A, B>;
  v38 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1512) = v38;
  v38[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v38[3] = 0;
  v38[4] = specialized closure #1 in Transformer.init(transform:);
  v38[5] = 0;
  *(_QWORD *)(v0 + 1576) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, UInt32>);
  *(_QWORD *)(v0 + 1584) = &protocol witness table for Transformer<A, B>;
  v39 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1552) = v39;
  v39[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v39[3] = 0;
  v39[4] = specialized closure #1 in Transformer.init(transform:);
  v39[5] = 0;
  *(_QWORD *)(v0 + 1616) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, UInt64>);
  *(_QWORD *)(v0 + 1624) = &protocol witness table for Transformer<A, B>;
  v40 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1592) = v40;
  v40[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v40[3] = 0;
  v40[4] = specialized closure #1 in Transformer.init(transform:);
  v40[5] = 0;
  *(_QWORD *)(v0 + 1656) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, Int>);
  *(_QWORD *)(v0 + 1664) = &protocol witness table for Transformer<A, B>;
  v41 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1632) = v41;
  v41[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v41[3] = 0;
  v41[4] = specialized closure #1 in Transformer.init(transform:);
  v41[5] = 0;
  *(_QWORD *)(v0 + 1696) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, Float>);
  *(_QWORD *)(v0 + 1704) = &protocol witness table for Transformer<A, B>;
  v42 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1672) = v42;
  v42[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v42[3] = 0;
  v42[4] = specialized closure #1 in Transformer.init(transform:);
  v42[5] = 0;
  *(_QWORD *)(v0 + 1736) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, String>);
  *(_QWORD *)(v0 + 1744) = &protocol witness table for Transformer<A, B>;
  v43 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1712) = v43;
  v43[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v43[3] = 0;
  v43[4] = specialized closure #1 in Transformer.init(transform:);
  v43[5] = 0;
  *(_QWORD *)(v0 + 1776) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Double, Bool>);
  *(_QWORD *)(v0 + 1784) = &protocol witness table for Transformer<A, B>;
  v44 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1752) = v44;
  v44[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v44[3] = 0;
  v44[4] = specialized closure #1 in Transformer.init(transform:);
  v44[5] = 0;
  *(_QWORD *)(v0 + 1816) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, Int32>);
  *(_QWORD *)(v0 + 1824) = &protocol witness table for Transformer<A, B>;
  v45 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1792) = v45;
  v45[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v45[3] = 0;
  v45[4] = specialized closure #1 in Transformer.init(transform:);
  v45[5] = 0;
  *(_QWORD *)(v0 + 1856) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, Int64>);
  *(_QWORD *)(v0 + 1864) = &protocol witness table for Transformer<A, B>;
  v46 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1832) = v46;
  v46[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v46[3] = 0;
  v46[4] = specialized closure #1 in Transformer.init(transform:);
  v46[5] = 0;
  *(_QWORD *)(v0 + 1896) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, UInt32>);
  *(_QWORD *)(v0 + 1904) = &protocol witness table for Transformer<A, B>;
  v47 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1872) = v47;
  v47[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v47[3] = 0;
  v47[4] = specialized closure #1 in Transformer.init(transform:);
  v47[5] = 0;
  *(_QWORD *)(v0 + 1936) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, UInt64>);
  *(_QWORD *)(v0 + 1944) = &protocol witness table for Transformer<A, B>;
  v48 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1912) = v48;
  v48[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v48[3] = 0;
  v48[4] = specialized closure #1 in Transformer.init(transform:);
  v48[5] = 0;
  *(_QWORD *)(v0 + 1976) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, Double>);
  *(_QWORD *)(v0 + 1984) = &protocol witness table for Transformer<A, B>;
  v49 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1952) = v49;
  v49[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v49[3] = 0;
  v49[4] = specialized closure #1 in Transformer.init(transform:);
  v49[5] = 0;
  *(_QWORD *)(v0 + 2016) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, Int>);
  *(_QWORD *)(v0 + 2024) = &protocol witness table for Transformer<A, B>;
  v50 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 1992) = v50;
  v50[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v50[3] = 0;
  v50[4] = specialized closure #1 in Transformer.init(transform:);
  v50[5] = 0;
  *(_QWORD *)(v0 + 2056) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, String>);
  *(_QWORD *)(v0 + 2064) = &protocol witness table for Transformer<A, B>;
  v51 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 2032) = v51;
  v51[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v51[3] = 0;
  v51[4] = specialized closure #1 in Transformer.init(transform:);
  v51[5] = 0;
  *(_QWORD *)(v0 + 2096) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Float, Bool>);
  *(_QWORD *)(v0 + 2104) = &protocol witness table for Transformer<A, B>;
  v52 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 2072) = v52;
  v52[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v52[3] = 0;
  v52[4] = specialized closure #1 in Transformer.init(transform:);
  v52[5] = 0;
  *(_QWORD *)(v0 + 2136) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Bool, Int>);
  *(_QWORD *)(v0 + 2144) = &protocol witness table for Transformer<A, B>;
  v53 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 2112) = v53;
  v53[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v53[3] = 0;
  v53[4] = specialized closure #1 in Transformer.init(transform:);
  v53[5] = 0;
  *(_QWORD *)(v0 + 2176) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Bool, String>);
  *(_QWORD *)(v0 + 2184) = &protocol witness table for Transformer<A, B>;
  v54 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 2152) = v54;
  v54[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v54[3] = 0;
  v54[4] = specialized closure #1 in Transformer.init(transform:);
  v54[5] = 0;
  *(_QWORD *)(v0 + 2216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<String, Int>);
  *(_QWORD *)(v0 + 2224) = &protocol witness table for Transformer<A, B>;
  v55 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 2192) = v55;
  v55[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v55[3] = 0;
  v55[4] = specialized closure #1 in Transformer.init(transform:);
  v55[5] = 0;
  *(_QWORD *)(v0 + 2256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<String, Double>);
  *(_QWORD *)(v0 + 2264) = &protocol witness table for Transformer<A, B>;
  v56 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 2232) = v56;
  v56[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v56[3] = 0;
  v56[4] = specialized closure #1 in Transformer.init(transform:);
  v56[5] = 0;
  *(_QWORD *)(v0 + 2296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<String, Float>);
  *(_QWORD *)(v0 + 2304) = &protocol witness table for Transformer<A, B>;
  v57 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 2272) = v57;
  v57[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  v57[3] = 0;
  v57[4] = specialized closure #1 in Transformer.init(transform:);
  v57[5] = 0;
  *(_QWORD *)(v0 + 2336) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<String, Bool>);
  *(_QWORD *)(v0 + 2344) = &protocol witness table for Transformer<A, B>;
  result = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v0 + 2312) = result;
  result[2] = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[3] = 0;
  result[4] = specialized closure #1 in Transformer.init(transform:);
  result[5] = 0;
  static TransformationRegistry._commonTransformers = (_UNKNOWN *)v0;
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t LoadableTransformation.inputType.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return OUTLINED_FUNCTION_0_10(*(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 104) + 40), a1);
}

uint64_t LoadableTransformation.outputType.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return OUTLINED_FUNCTION_0_10(*(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 104) + 56), a1);
}

uint64_t LoadableTransformation.typeErasedTransform(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v1 + 144))(v6);
  if (v6[3])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transforming);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*((_QWORD *)&v8 + 1))
      {
        outlined init with take of Transforming(&v7, (uint64_t)v10);
        v3 = v11;
        v4 = v12;
        __swift_project_boxed_opaque_existential_1(v10, v11);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      }
    }
    else
    {
      v9 = 0;
      v7 = 0u;
      v8 = 0u;
    }
  }
  else
  {
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v6, &demangling cache variable for type metadata for Any?);
    v7 = 0u;
    v8 = 0u;
    v9 = 0;
  }
  outlined destroy of CheckedContinuation<(), Error>?((uint64_t)&v7, &demangling cache variable for type metadata for Transforming?);
  lazy protocol witness table accessor for type LoadableTransformationError and conformance LoadableTransformationError();
  swift_allocError();
  return swift_willThrow();
}

unint64_t lazy protocol witness table accessor for type LoadableTransformationError and conformance LoadableTransformationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LoadableTransformationError and conformance LoadableTransformationError;
  if (!lazy protocol witness table cache variable for type LoadableTransformationError and conformance LoadableTransformationError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for LoadableTransformationError, &type metadata for LoadableTransformationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LoadableTransformationError and conformance LoadableTransformationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LoadableTransformationError and conformance LoadableTransformationError;
  if (!lazy protocol witness table cache variable for type LoadableTransformationError and conformance LoadableTransformationError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for LoadableTransformationError, &type metadata for LoadableTransformationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LoadableTransformationError and conformance LoadableTransformationError);
  }
  return result;
}

uint64_t *LoadableTransformation.__allocating_init(container:capability:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return LoadableTransformation.init(container:capability:)(a1, a2);
}

uint64_t *LoadableTransformation.init(container:capability:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  v7[0] = *(_BYTE *)a2;
  v8 = v2;
  v9 = v3;
  v10 = *(_OWORD *)(a2 + 24);
  v11 = v4;
  v12 = v5;
  return LoadableCapability.init(container:capability:)(a1, (uint64_t)v7);
}

uint64_t LoadableTransformation.__deallocating_deinit()
{
  LoadableCapability.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Transforming.inputType.getter in conformance LoadableTransformation<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

uint64_t protocol witness for Transforming.outputType.getter in conformance LoadableTransformation<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))();
}

uint64_t protocol witness for Transforming.typeErasedTransform(_:) in conformance LoadableTransformation<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))();
}

uint64_t static LoadableTransformationError.== infix(_:_:)()
{
  return 1;
}

void LoadableTransformationError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int LoadableTransformationError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LoadableTransformationError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t type metadata completion function for LoadableTransformation()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for LoadableTransformation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LoadableTransformation);
}

uint64_t method lookup function for LoadableTransformation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LoadableTransformation.inputType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of LoadableTransformation.outputType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of LoadableTransformation.typeErasedTransform(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of LoadableTransformation.__allocating_init(container:capability:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t storeEnumTagSinglePayload for LoadableTransformationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C2F47530 + 4 * byte_1C2F819E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C2F47550 + 4 * byte_1C2F819E5[v4]))();
}

_BYTE *sub_1C2F47530(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C2F47550(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2F47558(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2F47560(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2F47568(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2F47570(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LoadableTransformationError()
{
  return &type metadata for LoadableTransformationError;
}

uint64_t OUTLINED_FUNCTION_0_10@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = v2;
  a2[1] = a1;
  return swift_bridgeObjectRetain();
}

uint64_t NullCacheDataSource.readCacheData()()
{
  _BYTE *v0;

  lazy protocol witness table accessor for type CacheDataError and conformance CacheDataError();
  OUTLINED_FUNCTION_32_0();
  *v0 = 1;
  return swift_willThrow();
}

unint64_t lazy protocol witness table accessor for type CacheDataError and conformance CacheDataError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CacheDataError and conformance CacheDataError;
  if (!lazy protocol witness table cache variable for type CacheDataError and conformance CacheDataError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for CacheDataError, &type metadata for CacheDataError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CacheDataError and conformance CacheDataError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CacheDataError and conformance CacheDataError;
  if (!lazy protocol witness table cache variable for type CacheDataError and conformance CacheDataError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for CacheDataError, &type metadata for CacheDataError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CacheDataError and conformance CacheDataError);
  }
  return result;
}

uint64_t protocol witness for CacheDataSource.readCacheData() in conformance NullCacheDataSource()
{
  return NullCacheDataSource.readCacheData()();
}

uint64_t key path setter for Cacheable.cache : <A>Cacheable<A>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  outlined init with copy of CacheDataSource?(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 136))(v4);
}

uint64_t Cacheable.cache.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  OUTLINED_FUNCTION_12_6();
  return outlined init with copy of CacheDataSource?(v1 + 16, a1);
}

uint64_t outlined init with copy of CacheDataSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CacheDataSource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void Cacheable.cache.setter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_4_5();
  outlined assign with copy of CacheDataSource?(a1, v1 + 16);
  OUTLINED_FUNCTION_26_5();
  OUTLINED_FUNCTION_11_7();
  outlined destroy of CacheDataSource?(a1, &demangling cache variable for type metadata for CacheDataSource?);
  OUTLINED_FUNCTION_29_0();
}

uint64_t outlined assign with copy of CacheDataSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CacheDataSource?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void (*Cacheable.cache.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  OUTLINED_FUNCTION_4_5();
  return Cacheable.cache.modify;
}

void Cacheable.cache.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_31();
}

void Cacheable._value.getter(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 112);
  OUTLINED_FUNCTION_12_6();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
  OUTLINED_FUNCTION_29_0();
}

void Cacheable._value.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 112);
  OUTLINED_FUNCTION_4_5();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  OUTLINED_FUNCTION_26_5();
  OUTLINED_FUNCTION_29_0();
}

uint64_t key path setter for Cacheable.wrappedValue : <A>Cacheable<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1, a1);
  v4 = (char *)&v7 - v3;
  (*(void (**)(char *))(v5 + 16))((char *)&v7 - v3);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 184))(v4);
}

uint64_t Cacheable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  OUTLINED_FUNCTION_34();
  v8 = v7 - v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7 - v6, a1, v4);
  Cacheable._value.setter(v8);
  Cacheable.tryWrite()(v9, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

void (*Cacheable.wrappedValue.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v3[4] = v7;
  Cacheable._value.getter((uint64_t)v7);
  return Cacheable.wrappedValue.modify;
}

void Cacheable.wrappedValue.modify(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    Cacheable.wrappedValue.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    Cacheable.wrappedValue.setter(*(_QWORD *)(*(_QWORD *)a1 + 32), a2);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Cacheable.__allocating_init(cache:wrappedValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  Cacheable.init(cache:wrappedValue:)(a1, a2);
  return v4;
}

uint64_t *Cacheable.init(cache:wrappedValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *v2;
  *((_OWORD *)v2 + 2) = 0u;
  v2[6] = 0;
  *((_OWORD *)v2 + 1) = 0u;
  OUTLINED_FUNCTION_4_5();
  outlined assign with copy of CacheDataSource?(a1, (uint64_t)(v2 + 2));
  OUTLINED_FUNCTION_26_5();
  v6 = *(_QWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((uint64_t)v2 + *(_QWORD *)(*v2 + 112), a2, v6);
  OUTLINED_FUNCTION_11_7();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  outlined destroy of CacheDataSource?(a1, &demangling cache variable for type metadata for CacheDataSource?);
  return v2;
}

Swift::Void __swiftcall Cacheable.sync()()
{
  uint64_t v0;
  uint64_t v1;

  Cacheable.read()(v0, v1);
}

void Cacheable.read()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v5 = *v2;
  MEMORY[0x1E0C80A78](a1, a2);
  OUTLINED_FUNCTION_18_4();
  (*(void (**)(__int128 *__return_ptr))(v5 + 128))(&v12);
  if (v13)
  {
    outlined init with take of Transforming(&v12, (uint64_t)v14);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    v6 = v15;
    v7 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    if (!v3)
    {
      v10 = v8;
      v11 = v9;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      Cacheable._value.setter(v4);
      outlined consume of Data._Representation(v10, v11);
    }
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    outlined destroy of CacheDataSource?((uint64_t)&v12, &demangling cache variable for type metadata for CacheDataSource?);
  }
  OUTLINED_FUNCTION_0_9();
}

void Cacheable.tryWrite()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v4 = *v2;
  MEMORY[0x1E0C80A78](a1, a2);
  OUTLINED_FUNCTION_18_4();
  (*(void (**)(_QWORD *__return_ptr))(v4 + 128))(v19);
  if (!v20)
  {
    outlined destroy of CacheDataSource?((uint64_t)v19, &demangling cache variable for type metadata for CacheDataSource?);
    v16 = 0u;
    v17 = 0u;
    v18 = 0;
    goto LABEL_7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CacheDataSource);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CacheDataSink);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
    goto LABEL_7;
  }
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_7:
    outlined destroy of CacheDataSource?((uint64_t)&v16, &demangling cache variable for type metadata for CacheDataSink?);
    return;
  }
  outlined init with take of Transforming(&v16, (uint64_t)v19);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  Cacheable._value.getter(v3);
  v5 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v7 = v6;
  OUTLINED_FUNCTION_22_4();
  v8 = v20;
  v9 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(v5, v7, v8, v9);
  if (one-time initialization token for logger != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.logger);
  OUTLINED_FUNCTION_19_3();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)OUTLINED_FUNCTION_4_1();
    OUTLINED_FUNCTION_4_1();
    *(_DWORD *)v13 = 136315138;
    OUTLINED_FUNCTION_35_1();
    v14 = OUTLINED_FUNCTION_30_1();
    OUTLINED_FUNCTION_27_4(v14, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_21_5();
    _os_log_impl(&dword_1C2F2D000, v11, v12, "Wrote cached object to %s", v13, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_1();
  }
  OUTLINED_FUNCTION_21_5();
  OUTLINED_FUNCTION_32_2();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
}

void Cacheable.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  outlined destroy of CacheDataSource?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for CacheDataSource?);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  OUTLINED_FUNCTION_31();
}

uint64_t Cacheable.__deallocating_deinit()
{
  Cacheable.deinit();
  return swift_deallocClassInstance();
}

uint64_t URL.readCacheData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  OUTLINED_FUNCTION_34();
  v7 = v6 - v5;
  v8 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v9 = URL.path.getter();
  v10 = (void *)MEMORY[0x1C3BCDDDC](v9);
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v8, sel_fileExistsAtPath_, v10);

  if (v11)
  {
    result = Data.init(contentsOf:options:)();
    if (!v1)
      return result;
    if (one-time initialization token for loader != -1)
      swift_once();
    v13 = OUTLINED_FUNCTION_13();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.loader);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v0, v2);
    OUTLINED_FUNCTION_8_6();
    OUTLINED_FUNCTION_8_6();
    v14 = Logger.logObject.getter();
    static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_28_3(v14))
    {
      OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_39_1(4.8151e-34);
      v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v17 = OUTLINED_FUNCTION_14_6(v15, v16);
      OUTLINED_FUNCTION_5_8(v17);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_24_5();
      OUTLINED_FUNCTION_6_5();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v18 = String.init<A>(describing:)();
      OUTLINED_FUNCTION_14_6(v18, v19);
      OUTLINED_FUNCTION_36_1();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_1_10();
      OUTLINED_FUNCTION_1_10();
      OUTLINED_FUNCTION_20_3(&dword_1C2F2D000, v14, v20, "Failed to read cache data from %s: error=%s.");
      OUTLINED_FUNCTION_13_7();
      OUTLINED_FUNCTION_1_1();
    }
    OUTLINED_FUNCTION_24_5();
    OUTLINED_FUNCTION_1_10();
    OUTLINED_FUNCTION_1_10();

  }
  else
  {
    lazy protocol witness table accessor for type CacheDataError and conformance CacheDataError();
    OUTLINED_FUNCTION_32_0();
    *v21 = 1;
  }
  return OUTLINED_FUNCTION_34_1();
}

void URL.writeCacheData(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  OUTLINED_FUNCTION_34();
  v7 = v6 - v5;
  Data.write(to:options:)();
  if (v1)
  {
    if (one-time initialization token for loader != -1)
      swift_once();
    v8 = OUTLINED_FUNCTION_13();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.loader);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v0, v2);
    OUTLINED_FUNCTION_8_6();
    OUTLINED_FUNCTION_8_6();
    v9 = Logger.logObject.getter();
    static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_28_3(v9))
    {
      OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_39_1(4.8151e-34);
      v10 = dispatch thunk of CustomStringConvertible.description.getter();
      v12 = OUTLINED_FUNCTION_14_6(v10, v11);
      OUTLINED_FUNCTION_5_8(v12);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_23_3();
      OUTLINED_FUNCTION_6_5();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v13 = String.init<A>(describing:)();
      OUTLINED_FUNCTION_14_6(v13, v14);
      OUTLINED_FUNCTION_36_1();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_1_10();
      OUTLINED_FUNCTION_1_10();
      OUTLINED_FUNCTION_20_3(&dword_1C2F2D000, v9, v15, "Failed to write cache data to %s: error=%s.");
      OUTLINED_FUNCTION_13_7();
      OUTLINED_FUNCTION_1_1();
    }
    OUTLINED_FUNCTION_23_3();
    OUTLINED_FUNCTION_1_10();
    OUTLINED_FUNCTION_1_10();

    OUTLINED_FUNCTION_34_1();
  }
  OUTLINED_FUNCTION_0_9();
}

uint64_t protocol witness for CacheDataSource.readCacheData() in conformance URL()
{
  return URL.readCacheData()();
}

void protocol witness for CacheDataSink.writeCacheData(_:) in conformance URL()
{
  URL.writeCacheData(_:)();
}

BOOL static CacheDataError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void CacheDataError.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
  OUTLINED_FUNCTION_31();
}

Swift::Int CacheDataError.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CacheDataError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static CacheDataError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CacheDataError()
{
  char *v0;

  return CacheDataError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CacheDataError(uint64_t a1)
{
  char *v1;

  CacheDataError.hash(into:)(a1, *v1);
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0CB0048], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

BOOL specialized OptionSet<>.insert(_:)(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & a2;
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

void sub_1C2F48914(uint64_t a1)
{
  (*(void (**)(void))(**(_QWORD **)a1 + 128))();
  OUTLINED_FUNCTION_31();
}

void sub_1C2F48944(uint64_t a1)
{
  (*(void (**)(void))(**(_QWORD **)a1 + 176))();
  OUTLINED_FUNCTION_31();
}

uint64_t dispatch thunk of CacheDataSource.readCacheData()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CacheDataSink.writeCacheData(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for NullCacheDataSource()
{
  return &type metadata for NullCacheDataSource;
}

uint64_t type metadata completion function for Cacheable()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for Cacheable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Cacheable);
}

uint64_t method lookup function for Cacheable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Cacheable.projectedValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of Cacheable.cache.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of Cacheable.cache.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of Cacheable.cache.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of Cacheable.wrappedValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of Cacheable.wrappedValue.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of Cacheable.wrappedValue.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of Cacheable.__allocating_init(cache:wrappedValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of Cacheable.sync()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t storeEnumTagSinglePayload for CacheDataError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C2F48AFC + 4 * byte_1C2F81B15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C2F48B30 + 4 * asc_1C2F81B10[v4]))();
}

uint64_t sub_1C2F48B30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F48B38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F48B40);
  return result;
}

uint64_t sub_1C2F48B4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F48B54);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C2F48B58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F48B60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CacheDataError()
{
  return &type metadata for CacheDataError;
}

void outlined destroy of CacheDataSource?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_31();
}

void outlined init with copy of CacheDataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  OUTLINED_FUNCTION_31();
}

void OUTLINED_FUNCTION_1_10()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_4_5()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_5_8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id OUTLINED_FUNCTION_6_5()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + 12) = 2080;
  *(_QWORD *)(v2 - 88) = v0;
  return v0;
}

id OUTLINED_FUNCTION_8_6()
{
  void *v0;

  return v0;
}

void OUTLINED_FUNCTION_9_7()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_11_7()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t OUTLINED_FUNCTION_12_6()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_13_7()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_14_6(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 72));
}

void OUTLINED_FUNCTION_19_3()
{
  uint64_t v0;

  outlined init with copy of CacheDataSource(v0 - 120, v0 - 160);
}

void OUTLINED_FUNCTION_20_3(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  os_log_type_t v5;

  _os_log_impl(a1, a2, v5, a4, v4, 0x16u);
}

uint64_t OUTLINED_FUNCTION_21_5()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0 - 160);
}

uint64_t OUTLINED_FUNCTION_22_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_23_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_24_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_26_5()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_27_4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 176));
}

BOOL OUTLINED_FUNCTION_28_3(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

id OUTLINED_FUNCTION_29_3()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_30_1()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_31_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_32_2()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_34_1()
{
  return swift_willThrow();
}

void OUTLINED_FUNCTION_35_1()
{
  uint64_t v0;

  outlined init with copy of CacheDataSource(v0 - 160, v0 - 216);
}

uint64_t OUTLINED_FUNCTION_36_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

unint64_t OUTLINED_FUNCTION_39_1(float a1)
{
  float *v1;

  *v1 = a1;
  return lazy protocol witness table accessor for type URL and conformance URL();
}

uint64_t MergedPluginFinder.finders.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MergedPluginFinder.findAllPackages()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)v0 + 32;
    swift_bridgeObjectRetain();
    v3 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      outlined init with copy of Transforming(v2, (uint64_t)v20);
      v4 = v21;
      v5 = v22;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      v7 = *(_QWORD *)(v6 + 16);
      v8 = *(_QWORD *)(v3 + 16);
      v9 = v8 + v7;
      if (__OFADD__(v8, v7))
        break;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v3 + 24) >> 1)
      {
        if (v8 <= v9)
          v11 = v8 + v7;
        else
          v11 = v8;
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PluginPackage>, &demangling cache variable for type metadata for PluginPackage);
        v3 = v12;
      }
      if (*(_QWORD *)(v6 + 16))
      {
        v13 = *(_QWORD *)(v3 + 16);
        if ((*(_QWORD *)(v3 + 24) >> 1) - v13 < v7)
          goto LABEL_27;
        v14 = v3 + 40 * v13 + 32;
        if (v6 + 32 < v14 + 40 * v7 && v14 < v6 + 32 + 40 * v7)
          goto LABEL_29;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage);
        swift_arrayInitWithCopy();
        if (v7)
        {
          v16 = *(_QWORD *)(v3 + 16);
          v17 = __OFADD__(v16, v7);
          v18 = v16 + v7;
          if (v17)
            goto LABEL_28;
          *(_QWORD *)(v3 + 16) = v18;
        }
      }
      else if (v7)
      {
        goto LABEL_26;
      }
      OUTLINED_FUNCTION_2_0();
      v2 += 40;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_4_6();
    result = OUTLINED_FUNCTION_3_7();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t MergedPluginFinder.init(finders:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t FallbackPluginFinder.findAllPackages()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = *v0 + 32;
  result = swift_bridgeObjectRetain_n();
  v5 = 0;
  while (1)
  {
    if (v5 == v2)
    {
      v15 = 0;
      v5 = v2;
      memset(v14, 0, sizeof(v14));
      goto LABEL_6;
    }
    if (v5 >= *(_QWORD *)(v1 + 16))
      break;
    outlined init with copy of Transforming(v3 + 40 * v5++, (uint64_t)v14);
LABEL_6:
    outlined init with take of PluginFinder?((uint64_t)v14, (uint64_t)&v12);
    if (!v13)
    {
      OUTLINED_FUNCTION_14_1();
      return MEMORY[0x1E0DEE9D8];
    }
    outlined init with take of Transforming(&v12, (uint64_t)v9);
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    if (*(_QWORD *)(v8 + 16))
    {
      OUTLINED_FUNCTION_14_1();
      return v8;
    }
    result = OUTLINED_FUNCTION_2_0();
  }
  __break(1u);
  return result;
}

uint64_t FallbackPluginFinder.init(finders:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t URL.findAllPackages()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  NSURL *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  Swift::String v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  void *v43;
  __int128 v44;
  __int128 v45;
  _UNKNOWN **v46;
  __int128 v47[2];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1, v3);
  v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v42 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  URL._bridgeToObjectiveC()(v15);
  v17 = v16;
  *(_QWORD *)&v47[0] = 0;
  v18 = objc_msgSend(v14, sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_, v16, 0, 0, v47);

  v19 = *(void **)&v47[0];
  if (v18)
  {
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v19;

    v22 = *(_QWORD *)(v20 + 16);
    v42[1] = v20;
    if (v22)
    {
      v23 = v20 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      v43 = *(void **)(v2 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
      swift_bridgeObjectRetain();
      v25 = MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v24(v13, v23, v1);
        OUTLINED_FUNCTION_18_5((uint64_t)v13, 0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v1) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v9, v13, v1);
        v26 = type metadata accessor for NSBundle();
        v27._countAndFlagsBits = URL.path.getter();
        v28 = (unint64_t)NSBundle.__allocating_init(path:)(v27);
        if (v28)
        {
          *((_QWORD *)&v45 + 1) = v26;
          v46 = &protocol witness table for NSBundle;
          *(_QWORD *)&v44 = v28;
        }
        else
        {
          v46 = 0;
          v44 = 0u;
          v45 = 0u;
        }
        (*(void (**)(char *, uint64_t))(v2 + 8))(v9, v1);
        if (*((_QWORD *)&v45 + 1))
        {
          outlined init with take of Transforming(&v44, (uint64_t)v47);
          outlined init with take of Transforming(v47, (uint64_t)&v44);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v25 + 16) + 1, 1, v25, &demangling cache variable for type metadata for _ContiguousArrayStorage<PluginPackage>, &demangling cache variable for type metadata for PluginPackage);
            v25 = v31;
          }
          v30 = *(_QWORD *)(v25 + 16);
          v29 = *(_QWORD *)(v25 + 24);
          if (v30 >= v29 >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v25, &demangling cache variable for type metadata for _ContiguousArrayStorage<PluginPackage>, &demangling cache variable for type metadata for PluginPackage);
            v25 = v32;
          }
          *(_QWORD *)(v25 + 16) = v30 + 1;
          outlined init with take of Transforming(&v44, v25 + 40 * v30 + 32);
        }
        else
        {
          outlined destroy of PluginPackage?((uint64_t)&v44);
        }
        v23 += (unint64_t)v43;
        if (!--v22)
          goto LABEL_22;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      v25 = MEMORY[0x1E0DEE9D8];
LABEL_22:
      OUTLINED_FUNCTION_18_5((uint64_t)v13, 1);
    }
    OUTLINED_FUNCTION_14_1();
  }
  else
  {
    v33 = *(id *)&v47[0];
    v34 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for loader != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.loader);
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v6, v0, v1);
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_QWORD *)&v47[0] = swift_slowAlloc();
      *(_DWORD *)v38 = 136315138;
      v43 = v34;
      lazy protocol witness table accessor for type URL and conformance URL();
      v39 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)&v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_14_7();
      _os_log_impl(&dword_1C2F2D000, v36, v37, "Cannot read directory %s; not loading plugins from there.", v38, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_1();
    }
    OUTLINED_FUNCTION_14_7();

    return MEMORY[0x1E0DEE9D8];
  }
  return v25;
}

uint64_t Array<A>.findAllPackages()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage);
  return _arrayForceCast<A, B>(_:)();
}

uint64_t protocol witness for PluginFinder.findAllPackages() in conformance <A> [A]()
{
  return Array<A>.findAllPackages()();
}

uint64_t <+> infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return <+> infix(_:_:)(a1, a2, (uint64_t)&type metadata for MergedPluginFinder, (uint64_t)&protocol witness table for MergedPluginFinder, a3);
}

uint64_t <|> infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return <+> infix(_:_:)(a1, a2, (uint64_t)&type metadata for FallbackPluginFinder, (uint64_t)&protocol witness table for FallbackPluginFinder, a3);
}

uint64_t <+> infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PluginFinder>);
  v10 = OUTLINED_FUNCTION_37();
  *(_OWORD *)(v10 + 16) = xmmword_1C2F81CA0;
  outlined init with copy of Transforming(a1, v10 + 32);
  result = outlined init with copy of Transforming(a2, v10 + 72);
  a5[3] = a3;
  a5[4] = a4;
  *a5 = v10;
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>, &demangling cache variable for type metadata for Transforming);
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_21_6();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_7_7();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_15_4();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_9_8();
    }
  }
  OUTLINED_FUNCTION_13_8();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SiriEnvironment.InitializingProvider>);
    v5 = (_QWORD *)OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_16_4(v5);
  }
  if ((v0 & 1) != 0)
  {
    v6 = (char *)OUTLINED_FUNCTION_19_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_6_6();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_12_7();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
  OUTLINED_FUNCTION_1_3();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_21_6();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_7_7();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_15_4();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_9_8();
    }
  }
  OUTLINED_FUNCTION_13_8();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TransformationCapability>);
    v6 = (_QWORD *)OUTLINED_FUNCTION_37();
    v7 = _swift_stdlib_malloc_size(v6);
    v6[2] = v1;
    v6[3] = 2 * ((uint64_t)(v7 - 32) / 64);
  }
  if ((v0 & 1) != 0)
  {
    v8 = (char *)OUTLINED_FUNCTION_19_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_6_6();
  }
  else
  {
    v11 = OUTLINED_FUNCTION_12_7();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
  OUTLINED_FUNCTION_9_0();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_21_6();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_7_7();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_15_4();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_9_8();
    }
  }
  OUTLINED_FUNCTION_13_8();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TransformationDescriptor>);
    v5 = (_QWORD *)OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_16_4(v5);
  }
  if ((v0 & 1) != 0)
  {
    v6 = (char *)OUTLINED_FUNCTION_19_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, v7, v8);
    OUTLINED_FUNCTION_6_6();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_12_7();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v9, v10, v11, v12);
  }
  OUTLINED_FUNCTION_1_3();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_21_6();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_7_7();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_15_4();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_9_8();
    }
  }
  OUTLINED_FUNCTION_13_8();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TransformationChain>);
    v6 = (_QWORD *)OUTLINED_FUNCTION_37();
    v7 = _swift_stdlib_malloc_size(v6);
    v6[2] = v1;
    v6[3] = 2 * ((uint64_t)(v7 - 32) / 8);
  }
  if ((v0 & 1) != 0)
  {
    v8 = (char *)OUTLINED_FUNCTION_19_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_6_6();
  }
  else
  {
    v11 = OUTLINED_FUNCTION_12_7();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
  OUTLINED_FUNCTION_9_0();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  char *v16;

  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_7_7();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_15_4();
      if (v10)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_9_8();
    }
  }
  else
  {
    v9 = a2;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = v9;
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v14 = (char *)OUTLINED_FUNCTION_37();
    v15 = _swift_stdlib_malloc_size(v14);
    *((_QWORD *)v14 + 2) = v12;
    *((_QWORD *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v16 = v14 + 32;
  if ((a1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v12, v16);
    OUTLINED_FUNCTION_6_6();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, (unint64_t)v16, a4, a6);
  }
  OUTLINED_FUNCTION_1_3();
}

uint64_t outlined init with take of PluginFinder?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginFinder?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_8_7();
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v5;
  if (v6 >= v7 || v6 + 40 * v5 <= a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v7;
  }
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_4_6();
LABEL_11:
  result = OUTLINED_FUNCTION_3_7();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    result = (char *)OUTLINED_FUNCTION_2_10();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_11(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    result = (char *)OUTLINED_FUNCTION_2_10();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_11(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    result = (char *)OUTLINED_FUNCTION_2_10();
    __break(1u);
  }
  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_11(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    result = (char *)OUTLINED_FUNCTION_2_10();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_11(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    result = (char *)OUTLINED_FUNCTION_2_10();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_11(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    result = (char *)OUTLINED_FUNCTION_2_10();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_11(a3, result);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[56 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 56 * a2);
  }
  return __src;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_8_7();
  }
  else
  {
    if (a3 + 40 * a2 <= a1 || a1 + 40 * a2 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transforming);
      return swift_arrayInitWithCopy();
    }
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_4_6();
  }
  result = OUTLINED_FUNCTION_3_7();
  __break(1u);
  return result;
}

{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_8_7();
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return OUTLINED_FUNCTION_5_9();
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_4_6();
  }
  result = OUTLINED_FUNCTION_3_7();
  __break(1u);
  return result;
}

{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_8_7();
  }
  else
  {
    if (a3 + (a2 << 6) <= a1 || a1 + (a2 << 6) <= a3)
      return OUTLINED_FUNCTION_5_9();
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_4_6();
  }
  result = OUTLINED_FUNCTION_3_7();
  __break(1u);
  return result;
}

{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_8_7();
  }
  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
      return OUTLINED_FUNCTION_5_9();
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_4_6();
  }
  result = OUTLINED_FUNCTION_3_7();
  __break(1u);
  return result;
}

uint64_t outlined destroy of PluginPackage?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of PluginFinder.findAllPackages()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for MergedPluginFinder()
{
  return &type metadata for MergedPluginFinder;
}

ValueMetadata *type metadata accessor for FallbackPluginFinder()
{
  return &type metadata for FallbackPluginFinder;
}

void *OUTLINED_FUNCTION_1_11@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_2_10()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_3_7()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_5_9()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_6_6()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_12_7()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_14_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

size_t OUTLINED_FUNCTION_16_4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t OUTLINED_FUNCTION_18_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_19_4()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayypG_ypsAE_pTg5(void (*a1)(_OWORD *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v15;
    for (i = a3 + 32; ; i += 32)
    {
      a1(v14, i, &v13);
      if (v4)
        break;
      v4 = 0;
      v15 = v6;
      v11 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
        v6 = v15;
      }
      *(_QWORD *)(v6 + 16) = v11 + 1;
      outlined init with take of Any(v14, (_OWORD *)(v6 + 32 * v11 + 32));
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

uint64_t TransformationRegistry.__allocating_init(fallback:)(uint64_t a1)
{
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_37();
  TransformationRegistry.init(fallback:)(a1);
  return v2;
}

void TransformationRegistry.init(fallback:)(uint64_t a1)
{
  _QWORD *v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Transforming]);
  lazy protocol witness table accessor for type TypeIdentifier and conformance TypeIdentifier();
  v1[2] = OUTLINED_FUNCTION_58();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transforming);
  lazy protocol witness table accessor for type TransformationIdentifier and conformance TransformationIdentifier();
  v1[3] = OUTLINED_FUNCTION_58();
  v1[4] = a1;
  OUTLINED_FUNCTION_9_0();
}

unint64_t lazy protocol witness table accessor for type TypeIdentifier and conformance TypeIdentifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TypeIdentifier and conformance TypeIdentifier;
  if (!lazy protocol witness table cache variable for type TypeIdentifier and conformance TypeIdentifier)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TypeIdentifier, &type metadata for TypeIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypeIdentifier and conformance TypeIdentifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TypeIdentifier and conformance TypeIdentifier;
  if (!lazy protocol witness table cache variable for type TypeIdentifier and conformance TypeIdentifier)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TypeIdentifier, &type metadata for TypeIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypeIdentifier and conformance TypeIdentifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationIdentifier and conformance TransformationIdentifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationIdentifier and conformance TransformationIdentifier;
  if (!lazy protocol witness table cache variable for type TransformationIdentifier and conformance TransformationIdentifier)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationIdentifier, &type metadata for TransformationIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationIdentifier and conformance TransformationIdentifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationIdentifier and conformance TransformationIdentifier;
  if (!lazy protocol witness table cache variable for type TransformationIdentifier and conformance TransformationIdentifier)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationIdentifier, &type metadata for TransformationIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationIdentifier and conformance TransformationIdentifier);
  }
  return result;
}

void TransformationRegistry.register(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  _BOOL8 v20;
  Swift::Int v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = v1;
  v4 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  OUTLINED_FUNCTION_35_2(v4);
  v6 = v49[0];
  v5 = v49[1];
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v47, v7, v8);
  if (v6 == v47 && v5 == v48)
  {
    OUTLINED_FUNCTION_14_1();
  }
  else
  {
    v10 = OUTLINED_FUNCTION_3_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_2_0();
    if ((v10 & 1) == 0)
    {
      v11 = a1[3];
      __swift_project_boxed_opaque_existential_1(a1, v11);
      OUTLINED_FUNCTION_35_2(v11);
      v13 = v52;
      v12 = v53;
      OUTLINED_FUNCTION_45_0();
      v14 = (_QWORD *)(v1 + 16);
      OUTLINED_FUNCTION_25_0();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v46 = *(_QWORD *)(v1 + 16);
      v16 = v46;
      *(_QWORD *)(v2 + 16) = 0x8000000000000000;
      v17 = OUTLINED_FUNCTION_48_0();
      v19 = *(_QWORD *)(v16 + 16);
      v20 = (v18 & 1) == 0;
      v21 = v19 + v20;
      if (__OFADD__(v19, v20))
      {
        __break(1u);
      }
      else
      {
        v22 = v17;
        v23 = v18;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<TypeIdentifier, [Transforming]>);
        if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v21))
        {
LABEL_10:
          *v14 = v46;
          swift_bridgeObjectRelease();
          v26 = (_QWORD *)*v14;
          OUTLINED_FUNCTION_61_0();
          if ((v23 & 1) == 0)
          {
            specialized _NativeDictionary._insert(at:key:value:)(v22, v13, v12, MEMORY[0x1E0DEE9D8], v26);
            OUTLINED_FUNCTION_4_0();
          }
          v27 = v26[7];
          OUTLINED_FUNCTION_2_0();
          v28 = (uint64_t *)(v27 + 8 * v22);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          v29 = *(_QWORD *)(*v28 + 16);
          specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
          v30 = v50;
          v31 = v51;
          v32 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
          MEMORY[0x1E0C80A78](v32, v32);
          v34 = (char *)&v45 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v35 + 16))(v34);
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, (uint64_t)v34, v28, v30, v31);
          OUTLINED_FUNCTION_60_0();
          swift_endAccess();
          OUTLINED_FUNCTION_13_0();
          return;
        }
        v24 = OUTLINED_FUNCTION_48_0();
        if ((v23 & 1) == (v25 & 1))
        {
          v22 = v24;
          goto LABEL_10;
        }
      }
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.logger);
  OUTLINED_FUNCTION_45_0();
  v37 = Logger.logObject.getter();
  v38 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)OUTLINED_FUNCTION_4_1();
    v46 = OUTLINED_FUNCTION_4_1();
    *(_DWORD *)v39 = 136315138;
    v40 = v50;
    v41 = v51;
    __swift_project_boxed_opaque_existential_1(v49, v50);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v41 + 8))(&v47, v40, v41);
    v52 = v47;
    v53 = v48;
    v42 = TypeIdentifier.description.getter();
    v44 = v43;
    OUTLINED_FUNCTION_34_2();
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_60_0();
    _os_log_impl(&dword_1C2F2D000, v37, v38, "Ignored registration of null transformation for %s", v39, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_1();
  }
  OUTLINED_FUNCTION_60_0();

}

BOOL TransformationRegistry.register(id:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  _BOOL8 v5;
  __int128 v7[2];
  _BYTE v8[24];
  uint64_t v9;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  outlined init with copy of Transforming(a2, (uint64_t)v7);
  OUTLINED_FUNCTION_25_0();
  specialized Dictionary._Variant.updateValue(_:forKey:)(v7, v2, v3, v4, (uint64_t)v8);
  swift_endAccess();
  v5 = v9 == 0;
  outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v8, &demangling cache variable for type metadata for Transforming?);
  return v5;
}

void *TransformationRegistry.defaultLengthLimit.unsafeMutableAddressor()
{
  return &static TransformationRegistry.defaultLengthLimit;
}

Swift::Bool __swiftcall TransformationRegistry.canTransform(from:to:lengthLimit:)(SiriUtilities::TypeIdentifier from, SiriUtilities::TypeIdentifier to, Swift::Int lengthLimit)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t countAndFlagsBits;
  BOOL v10;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];

  v4 = *(_QWORD *)from.encoding._countAndFlagsBits;
  v5 = *(_QWORD *)(from.encoding._countAndFlagsBits + 8);
  v6 = *(_QWORD *)from.encoding._object;
  v7 = *((_QWORD *)from.encoding._object + 1);
  if (*(_QWORD *)from.encoding._object == *(_QWORD *)from.encoding._countAndFlagsBits && v7 == v5)
    return 1;
  countAndFlagsBits = to.encoding._countAndFlagsBits;
  if ((OUTLINED_FUNCTION_3_0() & 1) != 0)
    return 1;
  if (one-time initialization token for any != -1)
    swift_once();
  v10 = v6 == static TypeIdentifier.any && v7 == *(_QWORD *)algn_1EF7D7CA8;
  if (v10 || (OUTLINED_FUNCTION_3_0() & 1) != 0)
    return 1;
  v14[0] = v4;
  v14[1] = v5;
  v13[0] = v6;
  v13[1] = v7;
  v12 = *(_QWORD *)((*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v3 + 224))(v14, v13, countAndFlagsBits, 0)+ 16);
  swift_bridgeObjectRelease();
  return v12 != 0;
}

uint64_t TransformationRegistry.transform<A>(_:to:lengthLimit:tryAllPaths:)@<X0>(_QWORD *a1@<X0>, __int128 **a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  BOOL v33;
  BOOL v34;
  uint64_t *v35;
  __int128 *v37;
  unint64_t v38;
  _QWORD *v39;
  Swift::String v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 *v63;
  __int128 *v64;
  __int128 *v65;
  Swift::String v66;
  Swift::String v67;

  v53 = a4;
  v48 = a3;
  v46 = a6;
  v51 = type metadata accessor for Optional();
  v50 = *(_QWORD *)(v51 - 8);
  v10 = MEMORY[0x1E0C80A78](v51, v9);
  v49 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v43 - v13;
  v16 = *a2;
  v15 = a2[1];
  v17 = a1[3];
  v54 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  swift_getDynamicType();
  TypeInformation.init(for:)((uint64_t)&v60);
  v18 = v63;
  v19 = v64;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v52 = a5;
  TypeInformation.init(for:)((uint64_t)&v60);
  v20 = v63;
  v21 = v64;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v16;
  v23 = v16 == v20 && v15 == v21;
  v24 = 0x1EF7D6000uLL;
  v25 = &static TypeIdentifier.any;
  if (!v23 && (OUTLINED_FUNCTION_3_0() & 1) == 0)
  {
    if (one-time initialization token for any != -1)
      goto LABEL_49;
    goto LABEL_7;
  }
LABEL_13:
  v27 = v24;
  swift_bridgeObjectRelease();
LABEL_14:
  v31 = (uint64_t)v18;
  v32 = (uint64_t *)v22;
  v33 = v18 == v22 && v19 == v15;
  if (v33 || (OUTLINED_FUNCTION_3_0() & 1) != 0)
    goto LABEL_26;
  if (*(_QWORD *)(v27 + 3880) != -1)
    swift_once();
  v34 = v22 == (__int128 *)static TypeIdentifier.any && v15 == *(__int128 **)algn_1EF7D7CA8;
  if (v34 || (OUTLINED_FUNCTION_3_0() & 1) != 0)
  {
LABEL_26:
    outlined init with copy of Any((uint64_t)v54, (uint64_t)&v60);
    v35 = v52;
    if ((swift_dynamicCast() & 1) != 0)
    {
      OUTLINED_FUNCTION_18_5((uint64_t)v14, 0);
      OUTLINED_FUNCTION_29_4();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(v35 - 1) + 32))(v46, v14, v35);
    }
    OUTLINED_FUNCTION_18_5((uint64_t)v14, 1);
    OUTLINED_FUNCTION_62_0((uint64_t)v14, *(uint64_t (**)(uint64_t, _QWORD))(v50 + 8));
  }
  v60 = (unint64_t)v18;
  *(_QWORD *)&v61 = v19;
  *(_QWORD *)&v57 = v32;
  *((_QWORD *)&v57 + 1) = v15;
  v18 = v47;
  v25 = v32;
  v24 = v31;
  v14 = (char *)(*(uint64_t (**)(unint64_t *, __int128 *, char *, _QWORD))(*(_QWORD *)v47 + 224))(&v60, &v57, v48, v53 & 1);
  v22 = (__int128 *)*((_QWORD *)v14 + 2);
  if (v22)
  {
    OUTLINED_FUNCTION_29_4();
    v48 = v14 + 32;
    v15 = v56;
    v47 = (__int128 *)((char *)&v57 + 8);
    v20 = &v61;
    OUTLINED_FUNCTION_13_2();
    v21 = 0;
    v45 = MEMORY[0x1E0DEE9B8] + 8;
    v44 = 0x80000001C2F85370;
    while (1)
    {
      if (v21 == v22)
      {
        v58 = 0u;
        v59 = 0u;
        v21 = v22;
        v57 = 0u;
      }
      else
      {
        if ((unint64_t)v21 >= *((_QWORD *)v14 + 2))
        {
          __break(1u);
LABEL_49:
          swift_once();
LABEL_7:
          if (v20 == (__int128 *)*v25 && v21 == (__int128 *)v25[1])
            goto LABEL_13;
          v27 = v24;
          v28 = OUTLINED_FUNCTION_3_0();
          swift_bridgeObjectRelease();
          if ((v28 & 1) == 0)
          {
            OUTLINED_FUNCTION_29_4();
            lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
            v29 = OUTLINED_FUNCTION_32_0();
            *v30 = 0xD000000000000040;
            v30[1] = 0x80000001C2F852F0;
            return OUTLINED_FUNCTION_46(v29, (uint64_t)v30);
          }
          goto LABEL_14;
        }
        outlined init with copy of Transforming((uint64_t)&v48[40 * (_QWORD)v21], (uint64_t)v56);
        *(_QWORD *)&v57 = v21;
        outlined init with take of Transforming(v56, (uint64_t)v47);
        v21 = (__int128 *)((char *)v21 + 1);
      }
      outlined init with take of (offset: Int, element: Transforming)?((uint64_t)&v57, (uint64_t)&v60);
      if (!v62)
      {
        OUTLINED_FUNCTION_6_1();
        lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
        v29 = OUTLINED_FUNCTION_32_0();
        *v30 = 0xD000000000000021;
        v30[1] = 0x80000001C2F85340;
        return OUTLINED_FUNCTION_46(v29, (uint64_t)v30);
      }
      v19 = (__int128 *)v60;
      outlined init with take of Transforming(&v61, (uint64_t)&v57);
      v25 = (uint64_t *)*((_QWORD *)&v58 + 1);
      v24 = v59;
      __swift_project_boxed_opaque_existential_1(&v57, *((uint64_t *)&v58 + 1));
      v37 = v65;
      (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t *, uint64_t))(v24 + 24))(&v55, v54, v25, v24);
      v18 = v37;
      if (!v37)
      {
        v24 = (uint64_t)v49;
        v25 = v52;
        if (swift_dynamicCast())
        {
          OUTLINED_FUNCTION_53_0(v24, 0);
          OUTLINED_FUNCTION_6_1();
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(v25 - 1) + 32))(v46, v24, v25);
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
        }
        OUTLINED_FUNCTION_53_0(v24, 1);
        OUTLINED_FUNCTION_62_0(v24, *(uint64_t (**)(uint64_t, _QWORD))(v50 + 8));
        lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
        v18 = (__int128 *)OUTLINED_FUNCTION_32_0();
        v38 = v44;
        *v39 = 0xD000000000000026;
        v39[1] = v38;
        OUTLINED_FUNCTION_46((uint64_t)v18, (uint64_t)v39);
      }
      if ((v53 & 1) == 0 || v19 == (__int128 *)(*((_QWORD *)v14 + 2) - 1))
      {
        OUTLINED_FUNCTION_6_1();
        swift_willThrow();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
      }
      v65 = 0;

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
    }
  }
  swift_bridgeObjectRelease();
  v60 = 0;
  *(_QWORD *)&v61 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v60 = 0xD000000000000021;
  *(_QWORD *)&v61 = 0x80000001C2F853A0;
  *(_QWORD *)&v57 = v31;
  *((_QWORD *)&v57 + 1) = v19;
  v66._countAndFlagsBits = TypeIdentifier.description.getter();
  OUTLINED_FUNCTION_42_0(v66);
  OUTLINED_FUNCTION_29_4();
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 544175136;
  v40._object = (void *)0xE400000000000000;
  String.append(_:)(v40);
  *(_QWORD *)&v57 = v25;
  *((_QWORD *)&v57 + 1) = v15;
  v67._countAndFlagsBits = TypeIdentifier.description.getter();
  OUTLINED_FUNCTION_42_0(v67);
  swift_bridgeObjectRelease();
  v41 = v60;
  v42 = v61;
  lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
  v29 = OUTLINED_FUNCTION_32_0();
  *v30 = v41;
  v30[1] = v42;
  return OUTLINED_FUNCTION_46(v29, (uint64_t)v30);
}

uint64_t TransformationRegistry.namedTransformation(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  char v10;

  v5 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  result = OUTLINED_FUNCTION_25_0();
  v8 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(v8 + 16))
  {
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_61_0();
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4, v6);
    if ((v10 & 1) != 0)
    {
      outlined init with copy of Transforming(*(_QWORD *)(v8 + 56) + 40 * v9, a2);
    }
    else
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    OUTLINED_FUNCTION_55_0();
    return OUTLINED_FUNCTION_2_0();
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t static TransformationRegistry.defaultLengthLimit.getter()
{
  return 5;
}

__n128 *TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v11;
  __n128 *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;

  v5 = *a1;
  v4 = a1[1];
  v7 = *a2;
  v6 = a2[1];
  v8 = *a1 == *a2 && v4 == v6;
  if (!v8 && (OUTLINED_FUNCTION_3_0() & 1) == 0)
  {
    if (one-time initialization token for any != -1)
      swift_once();
    v11 = v7 == static TypeIdentifier.any && v6 == *(_QWORD *)algn_1EF7D7CA8;
    if (!v11 && (OUTLINED_FUNCTION_3_0() & 1) == 0)
    {
      v184 = v5;
      v185 = v4;
      *(_QWORD *)&v180 = v7;
      *((_QWORD *)&v180 + 1) = v6;
      v12 = (__n128 *)TransformationRegistry.findBasicTransformation(from:to:lengthLimit:findAllPaths:)(&v184, (uint64_t *)&v180, a3, a4 & 1);
      if (v12[1].n128_u64[0])
        return v12;
      OUTLINED_FUNCTION_19_5();
      OUTLINED_FUNCTION_15_0();
      specialized TypeInformation.init<A>(encoding:)(v5, v4, (uint64_t)&v184);
      v16 = v184;
      v17 = BYTE1(v184);
      v172 = v185;
      v177 = v187;
      v178 = v186;
      v176 = v188;
      OUTLINED_FUNCTION_4_0();
      specialized TypeInformation.init<A>(encoding:)(v7, v6, (uint64_t)&v184);
      v179 = v187;
      if (v184 == 1)
      {
        v174 = v188;
        if (v16)
        {
          OUTLINED_FUNCTION_8_8();
          v18 = OUTLINED_FUNCTION_47();
          v25 = OUTLINED_FUNCTION_1_12(v18, v19, v20, v21, v22, v23, v24);
          OUTLINED_FUNCTION_17_5();
          OUTLINED_FUNCTION_10_6();
          OUTLINED_FUNCTION_14_1();
          OUTLINED_FUNCTION_10_0();
          OUTLINED_FUNCTION_22_5();
          OUTLINED_FUNCTION_14_1();
          specialized Collection.first.getter(v25, (uint64_t)&v180);
          v26 = OUTLINED_FUNCTION_2_0();
          if (v181)
          {
            OUTLINED_FUNCTION_6_7(v26, v27, v28, v29, v30, v31, v32);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
            v12 = (__n128 *)OUTLINED_FUNCTION_37();
            OUTLINED_FUNCTION_3_8(v12, (__n128)xmmword_1C2F80B40, v33, v34, v35, v36, v37, v38, v39);
            v40 = OUTLINED_FUNCTION_37();
            OUTLINED_FUNCTION_4_7(v40, v41, v42, v43, v44, v45, v46, v47, v171, v172, v174, v176, v177, v178, v179, v180);
            v12[3].n128_u64[1] = (unint64_t)&unk_1E7CD8A68;
            v12[4].n128_u64[0] = (unint64_t)&protocol witness table for TransformationRegistry.GenericTransformer;
            v48 = (_QWORD *)OUTLINED_FUNCTION_37();
            v49 = OUTLINED_FUNCTION_5_10(v48);
            v50 = partial apply for closure #2 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:);
LABEL_31:
            v49[6] = v50;
            v49[7] = v25;
            OUTLINED_FUNCTION_15_0();
            OUTLINED_FUNCTION_4_0();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v184);
            return v12;
          }
        }
        else
        {
          OUTLINED_FUNCTION_17_5();
          OUTLINED_FUNCTION_10_6();
          OUTLINED_FUNCTION_43_0();
          v81 = OUTLINED_FUNCTION_16_5();
          v25 = OUTLINED_FUNCTION_1_12(v81, v82, v83, v84, v85, v86, v87);
          OUTLINED_FUNCTION_10_0();
          OUTLINED_FUNCTION_22_5();
          OUTLINED_FUNCTION_14_1();
          specialized Collection.first.getter(v25, (uint64_t)&v180);
          v88 = OUTLINED_FUNCTION_2_0();
          if (v181)
          {
            OUTLINED_FUNCTION_6_7(v88, v89, v90, v91, v92, v93, v94);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
            v12 = (__n128 *)OUTLINED_FUNCTION_37();
            OUTLINED_FUNCTION_3_8(v12, (__n128)xmmword_1C2F80B40, v95, v96, v97, v98, v99, v100, v101);
            v102 = OUTLINED_FUNCTION_37();
            OUTLINED_FUNCTION_4_7(v102, v103, v104, v105, v106, v107, v108, v109, v171, v172, v174, v176, v177, v178, v179, v180);
            v12[3].n128_u64[1] = (unint64_t)&unk_1E7CD8A68;
            v12[4].n128_u64[0] = (unint64_t)&protocol witness table for TransformationRegistry.GenericTransformer;
            v110 = (_QWORD *)OUTLINED_FUNCTION_37();
            v49 = OUTLINED_FUNCTION_5_10(v110);
            v50 = partial apply for closure #3 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:);
            goto LABEL_31;
          }
        }
      }
      else if (BYTE1(v184))
      {
        v175 = v188;
        if (v17)
        {
          OUTLINED_FUNCTION_8_8();
          v51 = OUTLINED_FUNCTION_47();
          v25 = OUTLINED_FUNCTION_1_12(v51, v52, v53, v54, v55, v56, v57);
          OUTLINED_FUNCTION_17_5();
          OUTLINED_FUNCTION_10_6();
          OUTLINED_FUNCTION_14_1();
          OUTLINED_FUNCTION_10_0();
          OUTLINED_FUNCTION_22_5();
          OUTLINED_FUNCTION_14_1();
          specialized Collection.first.getter(v25, (uint64_t)&v180);
          v58 = OUTLINED_FUNCTION_2_0();
          if (v181)
          {
            OUTLINED_FUNCTION_6_7(v58, v59, v60, v61, v62, v63, v64);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
            v12 = (__n128 *)OUTLINED_FUNCTION_37();
            OUTLINED_FUNCTION_3_8(v12, (__n128)xmmword_1C2F80B40, v65, v66, v67, v68, v69, v70, v71);
            v72 = OUTLINED_FUNCTION_37();
            OUTLINED_FUNCTION_4_7(v72, v73, v74, v75, v76, v77, v78, v79, v171, v172, v175, v176, v177, v178, v179, v180);
            v12[3].n128_u64[1] = (unint64_t)&unk_1E7CD8A68;
            v12[4].n128_u64[0] = (unint64_t)&protocol witness table for TransformationRegistry.GenericTransformer;
            v80 = (_QWORD *)OUTLINED_FUNCTION_37();
            v49 = OUTLINED_FUNCTION_5_10(v80);
            v50 = partial apply for closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:);
            goto LABEL_31;
          }
        }
        else
        {
          OUTLINED_FUNCTION_17_5();
          OUTLINED_FUNCTION_10_6();
          OUTLINED_FUNCTION_43_0();
          v141 = OUTLINED_FUNCTION_16_5();
          v25 = OUTLINED_FUNCTION_1_12(v141, v142, v143, v144, v145, v146, v147);
          OUTLINED_FUNCTION_10_0();
          OUTLINED_FUNCTION_22_5();
          OUTLINED_FUNCTION_14_1();
          specialized Collection.first.getter(v25, (uint64_t)&v180);
          v148 = OUTLINED_FUNCTION_2_0();
          if (v181)
          {
            OUTLINED_FUNCTION_6_7(v148, v149, v150, v151, v152, v153, v154);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
            v12 = (__n128 *)OUTLINED_FUNCTION_37();
            OUTLINED_FUNCTION_3_8(v12, (__n128)xmmword_1C2F80B40, v155, v156, v157, v158, v159, v160, v161);
            v162 = OUTLINED_FUNCTION_37();
            OUTLINED_FUNCTION_4_7(v162, v163, v164, v165, v166, v167, v168, v169, v171, v172, v175, v176, v177, v178, v179, v180);
            v12[3].n128_u64[1] = (unint64_t)&unk_1E7CD8A68;
            v12[4].n128_u64[0] = (unint64_t)&protocol witness table for TransformationRegistry.GenericTransformer;
            v170 = (_QWORD *)OUTLINED_FUNCTION_37();
            v49 = OUTLINED_FUNCTION_5_10(v170);
            v50 = partial apply for closure #5 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:);
            goto LABEL_31;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_22_5();
        swift_bridgeObjectRelease();
        if (!v16)
        {
          OUTLINED_FUNCTION_17_5();
          OUTLINED_FUNCTION_10_6();
          OUTLINED_FUNCTION_43_0();
          return (__n128 *)MEMORY[0x1E0DEE9D8];
        }
        *(_QWORD *)&v180 = v172;
        *((_QWORD *)&v180 + 1) = v178;
        v182 = v7;
        v183 = v6;
        v111 = OUTLINED_FUNCTION_47();
        v25 = OUTLINED_FUNCTION_1_12(v111, v112, v113, v114, v115, v116, v117);
        OUTLINED_FUNCTION_17_5();
        OUTLINED_FUNCTION_10_6();
        OUTLINED_FUNCTION_14_1();
        specialized Collection.first.getter(v25, (uint64_t)&v180);
        v118 = OUTLINED_FUNCTION_2_0();
        if (v181)
        {
          OUTLINED_FUNCTION_6_7(v118, v119, v120, v121, v122, v123, v124);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
          v12 = (__n128 *)OUTLINED_FUNCTION_37();
          OUTLINED_FUNCTION_3_8(v12, (__n128)xmmword_1C2F80B40, v125, v126, v127, v128, v129, v130, v131);
          v132 = OUTLINED_FUNCTION_37();
          OUTLINED_FUNCTION_4_7(v132, v133, v134, v135, v136, v137, v138, v139, v171, v172, v173, v176, v177, v178, v179, v180);
          v12[3].n128_u64[1] = (unint64_t)&unk_1E7CD8A68;
          v12[4].n128_u64[0] = (unint64_t)&protocol witness table for TransformationRegistry.GenericTransformer;
          v140 = (_QWORD *)OUTLINED_FUNCTION_37();
          v49 = OUTLINED_FUNCTION_5_10(v140);
          v50 = partial apply for closure #6 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:);
          goto LABEL_31;
        }
      }
      outlined destroy of CheckedContinuation<(), Error>?((uint64_t)&v180, &demangling cache variable for type metadata for Transforming?);
      return (__n128 *)MEMORY[0x1E0DEE9D8];
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
  v12 = (__n128 *)OUTLINED_FUNCTION_37();
  v12[1] = (__n128)xmmword_1C2F80B40;
  v12[3].n128_u64[1] = (unint64_t)&unk_1E7CD8A68;
  v12[4].n128_u64[0] = (unint64_t)&protocol witness table for TransformationRegistry.GenericTransformer;
  v13 = (_QWORD *)OUTLINED_FUNCTION_37();
  v14 = OUTLINED_FUNCTION_5_10(v13);
  v14[6] = closure #1 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:);
  v14[7] = 0;
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_4_0();
  return v12;
}

uint64_t closure #1 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of Any(a1, a2);
}

double specialized Collection.first.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  if (*(_QWORD *)(a1 + 16))
  {
    outlined init with copy of Transforming(a1 + 32, a2);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t closure #2 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  __int128 v13;
  uint64_t v14;
  _BYTE v15[32];

  outlined init with copy of Any(a1, (uint64_t)&v13);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  a3[3] = v6;
  v7 = swift_allocObject();
  v8 = (_OWORD *)(v7 + 16);
  *a3 = v7;
  outlined init with copy of Any?((uint64_t)v15, (uint64_t)&v13);
  if (v14)
  {
    outlined init with take of Any(&v13, v12);
    v9 = a2[3];
    v10 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v9);
    (*(void (**)(_OWORD *, uint64_t, uint64_t))(v10 + 24))(v12, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    if (v3)
    {
      outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v15, &demangling cache variable for type metadata for Any?);
      return __swift_deallocate_boxed_opaque_existential_0((uint64_t)a3);
    }
  }
  else
  {
    *v8 = 0u;
    v8[1] = 0u;
  }
  return outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v15, &demangling cache variable for type metadata for Any?);
}

uint64_t closure #3 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  a3[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  *a3 = swift_allocObject();
  v7 = a2[3];
  v8 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(a1, v7, v8);
  if (v3)
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)a3);
  return result;
}

uint64_t closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[6];
  _BYTE v13[32];

  outlined init with copy of Any(a1, (uint64_t)v13);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  v7 = swift_dynamicCast();
  if ((_DWORD)v7)
    v9 = v12[5];
  else
    v9 = MEMORY[0x1E0DEE9D8];
  MEMORY[0x1E0C80A78](v7, v8);
  v12[2] = a2;
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayypG_ypsAE_pTg5((void (*)(_OWORD *__return_ptr, uint64_t, uint64_t *))partial apply for closure #1 in closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:), (uint64_t)v12, v9);
  result = swift_bridgeObjectRelease();
  if (!v3)
  {
    a3[3] = v6;
    *a3 = v10;
  }
  return result;
}

uint64_t closure #1 in closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = a2[3];
  v7 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v6);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, v6, v7);
  if (v3)
    *a3 = v3;
  return result;
}

uint64_t closure #5 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C2F80B40;
  v8 = a2[3];
  v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(a1, v8, v9);
  if (v3)
  {
    *(_QWORD *)(v7 + 16) = 0;
    return swift_release();
  }
  else
  {
    result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    a3[3] = result;
    *a3 = v7;
  }
  return result;
}

_OWORD *closure #6 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  __int128 v12;
  uint64_t v13;
  _BYTE v14[32];
  __int128 v15;
  __int128 v16;

  outlined init with copy of Any(a1, (uint64_t)&v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  outlined init with copy of Any?((uint64_t)v14, (uint64_t)&v12);
  if (!v13)
  {
    v15 = 0u;
    v16 = 0u;
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v14, &demangling cache variable for type metadata for Any?);
LABEL_5:
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)&v15, &demangling cache variable for type metadata for Any?);
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError();
    *(_QWORD *)v9 = 0xD000000000000033;
    *(_QWORD *)(v9 + 8) = 0x80000001C2F85450;
    *(_BYTE *)(v9 + 16) = 0;
    return (_OWORD *)swift_willThrow();
  }
  outlined init with take of Any(&v12, v11);
  v6 = a2[3];
  v7 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v6);
  (*(void (**)(__int128 *__return_ptr, _OWORD *, uint64_t, uint64_t))(v7 + 24))(&v15, v11, v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  if (v3)
    return (_OWORD *)outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v14, &demangling cache variable for type metadata for Any?);
  v10 = *((_QWORD *)&v16 + 1);
  outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v14, &demangling cache variable for type metadata for Any?);
  if (!v10)
    goto LABEL_5;
  return outlined init with take of Any(&v15, a3);
}

uint64_t TransformationRegistry.findBasicTransformation(from:to:lengthLimit:findAllPaths:)(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v20;
  void (*v21)(__int128 *__return_ptr, uint64_t, uint64_t);
  char v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  NSObject *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  Class isa;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Class v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  uint64_t v47;
  Class v48;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v50;
  NSObject *v51;
  NSObject *v52;
  Class v53;
  uint64_t v55;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(__int128 *__return_ptr, uint64_t, uint64_t);
  char v61;
  char v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  objc_class *v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[2];
  uint64_t v94;
  __int128 v95;
  ValueMetadata *v96;
  _UNKNOWN **v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v5 = v4;
  v101 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v8 = a1[1];
  v9 = a2[1];
  if (*a1 == *a2 && v8 == v9)
    return MEMORY[0x1E0DEE9D8];
  v90 = *a2;
  if ((OUTLINED_FUNCTION_3_0() & 1) != 0)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TypeIdentifier>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2F80B40;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = v8;
  OUTLINED_FUNCTION_13_2();
  v94 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v82 = v7;
  *(_QWORD *)&v98 = v7;
  *((_QWORD *)&v98 + 1) = v8;
  swift_bridgeObjectRetain();
  v14 = TransformationRegistry.findNextSteps(from:ignoringTypes:)((uint64_t *)&v98, v94);
  OUTLINED_FUNCTION_7_0();
  v15 = *(_QWORD *)(v14 + 16);
  v89 = v9;
  v83 = v5;
  v84 = v8;
  if (v15)
  {
    v16 = v14 + 32;
    v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      outlined init with copy of Transforming(v16, (uint64_t)&v98);
      v18 = v100;
      __swift_project_boxed_opaque_existential_1(&v98, v99);
      OUTLINED_FUNCTION_15_5();
      if ((_QWORD)v95 == v90 && *((_QWORD *)&v95 + 1) == v9)
      {
        OUTLINED_FUNCTION_13_0();
LABEL_27:
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_34_2();
        OUTLINED_FUNCTION_51_0();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
        v11 = OUTLINED_FUNCTION_37();
        *(_OWORD *)(v11 + 16) = xmmword_1C2F80B40;
        outlined init with copy of Transforming((uint64_t)&v98, v11 + 32);
        goto LABEL_83;
      }
      v20 = OUTLINED_FUNCTION_3_0();
      OUTLINED_FUNCTION_2_0();
      if ((v20 & 1) != 0)
        goto LABEL_27;
      OUTLINED_FUNCTION_56_0();
      v21 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v9 + 16);
      swift_bridgeObjectRetain();
      v21(&v95, v18, v9);
      OUTLINED_FUNCTION_39_2();
      v23 = v22;
      OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_7_0();
      if ((v23 & 1) != 0)
      {
        v9 = v89;
      }
      else
      {
        __swift_project_boxed_opaque_existential_1(&v98, v99);
        OUTLINED_FUNCTION_15_5();
        OUTLINED_FUNCTION_37_1();
        swift_bridgeObjectRelease();
        outlined init with copy of Transforming((uint64_t)&v98, (uint64_t)&v95);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
        v24 = OUTLINED_FUNCTION_37();
        *(_OWORD *)(v24 + 16) = xmmword_1C2F80B40;
        outlined init with take of Transforming(&v95, v24 + 32);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v9 = v89;
          v25 = v17;
        }
        else
        {
          OUTLINED_FUNCTION_32_3();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v25 = v27;
          v9 = v89;
        }
        v26 = v25[2];
        if (v26 >= v25[3] >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v25 = v28;
        }
        v25[2] = v26 + 1;
        v17 = v25;
        v25[v26 + 4] = v24;
      }
      OUTLINED_FUNCTION_59_0();
      v16 += 40;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    v8 = v84;
    v29 = v17;
  }
  else
  {
    OUTLINED_FUNCTION_13_0();
    v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v30 = v29[2];
  if (!v30)
  {
    v11 = MEMORY[0x1E0DEE9D8];
LABEL_85:
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_51_0();
    if (*(_QWORD *)(v11 + 16))
      return v11;
    OUTLINED_FUNCTION_34_2();
    if (*(_QWORD *)(v5 + 32))
    {
      *(_QWORD *)&v98 = v82;
      *((_QWORD *)&v98 + 1) = v8;
      *(_QWORD *)&v95 = v90;
      *((_QWORD *)&v95 + 1) = v89;
      swift_retain();
      v11 = TransformationRegistry.findBasicTransformation(from:to:lengthLimit:findAllPaths:)(&v98, &v95, a3, a4 & 1);
      swift_release();
      return v11;
    }
    return MEMORY[0x1E0DEE9D8];
  }
  v11 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v31 = v29[4];
    OUTLINED_FUNCTION_4_0();
    if (!swift_isUniquelyReferenced_nonNull_native() || (unint64_t)(v30 - 1) > v29[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v29 = v32;
    }
    v85 = v29;
    v33 = v29 + 4;
    swift_arrayDestroy();
    v34 = v29[2];
    if (!v34)
      goto LABEL_98;
    memmove(v33, v85 + 5, 8 * v34 - 8);
    v85[2] = v34 - 1;
    isa = v31[2].isa;
    if (!isa)
      goto LABEL_90;
    v36 = (uint64_t)&v31[5 * (_QWORD)isa + 4];
    v37 = *(_QWORD *)(v36 - 16);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v36 - 40), v37);
    OUTLINED_FUNCTION_35_2(v37);
    v95 = v98;
    OUTLINED_FUNCTION_13_2();
    v38 = TransformationRegistry.findNextSteps(from:ignoringTypes:)((uint64_t *)&v95, v94);
    OUTLINED_FUNCTION_7_0();
    OUTLINED_FUNCTION_21_0();
    v39 = *(_QWORD *)(v38 + 16);
    if (v39)
      break;
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_2_0();
LABEL_80:
    v8 = v84;
    v29 = v85;
    v30 = v85[2];
    if (!v30)
      goto LABEL_85;
  }
  v40 = v31[2].isa;
  if (!v40)
LABEL_91:
    __break(1u);
  v41 = v38 + 32;
  v86 = (uint64_t)&v31[5 * (_QWORD)v40 - 1];
  v87 = v31[2].isa;
  while (1)
  {
    outlined init with copy of Transforming(v41, (uint64_t)&v98);
    v42 = v99;
    __swift_project_boxed_opaque_existential_1(&v98, v99);
    OUTLINED_FUNCTION_35_2(v42);
    if (v87 > v31[2].isa)
    {
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    v43 = a3;
    v44 = v11;
    outlined init with copy of Transforming(v86, (uint64_t)&v95);
    __swift_project_boxed_opaque_existential_1(&v95, (uint64_t)v96);
    OUTLINED_FUNCTION_41();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
    if (v93[0] == v91 && v93[1] == v92)
    {
      OUTLINED_FUNCTION_14_1();
    }
    else
    {
      v46 = OUTLINED_FUNCTION_3_0();
      OUTLINED_FUNCTION_7_0();
      OUTLINED_FUNCTION_2_0();
      if ((v46 & 1) == 0)
      {
        while (1)
        {
          TransformationChain.outputType.getter((uint64_t)v31);
          v75 = v99;
          v76 = v100;
          __swift_project_boxed_opaque_existential_1(&v98, v99);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v76 + 8))(v93, v75, v76);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_13_0();
          if (one-time initialization token for logger != -1)
            swift_once();
          v77 = type metadata accessor for Logger();
          __swift_project_value_buffer(v77, (uint64_t)static Logger.logger);
          v31 = Logger.logObject.getter();
          v78 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v31, v78))
          {
            v79 = OUTLINED_FUNCTION_4_1();
            *(_QWORD *)&v95 = OUTLINED_FUNCTION_4_1();
            *(_DWORD *)v79 = 136315650;
            v80 = StaticString.description.getter();
            v93[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, (uint64_t *)&v95);
            OUTLINED_FUNCTION_26_6();
            OUTLINED_FUNCTION_19_5();
            *(_WORD *)(v79 + 12) = 2048;
            v93[0] = 275;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v79 + 22) = 2080;
            v93[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000031, 0x80000001C2F85490, (uint64_t *)&v95);
            OUTLINED_FUNCTION_26_6();
            _os_log_impl(&dword_1C2F2D000, v31, v78, "FatalError at %s:%lu - %s", (uint8_t *)v79, 0x20u);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_1_1();
          }

          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_98:
          OUTLINED_FUNCTION_0_11();
LABEL_92:
          _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
        }
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transforming>);
    v47 = swift_initStackObject();
    *(_OWORD *)(v47 + 16) = xmmword_1C2F80B40;
    outlined init with copy of Transforming((uint64_t)&v98, v47 + 32);
    v48 = v31[2].isa;
    OUTLINED_FUNCTION_4_0();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native
      || (v50 = (unint64_t)v31[3].isa >> 1, v51 = v31, v50 <= (unint64_t)v48))
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, (uint64_t)v48 + 1, 1, (uint64_t)v31);
      v51 = v52;
      v50 = (unint64_t)v52[3].isa >> 1;
    }
    v53 = v51[2].isa;
    if (v50 <= (unint64_t)v53)
      goto LABEL_89;
    if (v47 + 32 < (unint64_t)&v51[5 * (_QWORD)v53 + 9]
      && (unint64_t)&v51[5 * (_QWORD)v53 + 4] < v47 + 72)
    {
      OUTLINED_FUNCTION_0_11();
      goto LABEL_92;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transforming);
    swift_arrayInitWithCopy();
    ++v51[2].isa;
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    v55 = v99;
    __swift_project_boxed_opaque_existential_1(&v98, v99);
    OUTLINED_FUNCTION_41();
    if ((_QWORD)v95 == v90 && *((_QWORD *)&v95 + 1) == v89)
      break;
    v55 = OUTLINED_FUNCTION_3_0();
    OUTLINED_FUNCTION_2_0();
    v11 = v44;
    if ((v55 & 1) != 0)
      goto LABEL_62;
    a3 = v43;
LABEL_68:
    if ((uint64_t)v51[2].isa >= a3)
    {
      OUTLINED_FUNCTION_21_0();
    }
    else
    {
      v59 = a3;
      OUTLINED_FUNCTION_56_0();
      v60 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v11 + 16);
      swift_bridgeObjectRetain();
      v60(&v95, v55, v11);
      OUTLINED_FUNCTION_39_2();
      v62 = v61;
      OUTLINED_FUNCTION_2_0();
      OUTLINED_FUNCTION_7_0();
      if ((v62 & 1) != 0)
      {
        OUTLINED_FUNCTION_21_0();
        a3 = v59;
      }
      else
      {
        if ((a4 & 1) == 0)
        {
          __swift_project_boxed_opaque_existential_1(&v98, v99);
          OUTLINED_FUNCTION_15_5();
          OUTLINED_FUNCTION_37_1();
          swift_bridgeObjectRelease();
        }
        v63 = v85;
        v65 = v85[2];
        v64 = v85[3];
        a3 = v59;
        if (v65 >= v64 >> 1)
        {
          OUTLINED_FUNCTION_50(v64);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v63 = v74;
        }
        v63[2] = v65 + 1;
        v85 = v63;
        v63[v65 + 4] = v51;
      }
    }
    OUTLINED_FUNCTION_59_0();
    v41 += 40;
    if (!--v39)
    {
      OUTLINED_FUNCTION_13_0();
      OUTLINED_FUNCTION_10_6();
      v5 = v83;
      goto LABEL_80;
    }
  }
  swift_bridgeObjectRelease();
  v11 = v44;
LABEL_62:
  if ((a4 & 1) != 0)
  {
    a3 = v43;
    OUTLINED_FUNCTION_13_2();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v66 = OUTLINED_FUNCTION_32_3();
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v66, v67, v68, v11);
      v11 = v69;
    }
    v58 = *(_QWORD *)(v11 + 16);
    v57 = *(_QWORD *)(v11 + 24);
    if (v58 >= v57 >> 1)
    {
      v70 = OUTLINED_FUNCTION_50(v57);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v70, v71, v72, v11);
      v11 = v73;
    }
    v97 = &protocol witness table for TransformationChain;
    v96 = &type metadata for TransformationChain;
    *(_QWORD *)&v95 = v51;
    *(_QWORD *)(v11 + 16) = v58 + 1;
    outlined init with take of Transforming(&v95, v11 + 40 * v58 + 32);
    goto LABEL_68;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_51_0();
  v11 = OUTLINED_FUNCTION_37();
  *(_OWORD *)(v11 + 16) = xmmword_1C2F80B40;
  *(_QWORD *)(v11 + 56) = &type metadata for TransformationChain;
  *(_QWORD *)(v11 + 64) = &protocol witness table for TransformationChain;
  *(_QWORD *)(v11 + 32) = v51;
LABEL_83:
  OUTLINED_FUNCTION_59_0();
  return v11;
}

uint64_t TransformationRegistry.findNextSteps(from:ignoringTypes:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30[3];
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *a1;
  v5 = a1[1];
  v6 = MEMORY[0x1E0DEE9D8];
  v36 = MEMORY[0x1E0DEE9D8];
  OUTLINED_FUNCTION_25_0();
  v7 = *(_QWORD *)(v2 + 16);
  OUTLINED_FUNCTION_61_0();
  OUTLINED_FUNCTION_13_2();
  specialized Dictionary.subscript.getter(v4, v5, v7);
  v9 = v8;
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_2_0();
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = v9 + 32;
      do
      {
        outlined init with copy of Transforming(v11, (uint64_t)v33);
        v12 = v34;
        v13 = v35;
        __swift_project_boxed_opaque_existential_1(v33, v34);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v13 + 16))(v30, v12, v13);
        specialized Set.contains(_:)(v30[0], v30[1], a2);
        LOBYTE(v12) = v14;
        OUTLINED_FUNCTION_2_0();
        if ((v12 & 1) == 0)
        {
          outlined init with copy of Transforming((uint64_t)v33, (uint64_t)v30);
          v15 = v36;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            v24 = OUTLINED_FUNCTION_32_3();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24, v25, v26, v15);
            v15 = v27;
            v36 = v27;
          }
          v17 = *(_QWORD *)(v15 + 16);
          v16 = *(_QWORD *)(v15 + 24);
          if (v17 >= v16 >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1, v15);
            v36 = v28;
          }
          v18 = v31;
          v19 = v32;
          v20 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v30, v31);
          MEMORY[0x1E0C80A78](v20, v20);
          v22 = (char *)v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v23 + 16))(v22);
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, (uint64_t)v22, &v36, v18, v19);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
        v11 += 40;
        --v10;
      }
      while (v10);
      OUTLINED_FUNCTION_55_0();
      return v36;
    }
    else
    {
      OUTLINED_FUNCTION_55_0();
    }
  }
  return v6;
}

uint64_t TransformationRegistry.GenericTransformer.typeErasedTransform(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t protocol witness for Transforming.inputType.getter in conformance TransformationRegistry.GenericTransformer@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Transforming.outputType.getter in conformance TransformationRegistry.GenericTransformer@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Transforming.typeErasedTransform(_:) in conformance TransformationRegistry.GenericTransformer()
{
  return TransformationRegistry.GenericTransformer.typeErasedTransform(_:)();
}

void TransformationRegistry.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 32) = 0;
  if (v1)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native())
        break;
      v2 = *(_QWORD *)(v1 + 32);
      swift_retain();
      swift_release();
      v1 = v2;
    }
    while (v2);
  }
  swift_release();
  OUTLINED_FUNCTION_9_0();
}

uint64_t TransformationRegistry.__deallocating_deinit()
{
  TransformationRegistry.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized TypeInformation.init<A>(encoding:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  Swift::String v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;

  swift_bridgeObjectRetain();
  v6 = OUTLINED_FUNCTION_25_5();
  v8 = v7;
  OUTLINED_FUNCTION_31_3();
  v9 = OUTLINED_FUNCTION_25_5();
  v11 = v10;
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = 26451;
  v23._object = (void *)0xE200000000000000;
  v12 = OUTLINED_FUNCTION_44_0(v23);
  if (v12)
  {
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_31_3();
    specialized BidirectionalCollection.dropLast(_:)(2);
    OUTLINED_FUNCTION_54_0();
    v13 = String.init<A>(_:)();
    v15 = v14;
    result = OUTLINED_FUNCTION_19_5();
    v17 = 0;
  }
  else
  {
    v18._countAndFlagsBits = 7954771;
    v18._object = (void *)0xE300000000000000;
    if (String.hasPrefix(_:)(v18)
      && (OUTLINED_FUNCTION_31_3(),
          v24._countAndFlagsBits = 71,
          v24._object = (void *)0xE100000000000000,
          v19 = OUTLINED_FUNCTION_44_0(v24),
          OUTLINED_FUNCTION_19_5(),
          v19))
    {
      OUTLINED_FUNCTION_21_0();
      OUTLINED_FUNCTION_31_3();
      v20 = specialized Collection.dropFirst(_:)(3uLL, a1, a2);
      v17 = 1;
      specialized Collection.dropLast(_:)(1, v20, v21);
      OUTLINED_FUNCTION_54_0();
      v13 = String.init<A>(_:)();
      v15 = v22;
      result = OUTLINED_FUNCTION_19_5();
    }
    else
    {
      result = OUTLINED_FUNCTION_19_5();
      v17 = 0;
      v13 = v9;
      v15 = v11;
    }
  }
  *(_BYTE *)a3 = v12;
  *(_BYTE *)(a3 + 1) = v17;
  *(_QWORD *)(a3 + 8) = v13;
  *(_QWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = v11;
  *(_QWORD *)(a3 + 40) = v6;
  *(_QWORD *)(a3 + 48) = v8;
  return result;
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t result)
{
  uint64_t v1;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    v1 = String.subscript.getter();
    swift_bridgeObjectRelease();
    return v1;
  }
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
    {
      v7 = String.subscript.getter();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection.dropLast(_:)(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v5 = result;
  result = Substring.distance(from:to:)();
  if (__OFSUB__(result, v5))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = Substring.index(_:offsetBy:limitedBy:)();
  if ((v6 & 1) != 0)
    v7 = a3;
  else
    v7 = result;
  if (v7 >> 14 >= a2 >> 14)
  {
    v8 = Substring.subscript.getter();
    swift_bridgeObjectRelease();
    return v8;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transforming);
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result)
  {
    result = a1(result, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v1 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  _QWORD *v1;

  if (result + 1 > *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v5 = OUTLINED_FUNCTION_14_8(a1, a2, a3, a4);
  result = outlined init with take of Any(v7, (_OWORD *)(v6 + 32 * v5));
  v9 = *(_QWORD *)(a4 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    *(_QWORD *)(a4 + 16) = v11;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, _QWORD *a6)
{
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a6[(a1 >> 6) + 8] |= 1 << a1;
  v7 = (_QWORD *)(a6[6] + 24 * a1);
  *v7 = a2;
  v7[1] = a3;
  v7[2] = a4;
  result = outlined init with take of Transforming(a5, a6[7] + 40 * a1);
  v9 = a6[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a6[2] = v11;
  return result;
}

void specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  OUTLINED_FUNCTION_40_1(a1, a4 + 8 * (a1 >> 6));
  v9 = *(_QWORD *)(v8 + 48);
  v10 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a2, v10);
  outlined init with take of Any(a3, (_OWORD *)(*(_QWORD *)(a4 + 56) + 32 * a1));
  v11 = *(_QWORD *)(a4 + 16);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a4 + 16) = v13;
    OUTLINED_FUNCTION_1_3();
  }
}

void specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  OUTLINED_FUNCTION_40_1(a1, a5 + 8 * (a1 >> 6));
  v11 = *(_QWORD *)(v10 + 48);
  v12 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a2, v12);
  v13 = (_QWORD *)(*(_QWORD *)(a5 + 56) + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = *(_QWORD *)(a5 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a5 + 16) = v16;
    OUTLINED_FUNCTION_1_3();
  }
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  result = OUTLINED_FUNCTION_14_8(a1, a2, a3, a4);
  *(_QWORD *)(v7 + 8 * result) = v6;
  v8 = *(_QWORD *)(v5 + 16);
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    *(_QWORD *)(v5 + 16) = v10;
  return result;
}

uint64_t specialized Dictionary._Variant.updateValue(_:forKey:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Swift::UInt a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v5;
  *v5 = 0x8000000000000000;
  specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native, a5);
  *v5 = v13;
  return swift_bridgeObjectRelease();
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Swift::UInt a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  _BOOL8 v18;
  Swift::Int v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t result;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  v17 = v14[2];
  v18 = (v16 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_9;
  }
  v20 = v15;
  v21 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<TransformationIdentifier, Transforming>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v19))
    goto LABEL_5;
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  if ((v21 & 1) != (v23 & 1))
  {
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v20 = v22;
LABEL_5:
  v24 = (uint64_t)*v7;
  if ((v21 & 1) != 0)
  {
    outlined init with take of Transforming((__int128 *)(*(_QWORD *)(v24 + 56) + 40 * v20), a6);
    return outlined init with take of Transforming(a1, *(_QWORD *)(v24 + 56) + 40 * v20);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v20, a2, a3, a4, a1, *v7);
    *(_QWORD *)(a6 + 32) = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return swift_bridgeObjectRetain();
  }
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_0;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_0, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return outlined init with take of Transforming(&v12, v10 + 40 * a1 + 32);
}

unint64_t lazy protocol witness table accessor for type TransformationError and conformance TransformationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationError and conformance TransformationError;
  if (!lazy protocol witness table cache variable for type TransformationError and conformance TransformationError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationError, &type metadata for TransformationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationError and conformance TransformationError);
  }
  return result;
}

uint64_t outlined init with take of (offset: Int, element: Transforming)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Transforming)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C2F4D808()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

_OWORD *partial apply for closure #6 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #6 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1C2F4D844()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #5 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #5 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t partial apply for closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(a1, v2 + 16, a2);
}

uint64_t partial apply for closure #3 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #3 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t partial apply for closure #2 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #2 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(a1, (_QWORD *)(v2 + 16), a2);
}

uint64_t type metadata accessor for TransformationRegistry()
{
  return objc_opt_self();
}

uint64_t method lookup function for TransformationRegistry()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TransformationRegistry.__allocating_init(fallback:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of TransformationRegistry.register(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of TransformationRegistry.register(id:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of TransformationRegistry.canTransform(from:to:lengthLimit:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of TransformationRegistry.transform<A>(_:to:lengthLimit:tryAllPaths:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of TransformationRegistry.namedTransformation(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t destroy for TransformationRegistry.GenericTransformer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for TransformationRegistry.GenericTransformer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for TransformationRegistry.GenericTransformer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TransformationRegistry.GenericTransformer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformationRegistry.GenericTransformer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationRegistry.GenericTransformer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for TransformationRegistry.GenericTransformer()
{
  return &unk_1E7CD8A68;
}

uint64_t sub_1C2F4DB88()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_deallocate_boxed_opaque_existential_0(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x1C3BCEEB0);
  return result;
}

uint64_t partial apply for closure #1 in closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return closure #1 in closure #4 in TransformationRegistry.findTransformation(from:to:lengthLimit:findAllPaths:)(a1, *(_QWORD **)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t (*v7)(uint64_t *, char *, uint64_t, _QWORD);
  uint64_t v8;
  char v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  return v7((uint64_t *)va, va1, v8, v9 & 1);
}

uint64_t OUTLINED_FUNCTION_3_8(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  a1[1] = a2;
  return outlined init with copy of Transforming((uint64_t)va1, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_4_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 a16)
{
  return outlined init with take of Transforming(&a16, a1 + 16);
}

_QWORD *OUTLINED_FUNCTION_5_10(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = result;
  result[2] = v4;
  result[3] = v2;
  result[4] = v3;
  result[5] = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  __int128 v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, __int128);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  return outlined init with take of Transforming((__int128 *)va, (uint64_t)va1);
}

uint64_t OUTLINED_FUNCTION_8_8()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_10_6()
{
  return swift_bridgeObjectRelease();
}

unint64_t OUTLINED_FUNCTION_14_8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a4 + 8 * (result >> 6) + 64) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * result) = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_15_5()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t OUTLINED_FUNCTION_16_5()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_17_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_19_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_22_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_25_5()
{
  return String.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_26_6()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_29_4()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_31_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_32_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_34_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_35_2(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void OUTLINED_FUNCTION_37_1()
{
  specialized Set._Variant.insert(_:)();
}

void OUTLINED_FUNCTION_39_2()
{
  uint64_t v0;
  uint64_t v1;

  specialized Set.contains(_:)(*(_QWORD *)(v1 - 224), *(_QWORD *)(v1 - 216), v0);
}

uint64_t OUTLINED_FUNCTION_40_1@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 64) |= 1 << result;
  return result;
}

uint64_t OUTLINED_FUNCTION_41()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

void OUTLINED_FUNCTION_42_0(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_43_0()
{
  return swift_bridgeObjectRelease();
}

BOOL OUTLINED_FUNCTION_44_0(Swift::String a1)
{
  return String.hasSuffix(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_45_0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of Transforming(v0, v1 - 136);
}

uint64_t OUTLINED_FUNCTION_46(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 16) = 0;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_47()
{
  return swift_bridgeObjectRetain();
}

unint64_t OUTLINED_FUNCTION_48_0()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

BOOL OUTLINED_FUNCTION_50@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_51_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_53_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

unint64_t OUTLINED_FUNCTION_54_0()
{
  return lazy protocol witness table accessor for type Substring and conformance Substring();
}

uint64_t OUTLINED_FUNCTION_55_0()
{
  return swift_bridgeObjectRelease();
}

_QWORD *OUTLINED_FUNCTION_56_0()
{
  uint64_t v0;

  return __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 - 184), *(_QWORD *)(v0 - 160));
}

uint64_t OUTLINED_FUNCTION_58()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_59_0()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0 - 184);
}

uint64_t OUTLINED_FUNCTION_60_0()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0 - 136);
}

uint64_t OUTLINED_FUNCTION_61_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_62_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 272));
}

uint64_t SiriEnvironment.currentDevice.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  v1 = type metadata accessor for CurrentDevice();
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v0 + 248);
  v2 = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, (uint64_t)&protocol conformance descriptor for CurrentDevice);
  return v4(v1, v1, v2);
}

uint64_t type metadata accessor for CurrentDevice()
{
  return objc_opt_self();
}

uint64_t key path setter for SiriEnvironment.currentDevice : SiriEnvironment()
{
  uint64_t v0;

  v0 = swift_retain();
  return SiriEnvironment.currentDevice.setter(v0);
}

uint64_t SiriEnvironment.currentDevice.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for CurrentDevice();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 256);
  v4 = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, (uint64_t)&protocol conformance descriptor for CurrentDevice);
  return v6(a1, v3, v3, v4);
}

void SiriEnvironment.currentDevice.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  a1[1] = v1;
  v3 = type metadata accessor for CurrentDevice();
  a1[2] = v3;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 248);
  v5 = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, (uint64_t)&protocol conformance descriptor for CurrentDevice);
  a1[3] = v5;
  *a1 = v4(v3, v3, v5);
  OUTLINED_FUNCTION_9_0();
}

uint64_t SiriEnvironment.currentDevice.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return OUTLINED_FUNCTION_75(*a1);
  v2 = OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_75(v2);
  return OUTLINED_FUNCTION_20_4();
}

uint64_t key path setter for CurrentDevice.mock : CurrentDevice(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 192);
  v3 = swift_retain();
  return v2(v3);
}

void CurrentDevice.mock.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  swift_release();
  OUTLINED_FUNCTION_33();
}

void CurrentDevice.mock.modify()
{
  swift_beginAccess();
  OUTLINED_FUNCTION_31();
}

uint64_t key path getter for CurrentDevice.identifiedUserMeCard : CurrentDevice@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 208))();
  *a2 = result;
  return result;
}

uint64_t key path setter for CurrentDevice.identifiedUserMeCard : CurrentDevice(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 216);
  v4 = *a1;
  return v3(v2);
}

uint64_t CurrentDevice.identifiedUserMeCard.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  specialized static MockablePublished.subscript.getter();
  v1 = v0;
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_12_2();
  return v1;
}

void sub_1C2F4E234()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_10_2();
  *v0 = (*(uint64_t (**)(void))(v1 + 208))();
  OUTLINED_FUNCTION_31();
}

void CurrentDevice.identifiedUserMeCard.setter(void *a1)
{
  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_15_2();
  specialized static MockablePublished.subscript.setter(a1);
}

void CurrentDevice.identifiedUserMeCard.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  a1[2] = swift_getKeyPath();
  a1[3] = swift_getKeyPath();
  specialized static MockablePublished.subscript.getter();
  *a1 = v3;
  OUTLINED_FUNCTION_9_0();
}

void CurrentDevice.identifiedUserMeCard.modify(id *a1, char a2)
{
  void *v2;
  void *v3;
  id v4;

  if ((a2 & 1) != 0)
  {
    v4 = *a1;
    OUTLINED_FUNCTION_38();
    OUTLINED_FUNCTION_50_0();
    specialized static MockablePublished.subscript.setter(v2);

  }
  else
  {
    OUTLINED_FUNCTION_38();
    OUTLINED_FUNCTION_50_0();
    specialized static MockablePublished.subscript.setter(v3);
  }
}

uint64_t key path setter for CurrentDevice.$identifiedUserMeCard : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 240);
  swift_retain();
  return v3(&v5);
}

void CurrentDevice.$identifiedUserMeCard.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void CurrentDevice.$identifiedUserMeCard.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  CurrentDevice.$identifiedUserMeCard.getter();
  OUTLINED_FUNCTION_31();
}

_QWORD *key path getter for CurrentDevice.deviceIdiom : CurrentDevice@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 256))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.deviceIdiom : CurrentDevice(char *a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  v2 = *a2;
  v4 = *a1;
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 264))(&v4);
}

uint64_t CurrentDevice.deviceIdiom.getter()
{
  return CurrentDevice.deviceIdiom.getter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_47_0();
  v0 = OUTLINED_FUNCTION_59_1();
  OUTLINED_FUNCTION_36_2(v0);
  OUTLINED_FUNCTION_5_5();
  return OUTLINED_FUNCTION_20_4();
}

void sub_1C2F4E4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  char v21;
  char v22;

  OUTLINED_FUNCTION_10_2();
  v8 = OUTLINED_FUNCTION_53_1(v0, v1, v2, v3, v4, v5, v6, v7, v16, v18, SWORD2(v18), SBYTE6(v18), SHIBYTE(v18));
  OUTLINED_FUNCTION_63_0((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v17, v19, v20, v21, v22);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F4E4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_51_1(*(uint64_t (**)(char *))(v0 + 264), v1, v2, SWORD2(v2), SBYTE6(v2), SHIBYTE(v2));
  OUTLINED_FUNCTION_27_2();
}

uint64_t CurrentDevice.deviceIdiom.setter(uint64_t a1)
{
  return CurrentDevice.deviceIdiom.setter(a1, (uint64_t)&unk_1C2F81E40, (uint64_t)&unk_1C2F81E68, (uint64_t (*)(uint64_t))specialized static MockablePublished.subscript.setter);
}

void CurrentDevice.deviceIdiom.modify()
{
  _BYTE *v0;
  unsigned __int8 *v1;
  uint64_t (*v2)(uint64_t);
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_28_4((uint64_t)v3);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_60_1(KeyPath);
  *((_QWORD *)v1 + 5) = swift_getKeyPath();
  OUTLINED_FUNCTION_1_13();
  v5 = OUTLINED_FUNCTION_27_5();
  v6 = v2(v5);
  if (v6 && (OUTLINED_FUNCTION_12_8(v6), OUTLINED_FUNCTION_0_6(), v7 = *v1, v7 != 10))
  {
    OUTLINED_FUNCTION_5_5();
    *v0 = v7;
  }
  else
  {
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_5_5();
  }
  OUTLINED_FUNCTION_1_3();
}

void CurrentDevice.deviceIdiom.modify(uint64_t a1, uint64_t a2)
{
  CurrentDevice.deviceIdiom.modify(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized static MockablePublished.subscript.setter);
}

uint64_t key path setter for CurrentDevice.$deviceIdiom : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 288);
  swift_retain();
  return v3(&v5);
}

void CurrentDevice.$deviceIdiom.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void CurrentDevice.$deviceIdiom.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  CurrentDevice.$deviceIdiom.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t key path getter for CurrentDevice.isTextToSpeechEnabled : CurrentDevice@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 304))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for CurrentDevice.isTextToSpeechEnabled : CurrentDevice(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 312))(*a1);
}

uint64_t CurrentDevice.isTextToSpeechEnabled.getter()
{
  return CurrentDevice.isTextToSpeechEnabled.getter();
}

{
  char v0;

  swift_getKeyPath();
  OUTLINED_FUNCTION_42_1();
  OUTLINED_FUNCTION_65_0();
  v0 = specialized static MockablePublished.subscript.getter();
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_5_5();
  return v0 & 1;
}

void CurrentDevice.isTextToSpeechEnabled.setter()
{
  CurrentDevice.isTextToSpeechEnabled.setter();
}

{
  swift_getKeyPath();
  OUTLINED_FUNCTION_42_1();
  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_38_1();
}

void CurrentDevice.isTextToSpeechEnabled.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = swift_getKeyPath();
  KeyPath = swift_getKeyPath();
  *(_BYTE *)(a1 + 24) = OUTLINED_FUNCTION_30_2(KeyPath) & 1;
  OUTLINED_FUNCTION_9_0();
}

uint64_t key path setter for CurrentDevice.$isTextToSpeechEnabled : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 336);
  swift_retain();
  return v3(&v5);
}

void CurrentDevice.$isTextToSpeechEnabled.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void CurrentDevice.$isTextToSpeechEnabled.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  CurrentDevice.$isTextToSpeechEnabled.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t key path getter for CurrentDevice.isLockedWithPasscode : CurrentDevice@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 352))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for CurrentDevice.isLockedWithPasscode : CurrentDevice(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 360))(*a1);
}

uint64_t CurrentDevice.isLockedWithPasscode.getter()
{
  return CurrentDevice.isTextToSpeechEnabled.getter();
}

void CurrentDevice.isLockedWithPasscode.setter()
{
  CurrentDevice.isTextToSpeechEnabled.setter();
}

void CurrentDevice.isLockedWithPasscode.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = swift_getKeyPath();
  KeyPath = swift_getKeyPath();
  *(_BYTE *)(a1 + 24) = OUTLINED_FUNCTION_30_2(KeyPath) & 1;
  OUTLINED_FUNCTION_9_0();
}

uint64_t key path setter for CurrentDevice.$isLockedWithPasscode : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 384);
  swift_retain();
  return v3(&v5);
}

void CurrentDevice.$isLockedWithPasscode.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void CurrentDevice.$isLockedWithPasscode.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  CurrentDevice.$isLockedWithPasscode.getter();
  OUTLINED_FUNCTION_31();
}

_QWORD *key path getter for CurrentDevice.siriVoiceGender : CurrentDevice@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 400))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.siriVoiceGender : CurrentDevice(char *a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  v2 = *a2;
  v4 = *a1;
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 408))(&v4);
}

uint64_t CurrentDevice.siriVoiceGender.getter()
{
  return CurrentDevice.deviceIdiom.getter();
}

uint64_t CurrentDevice.siriVoiceGender.setter(uint64_t a1)
{
  return CurrentDevice.deviceIdiom.setter(a1, (uint64_t)&unk_1C2F81F18, (uint64_t)&unk_1C2F81F40, (uint64_t (*)(uint64_t))specialized static MockablePublished.subscript.setter);
}

void CurrentDevice.siriVoiceGender.modify()
{
  _BYTE *v0;
  unsigned __int8 *v1;
  uint64_t (*v2)(uint64_t);
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_28_4((uint64_t)v3);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_60_1(KeyPath);
  *((_QWORD *)v1 + 5) = swift_getKeyPath();
  OUTLINED_FUNCTION_1_13();
  v5 = OUTLINED_FUNCTION_27_5();
  v6 = v2(v5);
  if (v6 && (OUTLINED_FUNCTION_12_8(v6), OUTLINED_FUNCTION_0_6(), v7 = *v1, v7 != 3))
  {
    OUTLINED_FUNCTION_5_5();
    *v0 = v7;
  }
  else
  {
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_5_5();
  }
  OUTLINED_FUNCTION_1_3();
}

uint64_t key path setter for CurrentDevice.$siriVoiceGender : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 432);
  swift_retain();
  return v3(&v5);
}

void CurrentDevice.$siriVoiceGender.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void CurrentDevice.$siriVoiceGender.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  CurrentDevice.$siriVoiceGender.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t key path getter for CurrentDevice.preferencesLanguageCode : CurrentDevice@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 448))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.preferencesLanguageCode : CurrentDevice(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 456);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

void CurrentDevice.preferencesLanguageCode.getter()
{
  CurrentDevice.preferencesLanguageCode.getter();
}

{
  swift_getKeyPath();
  OUTLINED_FUNCTION_42_1();
  OUTLINED_FUNCTION_65_0();
  specialized static MockablePublished.subscript.getter();
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_57_0();
  OUTLINED_FUNCTION_9_0();
}

void CurrentDevice.preferencesLanguageCode.setter(uint64_t a1, uint64_t a2)
{
  CurrentDevice.preferencesLanguageCode.setter(a1, a2);
}

{
  uint64_t v2;

  swift_getKeyPath();
  OUTLINED_FUNCTION_42_1();
  OUTLINED_FUNCTION_15_2();
  specialized static MockablePublished.subscript.setter(a1, a2, v2);
}

void CurrentDevice.preferencesLanguageCode.modify()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t KeyPath;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_64_0();
  *v0 = v2;
  v2[2] = v1;
  v2[3] = swift_getKeyPath();
  KeyPath = swift_getKeyPath();
  *v2 = OUTLINED_FUNCTION_43_1(KeyPath);
  v2[1] = v4;
  OUTLINED_FUNCTION_9_0();
}

uint64_t key path setter for CurrentDevice.$preferencesLanguageCode : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 480);
  swift_retain();
  return v3(&v5);
}

void CurrentDevice.$preferencesLanguageCode.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void CurrentDevice.$preferencesLanguageCode.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2_7();
  v0 = OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_64(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_33();
}

void CurrentDevice.$preferencesLanguageCode.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  CurrentDevice.$preferencesLanguageCode.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t CurrentDevice.$preferencesLanguageCode.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (uint64_t (*)(uint64_t *))CurrentDevice.$preferencesLanguageCode.setter);
}

uint64_t key path getter for CurrentDevice.siriLocale : CurrentDevice(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 496))();
}

uint64_t key path setter for CurrentDevice.siriLocale : CurrentDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for Locale();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 504))(v7);
}

uint64_t CurrentDevice.siriLocale.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_getKeyPath();
  swift_getKeyPath();
  v0 = OUTLINED_FUNCTION_45_1();
  specialized static MockablePublished.subscript.getter(v0, v1, v2);
  OUTLINED_FUNCTION_4_3();
  return OUTLINED_FUNCTION_37_2();
}

uint64_t CurrentDevice.siriLocale.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v3 = OUTLINED_FUNCTION_83();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  OUTLINED_FUNCTION_15_2();
  specialized static MockablePublished.subscript.setter((uint64_t)v7, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void CurrentDevice.siriLocale.modify()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = OUTLINED_FUNCTION_31_4();
  *v0 = v2;
  *v2 = v1;
  v3 = OUTLINED_FUNCTION_83();
  v2[1] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[2] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[3] = malloc(v5);
  v2[4] = malloc(v5);
  v2[5] = swift_getKeyPath();
  v2[6] = swift_getKeyPath();
  v6 = OUTLINED_FUNCTION_57_0();
  specialized static MockablePublished.subscript.getter(v6, v7, v8);
  OUTLINED_FUNCTION_9_0();
}

void CurrentDevice.siriLocale.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = (void *)(*a1)[3];
  v4 = (void *)(*a1)[4];
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[3], v4, v5);
    swift_retain();
    OUTLINED_FUNCTION_54_1((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    v8 = *v2;
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_54_1((uint64_t)v4, v8);
  }
  free(v4);
  free(v3);
  OUTLINED_FUNCTION_32_4(v2);
}

uint64_t key path setter for CurrentDevice.$siriLocale : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 528);
  swift_retain();
  return v3(&v5);
}

void CurrentDevice.$siriLocale.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void CurrentDevice.$siriLocale.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2_7();
  v0 = OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_64(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_33();
}

void CurrentDevice.$siriLocale.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  CurrentDevice.$siriLocale.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t CurrentDevice.$siriLocale.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (uint64_t (*)(uint64_t *))CurrentDevice.$siriLocale.setter);
}

uint64_t key path getter for CurrentDevice.isVoiceTriggerEnabled : CurrentDevice@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 544))();
  *a2 = result & 1;
  return result;
}

uint64_t key path setter for CurrentDevice.isVoiceTriggerEnabled : CurrentDevice(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 552))(*a1);
}

uint64_t CurrentDevice.isVoiceTriggerEnabled.getter()
{
  return CurrentDevice.isTextToSpeechEnabled.getter();
}

void CurrentDevice.isVoiceTriggerEnabled.setter()
{
  CurrentDevice.isTextToSpeechEnabled.setter();
}

void CurrentDevice.isVoiceTriggerEnabled.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = swift_getKeyPath();
  KeyPath = swift_getKeyPath();
  *(_BYTE *)(a1 + 24) = OUTLINED_FUNCTION_30_2(KeyPath) & 1;
  OUTLINED_FUNCTION_9_0();
}

void CurrentDevice.isTextToSpeechEnabled.modify()
{
  OUTLINED_FUNCTION_38();
  OUTLINED_FUNCTION_50_0();
  OUTLINED_FUNCTION_38_1();
}

uint64_t key path setter for CurrentDevice.$isVoiceTriggerEnabled : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 576);
  swift_retain();
  return v3(&v5);
}

void CurrentDevice.$isVoiceTriggerEnabled.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void CurrentDevice.$isVoiceTriggerEnabled.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2_7();
  v0 = OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_64(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_33();
}

void CurrentDevice.$isVoiceTriggerEnabled.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  CurrentDevice.$isVoiceTriggerEnabled.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t CurrentDevice.$isVoiceTriggerEnabled.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (uint64_t (*)(uint64_t *))CurrentDevice.$isVoiceTriggerEnabled.setter);
}

_QWORD *key path getter for CurrentDevice.personalDomainsAuthenticationMode : CurrentDevice@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 592))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.personalDomainsAuthenticationMode : CurrentDevice(char *a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  v2 = *a2;
  v4 = *a1;
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 600))(&v4);
}

uint64_t CurrentDevice.personalDomainsAuthenticationMode.getter()
{
  return CurrentDevice.deviceIdiom.getter();
}

uint64_t CurrentDevice.personalDomainsAuthenticationMode.setter(uint64_t a1)
{
  return CurrentDevice.deviceIdiom.setter(a1, (uint64_t)&unk_1C2F82038, (uint64_t)&unk_1C2F82060, (uint64_t (*)(uint64_t))specialized static MockablePublished.subscript.setter);
}

void CurrentDevice.personalDomainsAuthenticationMode.modify()
{
  _BYTE *v0;
  unsigned __int8 *v1;
  uint64_t (*v2)(uint64_t);
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_28_4((uint64_t)v3);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_60_1(KeyPath);
  *((_QWORD *)v1 + 5) = swift_getKeyPath();
  OUTLINED_FUNCTION_1_13();
  v5 = OUTLINED_FUNCTION_27_5();
  v6 = v2(v5);
  if (v6 && (OUTLINED_FUNCTION_12_8(v6), OUTLINED_FUNCTION_0_6(), v7 = *v1, v7 != 4))
  {
    OUTLINED_FUNCTION_5_5();
    *v0 = v7;
  }
  else
  {
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_5_5();
  }
  OUTLINED_FUNCTION_1_3();
}

uint64_t key path setter for CurrentDevice.$personalDomainsAuthenticationMode : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 624);
  swift_retain();
  return v3(&v5);
}

void CurrentDevice.$personalDomainsAuthenticationMode.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void CurrentDevice.$personalDomainsAuthenticationMode.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2_7();
  v0 = OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_64(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_33();
}

void CurrentDevice.$personalDomainsAuthenticationMode.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  CurrentDevice.$personalDomainsAuthenticationMode.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t CurrentDevice.$personalDomainsAuthenticationMode.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (uint64_t (*)(uint64_t *))CurrentDevice.$personalDomainsAuthenticationMode.setter);
}

_QWORD *key path getter for CurrentDevice.restrictedCommands : CurrentDevice@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[2];

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 640))(v5);
  v4 = v5[1];
  *a2 = v5[0];
  a2[1] = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.restrictedCommands : CurrentDevice(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD *);
  _QWORD v6[2];

  v2 = a1[1];
  v3 = *a2;
  v6[0] = *a1;
  v6[1] = v2;
  v4 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v3 + 648);
  swift_bridgeObjectRetain();
  return v4(v6);
}

uint64_t CurrentDevice.restrictedCommands.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_45_1();
  specialized static MockablePublished.subscript.getter();
  OUTLINED_FUNCTION_4_3();
  return OUTLINED_FUNCTION_37_2();
}

void CurrentDevice.restrictedCommands.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_15_2();
  specialized static MockablePublished.subscript.setter(v2, v3, v1);
}

void CurrentDevice.restrictedCommands.modify(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[7] = v1;
  KeyPath = swift_getKeyPath();
  v3[8] = KeyPath;
  v3[9] = swift_getKeyPath();
  OUTLINED_FUNCTION_1_13();
  v5 = v1[12];
  v6 = *(uint64_t (**)(uint64_t))(*v1 + 184);
  v7 = swift_retain();
  v8 = v6(v7);
  if (v8
    && ((*(void (**)(uint64_t))(*(_QWORD *)v8 + 144))(KeyPath), OUTLINED_FUNCTION_0_6(), (v9 = v3[5]) != 0))
  {
    v10 = v3[6];
    OUTLINED_FUNCTION_4_3();
    v3[3] = v9;
    v3[4] = v10;
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)v5 + 104))();
    OUTLINED_FUNCTION_4_3();
  }
  OUTLINED_FUNCTION_1_3();
}

void CurrentDevice.restrictedCommands.modify(uint64_t a1, char a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(void **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  OUTLINED_FUNCTION_15_2();
  if ((a2 & 1) != 0)
  {
    v5 = swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_41_0(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_41_0(v4);
  }
  OUTLINED_FUNCTION_32_4(v3);
}

uint64_t key path setter for CurrentDevice.$restrictedCommands : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 672);
  swift_retain();
  return v3(&v5);
}

void CurrentDevice.$restrictedCommands.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void CurrentDevice.$restrictedCommands.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2_7();
  v0 = OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_64(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_33();
}

void CurrentDevice.$restrictedCommands.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  CurrentDevice.$restrictedCommands.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t CurrentDevice.$restrictedCommands.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (uint64_t (*)(uint64_t *))CurrentDevice.$restrictedCommands.setter);
}

uint64_t key path getter for CurrentDevice.deviceRegionCode : CurrentDevice@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 688))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.deviceRegionCode : CurrentDevice(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 696);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

void CurrentDevice.deviceRegionCode.getter()
{
  CurrentDevice.preferencesLanguageCode.getter();
}

void CurrentDevice.deviceRegionCode.setter(uint64_t a1, uint64_t a2)
{
  CurrentDevice.preferencesLanguageCode.setter(a1, a2);
}

void CurrentDevice.deviceRegionCode.modify()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t KeyPath;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_64_0();
  *v0 = v2;
  v2[2] = v1;
  v2[3] = swift_getKeyPath();
  KeyPath = swift_getKeyPath();
  *v2 = OUTLINED_FUNCTION_43_1(KeyPath);
  v2[1] = v4;
  OUTLINED_FUNCTION_9_0();
}

void CurrentDevice.preferencesLanguageCode.modify(void **a1, char a2)
{
  void *v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_35_3();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_35_3();
  }
  OUTLINED_FUNCTION_34_3(v2);
}

uint64_t key path setter for CurrentDevice.$deviceRegionCode : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 720);
  swift_retain();
  return v3(&v5);
}

void CurrentDevice.$deviceRegionCode.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void CurrentDevice.$deviceRegionCode.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2_7();
  v0 = OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_64(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_33();
}

void CurrentDevice.$deviceRegionCode.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  CurrentDevice.$deviceRegionCode.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t CurrentDevice.$deviceRegionCode.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (uint64_t (*)(uint64_t *))CurrentDevice.$deviceRegionCode.setter);
}

_QWORD *key path getter for CurrentDevice.deviceClass : CurrentDevice@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 736))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentDevice.deviceClass : CurrentDevice(char *a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  v2 = *a2;
  v4 = *a1;
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 744))(&v4);
}

uint64_t CurrentDevice.deviceClass.getter()
{
  return CurrentDevice.deviceIdiom.getter();
}

uint64_t CurrentDevice.deviceClass.setter(uint64_t a1)
{
  return CurrentDevice.deviceIdiom.setter(a1, (uint64_t)&unk_1C2F82110, (uint64_t)&unk_1C2F82138, (uint64_t (*)(uint64_t))specialized static MockablePublished.subscript.setter);
}

uint64_t CurrentDevice.deviceIdiom.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;

  swift_getKeyPath();
  OUTLINED_FUNCTION_42_1();
  OUTLINED_FUNCTION_15_2();
  v4 = OUTLINED_FUNCTION_58_0();
  return a4(v4);
}

void CurrentDevice.deviceClass.modify()
{
  _BYTE *v0;
  unsigned __int8 *v1;
  uint64_t (*v2)(uint64_t);
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_28_4((uint64_t)v3);
  KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_60_1(KeyPath);
  *((_QWORD *)v1 + 5) = swift_getKeyPath();
  OUTLINED_FUNCTION_1_13();
  v5 = OUTLINED_FUNCTION_27_5();
  v6 = v2(v5);
  if (v6 && (OUTLINED_FUNCTION_12_8(v6), OUTLINED_FUNCTION_0_6(), v7 = *v1, v7 != 8))
  {
    OUTLINED_FUNCTION_5_5();
    *v0 = v7;
  }
  else
  {
    OUTLINED_FUNCTION_7_4();
    OUTLINED_FUNCTION_5_5();
  }
  OUTLINED_FUNCTION_1_3();
}

void CurrentDevice.deviceIdiom.modify(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + 48);
  swift_retain();
  a3(v8, v7, v6, v5);
  OUTLINED_FUNCTION_34_3(v4);
}

uint64_t key path setter for CurrentDevice.$deviceClass : CurrentDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 768);
  swift_retain();
  return v3(&v5);
}

void CurrentDevice.$deviceClass.getter()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void CurrentDevice.$deviceClass.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2_7();
  v0 = OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_64(v0, v1, v2, v3, v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_33();
}

void CurrentDevice.$deviceClass.modify(uint64_t a1)
{
  OUTLINED_FUNCTION_44(a1);
  CurrentDevice.$deviceClass.getter();
  OUTLINED_FUNCTION_31();
}

uint64_t CurrentDevice.$deviceClass.modify(uint64_t *a1, char a2)
{
  return NetworkAvailability.$status.modify(a1, a2, (uint64_t (*)(uint64_t *))CurrentDevice.$deviceClass.setter);
}

void CurrentDevice.isHomePod.getter()
{
  OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_1_6();
}

void CurrentDevice.isWatch.getter()
{
  OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_1_6();
}

void CurrentDevice.isMac.getter()
{
  OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_1_6();
}

void CurrentDevice.isAppleTV.getter()
{
  OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_1_6();
}

void CurrentDevice.isPhone.getter()
{
  OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_1_6();
}

void CurrentDevice.isPad.getter()
{
  OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_1_6();
}

void CurrentDevice.isPod.getter()
{
  OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_1_6();
}

void CurrentDevice.isReality.getter()
{
  OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_1_6();
}

void CurrentDevice.isCarPlay.getter(uint64_t a1)
{
  OUTLINED_FUNCTION_57(a1);
  OUTLINED_FUNCTION_1_6();
}

void CurrentDevice.isCarDNDMode.getter(uint64_t a1)
{
  OUTLINED_FUNCTION_57(a1);
  OUTLINED_FUNCTION_1_6();
}

void CurrentDevice.supportsVehicleData.getter(uint64_t a1)
{
  OUTLINED_FUNCTION_57(a1);
  OUTLINED_FUNCTION_1_6();
}

void CurrentDevice.isHeadGestureRecognitionAvailable.getter(uint64_t a1)
{
  OUTLINED_FUNCTION_57(a1);
  OUTLINED_FUNCTION_1_6();
}

void CurrentDevice.restrictions.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[2];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v1 + 640))(v4);
  v3 = v4[1];
  swift_bridgeObjectRelease();
  *a1 = v3;
  OUTLINED_FUNCTION_27_2();
}

uint64_t CurrentDevice.__allocating_init(storage:)()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_37();
  CurrentDevice.init(storage:)();
  return v0;
}

_QWORD *CurrentDevice.init(storage:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v35;

  v1 = v0;
  v2 = OUTLINED_FUNCTION_83();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v35 - v9;
  v0[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<SAPerson?>);
  OUTLINED_FUNCTION_36();
  specialized MockablePublished.init(wrappedValue:)(0);
  v0[3] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<DeviceIdiom>);
  OUTLINED_FUNCTION_36();
  specialized MockablePublished.init(wrappedValue:)(8);
  v0[4] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<Bool>);
  OUTLINED_FUNCTION_36();
  specialized MockablePublished.init(wrappedValue:)(0);
  v0[5] = v13;
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_56_1();
  v0[6] = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<SiriVoiceGender>);
  OUTLINED_FUNCTION_36();
  specialized MockablePublished.init(wrappedValue:)(2);
  v0[7] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<String?>);
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_46_0();
  v0[8] = v16;
  if (one-time initialization token for defaultLocale != -1)
    swift_once();
  v17 = __swift_project_value_buffer(v2, (uint64_t)static CurrentDevice.defaultLocale);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v18(v10, v17, v2);
  v18(v7, (uint64_t)v10, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<Locale>);
  swift_allocObject();
  v19 = specialized MockablePublished.init(wrappedValue:)((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  v1[9] = v19;
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_56_1();
  v1[10] = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<PersonalDomainsAuthenticationMode?>);
  OUTLINED_FUNCTION_36();
  specialized MockablePublished.init(wrappedValue:)(3);
  v1[11] = v21;
  Restrictions.init(restrictedCommands:)(MEMORY[0x1E0DEE9E8], &v35);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<Restrictions>);
  OUTLINED_FUNCTION_37();
  v22 = OUTLINED_FUNCTION_57_0();
  specialized MockablePublished.init(wrappedValue:)(v22, v23);
  v1[12] = v24;
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_46_0();
  v1[13] = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<DeviceClass?>);
  OUTLINED_FUNCTION_36();
  specialized MockablePublished.init(wrappedValue:)(7);
  v1[14] = v26;
  if (one-time initialization token for deviceRegionCodeKey != -1)
    swift_once();
  v27 = MGGetStringAnswer();
  if (v27)
  {
    v28 = (void *)v27;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_25_1();
  v29 = OUTLINED_FUNCTION_57_0();
  specialized static MockablePublished.subscript.setter(v29, v30, (uint64_t)v1);
  MobileGestaltDeviceClassProvider.currentDeviceClass.getter((char *)&v35);
  v31 = v35;
  KeyPath = swift_getKeyPath();
  v33 = swift_getKeyPath();
  OUTLINED_FUNCTION_25_1();
  specialized static MockablePublished.subscript.setter(v31, v1, KeyPath, v33);
  OUTLINED_FUNCTION_5_5();
  return v1;
}

uint64_t one-time initialization function for defaultLocale()
{
  uint64_t v0;

  v0 = type metadata accessor for Locale();
  __swift_allocate_value_buffer(v0, static CurrentDevice.defaultLocale);
  __swift_project_value_buffer(v0, (uint64_t)static CurrentDevice.defaultLocale);
  return Locale.init(identifier:)();
}

uint64_t one-time initialization function for deviceRegionCodeKey()
{
  uint64_t result;

  result = MEMORY[0x1C3BCDDDC](0x6F436E6F69676552, 0xEA00000000006564);
  static CurrentDevice.deviceRegionCodeKey = result;
  return result;
}

uint64_t static CurrentDevice.adjustMock(_:)(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v9;
  char v10;

  swift_getKeyPath();
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 136))();
  OUTLINED_FUNCTION_5_5();
  if ((v2 & 1) == 0)
  {
    swift_getKeyPath();
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v9);
    OUTLINED_FUNCTION_5_5();
    if (v10 != 1)
    {
      v3 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(PartialKeyPath<CurrentDevice>, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C2F80B40;
      *(_QWORD *)(inited + 32) = swift_getKeyPath();
      *(_QWORD *)(inited + 64) = &type metadata for Restrictions;
      v9 = v3;
      *(_QWORD *)(inited + 40) = DeviceRestrictions.aceSet.getter();
      *(_QWORD *)(inited + 48) = v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialKeyPath<CurrentDevice>);
      v5 = Dictionary.init(dictionaryLiteral:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnvironmentProviderMockHelper<CurrentDevice>);
      *(_QWORD *)(OUTLINED_FUNCTION_37() + 16) = v5;
      v6 = *(void (**)(uint64_t))(*(_QWORD *)a1 + 152);
      v7 = swift_retain();
      v6(v7);
      swift_release_n();
    }
  }
  return OUTLINED_FUNCTION_25_1();
}

uint64_t CurrentDevice.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t CurrentDevice.__deallocating_deinit()
{
  CurrentDevice.deinit();
  return swift_deallocClassInstance();
}

void sub_1C2F506D8()
{
  _BYTE *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_10_2();
  *v0 = (*(uint64_t (**)(void))(v1 + 304))() & 1;
  OUTLINED_FUNCTION_31();
}

void sub_1C2F50700(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_49(a1);
  (*(void (**)(uint64_t))(v2 + 312))(v1);
  OUTLINED_FUNCTION_31();
}

void sub_1C2F50720()
{
  _BYTE *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_10_2();
  *v0 = (*(uint64_t (**)(void))(v1 + 352))() & 1;
  OUTLINED_FUNCTION_31();
}

void sub_1C2F50748(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_49(a1);
  (*(void (**)(uint64_t))(v2 + 360))(v1);
  OUTLINED_FUNCTION_31();
}

void sub_1C2F50768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  char v21;
  char v22;

  OUTLINED_FUNCTION_10_2();
  v8 = OUTLINED_FUNCTION_53_1(v0, v1, v2, v3, v4, v5, v6, v7, v16, v18, SWORD2(v18), SBYTE6(v18), SHIBYTE(v18));
  OUTLINED_FUNCTION_63_0((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v17, v19, v20, v21, v22);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F50790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_51_1(*(uint64_t (**)(char *))(v0 + 408), v1, v2, SWORD2(v2), SBYTE6(v2), SHIBYTE(v2));
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F507B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_10_2();
  *v0 = (*(uint64_t (**)(void))(v1 + 448))();
  v0[1] = v2;
  OUTLINED_FUNCTION_31();
}

void sub_1C2F507DC(uint64_t a1)
{
  (*(void (**)(void))(**(_QWORD **)a1 + 496))();
  OUTLINED_FUNCTION_31();
}

void sub_1C2F50804()
{
  _BYTE *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_10_2();
  *v0 = (*(uint64_t (**)(void))(v1 + 544))() & 1;
  OUTLINED_FUNCTION_31();
}

void sub_1C2F5082C(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_49(a1);
  (*(void (**)(uint64_t))(v2 + 552))(v1);
  OUTLINED_FUNCTION_31();
}

void sub_1C2F5084C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  char v21;
  char v22;

  OUTLINED_FUNCTION_10_2();
  v8 = OUTLINED_FUNCTION_53_1(v0, v1, v2, v3, v4, v5, v6, v7, v16, v18, SWORD2(v18), SBYTE6(v18), SHIBYTE(v18));
  OUTLINED_FUNCTION_63_0((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v17, v19, v20, v21, v22);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F50874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_51_1(*(uint64_t (**)(char *))(v0 + 600), v1, v2, SWORD2(v2), SBYTE6(v2), SHIBYTE(v2));
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F508A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_10_2();
  *v0 = (*(uint64_t (**)(void))(v1 + 688))();
  v0[1] = v2;
  OUTLINED_FUNCTION_31();
}

void sub_1C2F508C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  char v21;
  char v22;

  OUTLINED_FUNCTION_10_2();
  v8 = OUTLINED_FUNCTION_53_1(v0, v1, v2, v3, v4, v5, v6, v7, v16, v18, SWORD2(v18), SBYTE6(v18), SHIBYTE(v18));
  OUTLINED_FUNCTION_63_0((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v17, v19, v20, v21, v22);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F508F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_51_1(*(uint64_t (**)(char *))(v0 + 744), v1, v2, SWORD2(v2), SBYTE6(v2), SHIBYTE(v2));
  OUTLINED_FUNCTION_27_2();
}

void (*protocol witness for MockableEnvironmentProvider.mock.modify in conformance CurrentDevice(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 200))();
  return protocol witness for MockableEnvironmentProvider.mock.modify in conformance NetworkAvailability;
}

uint64_t protocol witness for static MockableEnvironmentProvider.adjustMock(_:) in conformance CurrentDevice(uint64_t a1)
{
  return static CurrentDevice.adjustMock(_:)(a1);
}

uint64_t protocol witness for SiriEnvironmentProvider.init(storage:) in conformance CurrentDevice()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 888))();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CurrentDevice@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CurrentDevice();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void sub_1C2F509B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

uint64_t associated type witness table accessor for MockableEnvironmentProvider.Provider : SiriEnvironmentProvider in CurrentDevice()
{
  return lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, (uint64_t)&protocol conformance descriptor for CurrentDevice);
}

uint64_t instantiation function for generic protocol witness table for CurrentDevice(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, (uint64_t)&protocol conformance descriptor for CurrentDevice);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, (uint64_t)&protocol conformance descriptor for CurrentDevice);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CurrentDevice();
    result = MEMORY[0x1C3BCEDD8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1C2F50AA8(uint64_t *a1@<X8>)
{
  *a1 = SiriEnvironment.currentDevice.getter();
  OUTLINED_FUNCTION_31();
}

void sub_1C2F50AD0()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_10_2();
  *v0 = (*(uint64_t (**)(void))(v1 + 184))();
  OUTLINED_FUNCTION_31();
}

void sub_1C2F50AF8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F50B24()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F50B50()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F50B7C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F50BA8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F50BD4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F50C00()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F50C2C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F50C58()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F50C84()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F50CB0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

void sub_1C2F50CDC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_10_2();
  v1 = OUTLINED_FUNCTION_57(v0);
  OUTLINED_FUNCTION_79((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

uint64_t method lookup function for CurrentDevice()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CurrentDevice.mock.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of CurrentDevice.identifiedUserMeCard.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of CurrentDevice.identifiedUserMeCard.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of CurrentDevice.identifiedUserMeCard.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of CurrentDevice.$identifiedUserMeCard.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of CurrentDevice.$identifiedUserMeCard.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of CurrentDevice.$identifiedUserMeCard.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of CurrentDevice.deviceIdiom.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of CurrentDevice.deviceIdiom.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of CurrentDevice.deviceIdiom.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceIdiom.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceIdiom.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceIdiom.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of CurrentDevice.isTextToSpeechEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of CurrentDevice.isTextToSpeechEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of CurrentDevice.isTextToSpeechEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of CurrentDevice.$isTextToSpeechEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of CurrentDevice.$isTextToSpeechEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of CurrentDevice.$isTextToSpeechEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of CurrentDevice.isLockedWithPasscode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of CurrentDevice.isLockedWithPasscode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of CurrentDevice.isLockedWithPasscode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of CurrentDevice.$isLockedWithPasscode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of CurrentDevice.$isLockedWithPasscode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of CurrentDevice.$isLockedWithPasscode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of CurrentDevice.siriVoiceGender.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of CurrentDevice.siriVoiceGender.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of CurrentDevice.siriVoiceGender.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of CurrentDevice.$siriVoiceGender.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of CurrentDevice.$siriVoiceGender.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of CurrentDevice.$siriVoiceGender.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of CurrentDevice.preferencesLanguageCode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of CurrentDevice.preferencesLanguageCode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of CurrentDevice.preferencesLanguageCode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of CurrentDevice.$preferencesLanguageCode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of CurrentDevice.$preferencesLanguageCode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of CurrentDevice.$preferencesLanguageCode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of CurrentDevice.siriLocale.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of CurrentDevice.siriLocale.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of CurrentDevice.siriLocale.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of CurrentDevice.$siriLocale.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of CurrentDevice.$siriLocale.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of CurrentDevice.$siriLocale.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of CurrentDevice.isVoiceTriggerEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of CurrentDevice.isVoiceTriggerEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t dispatch thunk of CurrentDevice.isVoiceTriggerEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of CurrentDevice.$isVoiceTriggerEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of CurrentDevice.$isVoiceTriggerEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of CurrentDevice.$isVoiceTriggerEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of CurrentDevice.personalDomainsAuthenticationMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of CurrentDevice.personalDomainsAuthenticationMode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of CurrentDevice.personalDomainsAuthenticationMode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of CurrentDevice.$personalDomainsAuthenticationMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of CurrentDevice.$personalDomainsAuthenticationMode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of CurrentDevice.$personalDomainsAuthenticationMode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of CurrentDevice.restrictedCommands.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of CurrentDevice.restrictedCommands.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of CurrentDevice.restrictedCommands.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t dispatch thunk of CurrentDevice.$restrictedCommands.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))();
}

uint64_t dispatch thunk of CurrentDevice.$restrictedCommands.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 672))();
}

uint64_t dispatch thunk of CurrentDevice.$restrictedCommands.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
}

uint64_t dispatch thunk of CurrentDevice.deviceRegionCode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 688))();
}

uint64_t dispatch thunk of CurrentDevice.deviceRegionCode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 696))();
}

uint64_t dispatch thunk of CurrentDevice.deviceRegionCode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 704))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceRegionCode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 712))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceRegionCode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 720))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceRegionCode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 728))();
}

uint64_t dispatch thunk of CurrentDevice.deviceClass.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 736))();
}

uint64_t dispatch thunk of CurrentDevice.deviceClass.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 744))();
}

uint64_t dispatch thunk of CurrentDevice.deviceClass.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 752))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceClass.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 760))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceClass.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 768))();
}

uint64_t dispatch thunk of CurrentDevice.$deviceClass.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
}

uint64_t dispatch thunk of CurrentDevice.isHomePod.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))();
}

uint64_t dispatch thunk of CurrentDevice.isWatch.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 792))();
}

uint64_t dispatch thunk of CurrentDevice.isMac.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
}

uint64_t dispatch thunk of CurrentDevice.isAppleTV.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 808))();
}

uint64_t dispatch thunk of CurrentDevice.isPhone.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 816))();
}

uint64_t dispatch thunk of CurrentDevice.isPad.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 824))();
}

uint64_t dispatch thunk of CurrentDevice.isPod.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 832))();
}

uint64_t dispatch thunk of CurrentDevice.isReality.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 840))();
}

uint64_t dispatch thunk of CurrentDevice.isCarPlay.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 848))();
}

uint64_t dispatch thunk of CurrentDevice.isCarDNDMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 856))();
}

uint64_t dispatch thunk of CurrentDevice.supportsVehicleData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 864))();
}

uint64_t dispatch thunk of CurrentDevice.isHeadGestureRecognitionAvailable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 872))();
}

uint64_t dispatch thunk of CurrentDevice.restrictions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 880))();
}

uint64_t dispatch thunk of CurrentDevice.__allocating_init(storage:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 888))();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t OUTLINED_FUNCTION_1_13()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_6_8()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_10_7()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t OUTLINED_FUNCTION_12_8(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(v1);
}

uint64_t OUTLINED_FUNCTION_20_4()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_27_5()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_28_4(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = result;
  *(_QWORD *)(result + 24) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_30_2(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return specialized static MockablePublished.subscript.getter();
}

void *OUTLINED_FUNCTION_31_4()
{
  return malloc(0x38uLL);
}

void OUTLINED_FUNCTION_32_4(void *a1)
{
  free(a1);
}

void OUTLINED_FUNCTION_34_3(void *a1)
{
  free(a1);
}

void OUTLINED_FUNCTION_35_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  specialized static MockablePublished.subscript.setter(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_36_2(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v3, a1);
}

uint64_t OUTLINED_FUNCTION_37_2()
{
  return swift_release();
}

void OUTLINED_FUNCTION_38_1()
{
  specialized static MockablePublished.subscript.setter();
}

uint64_t OUTLINED_FUNCTION_39_3()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t OUTLINED_FUNCTION_40_2()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

void OUTLINED_FUNCTION_41_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  specialized static MockablePublished.subscript.setter(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_42_1()
{
  return swift_getKeyPath();
}

uint64_t OUTLINED_FUNCTION_43_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return specialized static MockablePublished.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_45_1()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_46_0()
{
  specialized MockablePublished.init(wrappedValue:)(0, 0);
}

uint64_t OUTLINED_FUNCTION_47_0()
{
  return swift_getKeyPath();
}

uint64_t OUTLINED_FUNCTION_51_1@<X0>(uint64_t (*a1)(char *)@<X8>, uint64_t a2, int a3, __int16 a4, char a5, char a6)
{
  return a1(&a6);
}

_QWORD *OUTLINED_FUNCTION_53_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  _QWORD *(*v13)(char *__return_ptr);

  return v13(&a13);
}

void OUTLINED_FUNCTION_54_1(uint64_t a1, uint64_t a2)
{
  specialized static MockablePublished.subscript.setter(a1, a2);
}

void OUTLINED_FUNCTION_56_1()
{
  specialized MockablePublished.init(wrappedValue:)(1);
}

uint64_t OUTLINED_FUNCTION_57_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_58_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_59_1()
{
  return swift_getKeyPath();
}

uint64_t OUTLINED_FUNCTION_60_1(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

void OUTLINED_FUNCTION_63_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  _BYTE *v13;

  *v13 = a13;
}

void *OUTLINED_FUNCTION_64_0()
{
  return malloc(0x28uLL);
}

uint64_t OUTLINED_FUNCTION_65_0()
{
  uint64_t v0;

  return v0;
}

uint64_t DispatchSemaphoreLock.__allocating_init()()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_37();
  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_16_6();
  return v0;
}

uint64_t SimpleLock.withLocked<A>(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SimpleLock.withLocked<A>(_:)(a1, a2, a4, a4, a5);
}

{
  uint64_t v8;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  a1(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
}

Swift::Void __swiftcall DispatchSemaphoreLock.takeLock()()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 16);
  OS_dispatch_semaphore.wait()();
  OUTLINED_FUNCTION_3_9(v1);
}

Swift::Void __swiftcall DispatchSemaphoreLock.releaseLock()()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + 16);
  OS_dispatch_semaphore.signal()();
  OUTLINED_FUNCTION_3_9(v1);
}

uint64_t DispatchSemaphoreLock.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DispatchSemaphoreLock.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t DispatchSemaphoreLock.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_16_6();
  return v0;
}

uint64_t protocol witness for SimpleLock.takeLock() in conformance DispatchSemaphoreLock()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t protocol witness for SimpleLock.releaseLock() in conformance DispatchSemaphoreLock()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t (*static DeadlockDetectingLock.defaultDeadlockAction.getter())()
{
  return closure #1 in variable initialization expression of static DeadlockDetectingLock.defaultDeadlockAction;
}

uint64_t DeadlockDetectingLock.__allocating_init(name:wrapping:deadlockAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = OUTLINED_FUNCTION_37();
  DeadlockDetectingLock.init(name:wrapping:deadlockAction:)(a1, a2, a3, a4, a5);
  return v10;
}

_QWORD *DeadlockDetectingLock.init(name:wrapping:deadlockAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;

  v6 = v5;
  v25 = a3;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  v16 = UUID.uuidString.getter();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  if (!a2)
  {
    swift_bridgeObjectRetain();
    a1 = v16;
    a2 = v18;
  }
  v6[2] = a1;
  v6[3] = a2;
  v19 = MEMORY[0x1C3BCDDDC](v16, v18);
  swift_bridgeObjectRelease();
  v6[4] = v19;
  v6[5] = a4;
  v6[6] = a5;
  v20 = v25;
  outlined init with copy of SimpleLock?(v25, (uint64_t)&v26);
  if (v27)
  {
    outlined destroy of CheckedContinuation<(), Error>?(v20, &demangling cache variable for type metadata for SimpleLock?);
    outlined init with take of Transforming(&v26, (uint64_t)&v28);
  }
  else
  {
    swift_retain();
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)&v26, &demangling cache variable for type metadata for SimpleLock?);
    v21 = type metadata accessor for DispatchSemaphoreLock();
    v22 = OUTLINED_FUNCTION_37();
    *(_QWORD *)(v22 + 16) = OUTLINED_FUNCTION_16_6();
    v29 = v21;
    v30 = &protocol witness table for DispatchSemaphoreLock;
    swift_release();
    *(_QWORD *)&v28 = v22;
    outlined destroy of CheckedContinuation<(), Error>?(v20, &demangling cache variable for type metadata for SimpleLock?);
  }
  outlined init with take of Transforming(&v28, (uint64_t)(v6 + 7));
  return v6;
}

uint64_t closure #1 in variable initialization expression of static DeadlockDetectingLock.defaultDeadlockAction()
{
  uint64_t v0;

  v0 = DeadlockDetectingLock.logDeadlockAndCrash()();
  return outlined init with copy of SimpleLock?(v0);
}

uint64_t outlined init with copy of SimpleLock?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SimpleLock?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DispatchSemaphoreLock()
{
  return objc_opt_self();
}

Swift::Void __swiftcall DeadlockDetectingLock.takeLock()()
{
  DeadlockDetectingLock.tryLock()();
}

Swift::Void __swiftcall DeadlockDetectingLock.releaseLock()()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  v1 = objc_msgSend((id)objc_opt_self(), sel_currentThread);
  v2 = objc_msgSend(v1, sel_threadDictionary);

  objc_msgSend(v2, sel_removeObjectForKey_, *(_QWORD *)(v0 + 32));
  outlined init with copy of Transforming(v0 + 56, (uint64_t)v5);
  v3 = v6;
  v4 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t DeadlockDetectingLock.withLocked<A>(_:)(uint64_t (*a1)(void))
{
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;

  v3 = v1;
  DeadlockDetectingLock.tryLock()();
  if (v2)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.logger);
    swift_retain();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      *(_DWORD *)v8 = 136315138;
      v9 = v3[2];
      v10 = v3[3];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F2D000, v6, v7, "Deadlock detected for %s but deadlockAction returned; executing action re-entrantly (possibly unsafe)",
        v8,
        0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_1();
    }
    swift_release();

  }
  result = a1();
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*v3 + 152))(result);
  return result;
}

void DeadlockDetectingLock.tryLock()()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v1 = (void *)objc_opt_self();
  v2 = objc_msgSend(v1, sel_currentThread);
  v3 = objc_msgSend(v2, sel_threadDictionary);

  v4 = *(_QWORD *)(v0 + 32);
  v5 = objc_msgSend(v3, sel_objectForKey_, v4);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)&v10, &demangling cache variable for type metadata for Any?);
    (*(void (**)(uint64_t))(v0 + 40))(v0);
    lazy protocol witness table accessor for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)&v10, &demangling cache variable for type metadata for Any?);
    outlined init with copy of Transforming(v0 + 56, (uint64_t)&v10);
    v6 = *((_QWORD *)&v11 + 1);
    v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
    v8 = objc_msgSend(v1, sel_currentThread);
    v9 = objc_msgSend(v8, sel_threadDictionary);

    objc_msgSend(v9, sel_setObject_forKey_, v4, v4);
  }
}

uint64_t DeadlockDetectingLock.logDeadlockAndCrash()()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12[2];

  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  v12[0] = 0xD00000000000001BLL;
  v12[1] = 0x80000001C2F85800;
  OUTLINED_FUNCTION_10_8();
  OUTLINED_FUNCTION_18_6();
  swift_bridgeObjectRelease();
  v1._object = (void *)0x80000001C2F85820;
  v1._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v1);
  if (one-time initialization token for logger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.logger);
  OUTLINED_FUNCTION_9_9();
  v3 = (void *)Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_8_9(v4))
  {
    OUTLINED_FUNCTION_15_6();
    v12[0] = OUTLINED_FUNCTION_7_8();
    *(_DWORD *)v0 = 136315650;
    v5 = OUTLINED_FUNCTION_11_8();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, v12);
    OUTLINED_FUNCTION_1_14();
    swift_bridgeObjectRelease();
    *(_WORD *)(v0 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v7 = OUTLINED_FUNCTION_5_11();
    OUTLINED_FUNCTION_19_6(v7, v8, v12);
    OUTLINED_FUNCTION_1_14();
    OUTLINED_FUNCTION_13_9();
    OUTLINED_FUNCTION_4_8(&dword_1C2F2D000, v9, v10, "FatalError at %s:%lu - %s");
    OUTLINED_FUNCTION_6_9();
    OUTLINED_FUNCTION_1_1();
  }

  OUTLINED_FUNCTION_12_9();
  result = OUTLINED_FUNCTION_2_11();
  __break(1u);
  return result;
}

uint64_t DeadlockDetectingLock.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return v0;
}

uint64_t DeadlockDetectingLock.__deallocating_deinit()
{
  DeadlockDetectingLock.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for SimpleLock.takeLock() in conformance DeadlockDetectingLock()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t protocol witness for SimpleLock.releaseLock() in conformance DeadlockDetectingLock()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t protocol witness for SimpleLock.withLocked<A>(_:) in conformance DeadlockDetectingLock()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t dispatch thunk of SimpleLock.takeLock()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SimpleLock.releaseLock()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SimpleLock.withLocked<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t method lookup function for DispatchSemaphoreLock()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DispatchSemaphoreLock.takeLock()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of DispatchSemaphoreLock.releaseLock()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of DispatchSemaphoreLock.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t type metadata accessor for DeadlockDetectingLock()
{
  return objc_opt_self();
}

uint64_t method lookup function for DeadlockDetectingLock()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DeadlockDetectingLock.__allocating_init(name:wrapping:deadlockAction:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of DeadlockDetectingLock.takeLock()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of DeadlockDetectingLock.releaseLock()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of DeadlockDetectingLock.withLocked<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

unint64_t lazy protocol witness table accessor for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError;
  if (!lazy protocol witness table cache variable for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for DeadlockDetectingLock.DeadlockError, &unk_1E7CD8D88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError;
  if (!lazy protocol witness table cache variable for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for DeadlockDetectingLock.DeadlockError, &unk_1E7CD8D88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeadlockDetectingLock.DeadlockError and conformance DeadlockDetectingLock.DeadlockError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DeadlockDetectingLock.DeadlockError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C2F52264 + 4 * byte_1C2F82290[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C2F52284 + 4 * byte_1C2F82295[v4]))();
}

_BYTE *sub_1C2F52264(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C2F52284(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2F5228C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2F52294(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2F5229C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2F522A4(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for DeadlockDetectingLock.DeadlockError()
{
  return &unk_1E7CD8D88;
}

uint64_t OUTLINED_FUNCTION_1_14()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_2_11()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void OUTLINED_FUNCTION_3_9(id a1)
{

}

void OUTLINED_FUNCTION_4_8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x20u);
}

uint64_t OUTLINED_FUNCTION_5_11()
{
  uint64_t v0;

  *(_WORD *)(v0 + 22) = 2080;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_6_9()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_7_8()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_8_9(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_9_9()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_10_8()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_11_8()
{
  return StaticString.description.getter();
}

uint64_t OUTLINED_FUNCTION_12_9()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_13_9()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_15_6()
{
  return swift_slowAlloc();
}

dispatch_semaphore_t OUTLINED_FUNCTION_16_6()
{
  return dispatch_semaphore_create(1);
}

void OUTLINED_FUNCTION_18_6()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_19_6(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, a3);
}

void specialized OptionSet<>.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t specialized OptionSet.symmetricDifference(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = a2 ^ result;
  return result;
}

void specialized OptionSet<>.remove(_:)(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  _QWORD *v2;

  if ((*v2 & a2) != 0)
    *v2 &= ~a2;
  OUTLINED_FUNCTION_2_12(a1);
}

void specialized OptionSet<>.update(with:)(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  _QWORD *v2;

  *v2 |= a2;
  OUTLINED_FUNCTION_2_12(a1);
}

uint64_t specialized OptionSet<>.formSymmetricDifference(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 ^= result;
  return result;
}

uint64_t specialized SetAlgebra.subtracting(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = a2 & ~result;
  return result;
}

BOOL specialized SetAlgebra.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL specialized SetAlgebra.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

uint64_t specialized SetAlgebra.subtract(_:)(uint64_t result)
{
  _QWORD *v1;

  *v1 &= ~result;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void static BargeInMode.none.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

SiriUtilities::BargeInMode __swiftcall BargeInMode.init(rawValue:)(SiriUtilities::BargeInMode rawValue)
{
  SiriUtilities::BargeInMode *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static BargeInMode.overSiri.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

void static BargeInMode.overMedia.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

void static BargeInMode.overTimer.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

void static BargeInMode.overAlarm.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

uint64_t BargeInMode.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SiriUtilities::BargeInMode protocol witness for OptionSet.init(rawValue:) in conformance BargeInMode(Swift::Int *a1)
{
  return BargeInMode.init(rawValue:)(*a1);
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance BargeInMode(_QWORD *a1)
{
  _QWORD *v1;

  return specialized OptionSet<>.contains(_:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance BargeInMode@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return specialized OptionSet.symmetricDifference(_:)(*a1, *v2, a2);
}

void protocol witness for SetAlgebra.remove(_:) in conformance BargeInMode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  specialized OptionSet<>.remove(_:)(a2, *a1);
}

void protocol witness for SetAlgebra.update(with:) in conformance BargeInMode(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  specialized OptionSet<>.update(with:)(a2, *a1);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance BargeInMode(uint64_t *a1)
{
  return specialized OptionSet<>.formSymmetricDifference(_:)(*a1);
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance BargeInMode@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return specialized SetAlgebra.subtracting(_:)(*a1, *v2, a2);
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance BargeInMode(uint64_t *a1)
{
  uint64_t *v1;

  return specialized SetAlgebra.isDisjoint(with:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance BargeInMode(uint64_t *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

SiriUtilities::BargeInMode protocol witness for RawRepresentable.init(rawValue:) in conformance BargeInMode@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  SiriUtilities::BargeInMode result;

  result.rawValue = BargeInMode.init(rawValue:)(*a1).rawValue;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance BargeInMode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = BargeInMode.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance BargeInMode@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized SetAlgebra<>.init(arrayLiteral:)(a1, a2);
}

void BargeInContext.mode.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

uint64_t BargeInContext.approximatePreviousTTSInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_3_10() + 20);
  return outlined init with copy of DateInterval?(v3, a1);
}

uint64_t type metadata accessor for BargeInContext()
{
  uint64_t result;

  result = type metadata singleton initialization cache for BargeInContext;
  if (!type metadata singleton initialization cache for BargeInContext)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of DateInterval?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t BargeInContext.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = 0;
  v1 = (uint64_t)a1 + *(int *)(OUTLINED_FUNCTION_3_10() + 20);
  v2 = type metadata accessor for DateInterval();
  return OUTLINED_FUNCTION_1_15(v1, 1, 1, v2);
}

uint64_t BargeInContext.init(mode:approximatePreviousTTSInterval:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  *a3 = *a1;
  v4 = (uint64_t)a3 + *(int *)(OUTLINED_FUNCTION_3_10() + 20);
  return outlined init with take of DateInterval?(a2, v4);
}

uint64_t outlined init with take of DateInterval?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type BargeInMode and conformance BargeInMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode;
  if (!lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for BargeInMode, &type metadata for BargeInMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode;
  if (!lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for BargeInMode, &type metadata for BargeInMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode;
  if (!lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for BargeInMode, &type metadata for BargeInMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode;
  if (!lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for BargeInMode, &type metadata for BargeInMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode);
  }
  return result;
}

ValueMetadata *type metadata accessor for BargeInMode()
{
  return &type metadata for BargeInMode;
}

uint64_t *initializeBufferWithCopyOfBuffer for BargeInContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for DateInterval();
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for BargeInContext(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for DateInterval();
  result = __swift_getEnumTagSinglePayload(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return result;
}

_QWORD *initializeWithCopy for BargeInContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for DateInterval();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithCopy for BargeInContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int EnumTagSinglePayload;
  int v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for DateInterval();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1, v7);
  v9 = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7);
  if (!EnumTagSinglePayload)
  {
    v10 = *(_QWORD *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  return a1;
}

_QWORD *initializeWithTake for BargeInContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for DateInterval();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for BargeInContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int EnumTagSinglePayload;
  int v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for DateInterval();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v5, 1, v7);
  v9 = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7);
  if (!EnumTagSinglePayload)
  {
    v10 = *(_QWORD *)(v7 - 8);
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for BargeInContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2F52D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  return __swift_getEnumTagSinglePayload(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for BargeInContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C2F52D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  return OUTLINED_FUNCTION_1_15(v5, a2, a2, v6);
}

void type metadata completion function for BargeInContext()
{
  unint64_t v0;

  type metadata accessor for DateInterval?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for DateInterval?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DateInterval?)
  {
    type metadata accessor for DateInterval();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DateInterval?);
  }
}

uint64_t OUTLINED_FUNCTION_1_15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

void OUTLINED_FUNCTION_2_12(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t OUTLINED_FUNCTION_3_10()
{
  return type metadata accessor for BargeInContext();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  _OWORD v12[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v12);
    return specialized Dictionary._Variant.setValue(_:forKey:)();
  }
  else
  {
    outlined destroy of Any?(a1);
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v6 & 1) != 0)
    {
      v7 = v5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v9 = *v2;
      *v2 = 0x8000000000000000;
      v10 = *(_QWORD *)(v9 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<ObjectIdentifier, Any>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v7), v12);
      _NativeDictionary._delete(at:)();
      *v2 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v12, 0, sizeof(v12));
    }
    return outlined destroy of Any?((uint64_t)v12);
  }
}

void specialized Dictionary.subscript.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD v3[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v3);
    specialized Dictionary._Variant.setValue(_:forKey:)();
    v1 = type metadata accessor for CodingUserInfoKey();
    OUTLINED_FUNCTION_7_9(v1);
  }
  else
  {
    outlined destroy of Any?(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(v3);
    v2 = type metadata accessor for CodingUserInfoKey();
    OUTLINED_FUNCTION_7_9(v2);
    outlined destroy of Any?((uint64_t)v3);
  }
  OUTLINED_FUNCTION_33();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities0D11EnvironmentC20InitializingProvider33_20CF7F1B525A92BC26D56D0E773ECAB3LLVG_SSs5NeverOTg504_s13d13Utilities0A11f12CyxxmcAA0aC8h13RzluigSSAC012g7D033_20ijklmnopQ56LLVcfu_33_86b206f40a68fe2df9bfbd6c55755c4aAGSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 48);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void one-time initialization function for root()
{
  uint64_t v0;

  type metadata accessor for SiriEnvironment();
  v0 = swift_allocObject();
  SiriEnvironment.init(parent:)(0);
  static SiriEnvironment.root = v0;
}

uint64_t SiriEnvironment.__allocating_init(parent:)(uint64_t a1)
{
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_37();
  SiriEnvironment.init(parent:)(a1);
  return v2;
}

uint64_t static SiriEnvironment.root.getter()
{
  if (one-time initialization token for root != -1)
    swift_once();
  return swift_retain();
}

uint64_t static SiriEnvironment.default.getter()
{
  uint64_t result;

  result = static SiriEnvironment.forCurrentTask.getter();
  if (!result)
  {
    if (one-time initialization token for root != -1)
      swift_once();
    return swift_retain();
  }
  return result;
}

uint64_t SiriEnvironment.parent.getter()
{
  return swift_retain();
}

uint64_t key path setter for SiriEnvironment.children : SiriEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 136);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t SiriEnvironment.children.getter()
{
  OUTLINED_FUNCTION_25_0();
  return swift_bridgeObjectRetain();
}

void SiriEnvironment.children.setter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v1 + 32) = a1;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_33();
}

void SiriEnvironment.children.modify()
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_31();
}

BOOL static SiriEnvironment.InitializingProvider.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a4;
}

uint64_t SiriEnvironment.InitializingProvider.init<A>(_:)(uint64_t a1)
{
  _typeName(_:qualified:)();
  return a1;
}

void SiriEnvironment.InitializingProvider.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int SiriEnvironment.InitializingProvider.hashValue.getter(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SiriEnvironment.InitializingProvider()
{
  Swift::UInt *v0;

  return SiriEnvironment.InitializingProvider.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance SiriEnvironment.InitializingProvider(int a1)
{
  Swift::UInt *v1;

  SiriEnvironment.InitializingProvider.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriEnvironment.InitializingProvider()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SiriEnvironment.InitializingProvider(uint64_t *a1, uint64_t *a2)
{
  return static SiriEnvironment.InitializingProvider.== infix(_:_:)(*a1, a1[1], a1[2], *a2);
}

SiriUtilities::SiriEnvironment::Scope __swiftcall SiriEnvironment.Scope.init(rawValue:)(SiriUtilities::SiriEnvironment::Scope rawValue)
{
  SiriUtilities::SiriEnvironment::Scope *v1;

  *v1 = rawValue;
  return rawValue;
}

void static SiriEnvironment.Scope.conversation.getter(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "conversation");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void SiriEnvironment.Scope.rawValue.getter()
{
  OUTLINED_FUNCTION_61_0();
  OUTLINED_FUNCTION_31();
}

uint64_t SiriEnvironment.Scope.hash(into:)()
{
  OUTLINED_FUNCTION_61_0();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static SiriEnvironment.Scope.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t SiriEnvironment.Scope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t SiriEnvironment.Scope.CodingKeys.stringValue.getter()
{
  return 0x65756C6156776172;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriEnvironment.Scope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = SiriEnvironment.Scope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriEnvironment.Scope.CodingKeys()
{
  lazy protocol witness table accessor for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriEnvironment.Scope.CodingKeys()
{
  lazy protocol witness table accessor for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void SiriEnvironment.Scope.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriEnvironment.Scope.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  OUTLINED_FUNCTION_17_6();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  OUTLINED_FUNCTION_29(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_0_9();
}

Swift::Int SiriEnvironment.Scope.hashValue.getter()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_61_0();
  String.hash(into:)();
  OUTLINED_FUNCTION_2_0();
  return Hasher._finalize()();
}

void SiriEnvironment.Scope.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriEnvironment.Scope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  OUTLINED_FUNCTION_17_6();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    OUTLINED_FUNCTION_29(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    *a2 = v8;
    a2[1] = v10;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  OUTLINED_FUNCTION_0_9();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriEnvironment.Scope()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance SiriEnvironment.Scope(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  SiriEnvironment.Scope.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance SiriEnvironment.Scope(_QWORD *a1)
{
  SiriEnvironment.Scope.encode(to:)(a1);
}

unint64_t SiriEnvironment.iterateChildren(_:)(void (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(void);
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t (*v18)(void);
  uint64_t v19;

  v2 = v1;
  v4 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 128);
  result = v4();
  v6 = result;
  v19 = MEMORY[0x1E0DEE9D8];
  if (result >> 62)
  {
    result = OUTLINED_FUNCTION_11_9();
    v7 = result;
    if (result)
      goto LABEL_3;
LABEL_13:
    OUTLINED_FUNCTION_21_0();
    v10 = MEMORY[0x1E0DEE9D8];
    goto LABEL_14;
  }
  v7 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
    goto LABEL_13;
LABEL_3:
  if (v7 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }
  v18 = v4;
  for (i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0)
      OUTLINED_FUNCTION_29_6();
    OUTLINED_FUNCTION_15_7();
    v9 = OUTLINED_FUNCTION_14_9();
    swift_release();
    if (v9)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      OUTLINED_FUNCTION_25_6();
    }
  }
  OUTLINED_FUNCTION_21_0();
  v4 = v18;
  v10 = v19;
LABEL_14:
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v10);
  result = ((uint64_t (*)(uint64_t))v4)(v11);
  v12 = result;
  if (!(result >> 62))
  {
    v13 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
      goto LABEL_16;
    return swift_bridgeObjectRelease();
  }
  result = OUTLINED_FUNCTION_11_9();
  v13 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_16:
  if (v13 >= 1)
  {
    for (j = 0; j != v13; ++j)
    {
      if ((v12 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_29_6();
      OUTLINED_FUNCTION_15_7();
      v15 = OUTLINED_FUNCTION_14_9();
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 24);
        if (v16)
          v17 = v16 == v2;
        else
          v17 = 0;
        if (v17)
          a1(v15);
        OUTLINED_FUNCTION_25_6();
      }
      OUTLINED_FUNCTION_25_6();
    }
    return swift_bridgeObjectRelease();
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t key path setter for SiriEnvironment.providers : SiriEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 192);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t SiriEnvironment.providers.getter()
{
  OUTLINED_FUNCTION_25_0();
  return swift_bridgeObjectRetain();
}

void SiriEnvironment.providers.setter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v1 + 64) = a1;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_33();
}

void SiriEnvironment.providers.modify()
{
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_31();
}

void SiriEnvironment.init(parent:)(uint64_t a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB38E0]), sel_init);
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 56) = MEMORY[0x1E0DEE9D8];
  v5 = v1 + 56;
  *(_QWORD *)(v5 + 8) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v5 - 40) = v3;
  *(_QWORD *)(v5 - 32) = a1;
  *(_QWORD *)(v5 - 16) = 0;
  *(_QWORD *)(v5 - 8) = 0;
  *(_QWORD *)(v5 - 24) = v4;
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_38();
  specialized Array.reserveCapacity(_:)(8);
  swift_endAccess();
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakBox<SiriEnvironment>);
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_38();
    swift_retain();
    v6 = specialized WeakBox.init(_:)();
    OUTLINED_FUNCTION_1_16(v6, v7, v8, v9, v10, v11, v12, v13, v14);
    OUTLINED_FUNCTION_18_7();
  }
  OUTLINED_FUNCTION_12_3();
}

unint64_t lazy protocol witness table accessor for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for SiriEnvironment.Scope.CodingKeys, &unk_1E7CD90D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for SiriEnvironment.Scope.CodingKeys, &unk_1E7CD90D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for SiriEnvironment.Scope.CodingKeys, &unk_1E7CD90D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for SiriEnvironment.Scope.CodingKeys, &unk_1E7CD90D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironment.Scope.CodingKeys and conformance SiriEnvironment.Scope.CodingKeys);
  }
  return result;
}

void specialized Array.reserveCapacity(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (!swift_isUniquelyReferenced_nonNull_native() || a1 > *(_QWORD *)(v3 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v3 = v4;
  }
  *v1 = v3;
}

void SiriEnvironment.__allocating_init(scope:parent:)(uint64_t *a1, uint64_t a2)
{
  OUTLINED_FUNCTION_37();
  SiriEnvironment.init(scope:parent:)(a1, a2);
  OUTLINED_FUNCTION_9_0();
}

void SiriEnvironment.init(scope:parent:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB38E0]), sel_init);
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 56) = MEMORY[0x1E0DEE9D8];
  v8 = v2 + 56;
  *(_QWORD *)(v8 + 8) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v8 - 40) = v6;
  *(_QWORD *)(v8 - 32) = a2;
  *(_QWORD *)(v8 - 24) = v7;
  *(_QWORD *)(v8 - 16) = v4;
  *(_QWORD *)(v8 - 8) = v5;
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_38();
  specialized Array.reserveCapacity(_:)(8);
  swift_endAccess();
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakBox<SiriEnvironment>);
    OUTLINED_FUNCTION_37();
    OUTLINED_FUNCTION_38();
    swift_retain();
    v9 = specialized WeakBox.init(_:)();
    OUTLINED_FUNCTION_1_16(v9, v10, v11, v12, v13, v14, v15, v16, v17);
    OUTLINED_FUNCTION_18_7();
  }
  OUTLINED_FUNCTION_12_3();
}

uint64_t SiriEnvironment.requireProvider<A>(of:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 248))();
  return swift_unknownObjectRelease();
}

uint64_t SiriEnvironment.existingProvider<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v7 = *(void **)(v3 + 16);
  objc_msgSend(v7, sel_lock);
  v8 = OUTLINED_FUNCTION_70();
  specialized Dictionary.subscript.getter(a1, v8, &v12);
  swift_bridgeObjectRelease();
  if (v13)
  {
    if ((OUTLINED_FUNCTION_31_5() & 1) != 0)
    {
      v9 = v11;
      goto LABEL_7;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v12);
  }
  v9 = *(_QWORD *)(v3 + 24);
  if (v9)
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 232))(a1, a2, a3);
LABEL_7:
  objc_msgSend(v7, sel_unlock);
  return v9;
}

_QWORD *SiriEnvironment.environment(for:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = a1[1];
  if (v2)
  {
    v3 = *a1;
    swift_retain_n();
    v4 = v1;
    while (1)
    {
      v5 = v1[6];
      if (v5)
      {
        v6 = v1[5] == v3 && v5 == v2;
        if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_release();
          v4 = v1;
        }
        else
        {
          OUTLINED_FUNCTION_0_6();
        }
      }
      else
      {
        OUTLINED_FUNCTION_0_6();
        swift_bridgeObjectRelease();
      }
      v7 = (_QWORD *)v1[3];
      swift_retain();
      OUTLINED_FUNCTION_0_6();
      if (!v7)
        break;
      swift_retain();
      v1 = v7;
    }
    return v4;
  }
  else
  {
    swift_retain();
  }
  return v1;
}

uint64_t SiriEnvironment.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  uint64_t (*v25)(_QWORD *);
  void (*v26)(_QWORD *, _QWORD);
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  __int128 v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  void *v45;
  _QWORD v46[4];
  __int128 v47;
  uint64_t v48;

  v7 = *(void **)(v3 + 16);
  objc_msgSend(v7, sel_lock);
  v8 = OUTLINED_FUNCTION_70();
  specialized Dictionary.subscript.getter(a1, v8, &v47);
  OUTLINED_FUNCTION_2_0();
  if (v48)
  {
    if ((OUTLINED_FUNCTION_31_5() & 1) != 0)
    {
      v9 = v46[0];
LABEL_10:
      objc_msgSend(v7, sel_unlock);
      return v9;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v47);
  }
  if (*(_QWORD *)(v3 + 24))
  {
    v10 = OUTLINED_FUNCTION_16_7();
    v12 = v11(v10);
    if (v12)
    {
      v9 = v12;
      goto LABEL_10;
    }
  }
  v45 = v7;
  v13 = OUTLINED_FUNCTION_16_7();
  v14 = SiriEnvironment.InitializingProvider.init<A>(_:)(v13);
  v16 = v15;
  v18 = v17;
  OUTLINED_FUNCTION_25_0();
  v44 = specialized Sequence<>.contains(_:)(v14, v16, v18, *(_QWORD **)(v3 + 56));
  OUTLINED_FUNCTION_25_0();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v19 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
  v20 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v20 + 16) = v19 + 1;
  v21 = (_QWORD *)(v20 + 24 * v19);
  v21[4] = v14;
  v21[5] = v16;
  v21[6] = v18;
  swift_endAccess();
  if ((v44 & 1) == 0)
  {
    type metadata accessor for SiriEnvironmentStorage();
    OUTLINED_FUNCTION_16_7();
    SiriEnvironmentStorage.__allocating_init<A>(namespace:)();
    v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 24);
    v23 = swift_retain();
    v9 = v22(v23, a2, a3);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v47, a2, a3);
    v24 = SiriEnvironment.environment(for:)((uint64_t *)&v47);
    swift_bridgeObjectRelease();
    v48 = a2;
    *(_QWORD *)&v47 = v9;
    v25 = *(uint64_t (**)(_QWORD *))(*v24 + 200);
    swift_unknownObjectRetain();
    v26 = (void (*)(_QWORD *, _QWORD))v25(v46);
    specialized Dictionary.subscript.setter((uint64_t)&v47, a1);
    v26(v46, 0);
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_25_0();
    specialized RangeReplaceableCollection<>.removeLast()();
    swift_endAccess();
    swift_bridgeObjectRelease();
    v7 = v45;
    goto LABEL_10;
  }
  v28 = OUTLINED_FUNCTION_61_0();
  v29 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities0D11EnvironmentC20InitializingProvider33_20CF7F1B525A92BC26D56D0E773ECAB3LLVG_SSs5NeverOTg504_s13d13Utilities0A11f12CyxxmcAA0aC8h13RzluigSSAC012g7D033_20ijklmnopQ56LLVcfu_33_86b206f40a68fe2df9bfbd6c55755c4aAGSSTf3nnnpk_nTf1cn_n(v28);
  OUTLINED_FUNCTION_2_0();
  *(_QWORD *)&v47 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v30 = BidirectionalCollection<>.joined(separator:)();
  v32 = v31;
  OUTLINED_FUNCTION_21_0();
  *(_QWORD *)&v47 = 0;
  *((_QWORD *)&v47 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(116);
  v33._object = (void *)0x80000001C2F85840;
  v33._countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v33);
  v34._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 0xD000000000000042;
  v35._object = (void *)0x80000001C2F85870;
  String.append(_:)(v35);
  v36._countAndFlagsBits = v30;
  v36._object = v32;
  String.append(_:)(v36);
  v37 = v47;
  if (one-time initialization token for logger != -1)
    swift_once();
  v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Logger.logger);
  swift_bridgeObjectRetain_n();
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = swift_slowAlloc();
    *(_QWORD *)&v47 = swift_slowAlloc();
    *(_DWORD *)v41 = 136315650;
    v42 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, (uint64_t *)&v47);
    OUTLINED_FUNCTION_10_9();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + 22) = 2080;
    swift_bridgeObjectRetain();
    v46[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, *((unint64_t *)&v37 + 1), (uint64_t *)&v47);
    OUTLINED_FUNCTION_10_9();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F2D000, v39, v40, "FatalError at %s:%lu - %s", (uint8_t *)v41, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_1();
  }

  swift_bridgeObjectRelease_n();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;

  v4 = a4[2];
  if (!v4)
    return 0;
  if (a4[4] == result)
    return 1;
  if (v4 == 1)
    return 0;
  v6 = a4 + 7;
  for (i = 1; ; ++i)
  {
    v8 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v9 = *v6;
    v6 += 3;
    v5 = v9 == result;
    if (v9 == result || v8 == v4)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t SiriEnvironment.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  void *v7;
  uint64_t (*v8)(_BYTE *);
  void (*v9)(_BYTE *, _QWORD);
  _BYTE v11[32];
  _QWORD v12[4];

  v7 = (void *)v3[2];
  objc_msgSend(v7, sel_lock);
  v12[3] = a3;
  v12[0] = a1;
  v8 = *(uint64_t (**)(_BYTE *))(*v3 + 200);
  swift_unknownObjectRetain();
  v9 = (void (*)(_BYTE *, _QWORD))v8(v11);
  specialized Dictionary.subscript.setter((uint64_t)v12, a2);
  v9(v11, 0);
  objc_msgSend(v7, sel_unlock);
  return swift_unknownObjectRelease();
}

void (*SiriEnvironment.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[3] = a4;
  v9[4] = v4;
  v9[1] = a2;
  v9[2] = a3;
  *v9 = SiriEnvironment.subscript.getter(a2, a3, a4);
  return SiriEnvironment.subscript.modify;
}

void SiriEnvironment.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = **a1;
  if ((a2 & 1) != 0)
  {
    v4 = swift_unknownObjectRetain();
    OUTLINED_FUNCTION_21_7(v4);
    swift_unknownObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_21_7(v3);
  }
  free(v2);
}

void SiriEnvironment.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 24) = 0;
  if (v1)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native())
        break;
      v2 = *(_QWORD *)(v1 + 24);
      OUTLINED_FUNCTION_38();
      swift_release();
      v1 = v2;
    }
    while (v2);
  }
  swift_release();
  OUTLINED_FUNCTION_9_0();
}

uint64_t SiriEnvironment.__deallocating_deinit()
{
  SiriEnvironment.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized WeakBox.init(_:)()
{
  uint64_t v0;

  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

void specialized RangeReplaceableCollection<>.removeLast()()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(*(_QWORD *)v0 + 16))
  {
    specialized Array._customRemoveLast()();
    if (!v1)
      specialized Array.remove(at:)(*(_QWORD *)(*(_QWORD *)v0 + 16) - 1);
  }
  else
  {
    __break(1u);
  }
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriEnvironment.Scope and conformance SiriEnvironment.Scope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriEnvironment.Scope and conformance SiriEnvironment.Scope;
  if (!lazy protocol witness table cache variable for type SiriEnvironment.Scope and conformance SiriEnvironment.Scope)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for SiriEnvironment.Scope, &type metadata for SiriEnvironment.Scope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironment.Scope and conformance SiriEnvironment.Scope);
  }
  return result;
}

uint64_t sub_1C2F547D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2F54808@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = OUTLINED_FUNCTION_70();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for SiriEnvironment()
{
  return objc_opt_self();
}

uint64_t method lookup function for SiriEnvironment()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriEnvironment.children.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of SiriEnvironment.children.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SiriEnvironment.children.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SiriEnvironment.iterateChildren(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SiriEnvironment.providers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SiriEnvironment.providers.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of SiriEnvironment.providers.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of SiriEnvironment.__allocating_init(parent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of SiriEnvironment.__allocating_init(scope:parent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of SiriEnvironment.requireProvider<A>(of:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of SiriEnvironment.existingProvider<A>(of:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of SiriEnvironment.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of SiriEnvironment.subscript.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of SiriEnvironment.subscript.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

ValueMetadata *type metadata accessor for SiriEnvironment.Scope()
{
  return &type metadata for SiriEnvironment.Scope;
}

uint64_t initializeBufferWithCopyOfBuffer for SiriEnvironment.InitializingProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SiriEnvironment.InitializingProvider()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for SiriEnvironment.InitializingProvider(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SiriEnvironment.InitializingProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriEnvironment.InitializingProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriEnvironment.InitializingProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriEnvironment.InitializingProvider()
{
  return &type metadata for SiriEnvironment.InitializingProvider;
}

uint64_t storeEnumTagSinglePayload for SiriEnvironment.Scope.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C2F54A9C + 4 * asc_1C2F825E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C2F54ABC + 4 * byte_1C2F825E5[v4]))();
}

_BYTE *sub_1C2F54A9C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C2F54ABC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2F54AC4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2F54ACC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2F54AD4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2F54ADC(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for SiriEnvironment.Scope.CodingKeys()
{
  return &unk_1E7CD90D8;
}

unint64_t lazy protocol witness table accessor for type SiriEnvironment.InitializingProvider and conformance SiriEnvironment.InitializingProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriEnvironment.InitializingProvider and conformance SiriEnvironment.InitializingProvider;
  if (!lazy protocol witness table cache variable for type SiriEnvironment.InitializingProvider and conformance SiriEnvironment.InitializingProvider)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for SiriEnvironment.InitializingProvider, &type metadata for SiriEnvironment.InitializingProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironment.InitializingProvider and conformance SiriEnvironment.InitializingProvider);
  }
  return result;
}

void specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v3 = v6;
  }
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v3 + 24 * a1 + 56), v4 - 1 - a1, (char *)(v3 + 24 * a1 + 32));
    *(_QWORD *)(v3 + 16) = v5;
    *v1 = v3;
  }
}

void specialized Array._customRemoveLast()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v1 = v3;
  }
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    *(_QWORD *)(v1 + 16) = v2 - 1;
    *v0 = v1;
  }
  else
  {
    __break(1u);
  }
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_1_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v9 + 144))(&a9);
}

uint64_t OUTLINED_FUNCTION_7_9(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_9_10()
{
  _QWORD *v0;

  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)((*v0 & 0xFFFFFFFFFFFFF8) + 0x10));
}

uint64_t OUTLINED_FUNCTION_10_9()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_11_9()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_14_9()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t OUTLINED_FUNCTION_15_7()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_16_7()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_18_7()
{
  JUMPOUT(0x1C3BCDF44);
}

uint64_t OUTLINED_FUNCTION_21_7(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return SiriEnvironment.subscript.setter(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_25_6()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_27_6()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t OUTLINED_FUNCTION_28_5()
{
  return swift_release_n();
}

void OUTLINED_FUNCTION_29_6()
{
  JUMPOUT(0x1C3BCE388);
}

uint64_t OUTLINED_FUNCTION_30_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v9)(uint64_t *, _QWORD);

  return v9(&a9, 0);
}

uint64_t OUTLINED_FUNCTION_31_5()
{
  return swift_dynamicCast();
}

BOOL static DeviceIdiom.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

SiriUtilities::DeviceIdiom __swiftcall DeviceIdiom.init(aceValue:)(Swift::String aceValue)
{
  char *v1;
  char v2;
  void *object;
  uint64_t countAndFlagsBits;
  char *v5;
  void *v6;
  SiriUtilities::DeviceIdiom result;
  char v9;
  void *v10;
  void *v12;
  void *v14;
  void *v16;
  void *v18;
  void *v20;
  char v22;

  object = aceValue._object;
  countAndFlagsBits = aceValue._countAndFlagsBits;
  v5 = v1;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == aceValue._countAndFlagsBits && v6 == object)
  {
    result = OUTLINED_FUNCTION_5_0();
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_2_0();
LABEL_8:
    v9 = 5;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v10 == object)
  {
    result = OUTLINED_FUNCTION_5_0();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_2_0();
LABEL_17:
    v9 = 3;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v12 == object)
  {
    result = OUTLINED_FUNCTION_5_0();
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_2_0();
LABEL_25:
    v9 = 0;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v14 == object)
  {
    result = OUTLINED_FUNCTION_5_0();
    goto LABEL_33;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_2_0();
LABEL_33:
    v9 = 7;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v16 == object)
  {
    result = OUTLINED_FUNCTION_5_0();
    goto LABEL_41;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_2_0();
LABEL_41:
    v9 = 6;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v18 == object)
  {
    result = OUTLINED_FUNCTION_5_0();
    goto LABEL_49;
  }
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_1_0();
  if ((v2 & 1) != 0)
  {
    result = OUTLINED_FUNCTION_2_0();
LABEL_49:
    v9 = 1;
    goto LABEL_9;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v20 == object)
  {
    v9 = 2;
    result = OUTLINED_FUNCTION_5_0();
  }
  else
  {
    v22 = OUTLINED_FUNCTION_0_0();
    OUTLINED_FUNCTION_2_0();
    result = swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
      v9 = 2;
    else
      v9 = 8;
  }
LABEL_9:
  *v5 = v9;
  return result;
}

uint64_t static DeviceIdiom.fromSAUserInterfaceIdiom(userInterfaceIdiom:)(uint64_t a1, void *a2)
{
  Swift::String v4;

  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  return DeviceIdiom.init(aceValue:)(v4);
}

void DeviceIdiom.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int DeviceIdiom.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type DeviceIdiom and conformance DeviceIdiom()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom;
  if (!lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for DeviceIdiom, &type metadata for DeviceIdiom);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceIdiom(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 9) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v5 = v6 - 10;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceIdiom(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1C2F551D4 + 4 * byte_1C2F828B5[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1C2F55208 + 4 * byte_1C2F828B0[v4]))();
}

uint64_t sub_1C2F55208(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F55210(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F55218);
  return result;
}

uint64_t sub_1C2F55224(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F5522CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1C2F55230(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F55238(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceIdiom()
{
  return &type metadata for DeviceIdiom;
}

void specialized Dictionary.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v5;
  char v6;

  if (*(_QWORD *)(a2 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    OUTLINED_FUNCTION_20_5(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    OUTLINED_FUNCTION_31();
  }
}

void specialized Dictionary.subscript.getter(unsigned int a1@<W0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  unint64_t v5;
  char v6;
  char v7;

  if (*(_QWORD *)(a2 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
    v7 = *(_BYTE *)(*(_QWORD *)(a2 + 56) + v5);
  else
    v7 = 7;
  *a3 = v7;
  OUTLINED_FUNCTION_31();
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * v4);
  OUTLINED_FUNCTION_61_0();
  return v6;
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v3 & 1) != 0)
      swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_31();
}

void specialized Dictionary.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  char v7;

  if (*(_QWORD *)(a3 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    outlined init with copy of Transforming(*(_QWORD *)(a3 + 56) + 40 * v6, a4);
  }
  else
  {
    *(_QWORD *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    OUTLINED_FUNCTION_31();
  }
}

void specialized Dictionary.subscript.getter(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a1 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(), (v5 & 1) != 0))
  {
    OUTLINED_FUNCTION_20_5(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)a2);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
    OUTLINED_FUNCTION_31();
  }
}

uint64_t static TransformationDescriptor.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t result;
  BOOL v15;
  char v16;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v8 = a2[2];
  v7 = a2[3];
  v10 = a2[4];
  v9 = a2[5];
  v11 = a2[6];
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    if (v2 != v8)
      return 0;
  }
  else
  {
    v13 = OUTLINED_FUNCTION_3_0();
    result = 0;
    if ((v13 & 1) == 0 || v2 != v8)
      return result;
  }
  v15 = v3 == v7 && v4 == v10;
  if (v15 || (v16 = OUTLINED_FUNCTION_3_0(), result = 0, (v16 & 1) != 0))
  {
    if (v5 == v9 && v6 == v11)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

void __swiftcall TransformationDescriptor.init(from:)(SiriUtilities::TransformationDescriptor_optional *__return_ptr retstr, Swift::OpaquePointer from)
{
  unint64_t v4;
  char v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  Swift::Int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  char v24;
  char v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  unsigned __int8 v41;
  uint64_t v42;
  char v43;

  if (!*((_QWORD *)from._rawValue + 2))
    goto LABEL_19;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(1701667150, 0xE400000000000000);
  if ((v5 & 1) == 0)
    goto LABEL_19;
  v6 = (uint64_t *)(*((_QWORD *)from._rawValue + 7) + 16 * v4);
  v8 = *v6;
  v7 = (void *)v6[1];
  OUTLINED_FUNCTION_61_0();
  v9 = OUTLINED_FUNCTION_35_4(0x6E6F6973726556, 0xE700000000000000);
  if (!v10)
    goto LABEL_18;
  v11 = v9;
  v12 = v10;
  OUTLINED_FUNCTION_35_4(0x7079547475706E49, 0xE900000000000065);
  if (!v13)
  {
    OUTLINED_FUNCTION_55_0();
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  OUTLINED_FUNCTION_35_4(0x795474757074754FLL, 0xEA00000000006570);
  v15 = v14;
  OUTLINED_FUNCTION_55_0();
  if (!v15)
  {
    OUTLINED_FUNCTION_2_0();
    OUTLINED_FUNCTION_19_5();
    goto LABEL_19;
  }
  v16 = HIBYTE(v12) & 0xF;
  v17 = v11 & 0xFFFFFFFFFFFFLL;
  if ((v12 & 0x2000000000000000) != 0)
    v18 = HIBYTE(v12) & 0xF;
  else
    v18 = v11 & 0xFFFFFFFFFFFFLL;
  if (!v18)
  {
    OUTLINED_FUNCTION_2_0();
    OUTLINED_FUNCTION_7_0();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if ((v12 & 0x1000000000000000) != 0)
  {
    v20 = (Swift::Int)specialized _parseInteger<A, B>(ascii:radix:)(v11, v12, 10);
    LOBYTE(v11) = v43;
    goto LABEL_57;
  }
  if ((v12 & 0x2000000000000000) == 0)
  {
    if ((v11 & 0x1000000000000000) != 0)
      v19 = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v19 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    v20 = (Swift::Int)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v19, v17, 10);
    LOBYTE(v11) = v21 & 1;
    goto LABEL_57;
  }
  if (v11 == 43)
  {
    if (!v16)
      goto LABEL_71;
    if (v16 == 1)
      goto LABEL_43;
    OUTLINED_FUNCTION_7_10();
    if (!v25 & v24)
      goto LABEL_43;
    v20 = v27;
    if (v26 != 2)
    {
      OUTLINED_FUNCTION_7_10();
      if (!v25 & v24)
        goto LABEL_43;
      v20 = 10 * v20 + v29;
      if (v28 != 3)
      {
        while (1)
        {
          OUTLINED_FUNCTION_32_5();
          if (!v25 & v24)
            goto LABEL_43;
          OUTLINED_FUNCTION_8_10();
          if (!v25)
            goto LABEL_43;
          v20 = v31 + v30;
          if (__OFADD__(v31, v30))
            goto LABEL_43;
          OUTLINED_FUNCTION_24_6();
          if (v25)
            goto LABEL_57;
        }
      }
    }
LABEL_56:
    LOBYTE(v11) = 0;
    goto LABEL_57;
  }
  if (v11 != 45)
  {
    if (!v16 || (v11 - 48) > 9u)
      goto LABEL_43;
    v20 = (v11 - 48);
    if (v16 != 1)
    {
      OUTLINED_FUNCTION_7_10();
      if (!v25 & v24)
        goto LABEL_43;
      v20 = 10 * (v11 - 48) + v33;
      if (v32 != 2)
      {
        while (1)
        {
          OUTLINED_FUNCTION_32_5();
          if (!v25 & v24)
            goto LABEL_43;
          OUTLINED_FUNCTION_8_10();
          if (!v25)
            goto LABEL_43;
          v20 = v35 + v34;
          if (__OFADD__(v35, v34))
            goto LABEL_43;
          OUTLINED_FUNCTION_24_6();
          if (v25)
            goto LABEL_57;
        }
      }
    }
    goto LABEL_56;
  }
  if (v16)
  {
    if (v16 != 1)
    {
      OUTLINED_FUNCTION_7_10();
      if (!(!v25 & v24))
      {
        if (v22 == 2)
        {
          LOBYTE(v11) = 0;
          v20 = -(uint64_t)v23;
LABEL_57:
          OUTLINED_FUNCTION_19_5();
          if ((v11 & 1) == 0)
          {
            v36 = OUTLINED_FUNCTION_14_10();
            v38 = v37;
            v39 = OUTLINED_FUNCTION_14_10();
            retstr->value.id.name._countAndFlagsBits = v8;
            retstr->value.id.name._object = v7;
            retstr->value.id.version = v20;
            retstr->value.inputType.encoding._countAndFlagsBits = v36;
            retstr->value.inputType.encoding._object = v38;
            retstr->value.outputType.encoding._countAndFlagsBits = v39;
            retstr->value.outputType.encoding._object = v40;
            return;
          }
          OUTLINED_FUNCTION_2_0();
          OUTLINED_FUNCTION_7_0();
LABEL_19:
          swift_bridgeObjectRelease();
          retstr->value.outputType.encoding._object = 0;
          *(_OWORD *)&retstr->value.id.version = 0u;
          *(_OWORD *)&retstr->value.inputType.encoding._object = 0u;
          retstr->value.id.name = 0u;
          return;
        }
        if ((BYTE2(v11) - 48) <= 9u)
        {
          v20 = -10 * v23 - (BYTE2(v11) - 48);
          if (v22 == 3)
            goto LABEL_56;
          while (1)
          {
            OUTLINED_FUNCTION_32_5();
            if (!v25 & v24)
              break;
            OUTLINED_FUNCTION_8_10();
            if (!v25)
              break;
            v20 = v42 - v41;
            if (__OFSUB__(v42, v41))
              break;
            OUTLINED_FUNCTION_24_6();
            if (v25)
              goto LABEL_57;
          }
        }
      }
    }
LABEL_43:
    v20 = 0;
    LOBYTE(v11) = 1;
    goto LABEL_57;
  }
  __break(1u);
LABEL_71:
  __break(1u);
}

uint64_t TransformationPlugin.supportedTransformations()()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t TransformationPlugin.namedTransformations()()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t TransformationIdentifier.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  OUTLINED_FUNCTION_61_0();
  return v1;
}

uint64_t TransformationIdentifier.version.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

SiriUtilities::TransformationIdentifier __swiftcall TransformationIdentifier.init(name:version:)(Swift::String name, Swift::Int version)
{
  Swift::String *v2;
  SiriUtilities::TransformationIdentifier result;

  *v2 = name;
  v2[1]._countAndFlagsBits = version;
  result.name = name;
  result.version = version;
  return result;
}

BOOL static TransformationIdentifier.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  _BOOL8 result;

  v2 = a1[2];
  v3 = a2[2];
  if (*a1 == *a2 && a1[1] == a2[1])
    return v2 == v3;
  v5 = OUTLINED_FUNCTION_3_0();
  result = 0;
  if ((v5 & 1) != 0)
    return v2 == v3;
  return result;
}

void TransformationIdentifier.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_27_7();
  OUTLINED_FUNCTION_7_0();
  Hasher._combine(_:)(v1);
  OUTLINED_FUNCTION_9_0();
}

uint64_t TransformationIdentifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

Swift::Int TransformationIdentifier.CodingKeys.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t TransformationIdentifier.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F6973726576;
  else
    return 1701667182;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TransformationIdentifier.CodingKeys()
{
  char *v0;

  return TransformationIdentifier.CodingKeys.hashValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TransformationIdentifier.CodingKeys()
{
  char *v0;

  return TransformationIdentifier.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TransformationIdentifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TransformationIdentifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TransformationIdentifier.CodingKeys()
{
  lazy protocol witness table accessor for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TransformationIdentifier.CodingKeys()
{
  lazy protocol witness table accessor for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void TransformationIdentifier.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_21_4();
  v3 = v2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TransformationIdentifier.CodingKeys>);
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  OUTLINED_FUNCTION_25_4();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
    KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  OUTLINED_FUNCTION_0_9();
}

void TransformationIdentifier.hashValue.getter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  OUTLINED_FUNCTION_17_4();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_4_9();
  v0 = OUTLINED_FUNCTION_55_0();
  OUTLINED_FUNCTION_18_8(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_26_7();
}

void TransformationIdentifier.init(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_21_4();
  v2 = v1;
  v4 = v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TransformationIdentifier.CodingKeys>);
  MEMORY[0x1E0C80A78](v5, v6);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  lazy protocol witness table accessor for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    OUTLINED_FUNCTION_13_10();
  }
  else
  {
    v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9 = v8;
    swift_bridgeObjectRetain();
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_3_11();
    *v4 = v7;
    v4[1] = v9;
    v4[2] = v10;
    OUTLINED_FUNCTION_13_10();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_0_9();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance TransformationIdentifier()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_15_0();
  OUTLINED_FUNCTION_4_9();
  v0 = OUTLINED_FUNCTION_55_0();
  OUTLINED_FUNCTION_18_8(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_26_7();
}

void protocol witness for Decodable.init(from:) in conformance TransformationIdentifier()
{
  TransformationIdentifier.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance TransformationIdentifier()
{
  TransformationIdentifier.encode(to:)();
}

uint64_t TransformationDescriptor.id.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  v3 = v1[2];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t TransformationDescriptor.inputType.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return OUTLINED_FUNCTION_9_11(*(_QWORD *)(v1 + 32), a1);
}

uint64_t TransformationDescriptor.outputType.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return OUTLINED_FUNCTION_9_11(*(_QWORD *)(v1 + 48), a1);
}

void __swiftcall TransformationDescriptor.init(id:inputType:outputType:)(SiriUtilities::TransformationDescriptor *__return_ptr retstr, SiriUtilities::TransformationIdentifier id, SiriUtilities::TypeIdentifier inputType, SiriUtilities::TypeIdentifier outputType)
{
  Swift::Int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v4 = *(_QWORD *)(id.name._countAndFlagsBits + 16);
  v5 = *(_QWORD *)id.name._object;
  v6 = (void *)*((_QWORD *)id.name._object + 1);
  v7 = *(_QWORD *)id.version;
  v8 = *(void **)(id.version + 8);
  retstr->id.name = *(Swift::String *)id.name._countAndFlagsBits;
  retstr->id.version = v4;
  retstr->inputType.encoding._countAndFlagsBits = v5;
  retstr->inputType.encoding._object = v6;
  retstr->outputType.encoding._countAndFlagsBits = v7;
  retstr->outputType.encoding._object = v8;
}

uint64_t TransformationDescriptor.init(id:transformation:)@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v11 = *a1;
  v5 = *((_QWORD *)a1 + 2);
  v6 = __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  OUTLINED_FUNCTION_19_7((uint64_t)v6, v7);
  v8 = __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  OUTLINED_FUNCTION_19_7((uint64_t)v8, v9);
  *(_OWORD *)a3 = v11;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 32) = v13;
  *(_QWORD *)(a3 + 40) = v12;
  *(_QWORD *)(a3 + 48) = v13;
  return OUTLINED_FUNCTION_12_10((uint64_t)a2);
}

uint64_t TransformationDescriptor.init(name:version:transformation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v10 = __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  OUTLINED_FUNCTION_11_10((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17, v28);
  v18 = v29;
  v19 = __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  OUTLINED_FUNCTION_11_10((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26, v29);
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = v18;
  a5[4] = v31;
  a5[5] = v30;
  a5[6] = v31;
  return OUTLINED_FUNCTION_12_10((uint64_t)a4);
}

uint64_t TransformationDescriptor.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)j__OUTLINED_FUNCTION_6_10 + 4
                                                                                                * byte_1C2F82970[*v0]))(1701667150, 0xE400000000000000);
}

uint64_t sub_1C2F56020()
{
  return 0x795474757074754FLL;
}

void TransformationDescriptor.init(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_21_4();
  v2 = v1;
  v4 = v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TransformationDescriptor.CodingKeys>);
  MEMORY[0x1E0C80A78](v5, v6);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  lazy protocol witness table accessor for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    OUTLINED_FUNCTION_13_10();
  }
  else
  {
    v7 = OUTLINED_FUNCTION_22_6();
    v9 = v8;
    v16 = KeyedDecodingContainer.decode(_:forKey:)();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_22_6();
    v13 = String.init<A>(_:)();
    v15 = v10;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    v14 = String.init<A>(_:)();
    v12 = v11;
    OUTLINED_FUNCTION_1_17();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_61_0();
    OUTLINED_FUNCTION_21_0();
    *v4 = v7;
    v4[1] = v9;
    v4[2] = v16;
    v4[3] = v13;
    v4[4] = v15;
    v4[5] = v14;
    v4[6] = v12;
    OUTLINED_FUNCTION_13_10();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_0_9();
}

void TransformationDescriptor.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_21_4();
  v3 = v2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TransformationDescriptor.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  OUTLINED_FUNCTION_25_4();
  v7 = v3[3];
  v8 = v3;
  v10 = v9;
  __swift_project_boxed_opaque_existential_1(v8, v7);
  lazy protocol witness table accessor for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_2_13();
  if (!v0)
  {
    KeyedEncodingContainer.encode(_:forKey:)();
    OUTLINED_FUNCTION_2_13();
    OUTLINED_FUNCTION_2_13();
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v10);
  OUTLINED_FUNCTION_0_9();
}

SiriUtilities::TransformationDescriptor::CodingKeys_optional __swiftcall TransformationDescriptor.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  char v6;
  SiriUtilities::TransformationDescriptor::CodingKeys_optional result;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TransformationDescriptor.CodingKeys.init(rawValue:), v3);
  swift_bridgeObjectRelease();
  v6 = 4;
  if (v5 < 4)
    v6 = v5;
  *v4 = v6;
  OUTLINED_FUNCTION_9_0();
  return result;
}

SiriUtilities::TransformationDescriptor::CodingKeys_optional __swiftcall TransformationDescriptor.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  _BYTE *v1;
  _BYTE *v2;
  SiriUtilities::TransformationDescriptor::CodingKeys_optional result;
  char v4;

  v2 = v1;
  result.value = TransformationDescriptor.CodingKeys.init(rawValue:)(stringValue).value;
  *v2 = v4;
  return result;
}

SiriUtilities::TransformationDescriptor::CodingKeys_optional __swiftcall TransformationDescriptor.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  _BYTE *v1;

  *v1 = 4;
  return (SiriUtilities::TransformationDescriptor::CodingKeys_optional)intValue;
}

uint64_t TransformationDescriptor.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t TransformationDescriptor.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)j__OUTLINED_FUNCTION_6_10_0
                                                            + 4 * byte_1C2F82974[*v0]))(1701667150, 0xE400000000000000);
}

uint64_t sub_1C2F56494()
{
  return 0x795474757074754FLL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance TransformationDescriptor.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance TransformationDescriptor.CodingKeys()
{
  specialized RawRepresentable<>.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance TransformationDescriptor.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance TransformationDescriptor.CodingKeys()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::TransformationDescriptor::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance TransformationDescriptor.CodingKeys(Swift::String *a1)
{
  return TransformationDescriptor.CodingKeys.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TransformationDescriptor.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = TransformationDescriptor.CodingKeys.rawValue.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_31();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TransformationDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TransformationDescriptor.CodingKeys()
{
  lazy protocol witness table accessor for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TransformationDescriptor.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_27_7();
  Hasher._combine(_:)(v1);
  OUTLINED_FUNCTION_7_0();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int TransformationDescriptor.hashValue.getter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v9;
  char v10;

  OUTLINED_FUNCTION_17_4();
  OUTLINED_FUNCTION_15_0();
  v0 = OUTLINED_FUNCTION_4_9();
  OUTLINED_FUNCTION_18_8(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10);
  OUTLINED_FUNCTION_55_0();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  OUTLINED_FUNCTION_19_5();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_8_2();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TransformationDescriptor()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance TransformationDescriptor()
{
  TransformationDescriptor.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance TransformationDescriptor()
{
  TransformationDescriptor.encode(to:)();
}

void specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v4 = (_QWORD *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    v4[2] = a1;
    v4[3] = 2 * v5 - 64;
  }
  OUTLINED_FUNCTION_31();
}

void _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v4 = String.UTF16View.index(_:offsetBy:)();
    OUTLINED_FUNCTION_23_4(v4);
  }
  else
  {
    v3 = MEMORY[0x1C3BCDE60](15, a1 >> 16);
    OUTLINED_FUNCTION_23_4(v3);
  }
  OUTLINED_FUNCTION_31();
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(a1, a2, a3);
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  OUTLINED_FUNCTION_2_0();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  OUTLINED_FUNCTION_2_0();
  return v11;
}

unint64_t lazy protocol witness table accessor for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationIdentifier.CodingKeys, &unk_1E7CD9478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationIdentifier.CodingKeys, &unk_1E7CD9478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationIdentifier.CodingKeys, &unk_1E7CD9478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationIdentifier.CodingKeys, &unk_1E7CD9478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationIdentifier.CodingKeys and conformance TransformationIdentifier.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationDescriptor.CodingKeys, &type metadata for TransformationDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationDescriptor.CodingKeys, &type metadata for TransformationDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationDescriptor.CodingKeys, &type metadata for TransformationDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys;
  if (!lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for TransformationDescriptor.CodingKeys, &type metadata for TransformationDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformationDescriptor.CodingKeys and conformance TransformationDescriptor.CodingKeys);
  }
  return result;
}

uint64_t dispatch thunk of TransformationPlugin.typedTransformations()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TransformationPlugin.namedTransformations()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of TransformationPlugin.load(transformation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

void initializeBufferWithCopyOfBuffer for TransformationIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_31();
}

_QWORD *assignWithCopy for TransformationIdentifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for TransformationIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformationIdentifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for TransformationIdentifier()
{
  OUTLINED_FUNCTION_33_2();
}

uint64_t destroy for TransformationDescriptor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TransformationDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TransformationDescriptor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TransformationDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformationDescriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for TransformationDescriptor()
{
  OUTLINED_FUNCTION_33_2();
}

uint64_t getEnumTagSinglePayload for TransformationDescriptor.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C2F56F60 + 4 * byte_1C2F8297D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C2F56F94 + 4 * byte_1C2F82978[v4]))();
}

uint64_t sub_1C2F56F94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F56F9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F56FA4);
  return result;
}

uint64_t sub_1C2F56FB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F56FB8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C2F56FBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F56FC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for TransformationDescriptor.CodingKeys()
{
  OUTLINED_FUNCTION_33_2();
}

uint64_t storeEnumTagSinglePayload for TransformationIdentifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C2F57028 + 4 * byte_1C2F82987[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C2F5705C + 4 * byte_1C2F82982[v4]))();
}

uint64_t sub_1C2F5705C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F57064(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F5706CLL);
  return result;
}

uint64_t sub_1C2F57078(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F57080);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C2F57084(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F5708C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TransformationIdentifier.CodingKeys()
{
  return &unk_1E7CD9478;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      v15 = a2 - 1;
      if (a2 != 1)
      {
        v16 = a3 + 48;
        v17 = a3 + 55;
        v18 = a3 + 87;
        if (a3 > 10)
        {
          v16 = 58;
        }
        else
        {
          v18 = 97;
          v17 = 65;
        }
        if (result)
        {
          v9 = 0;
          v19 = result + 1;
          do
          {
            v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                v13 = 0;
                if (v20 < 0x61 || v20 >= v18)
                  return (unsigned __int8 *)v13;
                v21 = -87;
              }
              else
              {
                v21 = -55;
              }
            }
            else
            {
              v21 = -48;
            }
            v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21)))
              return 0;
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        v23 = a3 + 48;
        v24 = a3 + 55;
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v23 = 58;
        }
        else
        {
          v25 = 97;
          v24 = 65;
        }
        if (result)
        {
          v26 = 0;
          do
          {
            v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                v13 = 0;
                if (v27 < 0x61 || v27 >= v25)
                  return (unsigned __int8 *)v13;
                v28 = -87;
              }
              else
              {
                v28 = -55;
              }
            }
            else
            {
              v28 = -48;
            }
            v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
              return 0;
            v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28)))
              return 0;
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      v5 = a2 - 1;
      if (a2 != 1)
      {
        v6 = a3 + 48;
        v7 = a3 + 55;
        v8 = a3 + 87;
        if (a3 > 10)
        {
          v6 = 58;
        }
        else
        {
          v8 = 97;
          v7 = 65;
        }
        if (result)
        {
          v9 = 0;
          for (i = result + 1; ; ++i)
          {
            v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                v13 = 0;
                if (v11 < 0x61 || v11 >= v8)
                  return (unsigned __int8 *)v13;
                v12 = -87;
              }
              else
              {
                v12 = -55;
              }
            }
            else
            {
              v12 = -48;
            }
            v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12)))
              return 0;
            if (!--v5)
              return (unsigned __int8 *)v9;
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = specialized Collection.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized Collection.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = v11;
      specialized Sequence._copySequenceContents(initializing:)(v16, v11 + 32, v10, a1, a2, a3, a4);
      v14 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v14 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v12 = MEMORY[0x1E0DEE9D8];
    }
    v15 = MEMORY[0x1C3BCDE0C](v12 + 32, *(_QWORD *)(v12 + 16));
    swift_release();
    return v15;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1C3BCDE0CLL);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v16[0] = a3;
    v16[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1C3BCDE0C]((char *)v16 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

void specialized Collection.count.getter(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = a1;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    v7 = v10;
  }
  if ((a2 & 0xC) == v9)
  {
    _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = v11;
    if ((a4 & 0x1000000000000000) == 0)
      return;
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return;
  }
  v12 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v12 = a3 & 0xFFFFFFFFFFFFLL;
  if (v12 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v12 >= a2 >> 16)
  {
    String.UTF8View._foreignDistance(from:to:)();
    return;
  }
  __break(1u);
}

void specialized Sequence._copySequenceContents(initializing:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[2];

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v11 = a4;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v29 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = a4;
LABEL_33:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = a7;
    a1[4] = v11;
    return;
  }
  v13 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v23 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v24 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v25 = v16;
  v28 = a3 - 1;
  v11 = a4;
  while (1)
  {
    v17 = v11;
    if ((v11 & 0xC) == v15)
      _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a6, a7);
    if (v17 >> 14 < v29 || v17 >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      v21 = String.UTF8View._foreignSubscript(position:)();
    }
    else
    {
      v19 = v17 >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v30[0] = a6;
        v30[1] = v24;
        v21 = *((_BYTE *)v30 + v19);
      }
      else
      {
        v20 = v23;
        if ((a6 & 0x1000000000000000) == 0)
          v20 = _StringObject.sharedUTF8.getter();
        v21 = *(_BYTE *)(v20 + v19);
      }
    }
    if ((v11 & 0xC) == v15)
    {
      _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a6, a7);
      v11 = v22;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v25 <= v11 >> 16)
      goto LABEL_35;
    v11 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(_BYTE *)(a2 + v13) = v21;
    if (v28 != v13)
    {
      ++v13;
      if (v10 != v11 >> 14)
        continue;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t OUTLINED_FUNCTION_1_17()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_2_13()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_3_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_5_12()
{
  return 0x7079547475706E49;
}

uint64_t OUTLINED_FUNCTION_6_10()
{
  return 0x6E6F6973726556;
}

uint64_t OUTLINED_FUNCTION_9_11@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = v2;
  a2[1] = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_10_10(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

_QWORD *OUTLINED_FUNCTION_11_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *(*v9)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  return v9(&a9, v10, v11);
}

uint64_t OUTLINED_FUNCTION_12_10(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t OUTLINED_FUNCTION_13_10()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_14_10()
{
  return String.init<A>(_:)();
}

void OUTLINED_FUNCTION_18_8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

_QWORD *OUTLINED_FUNCTION_19_7(uint64_t a1, uint64_t a2, ...)
{
  _QWORD *(*v2)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  return v2((uint64_t *)va, v3, v4);
}

uint64_t OUTLINED_FUNCTION_20_5(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of Any(a1, a2);
}

uint64_t OUTLINED_FUNCTION_22_6()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

unint64_t OUTLINED_FUNCTION_23_4(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t OUTLINED_FUNCTION_27_7()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_35_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized Dictionary.subscript.getter(a1, a2, v2);
}

uint64_t SiriEnvironment.currentProcess.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  v1 = type metadata accessor for CurrentProcess();
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v0 + 248);
  v2 = lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess, (uint64_t)&protocol conformance descriptor for CurrentProcess);
  return v4(v1, v1, v2);
}

uint64_t type metadata accessor for CurrentProcess()
{
  return objc_opt_self();
}

uint64_t key path setter for SiriEnvironment.currentProcess : SiriEnvironment(id *a1)
{
  return SiriEnvironment.currentProcess.setter((uint64_t)*a1);
}

uint64_t SiriEnvironment.currentProcess.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for CurrentProcess();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 256);
  v4 = lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess, (uint64_t)&protocol conformance descriptor for CurrentProcess);
  return v6(a1, v3, v3, v4);
}

void SiriEnvironment.currentProcess.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  a1[1] = v1;
  v3 = type metadata accessor for CurrentProcess();
  a1[2] = v3;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 248);
  v5 = lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess, (uint64_t)&protocol conformance descriptor for CurrentProcess);
  a1[3] = v5;
  *a1 = v4(v3, v3, v5);
  OUTLINED_FUNCTION_9_0();
}

void SiriEnvironment.currentProcess.modify(void **a1, char a2)
{
  void *v2;
  id v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    OUTLINED_FUNCTION_6_11((uint64_t)v3);
    OUTLINED_FUNCTION_0_12(v3);
  }
  else
  {
    OUTLINED_FUNCTION_6_11((uint64_t)v2);
  }
}

uint64_t key path setter for CurrentProcess.mock : CurrentProcess(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x68);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t CurrentProcess.mock.getter()
{
  OUTLINED_FUNCTION_3_12();
  return swift_retain();
}

uint64_t CurrentProcess.mock.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___SUCurrentProcess_mock);
  OUTLINED_FUNCTION_25_0();
  *v3 = a1;
  return swift_release();
}

uint64_t (*CurrentProcess.mock.modify())()
{
  OUTLINED_FUNCTION_25_0();
  return SiriEnvironmentStorage.storage.modify;
}

void CurrentProcess.idleTracker.getter()
{
  void *v0;

  swift_getKeyPath();
  swift_getKeyPath();
  specialized static MockablePublished.subscript.getter(v0);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_9_0();
}

void CurrentProcess.idleTracker.setter(void *a1)
{
  void *v1;

  swift_getKeyPath();
  swift_getKeyPath();
  specialized static MockablePublished.subscript.setter(a1, v1);
}

uint64_t key path getter for CurrentProcess.idleTracker : CurrentProcess@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

void sub_1C2F57E6C(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x78))();
  OUTLINED_FUNCTION_31();
}

uint64_t key path setter for CurrentProcess.idleTracker : CurrentProcess(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x80);
  v4 = *a1;
  return v3(v2);
}

void CurrentProcess.idleTracker.modify(_QWORD *a1)
{
  void *v1;
  uint64_t v3;

  a1[1] = v1;
  a1[2] = swift_getKeyPath();
  a1[3] = swift_getKeyPath();
  specialized static MockablePublished.subscript.getter(v1);
  *a1 = v3;
  OUTLINED_FUNCTION_9_0();
}

void CurrentProcess.idleTracker.modify(uint64_t a1, char a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v2 = *(void **)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    v9 = *(id *)a1;
    v3 = v2;
    v4 = (void *)OUTLINED_FUNCTION_8_11();
    specialized static MockablePublished.subscript.setter(v4, v5);
    OUTLINED_FUNCTION_0_12(v9);
  }
  else
  {
    v6 = v2;
    v7 = (void *)OUTLINED_FUNCTION_8_11();
    specialized static MockablePublished.subscript.setter(v7, v8);
  }
}

_QWORD *key path getter for CurrentProcess.$idleTracker : CurrentProcess@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x90))(&v4);
  *a2 = v4;
  return result;
}

uint64_t key path setter for CurrentProcess.$idleTracker : CurrentProcess(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x98);
  swift_retain();
  return v3(&v5);
}

void CurrentProcess.$idleTracker.getter()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = v0 + OBJC_IVAR___SUCurrentProcess__idleTracker;
  OUTLINED_FUNCTION_25_0();
  v2 = *(void (**)(uint64_t))(**(_QWORD **)v1 + 152);
  v3 = swift_retain();
  v2(v3);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void CurrentProcess.$idleTracker.setter(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD *);
  _QWORD v5[4];

  v2 = *a1;
  OUTLINED_FUNCTION_3_12();
  v3 = *v1;
  v5[0] = v2;
  v4 = *(void (**)(_QWORD *))(*(_QWORD *)v3 + 160);
  swift_retain();
  v4(v5);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_29_0();
}

void (*CurrentProcess.$idleTracker.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  CurrentProcess.$idleTracker.getter();
  return CurrentProcess.$idleTracker.modify;
}

void CurrentProcess.$idleTracker.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_retain();
    CurrentProcess.$idleTracker.setter(&v2);
    swift_release();
  }
  else
  {
    CurrentProcess.$idleTracker.setter(&v2);
  }
}

id CurrentProcess.__allocating_init(storage:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  return CurrentProcess.init(storage:)();
}

id CurrentProcess.init(storage:)()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  id v4;
  objc_super v6;

  *(_QWORD *)&v0[OBJC_IVAR___SUCurrentProcess_mock] = 0;
  v1 = OBJC_IVAR___SUCurrentProcess__idleTracker;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MockablePublished<IdleTracker?>);
  swift_allocObject();
  v2 = v0;
  specialized MockablePublished.init(wrappedValue:)(0);
  *(_QWORD *)&v0[v1] = v3;

  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for CurrentProcess();
  v4 = objc_msgSendSuper2(&v6, sel_init);
  swift_release();
  return v4;
}

void static CurrentProcess.default.getter()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  type metadata accessor for SiriEnvironment();
  v0 = static SiriEnvironment.default.getter();
  v1 = type metadata accessor for CurrentProcess();
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v0 + 248);
  v3 = lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess, (uint64_t)&protocol conformance descriptor for CurrentProcess);
  v2(v1, v1, v3);
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_9_0();
}

id CurrentProcess.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CurrentProcess.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CurrentProcess.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CurrentProcess();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for MockableEnvironmentProvider.mock.getter in conformance CurrentProcess()
{
  uint64_t *v0;

  return OUTLINED_FUNCTION_2_14(*v0);
}

uint64_t protocol witness for MockableEnvironmentProvider.mock.setter in conformance CurrentProcess()
{
  return OUTLINED_FUNCTION_1_18(*MEMORY[0x1E0DEEDD8]);
}

void (*protocol witness for MockableEnvironmentProvider.mock.modify in conformance CurrentProcess(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))();
  return protocol witness for MockableEnvironmentProvider.mock.modify in conformance NetworkAvailability;
}

uint64_t protocol witness for SiriEnvironmentProvider.init(storage:) in conformance CurrentProcess()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CurrentProcess@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CurrentProcess();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t associated type witness table accessor for MockableEnvironmentProvider.Provider : SiriEnvironmentProvider in CurrentProcess()
{
  return lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess, (uint64_t)&protocol conformance descriptor for CurrentProcess);
}

uint64_t instantiation function for generic protocol witness table for CurrentProcess(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess, (uint64_t)&protocol conformance descriptor for CurrentProcess);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess, (uint64_t)&protocol conformance descriptor for CurrentProcess);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CurrentProcess and conformance CurrentProcess(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CurrentProcess();
    result = MEMORY[0x1C3BCEDD8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1C2F58538(uint64_t *a1@<X8>)
{
  *a1 = SiriEnvironment.currentProcess.getter();
  OUTLINED_FUNCTION_31();
}

void sub_1C2F58560(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x60))();
  OUTLINED_FUNCTION_31();
}

uint64_t method lookup function for CurrentProcess()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CurrentProcess.mock.getter()
{
  uint64_t *v0;

  return OUTLINED_FUNCTION_2_14(*v0);
}

uint64_t dispatch thunk of CurrentProcess.mock.setter()
{
  return OUTLINED_FUNCTION_1_18(*MEMORY[0x1E0DEEDD8]);
}

uint64_t dispatch thunk of CurrentProcess.mock.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CurrentProcess.idleTracker.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CurrentProcess.idleTracker.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CurrentProcess.idleTracker.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CurrentProcess.$idleTracker.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CurrentProcess.$idleTracker.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of CurrentProcess.$idleTracker.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CurrentProcess.__allocating_init(storage:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

void OUTLINED_FUNCTION_0_12(id a1)
{

}

uint64_t OUTLINED_FUNCTION_1_18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(void))((a1 & v1) + 0x68))();
}

uint64_t OUTLINED_FUNCTION_2_14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(void))((v1 & a1) + 0x60))();
}

uint64_t OUTLINED_FUNCTION_3_12()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_6_11(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v2, v1);
}

uint64_t OUTLINED_FUNCTION_8_11()
{
  uint64_t v0;

  return v0;
}

uint64_t static Transformation.defaultLengthLimit.getter()
{
  return 5;
}

uint64_t static Transformation.canTransform(from:to:lengthLimit:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, _QWORD *, uint64_t);
  char v10;
  _QWORD v12[2];
  _QWORD v13[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = a2[1];
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v8 = *((_QWORD *)static TransformationPluginLoader.sharedInstance + 4);
  v13[0] = v4;
  v13[1] = v5;
  v12[0] = v6;
  v12[1] = v7;
  v9 = *(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)v8 + 200);
  OUTLINED_FUNCTION_15_2();
  v10 = v9(v13, v12, a3);
  swift_release();
  return v10 & 1;
}

uint64_t static Transformation.canTransform(from:to:lengthLimit:)(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, _QWORD *, uint64_t);
  char v10;
  _QWORD v12[2];
  _QWORD v13[7];

  v4 = *a2;
  v5 = a2[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  swift_getDynamicType();
  TypeInformation.init(for:)((uint64_t)v13);
  v6 = v13[5];
  v7 = v13[6];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v8 = *((_QWORD *)static TransformationPluginLoader.sharedInstance + 4);
  v13[0] = v6;
  v13[1] = v7;
  v12[0] = v4;
  v12[1] = v5;
  v9 = *(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)v8 + 200);
  OUTLINED_FUNCTION_15_2();
  v10 = v9(v13, v12, a3);
  swift_bridgeObjectRelease();
  swift_release();
  return v10 & 1;
}

uint64_t static Transformation.transform<A>(_:to:lengthLimit:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6[2];

  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  return static Transformation.transform<A>(_:to:lengthLimit:tryAllPaths:)(a1, v6, a3, 0, a4);
}

uint64_t static Transformation.transform<A>(_:to:lengthLimit:tryAllPaths:)(uint64_t a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t);
  _QWORD v14[2];

  v9 = *a2;
  v10 = a2[1];
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v11 = *((_QWORD *)static TransformationPluginLoader.sharedInstance + 4);
  v14[0] = v9;
  v14[1] = v10;
  v12 = *(void (**)(uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 208);
  swift_retain();
  v12(a1, v14, a3, a4 & 1, a5);
  return swift_release();
}

uint64_t static Transformation.transform<A, B>(_:to:lengthLimit:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[8];
  uint64_t v12;

  v7 = *a1;
  v8 = a1[1];
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = v7;
  v11[5] = v8;
  v11[6] = a2;
  type metadata accessor for Optional();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(uint64_t, uint64_t))partial apply for closure #1 in static Transformation.transform<A, B>(_:to:lengthLimit:), (uint64_t)v11, v9, a4, (uint64_t)&v12, a5);
}

uint64_t closure #1 in static Transformation.transform<A, B>(_:to:lengthLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t *boxed_opaque_existential_0;
  uint64_t result;
  uint64_t v17[2];
  uint64_t v18[4];

  v18[3] = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_0, a1, a5);
  v17[0] = a2;
  v17[1] = a3;
  static Transformation.transform<A>(_:to:lengthLimit:tryAllPaths:)((uint64_t)v18, v17, a4, 0, a6);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  if (v7)
    *a7 = v7;
  return result;
}

uint64_t static Transformation.transform<A>(_:to:lengthLimit:queue:completion:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];
  _OWORD v33[2];

  v30 = a4;
  v13 = type metadata accessor for DispatchWorkItemFlags();
  v29 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS();
  v27 = *(_QWORD *)(v17 - 8);
  v28 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a2;
  v22 = a2[1];
  outlined init with copy of Any(a1, (uint64_t)v33);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = a7;
  outlined init with take of Any(v33, (_OWORD *)(v23 + 24));
  *(_QWORD *)(v23 + 56) = v21;
  *(_QWORD *)(v23 + 64) = v22;
  *(_QWORD *)(v23 + 72) = a3;
  *(_QWORD *)(v23 + 80) = a5;
  *(_QWORD *)(v23 + 88) = a6;
  aBlock[4] = partial apply for closure #1 in static Transformation.transform<A>(_:to:lengthLimit:queue:completion:);
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_0;
  v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_15_2();
  static DispatchQoS.unspecified.getter();
  v31 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1C3BCE1B4](0, v20, v16, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v20, v28);
  return swift_release();
}

uint64_t closure #1 in static Transformation.transform<A>(_:to:lengthLimit:queue:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *), uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD v23[2];
  void (*v24)(char *);
  uint64_t v25[2];

  v23[1] = a6;
  v24 = a5;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v12 = type metadata accessor for Result();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)v23 - v16;
  v18 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](v15, v19);
  v21 = (char *)v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = a2;
  v25[1] = a3;
  static Transformation.transform<A>(_:to:lengthLimit:)(a1, v25, a4, a7);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v17, v21, a7);
  swift_storeEnumTagMultiPayload();
  v24(v17);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, a7);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = OUTLINED_FUNCTION_15_2();
  v1(v2);
  return swift_release();
}

uint64_t static Transformation.transformer<A, B>(from:to:lengthLimit:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(__int128 *, _OWORD *, uint64_t, _QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  __int128 v22;
  uint64_t v23;
  _BYTE v24[40];

  v10 = *a1;
  v11 = a1[1];
  v12 = *a2;
  v13 = a2[1];
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v14 = *((_QWORD *)static TransformationPluginLoader.sharedInstance + 4);
  *(_QWORD *)&v22 = v10;
  *((_QWORD *)&v22 + 1) = v11;
  *(_QWORD *)&v21[0] = v12;
  *((_QWORD *)&v21[0] + 1) = v13;
  v15 = *(uint64_t (**)(__int128 *, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v14 + 224);
  swift_retain();
  v16 = v15(&v22, v21, a3, 0);
  swift_release();
  specialized Collection.first.getter(v16, (uint64_t)&v22);
  swift_bridgeObjectRelease();
  if (v23)
  {
    outlined init with take of Transforming(&v22, (uint64_t)v24);
    outlined init with copy of Transforming((uint64_t)v24, (uint64_t)&v22);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = a4;
    *(_QWORD *)(v17 + 24) = a5;
    outlined init with take of Transforming(&v22, v17 + 32);
    Transformer.init(transform:)((uint64_t)partial apply for closure #1 in static Transformation.transformer<A, B>(from:to:lengthLimit:), v17, a4, a5, v21);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    v19 = v21[0];
    v20 = v21[1];
  }
  else
  {
    result = outlined destroy of Transforming?((uint64_t)&v22);
    v19 = 0uLL;
    v20 = 0uLL;
  }
  *a6 = v19;
  a6[1] = v20;
  return result;
}

uint64_t closure #1 in static Transformation.transformer<A, B>(from:to:lengthLimit:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_0;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[4];
  _QWORD v24[4];
  uint64_t v25;

  v22 = a5;
  v25 = a4;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v21 - v12;
  v15 = a2[3];
  v14 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v15);
  v23[3] = a3;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_0, a1, a3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))(v14 + 24))(v24, v23, v15, v14);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  if (!v5)
  {
    v18 = v22;
    outlined init with copy of Any((uint64_t)v24, (uint64_t)v23);
    v19 = v25;
    if ((swift_dynamicCast() & 1) != 0)
    {
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v19);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, v13, v19);
    }
    else
    {
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, v19);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
      swift_allocError();
      *(_QWORD *)v20 = 0xD000000000000026;
      *(_QWORD *)(v20 + 8) = 0x80000001C2F85370;
      *(_BYTE *)(v20 + 16) = 0;
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    }
  }
  return result;
}

uint64_t static Transformation.resolve(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD *);
  _QWORD v7[3];

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v4 = *((_QWORD *)static TransformationPluginLoader.sharedInstance + 4);
  v7[0] = v1;
  v7[1] = v2;
  v7[2] = v3;
  v5 = *(void (**)(_QWORD *))(*(_QWORD *)v4 + 216);
  OUTLINED_FUNCTION_15_2();
  v5(v7);
  return swift_release();
}

uint64_t static Transformation.register(transformation:)(uint64_t a1)
{
  void (*v2)(uint64_t);

  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v2 = *(void (**)(uint64_t))(**((_QWORD **)static TransformationPluginLoader.sharedInstance + 4) + 184);
  OUTLINED_FUNCTION_15_2();
  v2(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in static Transformation.transform<A, B>(_:to:lengthLimit:)(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;

  return closure #1 in static Transformation.transform<A, B>(_:to:lengthLimit:)(a1, v2[4], v2[5], v2[6], v2[2], v2[3], a2);
}

uint64_t sub_1C2F59320()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Transformation.transform<A>(_:to:lengthLimit:queue:completion:)()
{
  uint64_t v0;

  return closure #1 in static Transformation.transform<A>(_:to:lengthLimit:queue:completion:)(v0 + 24, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(void (**)(char *))(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t outlined destroy of Transforming?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transforming?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C2F59448()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Transformation.transformer<A, B>(from:to:lengthLimit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in static Transformation.transformer<A, B>(from:to:lengthLimit:)(a1, v2 + 4, v2[2], v2[3], a2);
}

ValueMetadata *type metadata accessor for Transformation()
{
  return &type metadata for Transformation;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities11AudioSourceVG_SSs5NeverOTg504_s13d11Utilities11fG119V11knownValues33_0AF68ACE543613C0C5793AD85E701BA5LLShySSGvpZfiSSACcfu_33_8a1a369d30fae838e599eb067dc78b95ACSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      v4 += 2;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  char v10;

  if (*(_QWORD *)(a3 + 16))
  {
    OUTLINED_FUNCTION_6_12();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_9_12();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_8_2();
    OUTLINED_FUNCTION_11_0();
    if ((v4 & 1) != 0)
    {
      OUTLINED_FUNCTION_5_13();
      v6 = v6 && v5 == v3;
      if (!v6 && (OUTLINED_FUNCTION_3_13() & 1) == 0)
      {
        OUTLINED_FUNCTION_1_19();
        if ((v7 & 1) != 0)
        {
          do
          {
            OUTLINED_FUNCTION_5_13();
            if (v6 && v8 == v3)
              break;
            if ((OUTLINED_FUNCTION_3_13() & 1) != 0)
              break;
            OUTLINED_FUNCTION_1_19();
          }
          while ((v10 & 1) != 0);
        }
      }
    }
  }
  OUTLINED_FUNCTION_8_12();
}

{
  uint64_t v3;
  char v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  char v10;

  if (*(_QWORD *)(a3 + 16))
  {
    OUTLINED_FUNCTION_6_12();
    OUTLINED_FUNCTION_9_12();
    OUTLINED_FUNCTION_8_2();
    OUTLINED_FUNCTION_11_0();
    if ((v4 & 1) != 0)
    {
      OUTLINED_FUNCTION_5_13();
      v6 = v6 && v5 == v3;
      if (!v6 && (OUTLINED_FUNCTION_3_13() & 1) == 0)
      {
        OUTLINED_FUNCTION_1_19();
        if ((v7 & 1) != 0)
        {
          do
          {
            OUTLINED_FUNCTION_5_13();
            if (v6 && v8 == v3)
              break;
            if ((OUTLINED_FUNCTION_3_13() & 1) != 0)
              break;
            OUTLINED_FUNCTION_1_19();
          }
          while ((v10 & 1) != 0);
        }
      }
    }
  }
  OUTLINED_FUNCTION_8_12();
}

uint64_t specialized Set.contains(_:)(unsigned __int8 *a1, uint64_t a2)
{
  Swift::UInt v4;
  Swift::Int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  __int128 v21;
  _BYTE v22[40];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)();
  v4 = *a1;
  v21 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)v22 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v22[16] = *(_OWORD *)(a1 + 40);
  *(_QWORD *)&v22[32] = *((_QWORD *)a1 + 7);
  Hasher._combine(_:)(v4);
  v26 = *(_QWORD *)v22;
  v24 = *(_OWORD *)&v22[8];
  v25 = v21;
  v23 = *(_OWORD *)&v22[24];
  outlined retain of TransformationCapability((uint64_t)a1);
  outlined retain of TypeIdentifier((uint64_t)&v25);
  OUTLINED_FUNCTION_12_11();
  Hasher._combine(_:)(*(Swift::UInt *)v22);
  outlined release of TypeIdentifier((uint64_t)&v25);
  outlined retain of TypeIdentifier((uint64_t)&v24);
  OUTLINED_FUNCTION_12_11();
  outlined release of TypeIdentifier((uint64_t)&v24);
  outlined retain of TypeIdentifier((uint64_t)&v23);
  String.hash(into:)();
  outlined release of TypeIdentifier((uint64_t)&v23);
  outlined release of TransformationCapability((uint64_t)a1);
  v5 = Hasher._finalize()();
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = v5 & ~v6;
  v8 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v9 = ~v6;
  v10 = *(_QWORD *)(a2 + 48);
  while (1)
  {
    v11 = (_QWORD *)(v10 + (v7 << 6));
    if ((_DWORD)v4 == *(unsigned __int8 *)v11)
    {
      v12 = v11[3];
      v13 = v11[4];
      v15 = v11[5];
      v14 = v11[6];
      v16 = v11[7];
      v17 = v11[1] == (_QWORD)v21 && v11[2] == *((_QWORD *)&v21 + 1);
      if ((v17 || (OUTLINED_FUNCTION_3_0() & 1) != 0) && v12 == *(_QWORD *)v22)
      {
        v18 = v13 == *(_QWORD *)&v22[8] && v15 == *(_QWORD *)&v22[16];
        if (v18 || (OUTLINED_FUNCTION_3_0() & 1) != 0)
        {
          v19 = v14 == *(_QWORD *)&v22[24] && v16 == *(_QWORD *)&v22[32];
          if (v19 || (OUTLINED_FUNCTION_3_0() & 1) != 0)
            break;
        }
      }
    }
    v7 = (v7 + 1) & v9;
    if (((*(_QWORD *)(v8 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t one-time initialization function for lineIn()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.lineIn = result;
  unk_1ED4F6CF0 = v1;
  return result;
}

uint64_t static AudioSource.lineIn.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for lineIn, &static AudioSource.lineIn, a1);
}

uint64_t one-time initialization function for builtInMic()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.builtInMic = result;
  *(_QWORD *)algn_1ED4F6C58 = v1;
  return result;
}

uint64_t static AudioSource.builtInMic.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for builtInMic, &static AudioSource.builtInMic, a1);
}

uint64_t one-time initialization function for wiredHeadsetMic()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.wiredHeadsetMic = result;
  unk_1ED4F6CA0 = v1;
  return result;
}

uint64_t static AudioSource.wiredHeadsetMic.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for wiredHeadsetMic, &static AudioSource.wiredHeadsetMic, a1);
}

uint64_t one-time initialization function for bluetoothHandsFreeDevice()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.bluetoothHandsFreeDevice = result;
  *(_QWORD *)algn_1ED4F6CD8 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.bluetoothHandsFreeDevice = result;
  unk_1ED4F6F40 = v1;
  return result;
}

uint64_t static AudioSource.bluetoothHandsFreeDevice.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for bluetoothHandsFreeDevice, &static AudioSource.bluetoothHandsFreeDevice, a1);
}

uint64_t one-time initialization function for usbAudio()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.usbAudio = result;
  unk_1ED4F6C40 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.usbAudio = result;
  unk_1ED4F6E90 = v1;
  return result;
}

uint64_t static AudioSource.usbAudio.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for usbAudio, &static AudioSource.usbAudio, a1);
}

uint64_t one-time initialization function for carAudio()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.carAudio = result;
  unk_1ED4F6C20 = v1;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.carAudio = result;
  *(_QWORD *)algn_1ED4F6E78 = v1;
  return result;
}

uint64_t static AudioSource.carAudio.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for carAudio, &static AudioSource.carAudio, a1);
}

uint64_t one-time initialization function for bluetoothDoAPDevice()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.bluetoothDoAPDevice = result;
  unk_1ED4F6CB8 = v1;
  return result;
}

uint64_t static AudioSource.bluetoothDoAPDevice.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for bluetoothDoAPDevice, &static AudioSource.bluetoothDoAPDevice, a1);
}

uint64_t one-time initialization function for carJarvisDevice()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioSource.carJarvisDevice = result;
  *(_QWORD *)algn_1ED4F6C88 = v1;
  return result;
}

uint64_t static AudioSource.carJarvisDevice.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for carJarvisDevice, &static AudioSource.carJarvisDevice, a1);
}

uint64_t static AudioSource.lineIn.getter@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;

  if (*a1 != -1)
    swift_once();
  v7 = *a3;
  *a4 = *a2;
  a4[1] = v7;
  return swift_bridgeObjectRetain();
}

void static AudioSource.unknown.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6E776F6E6B6E55;
  a1[1] = 0xE700000000000000;
}

uint64_t one-time initialization function for knownValues()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AudioSource>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2F82F10;
  if (one-time initialization token for lineIn != -1)
    swift_once();
  v1 = unk_1ED4F6CF0;
  *(_QWORD *)(inited + 32) = static AudioSource.lineIn;
  *(_QWORD *)(inited + 40) = v1;
  v2 = one-time initialization token for builtInMic;
  swift_bridgeObjectRetain();
  if (v2 != -1)
    swift_once();
  v3 = *(_QWORD *)algn_1ED4F6C58;
  *(_QWORD *)(inited + 48) = static AudioSource.builtInMic;
  *(_QWORD *)(inited + 56) = v3;
  v4 = one-time initialization token for wiredHeadsetMic;
  swift_bridgeObjectRetain();
  if (v4 != -1)
    swift_once();
  v5 = unk_1ED4F6CA0;
  *(_QWORD *)(inited + 64) = static AudioSource.wiredHeadsetMic;
  *(_QWORD *)(inited + 72) = v5;
  v6 = one-time initialization token for bluetoothHandsFreeDevice;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  v7 = *(_QWORD *)algn_1ED4F6CD8;
  *(_QWORD *)(inited + 80) = static AudioSource.bluetoothHandsFreeDevice;
  *(_QWORD *)(inited + 88) = v7;
  v8 = one-time initialization token for usbAudio;
  swift_bridgeObjectRetain();
  if (v8 != -1)
    swift_once();
  v9 = unk_1ED4F6C40;
  *(_QWORD *)(inited + 96) = static AudioSource.usbAudio;
  *(_QWORD *)(inited + 104) = v9;
  v10 = one-time initialization token for carAudio;
  swift_bridgeObjectRetain();
  if (v10 != -1)
    swift_once();
  v11 = unk_1ED4F6C20;
  *(_QWORD *)(inited + 112) = static AudioSource.carAudio;
  *(_QWORD *)(inited + 120) = v11;
  v12 = one-time initialization token for bluetoothDoAPDevice;
  swift_bridgeObjectRetain();
  if (v12 != -1)
    swift_once();
  v13 = unk_1ED4F6CB8;
  *(_QWORD *)(inited + 128) = static AudioSource.bluetoothDoAPDevice;
  *(_QWORD *)(inited + 136) = v13;
  v14 = one-time initialization token for carJarvisDevice;
  swift_bridgeObjectRetain();
  if (v14 != -1)
    swift_once();
  v15 = *(_QWORD *)algn_1ED4F6C88;
  *(_QWORD *)(inited + 144) = static AudioSource.carJarvisDevice;
  *(_QWORD *)(inited + 152) = v15;
  *(_QWORD *)(inited + 160) = 0x6E776F6E6B6E55;
  *(_QWORD *)(inited + 168) = 0xE700000000000000;
  swift_bridgeObjectRetain();
  v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities11AudioSourceVG_SSs5NeverOTg504_s13d11Utilities11fG119V11knownValues33_0AF68ACE543613C0C5793AD85E701BA5LLShySSGvpZfiSSACcfu_33_8a1a369d30fae838e599eb067dc78b95ACSSTf3nnnpk_nTf1cn_n(inited);
  swift_bridgeObjectRelease();
  result = specialized Set.init<A>(_:)(v16);
  static AudioSource.knownValues = result;
  return result;
}

{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ResponseMode>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2F831E0;
  if (one-time initialization token for displayOnly != -1)
    swift_once();
  v1 = *(_QWORD *)algn_1ED4F6D70;
  *(_QWORD *)(inited + 32) = static ResponseMode.displayOnly;
  *(_QWORD *)(inited + 40) = v1;
  v2 = one-time initialization token for displayForward;
  swift_bridgeObjectRetain();
  if (v2 != -1)
    swift_once();
  v3 = unk_1ED4F6DB0;
  *(_QWORD *)(inited + 48) = static ResponseMode.displayForward;
  *(_QWORD *)(inited + 56) = v3;
  v4 = one-time initialization token for voiceForward;
  swift_bridgeObjectRetain();
  if (v4 != -1)
    swift_once();
  v5 = *(_QWORD *)algn_1ED4F6D98;
  *(_QWORD *)(inited + 64) = static ResponseMode.voiceForward;
  *(_QWORD *)(inited + 72) = v5;
  v6 = one-time initialization token for voiceOnly;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  v7 = unk_1ED4F6DC8;
  *(_QWORD *)(inited + 80) = static ResponseMode.voiceOnly;
  *(_QWORD *)(inited + 88) = v7;
  swift_bridgeObjectRetain();
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities11AudioSourceVG_SSs5NeverOTg504_s13d11Utilities11fG119V11knownValues33_0AF68ACE543613C0C5793AD85E701BA5LLShySSGvpZfiSSACcfu_33_8a1a369d30fae838e599eb067dc78b95ACSSTf3nnnpk_nTf1cn_n(inited);
  swift_bridgeObjectRelease();
  result = specialized Set.init<A>(_:)(v8);
  static ResponseMode.knownValues = result;
  return result;
}

{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AudioDestination>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2F84180;
  if (one-time initialization token for builtInSpeaker != -1)
    swift_once();
  v1 = unk_1ED4F6ED8;
  *(_QWORD *)(inited + 32) = static AudioDestination.builtInSpeaker;
  *(_QWORD *)(inited + 40) = v1;
  v2 = one-time initialization token for builtInReceiver;
  swift_bridgeObjectRetain();
  if (v2 != -1)
    swift_once();
  v3 = *(_QWORD *)algn_1ED4F6EF8;
  *(_QWORD *)(inited + 48) = static AudioDestination.builtInReceiver;
  *(_QWORD *)(inited + 56) = v3;
  v4 = one-time initialization token for headphones;
  swift_bridgeObjectRetain();
  if (v4 != -1)
    swift_once();
  v5 = unk_1ED4F6EA8;
  *(_QWORD *)(inited + 64) = static AudioDestination.headphones;
  *(_QWORD *)(inited + 72) = v5;
  v6 = one-time initialization token for bluetoothHandsFreeDevice;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  v7 = unk_1ED4F6F40;
  *(_QWORD *)(inited + 80) = static AudioDestination.bluetoothHandsFreeDevice;
  *(_QWORD *)(inited + 88) = v7;
  v8 = one-time initialization token for bluetoothLEDevice;
  swift_bridgeObjectRetain();
  if (v8 != -1)
    swift_once();
  v9 = unk_1ED4F6F10;
  *(_QWORD *)(inited + 96) = static AudioDestination.bluetoothLEDevice;
  *(_QWORD *)(inited + 104) = v9;
  v10 = one-time initialization token for bluetoothA2DPDevice;
  swift_bridgeObjectRetain();
  if (v10 != -1)
    swift_once();
  v11 = *(_QWORD *)algn_1ED4F6F28;
  *(_QWORD *)(inited + 112) = static AudioDestination.bluetoothA2DPDevice;
  *(_QWORD *)(inited + 120) = v11;
  v12 = one-time initialization token for usbAudio;
  swift_bridgeObjectRetain();
  if (v12 != -1)
    swift_once();
  v13 = unk_1ED4F6E90;
  *(_QWORD *)(inited + 128) = static AudioDestination.usbAudio;
  *(_QWORD *)(inited + 136) = v13;
  v14 = one-time initialization token for carAudio;
  swift_bridgeObjectRetain();
  if (v14 != -1)
    swift_once();
  v15 = *(_QWORD *)algn_1ED4F6E78;
  *(_QWORD *)(inited + 144) = static AudioDestination.carAudio;
  *(_QWORD *)(inited + 152) = v15;
  v16 = one-time initialization token for hdmi;
  swift_bridgeObjectRetain();
  if (v16 != -1)
    swift_once();
  v17 = unk_1ED4F6F60;
  *(_QWORD *)(inited + 160) = static AudioDestination.hdmi;
  *(_QWORD *)(inited + 168) = v17;
  v18 = one-time initialization token for other;
  swift_bridgeObjectRetain();
  if (v18 != -1)
    swift_once();
  v19 = *(_QWORD *)algn_1ED4F6F78;
  *(_QWORD *)(inited + 176) = static AudioDestination.other;
  *(_QWORD *)(inited + 184) = v19;
  swift_bridgeObjectRetain();
  v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13SiriUtilities11AudioSourceVG_SSs5NeverOTg504_s13d11Utilities11fG119V11knownValues33_0AF68ACE543613C0C5793AD85E701BA5LLShySSGvpZfiSSACcfu_33_8a1a369d30fae838e599eb067dc78b95ACSSTf3nnnpk_nTf1cn_n(inited);
  swift_bridgeObjectRelease();
  result = specialized Set.init<A>(_:)(v20);
  static AudioDestination.knownValues = result;
  return result;
}

uint64_t AudioSource.aceValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  OUTLINED_FUNCTION_61_0();
  return v1;
}

SiriUtilities::AudioSource_optional __swiftcall AudioSource.init(aceValue:)(SiriUtilities::AudioSource_optional aceValue)
{
  uint64_t *v1;
  uint64_t *v2;
  void *object;
  uint64_t countAndFlagsBits;

  v2 = v1;
  if (aceValue.value.aceValue._object)
  {
    object = aceValue.value.aceValue._object;
    countAndFlagsBits = aceValue.value.aceValue._countAndFlagsBits;
    if (one-time initialization token for knownValues != -1)
      swift_once();
    specialized Set.contains(_:)(countAndFlagsBits, (uint64_t)object, static AudioSource.knownValues);
    if ((aceValue.value.aceValue._countAndFlagsBits & 1) != 0)
    {
      *v2 = countAndFlagsBits;
      v2[1] = (uint64_t)object;
      return aceValue;
    }
    aceValue.value.aceValue._countAndFlagsBits = swift_bridgeObjectRelease();
  }
  *v2 = 0;
  v2[1] = 0;
  return aceValue;
}

void AudioSource.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  v1 = dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  OUTLINED_FUNCTION_12_0(v1);
  OUTLINED_FUNCTION_3_1();
}

void AudioSource.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_14_0();
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    OUTLINED_FUNCTION_14_0();
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v7 = v6;
    OUTLINED_FUNCTION_12_0(v5);
    *a2 = v5;
    a2[1] = v7;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  OUTLINED_FUNCTION_3_1();
}

uint64_t static AudioSource.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t AudioSource.hash(into:)()
{
  OUTLINED_FUNCTION_61_0();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int AudioSource.hashValue.getter()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_61_0();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_8_2();
}

unint64_t lazy protocol witness table accessor for type AudioSource and conformance AudioSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioSource and conformance AudioSource;
  if (!lazy protocol witness table cache variable for type AudioSource and conformance AudioSource)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for AudioSource, &type metadata for AudioSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioSource and conformance AudioSource);
  }
  return result;
}

void protocol witness for Decodable.init(from:) in conformance AudioSource(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  AudioSource.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance AudioSource(_QWORD *a1)
{
  AudioSource.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for AudioSource()
{
  return &type metadata for AudioSource;
}

uint64_t OUTLINED_FUNCTION_0_13@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  return static AudioSource.lineIn.getter(a1, a2, a2 + 1, a3);
}

uint64_t OUTLINED_FUNCTION_3_13()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_5_13()
{
  uint64_t v0;
  uint64_t v1;

  return *(_QWORD *)(v0 + 16 * v1);
}

uint64_t OUTLINED_FUNCTION_6_12()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_9_12()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_12_11()
{
  return String.hash(into:)();
}

char **SiriUtilitiesSignpost.loadPlugin.unsafeMutableAddressor()
{
  return &static SiriUtilitiesSignpost.loadPlugin;
}

void specialized static Logger.withSignpost<A>(name:log:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  id v9;

  v7 = type metadata accessor for OSSignpostID();
  MEMORY[0x1E0C80A78](v7, v8);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v9 = a4;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    OUTLINED_FUNCTION_0_14();
    OUTLINED_FUNCTION_8_13();
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_0_14();
    OUTLINED_FUNCTION_7_11();
  }
  else
  {
    OUTLINED_FUNCTION_8_13();
  }

}

uint64_t static Logger.withSignpost<A>(name:log:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v6 = type metadata accessor for OSSignpostID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  OUTLINED_FUNCTION_17_6();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    return OUTLINED_FUNCTION_6_13();
  v9 = a4;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_2_15();
  OUTLINED_FUNCTION_6_13();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_2_15();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
}

void static SiriUtilitiesCrashHelper.logAndCrash(_:file:line:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (one-time initialization token for logger != -1)
    swift_once();
  v4 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.logger);
  swift_bridgeObjectRetain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315650;
    v8 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F2D000, v5, v6, "FatalError at %s:%lu - %s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_1();
  }

  swift_bridgeObjectRelease_n();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Logger.Subsystem.init(rawValue:)(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  uint64_t v2;
  void *object;
  Swift::String v4;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Logger.Subsystem.init(rawValue:), v4);
  OUTLINED_FUNCTION_15_8();
  *a2 = v2 != 0;
  OUTLINED_FUNCTION_9_0();
}

unint64_t Logger.Subsystem.rawValue.getter()
{
  return OUTLINED_FUNCTION_9_13();
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance Logger.Subsystem(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Logger.Subsystem.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Logger.Subsystem(_QWORD *a1@<X8>)
{
  uint64_t v2;

  Logger.Subsystem.rawValue.getter();
  *a1 = 0xD000000000000016;
  a1[1] = v2;
  OUTLINED_FUNCTION_31();
}

SiriUtilities::Logger::Category_optional __swiftcall Logger.Category.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  unint64_t v2;
  void *object;
  Swift::String v4;
  char *v5;
  char v6;
  SiriUtilities::Logger::Category_optional result;

  object = rawValue._object;
  v4._countAndFlagsBits = rawValue._countAndFlagsBits;
  v5 = v1;
  v4._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Logger.Category.init(rawValue:), v4);
  OUTLINED_FUNCTION_15_8();
  v6 = 3;
  if (v2 < 3)
    v6 = v2;
  *v5 = v6;
  OUTLINED_FUNCTION_9_0();
  return result;
}

uint64_t Logger.Category.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F4C6E6967756C50;
  if (*v0 != 1)
    v1 = 0x6D6E6F7269766E45;
  if (*v0)
    return v1;
  else
    return 0x656974696C697455;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Logger.Category(unsigned __int8 *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance Logger.Category()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Logger.Category(uint64_t a1)
{
  char *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Logger.Category()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::Logger::Category_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Logger.Category(Swift::String *a1)
{
  return Logger.Category.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Logger.Category(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = Logger.Category.rawValue.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_31();
}

void one-time initialization function for log()
{
  type metadata accessor for OS_os_log();
  OUTLINED_FUNCTION_9_13();
  static Logger.log = OS_os_log.init(subsystem:category:)();
  OUTLINED_FUNCTION_31();
}

id static Logger.log.getter()
{
  return static Logger.log.getter(&one-time initialization token for log, (id *)&static Logger.log);
}

uint64_t one-time initialization function for logger(uint64_t a1)
{
  return one-time initialization function for logger(a1, static Logger.logger, &one-time initialization token for log, (id *)&static Logger.log);
}

uint64_t static Logger.logger.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.logger.getter(&one-time initialization token for logger, (uint64_t)static Logger.logger, a1);
}

void one-time initialization function for pluginLoaderLog()
{
  type metadata accessor for OS_os_log();
  OUTLINED_FUNCTION_9_13();
  static Logger.pluginLoaderLog = OS_os_log.init(subsystem:category:)();
  OUTLINED_FUNCTION_31();
}

id static Logger.pluginLoaderLog.getter()
{
  return static Logger.log.getter(&one-time initialization token for pluginLoaderLog, (id *)&static Logger.pluginLoaderLog);
}

uint64_t one-time initialization function for loader(uint64_t a1)
{
  return one-time initialization function for logger(a1, static Logger.loader, &one-time initialization token for pluginLoaderLog, (id *)&static Logger.pluginLoaderLog);
}

uint64_t static Logger.loader.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.logger.getter(&one-time initialization token for loader, (uint64_t)static Logger.loader, a1);
}

uint64_t static Logger.logger.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = OUTLINED_FUNCTION_13();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t one-time initialization function for environmentLog()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static Logger.environmentLog = result;
  return result;
}

id static Logger.environmentLog.getter()
{
  return static Logger.log.getter(&one-time initialization token for environmentLog, (id *)&static Logger.environmentLog);
}

id static Logger.log.getter(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t one-time initialization function for environment(uint64_t a1)
{
  return one-time initialization function for logger(a1, static Logger.environment, &one-time initialization token for environmentLog, (id *)&static Logger.environmentLog);
}

uint64_t one-time initialization function for logger(uint64_t a1, uint64_t *a2, _QWORD *a3, id *a4)
{
  uint64_t v7;
  id v8;

  v7 = OUTLINED_FUNCTION_13();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  if (*a3 != -1)
    swift_once();
  v8 = *a4;
  return Logger.init(_:)();
}

uint64_t static Logger.environment.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.logger.getter(&one-time initialization token for environment, (uint64_t)static Logger.environment, a1);
}

uint64_t static Logger.makeSignpostID(log:)(void *a1)
{
  id v1;

  v1 = a1;
  return OSSignpostID.init(log:)();
}

uint64_t static Logger.begin(_:log:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4;

  v4 = a4;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  return OUTLINED_FUNCTION_1_20();
}

uint64_t static Logger.begin(_:_:log:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static Logger.begin(_:_:log:)(a1, a2, a3, a4, a5, (void (*)(void))MEMORY[0x1E0DF22A0]);
}

uint64_t static Logger.event(_:log:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for OSSignpostID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  OUTLINED_FUNCTION_17_6();
  static os_signpost_type_t.event.getter();
  static OSSignpostID.exclusive.getter();
  OUTLINED_FUNCTION_14_11();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t static Logger.end(_:_:log:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static Logger.begin(_:_:log:)(a1, a2, a3, a4, a5, (void (*)(void))MEMORY[0x1E0DF2298]);
}

uint64_t static Logger.begin(_:_:log:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  a6();
  OUTLINED_FUNCTION_14_11();
  return OUTLINED_FUNCTION_1_20();
}

char **SiriUtilitiesSignpost.registerTransformations.unsafeMutableAddressor()
{
  return &static SiriUtilitiesSignpost.registerTransformations;
}

void static SiriUtilitiesSignpost.registerTransformations.getter()
{
  OUTLINED_FUNCTION_5_14();
}

void static SiriUtilitiesSignpost.loadPlugin.getter()
{
  OUTLINED_FUNCTION_5_14();
}

char **SiriUtilitiesSignpost.readPluginCache.unsafeMutableAddressor()
{
  return &static SiriUtilitiesSignpost.readPluginCache;
}

void static SiriUtilitiesSignpost.readPluginCache.getter()
{
  OUTLINED_FUNCTION_5_14();
}

char **SiriUtilitiesSignpost.writePluginCache.unsafeMutableAddressor()
{
  return &static SiriUtilitiesSignpost.writePluginCache;
}

void static SiriUtilitiesSignpost.writePluginCache.getter()
{
  OUTLINED_FUNCTION_5_14();
}

char **SiriUtilitiesSignpost.findPlugins.unsafeMutableAddressor()
{
  return &static SiriUtilitiesSignpost.findPlugins;
}

void static SiriUtilitiesSignpost.findPlugins.getter()
{
  OUTLINED_FUNCTION_5_14();
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void thunk for @escaping @callee_guaranteed () -> (@unowned UInt)(uint64_t (*a1)(void)@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1();
  OUTLINED_FUNCTION_31();
}

unint64_t lazy protocol witness table accessor for type Logger.Subsystem and conformance Logger.Subsystem()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Logger.Subsystem and conformance Logger.Subsystem;
  if (!lazy protocol witness table cache variable for type Logger.Subsystem and conformance Logger.Subsystem)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for Logger.Subsystem, &type metadata for Logger.Subsystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Logger.Subsystem and conformance Logger.Subsystem);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Logger.Category and conformance Logger.Category()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Logger.Category and conformance Logger.Category;
  if (!lazy protocol witness table cache variable for type Logger.Category and conformance Logger.Category)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for Logger.Category, &type metadata for Logger.Category);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Logger.Category and conformance Logger.Category);
  }
  return result;
}

void type metadata accessor for Logger()
{
  OUTLINED_FUNCTION_33_2();
}

uint64_t storeEnumTagSinglePayload for Logger.Subsystem(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C2F5ADBC + 4 * asc_1C2F83000[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C2F5ADDC + 4 * byte_1C2F83005[v4]))();
}

_BYTE *sub_1C2F5ADBC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C2F5ADDC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2F5ADE4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2F5ADEC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2F5ADF4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2F5ADFC(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for Logger.Subsystem()
{
  OUTLINED_FUNCTION_33_2();
}

uint64_t storeEnumTagSinglePayload for Logger.Category(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2F5AE60 + 4 * byte_1C2F8300F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C2F5AE94 + 4 * byte_1C2F8300A[v4]))();
}

uint64_t sub_1C2F5AE94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F5AE9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F5AEA4);
  return result;
}

uint64_t sub_1C2F5AEB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F5AEB8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C2F5AEBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F5AEC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Logger.Category()
{
  OUTLINED_FUNCTION_33_2();
}

void type metadata accessor for SiriUtilitiesSignpost()
{
  OUTLINED_FUNCTION_33_2();
}

void type metadata accessor for SiriUtilitiesCrashHelper()
{
  OUTLINED_FUNCTION_33_2();
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_14()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_1_20()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_2_15()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_6_13()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t OUTLINED_FUNCTION_7_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_8_13()
{
  void *v0;
  uint64_t v1;

  return closure #1 in NSBundle.loadPlugin()(v0, (uint64_t *)(v1 - 96));
}

unint64_t OUTLINED_FUNCTION_9_13()
{
  return 0xD000000000000016;
}

uint64_t OUTLINED_FUNCTION_15_8()
{
  return swift_bridgeObjectRelease();
}

uint64_t one-time initialization function for displayOnly()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static ResponseMode.displayOnly = result;
  *(_QWORD *)algn_1ED4F6D70 = v1;
  return result;
}

uint64_t static ResponseMode.displayOnly.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for displayOnly, &static ResponseMode.displayOnly, a1);
}

uint64_t one-time initialization function for displayForward()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static ResponseMode.displayForward = result;
  unk_1ED4F6DB0 = v1;
  return result;
}

uint64_t static ResponseMode.displayForward.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for displayForward, &static ResponseMode.displayForward, a1);
}

uint64_t one-time initialization function for voiceForward()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static ResponseMode.voiceForward = result;
  *(_QWORD *)algn_1ED4F6D98 = v1;
  return result;
}

uint64_t static ResponseMode.voiceForward.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for voiceForward, &static ResponseMode.voiceForward, a1);
}

uint64_t one-time initialization function for voiceOnly()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static ResponseMode.voiceOnly = result;
  unk_1ED4F6DC8 = v1;
  return result;
}

uint64_t static ResponseMode.voiceOnly.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for voiceOnly, &static ResponseMode.voiceOnly, a1);
}

uint64_t ResponseMode.aceValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  OUTLINED_FUNCTION_61_0();
  return v1;
}

SiriUtilities::ResponseMode_optional __swiftcall ResponseMode.init(aceValue:)(SiriUtilities::ResponseMode_optional aceValue)
{
  uint64_t *v1;
  uint64_t *v2;
  void *object;
  uint64_t countAndFlagsBits;

  v2 = v1;
  if (aceValue.value.aceValue._object)
  {
    object = aceValue.value.aceValue._object;
    countAndFlagsBits = aceValue.value.aceValue._countAndFlagsBits;
    if (one-time initialization token for knownValues != -1)
      swift_once();
    specialized Set.contains(_:)(countAndFlagsBits, (uint64_t)object, static ResponseMode.knownValues);
    if ((aceValue.value.aceValue._countAndFlagsBits & 1) != 0)
    {
      *v2 = countAndFlagsBits;
      v2[1] = (uint64_t)object;
      return aceValue;
    }
    aceValue.value.aceValue._countAndFlagsBits = swift_bridgeObjectRelease();
  }
  *v2 = 0;
  v2[1] = 0;
  return aceValue;
}

void ResponseMode.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  v1 = dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  OUTLINED_FUNCTION_12_0(v1);
  OUTLINED_FUNCTION_3_1();
}

void ResponseMode.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_14_0();
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    OUTLINED_FUNCTION_14_0();
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v7 = v6;
    OUTLINED_FUNCTION_12_0(v5);
    *a2 = v5;
    a2[1] = v7;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  OUTLINED_FUNCTION_3_1();
}

uint64_t static ResponseMode.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t ResponseMode.hash(into:)()
{
  OUTLINED_FUNCTION_61_0();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int ResponseMode.hashValue.getter()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_61_0();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode;
  if (!lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for ResponseMode, &type metadata for ResponseMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode);
  }
  return result;
}

void protocol witness for Decodable.init(from:) in conformance ResponseMode(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  ResponseMode.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance ResponseMode(_QWORD *a1)
{
  ResponseMode.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for ResponseMode()
{
  return &type metadata for ResponseMode;
}

void static NamedTransformerLoggingIdentity.identity<A>(name:)(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::Int v9;
  BOOL v10;
  uint64_t v11;

  MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = String.init<A>(_:)();
  v7 = v6;
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  v9 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of static NamedTransformerLoggingIdentity.identity<A>(name:), v8);
  swift_bridgeObjectRelease();
  v10 = 0;
  if (v9)
    v10 = v9 == 1;
  *a2 = v10;
  OUTLINED_FUNCTION_9_0();
}

SiriUtilities::NamedTransformerLoggingIdentity_optional __swiftcall NamedTransformerLoggingIdentity.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  char v6;
  SiriUtilities::NamedTransformerLoggingIdentity_optional result;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NamedTransformerLoggingIdentity.init(rawValue:), v3);
  swift_bridgeObjectRelease();
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v5)
    v6 = 0;
  *v4 = v6;
  OUTLINED_FUNCTION_9_0();
  return result;
}

uint64_t NamedTransformerLoggingIdentity.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001CLL;
  else
    return 0x6E776F6E6B6E75;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance NamedTransformerLoggingIdentity(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity;
  if (!lazy protocol witness table cache variable for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for NamedTransformerLoggingIdentity, &type metadata for NamedTransformerLoggingIdentity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity;
  if (!lazy protocol witness table cache variable for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for NamedTransformerLoggingIdentity, &type metadata for NamedTransformerLoggingIdentity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity);
  }
  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance NamedTransformerLoggingIdentity()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NamedTransformerLoggingIdentity()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance NamedTransformerLoggingIdentity()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::NamedTransformerLoggingIdentity_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NamedTransformerLoggingIdentity(Swift::String *a1)
{
  return NamedTransformerLoggingIdentity.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NamedTransformerLoggingIdentity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = NamedTransformerLoggingIdentity.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NamedTransformerLoggingIdentity()
{
  lazy protocol witness table accessor for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NamedTransformerLoggingIdentity()
{
  lazy protocol witness table accessor for type NamedTransformerLoggingIdentity and conformance NamedTransformerLoggingIdentity();
  return RawRepresentable<>.encode(to:)();
}

uint64_t storeEnumTagSinglePayload for NamedTransformerLoggingIdentity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C2F5B848 + 4 * byte_1C2F832D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C2F5B87C + 4 * asc_1C2F832D0[v4]))();
}

uint64_t sub_1C2F5B87C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F5B884(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F5B88CLL);
  return result;
}

uint64_t sub_1C2F5B898(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F5B8A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C2F5B8A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F5B8AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NamedTransformerLoggingIdentity()
{
  return &type metadata for NamedTransformerLoggingIdentity;
}

uint64_t PThreadMutex.__allocating_init(name:abortOnFail:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  PThreadMutex.init(name:abortOnFail:)(a1, a2, a3);
  return v6;
}

uint64_t PThreadMutex.init(name:abortOnFail:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  pthread_mutex_t *v23;
  int v24;
  Swift::String v25;
  uint64_t v26;
  char v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _DWORD v34[4];
  uint64_t v35[2];

  v4 = v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  v13 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v13 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v13)
  {
    swift_bridgeObjectRelease();
    UUID.init()();
    a1 = UUID.uuidString.getter();
    a2 = v14;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = a2;
  *(_BYTE *)(v4 + 56) = a3 & 1;
  if (one-time initialization token for logger != -1)
    swift_once();
  v15 = OUTLINED_FUNCTION_13();
  v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.logger);
  swift_retain();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_8_9(v18))
  {
    v19 = (uint8_t *)OUTLINED_FUNCTION_4_1();
    v35[0] = OUTLINED_FUNCTION_4_1();
    v20 = OUTLINED_FUNCTION_22_7(4.8149e-34);
    v22 = OUTLINED_FUNCTION_47_1(v20, v21, v35);
    OUTLINED_FUNCTION_46_1(v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_12_2();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14_12(&dword_1C2F2D000, v17, (os_log_type_t)v8, "PThreadMutex#init created mutex: %s", v19);
    OUTLINED_FUNCTION_9_14();
    OUTLINED_FUNCTION_1_1();
  }

  OUTLINED_FUNCTION_12_2();
  v23 = (pthread_mutex_t *)OUTLINED_FUNCTION_4_1();
  *(_QWORD *)(v4 + 16) = v23;
  v24 = pthread_mutex_init(v23, 0);
  if ((OUTLINED_FUNCTION_7_12() & 1) == 0)
    return v4;
  v35[0] = 0;
  v35[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  OUTLINED_FUNCTION_24_7(45, 0x80000001C2F85AB0);
  v34[2] = v24;
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v25);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_5_15();
  v26 = *(_QWORD *)(v4 + 48);
  OUTLINED_FUNCTION_13_2();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_48_1();
  if (!v27)
  {
    swift_bridgeObjectRetain();
    Logger.logObject.getter();
    v28 = OUTLINED_FUNCTION_37_3();
    if (OUTLINED_FUNCTION_8_9(v28))
    {
      v29 = (uint8_t *)OUTLINED_FUNCTION_4_1();
      v35[0] = OUTLINED_FUNCTION_4_1();
      v30 = OUTLINED_FUNCTION_27_8(4.8149e-34);
      v32 = OUTLINED_FUNCTION_49_0(v30, v31, v35);
      OUTLINED_FUNCTION_46_1(v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_17_7();
      OUTLINED_FUNCTION_14_12(&dword_1C2F2D000, v16, (os_log_type_t)v26, "%s", v29);
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_1_1();
    }

    OUTLINED_FUNCTION_14_1();
    return v4;
  }
  result = OUTLINED_FUNCTION_7_0();
  __break(1u);
  return result;
}

uint64_t PThreadMutex.deinit()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  NSObject v19[12];
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;

  OUTLINED_FUNCTION_8_14();
  v20 = v2;
  v21 = v3;
  v4 = v0;
  if (one-time initialization token for logger != -1)
    swift_once();
  v5 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.logger);
  OUTLINED_FUNCTION_28_6();
  v6 = OUTLINED_FUNCTION_18_9();
  v7 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_8_9(v7))
  {
    v8 = (uint8_t *)OUTLINED_FUNCTION_4_1();
    v19[0].isa = (Class)OUTLINED_FUNCTION_4_1();
    v9 = OUTLINED_FUNCTION_22_7(4.8149e-34);
    OUTLINED_FUNCTION_47_1(v9, v10, (uint64_t *)v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_12_2();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14_12(&dword_1C2F2D000, v6, v1, "PThreadMutex#deinit for mutex: %s", v8);
    OUTLINED_FUNCTION_9_14();
    OUTLINED_FUNCTION_1_1();
  }

  OUTLINED_FUNCTION_12_2();
  pthread_mutex_destroy(*(pthread_mutex_t **)(v4 + 16));
  if ((OUTLINED_FUNCTION_7_12() & 1) == 0)
LABEL_10:
    OUTLINED_FUNCTION_1_1();
  OUTLINED_FUNCTION_13_11();
  _StringGuts.grow(_:)(57);
  OUTLINED_FUNCTION_39_4();
  OUTLINED_FUNCTION_11_11();
  OUTLINED_FUNCTION_24_7(48, v11);
  v22._countAndFlagsBits = OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_16_8(v22);
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_5_15();
  v12 = *(_QWORD *)(v4 + 48);
  OUTLINED_FUNCTION_13_2();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_48_1();
  if (!v13)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_18_9();
    v14 = OUTLINED_FUNCTION_37_3();
    if (OUTLINED_FUNCTION_8_9(v14))
    {
      v15 = (uint8_t *)OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_36_3();
      v16 = OUTLINED_FUNCTION_27_8(4.8149e-34);
      OUTLINED_FUNCTION_49_0(v16, v17, (uint64_t *)v19);
      OUTLINED_FUNCTION_1_21();
      OUTLINED_FUNCTION_17_7();
      OUTLINED_FUNCTION_14_12(&dword_1C2F2D000, v19, (os_log_type_t)v12, "%s", v15);
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_1_1();
    }

    OUTLINED_FUNCTION_14_1();
    goto LABEL_10;
  }
  result = OUTLINED_FUNCTION_7_0();
  __break(1u);
  return result;
}

uint64_t PThreadMutex.__deallocating_deinit()
{
  PThreadMutex.deinit();
  return swift_deallocClassInstance();
}

Swift::Bool __swiftcall PThreadMutex.isError(errorCode:)(Swift::Int32 errorCode)
{
  return errorCode != 0;
}

#error "1C2F5C0A0: call analysis failed (funcsize=134)"

#error "1C2F5C2FC: call analysis failed (funcsize=134)"

uint64_t PThreadMutex.getCurrentThreadID()()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

Swift::Int32 __swiftcall PThreadMutex.getLockCount()()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + 32);
}

Swift::String __swiftcall PThreadMutex.getName()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String result;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(void **)(v0 + 48);
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = v2;
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

void static PThreadMutex.mutexCheckIsLockedOnThisThread(mutex:)()
{
  NSObject *v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  pthread_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;

  OUTLINED_FUNCTION_8_14();
  v4 = OUTLINED_FUNCTION_29_7(v3);
  v5 = pthread_self();
  if (v4)
    v6 = v5 == (pthread_t)v4;
  else
    v6 = 0;
  if (v6)
  {
LABEL_11:
    OUTLINED_FUNCTION_3_14();
    return;
  }
  OUTLINED_FUNCTION_13_11();
  _StringGuts.grow(_:)(78);
  OUTLINED_FUNCTION_39_4();
  v13._countAndFlagsBits = 0xD00000000000002FLL;
  v13._object = (void *)0x80000001C2F85B90;
  OUTLINED_FUNCTION_16_8(v13);
  v14._countAndFlagsBits = OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_16_8(v14);
  OUTLINED_FUNCTION_55_0();
  OUTLINED_FUNCTION_11_11();
  OUTLINED_FUNCTION_24_7(29, v7);
  if (*(_BYTE *)(v1 + 56) != 1)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v8 = OUTLINED_FUNCTION_13();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.logger);
    OUTLINED_FUNCTION_45_2();
    Logger.logObject.getter();
    v9 = OUTLINED_FUNCTION_37_3();
    if (OUTLINED_FUNCTION_38_2(v9))
    {
      v10 = (uint8_t *)OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_36_3();
      v11 = OUTLINED_FUNCTION_30_4(4.8149e-34);
      OUTLINED_FUNCTION_33_3(v11, v12);
      OUTLINED_FUNCTION_1_21();
      OUTLINED_FUNCTION_17_7();
      OUTLINED_FUNCTION_14_12(&dword_1C2F2D000, v0, v2, "%s", v10);
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_1_1();
    }

    OUTLINED_FUNCTION_14_1();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_55_0();
  __break(1u);
}

void static PThreadMutex.mutexCheckIsNotLockedOnThisThread(mutex:)()
{
  NSObject *v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  pthread_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;

  OUTLINED_FUNCTION_8_14();
  v4 = OUTLINED_FUNCTION_29_7(v3);
  v5 = pthread_self();
  if (v4)
    v6 = v5 == (pthread_t)v4;
  else
    v6 = 0;
  if (!v6)
  {
LABEL_12:
    OUTLINED_FUNCTION_3_14();
    return;
  }
  OUTLINED_FUNCTION_13_11();
  _StringGuts.grow(_:)(82);
  OUTLINED_FUNCTION_39_4();
  v13._countAndFlagsBits = 0xD00000000000002FLL;
  v13._object = (void *)0x80000001C2F85B90;
  OUTLINED_FUNCTION_16_8(v13);
  v14._countAndFlagsBits = OUTLINED_FUNCTION_42_2();
  OUTLINED_FUNCTION_16_8(v14);
  OUTLINED_FUNCTION_55_0();
  OUTLINED_FUNCTION_11_11();
  OUTLINED_FUNCTION_24_7(33, v7);
  if (*(_BYTE *)(v1 + 56) != 1)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v8 = OUTLINED_FUNCTION_13();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.logger);
    OUTLINED_FUNCTION_45_2();
    Logger.logObject.getter();
    v9 = OUTLINED_FUNCTION_37_3();
    if (OUTLINED_FUNCTION_38_2(v9))
    {
      v10 = (uint8_t *)OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_4_1();
      OUTLINED_FUNCTION_36_3();
      v11 = OUTLINED_FUNCTION_30_4(4.8149e-34);
      OUTLINED_FUNCTION_33_3(v11, v12);
      OUTLINED_FUNCTION_1_21();
      OUTLINED_FUNCTION_17_7();
      OUTLINED_FUNCTION_14_12(&dword_1C2F2D000, v0, v2, "%s", v10);
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_1_1();
    }

    OUTLINED_FUNCTION_14_1();
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_55_0();
  __break(1u);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for PThreadMutex()
{
  return objc_opt_self();
}

uint64_t method lookup function for PThreadMutex()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PThreadMutex.__allocating_init(name:abortOnFail:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of PThreadMutex.isError(errorCode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of PThreadMutex.lock()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of PThreadMutex.unlock()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PThreadMutex.getCurrentThreadID()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of PThreadMutex.getLockCount()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of PThreadMutex.getName()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t OUTLINED_FUNCTION_1_21()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_5_15()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x20726F6620;
  v0._object = (void *)0xE500000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_7_12()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t OUTLINED_FUNCTION_9_14()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_10_11()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 1024;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_14_12(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_15_9()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_16_8(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_17_7()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_18_9()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_22_7(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_24_7(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

void OUTLINED_FUNCTION_25_7(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x12u);
}

uint64_t OUTLINED_FUNCTION_26_8(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_27_8(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_28_6()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_29_7(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
}

uint64_t OUTLINED_FUNCTION_30_4(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_bridgeObjectRetain();
}

BOOL OUTLINED_FUNCTION_31_6(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_32_6(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  unint64_t v3;
  va_list va;

  va_start(va, a2);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v3, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_33_3(uint64_t a1, uint64_t a2, ...)
{
  unint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_34_4(uint64_t a1, uint64_t a2, ...)
{
  unint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_37_3()
{
  return static os_log_type_t.error.getter();
}

BOOL OUTLINED_FUNCTION_38_2(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_41_1(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v12;
  Swift::String v13;

  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
}

uint64_t OUTLINED_FUNCTION_42_2()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

void OUTLINED_FUNCTION_43_2()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_44_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_45_2()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_46_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t OUTLINED_FUNCTION_47_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_49_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_50_1()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void ManagedContinuation.resume(with:)(uint64_t a1)
{
  void (*v1)(char *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  OUTLINED_FUNCTION_19_8();
  v3 = type metadata accessor for Result();
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x1E0C80A78](v6, v7);
  OUTLINED_FUNCTION_15_10();
  OUTLINED_FUNCTION_19_8();
  v8 = type metadata accessor for CheckedContinuation();
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (void (*)(char *, uint64_t, uint64_t))((char *)&v18 - v13);
  __swift_storeEnumTagSinglePayload((uint64_t)&v18 - v13, 1, 1, v8);
  (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v1, a1, v3);
  v15 = OUTLINED_FUNCTION_11_12();
  __swift_storeEnumTagSinglePayload(v15, v16, v17, v3);
  ManagedContinuation.updateState(continuation:result:)(v14, v1);
  (*(void (**)(_QWORD, uint64_t))(v5 + 8))(v1, v4);
  (*(void (**)(void (*)(char *, uint64_t, uint64_t), uint64_t))(v10 + 8))(v14, v9);
  OUTLINED_FUNCTION_3_3();
}

uint64_t withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v9;

  type metadata accessor for ManagedContinuation(0, *(_QWORD *)(v4 + 40), a3, a4);
  v9 = *(_OWORD *)(v4 + 24);
  v5 = ManagedContinuation.__allocating_init()();
  *(_QWORD *)(v4 + 48) = v5;
  v6 = swift_task_alloc();
  *(_QWORD *)(v4 + 56) = v6;
  *(_QWORD *)(v6 + 16) = v5;
  *(_OWORD *)(v6 + 24) = v9;
  *(_QWORD *)&v9 = (char *)&async function pointer to withTaskCancellationHandler<A>(handler:operation:)
                 + async function pointer to withTaskCancellationHandler<A>(handler:operation:);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 64) = v7;
  *v7 = v4;
  v7[1] = withCancellableContinuation<A>(body:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v9)(*(_QWORD *)(v4 + 16), (uint64_t)partial apply for closure #1 in withCancellableContinuation<A>(body:), v5, (uint64_t)&async function pointer to partial apply for closure #2 in withCancellableContinuation<A>(body:), v6, *(_QWORD *)(v4 + 40));
}

uint64_t withCancellableContinuation<A>(body:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_3_15();
  if (!v0)
    swift_task_dealloc();
  return OUTLINED_FUNCTION_3_5();
}

{
  uint64_t v0;

  swift_release();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ManagedContinuation<A>.resume()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v4);
  specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v3, 0, 0);
  return outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v3);
}

uint64_t ManagedContinuation.__allocating_init()()
{
  swift_allocObject();
  return ManagedContinuation.().init()();
}

uint64_t closure #1 in withCancellableContinuation<A>(body:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v0 = type metadata accessor for Result();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (uint64_t *)((char *)&v7 - v3);
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
  v5 = swift_allocError();
  CancellationError.init()();
  *v4 = v5;
  swift_storeEnumTagMultiPayload();
  ManagedContinuation.resume(with:)((uint64_t)v4);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *a2;
  return swift_task_switch();
}

uint64_t closure #2 in withCancellableContinuation<A>(body:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = closure #2 in withCancellableContinuation<A>(body:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_3_15();
  if (v0)
    return OUTLINED_FUNCTION_3_5();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v6 = type metadata accessor for Result();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (uint64_t *)((char *)&v13 - v9);
  ManagedContinuation.setContinuation(_:)(a1);
  if ((static Task<>.isCancelled.getter() & 1) == 0)
    return a3(a2);
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
  v11 = swift_allocError();
  CancellationError.init()();
  *v10 = v11;
  swift_storeEnumTagMultiPayload();
  ManagedContinuation.resume(with:)((uint64_t)v10);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t ManagedContinuation.setContinuation(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v15;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v2 = type metadata accessor for Result();
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (void (*)(char *, uint64_t))((char *)&v15 - v6);
  v8 = type metadata accessor for CheckedContinuation();
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (void (*)(char *, uint64_t, uint64_t))((char *)&v15 - v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))((char *)&v15 - v12, a1, v8);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v8);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v2);
  ManagedContinuation.updateState(continuation:result:)(v13, v7);
  (*(void (**)(_QWORD, uint64_t))(v4 + 8))(v7, v3);
  return (*(uint64_t (**)(void (*)(char *, uint64_t, uint64_t), uint64_t))(v10 + 8))(v13, v9);
}

uint64_t withTaskCancellationHandler<A>(handler:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  char *v15;

  v15 = (char *)&async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)
      + async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = withTaskCancellationHandler<A>(handler:operation:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))v15)(a1, a4, a5, a2, a3, 0, 0, a6);
}

uint64_t withTaskCancellationHandler<A>(handler:operation:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_1_22();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

void ManagedContinuation.__allocating_init(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v1 = type metadata accessor for CheckedContinuation();
  v2 = type metadata accessor for Optional();
  v3 = *(_QWORD *)(v2 - 8);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x1E0C80A78](v4, v5);
  OUTLINED_FUNCTION_15_10();
  v6 = ManagedContinuation.__allocating_init()();
  OUTLINED_FUNCTION_10_12(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32));
  v7 = OUTLINED_FUNCTION_11_12();
  __swift_storeEnumTagSinglePayload(v7, v8, v9, v1);
  v10 = v6 + *(_QWORD *)(*(_QWORD *)v6 + 88);
  OUTLINED_FUNCTION_25_0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(v10, v0, v2);
  swift_endAccess();
  OUTLINED_FUNCTION_1_3();
}

uint64_t ManagedContinuation.().init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v2 = type metadata accessor for CheckedContinuation();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v3 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  v4 = type metadata accessor for Result();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104)) = v5;
  v6 = v5;
  v7 = (void *)MEMORY[0x1C3BCDDDC](0xD000000000000027, 0x80000001C2F85180);
  objc_msgSend(v6, sel_setName_, v7);

  return v0;
}

void specialized ManagedContinuation.updateState(continuation:result:)(uint64_t a1, void *a2, unsigned __int8 a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int EnumTagSinglePayload;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t (*v38)();
  void *v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char v51;

  v45 = a2;
  v48 = a1;
  v4 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v7, v10);
  v13 = (char *)&v44 - v12;
  MEMORY[0x1E0C80A78](v11, v14);
  v16 = (char *)&v44 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v21 = MEMORY[0x1E0C80A78](v17, v20);
  v46 = (uint64_t)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v49 = (uint64_t)&v44 - v24;
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (char *)&v44 - v26;
  v47 = *(_QWORD *)(*(_QWORD *)v3 + 104);
  objc_msgSend(*(id *)(v3 + v47), sel_lock);
  if (v4 != 255)
  {
    v28 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 96);
    OUTLINED_FUNCTION_25_0();
    if (*(unsigned __int8 *)(v28 + 8) == 255)
    {
      v44 = *(void **)v28;
      v29 = v45;
      *(_QWORD *)v28 = v45;
      *(_BYTE *)(v28 + 8) = v4;
      outlined copy of Result<(), Error>(v29, v4 & 1);
      outlined consume of Result<(), Error>?(v44, 0xFFu);
    }
  }
  outlined init with copy of CheckedContinuation<(), Error>?(v48, (uint64_t)v16);
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17) == 1)
  {
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v16);
    v30 = v18;
  }
  else
  {
    v30 = v18;
    OUTLINED_FUNCTION_6_14((uint64_t)v27, (uint64_t)v16);
    OUTLINED_FUNCTION_6_14((uint64_t)v13, (uint64_t)v27);
    v31 = OUTLINED_FUNCTION_11_12();
    __swift_storeEnumTagSinglePayload(v31, v32, v33, v17);
    OUTLINED_FUNCTION_14_13();
    OUTLINED_FUNCTION_25_0();
    OUTLINED_FUNCTION_17_8();
    swift_endAccess();
  }
  OUTLINED_FUNCTION_14_13();
  OUTLINED_FUNCTION_25_0();
  outlined init with copy of CheckedContinuation<(), Error>?((uint64_t)v27, (uint64_t)v9);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v17);
  v35 = v49;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of CheckedContinuation<(), Error>?((uint64_t)v9);
  }
  else
  {
    OUTLINED_FUNCTION_6_14(v49, (uint64_t)v9);
    v36 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 96);
    OUTLINED_FUNCTION_25_0();
    v37 = *(unsigned __int8 *)(v36 + 8);
    if (v37 != 255)
    {
      v39 = *(void **)v36;
      v40 = v37 & 1;
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 1, 1, v17);
      OUTLINED_FUNCTION_25_0();
      outlined copy of Result<(), Error>(v39, v40);
      OUTLINED_FUNCTION_17_8();
      swift_endAccess();
      v41 = v46;
      OUTLINED_FUNCTION_6_14(v46, v49);
      v50 = v39;
      v51 = v40;
      v42 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      v43 = swift_allocObject();
      OUTLINED_FUNCTION_6_14(v43 + v42, v41);
      outlined init with take of Result<(), Error>((uint64_t)&v50, v43 + ((v19 + v42 + 7) & 0xFFFFFFFFFFFFFFF8));
      v38 = partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:);
      goto LABEL_13;
    }
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v35, v17);
  }
  v38 = (uint64_t (*)())destructiveProjectEnumData for InputOrigin;
LABEL_13:
  ((void (*)(id))v38)(objc_msgSend(*(id *)(v3 + v47), sel_unlock));
  swift_release();
  OUTLINED_FUNCTION_3_3();
}

uint64_t ManagedContinuation.updateState(continuation:result:)(void (*a1)(char *, uint64_t, uint64_t), void (*a2)(char *, uint64_t))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t, uint64_t);
  int EnumTagSinglePayload;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)();
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void (*v87)(unint64_t, char *, uint64_t);
  char *v88;
  void (*v89)(unint64_t, char *, uint64_t);
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  void (*v104)(char *, uint64_t, uint64_t);
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  void (*v110)(char *, uint64_t);
  char *v111;
  uint64_t *v112;
  void (*v113)(char *, uint64_t, uint64_t);
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v110 = a2;
  v113 = a1;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v5 = type metadata accessor for CheckedContinuation();
  v6 = type metadata accessor for Optional();
  v117 = *(_QWORD *)(v6 - 8);
  v118 = v6;
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v115 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v109 = (char *)&v95 - v12;
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v111 = (char *)&v95 - v15;
  v116 = v5;
  v119 = *(_QWORD *)(v5 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v101 = (char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (char *)&v95 - v21;
  v100 = v23;
  MEMORY[0x1E0C80A78](v20, v24);
  v103 = (char *)&v95 - v25;
  v102 = v4;
  v26 = type metadata accessor for Result();
  v27 = type metadata accessor for Optional();
  v28 = *(_QWORD *)(v27 - 8);
  v30 = MEMORY[0x1E0C80A78](v27, v29);
  v106 = (char *)&v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v30, v32);
  v97 = (char *)&v95 - v34;
  v36 = MEMORY[0x1E0C80A78](v33, v35);
  v38 = (char *)&v95 - v37;
  v40 = MEMORY[0x1E0C80A78](v36, v39);
  v42 = (char *)&v95 - v41;
  v43 = *(_QWORD *)(v26 - 8);
  v45 = MEMORY[0x1E0C80A78](v40, v44);
  v99 = (char *)&v95 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = MEMORY[0x1E0C80A78](v45, v47);
  v105 = (char *)&v95 - v49;
  v98 = v50;
  MEMORY[0x1E0C80A78](v48, v51);
  v53 = (char *)&v95 - v52;
  objc_msgSend(*(id *)((char *)v2 + *(_QWORD *)(v3 + 104)), sel_lock);
  v54 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v54(v42, (uint64_t)v110, v27);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v42, 1, v26);
  v108 = v22;
  v114 = v43;
  v104 = v54;
  v112 = v2;
  if (EnumTagSinglePayload == 1)
  {
    v110 = *(void (**)(char *, uint64_t))(v28 + 8);
    v110(v42, v27);
    v56 = v27;
  }
  else
  {
    v96 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v96(v53, v42, v26);
    v57 = (uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 96));
    swift_beginAccess();
    v54(v38, (uint64_t)v57, v27);
    v58 = v26;
    v59 = __swift_getEnumTagSinglePayload((uint64_t)v38, 1, v26);
    v110 = *(void (**)(char *, uint64_t))(v28 + 8);
    v110(v38, v27);
    v56 = v27;
    if (v59 == 1)
    {
      v60 = (uint64_t)v97;
      v96(v97, v53, v58);
      __swift_storeEnumTagSinglePayload(v60, 0, 1, v58);
      swift_beginAccess();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v28 + 40))(v57, v60, v27);
      swift_endAccess();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v43 + 8))(v53, v58);
    }
    v26 = v58;
  }
  v61 = (uint64_t)v111;
  v63 = v117;
  v62 = v118;
  v64 = *(void (**)(char *, uint64_t, uint64_t))(v117 + 16);
  v64(v111, (uint64_t)v113, v118);
  v65 = v116;
  v66 = __swift_getEnumTagSinglePayload(v61, 1, v116);
  v67 = v119;
  v107 = v26;
  v68 = v56;
  if (v66 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v62);
    v69 = v112;
  }
  else
  {
    v70 = *(void (**)(char *, uint64_t, uint64_t))(v119 + 32);
    v71 = v103;
    v70(v103, v61, v65);
    v72 = (uint64_t)v109;
    v70(v109, (uint64_t)v71, v65);
    __swift_storeEnumTagSinglePayload(v72, 0, 1, v65);
    v69 = v112;
    v73 = (uint64_t)v112 + *(_QWORD *)(*v112 + 88);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 40))(v73, v72, v62);
    swift_endAccess();
  }
  v74 = (uint64_t)v69 + *(_QWORD *)(*v69 + 88);
  swift_beginAccess();
  v75 = (uint64_t)v115;
  v64(v115, v74, v62);
  v76 = __swift_getEnumTagSinglePayload(v75, 1, v65);
  v77 = v114;
  if (v76 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v75, v62);
  }
  else
  {
    v78 = v108;
    v115 = *(char **)(v67 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v115)(v108, v75, v65);
    v79 = (uint64_t)v69 + *(_QWORD *)(*v69 + 96);
    swift_beginAccess();
    v80 = (uint64_t)v106;
    v104(v106, v79, v68);
    v81 = v107;
    if (__swift_getEnumTagSinglePayload(v80, 1, v107) != 1)
    {
      v113 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 32);
      v113(v105, v80, v81);
      v83 = (uint64_t)v109;
      __swift_storeEnumTagSinglePayload((uint64_t)v109, 1, 1, v65);
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 40))(v74, v83, v62);
      swift_endAccess();
      v84 = v77;
      v85 = v101;
      v86 = v65;
      v87 = (void (*)(unint64_t, char *, uint64_t))v115;
      ((void (*)(char *, char *, uint64_t))v115)(v101, v78, v65);
      v88 = v99;
      v89 = (void (*)(unint64_t, char *, uint64_t))v113;
      v113(v99, (uint64_t)v105, v81);
      v90 = (*(unsigned __int8 *)(v119 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
      v91 = (v100 + *(unsigned __int8 *)(v84 + 80) + v90) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      v92 = v81;
      v93 = swift_allocObject();
      *(_QWORD *)(v93 + 16) = v102;
      v87(v93 + v90, v85, v86);
      v89(v93 + v91, v88, v92);
      v82 = partial apply for closure #2 in ManagedContinuation.updateState(continuation:result:);
      goto LABEL_16;
    }
    (*(void (**)(char *, uint64_t))(v119 + 8))(v78, v65);
    v110((char *)v80, v68);
  }
  v82 = (uint64_t (*)())destructiveProjectEnumData for InputOrigin;
LABEL_16:
  ((void (*)(id))v82)(objc_msgSend(*(id *)((char *)v69 + *(_QWORD *)(*v69 + 104)), sel_unlock));
  return swift_release();
}

uint64_t type metadata accessor for ManagedContinuation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedContinuation);
}

uint64_t partial apply for closure #1 in withCancellableContinuation<A>(body:)()
{
  return closure #1 in withCancellableContinuation<A>(body:)();
}

uint64_t partial apply for closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = (_QWORD *)v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = withTaskCancellationHandler<A>(handler:operation:);
  return closure #2 in withCancellableContinuation<A>(body:)(a1, v4, v5, v6);
}

uint64_t outlined destroy of CheckedContinuation<(), Error>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void ManagedContinuation.resume(returning:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v3 = OUTLINED_FUNCTION_21_8();
  v4 = *(_QWORD *)(v3 - 8);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x1E0C80A78](v5, v6);
  OUTLINED_FUNCTION_15_10();
  OUTLINED_FUNCTION_10_12(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16));
  swift_storeEnumTagMultiPayload();
  ManagedContinuation.resume(with:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  OUTLINED_FUNCTION_1_3();
}

void ManagedContinuation.resume(throwing:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v2 = OUTLINED_FUNCTION_21_8();
  v3 = *(_QWORD *)(v2 - 8);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v9 - v6;
  *(uint64_t *)((char *)&v9 - v6) = (uint64_t)a1;
  swift_storeEnumTagMultiPayload();
  v8 = a1;
  ManagedContinuation.resume(with:)((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  OUTLINED_FUNCTION_1_3();
}

uint64_t specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(int a1, id a2, char a3)
{
  id v4;

  if ((a3 & 1) != 0)
  {
    v4 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #2 in ManagedContinuation.updateState(continuation:result:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v3 = type metadata accessor for CheckedContinuation();
  return CheckedContinuation.resume(with:)(a2, v3);
}

uint64_t CheckedContinuation.resume(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Result();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v19 - v15, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, v9);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v16, v3);
    return CheckedContinuation.resume(returning:)();
  }
}

void ManagedContinuation.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  OUTLINED_FUNCTION_18_10();
  type metadata accessor for CheckedContinuation();
  v1 = OUTLINED_FUNCTION_20_6();
  OUTLINED_FUNCTION_7_13(v1);
  OUTLINED_FUNCTION_18_10();
  type metadata accessor for Result();
  v2 = OUTLINED_FUNCTION_20_6();
  OUTLINED_FUNCTION_7_13(v2);

  OUTLINED_FUNCTION_1_3();
}

uint64_t ManagedContinuation.__deallocating_deinit()
{
  ManagedContinuation.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for ManagedContinuation()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for CheckedContinuation();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Result();
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ManagedContinuation()
{
  return swift_lookUpClassMethod();
}

uint64_t outlined init with copy of CheckedContinuation<(), Error>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of CheckedContinuation<(), Error>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (__isPlatformVersionAtLeast(2, 18, 0, 0))
  {
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v8 + 24) = v17;
    *v17 = v8;
    v17[1] = withTaskCancellationHandler<A>(operation:onCancel:isolation:);
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
  }
  else
  {
    v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:) + async function pointer to back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:));
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v8 + 16) = v19;
    *v19 = v8;
    v19[1] = withTaskCancellationHandler<A>(handler:operation:);
    return v20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v2 + 8));
}

{
  return MEMORY[0x1E0DF0E78]();
}

uint64_t back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[5] = a4;
  v6[6] = a5;
  v6[3] = a2;
  v6[4] = a3;
  v6[2] = a1;
  if (a6)
  {
    swift_getObjectType();
    v7 = dispatch thunk of Actor.unownedExecutor.getter();
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v6[7] = v7;
  v6[8] = v9;
  return swift_task_switch();
}

uint64_t back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = (int *)v0[3];
  v0[9] = swift_task_addCancellationHandler();
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[10] = v2;
  *v2 = v0;
  v2[1] = back deployment fallback for withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  return v4(v0[2]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_3_5();
}

{
  uint64_t v0;

  swift_task_removeCancellationHandler();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  swift_task_removeCancellationHandler();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(int a1, uint64_t a2)
{
  return specialized closure #2 in ManagedContinuation.updateState(continuation:result:)(a1, *(id *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t sub_1C2F5E9D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  outlined consume of Result<(), Error>(*(id *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  return swift_deallocObject();
}

uint64_t outlined init with take of Result<(), Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<(), Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #2 in ManagedContinuation.updateState(continuation:result:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return specialized closure #2 in ManagedContinuation.updateState(continuation:result:)((int)v0 + (int)v2, v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
}

void outlined consume of Result<(), Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    outlined consume of Result<(), Error>(a1, a2 & 1);
}

uint64_t partial apply for closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in withCancellableContinuation<A>(body:)(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1C2F5EB00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v2 = OUTLINED_FUNCTION_8_15();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(OUTLINED_FUNCTION_9_15() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);
  if (swift_getEnumCaseMultiPayload() == 1)

  else
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + v7, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ManagedContinuation.updateState(continuation:result:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v1 = *(_QWORD *)(OUTLINED_FUNCTION_8_15() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_9_15() - 8) + 80);
  return closure #2 in ManagedContinuation.updateState(continuation:result:)(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t OUTLINED_FUNCTION_1_22()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_3_15()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_6_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_7_13(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_8_15()
{
  return type metadata accessor for CheckedContinuation();
}

uint64_t OUTLINED_FUNCTION_9_15()
{
  return type metadata accessor for Result();
}

uint64_t OUTLINED_FUNCTION_10_12@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v3, v1, v2);
}

uint64_t OUTLINED_FUNCTION_11_12()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_14_13()
{
  uint64_t v0;

  return v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
}

uint64_t OUTLINED_FUNCTION_17_8()
{
  uint64_t v0;
  uint64_t v1;

  return outlined assign with take of CheckedContinuation<(), Error>?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_18_10()
{
  return 255;
}

uint64_t OUTLINED_FUNCTION_19_8()
{
  return 255;
}

uint64_t OUTLINED_FUNCTION_20_6()
{
  return type metadata accessor for Optional();
}

uint64_t OUTLINED_FUNCTION_21_8()
{
  return type metadata accessor for Result();
}

uint64_t Transformer<>.transformer.unsafeMutableAddressor()
{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(&one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

{
  return Transformer<>.transformer.unsafeMutableAddressor(one-time initialization token for transformer, (uint64_t)&static Transformer<>.transformer);
}

uint64_t Transformer<>.transformer.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(_QWORD *)a2;
}

_QWORD *one-time initialization function for transformer()
{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)swift_slowAlloc();
  static Transformer<>.transformer = (uint64_t)result;
  *result = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  result[1] = 0;
  result[2] = specialized closure #1 in Transformer.init(transform:);
  result[3] = 0;
  return result;
}

uint64_t *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  return closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1, a2);
}

void static Transformer<>.transformer.getter(_QWORD *a1@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_8_0(a1);
}

{
  OUTLINED_FUNCTION_8_0(a1);
}

{
  OUTLINED_FUNCTION_8_0(a1);
}

{
  OUTLINED_FUNCTION_8_0(a1);
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(unint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1, a2);
}

{
  unint64_t v2;

  v2 = *a1;
  if ((*a1 & 0x8000000000000000) != 0 || HIDWORD(v2))
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_7_14();
    __break(1u);
  }
  else
  {
    *a2 = v2;
    OUTLINED_FUNCTION_2();
  }
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  if ((*a1 & 0x8000000000000000) != 0)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_6_15();
    __break(1u);
  }
  else
  {
    *a2 = *a1;
    OUTLINED_FUNCTION_2();
  }
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a2, a1);
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1, a2);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(uint64_t *a1@<X0>, double *a2@<X8>)
{
  OUTLINED_FUNCTION_16_9(a2, (double)*a1);
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1, a2);
}

void static Transformer<>.transformer.getter(void (**a1)(uint64_t *a1@<X0>, double *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(uint64_t *a1@<X0>, float *a2@<X8>)
{
  OUTLINED_FUNCTION_15_11(a2, (float)*a1);
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1, a2);
}

void static Transformer<>.transformer.getter(void (**a1)(uint64_t *a1@<X0>, float *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(uint64_t *a1@<X8>)
{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  uint64_t v2;

  *a1 = OUTLINED_FUNCTION_24_8();
  a1[1] = v2;
  OUTLINED_FUNCTION_11_13();
}

{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a1);
}

{
  uint64_t v2;

  *a1 = OUTLINED_FUNCTION_24_8();
  a1[1] = v2;
  OUTLINED_FUNCTION_11_13();
}

void static Transformer<>.transformer.getter(void (**a1)(uint64_t *a1@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

_QWORD *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_DWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  if ((*a1 & 0x80000000) != 0)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_6_15();
    __break(1u);
  }
  else
  {
    *a2 = *a1;
    OUTLINED_FUNCTION_2();
  }
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if ((v2 & 0x80000000) != 0)
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_6_15();
    __break(1u);
  }
  else
  {
    *a2 = v2;
    OUTLINED_FUNCTION_2();
  }
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(int *a1@<X0>, double *a2@<X8>)
{
  OUTLINED_FUNCTION_16_9(a2, (double)*a1);
}

void static Transformer<>.transformer.getter(void (**a1)(int *a1@<X0>, double *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(int *a1@<X0>, float *a2@<X8>)
{
  OUTLINED_FUNCTION_15_11(a2, (float)*a1);
}

void static Transformer<>.transformer.getter(void (**a1)(int *a1@<X0>, float *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

uint64_t *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if (*result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    *a2 = v2;
    return result;
  }
  __break(1u);
  return result;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_DWORD *a1@<X8>, _DWORD *a2@<X0>)
{
  if ((*a2 & 0x80000000) != 0)
    __break(1u);
  else
    OUTLINED_FUNCTION_14_14(a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_DWORD *a1@<X0>, double *a2@<X8>, unint64_t a3@<D0>)
{
  LODWORD(a3) = *a1;
  OUTLINED_FUNCTION_16_9(a2, (double)a3);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(unsigned int *a1@<X0>, float *a2@<X8>)
{
  OUTLINED_FUNCTION_15_11(a2, (float)*a1);
}

void static Transformer<>.transformer.getter(void (**a1)(unsigned int *a1@<X0>, float *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

_QWORD *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X8>)
{
  if (*result >> 31)
    __break(1u);
  else
    *a2 = *result;
  return result;
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  if (HIDWORD(*a1))
  {
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_7_14();
    __break(1u);
  }
  else
  {
    *a2 = *a1;
    OUTLINED_FUNCTION_2();
  }
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_QWORD *a1@<X8>, _QWORD *a2@<X0>)
{
  if ((*a2 & 0x8000000000000000) != 0)
    __break(1u);
  else
    OUTLINED_FUNCTION_8_0(a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(unint64_t *a1@<X0>, double *a2@<X8>)
{
  OUTLINED_FUNCTION_16_9(a2, (double)*a1);
}

void static Transformer<>.transformer.getter(void (**a1)(unint64_t *a1@<X0>, double *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(unint64_t *a1@<X0>, float *a2@<X8>)
{
  OUTLINED_FUNCTION_15_11(a2, (float)*a1);
}

void static Transformer<>.transformer.getter(void (**a1)(unint64_t *a1@<X0>, float *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_DWORD *a1@<X8>, double *a2@<X0>)
{
  double v2;

  v2 = *a2;
  if ((~*(_QWORD *)a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -2147483650.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 2147483650.0)
  {
    OUTLINED_FUNCTION_14_14(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

{
  double v2;

  v2 = *a2;
  if ((~*(_QWORD *)a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 4294967300.0)
  {
    OUTLINED_FUNCTION_14_14(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(double *a1@<X0>, _QWORD *a2@<X8>)
{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a2, a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_QWORD *a1@<X8>, double *a2@<X0>)
{
  double v2;

  v2 = *a2;
  if ((~*(_QWORD *)a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 1.84467441e19)
  {
    OUTLINED_FUNCTION_8_0(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

{
  double v2;

  v2 = *a2;
  if ((~*(_QWORD *)a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 9.22337204e18)
  {
    OUTLINED_FUNCTION_8_0(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

float closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<S0>(double *a1@<X0>, float *a2@<X8>)
{
  float v2;
  float result;

  v2 = *a1;
  OUTLINED_FUNCTION_15_11(a2, v2);
  return result;
}

void static Transformer<>.transformer.getter(float (**a1)@<S0>(double *a1@<X0>, float *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer()
{
  _QWORD *v0;

  OUTLINED_FUNCTION_25_8();
  Double.write<A>(to:)();
  *v0 = 0;
  v0[1] = 0xE000000000000000;
  OUTLINED_FUNCTION_2();
}

{
  _QWORD *v0;

  OUTLINED_FUNCTION_25_8();
  Float.write<A>(to:)();
  *v0 = 0;
  v0[1] = 0xE000000000000000;
  OUTLINED_FUNCTION_2();
}

{
  uint64_t *v0;
  char v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  char v28;

  OUTLINED_FUNCTION_25_8();
  v3 = *v2;
  v4 = v2[1];
  v5 = HIBYTE(v4) & 0xF;
  v6 = *v2 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0)
    v7 = HIBYTE(v4) & 0xF;
  else
    v7 = *v2 & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
LABEL_48:
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    OUTLINED_FUNCTION_32_0();
    OUTLINED_FUNCTION_4_10(v25, (uint64_t)"cannot parse Int from String");
    return;
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v9 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v3, v4, 10);
    v1 = v28;
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  if ((v4 & 0x2000000000000000) == 0)
  {
    if ((v3 & 0x1000000000000000) != 0)
      v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    v9 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v8, v6, 10);
    v1 = v10 & 1;
LABEL_46:
    if ((v1 & 1) == 0)
    {
      *v0 = v9;
      return;
    }
    goto LABEL_48;
  }
  if (*v2 == 43)
  {
    if (!v5)
      goto LABEL_59;
    if (v5 == 1)
      goto LABEL_32;
    OUTLINED_FUNCTION_7_10();
    if (!v14 & v13)
      goto LABEL_32;
    v9 = v16;
    if (v15 != 2)
    {
      OUTLINED_FUNCTION_7_10();
      if (!v14 & v13)
        goto LABEL_32;
      v9 = 10 * v9 + v18;
      if (v17 != 3)
      {
        while (1)
        {
          OUTLINED_FUNCTION_32_5();
          if (!v14 & v13)
            goto LABEL_32;
          OUTLINED_FUNCTION_13_12();
          if (!v14)
            goto LABEL_32;
          v9 = v20 + v19;
          if (__OFADD__(v20, v19))
            goto LABEL_32;
          OUTLINED_FUNCTION_21_9();
          if (v14)
            goto LABEL_46;
        }
      }
    }
LABEL_45:
    v1 = 0;
    goto LABEL_46;
  }
  if (*v2 != 45)
  {
    if (!v5 || (v3 - 48) > 9u)
      goto LABEL_32;
    v9 = (v3 - 48);
    if (v5 != 1)
    {
      OUTLINED_FUNCTION_7_10();
      if (!v14 & v13)
        goto LABEL_32;
      v9 = 10 * (v3 - 48) + v22;
      if (v21 != 2)
      {
        while (1)
        {
          OUTLINED_FUNCTION_32_5();
          if (!v14 & v13)
            goto LABEL_32;
          OUTLINED_FUNCTION_13_12();
          if (!v14)
            goto LABEL_32;
          v9 = v24 + v23;
          if (__OFADD__(v24, v23))
            goto LABEL_32;
          OUTLINED_FUNCTION_21_9();
          if (v14)
            goto LABEL_46;
        }
      }
    }
    goto LABEL_45;
  }
  if (v5)
  {
    if (v5 != 1)
    {
      OUTLINED_FUNCTION_7_10();
      if (!(!v14 & v13))
      {
        if (v11 == 2)
        {
          v1 = 0;
          v9 = -(uint64_t)v12;
          goto LABEL_46;
        }
        if ((BYTE2(v3) - 48) <= 9u)
        {
          v9 = -10 * v12 - (BYTE2(v3) - 48);
          if (v11 == 3)
            goto LABEL_45;
          while (1)
          {
            OUTLINED_FUNCTION_32_5();
            if (!v14 & v13)
              break;
            OUTLINED_FUNCTION_13_12();
            if (!v14)
              break;
            v9 = v27 - v26;
            if (__OFSUB__(v27, v26))
              break;
            OUTLINED_FUNCTION_21_9();
            if (v14)
              goto LABEL_46;
          }
        }
      }
    }
LABEL_32:
    v9 = 0;
    v1 = 1;
    goto LABEL_46;
  }
  __break(1u);
LABEL_59:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  OUTLINED_FUNCTION_17_9();
  v3 = specialized Double.init<A>(_:)(v1, v2);
  if ((v4 & 1) != 0)
  {
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    OUTLINED_FUNCTION_32_0();
    OUTLINED_FUNCTION_4_10(v5, (uint64_t)"cannot parse Double from String");
  }
  else
  {
    *v0 = v3;
  }
  OUTLINED_FUNCTION_11_13();
}

{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_17_9();
  v3 = specialized Float.init<A>(_:)(v1, v2);
  if ((v3 & 0x100000000) != 0)
  {
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    OUTLINED_FUNCTION_32_0();
    OUTLINED_FUNCTION_4_10(v4, (uint64_t)"cannot parse Float from String");
  }
  else
  {
    *v0 = v3;
  }
  OUTLINED_FUNCTION_11_13();
}

void static Transformer<>.transformer.getter(void (**a1)()@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(char *a1@<X8>)
{
  OUTLINED_FUNCTION_23_5(a1);
}

{
  OUTLINED_FUNCTION_23_5(a1);
}

void static Transformer<>.transformer.getter(void (**a1)(char *a1@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_DWORD *a1@<X8>, float *a2@<X0>)
{
  float v2;

  v2 = *a2;
  if ((~*(_DWORD *)a2 & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -2147500000.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 2147500000.0)
  {
    OUTLINED_FUNCTION_14_14(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

{
  float v2;

  v2 = *a2;
  if ((~*(_DWORD *)a2 & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 4295000000.0)
  {
    OUTLINED_FUNCTION_14_14(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(float *a1@<X0>, _QWORD *a2@<X8>)
{
  closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(a2, a1);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(_QWORD *a1@<X8>, float *a2@<X0>)
{
  float v2;

  v2 = *a2;
  if ((~*(_DWORD *)a2 & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 1.8447e19)
  {
    OUTLINED_FUNCTION_8_0(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

{
  float v2;

  v2 = *a2;
  if ((~*(_DWORD *)a2 & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 9.2234e18)
  {
    OUTLINED_FUNCTION_8_0(a1);
    return;
  }
LABEL_7:
  __break(1u);
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(float *a1@<X0>, double *a2@<X8>)
{
  OUTLINED_FUNCTION_16_9(a2, *a1);
}

void static Transformer<>.transformer.getter(void (**a1)(float *a1@<X0>, double *a2@<X8>)@<X8>)
{
  *a1 = closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer;
  a1[1] = 0;
  OUTLINED_FUNCTION_1_23((uint64_t)a1);
}

_BYTE *closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<X0>(_BYTE *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;

  v2 = 1702195828;
  if (!*result)
    v2 = 0x65736C6166;
  v3 = 0xE500000000000000;
  if (*result)
    v3 = 0xE400000000000000;
  *a2 = v2;
  a2[1] = v3;
  return result;
}

uint64_t specialized Double.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE *v7;
  char v9;

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    v6 = v9;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a2);
    if ((a2 & 0x2000000000000000) != 0)
    {
      v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (v7 = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v4 = _StringObject.sharedUTF8.getter();
      }
      v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v4, v5, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_bridgeObjectRelease();
    }
  }
  if ((v6 & 1) != 0)
    return 0;
  else
    return 0;
}

unint64_t specialized Float.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE *v7;
  char v9;

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    v6 = v9;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a2);
    if ((a2 & 0x2000000000000000) != 0)
    {
      v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (v7 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v4 = _StringObject.sharedUTF8.getter();
      }
      v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v4, v5, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_bridgeObjectRelease();
    }
  }
  return (unint64_t)((v6 & 1) == 0) << 32;
}

unsigned __int8 closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  unsigned __int8 result;
  uint64_t v12;
  Swift::String v13;

  v2 = type metadata accessor for CharacterSet();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = String.lowercased()();
  static CharacterSet.whitespacesAndNewlines.getter();
  lazy protocol witness table accessor for type String and conformance String();
  v7 = StringProtocol.trimmingCharacters(in:)();
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  result = Bool.init(_:)(v10).value;
  if (result == 2)
  {
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    OUTLINED_FUNCTION_32_0();
    return OUTLINED_FUNCTION_4_10(v12, (uint64_t)"cannot parse Bool from String");
  }
  else
  {
    *a1 = result & 1;
  }
  return result;
}

uint64_t specialized closure #1 in Transformer.init(transform:)()
{
  uint64_t v0;

  lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
  swift_allocError();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_BYTE *)(v0 + 16) = 2;
  return swift_willThrow();
}

{
  uint64_t v0;
  uint64_t v1;

  lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
  v0 = OUTLINED_FUNCTION_32_0();
  return OUTLINED_FUNCTION_0_15(v0, v1);
}

{
  uint64_t v0;

  lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
  swift_allocError();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_BYTE *)(v0 + 16) = 2;
  swift_willThrow();
  return 0;
}

void specialized closure #1 in Transformer.init(transform:)()
{
  uint64_t v0;
  uint64_t v1;

  lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
  v0 = OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_0_15(v0, v1);
  OUTLINED_FUNCTION_3_16();
}

void closure #1 in closure #1 in Double.init<A>(_:)()
{
  BOOL *v0;
  uint64_t (*v1)(void);
  unsigned __int8 *v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  _BYTE *v8;

  OUTLINED_FUNCTION_25_8();
  v3 = *v2;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (v8 = (_BYTE *)v1()) != 0 && *v8 == 0;
  *v0 = v7;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

void specialized closure #1 in Transformer.init(transform:)(unsigned int *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_27_9(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _DWORD *v1;
  uint64_t v2;
  int v3;

  OUTLINED_FUNCTION_27_9(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_27_9(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _DWORD *v1;
  uint64_t v2;
  int v3;

  OUTLINED_FUNCTION_27_9(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

void specialized closure #1 in Transformer.init(transform:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_18_11(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_29_8(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_28_7(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_10_13(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _DWORD *v1;
  uint64_t v2;
  int v3;

  OUTLINED_FUNCTION_18_11(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _DWORD *v1;
  uint64_t v2;
  int v3;

  OUTLINED_FUNCTION_29_8(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _DWORD *v1;
  uint64_t v2;
  int v3;

  OUTLINED_FUNCTION_28_7(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _DWORD *v1;
  uint64_t v2;
  int v3;

  OUTLINED_FUNCTION_10_13(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_18_11(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_28_7(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_10_13(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _DWORD *v1;
  uint64_t v2;
  int v3;

  OUTLINED_FUNCTION_29_8(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _DWORD *v1;
  uint64_t v2;
  int v3;

  OUTLINED_FUNCTION_18_11(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _DWORD *v1;
  uint64_t v2;
  int v3;

  OUTLINED_FUNCTION_10_13(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _BYTE *v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_18_11(a1);
  v3 = specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3 & 1;
  OUTLINED_FUNCTION_3_16();
}

{
  _BYTE *v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_10_13(a1);
  v3 = specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3 & 1;
  OUTLINED_FUNCTION_3_16();
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_18_11(a1);
  v3 = specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
  {
    *v1 = v3;
    v1[1] = v4;
  }
  OUTLINED_FUNCTION_3_16();
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_29_8(a1);
  v3 = specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
  {
    *v1 = v3;
    v1[1] = v4;
  }
  OUTLINED_FUNCTION_3_16();
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_28_7(a1);
  v3 = specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
  {
    *v1 = v3;
    v1[1] = v4;
  }
  OUTLINED_FUNCTION_3_16();
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

{
  specialized closure #1 in Transformer.init(transform:)(a1);
}

void specialized closure #1 in Transformer.init(transform:)(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_26_9(a1);
  v3 = specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_26_9(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  _DWORD *v1;
  uint64_t v2;
  int v3;

  OUTLINED_FUNCTION_26_9(a1);
  specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
    *v1 = v3;
  OUTLINED_FUNCTION_3_16();
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_26_9(a1);
  v3 = specialized closure #1 in Transformer.init(transform:)();
  if (!v2)
  {
    *v1 = v3;
    v1[1] = v4;
  }
  OUTLINED_FUNCTION_3_16();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void partial apply for closure #1 in closure #1 in Float.init<A>(_:)()
{
  closure #1 in closure #1 in Double.init<A>(_:)();
}

void partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(_BYTE *a1@<X8>)
{
  partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  if (!v2)
    *a1 = v4;
  OUTLINED_FUNCTION_2();
}

void partial apply for closure #1 in closure #1 in Double.init<A>(_:)()
{
  closure #1 in closure #1 in Double.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_0_15(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 2;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_1_23(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t OUTLINED_FUNCTION_4_10@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a1 = v2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  *(_QWORD *)(a1 + 8) = (a2 - 32) | 0x8000000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_6_15()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_7_14()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_10_13(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void OUTLINED_FUNCTION_14_14(_DWORD *a1@<X8>)
{
  int v1;

  *a1 = v1;
}

void OUTLINED_FUNCTION_15_11(float *a1@<X8>, float a2@<S0>)
{
  *a1 = a2;
}

void OUTLINED_FUNCTION_16_9(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

uint64_t OUTLINED_FUNCTION_17_9()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_18_11(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void OUTLINED_FUNCTION_23_5(char *a1@<X8>)
{
  char v1;
  char v2;

  if (v1)
    v2 = 0;
  else
    v2 = 1;
  *a1 = v2;
}

uint64_t OUTLINED_FUNCTION_24_8()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_26_9(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t OUTLINED_FUNCTION_27_9(unsigned int *a1)
{
  return *a1;
}

float OUTLINED_FUNCTION_28_7(uint64_t a1)
{
  return *(float *)a1;
}

double OUTLINED_FUNCTION_29_8(uint64_t a1)
{
  return *(double *)a1;
}

uint64_t dispatch thunk of Plugin.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PluginCapabilityExposing.advertisedCapabilities()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PluginCapabilityExposing.exposedCapabilities()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of PluginCapabilityExposing.get(capability:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of PluginCapabilityExclusiveRegistration.exclusiveRegistration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t static IdleTracker.defaultTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultTimeout != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_7_15();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static IdleTracker.defaultTimeout);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void (*static IdleTracker.defaultAction.getter())()
{
  return implicit closure #1 in variable initialization expression of static IdleTracker.defaultAction;
}

void IdleTracker.__allocating_init(name:queue:timeout:timeoutAction:)()
{
  OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_12_12();
  IdleTracker.init(name:queue:timeout:timeoutAction:)();
  OUTLINED_FUNCTION_0_16();
}

void IdleTracker.init(name:queue:timeout:timeoutAction:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  Swift::String v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  Swift::String v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  objc_super v39;
  uint64_t v40[6];

  OUTLINED_FUNCTION_16_10();
  v37 = v1;
  v38 = v2;
  v36 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  OUTLINED_FUNCTION_35_5();
  OUTLINED_FUNCTION_3_17();
  MEMORY[0x1E0C80A78](v10, v11);
  OUTLINED_FUNCTION_6_16(v12, v34);
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  OUTLINED_FUNCTION_3_17();
  MEMORY[0x1E0C80A78](v14, v15);
  OUTLINED_FUNCTION_20_7();
  OUTLINED_FUNCTION_23_6();
  OUTLINED_FUNCTION_3_17();
  MEMORY[0x1E0C80A78](v16, v17);
  OUTLINED_FUNCTION_21_10();
  *(_QWORD *)(v0 + OBJC_IVAR___SUIdleTracker_timer) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR___SUIdleTracker_refs) = MEMORY[0x1E0DEE9E0];
  v18 = (uint64_t *)(v0 + OBJC_IVAR___SUIdleTracker_name);
  v35 = v9;
  *v18 = v9;
  v18[1] = (uint64_t)v7;
  v20 = OUTLINED_FUNCTION_24_9(v19, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v21 = (char *)OUTLINED_FUNCTION_2_16(v20);
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v9;
  v22._object = v7;
  String.append(_:)(v22);
  static DispatchQoS.default.getter();
  v40[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v13, MEMORY[0x1E0DEF828]);
  v5;
  OUTLINED_FUNCTION_18_12();
  OUTLINED_FUNCTION_26_10((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  v23 = OUTLINED_FUNCTION_22_8();
  OUTLINED_FUNCTION_13_13(v23, *MEMORY[0x1E0DEF8D0]);
  *(_QWORD *)&v21[OBJC_IVAR___SUIdleTracker_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v24 = &v21[OBJC_IVAR___SUIdleTracker_timeout];
  v25 = OUTLINED_FUNCTION_7_15();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v24, v36, v25);
  v27 = &v21[OBJC_IVAR___SUIdleTracker_timeoutAction];
  *(_QWORD *)v27 = v37;
  *((_QWORD *)v27 + 1) = v38;
  OUTLINED_FUNCTION_10_14();
  swift_retain();
  v28._countAndFlagsBits = v35;
  v28._object = v7;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29 = (void *)v40[0];
  v30 = type metadata accessor for DeadlockDetectingLock();
  OUTLINED_FUNCTION_8_16();
  v31 = OUTLINED_FUNCTION_36_4(v40[0], v40[1], (uint64_t)v40, (uint64_t)closure #1 in variable initialization expression of static DeadlockDetectingLock.defaultDeadlockAction);
  v32 = &v21[OBJC_IVAR___SUIdleTracker_lock];
  *((_QWORD *)v32 + 3) = v30;
  *((_QWORD *)v32 + 4) = &protocol witness table for DeadlockDetectingLock;
  *(_QWORD *)v32 = v31;

  v39.receiver = v21;
  v39.super_class = (Class)ObjC metadata update function for IdleTracker();
  v33 = objc_msgSendSuper2(&v39, sel_init);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_30_5();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v36, v25);
  OUTLINED_FUNCTION_3_3();
}

void IdleTracker.__allocating_init(lock:name:queue:timeout:timeoutAction:)()
{
  OUTLINED_FUNCTION_11_14();
  IdleTracker.init(lock:name:queue:timeout:timeoutAction:)();
  OUTLINED_FUNCTION_0_16();
}

void IdleTracker.init(lock:name:queue:timeout:timeoutAction:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  Swift::String v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  objc_super v37;
  char v38[13];
  char v39;
  __int16 v40;

  OUTLINED_FUNCTION_16_10();
  v35 = v1;
  v36 = v2;
  v33 = v3;
  v34 = v4;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = OUTLINED_FUNCTION_35_5();
  v31 = *(_QWORD *)(v11 - 8);
  v32 = v11;
  OUTLINED_FUNCTION_3_17();
  MEMORY[0x1E0C80A78](v12, v13);
  OUTLINED_FUNCTION_32_7();
  v30 = v14;
  type metadata accessor for OS_dispatch_queue.Attributes();
  v15 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  OUTLINED_FUNCTION_3_17();
  MEMORY[0x1E0C80A78](v16, v17);
  OUTLINED_FUNCTION_34();
  OUTLINED_FUNCTION_23_6();
  OUTLINED_FUNCTION_3_17();
  MEMORY[0x1E0C80A78](v18, v19);
  OUTLINED_FUNCTION_21_10();
  *(_QWORD *)&v0[OBJC_IVAR___SUIdleTracker_timer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___SUIdleTracker_refs] = MEMORY[0x1E0DEE9E0];
  v20 = (uint64_t *)&v0[OBJC_IVAR___SUIdleTracker_name];
  *v20 = v10;
  v20[1] = (uint64_t)v8;
  v29 = (void *)OUTLINED_FUNCTION_24_9(v21, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  strcpy(v38, "IdleTracker:");
  v39 = 0;
  v40 = -5120;
  v22 = v0;
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = v10;
  v23._object = v8;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  static DispatchQoS.default.getter();
  *(_QWORD *)v38 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v15, MEMORY[0x1E0DEF828]);
  v6;
  OUTLINED_FUNCTION_18_12();
  OUTLINED_FUNCTION_26_10((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v31 + 104))(v30, *MEMORY[0x1E0DEF8D0], v32);
  *(_QWORD *)&v22[OBJC_IVAR___SUIdleTracker_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v24 = &v22[OBJC_IVAR___SUIdleTracker_timeout];
  v25 = OUTLINED_FUNCTION_7_15();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v24, v33, v25);
  v27 = &v22[OBJC_IVAR___SUIdleTracker_timeoutAction];
  *(_QWORD *)v27 = v34;
  *((_QWORD *)v27 + 1) = v36;
  outlined init with copy of Transforming(v35, (uint64_t)&v22[OBJC_IVAR___SUIdleTracker_lock]);
  swift_retain();

  v37.receiver = v22;
  v37.super_class = (Class)ObjC metadata update function for IdleTracker();
  v28 = objc_msgSendSuper2(&v37, sel_init);
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_30_5();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v33, v25);
  __swift_destroy_boxed_opaque_existential_1(v35);
  OUTLINED_FUNCTION_3_3();
}

uint64_t static IdleTracker.defaultTimeoutSeconds.getter()
{
  return 180;
}

void IdleTracker.__allocating_init(name:queue:timeoutSeconds:timeoutAction:)()
{
  OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_12_12();
  IdleTracker.init(name:queue:timeoutSeconds:timeoutAction:)();
  OUTLINED_FUNCTION_0_16();
}

void IdleTracker.init(name:queue:timeoutSeconds:timeoutAction:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  Swift::String v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  Swift::String v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  objc_super v38;
  uint64_t v39;
  void *v40;

  OUTLINED_FUNCTION_16_10();
  v36 = v1;
  v37 = v2;
  v35 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  OUTLINED_FUNCTION_35_5();
  OUTLINED_FUNCTION_3_17();
  MEMORY[0x1E0C80A78](v10, v11);
  OUTLINED_FUNCTION_6_16(v12, v34);
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  OUTLINED_FUNCTION_3_17();
  MEMORY[0x1E0C80A78](v14, v15);
  OUTLINED_FUNCTION_14_15();
  type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_3_17();
  MEMORY[0x1E0C80A78](v16, v17);
  OUTLINED_FUNCTION_20_7();
  *(_QWORD *)(v0 + OBJC_IVAR___SUIdleTracker_timer) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR___SUIdleTracker_refs) = MEMORY[0x1E0DEE9E0];
  v18 = (uint64_t *)(v0 + OBJC_IVAR___SUIdleTracker_name);
  *v18 = v9;
  v18[1] = (uint64_t)v7;
  v20 = OUTLINED_FUNCTION_24_9(v19, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v21 = (char *)OUTLINED_FUNCTION_2_16(v20);
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v9;
  v22._object = v7;
  String.append(_:)(v22);
  static DispatchQoS.default.getter();
  v39 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v13, MEMORY[0x1E0DEF828]);
  v5;
  OUTLINED_FUNCTION_18_12();
  OUTLINED_FUNCTION_26_10((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  v23 = OUTLINED_FUNCTION_22_8();
  OUTLINED_FUNCTION_13_13(v23, *MEMORY[0x1E0DEF8D0]);
  *(_QWORD *)&v21[OBJC_IVAR___SUIdleTracker_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v24 = &v21[OBJC_IVAR___SUIdleTracker_timeout];
  *(_QWORD *)&v21[OBJC_IVAR___SUIdleTracker_timeout] = v35;
  v25 = *MEMORY[0x1E0DEF4A0];
  v26 = OUTLINED_FUNCTION_7_15();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v24, v25, v26);
  v27 = &v21[OBJC_IVAR___SUIdleTracker_timeoutAction];
  *(_QWORD *)v27 = v36;
  *((_QWORD *)v27 + 1) = v37;
  OUTLINED_FUNCTION_10_14();
  swift_retain();
  v28._countAndFlagsBits = v9;
  v28._object = v7;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29 = v40;
  v30 = type metadata accessor for DeadlockDetectingLock();
  OUTLINED_FUNCTION_8_16();
  v31 = OUTLINED_FUNCTION_36_4(v39, (uint64_t)v40, (uint64_t)&v39, (uint64_t)closure #1 in variable initialization expression of static DeadlockDetectingLock.defaultDeadlockAction);
  v32 = &v21[OBJC_IVAR___SUIdleTracker_lock];
  *((_QWORD *)v32 + 3) = v30;
  *((_QWORD *)v32 + 4) = &protocol witness table for DeadlockDetectingLock;
  *(_QWORD *)v32 = v31;

  v38.receiver = v21;
  v38.super_class = (Class)ObjC metadata update function for IdleTracker();
  v33 = objc_msgSendSuper2(&v38, sel_init);
  OUTLINED_FUNCTION_34_5();

  OUTLINED_FUNCTION_30_5();
  swift_release();
  OUTLINED_FUNCTION_3_3();
}

void IdleTracker.__allocating_init(name:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_11_14();
  IdleTracker.init(name:)(a1, a2);
}

void IdleTracker.init(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;

  v4 = OUTLINED_FUNCTION_7_15();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  OUTLINED_FUNCTION_34();
  v9 = v8 - v7;
  ObjectType = swift_getObjectType();
  if (one-time initialization token for defaultTimeout != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v4, (uint64_t)static IdleTracker.defaultTimeout);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, v11, v4);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, void (*)(), _QWORD))(ObjectType + 136))(a1, a2, 0, v9, implicit closure #1 in variable initialization expression of static IdleTracker.defaultAction, 0);
  swift_deallocPartialClassInstance();
  OUTLINED_FUNCTION_0_16();
}

uint64_t IdleTracker.idle.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD v19[4];

  OUTLINED_FUNCTION_4_11(OBJC_IVAR___SUIdleTracker_lock, v12, v14, v15, v16, v17);
  v0 = __swift_project_boxed_opaque_existential_1(v19, v19[3]);
  v6 = OUTLINED_FUNCTION_9_16((uint64_t)partial apply for closure #1 in IdleTracker.idle.getter, v1, MEMORY[0x1E0DEAFA0], (uint64_t)v0, v2, v3, v4, v5, v13);
  OUTLINED_FUNCTION_29_9(v6, v7, v8, v9, v10);
  return v18;
}

uint64_t closure #1 in IdleTracker.idle.getter@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + OBJC_IVAR___SUIdleTracker_refs;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(*(_QWORD *)v3 + 16) == 0;
  return result;
}

uint64_t IdleTracker.count.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  OUTLINED_FUNCTION_4_11(OBJC_IVAR___SUIdleTracker_lock, v7, v9, v10, v11, v12);
  v0 = __swift_project_boxed_opaque_existential_1(v14, v14[3]);
  OUTLINED_FUNCTION_9_16((uint64_t)partial apply for closure #1 in IdleTracker.count.getter, v1, MEMORY[0x1E0DEB418], (uint64_t)v0, v2, v3, v4, v5, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v13;
}

uint64_t closure #1 in IdleTracker.count.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + OBJC_IVAR___SUIdleTracker_refs;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  return result;
}

uint64_t static IdleTracker.defaultTrackingName.getter()
{
  return OUTLINED_FUNCTION_27_10();
}

uint64_t IdleTracker.track(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  outlined init with copy of Transforming(v2 + OBJC_IVAR___SUIdleTracker_lock, (uint64_t)v16);
  v5 = v17;
  v6 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  v12 = v2;
  v13 = a1;
  v14 = a2;
  v7 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))(v6 + 24);
  v8 = type metadata accessor for AnyCancellable();
  v7(&v15, partial apply for closure #1 in IdleTracker.track(name:), &v11, v8, v5, v6);
  v9 = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v9;
}

uint64_t closure #1 in IdleTracker.track(name:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t result;
  _QWORD v31[2];
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[5];

  v39 = a3;
  v38 = a2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v31 - v13;
  if (*(_QWORD *)&a1[OBJC_IVAR___SUIdleTracker_timer])
  {
    v36 = a4;
    if (one-time initialization token for logger != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.logger);
    v37 = a1;
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v40[0] = v33;
      v34 = v6;
      v35 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      *(_DWORD *)v18 = 136315138;
      v31[1] = v18 + 4;
      v32 = v18;
      v19 = v37;
      v20 = *(_QWORD *)&v37[OBJC_IVAR___SUIdleTracker_name];
      v21 = *(_QWORD *)&v37[OBJC_IVAR___SUIdleTracker_name + 8];
      swift_bridgeObjectRetain();
      v40[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v40);
      v11 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v6 = v34;
      swift_bridgeObjectRelease();
      v22 = v17;
      v23 = v32;
      _os_log_impl(&dword_1C2F2D000, v16, v22, "IdleTracker:%s detects active condition; cancelling existing timer",
        v32,
        0xCu);
      v24 = v33;
      swift_arrayDestroy();
      MEMORY[0x1C3BCEEB0](v24, -1, -1);
      MEMORY[0x1C3BCEEB0](v23, -1, -1);

    }
    else
    {

    }
    a4 = v36;
    IdleTracker.timer.setter(0);
  }
  UUID.init()();
  swift_beginAccess();
  v25 = v39;
  swift_bridgeObjectRetain();
  specialized Dictionary._Variant.setValue(_:forKey:)(v38, v25, (uint64_t)v14);
  swift_endAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v14, v6);
  v26 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v27 + v26, v11, v6);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  v28 = a1;
  v29 = AnyCancellable.init(_:)();
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  *a4 = v29;
  return result;
}

void IdleTracker.track()()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;

  v1 = OUTLINED_FUNCTION_27_10();
  v2 = (void *)MEMORY[0x1C3BCDDDC](v1);
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();

  OUTLINED_FUNCTION_31();
}

void IdleTracker.track(name:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_super v11;

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))(v1);
  swift_bridgeObjectRelease();
  v3 = (objc_class *)type metadata accessor for IdleTrackerActivity();
  v4 = (char *)objc_allocWithZone(v3);
  *(_QWORD *)&v4[OBJC_IVAR___SUIdleTrackerActivity_cancellable] = v2;
  v11.receiver = v4;
  v11.super_class = v3;
  OUTLINED_FUNCTION_28_8((uint64_t)v4, sel_init, v5, v6, v7, v8, v9, v10, v11);
  OUTLINED_FUNCTION_27_2();
}

void IdleTrackerActivity.__allocating_init(cancellable:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_super v10;

  v3 = (char *)OUTLINED_FUNCTION_11_14();
  *(_QWORD *)&v3[OBJC_IVAR___SUIdleTrackerActivity_cancellable] = a1;
  v10.receiver = v3;
  v10.super_class = v1;
  OUTLINED_FUNCTION_28_8((uint64_t)v3, sel_init, v4, v5, v6, v7, v8, v9, v10);
  OUTLINED_FUNCTION_27_2();
}

uint64_t one-time initialization function for defaultTimeout()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_7_15();
  __swift_allocate_value_buffer(v0, static IdleTracker.defaultTimeout);
  *(_QWORD *)__swift_project_value_buffer(v0, (uint64_t)static IdleTracker.defaultTimeout) = 180;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

void implicit closure #1 in variable initialization expression of static IdleTracker.defaultAction()
{
  ObjC metadata update function for IdleTracker();
  static IdleTracker.exitProcess()();
}

uint64_t type metadata accessor for IdleTracker()
{
  uint64_t result;

  result = type metadata singleton initialization cache for IdleTracker;
  if (!type metadata singleton initialization cache for IdleTracker)
    return swift_getSingletonMetadata();
  return result;
}

void static IdleTracker.exitProcess()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (one-time initialization token for logger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.logger);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)OUTLINED_FUNCTION_4_1();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1C2F2D000, v1, v2, "IdleTracker exiting process after idle timeout.", v3, 2u);
    OUTLINED_FUNCTION_1_1();
  }

  exit(0);
}

uint64_t IdleTracker.dump()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t *__return_ptr, uint64_t (*)@<X0>(_QWORD *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_4_11(OBJC_IVAR___SUIdleTracker_lock, v7[0], v7[1], v8, v9, v10);
  v1 = v12;
  v2 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  v8 = v0;
  v3 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(_QWORD *@<X8>), uint64_t *, uint64_t, uint64_t, uint64_t))(v2 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v3(&v10, partial apply for closure #1 in IdleTracker.dump(), v7, v4, v1, v2);
  v5 = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v5;
}

uint64_t closure #1 in IdleTracker.dump()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  swift_beginAccess();
  v2 = swift_bridgeObjectRetain();
  v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t IdleTracker.untrack(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_4_11(OBJC_IVAR___SUIdleTracker_lock, v11[0], v11[1], v12, v13, v14);
  v3 = v16;
  v4 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  v12 = v1;
  v13 = a1;
  v5 = (*(uint64_t (**)(uint64_t (*)(), uint64_t *, uint64_t, uint64_t, uint64_t))(v4 + 24))(partial apply for closure #1 in IdleTracker.untrack(_:), v11, MEMORY[0x1E0DEE9C0] + 8, v3, v4);
  return OUTLINED_FUNCTION_29_9(v5, v6, v7, v8, v9);
}

uint64_t closure #1 in IdleTracker.untrack(_:)()
{
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  return IdleTracker.scheduleTimerIfIdle()();
}

uint64_t IdleTracker.scheduleTimerIfIdle()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t result;
  uint64_t v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ObjectType;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  void (*v59)(_QWORD *, uint64_t);
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[20];
  uint64_t v82;
  uint64_t v83;

  OUTLINED_FUNCTION_16_10();
  v82 = v2;
  v83 = v3;
  v4 = v0;
  v79 = type metadata accessor for DispatchTime();
  v77 = *(_QWORD *)(v79 - 8);
  OUTLINED_FUNCTION_3_17();
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v76 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v9);
  v78 = (char *)&v63 - v10;
  v71 = type metadata accessor for DispatchWorkItemFlags();
  v75 = *(_QWORD *)(v71 - 8);
  OUTLINED_FUNCTION_3_17();
  MEMORY[0x1E0C80A78](v11, v12);
  OUTLINED_FUNCTION_32_7();
  v73 = v13;
  v72 = OUTLINED_FUNCTION_23_6();
  v14 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72, v15);
  OUTLINED_FUNCTION_14_15();
  v16 = type metadata accessor for OS_dispatch_source.TimerFlags();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  OUTLINED_FUNCTION_34();
  v21 = v20 - v19;
  v22 = OUTLINED_FUNCTION_7_15();
  v23 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v27 = (char *)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v28);
  v30 = (char *)&v63 - v29;
  v74 = v4;
  v31 = &v4[OBJC_IVAR___SUIdleTracker_refs];
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)v31 + 16))
  {
    v63 = v21;
    v64 = v17;
    v65 = v1;
    v66 = v14;
    v67 = v30;
    v68 = v27;
    v69 = v23;
    v70 = v22;
    if (one-time initialization token for logger != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.logger);
    v34 = (char *)v74;
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.info.getter();
    v37 = v36;
    v38 = os_log_type_enabled(v35, v36);
    v39 = (uint64_t)v67;
    if (v38)
    {
      v40 = OUTLINED_FUNCTION_4_1();
      LODWORD(v74) = v37;
      v41 = v40;
      v81[0] = OUTLINED_FUNCTION_4_1();
      *(_DWORD *)v41 = 136315394;
      v42 = *(_QWORD *)&v34[OBJC_IVAR___SUIdleTracker_name];
      v43 = *(_QWORD *)&v34[OBJC_IVAR___SUIdleTracker_name + 8];
      swift_bridgeObjectRetain();
      v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v81);
      OUTLINED_FUNCTION_17_10();
      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 12) = 2080;
      (*(void (**)(uint64_t, char *, uint64_t))(v69 + 16))(v39, &v34[OBJC_IVAR___SUIdleTracker_timeout], v70);
      v44 = String.init<A>(describing:)();
      v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v81);
      OUTLINED_FUNCTION_17_10();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F2D000, v35, (os_log_type_t)v74, "IdleTracker:%s detects idle condition; scheduling timer for %s",
        (uint8_t *)v41,
        0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_1();
    }

    v46 = v68;
    v47 = v64;
    OUTLINED_FUNCTION_24_9(v48, &lazy cache variable for type metadata for OS_dispatch_source);
    v81[0] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF938], MEMORY[0x1E0DEF948]);
    OUTLINED_FUNCTION_18_12();
    OUTLINED_FUNCTION_26_10(&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A]);
    v49 = v63;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    static OS_dispatch_source.makeTimerSource(flags:queue:)();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v49, v16);
    ObjectType = swift_getObjectType();
    v51 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v81[4] = (uint64_t)partial apply for closure #1 in IdleTracker.scheduleTimerIfIdle();
    v81[5] = v51;
    v81[0] = MEMORY[0x1E0C809B0];
    v81[1] = 1107296256;
    v81[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    v81[3] = (uint64_t)&block_descriptor_1;
    v52 = _Block_copy(v81);
    swift_retain();
    v53 = v65;
    static DispatchQoS.unspecified.getter();
    v54 = v73;
    default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v52);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v54, v71);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v53, v72);
    swift_release();
    swift_release();
    v55 = v76;
    static DispatchTime.now()();
    v56 = v78;
    DispatchTime.advanced(by:)();
    v57 = *(void (**)(char *, uint64_t))(v77 + 8);
    v58 = v79;
    v57(v55, v79);
    default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v39);
    default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v46);
    MEMORY[0x1C3BCE238](v56, v39, v46, ObjectType);
    v59 = *(void (**)(_QWORD *, uint64_t))(v69 + 8);
    v60 = v46;
    v61 = v70;
    v59(v60, v70);
    v59((_QWORD *)v39, v61);
    v57(v56, v58);
    OS_dispatch_source.resume()();
    v62 = swift_unknownObjectRetain();
    IdleTracker.timer.setter(v62);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in IdleTracker.idle.getter@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in IdleTracker.idle.getter(*(_QWORD *)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in IdleTracker.count.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in IdleTracker.count.getter(*(_QWORD *)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in IdleTracker.track(name:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in IdleTracker.track(name:)(*(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t type metadata accessor for IdleTrackerActivity()
{
  return objc_opt_self();
}

void closure #1 in IdleTracker.scheduleTimerIfIdle()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1C3BCEF88](v1);
  if (v2)
  {
    v3 = (void *)v2;
    IdleTracker.invokeTimeoutAction()();

  }
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  type metadata accessor for DispatchWorkItemFlags();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t default argument 1 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0DEF498];
  v3 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t default argument 2 of OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = 0;
  v2 = *MEMORY[0x1E0DEF480];
  v3 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t IdleTracker.invokeTimeoutAction()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_4_11(OBJC_IVAR___SUIdleTracker_lock, v9[0], v9[1], v10, v11, v12);
  v1 = v14;
  v2 = v15;
  __swift_project_boxed_opaque_existential_1(v13, v14);
  v10 = v0;
  v3 = (*(uint64_t (**)(uint64_t (*)(), uint64_t *, uint64_t, uint64_t, uint64_t))(v2 + 24))(partial apply for closure #1 in IdleTracker.invokeTimeoutAction(), v9, MEMORY[0x1E0DEE9C0] + 8, v1, v2);
  return OUTLINED_FUNCTION_29_9(v3, v4, v5, v6, v7);
}

uint64_t closure #1 in IdleTracker.invokeTimeoutAction()(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1 + OBJC_IVAR___SUIdleTracker_refs;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)v2 + 16))
    return (*(uint64_t (**)(uint64_t))(a1 + OBJC_IVAR___SUIdleTracker_timeoutAction))(result);
  return result;
}

uint64_t IdleTracker.timer.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___SUIdleTracker_timer) = a1;
  return swift_unknownObjectRelease();
}

id IdleTracker.__allocating_init()()
{
  return objc_msgSend(OUTLINED_FUNCTION_11_14(), sel_init);
}

void IdleTracker.init()()
{
  OUTLINED_FUNCTION_33_4();
  __break(1u);
}

id IdleTracker.__deallocating_deinit()
{
  return IdleTracker.__deallocating_deinit(0, type metadata accessor for IdleTracker);
}

id IdleTrackerActivity.init(cancellable:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_super v9;

  *(_QWORD *)&v1[OBJC_IVAR___SUIdleTrackerActivity_cancellable] = a1;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for IdleTrackerActivity();
  return OUTLINED_FUNCTION_28_8((uint64_t)v9.super_class, sel_init, v2, v3, v4, v5, v6, v7, v9);
}

void IdleTrackerActivity.init()()
{
  OUTLINED_FUNCTION_33_4();
  __break(1u);
}

id IdleTrackerActivity.__deallocating_deinit(uint64_t a1)
{
  return IdleTracker.__deallocating_deinit(a1, type metadata accessor for IdleTrackerActivity);
}

id IdleTracker.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t partial apply for closure #1 in IdleTracker.dump()@<X0>(_QWORD *a1@<X8>)
{
  return closure #1 in IdleTracker.dump()(a1);
}

uint64_t ObjC metadata update function for IdleTracker()
{
  return type metadata accessor for IdleTracker();
}

uint64_t type metadata completion function for IdleTracker()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for IdleTracker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdleTracker.__allocating_init(name:queue:timeout:timeoutAction:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of IdleTracker.__allocating_init(lock:name:queue:timeout:timeoutAction:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of IdleTracker.__allocating_init(name:queue:timeoutSeconds:timeoutAction:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of IdleTracker.idle.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of IdleTracker.count.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of IdleTracker.track(name:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of IdleTracker.track()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of IdleTracker.dump()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t method lookup function for IdleTrackerActivity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdleTrackerActivity.__allocating_init(cancellable:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t partial apply for closure #1 in IdleTracker.invokeTimeoutAction()()
{
  uint64_t v0;

  return closure #1 in IdleTracker.invokeTimeoutAction()(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for closure #1 in IdleTracker.untrack(_:)()
{
  return closure #1 in IdleTracker.untrack(_:)();
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)();
  v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    v8 = *v2;
    *v2 = 0x8000000000000000;
    v9 = *(_QWORD *)(v8 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<CodingUserInfoKey, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
    v10 = *(_QWORD *)(v13 + 48);
    v11 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v4, v11);
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v13 + 56) + 32 * v4), a1);
    _NativeDictionary._delete(at:)();
    *v2 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)()
{
  uint64_t *v0;
  uint64_t *v1;
  unint64_t v2;
  char v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v13;

  v1 = v0;
  swift_bridgeObjectRetain();
  v2 = specialized __RawDictionaryStorage.find<A>(_:)();
  v4 = v3;
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v1;
  v6 = *v1;
  *v1 = 0x8000000000000000;
  v7 = *(_QWORD *)(v6 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, String>);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v7);
  v8 = *(_QWORD *)(v13 + 48);
  v9 = type metadata accessor for UUID();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v2, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 16 * v2);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UUID and conformance UUID, v10, MEMORY[0x1E0CB09C8]);
  _NativeDictionary._delete(at:)();
  *v1 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1C2F64498()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1C2F644C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in IdleTracker.track(name:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return IdleTracker.untrack(_:)(v0 + ((v1 + 24) & ~v1));
}

uint64_t type metadata accessor for OS_dispatch_queue(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1C2F645B4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in IdleTracker.scheduleTimerIfIdle()()
{
  uint64_t v0;

  closure #1 in IdleTracker.scheduleTimerIfIdle()(v0);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(MEMORY[0x1C3BCEDD8](a3, v5), a1);
  }
  OUTLINED_FUNCTION_31();
}

void _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    atomic_store(MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEAF38], v3), a1);
  }
  OUTLINED_FUNCTION_31();
}

id OUTLINED_FUNCTION_2_16(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 216) = a1;
  strcpy((char *)(v2 - 128), "IdleTracker:");
  *(_BYTE *)(v2 - 115) = 0;
  *(_WORD *)(v2 - 114) = -5120;
  return v1;
}

uint64_t OUTLINED_FUNCTION_4_11@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  return outlined init with copy of Transforming(v6 + a1, (uint64_t)va);
}

id OUTLINED_FUNCTION_5_16()
{
  objc_class *v0;

  return objc_allocWithZone(v0);
}

uint64_t OUTLINED_FUNCTION_6_16@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OUTLINED_FUNCTION_7_15()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t OUTLINED_FUNCTION_8_16()
{
  uint64_t v0;

  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 112) = 0u;
  *(_QWORD *)(v0 - 96) = 0;
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_9_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v9)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  return v9(a1, &a9, a3, v10, v11);
}

void OUTLINED_FUNCTION_10_14()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 128) = 0x726F66206B636F6CLL;
  *(_QWORD *)(v0 - 120) = 0xE900000000000020;
}

id OUTLINED_FUNCTION_11_14()
{
  objc_class *v0;

  return objc_allocWithZone(v0);
}

uint64_t OUTLINED_FUNCTION_12_12()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_13_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 192) + 104))(*(_QWORD *)(v2 - 200), a2, *(_QWORD *)(v2 - 184));
}

uint64_t OUTLINED_FUNCTION_14_15()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_17_10()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_18_12()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_22_8()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_23_6()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t OUTLINED_FUNCTION_24_9(uint64_t a1, unint64_t *a2)
{
  return type metadata accessor for OS_dispatch_queue(0, a2);
}

void OUTLINED_FUNCTION_26_10(unint64_t *a1)
{
  uint64_t *v1;

  _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWlTm_0(a1, v1);
}

uint64_t OUTLINED_FUNCTION_27_10()
{
  return 0x756F6D796E6F6E61;
}

id OUTLINED_FUNCTION_28_8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  return objc_msgSendSuper2(&a9, a2);
}

uint64_t OUTLINED_FUNCTION_29_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)va);
}

void OUTLINED_FUNCTION_30_5()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_33_4()
{
  return _swift_stdlib_reportUnimplementedInitializer();
}

uint64_t OUTLINED_FUNCTION_34_5()
{
  return IdleTracker.scheduleTimerIfIdle()();
}

uint64_t OUTLINED_FUNCTION_35_5()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

_QWORD *OUTLINED_FUNCTION_36_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return DeadlockDetectingLock.init(name:wrapping:deadlockAction:)(a1, a2, a3, a4, 0);
}

uint64_t one-time initialization function for tailspinRequestQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v5, v6);
  v7 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v7, v8);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  v12 = 0;
  v9 = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  MEMORY[0x1C3BCE748](&v12, v5, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E0DEF8D0], v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static TailSpinManager.tailspinRequestQueue = result;
  return result;
}

unint64_t static TailSpinManager.tailspinDefaultDirectory.getter()
{
  return 0xD00000000000001FLL;
}

void static TailSpinManager.createTailSpinFile(fileName:suiteName:options:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, Class isa, void (*a6)(_QWORD, _QWORD, _QWORD), uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  const char *v26;
  uint64_t v27;
  os_log_type_t v28;
  _QWORD v29[6];

  if (!IsAppleInternalBuild())
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v27 = OUTLINED_FUNCTION_13();
    v23 = OUTLINED_FUNCTION_2_17(v27, (uint64_t)static Logger.logger);
    v28 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_1_24(v28))
    {
      v25 = (uint8_t *)OUTLINED_FUNCTION_0_17();
      *(_WORD *)v25 = 0;
      v26 = "TailSpinManager#createTailSpinFile refusing to generate tailspin file";
LABEL_21:
      _os_log_impl(&dword_1C2F2D000, v23, (os_log_type_t)a2, v26, v25, 2u);
      OUTLINED_FUNCTION_1_1();
    }
LABEL_22:

    a6(0, 0, 0);
    return;
  }
  v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v14 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v14)
    goto LABEL_13;
  v15 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v15 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v15)
  {
LABEL_13:
    if (one-time initialization token for logger != -1)
      swift_once();
    v22 = OUTLINED_FUNCTION_13();
    v23 = OUTLINED_FUNCTION_2_17(v22, (uint64_t)static Logger.logger);
    v24 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_1_24(v24))
    {
      v25 = (uint8_t *)OUTLINED_FUNCTION_0_17();
      *(_WORD *)v25 = 0;
      v26 = "TailSpinManager#createTailSpinFile invalid param(s) passed in";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v16 = objc_msgSend(objc_allocWithZone((Class)TailSpinHelper), sel_init);
  v17 = (void *)MEMORY[0x1C3BCDDDC](a1, a2);
  v18 = (void *)MEMORY[0x1C3BCDDDC](a3, a4);
  if (isa)
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (one-time initialization token for tailspinRequestQueue != -1)
    swift_once();
  v19 = static TailSpinManager.tailspinRequestQueue;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a6;
  *(_QWORD *)(v20 + 24) = a7;
  v29[4] = partial apply for closure #1 in static TailSpinManager.createTailSpinFile(fileName:suiteName:options:completion:);
  v29[5] = v20;
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1107296256;
  v29[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed String?) -> ();
  v29[3] = &block_descriptor_2;
  v21 = _Block_copy(v29);
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_dumpTailSpinOutputToFile_suiteName_options_queue_handler_, v17, v18, isa, v19, v21);
  _Block_release(v21);

}

uint64_t closure #1 in static TailSpinManager.createTailSpinFile(fileName:suiteName:options:completion:)(char a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD, uint64_t, unint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (a3)
    v6 = a2;
  else
    v6 = 4271950;
  if (a3)
    v7 = a3;
  else
    v7 = 0xE300000000000000;
  v8 = one-time initialization token for logger;
  swift_bridgeObjectRetain();
  if (v8 != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.logger);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v15 = v13;
    *(_DWORD *)v12 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 8) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F2D000, v10, v11, "TailSpinManager#createTailSpinFile status: %{BOOL}d, path: %s", (uint8_t *)v12, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1C3BCEEB0](v13, -1, -1);
    MEMORY[0x1C3BCEEB0](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  a4(a1 & 1, v6, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2F64EFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static TailSpinManager.createTailSpinFile(fileName:suiteName:options:completion:)(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return closure #1 in static TailSpinManager.createTailSpinFile(fileName:suiteName:options:completion:)(a1, a2, a3, *(void (**)(_QWORD, uint64_t, unint64_t))(v3 + 16));
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed String?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a3)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  swift_retain();
  v4(a2, v5, v7);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

void static TailSpinManager.deleteTailSpinFiles(suiteName:)(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  if (IsAppleInternalBuild())
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)TailSpinHelper), sel_init);
    oslog = MEMORY[0x1C3BCDDDC](a1, a2);
    if (one-time initialization token for tailspinRequestQueue != -1)
      swift_once();
    objc_msgSend(v4, sel_clearDirectory_queue_);

  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v5 = OUTLINED_FUNCTION_13();
    oslog = OUTLINED_FUNCTION_2_17(v5, (uint64_t)static Logger.logger);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)OUTLINED_FUNCTION_0_17();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1C2F2D000, oslog, v6, "TailSpinManager#createTailSpinFile refusing to delete tailspin files", v7, 2u);
      OUTLINED_FUNCTION_1_1();
    }
  }

}

ValueMetadata *type metadata accessor for TailSpinManager()
{
  return &type metadata for TailSpinManager;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes();
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEF830], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_17()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_1_24(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_2_17(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return Logger.logObject.getter();
}

uint64_t WeakBox.__allocating_init(_:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  WeakBox.init(_:)();
  return v0;
}

uint64_t key path setter for WeakBox.value : <A>WeakBox<A>(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 104);
  v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t WeakBox.value.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_25_0();
  return MEMORY[0x1C3BCEF88](v0 + 16);
}

uint64_t WeakBox.value.setter()
{
  OUTLINED_FUNCTION_25_0();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*WeakBox.value.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  OUTLINED_FUNCTION_25_0();
  v3[3] = MEMORY[0x1C3BCEF88](v1 + 16);
  return WeakBox.value.modify;
}

void WeakBox.value.modify(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t WeakBox.init(_:)()
{
  uint64_t v0;

  swift_unknownObjectWeakInit();
  OUTLINED_FUNCTION_25_0();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t WeakBox.deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t WeakBox.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t sub_1C2F653DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2F65410()
{
  return 8;
}

_QWORD *sub_1C2F6541C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for WeakBox()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for WeakBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakBox);
}

uint64_t method lookup function for WeakBox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WeakBox.value.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of WeakBox.value.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of WeakBox.value.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of WeakBox.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

void specialized static Logger.withSignpost<A>(name:log:completion:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_21_4();
  OUTLINED_FUNCTION_6_17(v2, v3, v4);
  OUTLINED_FUNCTION_64_1();
  MEMORY[0x1E0C80A78](v5, v6);
  if ((OUTLINED_FUNCTION_4_12() & 1) != 0)
  {
    v0;
    OUTLINED_FUNCTION_59_2();
    static os_signpost_type_t.begin.getter();
    OUTLINED_FUNCTION_2_15();
    OUTLINED_FUNCTION_3_18();
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_2_15();
    OUTLINED_FUNCTION_10_15(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_3_18();
  }
  OUTLINED_FUNCTION_0_9();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_21_4();
  v1 = v0;
  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  if ((OUTLINED_FUNCTION_4_12() & 1) != 0)
  {
    v1;
    OUTLINED_FUNCTION_59_2();
    static os_signpost_type_t.begin.getter();
    OUTLINED_FUNCTION_1_25();
    OUTLINED_FUNCTION_3_18();
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_1_25();
    OUTLINED_FUNCTION_10_15(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
  else
  {
    OUTLINED_FUNCTION_3_18();
  }
  OUTLINED_FUNCTION_0_9();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t result;
  Swift::Int v30;
  void (*v31)(char *, _QWORD);
  void (*v32)(char *);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t AssociatedTypeWitness;
  void (*v51)(char *, char *);
  uint64_t v52;
  char *v53;
  Swift::Int v54;
  uint64_t v55;
  char v56[32];
  uint64_t v57;

  v43 = a5;
  v44 = a8;
  v51 = a1;
  v52 = a2;
  v42 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v53 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v15 = (char *)&v40 - v14;
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(v19 - 8);
  v46 = v19;
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v41 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)&v40 - v24;
  v26 = dispatch thunk of Collection.count.getter();
  if (!v26)
    return static Array._allocateUninitialized(_:)();
  v27 = a4;
  v28 = v26;
  v57 = MEMORY[0x1C3BCE40C](v27);
  v47 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v28);
  v49 = a6;
  result = dispatch thunk of Collection.startIndex.getter();
  if ((v28 & 0x8000000000000000) == 0)
  {
    v30 = v28;
    v48 = v18;
    while (v30)
    {
      v54 = v30;
      v31 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
      v32 = *(void (**)(char *))(v11 + 16);
      v33 = v11;
      v34 = AssociatedTypeWitness;
      v32(v15);
      v31(v56, 0);
      v35 = v25;
      v36 = v55;
      v51(v15, v53);
      if (v36)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v34);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v25, v46);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v44, v53, v43);
      }
      v55 = 0;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v34);
      ContiguousArray.append(_:)();
      result = dispatch thunk of Collection.formIndex(after:)();
      v30 = v54 - 1;
      v11 = v33;
      if (v54 == 1)
      {
        v38 = v45;
        v37 = v46;
        v39 = v41;
        (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v41, v35, v46);
        _expectEnd<A>(of:is:)();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v37);
        return v57;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void PluginCatalog.packageCache.setter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v1 + 16) = a1;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_33();
}

uint64_t PluginCatalog.__allocating_init(finder:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  v6 = (*(uint64_t (**)(uint64_t))(v1 + 120))(v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v6;
}

void PluginCatalog.__allocating_init(packageCache:)(uint64_t a1)
{
  *(_QWORD *)(OUTLINED_FUNCTION_37() + 16) = a1;
  OUTLINED_FUNCTION_31();
}

uint64_t PluginCatalog.init(packageCache:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

void PluginCatalog.__allocating_init(packages:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_37();
  v0 = OUTLINED_FUNCTION_22_9();
  PluginCatalog.init(packages:)(v0);
  OUTLINED_FUNCTION_31();
}

uint64_t PluginCatalog.init(packages:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _BOOL8 v15;
  Swift::Int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29[2];
  _QWORD v30[5];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = a1 + 32;
    v4 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    while (1)
    {
      outlined init with copy of CacheDataSource(v3, (uint64_t)v30);
      v5 = v30[4];
      OUTLINED_FUNCTION_53_2(v30);
      v6 = OUTLINED_FUNCTION_22_9();
      v8 = v7(v6, v5);
      v10 = v9;
      outlined init with copy of CacheDataSource((uint64_t)v30, (uint64_t)v29);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v28 = v4;
      v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
      v14 = v4[2];
      v15 = (v13 & 1) == 0;
      v16 = v14 + v15;
      if (__OFADD__(v14, v15))
        break;
      v17 = v12;
      v18 = v13;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, PluginPackage>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v16))
      {
        v19 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
        if ((v18 & 1) != (v20 & 1))
          goto LABEL_17;
        v17 = v19;
      }
      v4 = v28;
      if ((v18 & 1) != 0)
      {
        v21 = v28[7] + 40 * v17;
        __swift_destroy_boxed_opaque_existential_1(v21);
        outlined init with take of Transforming(v29, v21);
      }
      else
      {
        v28[(v17 >> 6) + 8] |= 1 << v17;
        v22 = (uint64_t *)(v28[6] + 16 * v17);
        *v22 = v8;
        v22[1] = v10;
        outlined init with take of Transforming(v29, v28[7] + 40 * v17);
        v23 = v28[2];
        v24 = __OFADD__(v23, 1);
        v25 = v23 + 1;
        if (v24)
          goto LABEL_16;
        v28[2] = v25;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      v3 += 40;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        v1 = v27;
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_14:
    *(_QWORD *)(v1 + 16) = v4;
    return v1;
  }
  return result;
}

uint64_t PluginCatalog.getPluginPackage(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88);
  v8 = swift_bridgeObjectRetain();
  v9 = v7(v8);
  specialized Dictionary.subscript.getter(a1, a2, v9, a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PluginCatalog.getPlugin(id:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];
  __int128 v6;
  uint64_t v7;
  _QWORD v8[5];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v0 + 128))(v8);
  outlined init with copy of PluginPackage?((uint64_t)v8, (uint64_t)&v6);
  if (v7)
  {
    outlined init with take of Transforming(&v6, (uint64_t)v5);
    v1 = v5[3];
    v2 = v5[4];
    OUTLINED_FUNCTION_53_2(v5);
    v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  else
  {
    v3 = 0;
  }
  outlined destroy of CacheDataSource?((uint64_t)v8, &demangling cache variable for type metadata for PluginPackage?);
  return v3;
}

uint64_t PluginCatalog.deinit()
{
  uint64_t v0;

  OUTLINED_FUNCTION_51_2();
  return v0;
}

uint64_t PluginCatalog.__deallocating_deinit()
{
  OUTLINED_FUNCTION_51_2();
  return swift_deallocClassInstance();
}

uint64_t key path setter for PluginCapabilityCatalog.capabilityCache : <A>PluginCapabilityCatalog<A>(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 184);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t PluginCapabilityCatalog.capabilityCache.getter()
{
  OUTLINED_FUNCTION_25_0();
  return swift_bridgeObjectRetain();
}

void PluginCapabilityCatalog.capabilityCache.setter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v1 + 24) = a1;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_33();
}

uint64_t (*PluginCapabilityCatalog.capabilityCache.modify())()
{
  OUTLINED_FUNCTION_25_0();
  return SiriEnvironment.providers.modify;
}

void PluginCapabilityCatalog.__allocating_init(finder:)()
{
  _QWORD *v0;

  OUTLINED_FUNCTION_37();
  v0 = (_QWORD *)OUTLINED_FUNCTION_22_9();
  PluginCapabilityCatalog.init(finder:)(v0);
  OUTLINED_FUNCTION_31();
}

void PluginCapabilityCatalog.init(finder:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t AssociatedConformanceWitness;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  __int128 v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  NSObject *v93;
  os_log_type_t v94;
  _BOOL4 v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD v136[6];

  v2 = v1;
  v4 = 0;
  v6 = *(_QWORD *)(*v2 + 144);
  v5 = *(_QWORD *)(*v2 + 152);
  v120 = *v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  OUTLINED_FUNCTION_9_17();
  MEMORY[0x1E0C80A78](v10, v11);
  OUTLINED_FUNCTION_21_11();
  OUTLINED_FUNCTION_9_17();
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v99 - v15;
  MEMORY[0x1E0C80A78](v14, v17);
  OUTLINED_FUNCTION_21_11();
  v129 = v18;
  MEMORY[0x1E0C80A78](v19, v20);
  OUTLINED_FUNCTION_21_11();
  OUTLINED_FUNCTION_9_17();
  MEMORY[0x1E0C80A78](v21, v22);
  OUTLINED_FUNCTION_21_11();
  OUTLINED_FUNCTION_9_17();
  MEMORY[0x1E0C80A78](v23, v24);
  OUTLINED_FUNCTION_21_11();
  OUTLINED_FUNCTION_9_17();
  MEMORY[0x1E0C80A78](v25, v26);
  OUTLINED_FUNCTION_21_11();
  v131 = v27;
  MEMORY[0x1E0C80A78](v28, v29);
  OUTLINED_FUNCTION_21_11();
  v115 = v30;
  v99 = v31;
  MEMORY[0x1E0C80A78](v32, v33);
  OUTLINED_FUNCTION_60_2((uint64_t)&v99 - v34);
  v105 = type metadata accessor for Optional();
  v104 = *(_QWORD *)(v105 - 8);
  v36 = MEMORY[0x1E0C80A78](v105, v35);
  v106 = (char *)&v99 - v37;
  v118 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v36, v38);
  OUTLINED_FUNCTION_62_1();
  v123 = v39;
  MEMORY[0x1E0C80A78](v40, v41);
  OUTLINED_FUNCTION_60_2((uint64_t)&v99 - v42);
  v43 = type metadata accessor for Array();
  v121 = v5;
  v122 = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v101 = v2;
  swift_retain();
  v128 = v43;
  v135 = Dictionary.init()();
  v45 = a1[4];
  v100 = a1;
  OUTLINED_FUNCTION_53_2(a1);
  v46 = OUTLINED_FUNCTION_22_9();
  v48 = v47(v46, v45);
  v130 = AssociatedConformanceWitness;
  v134 = Set.init()();
  v49 = *(_QWORD *)(v48 + 16);
  v119 = v8;
  v114 = v16;
  v107 = v48;
  if (v49)
  {
    swift_bridgeObjectRetain();
    v124 = 0;
    v126 = 0;
    v125 = 0;
    v127 = 0;
    v50 = 0;
    v51 = v122;
    v52 = v128;
    v53 = (uint64_t)v106;
    v113 = 0;
    v103 = v49;
    v102 = v48 + 32;
    do
    {
      if (v50 >= *(_QWORD *)(v48 + 16))
      {
        __break(1u);
LABEL_53:
        __break(1u);
        JUMPOUT(0x1C2F66E84);
      }
      v109 = v50;
      outlined init with copy of CacheDataSource(v48 + 32 + 40 * v50, (uint64_t)v136);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage);
      if ((OUTLINED_FUNCTION_66_0() & 1) != 0)
      {
        OUTLINED_FUNCTION_65_1(v53, 0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v118 + 32))(v117, v53, v51);
        (*(void (**)(uint64_t))(v121 + 40))(v51);
        swift_bridgeObjectRetain();
        v54 = Array.startIndex.getter();
        OUTLINED_FUNCTION_34_2();
        v133 = v54;
        OUTLINED_FUNCTION_58_1();
      }
      OUTLINED_FUNCTION_65_1(v53, 1);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v53, v105);
      v50 = v109 + 1;
    }
    while (v109 + 1 != v49);
    OUTLINED_FUNCTION_2_0();
  }
  else
  {
    v124 = 0;
    v126 = 0;
    v125 = 0;
    v127 = 0;
    v52 = v128;
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_61_1();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_61_1();
  _NativeDictionary.makeIterator()();
  v129 = v136[3];
  v123 = v136[0];
  v117 = v136[1];
  v55 = v136[4];
  v118 = (unint64_t)(v136[2] + 64) >> 6;
  *(_QWORD *)&v56 = 136315394;
  v116 = v56;
  v111 = MEMORY[0x1E0DEE9B8] + 8;
  while (v55)
  {
    v131 = (v55 - 1) & v55;
    v57 = __clz(__rbit64(v55)) | (v129 << 6);
LABEL_27:
    v63 = *(_QWORD *)(v8 + 16);
    v64 = v112;
    OUTLINED_FUNCTION_25_9(v112, *(_QWORD *)(v123 + 48) + *(_QWORD *)(v8 + 72) * v57);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v16, v64, AssociatedTypeWitness);
    v65 = MEMORY[0x1C3BCDD88](&v132, v16, v135, AssociatedTypeWitness, v52, v130);
    v67 = (_QWORD *)v132;
    v68 = v122;
    if (!(_QWORD)v132)
    {
      v65 = (_QWORD *)static Array._allocateUninitialized(_:)();
      v67 = v65;
    }
    *(_QWORD *)&v132 = v67;
    MEMORY[0x1E0C80A78](v65, v66);
    v69 = v121;
    *(&v99 - 4) = v68;
    *(&v99 - 3) = v69;
    *(&v99 - 2) = *(_QWORD *)(v120 + 160);
    v70 = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEAF50], v52);
    v72 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PluginCapabilityCatalog.init(finder:), (uint64_t)(&v99 - 6), v52, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEDCE8], v70, MEMORY[0x1E0DEDD18], v71);
    v113 = v4;
    *(_QWORD *)&v132 = v72;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
    BidirectionalCollection<>.joined(separator:)();
    v74 = v73;
    OUTLINED_FUNCTION_34_2();
    swift_bridgeObjectRetain();
    v75 = Set.contains(_:)();
    OUTLINED_FUNCTION_2_0();
    if ((v75 & 1) != 0)
    {
      v76 = MEMORY[0x1C3BCDFB0](v67, v68);
      OUTLINED_FUNCTION_21_0();
      v77 = v108;
      if (v76 <= 1)
        goto LABEL_36;
      v16 = v114;
      if (one-time initialization token for logger != -1)
        swift_once();
      v78 = type metadata accessor for Logger();
      v79 = __swift_project_value_buffer(v78, (uint64_t)static Logger.logger);
      OUTLINED_FUNCTION_25_9(v77, (uint64_t)v16);
      OUTLINED_FUNCTION_15_0();
      v115 = v79;
      v80 = Logger.logObject.getter();
      v81 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v80, v81))
      {
        v82 = OUTLINED_FUNCTION_4_1();
        *(_QWORD *)&v132 = OUTLINED_FUNCTION_4_1();
        *(_DWORD *)v82 = v116;
        OUTLINED_FUNCTION_18_13();
        v83 = OUTLINED_FUNCTION_50_2();
        *(_QWORD *)(v82 + 4) = OUTLINED_FUNCTION_40_3(v83, v84);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_14_16();
        *(_WORD *)(v82 + 12) = 2080;
        OUTLINED_FUNCTION_15_0();
        *(_QWORD *)(v82 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v74, (uint64_t *)&v132);
        OUTLINED_FUNCTION_74_0();
        _os_log_impl(&dword_1C2F2D000, v80, v81, "Capability %s is marked exclusive, but multiple registrations were found: %s", (uint8_t *)v82, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_1_1();
      }
      v8 = v119;
      OUTLINED_FUNCTION_39_5(v77);

      OUTLINED_FUNCTION_12_5();
      v4 = v113;
      v93 = Logger.logObject.getter();
      v94 = static os_log_type_t.error.getter();
      v95 = OUTLINED_FUNCTION_37_4(v94);
      v52 = v128;
      if (v95)
      {
        v96 = (uint8_t *)OUTLINED_FUNCTION_4_1();
        *(_WORD *)v96 = 0;
        _os_log_impl(&dword_1C2F2D000, v93, v75, "All of the plugins for this capability will be ignored.", v96, 2u);
        OUTLINED_FUNCTION_1_1();
      }

      OUTLINED_FUNCTION_61_1();
      type metadata accessor for Dictionary();
      Dictionary.removeValue(forKey:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_39_5((uint64_t)v16);
      v55 = v131;
    }
    else
    {
      OUTLINED_FUNCTION_21_0();
LABEL_36:
      v85 = v110;
      v16 = v114;
      if (one-time initialization token for logger != -1)
        swift_once();
      v86 = type metadata accessor for Logger();
      __swift_project_value_buffer(v86, (uint64_t)static Logger.logger);
      OUTLINED_FUNCTION_25_9(v85, (uint64_t)v16);
      OUTLINED_FUNCTION_15_0();
      v87 = Logger.logObject.getter();
      v88 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_37_4(v88))
      {
        v89 = OUTLINED_FUNCTION_4_1();
        *(_QWORD *)&v132 = OUTLINED_FUNCTION_4_1();
        *(_DWORD *)v89 = v116;
        OUTLINED_FUNCTION_18_13();
        v90 = OUTLINED_FUNCTION_50_2();
        *(_QWORD *)(v89 + 4) = OUTLINED_FUNCTION_40_3(v90, v91);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_14_16();
        *(_WORD *)(v89 + 12) = 2080;
        OUTLINED_FUNCTION_15_0();
        *(_QWORD *)(v89 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v74, (uint64_t *)&v132);
        OUTLINED_FUNCTION_74_0();
        _os_log_impl(&dword_1C2F2D000, v87, v75, "Capability %s is supported by: %s", (uint8_t *)v89, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_1_1();
      }
      OUTLINED_FUNCTION_12_5();

      v8 = v119;
      v92 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
      v92(v85, AssociatedTypeWitness);
      v92((uint64_t)v16, AssociatedTypeWitness);
      v4 = v113;
      v52 = v128;
      v55 = v131;
    }
  }
  if (__OFADD__(v129, 1))
    goto LABEL_53;
  OUTLINED_FUNCTION_35_6();
  if (v58 != v59)
  {
    OUTLINED_FUNCTION_34_6();
    if (!v61)
    {
      OUTLINED_FUNCTION_36_5();
      if (v58 == v59)
        goto LABEL_51;
      OUTLINED_FUNCTION_33_5();
      if (v61)
        goto LABEL_25;
      OUTLINED_FUNCTION_36_5();
      if (v58 == v59)
        goto LABEL_51;
      OUTLINED_FUNCTION_33_5();
      if (v61)
        goto LABEL_25;
      OUTLINED_FUNCTION_36_5();
      if (v58 == v59)
        goto LABEL_51;
      OUTLINED_FUNCTION_33_5();
      if (v61)
      {
LABEL_25:
        v60 = v62;
      }
      else
      {
        OUTLINED_FUNCTION_35_6();
        if (v58 == v59)
          goto LABEL_51;
        OUTLINED_FUNCTION_34_6();
        if (!v61)
        {
          do
          {
            OUTLINED_FUNCTION_35_6();
            if (v58 == v59)
              goto LABEL_51;
            OUTLINED_FUNCTION_34_6();
            v98 = v97 + 1;
          }
          while (!v61);
          v60 = v98 - 1;
        }
      }
    }
    v131 = (v61 - 1) & v61;
    v57 = __clz(__rbit64(v61)) + (v60 << 6);
    v129 = v60;
    goto LABEL_27;
  }
LABEL_51:
  swift_release();
  swift_bridgeObjectRelease();
  v101[3] = v135;
  OUTLINED_FUNCTION_15_0();
  swift_release();
  PluginCatalog.init(packages:)(v107);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
  OUTLINED_FUNCTION_29_10();
  OUTLINED_FUNCTION_46_2();
  OUTLINED_FUNCTION_3_3();
}

uint64_t PluginCapabilityCatalog.getPackages(capability:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v8;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 176))();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Array();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x1C3BCDD88](&v8, a1, v3, AssociatedTypeWitness, v5, AssociatedConformanceWitness);
  OUTLINED_FUNCTION_2_0();
  result = v8;
  if (!v8)
    return static Array._allocateUninitialized(_:)();
  return result;
}

uint64_t PluginCapabilityCatalog.getAll(capability:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(void))(*(_QWORD *)v0 + 208))();
  v1 = type metadata accessor for Array();
  MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEAF38], v1);
  v2 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  return v2;
}

void static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void (*v42)(__int128 *, _QWORD);
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[7];
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  _QWORD v69[7];

  v5 = v4;
  v63 = a4;
  v60 = a1;
  v56 = OUTLINED_FUNCTION_41_2();
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56, v8);
  v57 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  OUTLINED_FUNCTION_62_1();
  v61 = v13;
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)v54 - v17;
  v19 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v16, v20);
  v22 = (char *)v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v62 = a2;
  v59 = v23;
  v23((uint64_t)v18, a2, v10);
  v24 = OUTLINED_FUNCTION_43_3();
  v58 = v10;
  if (v24 == 1)
  {
    v25 = OUTLINED_FUNCTION_42_3();
  }
  else
  {
    v54[6] = v11;
    v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v22, v18, a3);
    if (one-time initialization token for pluginLoaderLog != -1)
      v27 = swift_once();
    MEMORY[0x1E0C80A78](v27, v28);
    v29 = v5[18];
    v30 = v5[19];
    v54[-6] = v29;
    v54[-5] = a3;
    v31 = v5[20];
    v54[-4] = v30;
    v54[-3] = v31;
    v54[-2] = v63;
    v54[-1] = v22;
    specialized static Logger.withSignpost<A>(name:log:completion:)();
    v32 = v65;
    v33 = v22;
    if (v65 >> 60 != 15)
    {
      v34 = v31;
      v54[4] = v33;
      v54[5] = v19;
      v35 = v64;
      type metadata accessor for PropertyListDecoder();
      OUTLINED_FUNCTION_18_1();
      v54[3] = v35;
      outlined copy of Data._Representation(v35, v32);
      v54[2] = PropertyListDecoder.init()();
      v54[1] = v32;
      if (one-time initialization token for catalogPackageInflator != -1)
        swift_once();
      v36 = v56;
      v37 = __swift_project_value_buffer(v56, (uint64_t)static CodingUserInfoKey.catalogPackageInflator);
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v57, v37, v36);
      v38 = (_QWORD *)OUTLINED_FUNCTION_37();
      v38[2] = v29;
      v38[3] = a3;
      v38[4] = v30;
      v38[5] = v34;
      v39 = v63;
      v38[6] = v63;
      v40 = v30;
      v41 = (_QWORD *)OUTLINED_FUNCTION_37();
      v41[2] = v29;
      v41[3] = a3;
      v41[4] = v40;
      v41[5] = v34;
      v41[6] = v39;
      v41[7] = partial apply for closure #2 in static PluginCapabilityCatalog.load<A>(finder:cache:);
      v41[8] = v38;
      type metadata accessor for Optional();
      v69[3] = swift_getFunctionTypeMetadata1();
      v69[0] = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out A?);
      v69[1] = v41;
      v42 = (void (*)(__int128 *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify();
      specialized Dictionary.subscript.setter((uint64_t)v69);
      v42(&v66, 0);
      v43 = type metadata accessor for PluginCapabilityCatalog(0, v29, v40, v34);
      MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PluginCapabilityCatalog<A>, v43);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      OUTLINED_FUNCTION_54_2();
      OUTLINED_FUNCTION_8_17();
      goto LABEL_19;
    }
    v25 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, a3);
  }
  if (one-time initialization token for pluginLoaderLog != -1)
    v25 = swift_once();
  v44 = (void *)static Logger.pluginLoaderLog;
  MEMORY[0x1E0C80A78](v25, v26);
  v45 = v5[18];
  v46 = v5[19];
  v54[-6] = v45;
  v54[-5] = a3;
  v47 = v5[20];
  v54[-4] = v46;
  v54[-3] = v47;
  v48 = v60;
  v54[-2] = v63;
  v54[-1] = v48;
  type metadata accessor for PluginCapabilityCatalog(0, v45, v46, v47);
  static Logger.withSignpost<A>(name:log:completion:)((uint64_t)"FindPlugins", 11, 2, v44);
  v49 = v64;
  v59(v61, v62, v58);
  if (OUTLINED_FUNCTION_43_3() == 1)
  {
    OUTLINED_FUNCTION_42_3();
LABEL_17:
    v68 = 0;
    v66 = 0u;
    v67 = 0u;
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CacheDataSink);
  if (!OUTLINED_FUNCTION_66_0())
    goto LABEL_17;
  if (!*((_QWORD *)&v67 + 1))
  {
LABEL_18:
    outlined destroy of CacheDataSource?((uint64_t)&v66, &demangling cache variable for type metadata for CacheDataSink?);
    goto LABEL_19;
  }
  outlined init with take of Transforming(&v66, (uint64_t)v69);
  type metadata accessor for PropertyListEncoder();
  OUTLINED_FUNCTION_18_1();
  v50 = PropertyListEncoder.init()();
  v51 = dispatch thunk of PropertyListEncoder.outputFormat.setter();
  MEMORY[0x1E0C80A78](v51, v52);
  v53 = v63;
  v54[-6] = a3;
  v54[-5] = v53;
  v54[-4] = v50;
  v54[-3] = v49;
  v54[-2] = v69;
  specialized static Logger.withSignpost<A>(name:log:completion:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
  swift_release();
LABEL_19:
  OUTLINED_FUNCTION_3_3();
}

uint64_t closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X5>, uint64_t *a3@<X8>)
{
  void *v3;
  uint64_t result;
  unint64_t v6;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  if (v3)
  {

    result = 0;
    v6 = 0xF000000000000000;
  }
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t CodingUserInfoKey.catalogPackageInflator.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for catalogPackageInflator != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_41_2();
  return __swift_project_value_buffer(v0, (uint64_t)static CodingUserInfoKey.catalogPackageInflator);
}

uint64_t closure #2 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  int v7;
  _QWORD v9[5];

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24))(v9, a1, a2, a3, a4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage?);
  v7 = swift_dynamicCast();
  return __swift_storeEnumTagSinglePayload(a5, v7 ^ 1u, 1, a3);
}

void closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  _BYTE v8[40];

  type metadata accessor for PluginCapabilityCatalog(0, a2, a3, a4);
  outlined init with copy of CacheDataSource(a1, (uint64_t)v8);
  PluginCapabilityCatalog.__allocating_init(finder:)();
  *a5 = v7;
}

uint64_t closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = type metadata accessor for PluginCapabilityCatalog(0, *(_QWORD *)(*(_QWORD *)a2 + 144), *(_QWORD *)(*(_QWORD *)a2 + 152), *(_QWORD *)(*(_QWORD *)a2 + 160));
  MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PluginCapabilityCatalog<A>, v5);
  result = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (!v3)
  {
    v8 = result;
    v9 = v7;
    v10 = a3[3];
    v11 = a3[4];
    __swift_project_boxed_opaque_existential_1(a3, v10);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v11 + 8))(v8, v9, v10, v11);
    return outlined consume of Data._Representation(v8, v9);
  }
  return result;
}

void static PluginCapabilityCatalog.load(finder:)(uint64_t a1)
{
  char v1;

  v1 = 0;
  static PluginCapabilityCatalog.load<A>(finder:cache:)(a1, (uint64_t)&v1, (uint64_t)&type metadata for NullCacheDataSource, (uint64_t)&protocol witness table for NullCacheDataSource);
}

uint64_t PluginCapabilityCatalog.advertisedCapabilities()()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(void))(*(_QWORD *)v0 + 176))();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getAssociatedConformanceWitness();
  OUTLINED_FUNCTION_22_9();
  OUTLINED_FUNCTION_44_2();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_44_2();
  v1 = type metadata accessor for Dictionary.Keys();
  MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DE9ED0], v1);
  return Array.init<A>(_:)();
}

uint64_t PluginCapabilityCatalog.get(capability:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 216))();
  if (*(_QWORD *)(v3 + 16))
  {
    outlined init with copy of Any(v3 + 32, (uint64_t)a1);
  }
  else
  {
    *a1 = 0u;
    a1[1] = 0u;
  }
  return swift_bridgeObjectRelease();
}

unint64_t PluginCapabilityCatalog.CodingKeys.init(rawValue:)(Swift::String string)
{
  unint64_t v1;
  void *object;
  Swift::String v3;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PluginCapabilityCatalog.CodingKeys.init(rawValue:), v3);
  OUTLINED_FUNCTION_22_9();
  swift_bridgeObjectRelease();
  if (v1 >= 3)
    return 3;
  else
    return v1;
}

uint64_t PluginCapabilityCatalog.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t PluginCapabilityCatalog.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t PluginCapabilityCatalog.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return OUTLINED_FUNCTION_11_15();
  if (a1 == 1)
    return 0x696C696261706163;
  return 0x736567616B636170;
}

uint64_t PluginCapabilityCatalog.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return OUTLINED_FUNCTION_11_15();
  if (a1 == 1)
    return 0x696C696261706163;
  return 0x736567616B636170;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PluginCapabilityCatalog<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PluginCapabilityCatalog<A>.CodingKeys, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PluginCapabilityCatalog<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PluginCapabilityCatalog<A>.CodingKeys, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PluginCapabilityCatalog<A>.CodingKeys()
{
  MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PluginCapabilityCatalog<A>.CodingKeys);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PluginCapabilityCatalog<A>.CodingKeys()
{
  MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PluginCapabilityCatalog<A>.CodingKeys);
  return RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PluginCapabilityCatalog<A>.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = PluginCapabilityCatalog.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PluginCapabilityCatalog<A>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = PluginCapabilityCatalog.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PluginCapabilityCatalog<A>.CodingKeys()
{
  char *v0;

  return PluginCapabilityCatalog.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PluginCapabilityCatalog<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = PluginCapabilityCatalog.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PluginCapabilityCatalog<A>.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginCapabilityCatalog<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PluginCapabilityCatalog<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PluginCapabilityCatalog<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PluginCapabilityCatalog<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

void PluginCapabilityCatalog.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  char v37;

  OUTLINED_FUNCTION_21_4();
  v34 = v0;
  v35 = v1;
  v4 = v3;
  v5 = OUTLINED_FUNCTION_47_2();
  v32 = v7;
  v33 = v6;
  v31 = v8;
  v9 = type metadata accessor for PluginCapabilityCatalog.CodingKeys(v5, v6, v7, v8);
  MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PluginCapabilityCatalog<A>.CodingKeys, v9);
  v10 = type metadata accessor for KeyedEncodingContainer();
  OUTLINED_FUNCTION_63_1();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v27 - v13;
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v16 = objc_msgSend(v15, sel_operatingSystemVersionString);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v35;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v17)
  {
    OUTLINED_FUNCTION_45_3((uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    swift_bridgeObjectRelease();
  }
  else
  {
    v30 = v2;
    v18 = swift_bridgeObjectRelease();
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 176))(v18);
    v29 = &v27;
    MEMORY[0x1E0C80A78](v28, v19);
    v20 = v32;
    *(&v27 - 4) = v33;
    *(&v27 - 3) = v20;
    *(&v27 - 2) = v31;
    OUTLINED_FUNCTION_61_1();
    swift_getAssociatedTypeWitness();
    type metadata accessor for Array();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v35 = v10;
    swift_getAssociatedConformanceWitness();
    Dictionary.mapValues<A>(_:)();
    swift_bridgeObjectRelease();
    v37 = 1;
    v21 = type metadata accessor for Dictionary();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    v36[0] = AssociatedConformanceWitness;
    v36[1] = v23;
    MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEA0B8], v21, v36);
    OUTLINED_FUNCTION_49_1();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v24 = swift_bridgeObjectRelease();
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 88))(v24);
    specialized _NativeDictionary.mapValues<A>(_:)(v25);
    swift_bridgeObjectRelease();
    v37 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_49_1();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v26 = v30;
    swift_release();
    OUTLINED_FUNCTION_45_3((uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  }
  OUTLINED_FUNCTION_0_9();
}

uint64_t closure #1 in PluginCapabilityCatalog.encode(to:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[6];

  v6 = *a1;
  v11[4] = a4;
  v11[5] = v6;
  v11[2] = a2;
  v11[3] = a3;
  v7 = type metadata accessor for Array();
  v8 = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEAF50], v7);
  result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in PluginCapabilityCatalog.encode(to:), (uint64_t)v11, v7, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  *a5 = result;
  return result;
}

uint64_t PluginCapabilityCatalog.__allocating_init(from:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  PluginCapabilityCatalog.init(from:)();
  return v0;
}

void PluginCapabilityCatalog.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  OUTLINED_FUNCTION_21_4();
  v3 = v0;
  v5 = v4;
  v6 = OUTLINED_FUNCTION_47_2();
  v76 = v7;
  v70 = v8;
  v71 = v9;
  v10 = type metadata accessor for PluginCapabilityCatalog.CodingKeys(v6, v7, v8, v9);
  MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PluginCapabilityCatalog<A>.CodingKeys, v10);
  v68 = type metadata accessor for KeyedDecodingContainer();
  OUTLINED_FUNCTION_63_1();
  MEMORY[0x1E0C80A78](v11, v12);
  v69 = (char *)&v62 - v13;
  v14 = v5[3];
  v15 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v14);
  OUTLINED_FUNCTION_22_9();
  swift_retain();
  v16 = MEMORY[0x1C3BCE700](v14, v15);
  if (one-time initialization token for catalogPackageInflator != -1)
    swift_once();
  v17 = type metadata accessor for CodingUserInfoKey();
  __swift_project_value_buffer(v17, (uint64_t)static CodingUserInfoKey.catalogPackageInflator);
  specialized Dictionary.subscript.getter(v16, &v74);
  OUTLINED_FUNCTION_2_0();
  v18 = v70;
  if (!v75)
  {
    outlined destroy of CacheDataSource?((uint64_t)&v74, &demangling cache variable for type metadata for Any?);
    goto LABEL_8;
  }
  type metadata accessor for Optional();
  swift_getFunctionTypeMetadata1();
  v19 = swift_dynamicCast();
  v20 = v71;
  if (!v19)
  {
LABEL_8:
    lazy protocol witness table accessor for type PluginCatalogError and conformance PluginCatalogError();
    OUTLINED_FUNCTION_32_0();
    *v22 = 0u;
    v22[1] = 0u;
    swift_willThrow();
    goto LABEL_10;
  }
  v66 = v2;
  v67 = v3;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v76;
  *(_QWORD *)(v21 + 24) = v18;
  *(_QWORD *)(v21 + 32) = v20;
  *(_OWORD *)(v21 + 40) = v73;
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    swift_release();
  }
  else
  {
    v65 = v21;
    LOBYTE(v74) = 0;
    v27 = KeyedDecodingContainer.decode(_:forKey:)();
    v29 = v28;
    v30 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    v31 = objc_msgSend(v30, sel_operatingSystemVersionString);

    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

    v35 = v32;
    v36 = v27 == v32 && v29 == v34;
    v37 = v70;
    v38 = v27;
    v39 = v67;
    if (v36 || (v40 = v38, v64 = v35, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_getAssociatedTypeWitness();
      v41 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
      OUTLINED_FUNCTION_56_2();
      v64 = v41;
      v42 = type metadata accessor for Dictionary();
      LOBYTE(v73) = 1;
      v43 = OUTLINED_FUNCTION_56_2();
      lazy protocol witness table accessor for type [String] and conformance <A> [A](lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
      v72[0] = v43;
      v72[1] = v44;
      MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEA0D8], v42, v72);
      OUTLINED_FUNCTION_24_10();
      v45 = KeyedDecodingContainer.decode<A>(_:forKey:)();
      v63 = &v62;
      MEMORY[0x1E0C80A78](v45, v46);
      *(&v62 - 6) = v76;
      *(&v62 - 5) = v37;
      *(&v62 - 4) = v71;
      *(&v62 - 3) = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out A?);
      *(&v62 - 2) = v65;
      type metadata accessor for Array();
      v47 = Dictionary.compactMapValues<A>(_:)();
      OUTLINED_FUNCTION_2_0();
      *(_QWORD *)(v39 + 24) = v47;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
      LOBYTE(v73) = 2;
      lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
      OUTLINED_FUNCTION_24_10();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v57 = OUTLINED_FUNCTION_12_2();
      v58 = v74;
      MEMORY[0x1E0C80A78](v57, v59);
      *(&v62 - 6) = v76;
      *(&v62 - 5) = v37;
      *(&v62 - 4) = v71;
      *(&v62 - 3) = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out A?);
      *(&v62 - 2) = v65;
      specialized Dictionary.compactMapValues<A>(_:)((void (*)(__int128 *__return_ptr, _QWORD *))partial apply for closure #2 in PluginCapabilityCatalog.init(from:), (uint64_t)(&v62 - 8), v58);
      v61 = v60;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_26_11();
      swift_release();
      *(_QWORD *)(v39 + 16) = v61;
      OUTLINED_FUNCTION_77_0();
      goto LABEL_11;
    }
    v48 = v34;
    if (one-time initialization token for loader != -1)
      swift_once();
    v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.loader);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v50 = Logger.logObject.getter();
    v51 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = swift_slowAlloc();
      v63 = (uint64_t *)v29;
      v53 = v52;
      v62 = swift_slowAlloc();
      *(_QWORD *)&v74 = v62;
      *(_DWORD *)v53 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, (unint64_t)v63, (uint64_t *)&v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v53 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v48, (uint64_t *)&v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F2D000, v50, v51, "Not using cached plugin information, as it is from %s and we are running %s.", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_1();
    }

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v54 = v40;
    v55 = v64;
    lazy protocol witness table accessor for type PluginCatalogError and conformance PluginCatalogError();
    OUTLINED_FUNCTION_32_0();
    *v56 = v55;
    v56[1] = v48;
    v56[2] = v54;
    v56[3] = v29;
    swift_willThrow();
    OUTLINED_FUNCTION_12_2();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v69, v68);
  }
LABEL_10:
  OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_44_2();
  type metadata accessor for PluginCapabilityCatalog(v23, v24, v25, v26);
  swift_deallocPartialClassInstance();
LABEL_11:
  OUTLINED_FUNCTION_0_9();
}

uint64_t closure #1 in PluginCapabilityCatalog.init(from:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [String] and conformance [A]);
  result = Sequence.compactMap<A>(_:)();
  *a1 = result;
  return result;
}

void specialized Dictionary.compactMapValues<A>(_:)(void (*a1)(__int128 *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t i;
  unint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35[2];
  __int128 v36[2];
  _QWORD v37[2];
  _QWORD v38[6];
  uint64_t v39;

  v4 = MEMORY[0x1E0DEE9E0];
  v39 = MEMORY[0x1E0DEE9E0];
  specialized _NativeDictionary.makeIterator()(v38, a3);
  v31 = v38[0];
  v5 = v38[3];
  v6 = v38[4];
  v28 = (unint64_t)(v38[2] + 64) >> 6;
  v29 = v38[1];
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_3;
LABEL_2:
  v32 = (v6 - 1) & v6;
  v7 = __clz(__rbit64(v6)) | (v5 << 6);
  for (i = v5; ; v7 = __clz(__rbit64(v9)) + (i << 6))
  {
    v11 = (uint64_t *)(*(_QWORD *)(v31 + 48) + 16 * v7);
    v13 = *v11;
    v12 = v11[1];
    v14 = (_QWORD *)(*(_QWORD *)(v31 + 56) + 16 * v7);
    v15 = v14[1];
    v37[0] = *v14;
    v37[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(&v33, v37);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_38:
      outlined consume of [String : Data].Iterator._Variant();
      return;
    }
    if (!v34)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of CacheDataSource?((uint64_t)&v33, &demangling cache variable for type metadata for PluginPackage?);
      goto LABEL_29;
    }
    outlined init with take of Transforming(&v33, (uint64_t)v36);
    outlined init with take of Transforming(v36, (uint64_t)v35);
    if (*(_QWORD *)(v4 + 24) <= *(_QWORD *)(v4 + 16))
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
      v4 = v39;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    v16 = Hasher._finalize()();
    v17 = v4 + 64;
    v18 = -1 << *(_BYTE *)(v4 + 32);
    v19 = v16 & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v4 + 64 + 8 * (v19 >> 6))) == 0)
      break;
    v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v4 + 64 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_28:
    *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v26 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v21);
    *v26 = v13;
    v26[1] = v12;
    outlined init with take of Transforming(v35, *(_QWORD *)(v4 + 56) + 40 * v21);
    ++*(_QWORD *)(v4 + 16);
    swift_bridgeObjectRelease();
LABEL_29:
    v5 = i;
    v6 = v32;
    if (v32)
      goto LABEL_2;
LABEL_3:
    i = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_40;
    if (i >= v28)
      goto LABEL_38;
    v9 = *(_QWORD *)(v29 + 8 * i);
    if (!v9)
    {
      v10 = v5 + 2;
      if (v5 + 2 >= v28)
        goto LABEL_38;
      v9 = *(_QWORD *)(v29 + 8 * v10);
      if (v9)
        goto LABEL_12;
      v10 = v5 + 3;
      if (v5 + 3 >= v28)
        goto LABEL_38;
      v9 = *(_QWORD *)(v29 + 8 * v10);
      if (v9)
        goto LABEL_12;
      v10 = v5 + 4;
      if (v5 + 4 >= v28)
        goto LABEL_38;
      v9 = *(_QWORD *)(v29 + 8 * v10);
      if (v9)
      {
LABEL_12:
        i = v10;
      }
      else
      {
        i = v5 + 5;
        if (v5 + 5 >= v28)
          goto LABEL_38;
        v9 = *(_QWORD *)(v29 + 8 * i);
        if (!v9)
        {
          v27 = v5 + 6;
          while (v27 < v28)
          {
            v9 = *(_QWORD *)(v29 + 8 * v27++);
            if (v9)
            {
              i = v27 - 1;
              goto LABEL_13;
            }
          }
          goto LABEL_38;
        }
      }
    }
LABEL_13:
    v32 = (v9 - 1) & v9;
  }
  v22 = 0;
  v23 = (unint64_t)(63 - v18) >> 6;
  while (++v20 != v23 || (v22 & 1) == 0)
  {
    v24 = v20 == v23;
    if (v20 == v23)
      v20 = 0;
    v22 |= v24;
    v25 = *(_QWORD *)(v17 + 8 * v20);
    if (v25 != -1)
    {
      v21 = __clz(__rbit64(~v25)) + (v20 << 6);
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
}

uint64_t closure #2 in PluginCapabilityCatalog.init(from:)@<X0>(_QWORD *a1@<X0>, void (*a2)(_QWORD, _QWORD)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v17;

  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v17 - v13;
  a2(*a1, a1[1]);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, a3) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    *(_QWORD *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a5 + 24) = a3;
    *(_QWORD *)(a5 + 32) = a4;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a5);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_0, v14, a3);
  }
  return result;
}

void PluginCapabilityCatalog.__allocating_init(packageCache:)()
{
  OUTLINED_FUNCTION_73_0();
  PluginCapabilityCatalog.init(packageCache:)();
}

void PluginCapabilityCatalog.init(packageCache:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PluginCapabilityCatalog.__allocating_init(packages:)()
{
  OUTLINED_FUNCTION_73_0();
  PluginCapabilityCatalog.init(packages:)();
}

void PluginCapabilityCatalog.init(packages:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t PluginCapabilityCatalog.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t PluginCapabilityCatalog.deinit()
{
  uint64_t v0;

  OUTLINED_FUNCTION_51_2();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PluginCapabilityCatalog.__deallocating_deinit()
{
  PluginCapabilityCatalog.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PluginCapabilityExposing.advertisedCapabilities() in conformance PluginCapabilityCatalog<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 224))();
}

uint64_t protocol witness for PluginCapabilityExposing.exposedCapabilities() in conformance PluginCapabilityCatalog<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 232))();
}

uint64_t protocol witness for PluginCapabilityExposing.get(capability:) in conformance PluginCapabilityCatalog<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 240))();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PluginCapabilityCatalog<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 256))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PluginCapabilityCatalog<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 248))();
}

uint64_t one-time initialization function for catalogPackageInflator()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingUserInfoKey?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = OUTLINED_FUNCTION_41_2();
  __swift_allocate_value_buffer(v4, static CodingUserInfoKey.catalogPackageInflator);
  v5 = __swift_project_value_buffer(v4, (uint64_t)static CodingUserInfoKey.catalogPackageInflator);
  CodingUserInfoKey.init(rawValue:)();
  result = __swift_getEnumTagSinglePayload((uint64_t)v3, 1, v4);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v5, v3, v4);
  __break(1u);
  return result;
}

uint64_t static CodingUserInfoKey.catalogPackageInflator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for catalogPackageInflator != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_41_2();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static CodingUserInfoKey.catalogPackageInflator);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6, a2, a3);
}

unint64_t __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  char v16;
  _QWORD v18[2];

  v5 = v4;
  v18[0] = a1;
  v18[1] = a4;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v5 + 32);
  v12 = v11 & ~v10;
  if (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v10;
    v14 = *(_QWORD *)(v7 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v15(v9, *(_QWORD *)(v5 + 48) + v14 * v12, a3);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
      if ((v16 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

uint64_t outlined init with copy of PluginPackage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in PluginCapabilityCatalog.init(finder:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_69_0();
  *v0 = OUTLINED_FUNCTION_78(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_11_13();
}

uint64_t _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  result = static _DictionaryStorage.copy(original:)();
  v3 = (_QWORD *)result;
  v4 = 0;
  v36 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v30 = v6;
  v31 = (unint64_t)(v8 + 63) >> 6;
  v32 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v36 + 48) + 16 * i);
    v18 = *v16;
    v17 = v16[1];
    outlined init with copy of CacheDataSource(*(_QWORD *)(v36 + 56) + 40 * i, (uint64_t)v33);
    v19 = v34;
    v20 = v35;
    __swift_project_boxed_opaque_existential_1(v33, v34);
    v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 16);
    swift_bridgeObjectRetain();
    v22 = v21(v19, v20);
    v24 = v23;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    *(_QWORD *)(v32 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v25 = (_QWORD *)(v3[6] + 16 * i);
    *v25 = v18;
    v25[1] = v17;
    v26 = (uint64_t *)(v3[7] + 16 * i);
    *v26 = v22;
    v26[1] = v24;
    v27 = v3[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v29;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v31)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v30 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v31)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v30 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v31)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v30 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v10 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v31)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v30 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v31)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v30 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1C2F69518()
{
  return OUTLINED_FUNCTION_7_16();
}

uint64_t partial apply for implicit closure #1 in PluginCapabilityCatalog.init(finder:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t sub_1C2F69530()
{
  return OUTLINED_FUNCTION_7_16();
}

void partial apply for thunk for @callee_guaranteed () -> (@owned [A])(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = (*(uint64_t (**)(void))(v1 + 40))();
  OUTLINED_FUNCTION_31();
}

uint64_t partial apply for closure #1 in PluginCapabilityCatalog.getAll(capability:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[3] + 56))(v0[5], v0[2]);
}

void partial apply for closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)(v1[7], v1[2], v1[4], v1[5], a1);
}

uint64_t type metadata accessor for PluginCapabilityCatalog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PluginCapabilityCatalog);
}

uint64_t partial apply for closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)()
{
  uint64_t v0;

  return closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD **)(v0 + 48));
}

uint64_t partial apply for closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 48), a1);
}

uint64_t sub_1C2F69604()
{
  return OUTLINED_FUNCTION_7_16();
}

uint64_t partial apply for closure #2 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #2 in static PluginCapabilityCatalog.load<A>(finder:cache:)(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 40), a3);
}

uint64_t sub_1C2F69620()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out A?)(_QWORD *a1)
{
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(v1 + 56))(*a1, a1[1]);
  OUTLINED_FUNCTION_31();
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t type metadata accessor for PluginCapabilityCatalog.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PluginCapabilityCatalog.CodingKeys);
}

uint64_t partial apply for closure #1 in PluginCapabilityCatalog.encode(to:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in PluginCapabilityCatalog.encode(to:)(a1, v2[2], v2[3], v2[4], a2);
}

unint64_t lazy protocol witness table accessor for type PluginCatalogError and conformance PluginCatalogError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginCatalogError and conformance PluginCatalogError;
  if (!lazy protocol witness table cache variable for type PluginCatalogError and conformance PluginCatalogError)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PluginCatalogError, &type metadata for PluginCatalogError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginCatalogError and conformance PluginCatalogError);
  }
  return result;
}

uint64_t sub_1C2F696E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out A?)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD v5[2];

  v3 = *(uint64_t (**)(_QWORD *))(v2 + 40);
  v5[0] = a1;
  v5[1] = a2;
  return v3(v5);
}

void lazy protocol witness table accessor for type [String] and conformance <A> [A](_QWORD *a1)
{
  if (!*a1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_72_0();
  }
  OUTLINED_FUNCTION_7_1();
}

uint64_t partial apply for closure #1 in PluginCapabilityCatalog.init(from:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in PluginCapabilityCatalog.init(from:)(a1);
}

uint64_t partial apply for closure #2 in PluginCapabilityCatalog.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in PluginCapabilityCatalog.init(from:)(a1, *(void (**)(_QWORD, _QWORD))(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), a2);
}

void base witness table accessor for Equatable in PluginCapabilityCatalog<A>.CodingKeys()
{
  JUMPOUT(0x1C3BCEDD8);
}

void base witness table accessor for CustomDebugStringConvertible in PluginCapabilityCatalog<A>.CodingKeys()
{
  JUMPOUT(0x1C3BCEDD8);
}

void base witness table accessor for CustomStringConvertible in PluginCapabilityCatalog<A>.CodingKeys()
{
  JUMPOUT(0x1C3BCEDD8);
}

uint64_t associated type witness table accessor for PluginCapabilityExposing.PluginCapability : Decodable in PluginCapabilityCatalog<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PluginCapabilityExposing.PluginCapability : Encodable in PluginCapabilityCatalog<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for PluginCapabilityExposing.PluginCapability : Hashable in PluginCapabilityCatalog<A>()
{
  return swift_getAssociatedConformanceWitness();
}

void sub_1C2F69898(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  OUTLINED_FUNCTION_31();
}

void sub_1C2F698C8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  OUTLINED_FUNCTION_31();
}

uint64_t sub_1C2F698F8()
{
  return 24;
}

__n128 sub_1C2F69904(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for PluginCatalog()
{
  return objc_opt_self();
}

uint64_t method lookup function for PluginCatalog()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PluginCatalog.packageCache.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of PluginCatalog.packageCache.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PluginCatalog.packageCache.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PluginCatalog.__allocating_init(packageCache:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PluginCatalog.__allocating_init(packages:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PluginCatalog.getPluginPackage(id:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PluginCatalog.getPlugin(id:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t type metadata completion function for PluginCapabilityCatalog()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for PluginCapabilityCatalog()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.capabilityCache.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.capabilityCache.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.capabilityCache.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.__allocating_init(finder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.getPackages(capability:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.getAll(capability:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.exposedCapabilities()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.get(capability:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t type metadata instantiation function for PluginCapabilityCatalog.CodingKeys()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t storeEnumTagSinglePayload for PluginCapabilityCatalog.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2F69AC8 + 4 * byte_1C2F83665[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C2F69AFC + 4 * byte_1C2F83660[v4]))();
}

uint64_t sub_1C2F69AFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F69B04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F69B0CLL);
  return result;
}

uint64_t sub_1C2F69B18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F69B20);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C2F69B24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F69B2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t destroy for PluginCatalogError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PluginCatalogError(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for PluginCatalogError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PluginCatalogError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginCatalogError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PluginCatalogError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t getEnumTag for PluginCatalogError(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for PluginCatalogError(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginCatalogError()
{
  return &type metadata for PluginCatalogError;
}

uint64_t partial apply for closure #1 in closure #1 in PluginCapabilityCatalog.init(from:)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 40))(*a1, a1[1]);
}

void lazy protocol witness table accessor for type [String] and conformance [A](_QWORD *a1)
{
  if (!*a1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    OUTLINED_FUNCTION_72_0();
  }
  OUTLINED_FUNCTION_31();
}

void partial apply for closure #1 in closure #1 in PluginCapabilityCatalog.encode(to:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_69_0();
  *v0 = OUTLINED_FUNCTION_78(v1);
  v0[1] = v2;
  OUTLINED_FUNCTION_11_13();
}

uint64_t OUTLINED_FUNCTION_1_25()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_3_18()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t OUTLINED_FUNCTION_4_12()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t OUTLINED_FUNCTION_6_17(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  *(_DWORD *)(v3 - 68) = a3;
  *(_QWORD *)(v3 - 96) = a1;
  *(_QWORD *)(v3 - 88) = a2;
  return type metadata accessor for OSSignpostID();
}

uint64_t OUTLINED_FUNCTION_7_16()
{
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_8_17()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  outlined consume of Data?(v1, v2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 280) + 8))(*(_QWORD *)(v3 - 288), v0);
}

void OUTLINED_FUNCTION_9_17()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_10_15@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_11_15()
{
  return 0x6F6973726556736FLL;
}

uint64_t OUTLINED_FUNCTION_14_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 312) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_15_12()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t OUTLINED_FUNCTION_16_11(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_18_13()
{
  uint64_t (*v0)(_QWORD, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return v0(*(_QWORD *)(v3 - 368), v1, v2);
}

uint64_t OUTLINED_FUNCTION_22_9()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_24_10()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_25_9(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_26_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 192) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_29_10()
{
  uint64_t v0;

  return _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe(*(_QWORD *)(v0 - 272));
}

BOOL OUTLINED_FUNCTION_37_4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_39_5(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_40_3(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 208));
}

uint64_t OUTLINED_FUNCTION_41_2()
{
  return type metadata accessor for CodingUserInfoKey();
}

uint64_t OUTLINED_FUNCTION_42_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_43_3()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_45_3@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_46_2()
{
  uint64_t v0;

  return _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe(*(_QWORD *)(v0 - 264));
}

uint64_t OUTLINED_FUNCTION_47_2()
{
  return 255;
}

uint64_t OUTLINED_FUNCTION_49_1()
{
  uint64_t v0;

  return v0 - 72;
}

uint64_t OUTLINED_FUNCTION_50_2()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_51_2()
{
  return swift_bridgeObjectRelease();
}

_QWORD *OUTLINED_FUNCTION_53_2(_QWORD *a1)
{
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_54_2()
{
  uint64_t v0;
  unint64_t v1;

  outlined consume of Data?(v0, v1);
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_56_2()
{
  return swift_getAssociatedConformanceWitness();
}

void OUTLINED_FUNCTION_58_1()
{
  JUMPOUT(0x1C3BCDFC8);
}

uint64_t OUTLINED_FUNCTION_59_2()
{
  return OSSignpostID.init(log:)();
}

uint64_t OUTLINED_FUNCTION_60_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_65_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_66_0()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_72_0()
{
  JUMPOUT(0x1C3BCEDD8);
}

uint64_t OUTLINED_FUNCTION_73_0()
{
  return swift_initStackObject();
}

uint64_t OUTLINED_FUNCTION_74_0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_77_0()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_78@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(uint64_t);

  return v1(a1);
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  Swift::Int v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v27 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v28 = *a2;
      v21 = *a2;
      *a2 = 0x8000000000000000;
      v22 = *(_QWORD *)(v21 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22);
      swift_bridgeObjectRelease();
      v23 = (uint64_t *)(*(_QWORD *)(v28 + 56) + 16 * v17);
      v24 = *v23;
      v25 = v23[1];
      _NativeDictionary._delete(at:)();
      *a2 = v28;
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v24, v25);
    }
    result = swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v27)
      return swift_release();
    v12 = *(_QWORD *)(v26 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v27)
        return swift_release();
      v12 = *(_QWORD *)(v26 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v27)
          return swift_release();
        v12 = *(_QWORD *)(v26 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v27)
            return swift_release();
          v12 = *(_QWORD *)(v26 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v27)
    return swift_release();
  v12 = *(_QWORD *)(v26 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v27)
      return swift_release();
    v12 = *(_QWORD *)(v26 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;

  v3 = a1;
  v29 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v31 = v8;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v17 = *v15;
    v16 = v15[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
    v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v32 = *a2;
      v22 = *a2;
      *a2 = 0x8000000000000000;
      v23 = v3;
      v24 = *(_QWORD *)(v22 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Data>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v24);
      swift_bridgeObjectRelease();
      v25 = (uint64_t *)(*(_QWORD *)(v32 + 56) + 16 * v18);
      v26 = *v25;
      v27 = v25[1];
      _NativeDictionary._delete(at:)();
      *a2 = v32;
      swift_bridgeObjectRelease();
      v28 = v27;
      v3 = v23;
      outlined consume of Data._Representation(v26, v28);
    }
    specialized Set._Variant.remove(_:)(v17, v16);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v8 = v31;
    if (v6)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v30)
      return swift_release();
    v12 = *(_QWORD *)(v29 + 8 * v11);
    v13 = v8 + 1;
    if (!v12)
    {
      v13 = v8 + 2;
      if (v8 + 2 >= v30)
        return swift_release();
      v12 = *(_QWORD *)(v29 + 8 * v13);
      if (!v12)
      {
        v13 = v8 + 3;
        if (v8 + 3 >= v30)
          return swift_release();
        v12 = *(_QWORD *)(v29 + 8 * v13);
        if (!v12)
        {
          v13 = v8 + 4;
          if (v8 + 4 >= v30)
            return swift_release();
          v12 = *(_QWORD *)(v29 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v6 = (v12 - 1) & v12;
    v31 = v13;
  }
  v14 = v8 + 5;
  if (v8 + 5 >= v30)
    return swift_release();
  v12 = *(_QWORD *)(v29 + 8 * v14);
  if (v12)
  {
    v13 = v8 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v30)
      return swift_release();
    v12 = *(_QWORD *)(v29 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  int64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[5];
  uint64_t v19;

  specialized _NativeDictionary.makeIterator()(v18, a1);
  v1 = v18[0];
  v19 = v18[1];
  v2 = v18[3];
  v3 = v18[4];
  v4 = (unint64_t)(v18[2] + 64) >> 6;
  result = swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_3;
LABEL_2:
  v6 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  v7 = v6 | (v2 << 6);
  while (1)
  {
    v12 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v7);
    v13 = *v12;
    v14 = v12[1];
    v15 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v7);
    v16 = *v15;
    v17 = v15[1];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v16, v17);
    specialized Set._Variant.remove(_:)(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = outlined consume of Data._Representation(v16, v17);
    if (v3)
      goto LABEL_2;
LABEL_3:
    v8 = v2 + 1;
    if (__OFADD__(v2, 1))
      break;
    if (v8 >= v4)
      return swift_release();
    v9 = *(_QWORD *)(v19 + 8 * v8);
    v10 = v2 + 1;
    if (!v9)
    {
      v10 = v2 + 2;
      if (v2 + 2 >= v4)
        return swift_release();
      v9 = *(_QWORD *)(v19 + 8 * v10);
      if (!v9)
      {
        v10 = v2 + 3;
        if (v2 + 3 >= v4)
          return swift_release();
        v9 = *(_QWORD *)(v19 + 8 * v10);
        if (!v9)
        {
          v10 = v2 + 4;
          if (v2 + 4 >= v4)
            return swift_release();
          v9 = *(_QWORD *)(v19 + 8 * v10);
          if (!v9)
          {
            v10 = v2 + 5;
            if (v2 + 5 >= v4)
              return swift_release();
            v9 = *(_QWORD *)(v19 + 8 * v10);
            if (!v9)
            {
              v11 = v2 + 6;
              while (v11 < v4)
              {
                v9 = *(_QWORD *)(v19 + 8 * v11++);
                if (v9)
                {
                  v10 = v11 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    v3 = (v9 - 1) & v9;
    v7 = __clz(__rbit64(v9)) + (v10 << 6);
    v2 = v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = Set.init(minimumCapacity:)();
  v7 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 40;
    do
    {
      OUTLINED_FUNCTION_19();
      specialized Set._Variant.insert(_:)();
      swift_bridgeObjectRelease();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {
    v5 = v2;
    swift_bridgeObjectRelease();
  }
  return v5;
}

_QWORD *specialized Set.init<A>(_:)(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  uint64_t v13;

  v11 = Set.init(minimumCapacity:)();
  result = specialized _NativeDictionary.makeIterator()(v12, a1);
  v3 = v12[1];
  v4 = v12[3];
  v5 = v13;
  v6 = (unint64_t)(v12[2] + 64) >> 6;
  if (!v13)
    goto LABEL_3;
LABEL_2:
  v5 &= v5 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)();
    result = (_QWORD *)swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_2;
LABEL_3:
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v7 >= v6)
      goto LABEL_21;
    v8 = *(_QWORD *)(v3 + 8 * v7);
    v9 = v4 + 1;
    if (!v8)
    {
      v9 = v4 + 2;
      if (v4 + 2 >= v6)
        goto LABEL_21;
      v8 = *(_QWORD *)(v3 + 8 * v9);
      if (!v8)
      {
        v9 = v4 + 3;
        if (v4 + 3 >= v6)
          goto LABEL_21;
        v8 = *(_QWORD *)(v3 + 8 * v9);
        if (!v8)
        {
          v9 = v4 + 4;
          if (v4 + 4 >= v6)
            goto LABEL_21;
          v8 = *(_QWORD *)(v3 + 8 * v9);
          if (!v8)
          {
            v9 = v4 + 5;
            if (v4 + 5 >= v6)
              goto LABEL_21;
            v8 = *(_QWORD *)(v3 + 8 * v9);
            if (!v8)
            {
              v10 = v4 + 6;
              while (v10 < v6)
              {
                v8 = *(_QWORD *)(v3 + 8 * v10++);
                if (v8)
                {
                  v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return (_QWORD *)v11;
            }
          }
        }
      }
    }
LABEL_18:
    v5 = (v8 - 1) & v8;
    v4 = v9;
  }
  __break(1u);
  return result;
}

uint64_t SiriEnvironmentKeyValuePairs.addedValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SiriEnvironmentKeyValuePairs.removedValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SiriEnvironmentKeyValuePairs.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Dictionary.init(dictionaryLiteral:)();
  v3 = MEMORY[0x1E0DEE9E8];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t SiriEnvironmentKeyValuePairs.update(addingValues:removingKeys:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t type;
  uint64_t v36[2];

  v3 = v2;
  v6 = swift_bridgeObjectRetain();
  v7 = specialized Set.init<A>(_:)(v6);
  v8 = OUTLINED_FUNCTION_15_0();
  v9 = specialized Set.init<A>(_:)(v8);
  specialized Set.subtracting(_:)((uint64_t)v9, (uint64_t)v7);
  swift_bridgeObjectRelease();
  v10 = OUTLINED_FUNCTION_19();
  v11 = specialized Set.init<A>(_:)(v10);
  v12 = OUTLINED_FUNCTION_15_0();
  v13 = specialized Set.init<A>(_:)(v12);
  specialized _NativeSet.intersection(_:)((uint64_t)v13, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if (one-time initialization token for environment != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.environment);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    type = v16;
    v17 = OUTLINED_FUNCTION_4_1();
    v36[0] = OUTLINED_FUNCTION_4_1();
    *(_DWORD *)v17 = 136315650;
    swift_bridgeObjectRetain();
    v18 = Set.description.getter();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_14(v18, v19, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_14_1();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    v20 = Set.description.getter();
    v22 = v21;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_11_16();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 22) = 2080;
    OUTLINED_FUNCTION_13_2();
    v23 = Set.description.getter();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_14(v23, v24, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_14_1();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F2D000, v15, type, "SiriEnvironmentKeyPairs adding keys: %s, overwriting keys: %s, and removing keys: %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_1();
  }

  OUTLINED_FUNCTION_14_1();
  OUTLINED_FUNCTION_11_16();
  OUTLINED_FUNCTION_14_1();
  v25 = OUTLINED_FUNCTION_19();
  specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(v25, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v3);
  specialized Sequence.forEach(_:)(a2, v3);
  v26 = v3[1];
  v27 = OUTLINED_FUNCTION_13_2();
  v3[1] = specialized Set.union<A>(_:)(v27, v26);
  specialized Sequence.forEach(_:)(a1);
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_13_2();
  v28 = specialized _NativeSet.genericIntersection<A>(_:)(a1, a2);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v28 + 16))
  {
    swift_retain_n();
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)OUTLINED_FUNCTION_4_1();
      v36[0] = OUTLINED_FUNCTION_4_1();
      *(_DWORD *)v31 = 136315138;
      swift_retain();
      v32 = Set.description.getter();
      swift_release();
      OUTLINED_FUNCTION_18_14(v32, v33, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_11_16();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F2D000, v29, v30, "Atempted to both add and remove keys %s, these keys will be ignored", v31, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_1();
    }

    OUTLINED_FUNCTION_11_16();
    specialized Sequence.forEach(_:)(v28, v3);
  }
  return swift_release();
}

uint64_t specialized Set.subtracting(_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a2 + 16) >> 3)
    return specialized _NativeSet.subtracting<A>(_:)(a1, a2);
  specialized Set._subtract<A>(_:)(a1);
  return a2;
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;

  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  for (v6 &= v6 - 1; ; v6 = (v9 - 1) & v9)
  {
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)();
    result = swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_4;
LABEL_5:
    v8 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v8 >= v7)
      goto LABEL_23;
    v9 = *(_QWORD *)(v3 + 8 * v8);
    ++v2;
    if (!v9)
    {
      v2 = v8 + 1;
      if (v8 + 1 >= v7)
        goto LABEL_23;
      v9 = *(_QWORD *)(v3 + 8 * v2);
      if (!v9)
      {
        v2 = v8 + 2;
        if (v8 + 2 >= v7)
          goto LABEL_23;
        v9 = *(_QWORD *)(v3 + 8 * v2);
        if (!v9)
        {
          v2 = v8 + 3;
          if (v8 + 3 >= v7)
            goto LABEL_23;
          v9 = *(_QWORD *)(v3 + 8 * v2);
          if (!v9)
            break;
        }
      }
    }
LABEL_20:
    ;
  }
  v10 = v8 + 4;
  if (v10 >= v7)
  {
LABEL_23:
    swift_release();
    return a2;
  }
  v9 = *(_QWORD *)(v3 + 8 * v10);
  if (v9)
  {
    v2 = v10;
    goto LABEL_20;
  }
  while (1)
  {
    v2 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v2 >= v7)
      goto LABEL_23;
    v9 = *(_QWORD *)(v3 + 8 * v2);
    ++v10;
    if (v9)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t SiriEnvironmentKeyValuePairs.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x6C61566465646461 && a2 == 0xEB00000000736575;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x566465766F6D6572 && a2 == 0xED00007365756C61)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t SiriEnvironmentKeyValuePairs.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x566465766F6D6572;
  else
    return 0x6C61566465646461;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriEnvironmentKeyValuePairs.CodingKeys()
{
  char *v0;

  return SiriEnvironmentKeyValuePairs.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriEnvironmentKeyValuePairs.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = SiriEnvironmentKeyValuePairs.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriEnvironmentKeyValuePairs.CodingKeys()
{
  lazy protocol witness table accessor for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriEnvironmentKeyValuePairs.CodingKeys()
{
  lazy protocol witness table accessor for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void SiriEnvironmentKeyValuePairs.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriEnvironmentKeyValuePairs.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = v9;
  v11 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
  lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type Data and conformance Data, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
  OUTLINED_FUNCTION_3_19();
  if (!v2)
  {
    v12 = v10;
    v11 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEB3B8]);
    OUTLINED_FUNCTION_3_19();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  OUTLINED_FUNCTION_0_9();
}

void SiriEnvironmentKeyValuePairs.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriEnvironmentKeyValuePairs.CodingKeys>);
  MEMORY[0x1E0C80A78](v4, v5);
  Dictionary.init(dictionaryLiteral:)();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
    lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B], (uint64_t (*)(void))lazy protocol witness table accessor for type Data and conformance Data, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    OUTLINED_FUNCTION_2_18();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEB3D8]);
    OUTLINED_FUNCTION_2_18();
    OUTLINED_FUNCTION_10_16();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v7;
    a2[1] = v7;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_9();
}

void protocol witness for Decodable.init(from:) in conformance SiriEnvironmentKeyValuePairs(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  SiriEnvironmentKeyValuePairs.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance SiriEnvironmentKeyValuePairs(_QWORD *a1)
{
  SiriEnvironmentKeyValuePairs.encode(to:)(a1);
}

void specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v7 = OUTLINED_FUNCTION_6_18();
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    OUTLINED_FUNCTION_5_5();
    *v6 = v7;
    OUTLINED_FUNCTION_0_16();
    return;
  }
  v8 = (void *)OUTLINED_FUNCTION_0_18();
  if (v11)
    v12 = (unint64_t)v8 >= v10;
  else
    v12 = 1;
  if (v12)
    OUTLINED_FUNCTION_8_18(v8, v9);
  OUTLINED_FUNCTION_1_26();
  if (!v5)
    goto LABEL_10;
LABEL_9:
  OUTLINED_FUNCTION_16_12();
  while (1)
  {
    OUTLINED_FUNCTION_4_13(v13);
    if (v5)
      goto LABEL_9;
LABEL_10:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v3)
      goto LABEL_26;
    ++v4;
    if (!*(_QWORD *)(v2 + 8 * v14))
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v3)
        goto LABEL_26;
      if (!*(_QWORD *)(v2 + 8 * v4))
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v3)
          goto LABEL_26;
        if (!*(_QWORD *)(v2 + 8 * v4))
          break;
      }
    }
LABEL_23:
    OUTLINED_FUNCTION_13_14();
  }
  v15 = v14 + 3;
  if (v15 >= v3)
    goto LABEL_26;
  if (*(_QWORD *)(v2 + 8 * v15))
  {
    v4 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v3)
      goto LABEL_26;
    ++v15;
    if (*(_QWORD *)(v2 + 8 * v4))
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TypeIdentifier>);
  v7 = OUTLINED_FUNCTION_6_18();
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    OUTLINED_FUNCTION_5_5();
    *v6 = v7;
    OUTLINED_FUNCTION_0_16();
    return;
  }
  v8 = (void *)OUTLINED_FUNCTION_0_18();
  if (v11)
    v12 = (unint64_t)v8 >= v10;
  else
    v12 = 1;
  if (v12)
    OUTLINED_FUNCTION_8_18(v8, v9);
  OUTLINED_FUNCTION_1_26();
  if (!v5)
    goto LABEL_10;
LABEL_9:
  OUTLINED_FUNCTION_16_12();
  while (1)
  {
    OUTLINED_FUNCTION_4_13(v13);
    if (v5)
      goto LABEL_9;
LABEL_10:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v14 >= v3)
      goto LABEL_26;
    ++v4;
    if (!*(_QWORD *)(v2 + 8 * v14))
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v3)
        goto LABEL_26;
      if (!*(_QWORD *)(v2 + 8 * v4))
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v3)
          goto LABEL_26;
        if (!*(_QWORD *)(v2 + 8 * v4))
          break;
      }
    }
LABEL_23:
    OUTLINED_FUNCTION_13_14();
  }
  v15 = v14 + 3;
  if (v15 >= v3)
    goto LABEL_26;
  if (*(_QWORD *)(v2 + 8 * v15))
  {
    v4 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v3)
      goto LABEL_26;
    ++v15;
    if (*(_QWORD *)(v2 + 8 * v4))
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;

  v3 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TransformationCapability>);
  v4 = OUTLINED_FUNCTION_6_18();
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_28:
    result = (void *)OUTLINED_FUNCTION_5_5();
    *v3 = v4;
    return result;
  }
  result = (void *)OUTLINED_FUNCTION_0_18();
  if (v8)
    v9 = (unint64_t)result >= v7;
  else
    v9 = 1;
  if (v9)
    result = OUTLINED_FUNCTION_8_18(result, v6);
  v10 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v1 + 16);
  v11 = 1 << *(_BYTE *)(v1 + 32);
  v12 = *(_QWORD *)(v1 + 56);
  v13 = -1;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  v14 = v13 & v12;
  v15 = (unint64_t)(v11 + 63) >> 6;
  if ((v13 & v12) == 0)
    goto LABEL_12;
LABEL_11:
  v16 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v16 | (v10 << 6); ; i = __clz(__rbit64(v19)) + (v10 << 6))
  {
    v21 = *(_QWORD *)(v1 + 48) + (i << 6);
    v23 = *(_QWORD *)(v21 + 8);
    v22 = *(_QWORD *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 40);
    v24 = *(_QWORD *)(v21 + 48);
    v26 = *(_QWORD *)(v21 + 56);
    v27 = *(_QWORD *)(v4 + 48) + (i << 6);
    v28 = *(_OWORD *)(v21 + 24);
    *(_BYTE *)v27 = *(_BYTE *)v21;
    *(_QWORD *)(v27 + 8) = v23;
    *(_QWORD *)(v27 + 16) = v22;
    *(_OWORD *)(v27 + 24) = v28;
    *(_QWORD *)(v27 + 40) = v25;
    *(_QWORD *)(v27 + 48) = v24;
    *(_QWORD *)(v27 + 56) = v26;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_13_2();
    result = (void *)swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_11;
LABEL_12:
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v15)
      goto LABEL_28;
    v19 = *(_QWORD *)(v2 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v15)
        goto LABEL_28;
      v19 = *(_QWORD *)(v2 + 8 * v10);
      if (!v19)
      {
        v10 = v18 + 2;
        if (v18 + 2 >= v15)
          goto LABEL_28;
        v19 = *(_QWORD *)(v2 + 8 * v10);
        if (!v19)
          break;
      }
    }
LABEL_25:
    v14 = (v19 - 1) & v19;
  }
  v20 = v18 + 3;
  if (v20 >= v15)
    goto LABEL_28;
  v19 = *(_QWORD *)(v2 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v15)
      goto LABEL_28;
    v19 = *(_QWORD *)(v2 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  *a1 = a4;
  a1[1] = a5;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a4, a5);
  return a2;
}

uint64_t specialized Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *a4;
  *a4 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v10);
  *a4 = v10;
  return swift_bridgeObjectRelease();
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.remove(_:)(v15, v16);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_5;
LABEL_6:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return swift_release();
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return swift_release();
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return swift_release();
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_21:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return swift_release();
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t isStackAllocationSafe;
  uint64_t v29;
  char v30;
  unint64_t v31;
  size_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;

  v2 = a2;
  v44 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v38 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v36 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v37 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain();
    v9 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v9 << 6);
    while (1)
    {
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7)
        goto LABEL_6;
LABEL_7:
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v12 >= v37)
        goto LABEL_48;
      v13 = *(_QWORD *)(v38 + 8 * v12);
      v14 = v9 + 1;
      if (!v13)
      {
        v14 = v9 + 2;
        if (v9 + 2 >= v37)
          goto LABEL_48;
        v13 = *(_QWORD *)(v38 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 3;
          if (v9 + 3 >= v37)
            goto LABEL_48;
          v13 = *(_QWORD *)(v38 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 4;
            if (v9 + 4 >= v37)
              goto LABEL_48;
            v13 = *(_QWORD *)(v38 + 8 * v14);
            if (!v13)
            {
              v15 = v9 + 5;
              if (v9 + 5 >= v37)
              {
LABEL_48:
                outlined consume of [String : Data].Iterator._Variant();
                return v2;
              }
              v13 = *(_QWORD *)(v38 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  v14 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    break;
                  if (v14 >= v37)
                    goto LABEL_48;
                  v13 = *(_QWORD *)(v38 + 8 * v14);
                  ++v15;
                  if (v13)
                    goto LABEL_22;
                }
LABEL_50:
                __break(1u);
              }
              v14 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      v7 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v14 << 6);
      v9 = v14;
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease();
      v39 = a1;
      v40 = v38;
      v41 = v36;
      v42 = v9;
      v43 = v7;
    }
    else
    {
      v25 = ~v20;
      do
      {
        v21 = (v21 + 1) & v25;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_37;
        v26 = (_QWORD *)(v22 + 16 * v21);
        v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      v39 = a1;
      v40 = v38;
      v41 = v36;
      v42 = v9;
      v43 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    v30 = *(_BYTE *)(v2 + 32);
    v31 = (unint64_t)((1 << v30) + 63) >> 6;
    v32 = 8 * v31;
    if ((v30 & 0x3Fu) < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
    {
      MEMORY[0x1E0C80A78](isStackAllocationSafe, v29);
      memcpy((char *)&v36 - ((v32 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v32);
      v33 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)&v36 - ((v32 + 15) & 0x3FFFFFFFFFFFFFF0), v31, v2, v21, &v39);
      swift_release();
      outlined consume of [String : Data].Iterator._Variant();
    }
    else
    {
      v34 = (void *)swift_slowAlloc();
      memcpy(v34, (const void *)(v2 + 56), v32);
      v33 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v34, v31, v2, v21, &v39);
      swift_release();
      outlined consume of [String : Data].Iterator._Variant();
      MEMORY[0x1C3BCEEB0](v34, -1, -1);
    }
    return v33;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
}

uint64_t specialized _NativeSet.genericIntersection<A>(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    v6 = (_QWORD *)((char *)v10 - ((8 * v5 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v6);
    v7 = specialized closure #1 in _NativeSet.genericIntersection<A>(_:)(v6, v5, v3, a2);
    swift_release();
  }
  else
  {
    v8 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v8);
    v7 = specialized closure #1 in _NativeSet.genericIntersection<A>(_:)(v8, v5, v3, a2);
    swift_release();
    MEMORY[0x1C3BCEEB0](v8, -1, -1);
  }
  return v7;
}

uint64_t specialized closure #1 in _NativeSet.genericIntersection<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t i;
  unint64_t v28;
  _QWORD *v29;
  BOOL v30;
  uint64_t v32;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD v38[6];
  uint64_t v39;

  specialized _NativeDictionary.makeIterator()(v38, a3);
  v36 = v38[0];
  v37 = v38[3];
  v5 = v38[4];
  v34 = v38[1];
  v35 = (unint64_t)(v38[2] + 64) >> 6;
  v39 = a4 + 56;
  result = swift_bridgeObjectRetain();
  v7 = 0;
LABEL_2:
  v32 = v7;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v37 << 6);
      goto LABEL_21;
    }
    v10 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v10 >= v35)
      goto LABEL_43;
    v11 = *(_QWORD *)(v34 + 8 * v10);
    v12 = v37 + 1;
    if (!v11)
    {
      v12 = v37 + 2;
      if (v37 + 2 >= v35)
        goto LABEL_43;
      v11 = *(_QWORD *)(v34 + 8 * v12);
      if (!v11)
      {
        v12 = v37 + 3;
        if (v37 + 3 >= v35)
          goto LABEL_43;
        v11 = *(_QWORD *)(v34 + 8 * v12);
        if (!v11)
        {
          v12 = v37 + 4;
          if (v37 + 4 >= v35)
            goto LABEL_43;
          v11 = *(_QWORD *)(v34 + 8 * v12);
          if (!v11)
          {
            v12 = v37 + 5;
            if (v37 + 5 >= v35)
              goto LABEL_43;
            v11 = *(_QWORD *)(v34 + 8 * v12);
            if (!v11)
            {
              v13 = v37 + 6;
              while (v13 < v35)
              {
                v11 = *(_QWORD *)(v34 + 8 * v13++);
                if (v11)
                {
                  v12 = v13 - 1;
                  goto LABEL_20;
                }
              }
LABEL_43:
              swift_release();
              swift_retain();
              return specialized _NativeSet.extractSubset(using:count:)(a1, a2, v32, a4);
            }
          }
        }
      }
    }
LABEL_20:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
    v37 = v12;
LABEL_21:
    v14 = (uint64_t *)(*(_QWORD *)(v36 + 48) + 16 * v9);
    v16 = *v14;
    v15 = v14[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v17 = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(a4 + 32);
    v19 = v17 & ~v18;
    v20 = v19 >> 6;
    v21 = 1 << v19;
    if (((1 << v19) & *(_QWORD *)(v39 + 8 * (v19 >> 6))) == 0)
      goto LABEL_38;
    v22 = *(_QWORD *)(a4 + 48);
    v23 = (_QWORD *)(v22 + 16 * v19);
    v24 = *v23 == v16 && v23[1] == v15;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
LABEL_28:
      v25 = a1[v20];
      a1[v20] = v21 | v25;
      if ((v21 & v25) == 0)
      {
        v7 = v32 + 1;
        if (!__OFADD__(v32, 1))
          goto LABEL_2;
        __break(1u);
        goto LABEL_43;
      }
    }
    else
    {
      v26 = ~v18;
      for (i = v19 + 1; ; i = v28 + 1)
      {
        v28 = i & v26;
        if (((*(_QWORD *)(v39 + (((i & v26) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v26)) & 1) == 0)
          break;
        v29 = (_QWORD *)(v22 + 16 * v28);
        v30 = *v29 == v16 && v29[1] == v15;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v20 = v28 >> 6;
          v21 = 1 << v28;
          goto LABEL_28;
        }
      }
LABEL_38:
      result = swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    v6 = (_QWORD *)((char *)v10 - ((8 * v5 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v6);
    v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v6, v5, a2, v3);
    swift_release();
  }
  else
  {
    v8 = (_QWORD *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v8);
    v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x1C3BCEEB0](v8, -1, -1);
  }
  return v7;
}

uint64_t specialized closure #1 in _NativeSet.intersection(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  _QWORD *v31;
  BOOL v32;
  BOOL v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v55;
  unint64_t *v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;

  v4 = a4;
  v5 = a3;
  v57 = (unint64_t *)result;
  if (*(_QWORD *)(a4 + 16) >= *(_QWORD *)(a3 + 16))
  {
    v34 = 0;
    v60 = a3 + 56;
    v61 = 0;
    v35 = 1 << *(_BYTE *)(a3 + 32);
    if (v35 < 64)
      v36 = ~(-1 << v35);
    else
      v36 = -1;
    v37 = v36 & *(_QWORD *)(a3 + 56);
    v63 = (unint64_t)(v35 + 63) >> 6;
    v38 = a4 + 56;
    while (1)
    {
      while (1)
      {
        if (v37)
        {
          v39 = __clz(__rbit64(v37));
          v37 &= v37 - 1;
          v40 = v39 | (v34 << 6);
        }
        else
        {
          v41 = v34 + 1;
          if (__OFADD__(v34, 1))
          {
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
            goto LABEL_84;
          }
          if (v41 >= v63)
            goto LABEL_79;
          v42 = *(_QWORD *)(v60 + 8 * v41);
          ++v34;
          if (!v42)
          {
            v34 = v41 + 1;
            if (v41 + 1 >= v63)
              goto LABEL_79;
            v42 = *(_QWORD *)(v60 + 8 * v34);
            if (!v42)
            {
              v34 = v41 + 2;
              if (v41 + 2 >= v63)
                goto LABEL_79;
              v42 = *(_QWORD *)(v60 + 8 * v34);
              if (!v42)
              {
                v43 = v41 + 3;
                if (v43 >= v63)
                  goto LABEL_79;
                v42 = *(_QWORD *)(v60 + 8 * v43);
                if (!v42)
                {
                  while (1)
                  {
                    v34 = v43 + 1;
                    if (__OFADD__(v43, 1))
                      goto LABEL_85;
                    if (v34 >= v63)
                      break;
                    v42 = *(_QWORD *)(v60 + 8 * v34);
                    ++v43;
                    if (v42)
                      goto LABEL_61;
                  }
LABEL_79:
                  swift_retain();
                  return specialized _NativeSet.extractSubset(using:count:)(v57, a2, v61, v5);
                }
                v34 = v43;
              }
            }
          }
LABEL_61:
          v37 = (v42 - 1) & v42;
          v40 = __clz(__rbit64(v42)) + (v34 << 6);
        }
        v44 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v40);
        v46 = *v44;
        v45 = v44[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v47 = Hasher._finalize()();
        v48 = -1 << *(_BYTE *)(v4 + 32);
        v49 = v47 & ~v48;
        if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) != 0)
          break;
LABEL_78:
        result = swift_bridgeObjectRelease();
        v5 = a3;
        v4 = a4;
      }
      v50 = *(_QWORD *)(a4 + 48);
      v51 = (_QWORD *)(v50 + 16 * v49);
      v52 = *v51 == v46 && v51[1] == v45;
      if (!v52 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v53 = ~v48;
        do
        {
          v49 = (v49 + 1) & v53;
          if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
            goto LABEL_78;
          v54 = (_QWORD *)(v50 + 16 * v49);
          v55 = *v54 == v46 && v54[1] == v45;
        }
        while (!v55 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      }
      result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      v33 = __OFADD__(v61++, 1);
      v5 = a3;
      v4 = a4;
      if (v33)
        goto LABEL_83;
    }
  }
  v6 = 0;
  v58 = a4 + 56;
  v7 = 1 << *(_BYTE *)(a4 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  v59 = (unint64_t)(v7 + 63) >> 6;
  v61 = 0;
  v10 = a3 + 56;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v62 = v6;
      v12 = v11 | (v6 << 6);
      goto LABEL_22;
    }
    v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v13 >= v59)
      goto LABEL_79;
    v14 = *(_QWORD *)(v58 + 8 * v13);
    v15 = v6 + 1;
    if (!v14)
    {
      v15 = v6 + 2;
      if (v6 + 2 >= v59)
        goto LABEL_79;
      v14 = *(_QWORD *)(v58 + 8 * v15);
      if (!v14)
      {
        v15 = v6 + 3;
        if (v6 + 3 >= v59)
          goto LABEL_79;
        v14 = *(_QWORD *)(v58 + 8 * v15);
        if (!v14)
          break;
      }
    }
LABEL_21:
    v9 = (v14 - 1) & v14;
    v62 = v15;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_22:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v20 = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v5 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    v24 = 1 << v22;
    if (((1 << v22) & *(_QWORD *)(v10 + 8 * (v22 >> 6))) == 0)
      goto LABEL_36;
    v25 = *(_QWORD *)(a3 + 48);
    v26 = (_QWORD *)(v25 + 16 * v22);
    v27 = *v26 == v19 && v26[1] == v18;
    if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
LABEL_38:
      v6 = v62;
      v5 = a3;
      v57[v23] |= v24;
      v33 = __OFADD__(v61++, 1);
      v4 = a4;
      if (v33)
        goto LABEL_82;
    }
    else
    {
      v28 = ~v21;
      for (i = v22 + 1; ; i = v30 + 1)
      {
        v30 = i & v28;
        if (((*(_QWORD *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0)
          break;
        v31 = (_QWORD *)(v25 + 16 * v30);
        v32 = *v31 == v19 && v31[1] == v18;
        if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v23 = v30 >> 6;
          v24 = 1 << v30;
          goto LABEL_38;
        }
      }
LABEL_36:
      result = swift_bridgeObjectRelease();
      v6 = v62;
      v5 = a3;
      v4 = a4;
    }
  }
  v16 = v6 + 4;
  if (v6 + 4 >= v59)
    goto LABEL_79;
  v14 = *(_QWORD *)(v58 + 8 * v16);
  if (v14)
  {
    v15 = v6 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v59)
      goto LABEL_79;
    v14 = *(_QWORD *)(v58 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_21;
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x1E0DEE9E8];
LABEL_35:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  result = static _SetStorage.allocate(capacity:)();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_35;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_35;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_35;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_35;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_35;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v19;

  v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v15 = ~v7;
    do
    {
      v8 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v16 = (_QWORD *)(v9 + 16 * v8);
      v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v2;
  v19 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v13 = v19;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t i;
  unint64_t v33;
  _QWORD *v34;
  BOOL v35;
  int64_t v36;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;

  v7 = *(_QWORD *)(a3 + 16);
  v39 = (unint64_t *)result;
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v40 = a3 + 56;
  while (2)
  {
    v38 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_15;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_48;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        v15 = a5[3];
        if (v13 >= v14)
          goto LABEL_46;
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v13);
        if (!v17)
        {
          v18 = v9 + 2;
          v15 = v9 + 1;
          if (v9 + 2 >= v14)
            goto LABEL_46;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            v15 = v9 + 2;
            if (v9 + 3 >= v14)
              goto LABEL_46;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              v13 = v9 + 3;
              goto LABEL_14;
            }
            v18 = v9 + 4;
            v15 = v9 + 3;
            if (v9 + 4 >= v14)
              goto LABEL_46;
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v13 = v9 + 5;
              v15 = v9 + 4;
              if (v9 + 5 >= v14)
                goto LABEL_46;
              v17 = *(_QWORD *)(v16 + 8 * v13);
              if (!v17)
              {
                v36 = v9 + 6;
                while (v36 < v14)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    v13 = v36 - 1;
                    goto LABEL_14;
                  }
                }
                v15 = v14 - 1;
LABEL_46:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v39, a2, v38, a3);
              }
              goto LABEL_14;
            }
          }
          v13 = v18;
        }
LABEL_14:
        v11 = (v17 - 1) & v17;
        v12 = __clz(__rbit64(v17)) + (v13 << 6);
        v9 = v13;
LABEL_15:
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v40 + 8 * (v24 >> 6))) == 0)
          goto LABEL_32;
        v27 = *(_QWORD *)(a3 + 48);
        v28 = (_QWORD *)(v27 + 16 * v24);
        v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
        v31 = ~v23;
        for (i = v24 + 1; ; i = v33 + 1)
        {
          v33 = i & v31;
          if (((*(_QWORD *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0)
            break;
          v34 = (_QWORD *)(v27 + 16 * v33);
          v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v25 = v33 >> 6;
            v26 = 1 << v33;
            goto LABEL_22;
          }
        }
LABEL_32:
        result = swift_bridgeObjectRelease();
      }
      result = swift_bridgeObjectRelease();
LABEL_22:
      v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_48:
      __break(1u);
      return result;
    }
    if (v38 != 1)
      continue;
    return MEMORY[0x1E0DEE9E8];
  }
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            v14 = *(_QWORD *)(v3 + 48);
            v15 = (_OWORD *)(v14 + 16 * v2);
            v16 = (_OWORD *)(v14 + 16 * v6);
            v17 = v2 != v6 || v15 >= v16 + 1;
            v2 = v6;
            if (v17)
            {
              *v15 = *v16;
              v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(a2 + 2, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  a2[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for SiriEnvironmentKeyValuePairs.CodingKeys, &unk_1E7CDA3C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for SiriEnvironmentKeyValuePairs.CodingKeys, &unk_1E7CDA3C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for SiriEnvironmentKeyValuePairs.CodingKeys, &unk_1E7CDA3C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for SiriEnvironmentKeyValuePairs.CodingKeys, &unk_1E7CDA3C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriEnvironmentKeyValuePairs.CodingKeys and conformance SiriEnvironmentKeyValuePairs.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    v8 = a2;
    result = MEMORY[0x1C3BCEDD8](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for SiriEnvironmentKeyValuePairs()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for SiriEnvironmentKeyValuePairs(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SiriEnvironmentKeyValuePairs(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for SiriEnvironmentKeyValuePairs(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriEnvironmentKeyValuePairs(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriEnvironmentKeyValuePairs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriEnvironmentKeyValuePairs()
{
  return &type metadata for SiriEnvironmentKeyValuePairs;
}

uint64_t storeEnumTagSinglePayload for SiriEnvironmentKeyValuePairs.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C2F6D980 + 4 * byte_1C2F83915[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C2F6D9B4 + 4 * asc_1C2F83910[v4]))();
}

uint64_t sub_1C2F6D9B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F6D9BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F6D9C4);
  return result;
}

uint64_t sub_1C2F6D9D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F6D9D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C2F6D9DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F6D9E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SiriEnvironmentKeyValuePairs.CodingKeys()
{
  return &unk_1E7CDA3C8;
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = -1 << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64)
    v8 = ~(-1 << -(char)v4);
  else
    v8 = -1;
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(_QWORD *);
  uint64_t result;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  _QWORD v23[4];

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v8);
    v13 = *v12;
    v14 = v12[1];
    v1[3] = v6;
    v1[4] = v7;
    v15 = (void (*)(_QWORD *))v1[5];
    v23[0] = v10;
    v23[1] = v11;
    v23[2] = v13;
    v23[3] = v14;
    OUTLINED_FUNCTION_15_0();
    outlined copy of Data._Representation(v13, v14);
    v15(v23);
    swift_bridgeObjectRelease();
    return outlined consume of Data._Representation(v13, v14);
  }
  v17 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v18 = (unint64_t)(v1[2] + 64) >> 6;
    if (v17 < v18)
    {
      v19 = v1[1];
      v20 = *(_QWORD *)(v19 + 8 * v17);
      if (v20)
      {
LABEL_7:
        v7 = (v20 - 1) & v20;
        v8 = __clz(__rbit64(v20)) + (v17 << 6);
        v6 = v17;
        goto LABEL_3;
      }
      v21 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v18)
      {
        v20 = *(_QWORD *)(v19 + 8 * v21);
        if (v20)
        {
LABEL_10:
          v17 = v21;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v18)
        {
          v20 = *(_QWORD *)(v19 + 8 * (v5 + 3));
          if (v20)
          {
            v17 = v5 + 3;
            goto LABEL_7;
          }
          v21 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v18)
          {
            v20 = *(_QWORD *)(v19 + 8 * v21);
            if (v20)
              goto LABEL_10;
            v17 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v18)
            {
              v20 = *(_QWORD *)(v19 + 8 * v17);
              if (v20)
                goto LABEL_7;
              v6 = v18 - 1;
              v22 = v5 + 6;
              while (v22 < v18)
              {
                v20 = *(_QWORD *)(v19 + 8 * v22++);
                if (v20)
                {
                  v17 = v22 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_18()
{
  uint64_t v0;

  return v0 + 56;
}

void OUTLINED_FUNCTION_1_26()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
}

uint64_t OUTLINED_FUNCTION_2_18()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_3_19()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_4_13@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * a1);
  v4 = v3[1];
  v5 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * a1);
  *v5 = *v3;
  v5[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_6_18()
{
  return static _SetStorage.copy(original:)();
}

void *OUTLINED_FUNCTION_8_18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;

  return memmove(a1, v2, 8 * a2);
}

uint64_t OUTLINED_FUNCTION_10_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_11_16()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_18_14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t one-time initialization function for runQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v5, v7);
  v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v8, v9);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.utility.getter();
  v11[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v6, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E0DEF8D0], v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static AutoBugCaptureManager.runQueue = result;
  return result;
}

void AutoBugCaptureManager.diagnosticReporter.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = a1;

}

uint64_t AutoBugCaptureManager.__allocating_init(domain:sessionDuration:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(double *)(result + 32) = a3;
  return result;
}

uint64_t AutoBugCaptureManager.init(domain:sessionDuration:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(double *)(v3 + 32) = a3;
  return v3;
}

uint64_t AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v27 = a5;
  v28 = a7;
  v15 = type metadata accessor for DispatchWorkItemFlags();
  v32 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS();
  v30 = *(_QWORD *)(v19 - 8);
  v31 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for runQueue != -1)
    swift_once();
  v29 = static AutoBugCaptureManager.runQueue;
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = a1;
  v23[3] = a2;
  v23[4] = a3;
  v23[5] = a4;
  v23[6] = v27;
  v23[7] = a6;
  v23[8] = v28;
  v23[9] = a8;
  v23[10] = v8;
  aBlock[4] = partial apply for closure #1 in AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:);
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_3;
  v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v33 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1C3BCE1B4](0, v22, v18, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v31);
  return swift_release();
}

void closure #1 in AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(_QWORD), uint64_t a8, _QWORD *a9)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  void *v26;
  id v27;
  char v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  os_log_type_t type;
  void (*v50)(_QWORD);
  NSObject *log;
  uint64_t v52;

  v10 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v10 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v10)
    goto LABEL_14;
  v13 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v13 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v13)
    goto LABEL_14;
  v16 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0)
    v16 = a5 & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    AutoBugCaptureManager.diagnosticReporter.setter((uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DAFF28]), sel_init));
    if (one-time initialization token for logger != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.logger);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    log = Logger.logObject.getter();
    type = static os_log_type_t.debug.getter();
    v50 = a7;
    if (os_log_type_enabled(log, type))
    {
      v20 = swift_slowAlloc();
      v48 = swift_slowAlloc();
      v52 = v48;
      *(_DWORD *)v20 = 136315650;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 22) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F2D000, log, type, "AutoBugCaptureManager#generateSnapshot, with errorType: %s, errorSubType: %s and subTypeContext: %s", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1C3BCEEB0](v48, -1, -1);
      MEMORY[0x1C3BCEEB0](v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    v25 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, _QWORD, _QWORD))(*a9 + 144))(a1, a2, a3, a4, a5, a6, a9[2], a9[3]);
    v26 = v25;
    if (v25)
    {
      v52 = 0;
      v27 = v25;
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

      if (v52)
      {
        v28 = (*(uint64_t (**)(uint64_t))(*a9 + 152))(v52);
        swift_bridgeObjectRetain();
        v29 = Logger.logObject.getter();
        if ((v28 & 1) != 0)
        {
          v30 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v29, v30))
          {
            v31 = (uint8_t *)swift_slowAlloc();
            v32 = swift_slowAlloc();
            v52 = v32;
            *(_DWORD *)v31 = 136315138;
            swift_bridgeObjectRetain();
            v33 = Dictionary.description.getter();
            v35 = v34;
            swift_bridgeObjectRelease();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            v36 = "AutoBugCaptureManager#generateSnapshot, generated snapshot for signature: %s";
LABEL_31:
            _os_log_impl(&dword_1C2F2D000, v29, v30, v36, v31, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BCEEB0](v32, -1, -1);
            MEMORY[0x1C3BCEEB0](v31, -1, -1);

LABEL_33:
            v50(v28 & 1);

            return;
          }
        }
        else
        {
          v30 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v29, v30))
          {
            v31 = (uint8_t *)swift_slowAlloc();
            v32 = swift_slowAlloc();
            v52 = v32;
            *(_DWORD *)v31 = 136315138;
            swift_bridgeObjectRetain();
            v45 = Dictionary.description.getter();
            v47 = v46;
            swift_bridgeObjectRelease();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, &v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            v36 = "AutoBugCaptureManager#generateSnapshot, could not generate snapshot for signature: %s";
            goto LABEL_31;
          }
        }

        swift_bridgeObjectRelease_n();
        goto LABEL_33;
      }
    }
    v37 = v26;
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      v52 = v41;
      *(_DWORD *)v40 = 136315138;
      v42 = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSMutableDictionary?);
      v43 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F2D000, v38, v39, "AutoBugCaptureManager#generateSnapshot, couldn't parse signature: %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BCEEB0](v41, -1, -1);
      MEMORY[0x1C3BCEEB0](v40, -1, -1);

    }
    else
    {

    }
    a7(0);

  }
  else
  {
LABEL_14:
    if (one-time initialization token for logger != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.logger);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1C2F2D000, v22, v23, "AutoBugCaptureManager#generateSnapshot invalid argument(s) passed in, all strings should be populated", v24, 2u);
      MEMORY[0x1C3BCEEB0](v24, -1, -1);
    }

    a7(0);
  }
}

uint64_t sub_1C2F6EA48()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)()
{
  uint64_t v0;

  closure #1 in AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(void (**)(_QWORD))(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD **)(v0 + 80));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

NSMutableDictionary_optional __swiftcall AutoBugCaptureManager.createSignature(errorType:errorSubType:subTypeContext:domain:)(Swift::String errorType, Swift::String errorSubType, Swift::String subTypeContext, Swift::String domain)
{
  uint64_t v4;
  void *v5;
  void *object;
  uint64_t countAndFlagsBits;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;

  v5 = *(void **)(v4 + 40);
  if (v5)
  {
    object = domain._object;
    countAndFlagsBits = domain._countAndFlagsBits;
    v8 = subTypeContext._object;
    v9 = subTypeContext._countAndFlagsBits;
    v10 = errorSubType._object;
    v11 = errorSubType._countAndFlagsBits;
    v12 = errorType._object;
    v13 = errorType._countAndFlagsBits;
    v14 = v5;
    v15 = outlined bridged method (mbgbgbgbgbgnnn) of @objc SDRDiagnosticReporter.signature(withDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:)(countAndFlagsBits, (uint64_t)object, v13, (uint64_t)v12, v11, (uint64_t)v10, v9, (uint64_t)v8, 0xD000000000000011, 0x80000001C2F85FF0, 0, v14);

    errorType._countAndFlagsBits = (uint64_t)v15;
  }
  else
  {
    errorType._countAndFlagsBits = 0;
  }
  return *(NSMutableDictionary_optional *)&errorType._countAndFlagsBits;
}

Swift::Bool __swiftcall AutoBugCaptureManager.createSnapshot(signature:)(Swift::OpaquePointer signature)
{
  uint64_t v1;
  void *v2;
  double v4;
  void *v5;
  id v6;
  unsigned __int8 v7;
  _QWORD v9[6];

  v2 = *(void **)(v1 + 40);
  if (v2)
  {
    v4 = *(double *)(v1 + 32);
    v9[4] = closure #1 in AutoBugCaptureManager.createSnapshot(signature:);
    v9[5] = 0;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?) -> ();
    v9[3] = &block_descriptor_3;
    v5 = _Block_copy(v9);
    v6 = v2;
    v7 = outlined bridged method (mbgnnnnnn) of @objc SDRDiagnosticReporter.snapshot(withSignature:duration:event:payload:reply:)(v4, (uint64_t)signature._rawValue, 0, 0, (uint64_t)v5, v6);
    _Block_release(v5);

  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

void closure #1 in AutoBugCaptureManager.createSnapshot(signature:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (one-time initialization token for logger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.logger);
  swift_bridgeObjectRetain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v7 = v4;
    *(_DWORD *)v3 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
    v5 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F2D000, v1, v2, "AutoBugCaptureManager#createSnapshot, DiagnosticReporter snapshot response: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BCEEB0](v4, -1, -1);
    MEMORY[0x1C3BCEEB0](v3, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t AutoBugCaptureManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return v0;
}

uint64_t AutoBugCaptureManager.__deallocating_deinit()
{
  AutoBugCaptureManager.deinit();
  return swift_deallocClassInstance();
}

id outlined bridged method (mbgbgbgbgbgnnn) of @objc SDRDiagnosticReporter.signature(withDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;

  v18 = (void *)MEMORY[0x1C3BCDDDC]();
  v19 = (void *)MEMORY[0x1C3BCDDDC](a3, a4);
  v20 = (void *)MEMORY[0x1C3BCDDDC](a5, a6);
  v21 = (void *)MEMORY[0x1C3BCDDDC](a7, a8);
  v22 = (void *)MEMORY[0x1C3BCDDDC](a9, a10);
  v23 = objc_msgSend(a12, sel_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_, v18, v19, v20, v21, v22, a11);

  return v23;
}

id outlined bridged method (mbgnnnnnn) of @objc SDRDiagnosticReporter.snapshot(withSignature:duration:event:payload:reply:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  Class isa;
  id v12;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v12 = objc_msgSend(a6, sel_snapshotWithSignature_duration_event_payload_reply_, isa, a3, a4, a5, a1);

  return v12;
}

uint64_t type metadata accessor for AutoBugCaptureManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for AutoBugCaptureManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AutoBugCaptureManager.__allocating_init(domain:sessionDuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of AutoBugCaptureManager.createSignature(errorType:errorSubType:subTypeContext:domain:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of AutoBugCaptureManager.createSnapshot(signature:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

void static MockablePublished.subscript.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(_QWORD *, _QWORD);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];

  OUTLINED_FUNCTION_16_10();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v20 = v7;
  v9 = *v8;
  v10 = *(_QWORD *)(v0 + 80);
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v21[-1] - v14;
  v21[4] = v6;
  swift_unknownObjectRetain();
  v16 = (void (*)(_QWORD *, _QWORD))swift_readAtKeyPath();
  v18 = *v17;
  swift_retain();
  v16(v21, 0);
  swift_unknownObjectRelease();
  v19 = (*(uint64_t (**)(_QWORD, uint64_t))(v2 + 32))(*(_QWORD *)(v9 + *MEMORY[0x1E0DED210]), v2);
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 144))(v4);
    OUTLINED_FUNCTION_0_6();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v10) != 1)
    {
      swift_release();
      OUTLINED_FUNCTION_26_12(v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32));
      goto LABEL_6;
    }
    v19 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 104))(v19);
  swift_release();
LABEL_6:
  OUTLINED_FUNCTION_3_3();
}

void static MockablePublished.subscript.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_16_10();
  v12 = v1;
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v1, v4);
  OUTLINED_FUNCTION_34();
  v7 = v6 - v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  type metadata accessor for ObservableObjectPublisher();
  if (OUTLINED_FUNCTION_66_0())
  {
    ObservableObjectPublisher.send()();
    OUTLINED_FUNCTION_0_6();
  }
  OUTLINED_FUNCTION_32_8();
  swift_retain();
  OUTLINED_FUNCTION_72();
  OUTLINED_FUNCTION_23_7();
  v10 = OUTLINED_FUNCTION_4_3();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 152))(&v13, v10);
  OUTLINED_FUNCTION_0_6();
  CurrentValueSubject.send(_:)();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_32_8();
  swift_retain();
  OUTLINED_FUNCTION_72();
  OUTLINED_FUNCTION_23_7();
  OUTLINED_FUNCTION_4_3();
  v11 = v14;
  OUTLINED_FUNCTION_26_12(v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 112))(v7);
  OUTLINED_FUNCTION_23_7();
  swift_release();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_0_6();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v12, v2);
  OUTLINED_FUNCTION_3_3();
}

void protocol witness for MockableEnvironmentProvider.mock<A>(override:run:) in conformance NetworkAvailability()
{
  uint64_t v0;

  OUTLINED_FUNCTION_1_27();
  v0 = type metadata accessor for NetworkAvailability();
  OUTLINED_FUNCTION_0_19(v0);
  OUTLINED_FUNCTION_2_19();
}

uint64_t MockableEnvironmentProvider.mock<A>(override:run:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for EnvironmentProviderMockHelper(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  EnvironmentProviderMockHelper.__allocating_init(overrides:)(a1);
  v15 = v14;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 64);
  swift_bridgeObjectRetain();
  v17 = v16(v15, a4, a6);
  v18 = (*(uint64_t (**)(void))(*(_QWORD *)v15 + 152))();
  a2(v18);
  $defer #1 <A><A1>() in MockableEnvironmentProvider.mock<A>(override:run:)(v6, v17, a4, a5, a6);
  swift_release();
  return swift_release();
}

{
  return MockableEnvironmentProvider.mock<A>(override:run:)(a1, a2, a3, a5, a4, a6);
}

uint64_t type metadata accessor for EnvironmentProviderMockHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentProviderMockHelper);
}

uint64_t specialized MockableEnvironmentProvider.install(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 184))();
  type metadata accessor for CurrentDevice();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, (uint64_t (*)(uint64_t))type metadata accessor for CurrentDevice, (uint64_t)&protocol conformance descriptor for CurrentDevice);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  if (a1)
    v4 = static CurrentDevice.adjustMock(_:)(a1);
  else
    v4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 192))(v4);
  return v3;
}

uint64_t specialized MockableEnvironmentProvider.install(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
  type metadata accessor for CurrentProcess();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CurrentProcess and conformance CurrentProcess, (uint64_t (*)(uint64_t))type metadata accessor for CurrentProcess, (uint64_t)&protocol conformance descriptor for CurrentProcess);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  v3 = *(void (**)(uint64_t))((*v1 & *v0) + 0x68);
  v4 = swift_retain();
  v3(v4);
  return v2;
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
  type metadata accessor for NetworkAvailability();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, (uint64_t (*)(uint64_t))type metadata accessor for NetworkAvailability, (uint64_t)&protocol conformance descriptor for NetworkAvailability);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  v2 = *(void (**)(uint64_t))(*(_QWORD *)v0 + 184);
  v3 = swift_retain();
  v2(v3);
  return v1;
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
  type metadata accessor for CoreTelephonyService();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, (uint64_t (*)(uint64_t))type metadata accessor for CoreTelephonyService, (uint64_t)&protocol conformance descriptor for CoreTelephonyService);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  v2 = *(void (**)(uint64_t))(*(_QWORD *)v0 + 144);
  v3 = swift_retain();
  v2(v3);
  return v1;
}

uint64_t MockableEnvironmentProvider.install(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30[11];
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_16_10();
  v31 = v0;
  v32 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  v12 = (*(uint64_t (**)(uint8_t *, uint64_t))(v3 + 32))(v5, v3);
  OUTLINED_FUNCTION_29_11();
  type metadata accessor for ObservableObjectPublisher();
  if (OUTLINED_FUNCTION_66_0())
  {
    ObservableObjectPublisher.send()();
LABEL_5:
    v13 = swift_release();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_29_11();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  if (OUTLINED_FUNCTION_66_0())
  {
    lazy protocol witness table accessor for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>();
    Subject<>.send()();
    goto LABEL_5;
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v15 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.logger);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)OUTLINED_FUNCTION_4_1();
    v30[0] = OUTLINED_FUNCTION_4_1();
    v28 = v18;
    *(_DWORD *)v18 = 136315138;
    v27 = v18 + 4;
    OUTLINED_FUNCTION_14_17();
    v19 = _typeName(_:qualified:)();
    v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F2D000, v16, v17, "Unable to signal objectWillChange for provider of type %s", v28, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_1();
  }

LABEL_11:
  v29 = v7;
  MEMORY[0x1E0C80A78](v13, v14);
  *(&v27 - 2) = v5;
  *(&v27 - 1) = (uint8_t *)v3;
  v21 = OUTLINED_FUNCTION_14_17();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v24 = type metadata accessor for EnvironmentProviderMockHelper(255, v21, AssociatedConformanceWitness, v23);
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(uint64_t, uint64_t))partial apply for closure #1 in MockableEnvironmentProvider.install(_:), (uint64_t)(&v27 - 4), MEMORY[0x1E0DEDCE8], v24, v25, (uint64_t)v30);
  (*(void (**)(uint64_t, uint8_t *, uint64_t))(v3 + 40))(v30[0], v5, v3);
  return v12;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v26 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  OUTLINED_FUNCTION_34();
  v11 = v10 - v9;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  OUTLINED_FUNCTION_34();
  v19 = v18 - v17;
  MEMORY[0x1E0C80A78](v20, v21);
  OUTLINED_FUNCTION_25_4();
  (*(void (**)(uint64_t, uint64_t))(v22 + 16))(v7, v23);
  v24 = 1;
  if (__swift_getEnumTagSinglePayload(v7, 1, v13) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v19, v7, v13);
    a1(v19, v11);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v19, v13);
    if (v6)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(a5, v11, a3);
    v24 = 0;
  }
  return __swift_storeEnumTagSinglePayload(a6, v24, 1, a4);
}

void EnvironmentProviderMockHelper.__allocating_init(overrides:)(uint64_t a1)
{
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  OUTLINED_FUNCTION_31();
}

void protocol witness for MockableEnvironmentProvider.mock<A>(override:run:) in conformance CurrentDevice()
{
  uint64_t v0;

  OUTLINED_FUNCTION_1_27();
  v0 = type metadata accessor for CurrentDevice();
  OUTLINED_FUNCTION_0_19(v0);
  OUTLINED_FUNCTION_2_19();
}

void protocol witness for MockableEnvironmentProvider.mock<A>(override:run:) in conformance CurrentProcess()
{
  uint64_t v0;

  OUTLINED_FUNCTION_1_27();
  v0 = type metadata accessor for CurrentProcess();
  OUTLINED_FUNCTION_0_19(v0);
  OUTLINED_FUNCTION_2_19();
}

uint64_t static MockableEnvironmentProvider.adjustMock(_:)()
{
  return static MockableEnvironmentProvider.adjustMock(_:)();
}

uint64_t MockableEnvironmentProvider.mock<A>(override:run:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch();
}

uint64_t MockableEnvironmentProvider.mock<A>(override:run:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t (*v13)(_QWORD);

  v1 = v0[8];
  v2 = v0[6];
  v3 = v0[3];
  v4 = (int *)v0[4];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for EnvironmentProviderMockHelper(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  EnvironmentProviderMockHelper.__allocating_init(overrides:)(v3);
  v9 = v8;
  v0[10] = v8;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 64);
  swift_bridgeObjectRetain();
  v0[11] = v10(v9, v2, v1);
  (*(void (**)(void))(*(_QWORD *)v9 + 152))();
  v13 = (uint64_t (*)(_QWORD))((char *)v4 + *v4);
  v11 = (_QWORD *)swift_task_alloc();
  v0[12] = v11;
  *v11 = v0;
  v11[1] = MockableEnvironmentProvider.mock<A>(override:run:);
  return v13(v0[2]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_12_2();
  return OUTLINED_FUNCTION_8_19(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_11_17();
  OUTLINED_FUNCTION_0_6();
  OUTLINED_FUNCTION_12_2();
  return OUTLINED_FUNCTION_8_19(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t $defer #1 <A><A1>() in MockableEnvironmentProvider.mock<A>(override:run:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 64))(a2, a3, a5);
  return swift_release();
}

uint64_t partial apply for closure #1 in MockableEnvironmentProvider.install(_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v2 + 24) + 72))(*a1);
  *a2 = result;
  return result;
}

uint64_t EnvironmentProviderMockHelper.init(overrides:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t EnvironmentProviderMockHelper.overrides<A>(_:)()
{
  uint64_t v0;
  char v1;

  SiriEnvironmentStorage.storage.getter();
  type metadata accessor for PartialKeyPath();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v0 = type metadata accessor for Dictionary.Keys();
  MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DE9ED0], v0);
  v1 = Sequence<>.contains(_:)();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t EnvironmentProviderMockHelper.subscript.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v10;
  _QWORD v11[4];

  v4 = *a1;
  v5 = SiriEnvironmentStorage.storage.getter();
  v10 = a1;
  v6 = type metadata accessor for PartialKeyPath();
  swift_retain();
  MEMORY[0x1C3BCDD88](v11, &v10, v5, v6, MEMORY[0x1E0DEE9B8] + 8, MEMORY[0x1E0DEBE98]);
  swift_release();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v7 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v4 + 8);
  v8 = OUTLINED_FUNCTION_66_0();
  return __swift_storeEnumTagSinglePayload(a2, v8 ^ 1u, 1, v7);
}

void EnvironmentProviderMockHelper.backfill(previousMock:)(uint64_t a1)
{
  if (a1)
  {
    SiriEnvironmentStorage.storage.getter();
    OUTLINED_FUNCTION_25_0();
    type metadata accessor for PartialKeyPath();
    type metadata accessor for Dictionary();
    swift_retain();
    Dictionary.merge(_:uniquingKeysWith:)();
    swift_endAccess();
    OUTLINED_FUNCTION_12_2();
  }
  OUTLINED_FUNCTION_29_0();
}

uint64_t EnvironmentProviderMockHelper.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EnvironmentProviderMockHelper.__deallocating_deinit()
{
  EnvironmentProviderMockHelper.deinit();
  return swift_deallocClassInstance();
}

uint64_t key path setter for MockablePublished.value : <A>MockablePublished<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1, a1);
  v4 = (char *)&v7 - v3;
  (*(void (**)(char *))(v5 + 16))((char *)&v7 - v3);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 112))(v4);
}

void MockablePublished.value.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_25_0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 16))(a1, v1);
  OUTLINED_FUNCTION_29_0();
}

void MockablePublished.value.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_13_15();
  OUTLINED_FUNCTION_25_0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 40))(v1, a1);
  swift_endAccess();
  OUTLINED_FUNCTION_29_0();
}

uint64_t (*MockablePublished.value.modify())()
{
  OUTLINED_FUNCTION_25_0();
  return SiriEnvironment.providers.modify;
}

uint64_t key path setter for MockablePublished.wrappedValue : <A>MockablePublished<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1, a1);
  v4 = (char *)&v7 - v3;
  (*(void (**)(char *))(v5 + 16))((char *)&v7 - v3);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 136))(v4);
}

uint64_t MockablePublished.wrappedValue.getter()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (one-time initialization token for logger != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.logger);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = OUTLINED_FUNCTION_4_1();
    v7 = OUTLINED_FUNCTION_4_1();
    *(_DWORD *)v3 = 136315650;
    v4 = OUTLINED_FUNCTION_31_7();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    OUTLINED_FUNCTION_18_15();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 22) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6465737520746F6ELL, 0xE800000000000000, &v7);
    OUTLINED_FUNCTION_18_15();
    _os_log_impl(&dword_1C2F2D000, v1, v2, "FatalError at %s:%lu - %s", (uint8_t *)v3, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_1();
  }

  result = OUTLINED_FUNCTION_24_11();
  __break(1u);
  return result;
}

uint64_t MockablePublished.wrappedValue.setter()
{
  Swift::String v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8[2];

  v8[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  v0._object = (void *)0x80000001C2F86140;
  v0._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  if (one-time initialization token for logger != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.logger);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = OUTLINED_FUNCTION_4_1();
    v8[0] = OUTLINED_FUNCTION_4_1();
    *(_DWORD *)v4 = 136315650;
    v5 = OUTLINED_FUNCTION_31_7();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, v8);
    OUTLINED_FUNCTION_17_11();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v8);
    OUTLINED_FUNCTION_17_11();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2F2D000, v2, v3, "FatalError at %s:%lu - %s", (uint8_t *)v4, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_1();
  }

  swift_bridgeObjectRelease_n();
  result = OUTLINED_FUNCTION_24_11();
  __break(1u);
  return result;
}

uint64_t MockablePublished.wrappedValue.modify()
{
  uint64_t v0;

  v0 = MockablePublished.wrappedValue.getter();
  return static MockablePublished.subscript.modify(v0);
}

void (*static MockablePublished.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[2] = a4;
  v11[3] = a5;
  *v11 = a2;
  v11[1] = a3;
  v12 = *(_QWORD *)(v5 + 80);
  v11[4] = v5;
  v11[5] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v11[6] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v11[7] = malloc(v14);
  v11[8] = malloc(v14);
  static MockablePublished.subscript.getter();
  return static MockablePublished.subscript.modify;
}

void static MockablePublished.subscript.modify()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_16_10();
  v1 = *(_QWORD **)v0;
  v2 = *(void **)(*(_QWORD *)v0 + 56);
  v3 = *(void **)(*(_QWORD *)v0 + 64);
  if ((v4 & 1) != 0)
  {
    v5 = v1[5];
    v6 = v1[6];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)v0 + 56), v3, v5);
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    static MockablePublished.subscript.setter();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    static MockablePublished.subscript.setter();
  }
  free(v3);
  free(v2);
  free(v1);
}

uint64_t key path setter for MockablePublished.projectedValue : <A>MockablePublished<A>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;

  v2 = *a2;
  v5 = *a1;
  v3 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 160);
  swift_retain();
  return v3(&v5);
}

uint64_t MockablePublished.projectedValue.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96));
  OUTLINED_FUNCTION_25_0();
  *a1 = *v3;
  return swift_retain();
}

void MockablePublished.projectedValue.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96));
  OUTLINED_FUNCTION_25_0();
  *v3 = v2;
  swift_release();
  OUTLINED_FUNCTION_29_0();
}

uint64_t (*MockablePublished.projectedValue.modify())()
{
  OUTLINED_FUNCTION_25_0();
  return SiriEnvironmentStorage.storage.modify;
}

void MockablePublished.__allocating_init(wrappedValue:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  MockablePublished.init(wrappedValue:)(a1, v2);
  OUTLINED_FUNCTION_31();
}

uint64_t MockablePublished.init(wrappedValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  OUTLINED_FUNCTION_25_4();
  OUTLINED_FUNCTION_22_10(v2 + *(_QWORD *)(v7 + 88));
  OUTLINED_FUNCTION_22_10(v3);
  MockablePublished.Publisher.init(_:)(v3, v5, &v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 96)) = v9;
  return v2;
}

uint64_t MockablePublished.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CurrentValueSubject();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  v9 = CurrentValueSubject.__allocating_init(_:)();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v9;
  return result;
}

void MockablePublished.Publisher.receive<A>(subscriber:)()
{
  CurrentValueSubject.receive<A>(subscriber:)();
  OUTLINED_FUNCTION_31();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance MockablePublished<A>.Publisher()
{
  MockablePublished.Publisher.receive<A>(subscriber:)();
}

uint64_t MockablePublished.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_release();
  return v0;
}

uint64_t MockablePublished.__deallocating_deinit()
{
  MockablePublished.deinit();
  return swift_deallocClassInstance();
}

void protocol witness for MockableEnvironmentProvider.mock<A>(override:run:) in conformance CoreTelephonyService()
{
  uint64_t v0;

  OUTLINED_FUNCTION_1_27();
  v0 = type metadata accessor for CoreTelephonyService();
  OUTLINED_FUNCTION_0_19(v0);
  OUTLINED_FUNCTION_2_19();
}

unint64_t lazy protocol witness table accessor for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>;
  if (!lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0C95F40], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in MockablePublished<A>.Publisher()
{
  return MEMORY[0x1E0DEDD18];
}

void sub_1C2F70E28(uint64_t a1)
{
  (*(void (**)(void))(**(_QWORD **)a1 + 104))();
  OUTLINED_FUNCTION_31();
}

_QWORD *sub_1C2F70E54(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_1C2F70E60(uint64_t a1)
{
  (*(void (**)(void))(**(_QWORD **)a1 + 128))();
  OUTLINED_FUNCTION_31();
}

_QWORD *sub_1C2F70E8C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 152))(&v4);
  *a2 = v4;
  return result;
}

uint64_t dispatch thunk of MockableEnvironmentProvider.mock.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MockableEnvironmentProvider.mock.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of MockableEnvironmentProvider.mock.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of MockableEnvironmentProvider.mock<A>(override:run:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of MockableEnvironmentProvider.install(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of static MockableEnvironmentProvider.adjustMock(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t method lookup function for EnvironmentProviderMockHelper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EnvironmentProviderMockHelper.__allocating_init(overrides:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of EnvironmentProviderMockHelper.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of EnvironmentProviderMockHelper.backfill(previousMock:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t type metadata completion function for MockablePublished()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for MockablePublished(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MockablePublished);
}

uint64_t method lookup function for MockablePublished()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MockablePublished.value.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of MockablePublished.value.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of MockablePublished.value.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of MockablePublished.wrappedValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MockablePublished.wrappedValue.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MockablePublished.projectedValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MockablePublished.projectedValue.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of MockablePublished.projectedValue.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of MockablePublished.__allocating_init(wrappedValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t type metadata accessor for MockablePublished.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MockablePublished.Publisher);
}

uint64_t OUTLINED_FUNCTION_0_19(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  return MockableEnvironmentProvider.mock<A>(override:run:)(v5, v4, v3, a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_1_27()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_8_19(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_10_17()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t OUTLINED_FUNCTION_11_17()
{
  uint64_t *v0;

  return $defer #1 <A><A1>() in MockableEnvironmentProvider.mock<A>(override:run:)(v0[9], v0[11], v0[6], v0[7], v0[8]);
}

uint64_t OUTLINED_FUNCTION_12_13()
{
  return 8;
}

uint64_t OUTLINED_FUNCTION_13_15()
{
  uint64_t v0;

  return v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
}

uint64_t OUTLINED_FUNCTION_14_17()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t OUTLINED_FUNCTION_17_11()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_18_15()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_22_10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_23_7()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_24_11()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_26_12@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_29_11()
{
  return dispatch thunk of ObservableObject.objectWillChange.getter();
}

uint64_t OUTLINED_FUNCTION_31_7()
{
  return StaticString.description.getter();
}

uint64_t OUTLINED_FUNCTION_32_8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
  return swift_unknownObjectRetain();
}

uint64_t static TypeIdentifier.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void TypeIdentifier.init(for:)(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[16];
  uint64_t v5;
  uint64_t v6;

  TypeInformation.init(for:)((uint64_t)v4);
  v2 = v5;
  v3 = v6;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_0();
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_2_20();
}

uint64_t TypeIdentifier.init<A>(encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  v8 = String.init<A>(_:)();
  v10 = v9;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v8;
  a3[1] = v10;
  return result;
}

uint64_t TypeIdentifier.encoding.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  OUTLINED_FUNCTION_61_0();
  return v1;
}

uint64_t TypeIdentifier.typeName.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v5;

  v1 = *v0;
  v2 = v0[1];
  OUTLINED_FUNCTION_61_0();
  specialized TypeInformation.init<A>(encoding:)(v1, v2, (uint64_t)&v5);
  v3 = TypeInformation.typeName.getter();
  OUTLINED_FUNCTION_7_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_13_0();
  return v3;
}

uint64_t TypeIdentifier.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  OUTLINED_FUNCTION_5_17(a1);
  OUTLINED_FUNCTION_14_0();
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    OUTLINED_FUNCTION_5_17(v9);
    OUTLINED_FUNCTION_14_0();
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v5 = String.init<A>(_:)();
    v7 = v6;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    *a2 = v5;
    a2[1] = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TypeIdentifier.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  OUTLINED_FUNCTION_5_17(a1);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

unint64_t TypeIdentifier.description.getter()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;
  unint64_t v11;
  unint64_t v12;

  v2 = *v0;
  v1 = (void *)v0[1];
  swift_bridgeObjectRetain();
  specialized TypeInformation.init<A>(encoding:)(v2, (unint64_t)v1, (uint64_t)&v11);
  v3 = TypeInformation.typeName.getter();
  v5 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v3;
  v12 = (unint64_t)v5;
  lazy protocol witness table accessor for type String and conformance String();
  if ((StringProtocol.contains<A>(_:)() & 1) != 0)
  {
    OUTLINED_FUNCTION_7_0();
    v11 = 0;
    v12 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v11 = 0xD00000000000001ALL;
    v12 = 0x80000001C2F861A0;
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = v2;
    v6._object = v1;
    String.append(_:)(v6);
    OUTLINED_FUNCTION_13_0();
    v7 = 10530;
    v8 = 0xE200000000000000;
  }
  else
  {
    v11 = 0;
    v12 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v11 = 0xD000000000000014;
    v12 = 0x80000001C2F86180;
    v9._countAndFlagsBits = v3;
    v9._object = v5;
    String.append(_:)(v9);
    OUTLINED_FUNCTION_7_0();
    v7 = 0x29666C65732ELL;
    v8 = 0xE600000000000000;
  }
  String.append(_:)(*(Swift::String *)&v7);
  return v11;
}

void one-time initialization function for any()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[16];
  uint64_t v3;
  uint64_t v4;

  TypeInformation.init(for:)((uint64_t)v2);
  v0 = v3;
  v1 = v4;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_13_0();
  static TypeIdentifier.any = v0;
  *(_QWORD *)algn_1EF7D7CA8 = v1;
  OUTLINED_FUNCTION_2_20();
}

uint64_t static TypeIdentifier.any.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for any, &static TypeIdentifier.any, a1);
}

uint64_t one-time initialization function for int()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _BYTE v3[16];
  uint64_t v4;
  uint64_t v5;

  TypeInformation.init(for:)((uint64_t)v3);
  v0 = v4;
  v1 = v5;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  static TypeIdentifier.int = v0;
  *(_QWORD *)algn_1EF7D7CB8 = v1;
  return result;
}

uint64_t static TypeIdentifier.int.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for int, &static TypeIdentifier.int, a1);
}

uint64_t one-time initialization function for string()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _BYTE v3[16];
  uint64_t v4;
  uint64_t v5;

  TypeInformation.init(for:)((uint64_t)v3);
  v0 = v4;
  v1 = v5;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  static TypeIdentifier.string = v0;
  *(_QWORD *)algn_1EF7D7CC8 = v1;
  return result;
}

uint64_t static TypeIdentifier.string.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for string, &static TypeIdentifier.string, a1);
}

uint64_t one-time initialization function for double()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _BYTE v3[16];
  uint64_t v4;
  uint64_t v5;

  TypeInformation.init(for:)((uint64_t)v3);
  v0 = v4;
  v1 = v5;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  static TypeIdentifier.double = v0;
  *(_QWORD *)algn_1EF7D7CD8 = v1;
  return result;
}

uint64_t static TypeIdentifier.double.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for double, &static TypeIdentifier.double, a1);
}

uint64_t one-time initialization function for float()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _BYTE v3[16];
  uint64_t v4;
  uint64_t v5;

  TypeInformation.init(for:)((uint64_t)v3);
  v0 = v4;
  v1 = v5;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  static TypeIdentifier.float = v0;
  *(_QWORD *)algn_1EF7D7CE8 = v1;
  return result;
}

uint64_t static TypeIdentifier.float.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for float, &static TypeIdentifier.float, a1);
}

uint64_t one-time initialization function for BOOL()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _BYTE v3[16];
  uint64_t v4;
  uint64_t v5;

  TypeInformation.init(for:)((uint64_t)v3);
  v0 = v4;
  v1 = v5;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  static TypeIdentifier.BOOL = v0;
  *(_QWORD *)algn_1EF7D7CF8 = v1;
  return result;
}

uint64_t static TypeIdentifier.BOOL.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for BOOL, &static TypeIdentifier.BOOL, a1);
}

uint64_t TypeIdentifier.hash(into:)()
{
  OUTLINED_FUNCTION_61_0();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void TypeIdentifier.hashValue.getter()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_61_0();
  OUTLINED_FUNCTION_3_20();
  OUTLINED_FUNCTION_2_0();
  Hasher._finalize()();
  OUTLINED_FUNCTION_34_0();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TypeIdentifier@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return TypeIdentifier.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TypeIdentifier(_QWORD *a1)
{
  return TypeIdentifier.encode(to:)(a1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance TypeIdentifier()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_61_0();
  OUTLINED_FUNCTION_3_20();
  OUTLINED_FUNCTION_2_0();
  Hasher._finalize()();
  OUTLINED_FUNCTION_34_0();
}

ValueMetadata *type metadata accessor for TypeIdentifier()
{
  return &type metadata for TypeIdentifier;
}

uint64_t OUTLINED_FUNCTION_3_20()
{
  return String.hash(into:)();
}

_QWORD *OUTLINED_FUNCTION_5_17(_QWORD *a1)
{
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

double protocol witness for static SiriEnvironmentProvider.defaultScope.getter in conformance NetworkAvailability@<D0>(_OWORD *a1@<X8>)
{
  return static SiriEnvironmentProvider.defaultScope.getter(a1);
}

double static SiriEnvironmentProvider.defaultScope.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 2.73405468e161;
  *a1 = xmmword_1C2F83D40;
  return result;
}

uint64_t specialized Sequence.filter(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];
  uint64_t v17;

  v17 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    result = __CocoaDictionary.makeIterator()();
    v14 = 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = result | 0x8000000000000000;
  }
  else
  {
    result = specialized _NativeDictionary.makeIterator()(a1, v16);
    v5 = v16[0];
    v14 = v16[1];
    v2 = v16[2];
    v3 = v16[3];
    v4 = v16[4];
  }
  v6 = (unint64_t)(v2 + 64) >> 6;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_7;
  while (1)
  {
    if (v4)
    {
      v7 = (v4 - 1) & v4;
      v8 = __clz(__rbit64(v4)) | (v3 << 6);
      v9 = v3;
      goto LABEL_26;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v11 >= v6)
      goto LABEL_32;
    v12 = *(_QWORD *)(v14 + 8 * v11);
    v9 = v3 + 1;
    if (!v12)
    {
      v9 = v3 + 2;
      if (v3 + 2 >= v6)
        goto LABEL_32;
      v12 = *(_QWORD *)(v14 + 8 * v9);
      if (!v12)
      {
        v9 = v3 + 3;
        if (v3 + 3 >= v6)
          goto LABEL_32;
        v12 = *(_QWORD *)(v14 + 8 * v9);
        if (!v12)
        {
          v9 = v3 + 4;
          if (v3 + 4 >= v6)
            goto LABEL_32;
          v12 = *(_QWORD *)(v14 + 8 * v9);
          if (!v12)
          {
            v9 = v3 + 5;
            if (v3 + 5 >= v6)
              goto LABEL_32;
            v12 = *(_QWORD *)(v14 + 8 * v9);
            if (!v12)
            {
              v13 = v3 + 6;
              while (v13 < v6)
              {
                v12 = *(_QWORD *)(v14 + 8 * v13++);
                if (v12)
                {
                  v9 = v13 - 1;
                  goto LABEL_25;
                }
              }
LABEL_32:
              outlined consume of [String : Data].Iterator._Variant();
              return v17;
            }
          }
        }
      }
    }
LABEL_25:
    v7 = (v12 - 1) & v12;
    v8 = __clz(__rbit64(v12)) + (v9 << 6);
LABEL_26:
    v10 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v8);
    swift_retain();
    if (!v10)
      goto LABEL_32;
    while (1)
    {
      if (MEMORY[0x1C3BCEF88](v10 + 24))
      {
        swift_release();
        result = swift_unknownObjectRelease();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        result = specialized ContiguousArray._endMutation()();
      }
      v3 = v9;
      v4 = v7;
      if ((v5 & 0x8000000000000000) == 0)
        break;
LABEL_7:
      if (__CocoaDictionary.Iterator.nextKey()())
      {
        type metadata accessor for _EnvironmentProviderTable.Key();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v10 = v15;
        swift_unknownObjectRelease();
        v9 = v3;
        v7 = v4;
        if (v15)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
  return result;
}

uint64_t SiriEnvironmentProvider.objectDidChange.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return static _EnvironmentProviderTable.publisher<A>(for:)(v2, a1, a2);
}

uint64_t static _EnvironmentProviderTable.publisher<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v30;
  Swift::Int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;

  if (one-time initialization token for lock != -1)
    goto LABEL_54;
  while (1)
  {
    objc_msgSend((id)static _EnvironmentProviderTable.lock, sel_lock);
    if (one-time initialization token for table != -1)
      swift_once();
    swift_beginAccess();
    v3 = swift_bridgeObjectRetain();
    v4 = specialized Sequence.filter(_:)(v3);
    v5 = v4;
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v6 = result;
      if (!result)
      {
LABEL_40:
        swift_bridgeObjectRelease_n();
        type metadata accessor for _EnvironmentProviderTable.Key();
        swift_allocObject();
        v33 = swift_unknownObjectRetain();
        v34 = _EnvironmentProviderTable.Key.init(object:)(v33);
        swift_beginAccess();
        if (((unint64_t)static _EnvironmentProviderTable.table & 0xC000000000000001) != 0)
        {
          swift_retain();
          if (__CocoaDictionary.lookup(_:)())
          {
LABEL_46:
            swift_endAccess();
            swift_release();
            type metadata accessor for EnvironmentProviderDidChangePublisher();
            v36 = swift_dynamicCastClass();
            if (!v36)
            {
              swift_unknownObjectRelease();
              goto LABEL_50;
            }
LABEL_51:
            swift_release();
            objc_msgSend((id)static _EnvironmentProviderTable.lock, sel_unlock);
            return v36;
          }
          swift_endAccess();
          swift_release();
        }
        else
        {
          if (*((_QWORD *)static _EnvironmentProviderTable.table + 2))
          {
            specialized __RawDictionaryStorage.find<A>(_:)(v34);
            if ((v35 & 1) != 0)
            {
              swift_retain();
              swift_unknownObjectRetain();
              goto LABEL_46;
            }
          }
          swift_endAccess();
        }
LABEL_50:
        type metadata accessor for EnvironmentProviderDidChangePublisher();
        v37 = *(_QWORD *)(a3 + 8);
        v38 = swift_unknownObjectRetain();
        v36 = EnvironmentProviderDidChangePublisher.__allocating_init<A>(source:)(v38, a2, v37);
        swift_beginAccess();
        swift_retain();
        v39 = swift_retain();
        specialized Dictionary._Variant.setValue(_:forKey:)(v39, v34);
        swift_endAccess();
        swift_release();
        goto LABEL_51;
      }
    }
    else
    {
      v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (!v6)
        goto LABEL_40;
    }
    if (v6 < 1)
      break;
    v8 = 0;
    v45 = v5 & 0xC000000000000001;
    v42 = v5 + 32;
    v43 = v5;
    v44 = v6;
    while (1)
    {
      if (v45)
      {
        v9 = MEMORY[0x1C3BCE388](v8, v5);
      }
      else
      {
        v9 = *(_QWORD *)(v42 + 8 * v8);
        swift_retain();
      }
      swift_beginAccess();
      if (((unint64_t)static _EnvironmentProviderTable.table & 0xC000000000000001) == 0)
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v9);
        if ((v28 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v46 = static _EnvironmentProviderTable.table;
          v30 = static _EnvironmentProviderTable.table;
          static _EnvironmentProviderTable.table = (_UNKNOWN *)0x8000000000000000;
          v31 = v30[3];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<_EnvironmentProviderTable.Key, Swift.AnyObject>);
          _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v31);
          swift_release();
          type metadata accessor for _EnvironmentProviderTable.Key();
          lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type _EnvironmentProviderTable.Key and conformance _EnvironmentProviderTable.Key, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentProviderTable.Key, (uint64_t)&protocol conformance descriptor for _EnvironmentProviderTable.Key);
          v6 = v44;
          _NativeDictionary._delete(at:)();
          static _EnvironmentProviderTable.table = v46;
          v5 = v43;
          swift_bridgeObjectRelease();
        }
        goto LABEL_39;
      }
      if ((uint64_t)static _EnvironmentProviderTable.table < 0)
        v10 = static _EnvironmentProviderTable.table;
      else
        v10 = (void *)((unint64_t)static _EnvironmentProviderTable.table & 0xFFFFFFFFFFFFFF8);
      swift_retain();
      swift_bridgeObjectRetain();
      v11 = __CocoaDictionary.lookup(_:)();
      swift_release();
      if (!v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
      swift_unknownObjectRelease();
      if (!MEMORY[0x1C3BCE4A8](v10))
      {
        swift_bridgeObjectRelease();
        v12 = MEMORY[0x1E0DEE9E0];
        goto LABEL_37;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_EnvironmentProviderTable.Key, Swift.AnyObject>);
      v12 = static _DictionaryStorage.convert(_:capacity:)();
      v48 = v12;
      __CocoaDictionary.makeIterator()();
      if (__CocoaDictionary.Iterator.next()())
        break;
LABEL_31:
      swift_release();
      v5 = v43;
LABEL_37:
      specialized __RawDictionaryStorage.find<A>(_:)(v9);
      if ((v32 & 1) == 0)
        goto LABEL_53;
      swift_release();
      type metadata accessor for _EnvironmentProviderTable.Key();
      lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type _EnvironmentProviderTable.Key and conformance _EnvironmentProviderTable.Key, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentProviderTable.Key, (uint64_t)&protocol conformance descriptor for _EnvironmentProviderTable.Key);
      _NativeDictionary._delete(at:)();
      static _EnvironmentProviderTable.table = (_UNKNOWN *)v12;
      swift_bridgeObjectRelease();
      v6 = v44;
LABEL_39:
      ++v8;
      swift_endAccess();
      swift_release();
      swift_unknownObjectRelease();
      if (v8 == v6)
        goto LABEL_40;
    }
    v14 = v13;
    type metadata accessor for _EnvironmentProviderTable.Key();
    while (1)
    {
      swift_dynamicCast();
      v12 = v48;
      v15 = *(_QWORD *)(v48 + 16);
      if (*(_QWORD *)(v48 + 24) <= v15)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15 + 1, 1);
        v12 = v48;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*(_QWORD *)(v47 + 16));
      v16 = Hasher._finalize()();
      v17 = v12 + 64;
      v18 = -1 << *(_BYTE *)(v12 + 32);
      v19 = v16 & ~v18;
      v20 = v19 >> 6;
      if (((-1 << v19) & ~*(_QWORD *)(v12 + 64 + 8 * (v19 >> 6))) == 0)
        break;
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v12 + 64 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v21) = v47;
      *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v21) = v14;
      ++*(_QWORD *)(v12 + 16);
      v26 = __CocoaDictionary.Iterator.next()();
      v14 = v27;
      if (!v26)
        goto LABEL_31;
    }
    v22 = 0;
    v23 = (unint64_t)(63 - v18) >> 6;
    while (++v20 != v23 || (v22 & 1) == 0)
    {
      v24 = v20 == v23;
      if (v20 == v23)
        v20 = 0;
      v22 |= v24;
      v25 = *(_QWORD *)(v17 + 8 * v20);
      if (v25 != -1)
      {
        v21 = __clz(__rbit64(~v25)) + (v20 << 6);
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    swift_once();
  }
  __break(1u);
  return result;
}

uint64_t EnvironmentProviderDidChangePublisher.__allocating_init<A>(source:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return EnvironmentProviderDidChangePublisher.init<A>(source:)(a1, a2, a3);
}

uint64_t EnvironmentProviderDidChangePublisher.init<A>(source:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;

  v59 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v5, v6);
  v56 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v55 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = a3;
  AssociatedTypeWitness = (_QWORD *)swift_getAssociatedTypeWitness();
  v52 = *(AssociatedTypeWitness - 1);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)&v40 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CurrentValueSubject<(), Never>);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v46 = AssociatedConformanceWitness;
  v45 = lazy protocol witness table accessor for type CurrentValueSubject<(), Never> and conformance CurrentValueSubject<A, B>();
  v61 = AssociatedTypeWitness;
  v62 = v15;
  v63 = AssociatedConformanceWitness;
  v64 = v45;
  v17 = type metadata accessor for Publishers.CombineLatest();
  v51 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v40 - v19;
  v44 = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0C95698], v17);
  v43 = MEMORY[0x1E0DEE9C0] + 8;
  v21 = (_QWORD *)type metadata accessor for Publishers.Map();
  v54 = *(v21 - 1);
  MEMORY[0x1E0C80A78](v21, v22);
  v41 = (char *)&v40 - v23;
  v24 = type metadata accessor for OS_dispatch_queue();
  v40 = v24;
  v25 = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0C95950], v21);
  v49 = v25;
  v48 = lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (uint64_t (*)(uint64_t))type metadata accessor for OS_dispatch_queue, MEMORY[0x1E0DEF7F8]);
  v61 = v21;
  v62 = v24;
  v63 = v25;
  v64 = v48;
  v50 = type metadata accessor for Publishers.Debounce();
  v53 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v26);
  v42 = (char *)&v40 - v27;
  swift_allocObject();
  v28 = (void *)CurrentValueSubject.init(_:)();
  *(_QWORD *)(v60 + 24) = v28;
  v29 = a2;
  v30 = v47;
  dispatch thunk of ObservableObject.objectWillChange.getter();
  v61 = v28;
  Publisher.combineLatest<A>(_:)();
  (*(void (**)(char *, _QWORD *))(v52 + 8))(v14, AssociatedTypeWitness);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v29;
  *(_QWORD *)(v31 + 24) = v30;
  v32 = v41;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v20, v17);
  v33 = v55;
  OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)();
  v61 = (id)static OS_dispatch_queue.main.getter();
  v34 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  v35 = v56;
  __swift_storeEnumTagSinglePayload(v56, 1, 1, v34);
  v36 = v42;
  Publisher.debounce<A>(for:scheduler:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v35);

  (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v58);
  (*(void (**)(char *, _QWORD *))(v54 + 8))(v32, v21);
  v37 = v50;
  MEMORY[0x1C3BCEDD8](MEMORY[0x1E0C95BB0], v50);
  v38 = Publisher.eraseToAnyPublisher()();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v36, v37);
  result = v60;
  *(_QWORD *)(v60 + 16) = v38;
  return result;
}

uint64_t EnvironmentProviderDidChangePublisher.receive<A>(subscriber:)()
{
  return AnyPublisher.receive<A>(subscriber:)();
}

Swift::Void __swiftcall EnvironmentProviderDidChangePublisher.send()()
{
  CurrentValueSubject.send(_:)();
  OUTLINED_FUNCTION_31();
}

uint64_t EnvironmentProviderDidChangePublisher.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t EnvironmentProviderDidChangePublisher.__deallocating_deinit()
{
  EnvironmentProviderDidChangePublisher.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance EnvironmentProviderDidChangePublisher()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

uint64_t dispatch thunk of static SiriEnvironmentProvider.defaultScope.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SiriEnvironmentProvider.init(storage:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata accessor for EnvironmentProviderDidChangePublisher()
{
  return objc_opt_self();
}

uint64_t method lookup function for EnvironmentProviderDidChangePublisher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EnvironmentProviderDidChangePublisher.receive<A>(subscriber:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of EnvironmentProviderDidChangePublisher.send()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

BOOL static _EnvironmentProviderTable.Key.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t _EnvironmentProviderTable.Key.init(object:)(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectWeakInit();
  *(_QWORD *)(v1 + 16) = a1;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v1;
}

void _EnvironmentProviderTable.Key.hash(into:)()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
  OUTLINED_FUNCTION_31();
}

uint64_t _EnvironmentProviderTable.Key.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak Swift.AnyObject?(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _EnvironmentProviderTable.Key()
{
  return objc_opt_self();
}

Swift::Int _EnvironmentProviderTable.Key.hashValue.getter()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _EnvironmentProviderTable.Key()
{
  return _EnvironmentProviderTable.Key.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance _EnvironmentProviderTable.Key()
{
  _EnvironmentProviderTable.Key.hash(into:)();
  OUTLINED_FUNCTION_31();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _EnvironmentProviderTable.Key()
{
  Hasher.init(_seed:)();
  _EnvironmentProviderTable.Key.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _EnvironmentProviderTable.Key(uint64_t *a1, uint64_t *a2)
{
  return static _EnvironmentProviderTable.Key.== infix(_:_:)(*a1, *a2);
}

uint64_t base witness table accessor for Equatable in _EnvironmentProviderTable.Key()
{
  return lazy protocol witness table accessor for type SiriEnvironmentStorage.StorageError and conformance SiriEnvironmentStorage.StorageError(&lazy protocol witness table cache variable for type _EnvironmentProviderTable.Key and conformance _EnvironmentProviderTable.Key, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentProviderTable.Key, (uint64_t)&protocol conformance descriptor for _EnvironmentProviderTable.Key);
}

uint64_t outlined destroy of weak Swift.AnyObject?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

unint64_t lazy protocol witness table accessor for type CurrentValueSubject<(), Never> and conformance CurrentValueSubject<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CurrentValueSubject<(), Never> and conformance CurrentValueSubject<A, B>;
  if (!lazy protocol witness table cache variable for type CurrentValueSubject<(), Never> and conformance CurrentValueSubject<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CurrentValueSubject<(), Never>);
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0C95FB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<(), Never> and conformance CurrentValueSubject<A, B>);
  }
  return result;
}

uint64_t sub_1C2F72BD8()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of OS_dispatch_queue.SchedulerOptions?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id one-time initialization function for lock()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  static _EnvironmentProviderTable.lock = (uint64_t)result;
  return result;
}

void one-time initialization function for table()
{
  static _EnvironmentProviderTable.table = (_UNKNOWN *)MEMORY[0x1E0DEE9E0];
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

_QWORD *specialized _NativeDictionary.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_EnvironmentProviderTable.Key, Swift.AnyObject>);
    v2 = (_QWORD *)static _DictionaryStorage.convert(_:capacity:)();
    v10 = v2;
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      v4 = v3;
      type metadata accessor for _EnvironmentProviderTable.Key();
      do
      {
        swift_dynamicCast();
        v2 = v10;
        v5 = v10[2];
        if (v10[3] <= v5)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v5 + 1, 1);
          v2 = v10;
        }
        specialized _NativeDictionary._unsafeInsertNew(key:value:)(v9, v4, v2);
        v6 = __CocoaDictionary.Iterator.next()();
        v4 = v7;
      }
      while (v6);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  return v2;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;

  v4 = v0;
  OUTLINED_FUNCTION_7_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v5 = v2;
  v6 = OUTLINED_FUNCTION_19_9();
  if (*(_QWORD *)(v1 + 16))
  {
    OUTLINED_FUNCTION_8_20();
    v27 = v7;
    OUTLINED_FUNCTION_3_21();
    v26 = v8;
    OUTLINED_FUNCTION_12_14();
    v9 = 0;
    if (!v0)
      goto LABEL_4;
LABEL_3:
    OUTLINED_FUNCTION_11_18();
    for (i = v10 | (v9 << 6); ; i = v14 + (v9 << 6))
    {
      v28 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + 16 * i);
      if ((v5 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v28, *((unint64_t *)&v28 + 1));
      }
      Hasher.init(_seed:)();
      OUTLINED_FUNCTION_18_16();
      Hasher._finalize()();
      OUTLINED_FUNCTION_4_14();
      if (v15)
      {
        OUTLINED_FUNCTION_14_18();
        while (++v18 != v19 || (v17 & 1) == 0)
        {
          v20 = v18 == v19;
          if (v18 == v19)
            v18 = 0;
          v17 |= v20;
          if (*(_QWORD *)(v3 + 8 * v18) != -1)
          {
            OUTLINED_FUNCTION_10_18();
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_15_13();
LABEL_27:
      OUTLINED_FUNCTION_0_20(v16);
      *(_OWORD *)(v22 + 16 * v21) = v28;
      ++*(_QWORD *)(v6 + 16);
      if (v0)
        goto LABEL_3;
LABEL_4:
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_36;
      if (v12 >= v26)
        goto LABEL_29;
      ++v9;
      if (!v27[v12])
      {
        v9 = v12 + 1;
        if (v12 + 1 >= v26)
          goto LABEL_29;
        if (!v27[v9])
        {
          v13 = v12 + 2;
          if (v13 >= v26)
          {
LABEL_29:
            OUTLINED_FUNCTION_5_5();
            v4 = v0;
            if ((v5 & 1) != 0)
            {
              OUTLINED_FUNCTION_17_12();
              if (v24 != v25)
                *v27 = -1 << v23;
              else
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v23 + 63) >> 6, v27);
              *(_QWORD *)(v1 + 16) = 0;
            }
            break;
          }
          if (!v27[v13])
          {
            while (1)
            {
              v9 = v13 + 1;
              if (__OFADD__(v13, 1))
                goto LABEL_37;
              if (v9 >= v26)
                goto LABEL_29;
              ++v13;
              if (v27[v9])
                goto LABEL_15;
            }
          }
          v9 = v13;
        }
      }
LABEL_15:
      OUTLINED_FUNCTION_16_13();
    }
  }
  OUTLINED_FUNCTION_5_5();
  *v4 = v6;
}

{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  __int128 v32[2];

  v5 = v0;
  OUTLINED_FUNCTION_7_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PluginPackage>);
  v31 = v2;
  v6 = OUTLINED_FUNCTION_19_9();
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_37;
  OUTLINED_FUNCTION_8_20();
  v30 = v7;
  OUTLINED_FUNCTION_3_21();
  v28 = v0;
  v29 = v8;
  OUTLINED_FUNCTION_12_14();
  v9 = 0;
  if (!v3)
    goto LABEL_4;
LABEL_3:
  OUTLINED_FUNCTION_11_18();
  for (i = v10 | (v9 << 6); ; i = v15 + (v9 << 6))
  {
    v16 = (__int128 *)(*(_QWORD *)(v1 + 56) + 40 * i);
    if ((v31 & 1) != 0)
    {
      outlined init with take of Transforming(v16, (uint64_t)v32);
    }
    else
    {
      outlined init with copy of Transforming((uint64_t)v16, (uint64_t)v32);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    OUTLINED_FUNCTION_18_16();
    Hasher._finalize()();
    OUTLINED_FUNCTION_4_14();
    if (v17)
    {
      OUTLINED_FUNCTION_14_18();
      while (++v20 != v21 || (v19 & 1) == 0)
      {
        v22 = v20 == v21;
        if (v20 == v21)
          v20 = 0;
        v19 |= v22;
        if (*(_QWORD *)(v4 + 8 * v20) != -1)
        {
          OUTLINED_FUNCTION_10_18();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return;
    }
    OUTLINED_FUNCTION_15_13();
LABEL_28:
    OUTLINED_FUNCTION_0_20(v18);
    outlined init with take of Transforming(v32, v24 + 40 * v23);
    ++*(_QWORD *)(v6 + 16);
    if (v3)
      goto LABEL_3;
LABEL_4:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_39;
    if (v12 >= v29)
    {
      OUTLINED_FUNCTION_5_5();
      v5 = v28;
      v13 = v30;
      goto LABEL_32;
    }
    v13 = v30;
    ++v9;
    if (!v30[v12])
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v29)
        goto LABEL_30;
      if (!v30[v9])
        break;
    }
LABEL_15:
    OUTLINED_FUNCTION_16_13();
  }
  v14 = v12 + 2;
  if (v14 < v29)
  {
    if (!v30[v14])
    {
      while (1)
      {
        v9 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_40;
        if (v9 >= v29)
          goto LABEL_30;
        ++v14;
        if (v30[v9])
          goto LABEL_15;
      }
    }
    v9 = v14;
    goto LABEL_15;
  }
LABEL_30:
  OUTLINED_FUNCTION_5_5();
  v5 = v28;
LABEL_32:
  if ((v31 & 1) != 0)
  {
    OUTLINED_FUNCTION_17_12();
    if (v26 != v27)
      *v13 = -1 << v25;
    else
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v25 + 63) >> 6, v13);
    *(_QWORD *)(v1 + 16) = 0;
  }
LABEL_37:
  OUTLINED_FUNCTION_5_5();
  *v5 = v6;
}

unint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_EnvironmentProviderTable.Key, Swift.AnyObject>);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v13 = 0;
    if (!v10)
      goto LABEL_6;
LABEL_5:
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * i);
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * i);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_unknownObjectRetain();
      }
      result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v19, v20, v6);
      if (v10)
        goto LABEL_5;
LABEL_6:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
LABEL_29:
        __break(1u);
        return result;
      }
      if (v16 >= v11)
        goto LABEL_22;
      v17 = v8[v16];
      ++v13;
      if (!v17)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v11)
          goto LABEL_22;
        v17 = v8[v13];
        if (!v17)
        {
          v18 = v16 + 2;
          if (v18 >= v11)
          {
LABEL_22:
            swift_release();
            if ((a2 & 1) != 0)
            {
              v21 = 1 << *(_BYTE *)(v5 + 32);
              if (v21 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v21 + 63) >> 6, (_QWORD *)(v5 + 64));
              else
                *v8 = -1 << v21;
              *(_QWORD *)(v5 + 16) = 0;
            }
            break;
          }
          v17 = v8[v18];
          if (!v17)
          {
            while (1)
            {
              v13 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_29;
              if (v13 >= v11)
                goto LABEL_22;
              v17 = v8[v13];
              ++v18;
              if (v17)
                goto LABEL_17;
            }
          }
          v13 = v18;
        }
      }
LABEL_17:
      v10 = (v17 - 1) & v17;
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t result;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(a1 + 16));
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  *(_QWORD *)(a3[6] + 8 * result) = a1;
  *(_QWORD *)(a3[7] + 8 * result) = a2;
  ++a3[2];
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)()
{
  _OWORD *v0;
  uint64_t v1;
  char v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_5_18();
  v0 = (_OWORD *)OUTLINED_FUNCTION_1_28();
  v3 = specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v1, v2);
  OUTLINED_FUNCTION_9_18((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
  return OUTLINED_FUNCTION_2_21();
}

{
  _OWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_5_18();
  v0 = (_OWORD *)OUTLINED_FUNCTION_1_28();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v1, v2);
  OUTLINED_FUNCTION_9_18(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
  return OUTLINED_FUNCTION_2_21();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *v3;
  *v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  OUTLINED_FUNCTION_9_18(v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  result = MEMORY[0x1C3BCE4A8](v7);
  if (!__OFADD__(result, 1))
  {
    *v3 = (uint64_t)specialized _NativeDictionary.init(_:capacity:)(v7, result + 1);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v10;
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *result;

  v4 = v3;
  v8 = *v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<ObjectIdentifier, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) == 0)
    return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, (uint64_t)a1, v18);
  v19 = (_OWORD *)(*(_QWORD *)(v18 + 56) + 32 * v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  return outlined init with take of Any(a1, v19);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _BOOL8 v17;
  Swift::Int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;

  v4 = v3;
  v8 = type metadata accessor for CodingUserInfoKey();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)();
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v15 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_9;
  }
  v19 = v14;
  v20 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<CodingUserInfoKey, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v18))
    goto LABEL_5;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v19 = v21;
LABEL_5:
  v23 = *v4;
  if ((v20 & 1) != 0)
  {
    v24 = (_OWORD *)(*(_QWORD *)(v23 + 56) + 32 * v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    outlined init with take of Any(a1, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    specialized _NativeDictionary._insert(at:key:value:)(v19, (uint64_t)v12, a1, v23);
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  _BOOL8 v18;
  Swift::Int v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = v4;
  v28 = a2;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v4;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)();
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v16 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_10;
  }
  v20 = v15;
  v21 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UUID, String>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v19))
    goto LABEL_5;
  v22 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v21 & 1) != (v23 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v20 = v22;
LABEL_5:
  v24 = *v5;
  if ((v21 & 1) != 0)
  {
    v25 = (uint64_t *)(*(_QWORD *)(v24 + 56) + 16 * v20);
    swift_bridgeObjectRelease();
    v26 = v28;
    *v25 = a1;
    v25[1] = v26;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
    specialized _NativeDictionary._insert(at:key:value:)(v20, (uint64_t)v13, a1, v28, v24);
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v4 = v3;
  v8 = *v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<_EnvironmentProviderTable.Key, Swift.AnyObject>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    type metadata accessor for _EnvironmentProviderTable.Key();
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = *(_QWORD *)(v18 + 56);
    result = swift_unknownObjectRelease();
    *(_QWORD *)(v19 + 8 * v14) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a1, v18);
    return swift_retain();
  }
  return result;
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

void *type metadata accessor for _EnvironmentProviderTable()
{
  return &unk_1E7CDA870;
}

void OUTLINED_FUNCTION_0_20(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * a1);
  *v5 = v3;
  v5[1] = v2;
}

uint64_t OUTLINED_FUNCTION_1_28()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t OUTLINED_FUNCTION_2_21()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_5_18()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_9_18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t OUTLINED_FUNCTION_12_14()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_18_16()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_19_9()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t Reducer.reduce.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

void Reducer.init()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_1_29();
  v3 = OUTLINED_FUNCTION_37();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v0;
  *v2 = destructiveProjectEnumData for InputOrigin;
  v2[1] = v3;
  OUTLINED_FUNCTION_9_0();
}

uint64_t sub_1C2F73D08()
{
  return swift_deallocObject();
}

uint64_t Reducer.init(apply:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void Reducer.init<A>(getter:setter:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (**v2)(uint64_t, uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_29();
  v3 = OUTLINED_FUNCTION_37();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v0;
  *v2 = partial apply for closure #1 in Reducer.init<A>(getter:setter:);
  v2[1] = (uint64_t (*)(uint64_t, uint64_t))v3;
  OUTLINED_FUNCTION_9_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (**v2)(uint64_t, uint64_t);
  uint64_t v3;

  OUTLINED_FUNCTION_1_29();
  v3 = OUTLINED_FUNCTION_37();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v0;
  *v2 = partial apply for closure #1 in Reducer.init<A>(getter:setter:);
  v2[1] = (uint64_t (*)(uint64_t, uint64_t))v3;
  OUTLINED_FUNCTION_9_0();
}

uint64_t closure #1 in Reducer.init<A>(getter:setter:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];

  v3 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a3 + 8);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v12 - v9;
  swift_getAtKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v10, v3);
  swift_setAtReferenceWritableKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v10, v3);
}

uint64_t partial apply for closure #1 in Reducer.init<A>(getter:setter:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in Reducer.init<A>(getter:setter:)(a1, a2, *(_QWORD **)(v2 + 16));
}

{
  return closure #1 in Reducer.init<A>(getter:setter:)(a1, a2);
}

uint64_t closure #1 in Reducer.init<A>(getter:setter:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = (char *)v12 - v3;
  v6 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v5 + 8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v2, v8);
  v10 = (char *)v12 - v9;
  swift_getAtKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v4, v10, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v6);
  swift_setAtReferenceWritableKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t objectdestroy_2Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

double Reducer.init(builder:)@<D0>(void (*a1)(__int128 *__return_ptr)@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  a1(&v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double Transformer.init(_:reducer:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12;
  double result;
  __int128 v14;
  _OWORD v15[2];

  v12 = OUTLINED_FUNCTION_37();
  *(_QWORD *)(v12 + 16) = a4;
  *(_QWORD *)(v12 + 24) = a5;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  *(_OWORD *)(v12 + 48) = *a3;
  Transformer.init(transform:)((uint64_t)partial apply for closure #1 in Transformer.init(_:reducer:), v12, a4, a5, v15);
  result = *(double *)v15;
  v14 = v15[1];
  *a6 = v15[0];
  a6[1] = v14;
  return result;
}

uint64_t partial apply for closure #1 in Transformer.init(_:reducer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in Transformer.init(_:reducer:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t result;

  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  (*(void (**)(void))(v2 + 32))();
  result = v7(a1, a2);
  if (v3)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  return result;
}

double Transformer.init(_:builder:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_OWORD *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _OWORD *a6@<X8>)
{
  uint64_t v11;
  double result;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];

  a3(v15);
  v14 = v15[0];
  v11 = OUTLINED_FUNCTION_37();
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = a5;
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = a2;
  *(_OWORD *)(v11 + 48) = v14;
  Transformer.init(transform:)((uint64_t)partial apply for closure #1 in Transformer.init(_:reducer:), v11, a4, a5, v15);
  result = *(double *)v15;
  v13 = v15[1];
  *a6 = v15[0];
  a6[1] = v13;
  return result;
}

uint64_t objectdestroy_8Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t static ReducerBuilder.buildIf(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  if (*a1)
  {
    *a2 = v2;
    a2[1] = v3;
  }
  else
  {
    Reducer.init()();
  }
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWPath) -> ())?(v2);
}

uint64_t static ReducerBuilder.buildExpression(_:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t static ReducerBuilder.buildBlock(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t, uint64_t);

  OUTLINED_FUNCTION_3_22();
  v4 = (uint64_t (*)(uint64_t, uint64_t))OUTLINED_FUNCTION_37();
  *((_QWORD *)v4 + 2) = v1;
  *((_QWORD *)v4 + 3) = v0;
  *((_QWORD *)v4 + 4) = v2;
  *v3 = partial apply for closure #1 in static ReducerBuilder.buildBlock(_:);
  v3[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in static ReducerBuilder.buildBlock(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v9 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a1);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v10, v15);
  v17 = &v21[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *))(v14 + 16))(v17);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, a2, a5);
  v26 = a3;
  v22 = a4;
  v23 = a5;
  v24 = v17;
  v25 = v12;
  type metadata accessor for Reducer(255, a4, a5, v18);
  v19 = type metadata accessor for Array();
  MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEAF38], v19);
  Sequence.forEach(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, a5);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v14 + 8))(v17, a4);
}

uint64_t sub_1C2F74420()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ReducerBuilder.buildBlock(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #1 in static ReducerBuilder.buildBlock(_:)(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t --> infix<A, B, C>(_:_:)(uint64_t a1, uint64_t a2)
{
  return --> infix<A, B, C>(_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))Reducer.init<A>(getter:setter:));
}

{
  return --> infix<A, B, C>(_:_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))Reducer.init<A>(getter:setter:));
}

uint64_t --> infix<A, B, C>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_1_29();
  swift_retain();
  swift_retain();
  return a3(v4, v3);
}

uint64_t -- infix<A, B, C>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)a1 = *(_QWORD *)a3;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain();
  OUTLINED_FUNCTION_4_15();
  swift_retain();
  return a2;
}

uint64_t --> infix<A, B, C, D>(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t);
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  OUTLINED_FUNCTION_3_22();
  v5 = *v4;
  v7 = *v6;
  v8 = v6[3];
  v9 = OUTLINED_FUNCTION_37();
  v10 = (_QWORD *)(v5 + *MEMORY[0x1E0DEE2A8]);
  *(_QWORD *)(v9 + 16) = *v10;
  *(_QWORD *)(v9 + 24) = v10[1];
  *(_QWORD *)(v9 + 32) = v2;
  *(_QWORD *)(v9 + 40) = v7;
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(v1 + 8);
  *(_QWORD *)(v9 + 64) = v8;
  *(_QWORD *)(v9 + 72) = v0;
  *v3 = partial apply for closure #1 in --> infix<A, B, C, D>(_:_:);
  v3[1] = (uint64_t (*)(uint64_t, uint64_t))v9;
  swift_retain();
  OUTLINED_FUNCTION_4_15();
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in --> infix<A, B, C, D>(_:_:)(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void (*v8)(char *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v25[4];

  v25[0] = a2;
  v7 = *a3;
  v8 = (void (*)(char *))a3[1];
  v25[1] = a4;
  v9 = *(_QWORD *)(*MEMORY[0x1E0DED210] + *a4 + 8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, v7);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v11, v14);
  v17 = (char *)v25 - v16;
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v15, v20);
  v22 = (char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAtKeyPath();
  v23 = v25[3];
  v8(v22);
  if (!v23)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v17, v9);
    swift_setAtReferenceWritableKeyPath();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, a6);
}

uint64_t sub_1C2F74714()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in --> infix<A, B, C, D>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  _OWORD v8[2];
  uint64_t v9;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(_OWORD *)(v2 + 48);
  v8[0] = *(_OWORD *)(v2 + 32);
  v8[1] = v5;
  v6 = *(_QWORD **)(v2 + 72);
  v9 = *(_QWORD *)(v2 + 64);
  return closure #1 in --> infix<A, B, C, D>(_:_:)(a1, a2, (uint64_t *)v8, v6, v3, v4);
}

_QWORD *initializeBufferWithCopyOfBuffer for Reducer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for Reducer()
{
  return swift_release();
}

_QWORD *assignWithCopy for Reducer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for Reducer(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for Reducer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Reducer);
}

uint64_t type metadata accessor for ReducerBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReducerBuilder);
}

uint64_t partial apply for closure #1 in closure #1 in static ReducerBuilder.buildBlock(_:)(uint64_t (**a1)(_QWORD, _QWORD))
{
  uint64_t v1;

  return (*a1)(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t OUTLINED_FUNCTION_4_15()
{
  return swift_retain();
}

uint64_t HomeInfo.homeIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HomeInfo.homeIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*HomeInfo.homeIdentifier.modify())()
{
  return destructiveProjectEnumData for InputOrigin;
}

SiriUtilities::HomeInfo __swiftcall HomeInfo.init()()
{
  _QWORD *v0;
  SiriUtilities::HomeInfo result;

  *v0 = 0;
  v0[1] = 0;
  return result;
}

uint64_t getEnumTagSinglePayload for HomeInfo(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HomeInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeInfo()
{
  return &type metadata for HomeInfo;
}

void Transformer.init(transform:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;

  v10 = OUTLINED_FUNCTION_36();
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  *a5 = a1;
  a5[1] = a2;
  a5[2] = partial apply for closure #1 in Transformer.init(transform:);
  a5[3] = v10;
  OUTLINED_FUNCTION_1_3();
}

uint64_t Transformer.transform.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t Transformer.reverseTransform.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t Transformer.init(transform:reverseTransform:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t closure #1 in Transformer.init(transform:)()
{
  uint64_t v0;

  lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
  swift_allocError();
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_BYTE *)(v0 + 16) = 2;
  return swift_willThrow();
}

uint64_t partial apply for closure #1 in Transformer.init(transform:)()
{
  return closure #1 in Transformer.init(transform:)();
}

void static RawRepresentable.transformer.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = OUTLINED_FUNCTION_36();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = OUTLINED_FUNCTION_36();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  *a3 = partial apply for closure #1 in static RawRepresentable.transformer.getter;
  a3[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v6;
  a3[2] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))partial apply for closure #2 in static RawRepresentable.transformer.getter;
  a3[3] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v7;
  OUTLINED_FUNCTION_1_3();
}

uint64_t closure #1 in static RawRepresentable.transformer.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  Swift::String v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v40 = a4;
  v44 = a1;
  v6 = type metadata accessor for Optional();
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v37 - v8;
  v41 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v37 - v15;
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v14, v18);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v22);
  v24 = (char *)&v37 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, v44, v11);
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    v42 = 0;
    v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v42 = 0xD000000000000028;
    v43 = 0x80000001C2F86280;
    v25._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26 = v42;
    v27 = v43;
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError();
    *(_QWORD *)v28 = v26;
    *(_QWORD *)(v28 + 8) = v27;
    *(_BYTE *)(v28 + 16) = 0;
    return swift_willThrow();
  }
  else
  {
    v30 = v17;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v24, v16, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v21, v24, AssociatedTypeWitness);
    dispatch thunk of RawRepresentable.init(rawValue:)();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, a2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v39);
      v42 = 0;
      v43 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      v31._object = (void *)0x80000001C2F862B0;
      v31._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v31);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v32._countAndFlagsBits = 0xD000000000000014;
      v32._object = (void *)0x80000001C2F862D0;
      String.append(_:)(v32);
      v33._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v34 = v42;
      v35 = v43;
      lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
      swift_allocError();
      *(_QWORD *)v36 = v34;
      *(_QWORD *)(v36 + 8) = v35;
      *(_BYTE *)(v36 + 16) = 0;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v24, AssociatedTypeWitness);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v40, v9, a2);
    }
  }
}

uint64_t partial apply for closure #1 in static RawRepresentable.transformer.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in static RawRepresentable.transformer.getter(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t closure #2 in static RawRepresentable.transformer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  dispatch thunk of RawRepresentable.rawValue.getter();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, AssociatedTypeWitness);
}

uint64_t partial apply for closure #2 in static RawRepresentable.transformer.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in static RawRepresentable.transformer.getter(a1);
}

uint64_t destroy for Transformer()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for Transformer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Transformer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for Transformer(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Transformer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Transformer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for Transformer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Transformer);
}

uint64_t outlined copy of TransformationError(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for TransformationError(uint64_t a1)
{
  return outlined consume of TransformationError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of TransformationError(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (!a3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TransformationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of TransformationError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TransformationError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of TransformationError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of TransformationError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TransformationError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of TransformationError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformationError(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for TransformationError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for TransformationError(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TransformationError()
{
  return &type metadata for TransformationError;
}

uint64_t OUTLINED_FUNCTION_0_21()
{
  return swift_deallocObject();
}

void __swiftcall TypeInformation.init(for:)(SiriUtilities::TypeInformation *__return_ptr retstr, SiriUtilities::TypeIdentifier a2)
{
  char v3;
  SiriUtilities::TypeIdentifier v4;
  SiriUtilities::TypeIdentifier v5;
  uint64_t v6;
  void *v7;
  _BYTE v8[8];
  SiriUtilities::TypeIdentifier v9;
  SiriUtilities::TypeIdentifier v10;
  uint64_t v11;
  void *v12;

  specialized TypeInformation.init<A>(encoding:)(*(_QWORD *)a2.encoding._countAndFlagsBits, *(_QWORD *)(a2.encoding._countAndFlagsBits + 8), (uint64_t)v8);
  v3 = v8[1];
  v4 = v9;
  v5 = v10;
  v6 = v11;
  v7 = v12;
  retstr->isOptional = v8[0];
  retstr->isArray = v3;
  retstr->baseType = v4;
  retstr->originalType = v5;
  retstr->encoding._countAndFlagsBits = v6;
  retstr->encoding._object = v7;
}

uint64_t TypeInformation.init(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  char v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = _mangledTypeName(_:)();
  if (v3)
  {
    result = specialized TypeInformation.init<A>(encoding:)(v2, v3, (uint64_t)&v17);
    v5 = BYTE1(v17);
    v6 = v18;
    v7 = v19;
    v8 = v20;
    v9 = v21;
    *(_BYTE *)a1 = v17;
    *(_BYTE *)(a1 + 1) = v5;
    *(_OWORD *)(a1 + 8) = v6;
    *(_OWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
  }
  else
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v18 = 0x80000001C2F862F0;
    v10._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v10);
    OUTLINED_FUNCTION_13_0();
    if (one-time initialization token for logger != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.logger);
    swift_bridgeObjectRetain_n();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc();
      v17 = swift_slowAlloc();
      *(_DWORD *)v14 = 136315650;
      v15 = StaticString.description.getter();
      v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v17);
      OUTLINED_FUNCTION_6_19();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2048;
      v22 = 38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 22) = 2080;
      OUTLINED_FUNCTION_4_0();
      v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001C2F862F0, &v17);
      OUTLINED_FUNCTION_6_19();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F2D000, v12, v13, "FatalError at %s:%lu - %s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_1();
    }

    swift_bridgeObjectRelease_n();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TypeInformation.init<A>(encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40[3];
  uint64_t v41;
  char *v42;
  uint64_t AssociatedTypeWitness;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;

  v41 = *(_QWORD *)(a3 + 8);
  v7 = *(_QWORD *)(v41 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  OUTLINED_FUNCTION_62_1();
  v40[2] = v9;
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v42 = (char *)v40 - v13;
  v14 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v12, v15);
  OUTLINED_FUNCTION_62_1();
  v44 = v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v40 - v19;
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  OUTLINED_FUNCTION_0_22();
  v22 = String.init<A>(_:)();
  v45 = v23;
  v46 = v22;
  OUTLINED_FUNCTION_0_22();
  TypeIdentifier.init<A>(encoding:)((uint64_t)v20, a2, &v48);
  v24 = v49;
  v47 = v48;
  swift_bridgeObjectRetain();
  if ((OUTLINED_FUNCTION_5_19() & 1) == 0)
  {
    v40[1] = v7;
    v41 = v24;
    v32 = dispatch thunk of StringProtocol.hasPrefix(_:)();
    v21(v44, a1, a2);
    v33 = a1;
    if ((v32 & 1) != 0)
    {
      v34 = v44;
      v35 = OUTLINED_FUNCTION_5_19();
      OUTLINED_FUNCTION_4_16(v34);
      v31 = v45;
      v30 = v46;
      if ((v35 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v50 = 1;
        v40[0] = v33;
        v21((uint64_t)v20, v33, a2);
        Collection.dropFirst(_:)();
        v36 = AssociatedTypeWitness;
        swift_getAssociatedConformanceWitness();
        v37 = (uint64_t)v42;
        Collection.dropLast(_:)();
        swift_getAssociatedConformanceWitness();
        TypeIdentifier.init<A>(encoding:)(v37, v36, &v48);
        result = OUTLINED_FUNCTION_4_16(v40[0]);
        v24 = v41;
        v28 = v48;
        v29 = v49;
        goto LABEL_6;
      }
    }
    else
    {
      OUTLINED_FUNCTION_4_16(v44);
      v31 = v45;
      v30 = v46;
    }
    result = OUTLINED_FUNCTION_4_16(v33);
    v50 = 0;
    v38 = v47;
    v28 = v47;
    v24 = v41;
    v29 = v41;
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  v50 = 256;
  OUTLINED_FUNCTION_0_22();
  v25 = (uint64_t)v42;
  BidirectionalCollection.dropLast(_:)();
  v26 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  TypeIdentifier.init<A>(encoding:)(v25, v26, &v48);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a2);
  v28 = v48;
  v29 = v49;
  v31 = v45;
  v30 = v46;
LABEL_6:
  v38 = v47;
LABEL_9:
  v39 = v50;
  *(_BYTE *)a4 = HIBYTE(v50);
  *(_BYTE *)(a4 + 1) = v39;
  *(_QWORD *)(a4 + 8) = v28;
  *(_QWORD *)(a4 + 16) = v29;
  *(_QWORD *)(a4 + 24) = v38;
  *(_QWORD *)(a4 + 32) = v24;
  *(_QWORD *)(a4 + 40) = v30;
  *(_QWORD *)(a4 + 48) = v31;
  return result;
}

uint64_t TypeInformation.typeName.getter()
{
  unsigned __int8 *v0;
  int v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[2];

  v1 = *v0;
  v2 = v0[1];
  v4 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  v6 = *((_QWORD *)v0 + 5);
  v5 = *((_QWORD *)v0 + 6);
  v7 = _typeByName(_:)();
  if (v7)
  {
    if (v7 != MEMORY[0x1E0DEE9C0] + 8)
      return _typeName(_:qualified:)();
    OUTLINED_FUNCTION_4_0();
    v9 = _mangledTypeName(_:)();
    if (v10)
    {
      if (v6 == v9 && v10 == v5)
      {
        OUTLINED_FUNCTION_13_0();
        OUTLINED_FUNCTION_19_5();
        return _typeName(_:qualified:)();
      }
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      OUTLINED_FUNCTION_13_0();
      OUTLINED_FUNCTION_19_5();
      if ((v12 & 1) != 0)
        return _typeName(_:qualified:)();
    }
    else
    {
      OUTLINED_FUNCTION_13_0();
    }
  }
  if ((v1 | v2) == 1)
  {
    swift_bridgeObjectRetain();
    v13 = specialized TypeInformation.init<A>(encoding:)(v4, v3, (uint64_t)v36);
    v14 = TypeInformation.typeName.getter(v13);
    v16 = v15;
    OUTLINED_FUNCTION_19_5();
    swift_bridgeObjectRelease();
    v17 = swift_bridgeObjectRelease();
    if (v1)
    {
      v36[0] = v14;
      v36[1] = v16;
      v25 = 63;
    }
    else
    {
      v36[1] = 0xE100000000000000;
      OUTLINED_FUNCTION_3_23(v17, v18, v19, v20, v21, v22, v23, v24, v35, 91);
      OUTLINED_FUNCTION_13_0();
      v25 = 93;
    }
    v34 = 0xE100000000000000;
  }
  else
  {
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)v36, "_typeByName(\"");
    HIWORD(v36[1]) = -4864;
    v26 = OUTLINED_FUNCTION_4_0();
    OUTLINED_FUNCTION_3_23(v26, v27, v28, v29, v30, v31, v32, v33, v35, v36[0]);
    OUTLINED_FUNCTION_13_0();
    v25 = 10530;
    v34 = 0xE200000000000000;
  }
  String.append(_:)(*(Swift::String *)&v25);
  return v36[0];
}

uint64_t TypeInformation.isOptional.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t TypeInformation.isArray.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t TypeInformation.baseType.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return OUTLINED_FUNCTION_9_11(*(_QWORD *)(v1 + 16), a1);
}

uint64_t TypeInformation.originalType.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return OUTLINED_FUNCTION_9_11(*(_QWORD *)(v1 + 32), a1);
}

uint64_t TypeInformation.encoding.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t TypeInformation.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = TypeInformation.typeName.getter();
  String.append(_:)(v0);
  OUTLINED_FUNCTION_13_0();
  v1._countAndFlagsBits = 0x29666C65732ELL;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0xD000000000000015;
}

uint64_t destroy for TypeInformation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TypeInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TypeInformation(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TypeInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TypeInformation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TypeInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TypeInformation()
{
  return &type metadata for TypeInformation;
}

uint64_t OUTLINED_FUNCTION_0_22()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v2, v3, v0);
}

void OUTLINED_FUNCTION_3_23(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;
  uint64_t v11;
  Swift::String v12;

  v12._countAndFlagsBits = v11;
  v12._object = v10;
  String.append(_:)(v12);
}

uint64_t OUTLINED_FUNCTION_4_16(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_5_19()
{
  return dispatch thunk of StringProtocol.hasSuffix(_:)();
}

uint64_t OUTLINED_FUNCTION_6_19()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t SafeCallback.init()()
{
  uint64_t v0;

  swift_unknownObjectWeakInit();
  return v0;
}

uint64_t SafeCallback.deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t SafeCallback.maybeObj.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_25_0();
  return MEMORY[0x1C3BCEF88](v0 + 16);
}

uint64_t SafeCallback.maybeObj.setter()
{
  OUTLINED_FUNCTION_25_0();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*SafeCallback.maybeObj.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  OUTLINED_FUNCTION_25_0();
  v3[3] = MEMORY[0x1C3BCEF88](v1 + 16);
  return WeakBox.value.modify;
}

uint64_t SafeCallback.reify(_:)(void (*a1)(void))
{
  uint64_t result;

  result = OUTLINED_FUNCTION_1_30();
  if (result)
  {
    a1();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t SafeCallback.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t SafeCallback.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  SafeCallback.init()();
  return v0;
}

uint64_t sub_1C2F760D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = OUTLINED_FUNCTION_1_30();
  *a1 = result;
  return result;
}

uint64_t sub_1C2F76104()
{
  return 8;
}

_QWORD *sub_1C2F76110(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for SafeCallback()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SafeCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SafeCallback);
}

uint64_t method lookup function for SafeCallback()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SafeCallback.maybeObj.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SafeCallback.maybeObj.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SafeCallback.maybeObj.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SafeCallback.reify(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SafeCallback.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t OUTLINED_FUNCTION_1_30()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t InteractionType.aceInteractionType.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x7244676F6C616944;
  else
    return 0x4479616C70736944;
}

uint64_t InteractionType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x7244676F6C616944;
  else
    return 0x4479616C70736944;
}

SiriUtilities::InteractionType_optional __swiftcall InteractionType.init(aceValue:)(Swift::String aceValue)
{
  char *v1;
  void *object;
  uint64_t countAndFlagsBits;
  char *v4;
  void *v5;
  char v7;
  char v8;
  void *v9;
  char v11;
  SiriUtilities::InteractionType_optional result;

  object = aceValue._object;
  countAndFlagsBits = aceValue._countAndFlagsBits;
  v4 = v1;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == aceValue._countAndFlagsBits && v5 == object)
  {
    v8 = 1;
LABEL_16:
    OUTLINED_FUNCTION_2_0();
    goto LABEL_17;
  }
  v7 = OUTLINED_FUNCTION_0_0();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    v8 = 1;
LABEL_17:
    result.value = OUTLINED_FUNCTION_2_0();
    goto LABEL_18;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v9 == object)
  {
    v8 = 0;
    goto LABEL_16;
  }
  v11 = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_0();
  result.value = swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
    v8 = 0;
  else
    v8 = 2;
LABEL_18:
  *v4 = v8;
  return result;
}

SiriUtilities::InteractionType_optional static InteractionType.from(aceInteractionType:)(uint64_t a1, void *a2)
{
  Swift::String v4;

  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  return InteractionType.init(aceValue:)(v4);
}

SiriUtilities::InteractionType_optional __swiftcall InteractionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  SiriUtilities::InteractionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of InteractionType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance InteractionType(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type InteractionType and conformance InteractionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InteractionType and conformance InteractionType;
  if (!lazy protocol witness table cache variable for type InteractionType and conformance InteractionType)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for InteractionType, &type metadata for InteractionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InteractionType and conformance InteractionType);
  }
  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance InteractionType()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InteractionType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance InteractionType()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::InteractionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance InteractionType(Swift::String *a1)
{
  return InteractionType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InteractionType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = InteractionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for InteractionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C2F7649C + 4 * byte_1C2F840A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C2F764D0 + 4 * byte_1C2F840A0[v4]))();
}

uint64_t sub_1C2F764D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F764D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F764E0);
  return result;
}

uint64_t sub_1C2F764EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F764F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C2F764F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F76500(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InteractionType()
{
  return &type metadata for InteractionType;
}

uint64_t one-time initialization function for builtInSpeaker()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.builtInSpeaker = result;
  unk_1ED4F6ED8 = v1;
  return result;
}

uint64_t static AudioDestination.builtInSpeaker.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for builtInSpeaker, &static AudioDestination.builtInSpeaker, a1);
}

uint64_t one-time initialization function for builtInReceiver()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.builtInReceiver = result;
  *(_QWORD *)algn_1ED4F6EF8 = v1;
  return result;
}

uint64_t static AudioDestination.builtInReceiver.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for builtInReceiver, &static AudioDestination.builtInReceiver, a1);
}

uint64_t one-time initialization function for headphones()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.headphones = result;
  unk_1ED4F6EA8 = v1;
  return result;
}

uint64_t static AudioDestination.headphones.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for headphones, &static AudioDestination.headphones, a1);
}

uint64_t static AudioDestination.bluetoothHandsFreeDevice.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for bluetoothHandsFreeDevice, &static AudioDestination.bluetoothHandsFreeDevice, a1);
}

uint64_t one-time initialization function for bluetoothLEDevice()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.bluetoothLEDevice = result;
  unk_1ED4F6F10 = v1;
  return result;
}

uint64_t static AudioDestination.bluetoothLEDevice.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for bluetoothLEDevice, &static AudioDestination.bluetoothLEDevice, a1);
}

uint64_t one-time initialization function for bluetoothA2DPDevice()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.bluetoothA2DPDevice = result;
  *(_QWORD *)algn_1ED4F6F28 = v1;
  return result;
}

uint64_t static AudioDestination.bluetoothA2DPDevice.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for bluetoothA2DPDevice, &static AudioDestination.bluetoothA2DPDevice, a1);
}

uint64_t static AudioDestination.usbAudio.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for usbAudio, &static AudioDestination.usbAudio, a1);
}

uint64_t static AudioDestination.carAudio.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for carAudio, &static AudioDestination.carAudio, a1);
}

uint64_t one-time initialization function for hdmi()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.hdmi = result;
  unk_1ED4F6F60 = v1;
  return result;
}

uint64_t static AudioDestination.hdmi.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for hdmi, &static AudioDestination.hdmi, a1);
}

uint64_t one-time initialization function for other()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static AudioDestination.other = result;
  *(_QWORD *)algn_1ED4F6F78 = v1;
  return result;
}

uint64_t static AudioDestination.other.getter@<X0>(_QWORD *a1@<X8>)
{
  return OUTLINED_FUNCTION_0_13(&one-time initialization token for other, &static AudioDestination.other, a1);
}

uint64_t AudioDestination.aceValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  OUTLINED_FUNCTION_61_0();
  return v1;
}

SiriUtilities::AudioDestination_optional __swiftcall AudioDestination.init(aceValue:)(SiriUtilities::AudioDestination_optional aceValue)
{
  uint64_t *v1;
  uint64_t *v2;
  void *object;
  uint64_t countAndFlagsBits;

  v2 = v1;
  if (aceValue.value.aceValue._object)
  {
    object = aceValue.value.aceValue._object;
    countAndFlagsBits = aceValue.value.aceValue._countAndFlagsBits;
    if (one-time initialization token for knownValues != -1)
      swift_once();
    specialized Set.contains(_:)(countAndFlagsBits, (uint64_t)object, static AudioDestination.knownValues);
    if ((aceValue.value.aceValue._countAndFlagsBits & 1) != 0)
    {
      *v2 = countAndFlagsBits;
      v2[1] = (uint64_t)object;
      return aceValue;
    }
    aceValue.value.aceValue._countAndFlagsBits = swift_bridgeObjectRelease();
  }
  *v2 = 0;
  v2[1] = 0;
  return aceValue;
}

void AudioDestination.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  v1 = dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  OUTLINED_FUNCTION_12_0(v1);
  OUTLINED_FUNCTION_3_1();
}

void AudioDestination.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  OUTLINED_FUNCTION_14_0();
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    OUTLINED_FUNCTION_14_0();
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v7 = v6;
    OUTLINED_FUNCTION_12_0(v5);
    *a2 = v5;
    a2[1] = v7;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  OUTLINED_FUNCTION_3_1();
}

uint64_t static AudioDestination.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t AudioDestination.hash(into:)()
{
  OUTLINED_FUNCTION_61_0();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int AudioDestination.hashValue.getter()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_61_0();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AudioDestination and conformance AudioDestination()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioDestination and conformance AudioDestination;
  if (!lazy protocol witness table cache variable for type AudioDestination and conformance AudioDestination)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for AudioDestination, &type metadata for AudioDestination);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioDestination and conformance AudioDestination);
  }
  return result;
}

void protocol witness for Decodable.init(from:) in conformance AudioDestination(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  AudioDestination.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance AudioDestination(_QWORD *a1)
{
  AudioDestination.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for AudioDestination()
{
  return &type metadata for AudioDestination;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TransformationCapability>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 64);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

uint64_t *LoadableCapability.init(container:capability:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;

  v4 = *v2;
  v5 = (_OWORD *)((char *)v2 + *(_QWORD *)(*v2 + 112));
  *v5 = 0u;
  v5[1] = 0u;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 96), a1, *(_QWORD *)(v4 + 80));
  v6 = (uint64_t)v2 + *(_QWORD *)(*v2 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v6, a2, AssociatedTypeWitness);
  return v2;
}

void LoadableCapability.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96), *(_QWORD *)(*(_QWORD *)v0 + 80));
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  outlined destroy of Any?(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  OUTLINED_FUNCTION_9_0();
}

void LoadableCapability._handler.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  OUTLINED_FUNCTION_0_23();
  swift_beginAccess();
  outlined init with copy of Any?(v1, a1);
  OUTLINED_FUNCTION_33();
}

void LoadableCapability._handler.setter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_0_23();
  swift_beginAccess();
  outlined assign with take of Any?(a1, v1);
  swift_endAccess();
  OUTLINED_FUNCTION_33();
}

void LoadableCapability.handler.getter(uint64_t a1@<X8>)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  v2 = v1;
  v4 = *(_QWORD *)v1;
  LoadableCapability._handler.getter((uint64_t)v6);
  v5 = v6[3];
  outlined destroy of Any?((uint64_t)v6);
  if (!v5)
  {
    (*(void (**)(_QWORD *__return_ptr, char *, _QWORD))(*(_QWORD *)(v4 + 88) + 56))(v6, &v2[*(_QWORD *)(*(_QWORD *)v2 + 104)], *(_QWORD *)(v4 + 80));
    LoadableCapability._handler.setter((uint64_t)v6);
  }
  LoadableCapability._handler.getter(a1);
}

uint64_t LoadableCapability.container.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 96));
}

uint64_t LoadableCapability.capability.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v3, AssociatedTypeWitness);
}

void LoadableCapability.__allocating_init(container:capability:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  LoadableCapability.init(container:capability:)(a1, a2);
  OUTLINED_FUNCTION_9_0();
}

uint64_t LoadableCapability.__deallocating_deinit()
{
  LoadableCapability.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for LoadableCapability()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  unint64_t v2;
  uint64_t inited;

  AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      inited = swift_initClassMetadata2();
      if (inited)
        return inited;
      else
        return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t type metadata accessor for LoadableCapability(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LoadableCapability);
}

uint64_t method lookup function for LoadableCapability()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LoadableCapability.handler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of LoadableCapability.__allocating_init(container:capability:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_23()
{
  uint64_t v0;

  return v0 + *(_QWORD *)(*(_QWORD *)v0 + 112);
}

uint64_t static SiriEnvironment.forCurrentTask.getter()
{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;

  if (one-time initialization token for $environment != -1)
    swift_once();
  TaskLocal.get()();
  if (v12)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v1 = OUTLINED_FUNCTION_13();
    v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.logger);
    swift_retain_n();
    Logger.logObject.getter();
    v3 = OUTLINED_FUNCTION_7_18();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)OUTLINED_FUNCTION_4_1();
      v12 = OUTLINED_FUNCTION_4_1();
      *(_DWORD *)v4 = 136315138;
      v5 = ObjectIdentifier.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_11_16();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2F2D000, v2, v3, "SiriEnvironment.forCurrentTask -> %s", v4, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_1_1();
    }

    OUTLINED_FUNCTION_11_16();
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v7 = OUTLINED_FUNCTION_13();
    v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.logger);
    Logger.logObject.getter();
    v9 = OUTLINED_FUNCTION_7_18();
    if (OUTLINED_FUNCTION_6_20(v9))
    {
      v10 = (uint8_t *)OUTLINED_FUNCTION_4_1();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1C2F2D000, v8, v0, "SiriEnvironment.forCurrentTask -> nil", v10, 2u);
      OUTLINED_FUNCTION_1_1();
    }

  }
  return v12;
}

uint64_t static SiriEnvironmentTaskLocalStorage.environment.getter()
{
  uint64_t v1;

  if (one-time initialization token for $environment != -1)
    swift_once();
  TaskLocal.get()();
  return v1;
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a4, a6);
  static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(v7, a2);
  return swift_release();
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for $environment != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1, a2);
  swift_retain();
  TaskLocal.withValue<A>(_:operation:file:line:)();
  return swift_release();
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return OUTLINED_FUNCTION_17_3();
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = (*(uint64_t (**)(uint64_t))(v0[8] + 8))(v0[6]);
  v0[10] = v1;
  v2 = (_QWORD *)swift_task_alloc();
  v0[11] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:);
  return static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(v0[2], v1, v0[4], v0[5], v0[7]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return OUTLINED_FUNCTION_17_3();
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;

  if (one-time initialization token for $environment != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  *(_QWORD *)(v3 + 40) = v2;
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v5;
  *v5 = v0;
  v5[1] = static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:);
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (one-time initialization token for logger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.logger);
  swift_retain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v11 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = ObjectIdentifier.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2F2D000, v4, v5, "SiriEnvironment.forCurrentTask <- %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BCEEB0](v7, -1, -1);
    MEMORY[0x1C3BCEEB0](v6, -1, -1);

  }
  else
  {

    v10 = swift_release_n();
  }
  a2(v10);
  $defer #1 <A>() in closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
}

uint64_t closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)()
{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;

  if (one-time initialization token for logger != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_13();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.logger);
  swift_retain_n();
  v4 = v3;
  Logger.logObject.getter();
  v5 = OUTLINED_FUNCTION_7_18();
  if (OUTLINED_FUNCTION_6_20(v5))
  {
    v6 = (uint8_t *)OUTLINED_FUNCTION_4_1();
    v12 = OUTLINED_FUNCTION_4_1();
    *(_DWORD *)v6 = 136315138;
    v7 = ObjectIdentifier.debugDescription.getter();
    *(_QWORD *)(v1 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_11_16();
    _os_log_impl(&dword_1C2F2D000, v4, v0, "SiriEnvironment.forCurrentTask <- %s", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_1();
  }
  OUTLINED_FUNCTION_11_16();

  v11 = (uint64_t (*)(_QWORD))(**(int **)(v1 + 40) + *(_QWORD *)(v1 + 40));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 56) = v9;
  *v9 = v1;
  v9[1] = closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:);
  return v11(*(_QWORD *)(v1 + 24));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  $defer #1 <A>() in closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  $defer #1 <A>() in closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v0 + 8));
}

void $defer #1 <A>() in closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for logger != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_13();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.logger);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)OUTLINED_FUNCTION_4_1();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1C2F2D000, oslog, v1, "SiriEnvironment.forCurrentTask <- nil", v2, 2u);
    OUTLINED_FUNCTION_1_1();
  }

}

uint64_t one-time initialization function for $environment()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskLocal<SiriEnvironment?>);
  swift_allocObject();
  result = TaskLocal.init(wrappedValue:)();
  static SiriEnvironmentTaskLocalStorage.$environment = result;
  return result;
}

uint64_t static SiriEnvironmentTaskLocalStorage.$environment.getter()
{
  if (one-time initialization token for $environment != -1)
    swift_once();
  return swift_retain();
}

void partial apply for closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)()
{
  uint64_t v0;

  closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(*(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

uint64_t partial apply for closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[3];
  v6 = v1[4];
  v5 = v1[5];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:);
  return closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)(a1, v4, v6, v5);
}

uint64_t partial apply for closure #1 in static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_0_7(*(uint64_t (**)(void))(v2 + 8));
}

ValueMetadata *type metadata accessor for SiriEnvironmentTaskLocalStorage()
{
  return &type metadata for SiriEnvironmentTaskLocalStorage;
}

BOOL OUTLINED_FUNCTION_6_20(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_7_18()
{
  return static os_log_type_t.debug.getter();
}

uint64_t specialized PluginCapabilityCatalog.init(finder:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *@<X8>);
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  _BOOL8 v27;
  Swift::Int v28;
  unint64_t v29;
  char v30;
  Swift::Bool v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t i;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  __int128 *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  char v96;
  char v97;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v99;
  uint64_t v100;
  uint64_t result;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(_QWORD *@<X8>);
  uint64_t v107;
  int64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t (*v115)();
  __int128 v116[2];
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  v102 = v1;
  swift_retain();
  v5 = v4(v2, v3);
  v122 = MEMORY[0x1E0DEE9E8];
  v6 = *(_QWORD *)(v5 + 16);
  v104 = v5;
  if (!v6)
  {
    v115 = 0;
    v9 = 0;
    v11 = MEMORY[0x1E0DEE9E0];
    goto LABEL_28;
  }
  v7 = v5 + 32;
  swift_bridgeObjectRetain();
  v8 = v104;
  v115 = 0;
  v9 = 0;
  v10 = 0;
  v11 = MEMORY[0x1E0DEE9E0];
  v109 = v7;
  v110 = v6;
  while (1)
  {
    if (v10 >= *(_QWORD *)(v8 + 16))
      goto LABEL_89;
    outlined init with copy of CacheDataSource(v7 + 40 * v10, (uint64_t)&v123);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage);
    type metadata accessor for NSBundle();
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_25;
    v12 = (void *)v118;
    if (!(_QWORD)v118)
      goto LABEL_25;
    v13 = NSBundle.advertisedCapabilities()();
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
      break;

    swift_bridgeObjectRelease();
LABEL_25:
    ++v10;
    v8 = v104;
    if (v10 == v6)
    {
      swift_bridgeObjectRelease();
LABEL_28:
      v105 = v11 + 64;
      v45 = 1 << *(_BYTE *)(v11 + 32);
      v46 = -1;
      if (v45 < 64)
        v46 = ~(-1 << v45);
      v47 = v46 & *(_QWORD *)(v11 + 64);
      v108 = (unint64_t)(v45 + 63) >> 6;
      swift_bridgeObjectRetain();
      v48 = 0;
      v49 = MEMORY[0x1E0DEE9D8];
      v50 = (_QWORD *)v11;
      v106 = v9;
      v107 = v11;
      if (!v47)
        goto LABEL_32;
LABEL_31:
      v111 = (v47 - 1) & v47;
      v113 = v48;
      for (i = __clz(__rbit64(v47)) | (v48 << 6); ; i = __clz(__rbit64(v53)) + (v54 << 6))
      {
        v56 = (__int128 *)(*(_QWORD *)(v11 + 48) + (i << 6));
        v57 = *v56;
        v58 = v56[1];
        v59 = v56[3];
        v125 = v56[2];
        v126 = v59;
        v123 = v57;
        v124 = v58;
        v60 = v50[2];
        outlined retain of TransformationCapability((uint64_t)&v123);
        if (v60)
        {
          v61 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)&v123);
          v62 = v49;
          if ((v63 & 1) != 0)
          {
            v62 = *(_QWORD *)(v50[7] + 8 * v61);
            swift_bridgeObjectRetain();
          }
        }
        else
        {
          v62 = v49;
        }
        if (v62 >> 62)
        {
          swift_bridgeObjectRetain();
          v64 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v64 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v64)
        {
          *(_QWORD *)&v118 = v49;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64 & ~(v64 >> 63), 0);
          if (v64 < 0)
            goto LABEL_88;
          v65 = 0;
          v49 = v118;
          do
          {
            if ((v62 & 0xC000000000000001) != 0)
              v66 = (id)MEMORY[0x1C3BCE388](v65, v62);
            else
              v66 = *(id *)(v62 + 8 * v65 + 32);
            v67 = v66;
            v68 = NSBundle.packageId.getter();
            v70 = v69;

            *(_QWORD *)&v118 = v49;
            v72 = *(_QWORD *)(v49 + 16);
            v71 = *(_QWORD *)(v49 + 24);
            if (v72 >= v71 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v72 + 1, 1);
              v49 = v118;
            }
            ++v65;
            *(_QWORD *)(v49 + 16) = v72 + 1;
            v73 = v49 + 16 * v72;
            *(_QWORD *)(v73 + 32) = v68;
            *(_QWORD *)(v73 + 40) = v70;
          }
          while (v64 != v65);
          v9 = v106;
          v11 = v107;
        }
        *(_QWORD *)&v118 = v49;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type PluginCapabilityCatalog<NSBundle> and conformance PluginCapabilityCatalog<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
        v74 = BidirectionalCollection<>.joined(separator:)();
        v76 = v75;
        swift_bridgeObjectRelease();
        v77 = v122;
        swift_bridgeObjectRetain();
        v78 = specialized Set.contains(_:)((unsigned __int8 *)&v123, v77);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v64 >= 2 && (v78 & 1) != 0)
        {
          if (one-time initialization token for logger != -1)
            swift_once();
          v79 = type metadata accessor for Logger();
          __swift_project_value_buffer(v79, (uint64_t)static Logger.logger);
          outlined retain of TransformationCapability((uint64_t)&v123);
          outlined retain of TransformationCapability((uint64_t)&v123);
          swift_bridgeObjectRetain();
          v80 = Logger.logObject.getter();
          v81 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v80, v81))
          {
            v82 = swift_slowAlloc();
            v83 = swift_slowAlloc();
            *(_QWORD *)&v116[0] = v83;
            *(_DWORD *)v82 = 136315394;
            v118 = v123;
            v119 = v124;
            v120 = v125;
            v121 = v126;
            outlined retain of TransformationCapability((uint64_t)&v123);
            v84 = String.init<A>(describing:)();
            *(_QWORD *)(v82 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, (uint64_t *)v116);
            swift_bridgeObjectRelease();
            outlined release of TransformationCapability((uint64_t)&v123);
            outlined release of TransformationCapability((uint64_t)&v123);
            *(_WORD *)(v82 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v82 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v76, (uint64_t *)v116);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C2F2D000, v80, v81, "Capability %s is marked exclusive, but multiple registrations were found: %s", (uint8_t *)v82, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1C3BCEEB0](v83, -1, -1);
            MEMORY[0x1C3BCEEB0](v82, -1, -1);

          }
          else
          {
            outlined release of TransformationCapability((uint64_t)&v123);
            outlined release of TransformationCapability((uint64_t)&v123);

            swift_bridgeObjectRelease_n();
          }
          v49 = MEMORY[0x1E0DEE9D8];
          v93 = Logger.logObject.getter();
          v94 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v93, v94))
          {
            v95 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v95 = 0;
            _os_log_impl(&dword_1C2F2D000, v93, v94, "All of the plugins for this capability will be ignored.", v95, 2u);
            MEMORY[0x1C3BCEEB0](v95, -1, -1);
          }

          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)&v123);
          v97 = v96;
          swift_bridgeObjectRelease();
          if ((v97 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v118 = v50;
            v99 = v50[3];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<TransformationCapability, [NSBundle]>);
            _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v99);
            v50 = (_QWORD *)v118;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSBundle]);
            lazy protocol witness table accessor for type TransformationCapability and conformance TransformationCapability();
            _NativeDictionary._delete(at:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          outlined release of TransformationCapability((uint64_t)&v123);
        }
        else
        {
          if (one-time initialization token for logger != -1)
            swift_once();
          v86 = type metadata accessor for Logger();
          __swift_project_value_buffer(v86, (uint64_t)static Logger.logger);
          outlined retain of TransformationCapability((uint64_t)&v123);
          outlined retain of TransformationCapability((uint64_t)&v123);
          swift_bridgeObjectRetain();
          v87 = Logger.logObject.getter();
          v88 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v87, v88))
          {
            v89 = swift_slowAlloc();
            v90 = swift_slowAlloc();
            *(_QWORD *)&v116[0] = v90;
            *(_DWORD *)v89 = 136315394;
            v118 = v123;
            v119 = v124;
            v120 = v125;
            v121 = v126;
            outlined retain of TransformationCapability((uint64_t)&v123);
            v91 = String.init<A>(describing:)();
            *(_QWORD *)(v89 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, (uint64_t *)v116);
            swift_bridgeObjectRelease();
            outlined release of TransformationCapability((uint64_t)&v123);
            outlined release of TransformationCapability((uint64_t)&v123);
            *(_WORD *)(v89 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v89 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v76, (uint64_t *)v116);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C2F2D000, v87, v88, "Capability %s is supported by: %s", (uint8_t *)v89, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1C3BCEEB0](v90, -1, -1);
            MEMORY[0x1C3BCEEB0](v89, -1, -1);

          }
          else
          {
            swift_bridgeObjectRelease_n();

            outlined release of TransformationCapability((uint64_t)&v123);
            outlined release of TransformationCapability((uint64_t)&v123);
          }
          outlined release of TransformationCapability((uint64_t)&v123);
          v49 = MEMORY[0x1E0DEE9D8];
        }
        v47 = v111;
        v48 = v113;
        if (v111)
          goto LABEL_31;
LABEL_32:
        v52 = v48 + 1;
        if (__OFADD__(v48, 1))
          goto LABEL_90;
        if (v52 >= v108)
        {
LABEL_85:
          swift_release();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v102 + 24) = v50;
          swift_bridgeObjectRetain();
          swift_release();
          v100 = PluginCatalog.init(packages:)(v104);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
          _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe((uint64_t)v115);
          _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe((uint64_t)v9);
          return v100;
        }
        v53 = *(_QWORD *)(v105 + 8 * v52);
        v54 = v48 + 1;
        if (!v53)
        {
          v54 = v48 + 2;
          if (v48 + 2 >= v108)
            goto LABEL_85;
          v53 = *(_QWORD *)(v105 + 8 * v54);
          if (!v53)
          {
            v54 = v48 + 3;
            if (v48 + 3 >= v108)
              goto LABEL_85;
            v53 = *(_QWORD *)(v105 + 8 * v54);
            if (!v53)
            {
              v54 = v48 + 4;
              if (v48 + 4 >= v108)
                goto LABEL_85;
              v53 = *(_QWORD *)(v105 + 8 * v54);
              if (!v53)
              {
                v55 = v48 + 5;
                if (v48 + 5 >= v108)
                  goto LABEL_85;
                v53 = *(_QWORD *)(v105 + 8 * v55);
                if (!v53)
                {
                  while (1)
                  {
                    v54 = v55 + 1;
                    if (__OFADD__(v55, 1))
                      goto LABEL_91;
                    if (v54 >= v108)
                      goto LABEL_85;
                    v53 = *(_QWORD *)(v105 + 8 * v54);
                    ++v55;
                    if (v53)
                      goto LABEL_47;
                  }
                }
                v54 = v48 + 5;
              }
            }
          }
        }
LABEL_47:
        v111 = (v53 - 1) & v53;
        v113 = v54;
      }
    }
  }
  v112 = v10;
  v114 = v13;
  v15 = 32;
  while (1)
  {
    v16 = *(_OWORD *)(v114 + v15);
    v17 = *(_OWORD *)(v114 + v15 + 16);
    v18 = *(_OWORD *)(v114 + v15 + 48);
    v129 = *(_OWORD *)(v114 + v15 + 32);
    v130 = v18;
    v127 = v16;
    v128 = v17;
    v123 = v16;
    v124 = v17;
    v125 = v129;
    v126 = v18;
    outlined retain of TransformationCapability((uint64_t)&v127);
    outlined retain of TransformationCapability((uint64_t)&v127);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginCapabilityExclusiveRegistration);
    if (swift_dynamicCast())
    {
      outlined init with take of Transforming(v116, (uint64_t)&v118);
      v19 = *((_QWORD *)&v119 + 1);
      v20 = v120;
      __swift_project_boxed_opaque_existential_1(&v118, *((uint64_t *)&v119 + 1));
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20) & 1) != 0)
      {
        outlined retain of TransformationCapability((uint64_t)&v127);
        specialized Set._Variant.insert(_:)((uint64_t)&v123, (unsigned __int8 *)&v127);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v118);
    }
    else
    {
      v117 = 0;
      memset(v116, 0, sizeof(v116));
      outlined destroy of CacheDataSource?((uint64_t)v116, &demangling cache variable for type metadata for PluginCapabilityExclusiveRegistration?);
    }
    outlined retain of TransformationCapability((uint64_t)&v127);
    _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe((uint64_t)v115);
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = TransformationPlugin.supportedTransformations();
    *(_QWORD *)(v21 + 24) = 0;
    v22 = v12;
    _sSayxGRi_zRi0_zlyxIsego_Sg13SiriUtilities24PluginCapabilityExposingRzAC0C7PackageRzlWOe((uint64_t)v9);
    v23 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v123 = v11;
    v24 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)&v127);
    v26 = *(_QWORD *)(v11 + 16);
    v27 = (v25 & 1) == 0;
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
      break;
    v29 = v24;
    v30 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<TransformationCapability, [NSBundle]>);
    v31 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v23, v28);
    v11 = v123;
    if (v31)
    {
      v32 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)&v127);
      if ((v30 & 1) != (v33 & 1))
        goto LABEL_92;
      v29 = v32;
    }
    swift_bridgeObjectRelease();
    v34 = swift_bridgeObjectRetain();
    if ((v30 & 1) == 0)
    {
      v35 = (*(uint64_t (**)(uint64_t))(v21 + 16))(v34);
      *(_QWORD *)(v11 + 8 * (v29 >> 6) + 64) |= 1 << v29;
      v36 = (_OWORD *)(*(_QWORD *)(v11 + 48) + (v29 << 6));
      v38 = v129;
      v37 = v130;
      v39 = v128;
      *v36 = v127;
      v36[1] = v39;
      v36[2] = v38;
      v36[3] = v37;
      *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v29) = v35;
      v40 = *(_QWORD *)(v11 + 16);
      v41 = __OFADD__(v40, 1);
      v42 = v40 + 1;
      if (v41)
        goto LABEL_87;
      *(_QWORD *)(v11 + 16) = v42;
      outlined retain of TransformationCapability((uint64_t)&v127);
    }
    v43 = *(_QWORD *)(v11 + 56);
    v44 = swift_bridgeObjectRelease();
    MEMORY[0x1C3BCDF44](v44);
    if (*(_QWORD *)((*(_QWORD *)(v43 + 8 * v29) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v43 + 8 * v29) & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    outlined release of TransformationCapability((uint64_t)&v127);
    outlined release of TransformationCapability((uint64_t)&v127);
    v15 += 64;
    v115 = TransformationPlugin.supportedTransformations();
    v9 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer);
    if (!--v14)
    {

      swift_bridgeObjectRelease();
      v115 = TransformationPlugin.supportedTransformations();
      v7 = v109;
      v6 = v110;
      v10 = v112;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

double specialized closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1C2F84330;
  return result;
}

uint64_t specialized closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  uint64_t result;
  unint64_t v4;

  result = URL.readCacheData()();
  if (v1)
  {

    result = 0;
    v4 = 0xF000000000000000;
  }
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t specialized closure #2 in static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1, void *a2)
{
  _QWORD v5[6];

  type metadata accessor for NSBundle();
  static NSBundle.packageFrom(_:)(a1, a2, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage?);
  if (swift_dynamicCast())
    return v5[5];
  else
    return 0;
}

uint64_t specialized closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1)
{
  _QWORD v2[5];

  outlined init with copy of CacheDataSource(a1, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>);
  swift_allocObject();
  return specialized PluginCapabilityCatalog.init(finder:)(v2);
}

uint64_t specialized closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>);
  lazy protocol witness table accessor for type PluginCapabilityCatalog<NSBundle> and conformance PluginCapabilityCatalog<A>(&lazy protocol witness table cache variable for type PluginCapabilityCatalog<NSBundle> and conformance PluginCapabilityCatalog<A>, &demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>, (uint64_t)&protocol conformance descriptor for PluginCapabilityCatalog<A>);
  result = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (!v3)
  {
    v7 = result;
    v8 = v6;
    v9 = a3[3];
    v10 = a3[4];
    __swift_project_boxed_opaque_existential_1(a3, v9);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v10 + 8))(v7, v8, v9, v10);
    return outlined consume of Data._Representation(v7, v8);
  }
  return result;
}

void one-time initialization function for sharedInstance()
{
  type metadata accessor for TransformationPluginLoader();
  swift_allocObject();
  static TransformationPluginLoader.sharedInstance = (_UNKNOWN *)TransformationPluginLoader.().init()();
  OUTLINED_FUNCTION_31();
}

uint64_t static TransformationPluginLoader.sharedInstance.getter()
{
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  return swift_retain();
}

uint64_t one-time initialization function for systemPluginPath(uint64_t a1)
{
  return one-time initialization function for systemPluginPath(a1, static TransformationPluginLoader.systemPluginPath);
}

void static TransformationPluginLoader.libraryDirectory()()
{
  id v0;
  id v1;
  id v2;
  id v3;
  id v4;
  Swift::String v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v15 = 0;
  v1 = objc_msgSend(v0, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 5, 8, 0, 0, &v15);

  v2 = v15;
  if (v1)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v3 = v2;

  }
  else
  {
    v4 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v15 = 0;
    v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v15 = (id)0xD000000000000027;
    v16 = 0x80000001C2F865C0;
    swift_getErrorValue();
    v5._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v7 = (uint64_t)v15;
    v6 = v16;
    if (one-time initialization token for logger != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.logger);
    swift_bridgeObjectRetain_n();
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc();
      v12 = (void *)swift_slowAlloc();
      v15 = v12;
      *(_DWORD *)v11 = 136315650;
      v13 = StaticString.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)&v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 22) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, (uint64_t *)&v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F2D000, v9, v10, "FatalError at %s:%lu - %s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1C3BCEEB0](v12, -1, -1);
      MEMORY[0x1C3BCEEB0](v11, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t one-time initialization function for legacyPluginPath(uint64_t a1)
{
  return one-time initialization function for systemPluginPath(a1, static TransformationPluginLoader.legacyPluginPath);
}

uint64_t one-time initialization function for systemPluginPath(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v6, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  type metadata accessor for TransformationPluginLoader();
  static TransformationPluginLoader.libraryDirectory()();
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
}

uint64_t TransformationPluginLoader.transformations.getter()
{
  return swift_retain();
}

uint64_t TransformationPluginLoader.().init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_0;
  void (*v14)(uint64_t *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  _UNKNOWN **v28;
  uint64_t v29[5];

  v1 = v0;
  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 24) = 0;
  type metadata accessor for TransformationRegistry();
  swift_allocObject();
  TransformationRegistry.init(fallback:)(0);
  *(_QWORD *)(v0 + 32) = v11;
  swift_retain();
  TransformationRegistry.registerCommonTransformers()();
  swift_release();
  if (one-time initialization token for systemPluginPath != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v2, (uint64_t)static TransformationPluginLoader.systemPluginPath);
  v29[3] = v2;
  v29[4] = (uint64_t)&protocol witness table for URL;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v29);
  v14 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16);
  v14(boxed_opaque_existential_0, v12, v2);
  if (one-time initialization token for legacyPluginPath != -1)
    swift_once();
  v15 = __swift_project_value_buffer(v2, (uint64_t)static TransformationPluginLoader.legacyPluginPath);
  v27 = v2;
  v28 = &protocol witness table for URL;
  v16 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v26);
  v14(v16, v15, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PluginFinder>);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1C2F81CA0;
  outlined init with copy of CacheDataSource((uint64_t)v29, v17 + 32);
  outlined init with take of Transforming(&v26, v17 + 72);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  static TransformationPluginLoader.getSystemPluginCachePathURL()();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v2);
  v18 = specialized static PluginCapabilityCatalog.load<A>(finder:cache:)(v17, (uint64_t)v10);
  outlined destroy of CacheDataSource?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v18;
  v19 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v20 = objc_msgSend(v19, sel_environment);

  v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary.subscript.getter(0xD00000000000002BLL, 0x80000001C2F86490, v21);
  v23 = v22;
  swift_bridgeObjectRelease();
  if (v23)
  {
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    v24 = specialized static PluginCapabilityCatalog.load<A>(finder:cache:)((uint64_t)v6, 0);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    *(_QWORD *)(v1 + 24) = v24;
    swift_release();
  }
  swift_retain();
  specialized TransformationPluginLoader.registerLoadableTransformations<A>(container:)();
  swift_release();
  if (*(_QWORD *)(v1 + 24))
  {
    swift_retain();
    specialized TransformationPluginLoader.registerLoadableTransformations<A>(container:)();
    swift_release();
  }
  return v1;
}

uint64_t static TransformationPluginLoader.getSystemPluginCachePathURL()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t result;
  id v10;
  Swift::String v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v0 = type metadata accessor for URL();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v23 = 0;
  v6 = objc_msgSend(v5, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 13, 1, 0, 0, &v23);

  v7 = v23;
  if (v6)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    URL.appendingPathComponent(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  }
  else
  {
    v10 = v23;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v23 = (id)0xD000000000000025;
    v24 = 0x80000001C2F864C0;
    swift_getErrorValue();
    v11._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v13 = (uint64_t)v23;
    v12 = v24;
    if (one-time initialization token for logger != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.logger);
    swift_bridgeObjectRetain_n();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v18 = (void *)swift_slowAlloc();
      v23 = v18;
      *(_DWORD *)v17 = 136315650;
      v19 = StaticString.description.getter();
      v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)&v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2048;
      v22 = 106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 22) = 2080;
      swift_bridgeObjectRetain();
      v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, (uint64_t *)&v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2F2D000, v15, v16, "FatalError at %s:%lu - %s", (uint8_t *)v17, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1C3BCEEB0](v18, -1, -1);
      MEMORY[0x1C3BCEEB0](v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void specialized TransformationPluginLoader.registerLoadableTransformations<A>(container:)()
{
  id v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;

  if (one-time initialization token for log != -1)
    swift_once();
  v0 = (id)static Logger.log;
  specialized static Logger.withSignpost<A>(name:log:completion:)();

  if (one-time initialization token for logger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.logger);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = swift_slowAlloc();
    *(_DWORD *)v4 = 134218240;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2048;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2F2D000, v2, v3, "Loaded %ld typed transformations and %ld named transformations", (uint8_t *)v4, 0x16u);
    MEMORY[0x1C3BCEEB0](v4, -1, -1);
  }

}

uint64_t specialized closure #1 in TransformationPluginLoader.registerLoadableTransformations<A>(container:)(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(_QWORD *);
  void (*v24)(__int128 *, _QWORD *);
  __int128 *v25;
  uint64_t v26;
  void (*v27)(__int128 *, _QWORD *);
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  _UNKNOWN **v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[32];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224);
  v41 = a1;
  v8 = v7(a1);
  v9 = v8;
  v10 = *(_QWORD *)(v8 + 16);
  if (!v10)
    return swift_bridgeObjectRelease();
  v28 = v8;
  for (i = 32; ; i += 64)
  {
    v12 = *(_OWORD *)(v9 + i);
    v13 = *(_OWORD *)(v9 + i + 16);
    v14 = *(_OWORD *)(v9 + i + 48);
    v35 = *(_OWORD *)(v9 + i + 32);
    v36 = v14;
    *(_OWORD *)v34 = v12;
    *(_OWORD *)&v34[16] = v13;
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadableTransformation<PluginCapabilityCatalog<NSBundle>>);
    result = swift_allocObject();
    v17 = result;
    *(_QWORD *)(result + 16) = v41;
    *(_OWORD *)(result + 24) = *(_OWORD *)v34;
    v18 = v35;
    *(_OWORD *)(result + 40) = *(_OWORD *)&v34[16];
    *(_OWORD *)(result + 56) = v18;
    *(_OWORD *)(result + 72) = v36;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    if (v34[0] == 1)
      break;
    if (__OFADD__(*a4, 1))
      goto LABEL_13;
    ++*a4;
    v26 = *(_QWORD *)(a3 + 32);
    v37 = *(_OWORD *)&v34[8];
    v38 = *(_QWORD *)&v34[24];
    v32 = *(_OWORD *)&v34[8];
    v33 = *(_QWORD *)&v34[24];
    v30 = v15;
    v31 = &protocol witness table for LoadableTransformation<A>;
    v29[0] = result;
    v27 = *(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v26 + 192);
    outlined retain of TransformationCapability((uint64_t)v34);
    outlined retain of TransformationCapability((uint64_t)v34);
    swift_retain();
    swift_retain();
    outlined retain of TypeIdentifier((uint64_t)&v37);
    v27(&v32, v29);
    outlined release of TransformationCapability((uint64_t)v34);
    swift_release();
    v25 = &v37;
LABEL_8:
    outlined release of TypeIdentifier((uint64_t)v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    if (!--v10)
      return swift_bridgeObjectRelease();
  }
  if (!__OFADD__(*a2, 1))
  {
    ++*a2;
    v19 = *(_QWORD *)(a3 + 32);
    v30 = v15;
    v31 = &protocol witness table for LoadableTransformation<A>;
    v29[0] = result;
    v20 = a2;
    v21 = a3;
    v22 = a4;
    v23 = *(void (**)(_QWORD *))(*(_QWORD *)v19 + 184);
    outlined retain of TransformationCapability((uint64_t)v34);
    outlined retain of TransformationCapability((uint64_t)v34);
    swift_retain();
    swift_retain();
    v23(v29);
    a4 = v22;
    a3 = v21;
    a2 = v20;
    v9 = v28;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    v39 = *(_OWORD *)&v34[8];
    v40 = *(_QWORD *)&v34[24];
    v32 = *(_OWORD *)&v34[8];
    v33 = *(_QWORD *)&v34[24];
    v30 = v15;
    v31 = &protocol witness table for LoadableTransformation<A>;
    v29[0] = v17;
    v24 = *(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v19 + 192);
    swift_retain();
    outlined retain of TypeIdentifier((uint64_t)&v39);
    v24(&v32, v29);
    outlined release of TransformationCapability((uint64_t)v34);
    swift_release();
    v25 = &v39;
    goto LABEL_8;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t TransformationPluginLoader.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t TransformationPluginLoader.__deallocating_deinit()
{
  TransformationPluginLoader.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TransformationPluginLoader()
{
  return objc_opt_self();
}

uint64_t method lookup function for TransformationPluginLoader()
{
  return swift_lookUpClassMethod();
}

uint64_t specialized closure #1 in TransformationPluginLoader.registerLoadableTransformations<A>(container:)(uint64_t *a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  return specialized closure #1 in TransformationPluginLoader.registerLoadableTransformations<A>(container:)(*a1, a2, a3, a4);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out A?)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized closure #2 in static PluginCapabilityCatalog.load<A>(finder:cache:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t specialized closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t specialized static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(__int128 *, _QWORD);
  uint64_t v30;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  _UNKNOWN **v44;
  _QWORD v45[6];
  _QWORD v46[6];

  v4 = type metadata accessor for CodingUserInfoKey();
  v38 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = (char *)&v37 - v14;
  v16 = type metadata accessor for URL();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46[3] = &type metadata for MergedPluginFinder;
  v46[4] = &protocol witness table for MergedPluginFinder;
  v46[0] = a1;
  v39 = a2;
  outlined init with copy of URL?(a2, (uint64_t)v15);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16) == 1)
  {
    swift_bridgeObjectRetain();
    outlined destroy of CacheDataSource?((uint64_t)v15, &demangling cache variable for type metadata for URL?);
LABEL_10:
    if (one-time initialization token for pluginLoaderLog != -1)
      v21 = swift_once();
    MEMORY[0x1E0C80A78](v21, v22);
    *(&v37 - 2) = (uint64_t)v46;
    specialized static Logger.withSignpost<A>(name:log:completion:)();
    v36 = v30;
    outlined init with copy of URL?(v39, (uint64_t)v12);
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v16) == 1)
    {
      outlined destroy of CacheDataSource?((uint64_t)v12, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      v43 = v16;
      v44 = &protocol witness table for URL;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v42);
      (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 32))(boxed_opaque_existential_0, v12, v16);
      outlined init with take of Transforming(&v42, (uint64_t)v45);
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      v32 = PropertyListEncoder.init()();
      v33 = dispatch thunk of PropertyListEncoder.outputFormat.setter();
      MEMORY[0x1E0C80A78](v33, v34);
      *(&v37 - 4) = v32;
      *(&v37 - 3) = v36;
      *(&v37 - 2) = (uint64_t)v45;
      specialized static Logger.withSignpost<A>(name:log:completion:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
      swift_release();
    }
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v15, v16);
  v23 = one-time initialization token for pluginLoaderLog;
  v24 = swift_bridgeObjectRetain();
  if (v23 != -1)
    v24 = swift_once();
  MEMORY[0x1E0C80A78](v24, v25);
  *(&v37 - 2) = (uint64_t)v20;
  specialized static Logger.withSignpost<A>(name:log:completion:)();
  v26 = v41;
  if (v41 >> 60 == 15)
  {
    v21 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    goto LABEL_10;
  }
  v37 = v17;
  v27 = v40;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  outlined copy of Data._Representation(v27, v26);
  PropertyListDecoder.init()();
  if (one-time initialization token for catalogPackageInflator != -1)
    swift_once();
  v28 = __swift_project_value_buffer(v4, (uint64_t)static CodingUserInfoKey.catalogPackageInflator);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v7, v28, v4);
  v45[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  v45[0] = specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out A?);
  v45[1] = 0;
  v29 = (void (*)(__int128 *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify();
  specialized Dictionary.subscript.setter((uint64_t)v45);
  v29(&v42, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>);
  lazy protocol witness table accessor for type PluginCapabilityCatalog<NSBundle> and conformance PluginCapabilityCatalog<A>(&lazy protocol witness table cache variable for type PluginCapabilityCatalog<NSBundle> and conformance PluginCapabilityCatalog<A>, &demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>, (uint64_t)&protocol conformance descriptor for PluginCapabilityCatalog<A>);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  outlined consume of Data?(v27, v26);
  swift_release();
  outlined consume of Data?(v27, v26);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v16);
  v36 = v45[0];
LABEL_15:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  return v36;
}

uint64_t specialized static PluginCapabilityCatalog.load<A>(finder:cache:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(__int128 *, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[6];
  uint64_t v29[5];

  v4 = type metadata accessor for CodingUserInfoKey();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL();
  v29[3] = v9;
  v29[4] = (uint64_t)&protocol witness table for URL;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v29);
  v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(boxed_opaque_existential_0, a1, v9);
  if ((a2 & 1) != 0)
    goto LABEL_8;
  if (one-time initialization token for pluginLoaderLog != -1)
    v11 = swift_once();
  MEMORY[0x1E0C80A78](v11, v12);
  specialized static Logger.withSignpost<A>(name:log:completion:)();
  v13 = v24;
  if (v24 >> 60 == 15)
  {
LABEL_8:
    if (one-time initialization token for pluginLoaderLog != -1)
      v11 = swift_once();
    MEMORY[0x1E0C80A78](v11, v12);
    *(&v23 - 2) = (uint64_t)v29;
    specialized static Logger.withSignpost<A>(name:log:completion:)();
    v22 = v17;
    LOBYTE(v23) = a2 & 1;
    if ((a2 & 1) != 0)
    {
      v25 = 0u;
      v26 = 0u;
      v27 = 0;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CacheDataSink);
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (*((_QWORD *)&v26 + 1))
        {
          outlined init with take of Transforming(&v25, (uint64_t)v28);
          type metadata accessor for PropertyListEncoder();
          swift_allocObject();
          v18 = PropertyListEncoder.init()();
          v19 = dispatch thunk of PropertyListEncoder.outputFormat.setter();
          MEMORY[0x1E0C80A78](v19, v20);
          *(&v23 - 4) = v18;
          *(&v23 - 3) = v22;
          *(&v23 - 2) = (uint64_t)v28;
          specialized static Logger.withSignpost<A>(name:log:completion:)();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
          swift_release();
          goto LABEL_17;
        }
      }
      else
      {
        v27 = 0;
        v25 = 0u;
        v26 = 0u;
      }
    }
    outlined destroy of CacheDataSource?((uint64_t)&v25, &demangling cache variable for type metadata for CacheDataSink?);
    goto LABEL_17;
  }
  v14 = v23;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  outlined copy of Data._Representation(v14, v13);
  PropertyListDecoder.init()();
  if (one-time initialization token for catalogPackageInflator != -1)
    swift_once();
  v15 = __swift_project_value_buffer(v4, (uint64_t)static CodingUserInfoKey.catalogPackageInflator);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v15, v4);
  v28[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  v28[0] = specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out A?);
  v28[1] = 0;
  v16 = (void (*)(__int128 *, _QWORD))dispatch thunk of PropertyListDecoder.userInfo.modify();
  specialized Dictionary.subscript.setter((uint64_t)v28);
  v16(&v25, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>);
  lazy protocol witness table accessor for type PluginCapabilityCatalog<NSBundle> and conformance PluginCapabilityCatalog<A>(&lazy protocol witness table cache variable for type PluginCapabilityCatalog<NSBundle> and conformance PluginCapabilityCatalog<A>, &demangling cache variable for type metadata for PluginCapabilityCatalog<NSBundle>, (uint64_t)&protocol conformance descriptor for PluginCapabilityCatalog<A>);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  outlined consume of Data?(v14, v13);
  swift_release();
  outlined consume of Data?(v14, v13);
  v22 = v28[0];
LABEL_17:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return v22;
}

double partial apply for specialized closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<D0>(_OWORD *a1@<X8>)
{
  return specialized closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)(a1);
}

void lazy protocol witness table accessor for type PluginCapabilityCatalog<NSBundle> and conformance PluginCapabilityCatalog<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    atomic_store(MEMORY[0x1C3BCEDD8](a3, v5), a1);
  }
  OUTLINED_FUNCTION_31();
}

uint64_t sub_1C2F7AD14()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in TransformationPluginLoader.registerLoadableTransformations<A>(container:)()
{
  uint64_t v0;

  return specialized closure #1 in TransformationPluginLoader.registerLoadableTransformations<A>(container:)(*(uint64_t **)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD **)(v0 + 40));
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return specialized closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)(*(_QWORD *)(v1 + 16), a1);
}

{
  return partial apply for specialized closure #3 in static PluginCapabilityCatalog.load<A>(finder:cache:)(a1);
}

uint64_t partial apply for specialized closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)()
{
  uint64_t v0;

  return specialized closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32));
}

{
  return partial apply for specialized closure #4 in static PluginCapabilityCatalog.load<A>(finder:cache:)();
}

uint64_t partial apply for specialized closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)@<X0>(uint64_t *a1@<X8>)
{
  return specialized closure #1 in static PluginCapabilityCatalog.load<A>(finder:cache:)(a1);
}

uint64_t Restrictions.init(deviceRestrictions:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = DeviceRestrictions.aceSet.getter();
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t Restrictions.init(restrictedCommands:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  uint64_t result;
  uint64_t v13;

  v4 = swift_bridgeObjectRetain();
  v5 = specialized _copyCollectionToContiguousArray<A>(_:)(v4);
  swift_bridgeObjectRelease();
  v6 = v5[2];
  if (v6)
  {
    swift_retain();
    v7 = 0;
    v8 = (void **)(v5 + 5);
    do
    {
      v9 = (uint64_t)*(v8 - 1);
      v10 = *v8;
      swift_bridgeObjectRetain();
      v11._countAndFlagsBits = v9;
      v11._object = v10;
      DeviceRestrictions.init(aceValue:)(v11);
      v7 |= v13;
      v8 += 2;
      --v6;
    }
    while (v6);
    swift_release();
  }
  else
  {
    v7 = 0;
  }
  result = swift_release();
  *a2 = a1;
  a2[1] = v7;
  return result;
}

uint64_t Restrictions.restrictedCommands.getter()
{
  return swift_bridgeObjectRetain();
}

void Restrictions.deviceRestrictions.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

uint64_t Restrictions.init(aceValue:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  v3 = specialized Set.init<A>(_:)(a1);
  result = Restrictions.init(restrictedCommands:)(v3, v6);
  v5 = v6[1];
  *a2 = v6[0];
  a2[1] = v5;
  return result;
}

uint64_t Restrictions.init(aceValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t inited;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2F80B40;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  v7 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  result = Restrictions.init(restrictedCommands:)(v7, v10);
  v9 = v10[1];
  *a3 = v10[0];
  a3[1] = v9;
  return result;
}

uint64_t Restrictions.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  v1 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v1);
  swift_bridgeObjectRelease();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  _sSaySSGSayxGSEsSERzlWlTm_0(&lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t Restrictions.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];
  _QWORD v10[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    _sSaySSGSayxGSEsSERzlWlTm_0(lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v5 = specialized Set.init<A>(_:)(v9[0]);
    Restrictions.init(restrictedCommands:)(v5, v9);
    v6 = v9[0];
    v7 = v9[1];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    *a2 = v6;
    a2[1] = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Bool __swiftcall Restrictions.isRestricted(_:)(Swift::String a1)
{
  uint64_t *v1;
  Swift::Bool result;

  specialized Set.contains(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, *v1);
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Restrictions@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Restrictions.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Restrictions(_QWORD *a1)
{
  return Restrictions.encode(to:)(a1);
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 16);
  v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : Data].Iterator._Variant();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 16);
  v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : Data].Iterator._Variant();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = MEMORY[0x1E0DEE9E8];
    goto LABEL_25;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TypeIdentifier>);
  result = static _SetStorage.allocate(capacity:)();
  v3 = result;
  v24 = *(_QWORD *)(a1 + 16);
  if (!v24)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return v3;
  }
  v4 = 0;
  v5 = result + 56;
  while (v4 < *(_QWORD *)(a1 + 16))
  {
    v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    v8 = *v6;
    v7 = v6[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v9 = -1 << *(_BYTE *)(v3 + 32);
    v10 = result & ~v9;
    v11 = v10 >> 6;
    v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
    v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      v14 = *(_QWORD *)(v3 + 48);
      v15 = (_QWORD *)(v14 + 16 * v10);
      v16 = *v15 == v8 && v15[1] == v7;
      if (v16 || (result = OUTLINED_FUNCTION_0_24(), (result & 1) != 0))
      {
LABEL_11:
        result = swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      v17 = ~v9;
      while (1)
      {
        v10 = (v10 + 1) & v17;
        v11 = v10 >> 6;
        v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
        v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * v10);
        if (*v18 != v8 || v18[1] != v7)
        {
          result = OUTLINED_FUNCTION_0_24();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_11;
      }
    }
    *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
    v20 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    *v20 = v8;
    v20[1] = v7;
    v21 = *(_QWORD *)(v3 + 16);
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_27;
    *(_QWORD *)(v3 + 16) = v23;
LABEL_22:
    if (++v4 == v24)
      goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = MEMORY[0x1E0DEE9E8];
    goto LABEL_25;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  result = static _SetStorage.allocate(capacity:)();
  v3 = result;
  v24 = *(_QWORD *)(a1 + 16);
  if (!v24)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return v3;
  }
  v4 = 0;
  v5 = result + 56;
  while (v4 < *(_QWORD *)(a1 + 16))
  {
    v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    v8 = *v6;
    v7 = v6[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v9 = -1 << *(_BYTE *)(v3 + 32);
    v10 = result & ~v9;
    v11 = v10 >> 6;
    v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
    v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      v14 = *(_QWORD *)(v3 + 48);
      v15 = (_QWORD *)(v14 + 16 * v10);
      v16 = *v15 == v8 && v15[1] == v7;
      if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_11:
        result = swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      v17 = ~v9;
      while (1)
      {
        v10 = (v10 + 1) & v17;
        v11 = v10 >> 6;
        v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
        v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * v10);
        if (*v18 != v8 || v18[1] != v7)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_11;
      }
    }
    *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
    v20 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    *v20 = v8;
    v20[1] = v7;
    v21 = *(_QWORD *)(v3 + 16);
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_27;
    *(_QWORD *)(v3 + 16) = v23;
LABEL_22:
    if (++v4 == v24)
      goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSaySSGSayxGSEsSERzlWlTm_0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v8 = a2;
    result = MEMORY[0x1C3BCEDD8](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Restrictions(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Restrictions()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for Restrictions(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for Restrictions(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for Restrictions()
{
  return &type metadata for Restrictions;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_0_24()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t SiriEnvironmentValue.wrappedValue.getter()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (one-time initialization token for logger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.logger);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    *(_DWORD *)v3 = 136315650;
    v4 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    OUTLINED_FUNCTION_18_15();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 22) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x80000001C2F86610, &v7);
    OUTLINED_FUNCTION_18_15();
    _os_log_impl(&dword_1C2F2D000, v1, v2, "FatalError at %s:%lu - %s", (uint8_t *)v3, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_1_1();
  }

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static SiriEnvironmentValue.subscript.getter(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  __int128 v11[2];
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8]);
  MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v11 - v5, a1, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentLocating);
  if (swift_dynamicCast())
  {
    outlined init with take of Transforming(v11, (uint64_t)v13);
    v6 = v14;
    v7 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    outlined destroy of SiriEnvironmentLocating?((uint64_t)v11);
    type metadata accessor for SiriEnvironment();
    v8 = static SiriEnvironment.default.getter();
  }
  swift_getAtKeyPath();
  v9 = *(void (**)(uint64_t))(v13[0] + 16);
  swift_retain();
  swift_release();
  v9(v8);
  swift_release();
  return swift_release();
}

uint64_t SiriEnvironmentValue.__allocating_init<A>()()
{
  uint64_t v0;
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath();
  return (*(uint64_t (**)(uint64_t))(v0 + 104))(KeyPath);
}

uint64_t SiriEnvironmentValue.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result;

  result = OUTLINED_FUNCTION_0_25();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in SiriEnvironmentValue.init(_:);
  *(_QWORD *)(result + 24) = a1;
  return result;
}

uint64_t SiriEnvironmentValue.init(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = partial apply for closure #1 in SiriEnvironmentValue.init(_:);
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

uint64_t closure #1 in SiriEnvironmentValue.init(_:)()
{
  swift_retain();
  swift_getAtKeyPath();
  return swift_release();
}

void SiriEnvironmentValue.__allocating_init<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_25();
  SiriEnvironmentValue.init<A>(_:_:)(a1, a2, a3);
  OUTLINED_FUNCTION_9_0();
}

void SiriEnvironmentValue.init<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a3;
  v7[3] = a1;
  v7[4] = a2;
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in SiriEnvironmentValue.init<A>(_:_:);
  *(_QWORD *)(v3 + 24) = v7;
  OUTLINED_FUNCTION_9_0();
}

uint64_t closure #1 in SiriEnvironmentValue.init<A>(_:_:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 248))(a2, *(_QWORD *)(*a3 + *MEMORY[0x1E0DEE2A8]), a4);
  swift_getAtKeyPath();
  return swift_unknownObjectRelease();
}

uint64_t SiriEnvironmentValue.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t SiriEnvironmentValue.__deallocating_deinit()
{
  SiriEnvironmentValue.deinit();
  return swift_deallocClassInstance();
}

uint64_t outlined destroy of SiriEnvironmentLocating?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentLocating?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in SiriEnvironmentValue.init(_:)()
{
  return closure #1 in SiriEnvironmentValue.init(_:)();
}

uint64_t sub_1C2F7C1E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SiriEnvironmentValue.init<A>(_:_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SiriEnvironmentValue.init<A>(_:_:)(a1, *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t type metadata completion function for SiriEnvironmentValue()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SiriEnvironmentValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SiriEnvironmentValue);
}

uint64_t method lookup function for SiriEnvironmentValue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriEnvironmentValue.wrappedValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SiriEnvironmentValue.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SiriEnvironmentValue.__allocating_init<A>(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t OUTLINED_FUNCTION_0_25()
{
  return swift_allocObject();
}

_QWORD *specialized ObjectAssociation.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectEntry<SiriEnvironment>);
  v0[2] = Dictionary.init(dictionaryLiteral:)();
  v1 = type metadata accessor for DispatchSemaphoreLock();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = dispatch_semaphore_create(1);
  v0[6] = v1;
  v0[7] = &protocol witness table for DispatchSemaphoreLock;
  v0[3] = v2;
  return v0;
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  if (one-time initialization token for cache != -1)
    swift_once();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)static ProcessWideEnvironment.cache + 144))(&v2, v0);
  result = v2;
  if (!v2)
  {
    type metadata accessor for SiriEnvironment();
    return static SiriEnvironment.default.getter();
  }
  return result;
}

uint64_t key path getter for SiriEnvironmentLocating<>.siriEnvironment : <A>A@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = SiriEnvironmentLocating<>.siriEnvironment.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for SiriEnvironmentLocating<>.siriEnvironment : <A>A()
{
  uint64_t v0;

  v0 = swift_retain();
  return SiriEnvironmentLocating<>.siriEnvironment.setter(v0);
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.setter(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t *, uint64_t);
  uint64_t v5;

  if (one-time initialization token for cache != -1)
    swift_once();
  v5 = a1;
  v3 = *(void (**)(uint64_t *, uint64_t))(*(_QWORD *)static ProcessWideEnvironment.cache + 152);
  swift_retain();
  swift_unknownObjectRetain();
  v3(&v5, v1);
  return swift_release();
}

uint64_t (*SiriEnvironmentLocating<>.siriEnvironment.modify(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = SiriEnvironmentLocating<>.siriEnvironment.getter();
  return SiriEnvironmentLocating<>.siriEnvironment.modify;
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return SiriEnvironmentLocating<>.siriEnvironment.setter(*a1);
  v2 = swift_retain();
  SiriEnvironmentLocating<>.siriEnvironment.setter(v2);
  return swift_release();
}

Swift::Void __swiftcall flushProcessWideSiriEnvironmentCache()()
{
  if (one-time initialization token for cache != -1)
    swift_once();
  (*(void (**)(void))(*(_QWORD *)static ProcessWideEnvironment.cache + 176))();
}

_QWORD *one-time initialization function for cache()
{
  _QWORD *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectAssociation<SiriEnvironment>);
  swift_allocObject();
  result = specialized ObjectAssociation.init()();
  static ProcessWideEnvironment.cache = result;
  return result;
}

uint64_t sub_1C2F7C59C()
{
  return 16;
}

__n128 sub_1C2F7C5A8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of SiriEnvironmentLocating.siriEnvironment.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SiriEnvironmentLocating.siriEnvironment.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of SiriEnvironmentLocating.siriEnvironment.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t SiriEnvironment.coreTelephonyService.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  v1 = type metadata accessor for CoreTelephonyService();
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v0 + 248);
  v3 = lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, v2, (uint64_t (*)(uint64_t))type metadata accessor for CoreTelephonyService, (uint64_t)&protocol conformance descriptor for CoreTelephonyService);
  return v5(v1, v1, v3);
}

uint64_t type metadata accessor for CoreTelephonyService()
{
  return objc_opt_self();
}

uint64_t key path setter for SiriEnvironment.coreTelephonyService : SiriEnvironment()
{
  uint64_t v0;

  v0 = swift_retain();
  return SiriEnvironment.coreTelephonyService.setter(v0);
}

uint64_t SiriEnvironment.coreTelephonyService.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for CoreTelephonyService();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 256);
  v5 = lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, v4, (uint64_t (*)(uint64_t))type metadata accessor for CoreTelephonyService, (uint64_t)&protocol conformance descriptor for CoreTelephonyService);
  return v7(a1, v3, v3, v5);
}

uint64_t (*SiriEnvironment.coreTelephonyService.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  a1[1] = v1;
  v3 = type metadata accessor for CoreTelephonyService();
  a1[2] = v3;
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 248);
  v6 = lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, v5, (uint64_t (*)(uint64_t))type metadata accessor for CoreTelephonyService, (uint64_t)&protocol conformance descriptor for CoreTelephonyService);
  a1[3] = v6;
  *a1 = v4(v3, v3, v6);
  return SiriEnvironment.coreTelephonyService.modify;
}

uint64_t SiriEnvironment.coreTelephonyService.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return OUTLINED_FUNCTION_75(*a1);
  v2 = swift_retain();
  OUTLINED_FUNCTION_75(v2);
  return swift_release();
}

uint64_t key path setter for CoreTelephonyService.mock : CoreTelephonyService(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 144);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t CoreTelephonyService.mock.getter()
{
  OUTLINED_FUNCTION_25_0();
  return swift_retain();
}

uint64_t CoreTelephonyService.mock.setter(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*CoreTelephonyService.mock.modify())()
{
  OUTLINED_FUNCTION_25_0();
  return SiriEnvironment.providers.modify;
}

uint64_t key path setter for CoreTelephonyService.coreTelephonyAPIBridge : CoreTelephonyService(_OWORD *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t (*v4)(_OWORD *);
  _OWORD v6[4];

  v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v3 = a1[3];
  v6[2] = a1[2];
  v6[3] = v3;
  v4 = *(uint64_t (**)(_OWORD *))(**(_QWORD **)a2 + 168);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v4(v6);
}

uint64_t CoreTelephonyService.coreTelephonyAPIBridge.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;

  OUTLINED_FUNCTION_25_0();
  v3 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 56) = v3;
  OUTLINED_FUNCTION_7_19();
  OUTLINED_FUNCTION_7_19();
  OUTLINED_FUNCTION_7_19();
  return swift_retain();
}

uint64_t CoreTelephonyService.coreTelephonyAPIBridge.setter(_OWORD *a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;

  OUTLINED_FUNCTION_25_0();
  v3 = a1[1];
  *(_OWORD *)(v1 + 24) = *a1;
  *(_OWORD *)(v1 + 40) = v3;
  v4 = a1[3];
  *(_OWORD *)(v1 + 56) = a1[2];
  *(_OWORD *)(v1 + 72) = v4;
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t (*CoreTelephonyService.coreTelephonyAPIBridge.modify())()
{
  OUTLINED_FUNCTION_25_0();
  return SiriEnvironmentStorage.storage.modify;
}

uint64_t CoreTelephonyService.__allocating_init(coreTelephonyAPIBridge:)(_OWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  CoreTelephonyService.init(coreTelephonyAPIBridge:)(a1);
  return v2;
}

uint64_t CoreTelephonyService.init(coreTelephonyAPIBridge:)(_OWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  id v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v2 = v1;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = v3;
  MEMORY[0x1E0C80A78](v3, v6);
  OUTLINED_FUNCTION_34();
  v9 = v8 - v7;
  v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v10, v12);
  OUTLINED_FUNCTION_34();
  v13 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v13, v14);
  OUTLINED_FUNCTION_34();
  *(_QWORD *)(v2 + 16) = 0;
  type metadata accessor for OS_dispatch_queue();
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, v11, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v15 = *MEMORY[0x1E0DEF8D0];
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104);
  v16(v9, v15, v5);
  *(_QWORD *)(v2 + 112) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static DispatchQoS.unspecified.getter();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v16(v9, v15, v5);
  OUTLINED_FUNCTION_6_21();
  *(_QWORD *)(v2 + 120) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  *(_QWORD *)(v2 + 88) = v17;
  v18 = v17;
  v19 = OUTLINED_FUNCTION_6_21();
  outlined bridged method (mbgnn) of @objc NSLock.name.setter(v19, v20, v18);

  v21 = a1[1];
  *(_OWORD *)(v2 + 24) = *a1;
  *(_OWORD *)(v2 + 40) = v21;
  v22 = a1[3];
  *(_OWORD *)(v2 + 56) = a1[2];
  *(_OWORD *)(v2 + 72) = v22;
  return v2;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = MEMORY[0x1C3BCEDD8](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t CoreTelephonyService.__allocating_init(storage:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[8];

  v3[0] = closure #1 in CoreTelephonyAPIBridge.init();
  v3[1] = 0;
  v3[2] = closure #2 in CoreTelephonyAPIBridge.init();
  v3[3] = 0;
  v3[4] = closure #3 in CoreTelephonyAPIBridge.init();
  v3[5] = 0;
  v3[6] = closure #4 in CoreTelephonyAPIBridge.init();
  v3[7] = 0;
  v1 = (*(uint64_t (**)(_QWORD *))(v0 + 232))(v3);
  swift_release();
  return v1;
}

id *CoreTelephonyService.deinit()
{
  id *v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return v0;
}

uint64_t CoreTelephonyService.__deallocating_deinit()
{
  CoreTelephonyService.deinit();
  return swift_deallocClassInstance();
}

void (*protocol witness for MockableEnvironmentProvider.mock.modify in conformance CoreTelephonyService(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 152))();
  return protocol witness for MockableEnvironmentProvider.mock.modify in conformance NetworkAvailability;
}

uint64_t protocol witness for SiriEnvironmentProvider.init(storage:) in conformance CoreTelephonyService()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CoreTelephonyService@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for CoreTelephonyService();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void outlined bridged method (mbgnn) of @objc NSLock.name.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)MEMORY[0x1C3BCDDDC]();
  objc_msgSend(a3, sel_setName_, v4);

}

uint64_t associated type witness table accessor for MockableEnvironmentProvider.Provider : SiriEnvironmentProvider in CoreTelephonyService(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, a2, (uint64_t (*)(uint64_t))type metadata accessor for CoreTelephonyService, (uint64_t)&protocol conformance descriptor for CoreTelephonyService);
}

uint64_t instantiation function for generic protocol witness table for CoreTelephonyService(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, a2, (uint64_t (*)(uint64_t))type metadata accessor for CoreTelephonyService, (uint64_t)&protocol conformance descriptor for CoreTelephonyService);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  result = lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(&lazy protocol witness table cache variable for type CoreTelephonyService and conformance CoreTelephonyService, a2, (uint64_t (*)(uint64_t))type metadata accessor for CoreTelephonyService, (uint64_t)&protocol conformance descriptor for CoreTelephonyService);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CoreTelephonyService and conformance CoreTelephonyService(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1C3BCEDD8](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C2F7D034@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = SiriEnvironment.coreTelephonyService.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1C2F7D060@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
  *a2 = result;
  return result;
}

double sub_1C2F7D094@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;

  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)a1 + 160))(v6);
  v3 = v6[1];
  *a2 = v6[0];
  a2[1] = v3;
  result = *(double *)&v7;
  v5 = v8;
  a2[2] = v7;
  a2[3] = v5;
  return result;
}

uint64_t method lookup function for CoreTelephonyService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CoreTelephonyService.mock.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of CoreTelephonyService.coreTelephonyAPIBridge.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of CoreTelephonyService.coreTelephonyAPIBridge.setter(__n128 *a1)
{
  __n128 v1;
  uint64_t (*v2)(__n128);

  v1 = OUTLINED_FUNCTION_3_24(a1);
  return v2(v1);
}

uint64_t dispatch thunk of CoreTelephonyService.coreTelephonyAPIBridge.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of CoreTelephonyService.__allocating_init(coreTelephonyAPIBridge:)(__n128 *a1)
{
  __n128 v1;
  uint64_t (*v2)(__n128);

  v1 = OUTLINED_FUNCTION_3_24(a1);
  return v2(v1);
}

uint64_t dispatch thunk of CoreTelephonyService.__allocating_init(storage:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t OUTLINED_FUNCTION_1_31()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t OUTLINED_FUNCTION_2_22()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

__n128 OUTLINED_FUNCTION_3_24(__n128 *a1)
{
  return a1[2];
}

unint64_t OUTLINED_FUNCTION_6_21()
{
  return 0xD000000000000021;
}

uint64_t OUTLINED_FUNCTION_7_19()
{
  return swift_retain();
}

SiriUtilities::SiriVoiceGender_optional __swiftcall SiriVoiceGender.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  SiriUtilities::SiriVoiceGender_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SiriVoiceGender.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SiriVoiceGender.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C616D6546;
  if (*v0 != 1)
    v1 = 0x6E776F6E6B6E55;
  if (*v0)
    return v1;
  else
    return 1701601613;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SiriVoiceGender(unsigned __int8 *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type SiriVoiceGender and conformance SiriVoiceGender()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriVoiceGender and conformance SiriVoiceGender;
  if (!lazy protocol witness table cache variable for type SiriVoiceGender and conformance SiriVoiceGender)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for SiriVoiceGender, &type metadata for SiriVoiceGender);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriVoiceGender and conformance SiriVoiceGender);
  }
  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance SiriVoiceGender()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SiriVoiceGender()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SiriVoiceGender()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::SiriVoiceGender_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SiriVoiceGender(Swift::String *a1)
{
  return SiriVoiceGender.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SiriVoiceGender@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SiriVoiceGender.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for SiriVoiceGender(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2F7D340 + 4 * byte_1C2F845AD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C2F7D374 + 4 * byte_1C2F845A8[v4]))();
}

uint64_t sub_1C2F7D374(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F7D37C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F7D384);
  return result;
}

uint64_t sub_1C2F7D390(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F7D398);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C2F7D39C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F7D3A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SiriVoiceGender()
{
  return &type metadata for SiriVoiceGender;
}

uint64_t MobileGestaltDeviceClassProvider.currentDeviceClass.getter@<X0>(char *a1@<X8>)
{
  void *v2;
  unsigned int v3;

  if (one-time initialization token for classNumberToDeviceClass != -1)
    swift_once();
  v2 = (void *)MEMORY[0x1C3BCDDDC](0xD000000000000011, 0x80000001C2F86820);
  v3 = MGGetSInt32Answer();

  swift_beginAccess();
  specialized Dictionary.subscript.getter(v3, static MobileGestaltDeviceClassProvider.classNumberToDeviceClass, a1);
  return swift_endAccess();
}

BOOL static DeviceClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void DeviceClass.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int DeviceClass.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for classNumberToDeviceClass()
{
  uint64_t result;

  result = Dictionary.init(dictionaryLiteral:)();
  static MobileGestaltDeviceClassProvider.classNumberToDeviceClass = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type DeviceClass and conformance DeviceClass()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass;
  if (!lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for DeviceClass, &type metadata for DeviceClass);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass);
  }
  return result;
}

uint64_t protocol witness for DeviceClassProvider.currentDeviceClass.getter in conformance MobileGestaltDeviceClassProvider@<X0>(char *a1@<X8>)
{
  return MobileGestaltDeviceClassProvider.currentDeviceClass.getter(a1);
}

uint64_t getEnumTagSinglePayload for DeviceClass(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 6) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v5 = v6 - 7;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1C2F7D670 + 4 * byte_1C2F84695[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1C2F7D6A4 + 4 * byte_1C2F84690[v4]))();
}

uint64_t sub_1C2F7D6A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F7D6AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F7D6B4);
  return result;
}

uint64_t sub_1C2F7D6C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F7D6C8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1C2F7D6CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F7D6D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceClass()
{
  return &type metadata for DeviceClass;
}

uint64_t dispatch thunk of DeviceClassProvider.currentDeviceClass.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for MobileGestaltDeviceClassProvider()
{
  return &type metadata for MobileGestaltDeviceClassProvider;
}

void specialized RawRepresentable<>.hashValue.getter()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_17_4();
  OUTLINED_FUNCTION_12_15(v0);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_34_0();
}

{
  OUTLINED_FUNCTION_17_4();
  OUTLINED_FUNCTION_6_22();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_34_0();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  return String.hash(into:)();
}

{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  OUTLINED_FUNCTION_3_25();
  return OUTLINED_FUNCTION_1_32();
}

{
  OUTLINED_FUNCTION_3_25();
  return OUTLINED_FUNCTION_1_32();
}

{
  InputOrigin.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  OUTLINED_FUNCTION_3_25();
  return OUTLINED_FUNCTION_1_32();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  if (!a2)
    OUTLINED_FUNCTION_8_21();
  OUTLINED_FUNCTION_3_25();
  return OUTLINED_FUNCTION_1_32();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C2F7D938()
{
  OUTLINED_FUNCTION_3_25();
  return OUTLINED_FUNCTION_1_32();
}

void specialized RawRepresentable<>._rawHashValue(seed:)()
{
  OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_3_25();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_34_0();
}

{
  OUTLINED_FUNCTION_2_23();
  InputOrigin.rawValue.getter();
  OUTLINED_FUNCTION_3_25();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_34_0();
}

{
  OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_3_25();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_34_0();
}

{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_12_15(v0);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_34_0();
}

{
  OUTLINED_FUNCTION_2_23();
  OUTLINED_FUNCTION_3_25();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_34_0();
}

{
  char v0;

  OUTLINED_FUNCTION_2_23();
  if (!v0)
    OUTLINED_FUNCTION_8_21();
  OUTLINED_FUNCTION_3_25();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_34_0();
}

{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_6_22();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_34_0();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t PersonalDomainsAuthenticationMode.acePersonalDomainsAuthenticationMode.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

SiriUtilities::PersonalDomainsAuthenticationMode_optional __swiftcall PersonalDomainsAuthenticationMode.init(aceValue:)(Swift::String_optional aceValue)
{
  char *v1;
  char *v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  char v7;
  char v8;
  void *v9;
  char v11;
  void *v12;
  char v14;

  v2 = v1;
  if (!aceValue.value._object)
    goto LABEL_23;
  object = aceValue.value._object;
  countAndFlagsBits = aceValue.value._countAndFlagsBits;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() != aceValue.value._countAndFlagsBits || v5 != object)
  {
    v7 = OUTLINED_FUNCTION_5_20();
    OUTLINED_FUNCTION_7_0();
    if ((v7 & 1) != 0)
      goto LABEL_9;
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v9 == object)
    {
      OUTLINED_FUNCTION_2_0();
LABEL_17:
      LOBYTE(aceValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
      v8 = 1;
      goto LABEL_24;
    }
    v11 = OUTLINED_FUNCTION_5_20();
    OUTLINED_FUNCTION_7_0();
    if ((v11 & 1) != 0)
      goto LABEL_17;
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == countAndFlagsBits && v12 == object)
    {
      OUTLINED_FUNCTION_2_0();
      LOBYTE(aceValue.value._countAndFlagsBits) = OUTLINED_FUNCTION_7_0();
    }
    else
    {
      v14 = OUTLINED_FUNCTION_5_20();
      OUTLINED_FUNCTION_2_0();
      LOBYTE(aceValue.value._countAndFlagsBits) = OUTLINED_FUNCTION_7_0();
      if ((v14 & 1) == 0)
      {
LABEL_23:
        v8 = 3;
        goto LABEL_24;
      }
    }
    v8 = 2;
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_2_0();
LABEL_9:
  LOBYTE(aceValue.value._countAndFlagsBits) = swift_bridgeObjectRelease();
  v8 = 0;
LABEL_24:
  *v2 = v8;
  return (SiriUtilities::PersonalDomainsAuthenticationMode_optional)aceValue.value._countAndFlagsBits;
}

SiriUtilities::PersonalDomainsAuthenticationMode_optional static PersonalDomainsAuthenticationMode.fromAceValue(_:)(uint64_t a1, void *a2)
{
  Swift::String_optional v4;

  swift_bridgeObjectRetain();
  v4.value._countAndFlagsBits = a1;
  v4.value._object = a2;
  return PersonalDomainsAuthenticationMode.init(aceValue:)(v4);
}

SiriUtilities::PersonalDomainsAuthenticationMode_optional __swiftcall PersonalDomainsAuthenticationMode.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  SiriUtilities::PersonalDomainsAuthenticationMode_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PersonalDomainsAuthenticationMode.init(rawValue:), v3);
  result.value = OUTLINED_FUNCTION_13_0();
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t PersonalDomainsAuthenticationMode.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x726576656ELL;
  if (*v0 != 1)
    v1 = 0x6552657275636573;
  if (*v0)
    return v1;
  else
    return 0x737961776C61;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PersonalDomainsAuthenticationMode(unsigned __int8 *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type PersonalDomainsAuthenticationMode and conformance PersonalDomainsAuthenticationMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonalDomainsAuthenticationMode and conformance PersonalDomainsAuthenticationMode;
  if (!lazy protocol witness table cache variable for type PersonalDomainsAuthenticationMode and conformance PersonalDomainsAuthenticationMode)
  {
    result = MEMORY[0x1C3BCEDD8](&protocol conformance descriptor for PersonalDomainsAuthenticationMode, &type metadata for PersonalDomainsAuthenticationMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDomainsAuthenticationMode and conformance PersonalDomainsAuthenticationMode);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PersonalDomainsAuthenticationMode()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PersonalDomainsAuthenticationMode()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PersonalDomainsAuthenticationMode()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriUtilities::PersonalDomainsAuthenticationMode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PersonalDomainsAuthenticationMode(Swift::String *a1)
{
  return PersonalDomainsAuthenticationMode.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PersonalDomainsAuthenticationMode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = PersonalDomainsAuthenticationMode.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for PersonalDomainsAuthenticationMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2F7E0B4 + 4 * byte_1C2F847A9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C2F7E0E8 + 4 * byte_1C2F847A4[v4]))();
}

uint64_t sub_1C2F7E0E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F7E0F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2F7E0F8);
  return result;
}

uint64_t sub_1C2F7E104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2F7E10CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C2F7E110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2F7E118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PersonalDomainsAuthenticationMode()
{
  return &type metadata for PersonalDomainsAuthenticationMode;
}

uint64_t OUTLINED_FUNCTION_1_32()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_2_23()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_3_25()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_5_20()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_6_22()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_12_15(uint64_t a1, ...)
{
  char v1;
  va_list va;

  va_start(va, a1);
  specialized RawRepresentable<>.hash(into:)((uint64_t)va, v1);
}

void Transformer.inputType.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[56];

  TypeInformation.init(for:)((uint64_t)v4);
  OUTLINED_FUNCTION_0_26();
  swift_bridgeObjectRelease();
  *a1 = v1;
  a1[1] = v2;
  OUTLINED_FUNCTION_2_20();
}

void Transformer.outputType.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[56];

  TypeInformation.init(for:)((uint64_t)v4);
  OUTLINED_FUNCTION_0_26();
  swift_bridgeObjectRelease();
  *a1 = v1;
  a1[1] = v2;
  OUTLINED_FUNCTION_2_20();
}

uint64_t Transformer.typeErasedTransform(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t DynamicType;
  uint64_t v21;
  _QWORD v22[2];
  char v23[32];
  uint64_t *v24;

  v24 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)v22 - v11;
  v13 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v10, v14);
  v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[0] = *v3;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v23);
  if (swift_dynamicCast())
  {
    OUTLINED_FUNCTION_18_5((uint64_t)v12, 0);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, v6);
    v17 = v24;
    v24[3] = *(_QWORD *)(a2 + 24);
    __swift_allocate_boxed_opaque_existential_0(v17);
    v18 = v22[1];
    ((void (*)(char *))v22[0])(v16);
    result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v6);
    if (v18)
      return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  }
  else
  {
    OUTLINED_FUNCTION_18_5((uint64_t)v12, 1);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    DynamicType = swift_getDynamicType();
    lazy protocol witness table accessor for type TransformationError and conformance TransformationError();
    swift_allocError();
    *(_QWORD *)v21 = v6;
    *(_QWORD *)(v21 + 8) = DynamicType;
    *(_BYTE *)(v21 + 16) = 1;
    return swift_willThrow();
  }
  return result;
}

void protocol witness for Transforming.inputType.getter in conformance Transformer<A, B>(_QWORD *a1@<X8>)
{
  Transformer.inputType.getter(a1);
}

void protocol witness for Transforming.outputType.getter in conformance Transformer<A, B>(_QWORD *a1@<X8>)
{
  Transformer.outputType.getter(a1);
}

uint64_t protocol witness for Transforming.typeErasedTransform(_:) in conformance Transformer<A, B>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return Transformer.typeErasedTransform(_:)(a1, a2, a3);
}

uint64_t dispatch thunk of Transforming.inputType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Transforming.outputType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Transforming.typeErasedTransform(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t OUTLINED_FUNCTION_0_26()
{
  return swift_bridgeObjectRelease();
}

BOOL __isOSVersionAtLeast(int a1, int a2, int a3)
{
  BOOL v6;

  if (qword_1ED4FA7C0 == -1)
  {
    v6 = _MergedGlobals < a1;
    if (_MergedGlobals > a1)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_1ED4FA7C0, 0, (dispatch_function_t)compatibilityInitializeAvailabilityCheck);
    v6 = _MergedGlobals < a1;
    if (_MergedGlobals > a1)
      return 1;
  }
  if (v6)
    return 0;
  if (dword_1ED4FA7B4 > a2)
    return 1;
  return dword_1ED4FA7B4 >= a2 && dword_1ED4FA7B8 >= a3;
}

uint64_t compatibilityInitializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(1);
}

uint64_t __isPlatformVersionAtLeast(uint64_t a1, int a2, int a3, int a4)
{
  BOOL v8;

  if (qword_1ED4FA7C8 == -1)
  {
    if (qword_1ED4FA7D0)
      return _availability_version_check();
  }
  else
  {
    dispatch_once_f(&qword_1ED4FA7C8, 0, (dispatch_function_t)initializeAvailabilityCheck);
    if (qword_1ED4FA7D0)
      return _availability_version_check();
  }
  if (qword_1ED4FA7C0 == -1)
  {
    v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_1ED4FA7C0, 0, (dispatch_function_t)compatibilityInitializeAvailabilityCheck);
    v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2)
      return 1;
  }
  if (v8)
    return 0;
  if (dword_1ED4FA7B4 > a3)
    return 1;
  return dword_1ED4FA7B4 >= a3 && dword_1ED4FA7B8 >= a4;
}

uint64_t initializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(0);
}

uint64_t _initializeAvailabilityCheck(uint64_t result)
{
  uint64_t (*v1)(void);
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t (*)(void))qword_1ED4FA7D0;
  if (qword_1ED4FA7D0)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (MEMORY[0x1E0C80CC0])
    {
      qword_1ED4FA7D0 = (uint64_t)MEMORY[0x1E0C80CC0];
      v1 = MEMORY[0x1E0C80CC0];
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = MEMORY[0x1C3BCE928](v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &_MergedGlobals, &dword_1ED4FA7B4, &dword_1ED4FA7B8);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1E0CAE070]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x1E0CAE0A8]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x1E0CAE0B8]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x1E0CAE1A0]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x1E0CAE1D8]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x1E0CAE1E8]();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return MEMORY[0x1E0CAE430]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t type metadata accessor for DateInterval()
{
  return MEMORY[0x1E0CAE5D0]();
}

uint64_t LocalizedError.errorDescription.getter()
{
  return MEMORY[0x1E0CAEB40]();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1E0CAF5C8]();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.modify()
{
  return MEMORY[0x1E0CAF5D8]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x1E0CAF5F8]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x1E0CAF608]();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return MEMORY[0x1E0CAF628]();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return MEMORY[0x1E0CAF638]();
}

uint64_t PropertyListEncoder.init()()
{
  return MEMORY[0x1E0CAF668]();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return MEMORY[0x1E0CAF670]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x1E0CAFDE0]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x1E0CAFE38](retstr);
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return MEMORY[0x1E0CAFE78]();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x1E0CAFE80]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CAFF00]();
}

uint64_t URL.path.getter()
{
  return MEMORY[0x1E0CAFF40]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x1E0CB00A0]();
}

uint64_t Data.write(to:options:)()
{
  return MEMORY[0x1E0CB0270]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x1E0CB0910]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t Locale.init(identifier:)()
{
  return MEMORY[0x1E0CB0A80]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t os_signpost(_:dso:log:name:signpostID:)()
{
  return MEMORY[0x1E0DF2090]();
}

uint64_t OSSignpostID.init(log:)()
{
  return MEMORY[0x1E0DF2100]();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return MEMORY[0x1E0DF2110]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x1E0DF2118]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x1E0DF2268]();
}

uint64_t type metadata accessor for Publishers.CombineLatest()
{
  return MEMORY[0x1E0C95680]();
}

uint64_t type metadata accessor for Publishers.Map()
{
  return MEMORY[0x1E0C95940]();
}

uint64_t type metadata accessor for Publishers.Debounce()
{
  return MEMORY[0x1E0C95BA0]();
}

uint64_t AnyPublisher.receive<A>(subscriber:)()
{
  return MEMORY[0x1E0C95D70]();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x1E0C95E00]();
}

uint64_t AnyCancellable.init(_:)()
{
  return MEMORY[0x1E0C95E48]();
}

uint64_t dispatch thunk of ObservableObject.objectWillChange.getter()
{
  return MEMORY[0x1E0C95ED0]();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return MEMORY[0x1E0C95ED8]();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return MEMORY[0x1E0C95F60]();
}

uint64_t CurrentValueSubject.receive<A>(subscriber:)()
{
  return MEMORY[0x1E0C95F80]();
}

uint64_t type metadata accessor for CurrentValueSubject()
{
  return MEMORY[0x1E0C95F88]();
}

uint64_t CurrentValueSubject.__allocating_init(_:)()
{
  return MEMORY[0x1E0C95FA0]();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return MEMORY[0x1E0C95FA8]();
}

Swift::Void __swiftcall ObservableObjectPublisher.send()()
{
  MEMORY[0x1E0C96018]();
}

uint64_t type metadata accessor for ObservableObjectPublisher()
{
  return MEMORY[0x1E0C96030]();
}

uint64_t Subject<>.send()()
{
  return MEMORY[0x1E0C96128]();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return MEMORY[0x1E0C961D0]();
}

uint64_t Publisher.combineLatest<A>(_:)()
{
  return MEMORY[0x1E0C96208]();
}

uint64_t Publisher.map<A>(_:)()
{
  return MEMORY[0x1E0C96248]();
}

uint64_t Publisher.debounce<A>(for:scheduler:options:)()
{
  return MEMORY[0x1E0C96388]();
}

uint64_t NWPathMonitor.pathUpdateHandler.setter()
{
  return MEMORY[0x1E0CCE6F0]();
}

uint64_t NWPathMonitor.start(queue:)()
{
  return MEMORY[0x1E0CCE6F8]();
}

Swift::Void __swiftcall NWPathMonitor.cancel()()
{
  MEMORY[0x1E0CCE700]();
}

uint64_t NWPathMonitor.init()()
{
  return MEMORY[0x1E0CCE728]();
}

uint64_t type metadata accessor for NWPathMonitor()
{
  return MEMORY[0x1E0CCE730]();
}

uint64_t NWPath.isExpensive.getter()
{
  return MEMORY[0x1E0CCEA28]();
}

uint64_t NWPath.supportsDNS.getter()
{
  return MEMORY[0x1E0CCEA30]();
}

uint64_t NWPath.supportsIPv4.getter()
{
  return MEMORY[0x1E0CCEA38]();
}

uint64_t NWPath.supportsIPv6.getter()
{
  return MEMORY[0x1E0CCEA40]();
}

uint64_t NWPath.isConstrained.getter()
{
  return MEMORY[0x1E0CCEA48]();
}

uint64_t NWPath.debugDescription.getter()
{
  return MEMORY[0x1E0CCEA60]();
}

uint64_t type metadata accessor for NWPath.Status()
{
  return MEMORY[0x1E0CCEAB8]();
}

uint64_t NWPath.status.getter()
{
  return MEMORY[0x1E0CCEAD0]();
}

uint64_t type metadata accessor for NWPath()
{
  return MEMORY[0x1E0CCEAD8]();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return MEMORY[0x1E0DEF4A8]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return MEMORY[0x1E0DEF580]();
}

uint64_t static DispatchQoS.default.getter()
{
  return MEMORY[0x1E0DEF590]();
}

uint64_t static DispatchQoS.utility.getter()
{
  return MEMORY[0x1E0DEF598]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t DispatchTime.advanced(by:)()
{
  return MEMORY[0x1E0DEF6A0]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x1E0DE9D60]();
}

uint64_t CancellationError.init()()
{
  return MEMORY[0x1E0DF05B0]();
}

uint64_t Set.init()()
{
  return MEMORY[0x1E0DE9D78]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1E0CB17D8]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1E0CB17F8]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x1E0DE9E38]();
}

uint64_t Dictionary.removeValue(forKey:)()
{
  return MEMORY[0x1E0DE9E40]();
}

uint64_t Dictionary.compactMapValues<A>(_:)()
{
  return MEMORY[0x1E0DE9E68]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x1E0DE9E78]();
}

uint64_t Dictionary.Keys.description.getter()
{
  return MEMORY[0x1E0DE9E90]();
}

uint64_t type metadata accessor for Dictionary.Keys()
{
  return MEMORY[0x1E0DE9EC0]();
}

uint64_t Dictionary.keys.getter()
{
  return MEMORY[0x1E0DE9EE8]();
}

uint64_t Dictionary.count.getter()
{
  return MEMORY[0x1E0DE9F38]();
}

uint64_t Dictionary.merge(_:uniquingKeysWith:)()
{
  return MEMORY[0x1E0DE9F50]();
}

uint64_t Dictionary.mapValues<A>(_:)()
{
  return MEMORY[0x1E0DEA038]();
}

Swift::Void __swiftcall Dictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  MEMORY[0x1E0DEA040](keepingCapacity);
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x1E0DEA048]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x1E0DEA0A0]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x1E0DEA0A8]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t BidirectionalCollection.dropLast(_:)()
{
  return MEMORY[0x1E0DEA388]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t ObjectIdentifier.debugDescription.getter()
{
  return MEMORY[0x1E0DEA510]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1E0DEA568]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1E0CB1940]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1E0DEA5F8]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x1E0DEA610]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEA7D0]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x1E0DEA800](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x1E0DEA828]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1E0DEA908]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x1E0DEA940](a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x1E0DEA948](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x1E0DEAA40]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x1E0DEAAA8]();
}

uint64_t Sequence.filter(_:)()
{
  return MEMORY[0x1E0DEAB08]();
}

uint64_t Sequence.forEach(_:)()
{
  return MEMORY[0x1E0DEAB40]();
}

uint64_t Sequence<>.contains(_:)()
{
  return MEMORY[0x1E0DEABA0]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x1E0DEAC88]();
}

uint64_t dispatch thunk of RawRepresentable.init(rawValue:)()
{
  return MEMORY[0x1E0DEAC90]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1E0DEACA0]();
}

uint64_t RawRepresentable<>.hashValue.getter()
{
  return MEMORY[0x1E0DEAD00]();
}

uint64_t RawRepresentable<>._rawHashValue(seed:)()
{
  return MEMORY[0x1E0DEAD08]();
}

uint64_t RawRepresentable<>.hash(into:)()
{
  return MEMORY[0x1E0DEAD10]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1E0DEAD18]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t Array.startIndex.getter()
{
  return MEMORY[0x1E0DEADA8]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x1E0DEADC8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x1E0DEAE10]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x1E0DEAE38]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x1E0DEAE60]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x1E0DEAE80]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x1E0DEAE98]();
}

Swift::Void __swiftcall Array.formIndex(after:)(Swift::Int *after)
{
  MEMORY[0x1E0DEAEA8](after);
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x1E0DEAF00]();
}

Swift::Bool_optional __swiftcall Bool.init(_:)(Swift::String a1)
{
  return (Swift::Bool_optional)MEMORY[0x1E0DEAFE0](a1._countAndFlagsBits, a1._object);
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x1E0DF05C8]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x1E0DF05D8]();
}

uint64_t type metadata accessor for CancellationError()
{
  return MEMORY[0x1E0DF05E0]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x1E0DF0750]();
}

Swift::Void __swiftcall Task.cancel()()
{
  MEMORY[0x1E0DF0870]();
}

uint64_t Task.result.getter()
{
  return MEMORY[0x1E0DF0878]();
}

uint64_t static Task<>.isCancelled.getter()
{
  return MEMORY[0x1E0DF08B8]();
}

uint64_t static Task<>.sleep(_:)()
{
  return MEMORY[0x1E0DF08F0]();
}

uint64_t ThrowingTaskGroup.nextResult()()
{
  return MEMORY[0x1E0DF0940]();
}

Swift::Void __swiftcall ThrowingTaskGroup.cancelAll()()
{
  MEMORY[0x1E0DF09A8]();
}

uint64_t type metadata accessor for ThrowingTaskGroup()
{
  return MEMORY[0x1E0DF09B0]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x1E0DEB030]();
}

uint64_t Float.write<A>(to:)()
{
  return MEMORY[0x1E0DEB160]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x1E0DEB220]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t Set.insert(_:)()
{
  return MEMORY[0x1E0DEB2E8]();
}

uint64_t Set.contains(_:)()
{
  return MEMORY[0x1E0DEB340]();
}

uint64_t type metadata accessor for Set()
{
  return MEMORY[0x1E0DEB388]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x1E0DEB5B0]();
}

uint64_t Collection.dropLast(_:)()
{
  return MEMORY[0x1E0DEB670]();
}

uint64_t Collection.dropFirst(_:)()
{
  return MEMORY[0x1E0DEB678]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return MEMORY[0x1E0DEF868]();
}

uint64_t OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)()
{
  return MEMORY[0x1E0DEF878]();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride()
{
  return MEMORY[0x1E0DEF8A0]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x1E0DEF8E8]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x1E0DEF910]();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return MEMORY[0x1E0DEF938]();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return MEMORY[0x1E0DEF978]();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return MEMORY[0x1E0DEF9F0]();
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
  MEMORY[0x1E0DEFA20]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x1E0DF2298]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x1E0DF22A0]();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return MEMORY[0x1E0DF22A8]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
  MEMORY[0x1E0DEFA68]();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x1E0DEFA70]();
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return MEMORY[0x1E0DEFAA8]();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return MEMORY[0x1E0DF22B0]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x1E0DF22E0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t Substring.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x1E0DEBA80]();
}

uint64_t Substring.distance(from:to:)()
{
  return MEMORY[0x1E0DEBAD8]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x1E0DEBB58]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x1E0CB2480]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x1E0CB2588]();
}

uint64_t dispatch thunk of StringProtocol.hasPrefix(_:)()
{
  return MEMORY[0x1E0DEBD18]();
}

uint64_t dispatch thunk of StringProtocol.hasSuffix(_:)()
{
  return MEMORY[0x1E0DEBD20]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x1E0DEC078]();
}

uint64_t _expectEnd<A>(of:is:)()
{
  return MEMORY[0x1E0DEC130]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x1E0DEC280]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEC2A8](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t _typeByName(_:)()
{
  return MEMORY[0x1E0DEC2C0]();
}

uint64_t StaticString.description.getter()
{
  return MEMORY[0x1E0DEC338]();
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1E0DEC3D8]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t type metadata accessor for PartialKeyPath()
{
  return MEMORY[0x1E0DEC5A8]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1E0DEC670]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEC680](a1);
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x1E0DEC6E0]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x1E0DEC700]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x1E0DEC708]();
}

uint64_t _arrayForceCast<A, B>(_:)()
{
  return MEMORY[0x1E0DEC8D8]();
}

uint64_t _mangledTypeName(_:)()
{
  return MEMORY[0x1E0DEC970]();
}

uint64_t CodingUserInfoKey.init(rawValue:)()
{
  return MEMORY[0x1E0DEC980]();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return MEMORY[0x1E0DEC990]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x1E0DECAE0](isUnique, capacity);
}

uint64_t _NativeDictionary.makeIterator()()
{
  return MEMORY[0x1E0DECAE8]();
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
  MEMORY[0x1E0DECAF8]();
}

uint64_t _NativeDictionary._delete(at:)()
{
  return MEMORY[0x1E0DECB00]();
}

uint64_t _NativeDictionary._insert(at:key:value:)()
{
  return MEMORY[0x1E0DECB08]();
}

uint64_t type metadata accessor for _NativeDictionary()
{
  return MEMORY[0x1E0DECB20]();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return MEMORY[0x1E0DECB40]();
}

uint64_t __CocoaDictionary.count.getter()
{
  return MEMORY[0x1E0DECB80]();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return MEMORY[0x1E0DECBA8]();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return MEMORY[0x1E0DECBB8]();
}

uint64_t __CocoaDictionary.Iterator.nextKey()()
{
  return MEMORY[0x1E0DECBC0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECBE0]();
}

{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return MEMORY[0x1E0DECD48]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECD70]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1E0DECF28](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:isolation:body:)()
{
  return MEMORY[0x1E0DF0D38]();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1E0DECF38]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x1E0DECF40]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1E0DECFC0]();
}

{
  return MEMORY[0x1E0DECFE0]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return MEMORY[0x1E0DED048]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1E0DED070]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1E0DED0F0]();
}

{
  return MEMORY[0x1E0DED110]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return MEMORY[0x1E0DED170]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x1E0DED548]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode(_:)()
{
  return MEMORY[0x1E0DED628]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x1E0DED658]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode(_:)()
{
  return MEMORY[0x1E0DED6C8]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x1E0DED6F8]();
}

uint64_t == infix<A>(_:_:)()
{
  return MEMORY[0x1E0DED788]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x1E0DED998]();
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x1E0DF0EC0]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x1E0DEDEE0]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x1E0DEDEF0]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1E0DEDEF8]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x1E0DEDF10](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t type metadata accessor for Result()
{
  return MEMORY[0x1E0DEE030]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x1E0DEE230]();
}

uint64_t dispatch thunk of Decoder.userInfo.getter()
{
  return MEMORY[0x1E0DEE238]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return MEMORY[0x1E0DEE260]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t dispatch thunk of OptionSet.init(rawValue:)()
{
  return MEMORY[0x1E0DEE8F8]();
}

uint64_t TaskLocal.init(wrappedValue:)()
{
  return MEMORY[0x1E0DF0F28]();
}

uint64_t TaskLocal.get()()
{
  return MEMORY[0x1E0DF0F38]();
}

uint64_t TaskLocal.withValue<A>(_:operation:file:line:)()
{
  return MEMORY[0x1E0DF0F40]();
}

uint64_t TaskLocal.withValue<A>(_:operation:isolation:file:line:)()
{
  return MEMORY[0x1E0DF0F48]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1E0DEE978]();
}

uint64_t IsAppleInternalBuild()
{
  return MEMORY[0x1E0D1AFF8]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1E0DE2B70]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1E0DE2B80]();
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CTServerConnectionCreateAndLaunchWithIdentifier()
{
  return MEMORY[0x1E0CA6F20]();
}

uint64_t _CTServerConnectionCreateOnTargetQueue()
{
  return MEMORY[0x1E0CA6F30]();
}

uint64_t _CTServerConnectionRegisterBlockForNotification()
{
  return MEMORY[0x1E0CA7028]();
}

uint64_t _CTServerConnectionUnregisterForAllNotifications()
{
  return MEMORY[0x1E0CA7090]();
}

uint64_t _availability_version_check()
{
  return MEMORY[0x1E0C80CC0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x1E0DEEA50]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x1E0DEEA58]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1E0C83580](a1);
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1E0C83778]();
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

uint64_t nwi_ifstate_get_flags()
{
  return MEMORY[0x1E0C84438]();
}

uint64_t nwi_state_copy()
{
  return MEMORY[0x1E0C84448]();
}

uint64_t nwi_state_get_first_ifstate()
{
  return MEMORY[0x1E0C84450]();
}

uint64_t nwi_state_get_reachability_flags()
{
  return MEMORY[0x1E0C84468]();
}

uint64_t nwi_state_release()
{
  return MEMORY[0x1E0C84470]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

void rewind(FILE *a1)
{
  MEMORY[0x1E0C85120](a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1E0DEEB40]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x1E0DEEB78]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1E0DEEC38]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x1E0DEEC98]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return MEMORY[0x1E0DEEDB8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x1E0DEEE10]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return MEMORY[0x1E0DEEE60]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_addCancellationHandler()
{
  return MEMORY[0x1E0DF0FF8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_removeCancellationHandler()
{
  return MEMORY[0x1E0DF1040]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1E0DEEF20]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1E0DEEF28]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1E0DEEF30]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1E0DEEF50]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1E0DEEF58]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1E0DEEF80]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1E0DEEFC8]();
}

uint64_t tailspin_dump_output_with_options_sync()
{
  return MEMORY[0x1E0DE8B30]();
}

