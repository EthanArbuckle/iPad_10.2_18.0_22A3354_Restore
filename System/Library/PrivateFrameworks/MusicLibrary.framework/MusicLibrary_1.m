void sub_1AC275C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

std::string *ML3ImportItem::getSanitizedStringValue(ML3ImportItem *this, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  int v4;
  std::string *v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  void **v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  const std::string *v43;
  std::string *v44;
  void *v45;
  std::string __p;
  std::string __str;
  char v48;

  v4 = a3;
  *(_QWORD *)this = off_1E5B4D010;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 2) = 0;
  v7 = (std::string *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v8 = a3;
  v9 = *(_QWORD *)(a2 + 32);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = a3;
      if (v9 <= a3)
        v11 = a3 % v9;
    }
    else
    {
      v11 = ((_DWORD)v9 - 1) & a3;
    }
    v12 = *(uint64_t ***)(*(_QWORD *)(a2 + 24) + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = (uint64_t *)*i)
      {
        v14 = i[1];
        if (v14 == a3)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)a3)
          {
            *((_BYTE *)this + 8) = *((_BYTE *)i + 32);
            v43 = (const std::string *)(i + 5);
            v44 = (std::string *)((char *)this + 16);
            return std::string::operator=(v44, v43);
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(&__str, a2, a3);
  *((_BYTE *)this + 8) = __str.__r_.__value_.__s.__data_[8];
  std::string::operator=(v7, (const std::string *)&__str.__r_.__value_.__r.__words[2]);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5B4D010;
  if (v48 < 0)
    operator delete((void *)__str.__r_.__value_.__r.__words[2]);
  if (*((_BYTE *)this + 8))
  {
    if (*((char *)this + 39) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
    else
      __p = *v7;
    ML3CPPSanitizeString(&__str, (unint64_t)&__p);
    std::string::operator=(v7, &__str);
    *((_BYTE *)this + 8) = 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v15 = *(_QWORD *)(a2 + 32);
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v15 <= v8)
        v3 = v8 % v15;
    }
    else
    {
      v3 = ((_DWORD)v15 - 1) & v8;
    }
    v17 = *(void ***)(*(_QWORD *)(a2 + 24) + 8 * v3);
    if (v17)
    {
      v18 = (char *)*v17;
      if (*v17)
      {
        do
        {
          v19 = *((_QWORD *)v18 + 1);
          if (v19 == v8)
          {
            if (*((_DWORD *)v18 + 4) == v4)
              goto LABEL_100;
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v19 >= v15)
                v19 %= v15;
            }
            else
            {
              v19 &= v15 - 1;
            }
            if (v19 != v3)
              break;
          }
          v18 = *(char **)v18;
        }
        while (v18);
      }
    }
  }
  v18 = (char *)operator new(0x40uLL);
  v20 = (_QWORD *)(a2 + 40);
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v8;
  *((_DWORD *)v18 + 4) = v4;
  *((_QWORD *)v18 + 3) = off_1E5B4D010;
  v18[32] = 0;
  *((_QWORD *)v18 + 6) = 0;
  *((_QWORD *)v18 + 7) = 0;
  *((_QWORD *)v18 + 5) = 0;
  v21 = (float)(unint64_t)(*(_QWORD *)(a2 + 48) + 1);
  v22 = *(float *)(a2 + 56);
  if (v15 && (float)(v22 * (float)v15) >= v21)
  {
    v8 = v3;
    goto LABEL_90;
  }
  v23 = 1;
  if (v15 >= 3)
    v23 = (v15 & (v15 - 1)) != 0;
  v24 = v23 | (2 * v15);
  v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25)
    prime = (int8x8_t)v25;
  else
    prime = (int8x8_t)v24;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v15 = *(_QWORD *)(a2 + 32);
  }
  if (*(_QWORD *)&prime <= v15)
  {
    if (*(_QWORD *)&prime >= v15)
      goto LABEL_86;
    v33 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 48) / *(float *)(a2 + 56));
    if (v15 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
    {
      v33 = std::__next_prime(v33);
    }
    else
    {
      v35 = 1 << -(char)__clz(v33 - 1);
      if (v33 >= 2)
        v33 = v35;
    }
    if (*(_QWORD *)&prime <= v33)
      prime = (int8x8_t)v33;
    if (*(_QWORD *)&prime >= v15)
    {
      v15 = *(_QWORD *)(a2 + 32);
      goto LABEL_86;
    }
    if (!*(_QWORD *)&prime)
    {
      v45 = *(void **)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      if (v45)
        operator delete(v45);
      v15 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      goto LABEL_86;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v27 = operator new(8 * *(_QWORD *)&prime);
  v28 = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v27;
  if (v28)
    operator delete(v28);
  v29 = 0;
  *(int8x8_t *)(a2 + 32) = prime;
  do
    *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v29++) = 0;
  while (*(_QWORD *)&prime != v29);
  v30 = (_QWORD *)*v20;
  if (*v20)
  {
    v31 = v30[1];
    v32 = (uint8x8_t)vcnt_s8(prime);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      if (v31 >= *(_QWORD *)&prime)
        v31 %= *(_QWORD *)&prime;
    }
    else
    {
      v31 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v31) = v20;
    v36 = (_QWORD *)*v30;
    if (*v30)
    {
      do
      {
        v37 = v36[1];
        if (v32.u32[0] > 1uLL)
        {
          if (v37 >= *(_QWORD *)&prime)
            v37 %= *(_QWORD *)&prime;
        }
        else
        {
          v37 &= *(_QWORD *)&prime - 1;
        }
        if (v37 != v31)
        {
          v38 = *(_QWORD *)(a2 + 24);
          if (!*(_QWORD *)(v38 + 8 * v37))
          {
            *(_QWORD *)(v38 + 8 * v37) = v30;
            goto LABEL_82;
          }
          *v30 = *v36;
          *v36 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8 * v37);
          **(_QWORD **)(*(_QWORD *)(a2 + 24) + 8 * v37) = v36;
          v36 = v30;
        }
        v37 = v31;
LABEL_82:
        v30 = v36;
        v36 = (_QWORD *)*v36;
        v31 = v37;
      }
      while (v36);
    }
  }
  v15 = (unint64_t)prime;
LABEL_86:
  if ((v15 & (v15 - 1)) != 0)
  {
    if (v15 <= v8)
      v8 %= v15;
  }
  else
  {
    v8 = ((_DWORD)v15 - 1) & v8;
  }
LABEL_90:
  v39 = *(_QWORD *)(a2 + 24);
  v40 = *(_QWORD **)(v39 + 8 * v8);
  if (v40)
  {
    *(_QWORD *)v18 = *v40;
  }
  else
  {
    *(_QWORD *)v18 = *v20;
    *v20 = v18;
    *(_QWORD *)(v39 + 8 * v8) = v20;
    if (!*(_QWORD *)v18)
      goto LABEL_99;
    v41 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v41 >= v15)
        v41 %= v15;
    }
    else
    {
      v41 &= v15 - 1;
    }
    v40 = (_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v41);
  }
  *v40 = v18;
LABEL_99:
  ++*(_QWORD *)(a2 + 48);
LABEL_100:
  v18[32] = *((_BYTE *)this + 8);
  v44 = (std::string *)(v18 + 40);
  v43 = v7;
  return std::string::operator=(v44, v43);
}

void sub_1AC276274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  void **v26;
  uint64_t v27;

  *(_QWORD *)v25 = v27;
  if (*(char *)(v25 + 39) < 0)
    operator delete(*v26);
  _Unwind_Resume(exception_object);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,void *>>>::operator()[abi:ne180100](char a1, char *__p)
{
  if (a1)
  {
    *((_QWORD *)__p + 3) = off_1E5B4D010;
    if (__p[63] < 0)
      operator delete(*((void **)__p + 5));
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(char **)v2;
      *((_QWORD *)v2 + 3) = off_1E5B4D010;
      if (v2[63] < 0)
        operator delete(*((void **)v2 + 5));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t MIPPlaybackInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x200u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_138;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_140;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_138:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_140:
          v103 = 76;
          goto LABEL_197;
        case 2u:
          v24 = 0;
          v25 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x800u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_144;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_144:
          v103 = 84;
          goto LABEL_197;
        case 3u:
          v29 = 0;
          v30 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x400u;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v32 + 1;
              v19 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                v14 = v30++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_148:
          v103 = 80;
          goto LABEL_197;
        case 4u:
          v34 = 0;
          v35 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x1000u;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v19 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                v14 = v35++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_152;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_152:
          v103 = 88;
          goto LABEL_197;
        case 5u:
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 96;
          goto LABEL_52;
        case 6u:
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 104;
          goto LABEL_52;
        case 7u:
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 112;
LABEL_52:
          v41 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          continue;
        case 8u:
          v42 = 0;
          v43 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 132) |= 8u;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
              *(_QWORD *)(a2 + v45) = v46 + 1;
              v44 |= (unint64_t)(v47 & 0x7F) << v42;
              if (v47 < 0)
              {
                v42 += 7;
                v14 = v43++ >= 9;
                if (v14)
                {
                  v44 = 0;
                  goto LABEL_156;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
LABEL_156:
          v104 = 32;
          goto LABEL_202;
        case 9u:
          v48 = 0;
          v49 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 132) |= 0x10u;
          while (2)
          {
            v50 = *v3;
            v51 = *(_QWORD *)(a2 + v50);
            if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
              *(_QWORD *)(a2 + v50) = v51 + 1;
              v44 |= (unint64_t)(v52 & 0x7F) << v48;
              if (v52 < 0)
              {
                v48 += 7;
                v14 = v49++ >= 9;
                if (v14)
                {
                  v44 = 0;
                  goto LABEL_160;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
LABEL_160:
          v104 = 40;
          goto LABEL_202;
        case 0xAu:
          v53 = 0;
          v54 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 132) |= 2u;
          while (2)
          {
            v55 = *v3;
            v56 = *(_QWORD *)(a2 + v55);
            if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
              *(_QWORD *)(a2 + v55) = v56 + 1;
              v44 |= (unint64_t)(v57 & 0x7F) << v53;
              if (v57 < 0)
              {
                v53 += 7;
                v14 = v54++ >= 9;
                if (v14)
                {
                  v44 = 0;
                  goto LABEL_164;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
LABEL_164:
          v104 = 16;
          goto LABEL_202;
        case 0xBu:
          v58 = 0;
          v59 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 132) |= 4u;
          while (2)
          {
            v60 = *v3;
            v61 = *(_QWORD *)(a2 + v60);
            if (v61 == -1 || v61 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v61);
              *(_QWORD *)(a2 + v60) = v61 + 1;
              v44 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                v14 = v59++ >= 9;
                if (v14)
                {
                  v44 = 0;
                  goto LABEL_168;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
LABEL_168:
          v104 = 24;
          goto LABEL_202;
        case 0xCu:
          v63 = 0;
          v64 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x4000u;
          while (2)
          {
            v65 = *v3;
            v66 = *(_QWORD *)(a2 + v65);
            if (v66 == -1 || v66 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v67 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v66);
              *(_QWORD *)(a2 + v65) = v66 + 1;
              v19 |= (unint64_t)(v67 & 0x7F) << v63;
              if (v67 < 0)
              {
                v63 += 7;
                v14 = v64++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_172;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_172:
          v103 = 124;
          goto LABEL_197;
        case 0xDu:
          v68 = 0;
          v69 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x8000u;
          while (2)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
              *(_QWORD *)(a2 + v70) = v71 + 1;
              v19 |= (unint64_t)(v72 & 0x7F) << v68;
              if (v72 < 0)
              {
                v68 += 7;
                v14 = v69++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_176;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_176:
          v103 = 128;
          goto LABEL_197;
        case 0xEu:
          v73 = 0;
          v74 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 132) |= 0x20u;
          while (2)
          {
            v75 = *v3;
            v76 = *(_QWORD *)(a2 + v75);
            if (v76 == -1 || v76 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v76);
              *(_QWORD *)(a2 + v75) = v76 + 1;
              v44 |= (unint64_t)(v77 & 0x7F) << v73;
              if (v77 < 0)
              {
                v73 += 7;
                v14 = v74++ >= 9;
                if (v14)
                {
                  v44 = 0;
                  goto LABEL_180;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
LABEL_180:
          v104 = 48;
          goto LABEL_202;
        case 0xFu:
          v78 = 0;
          v79 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 132) |= 0x40u;
          while (2)
          {
            v80 = *v3;
            v81 = *(_QWORD *)(a2 + v80);
            if (v81 == -1 || v81 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v82 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v81);
              *(_QWORD *)(a2 + v80) = v81 + 1;
              v44 |= (unint64_t)(v82 & 0x7F) << v78;
              if (v82 < 0)
              {
                v78 += 7;
                v14 = v79++ >= 9;
                if (v14)
                {
                  v44 = 0;
                  goto LABEL_184;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
LABEL_184:
          v104 = 56;
          goto LABEL_202;
        case 0x10u:
          v83 = 0;
          v84 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 132) |= 0x80u;
          while (2)
          {
            v85 = *v3;
            v86 = *(_QWORD *)(a2 + v85);
            if (v86 == -1 || v86 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v87 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v86);
              *(_QWORD *)(a2 + v85) = v86 + 1;
              v44 |= (unint64_t)(v87 & 0x7F) << v83;
              if (v87 < 0)
              {
                v83 += 7;
                v14 = v84++ >= 9;
                if (v14)
                {
                  v44 = 0;
                  goto LABEL_188;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
LABEL_188:
          v104 = 64;
          goto LABEL_202;
        case 0x11u:
          v88 = 0;
          v89 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x100u;
          while (2)
          {
            v90 = *v3;
            v91 = *(_QWORD *)(a2 + v90);
            if (v91 == -1 || v91 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v92 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v91);
              *(_QWORD *)(a2 + v90) = v91 + 1;
              v19 |= (unint64_t)(v92 & 0x7F) << v88;
              if (v92 < 0)
              {
                v88 += 7;
                v14 = v89++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_192;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_192:
          v103 = 72;
          goto LABEL_197;
        case 0x12u:
          v93 = 0;
          v94 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 132) |= 0x2000u;
          while (2)
          {
            v95 = *v3;
            v96 = *(_QWORD *)(a2 + v95);
            if (v96 == -1 || v96 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v97 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v96);
              *(_QWORD *)(a2 + v95) = v96 + 1;
              v19 |= (unint64_t)(v97 & 0x7F) << v93;
              if (v97 < 0)
              {
                v93 += 7;
                v14 = v94++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_196;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_196:
          v103 = 120;
LABEL_197:
          *(_DWORD *)(a1 + v103) = v19;
          continue;
        case 0x13u:
          v98 = 0;
          v99 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 132) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v100 = *v3;
        v101 = *(_QWORD *)(a2 + v100);
        if (v101 == -1 || v101 >= *(_QWORD *)(a2 + *v4))
          break;
        v102 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v101);
        *(_QWORD *)(a2 + v100) = v101 + 1;
        v44 |= (unint64_t)(v102 & 0x7F) << v98;
        if ((v102 & 0x80) == 0)
          goto LABEL_199;
        v98 += 7;
        v14 = v99++ >= 9;
        if (v14)
        {
          v44 = 0;
          goto LABEL_201;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_199:
      if (*(_BYTE *)(a2 + *v5))
        v44 = 0;
LABEL_201:
      v104 = 8;
LABEL_202:
      *(_QWORD *)(a1 + v104) = v44;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

unsigned int *iPhoneSortKeyBuilderRetain(unsigned int *result)
{
  unsigned int v1;

  if (result)
  {
    do
      v1 = __ldxr(result);
    while (__stxr(v1 + 1, result));
  }
  return result;
}

void iPhoneSortKeyBuilderRelease(unsigned int *a1)
{
  unsigned int v2;
  BOOL v3;
  signed int v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  CFTypeRef *v9;

  if (a1)
  {
    do
    {
      v2 = __ldxr(a1);
      v3 = __OFSUB__(v2, 1);
      v4 = v2 - 1;
    }
    while (__stxr(v4, a1));
    if ((v4 < 0) ^ v3 | (v4 == 0))
    {
      if (*((_QWORD *)a1 + 1))
        ucol_close();
      v5 = (const void *)*((_QWORD *)a1 + 2);
      if (v5)
        CFRelease(v5);
      v6 = (void *)*((_QWORD *)a1 + 3);
      if (v6)
      {
        if (*((uint64_t *)a1 + 4) >= 1)
        {
          v7 = 0;
          v8 = 1;
          do
          {
            v9 = (CFTypeRef *)(*((_QWORD *)a1 + 3) + 48 * v7);
            CFRelease(*v9);
            CFRelease(v9[1]);
            CFRelease(v9[3]);
            CFRelease(v9[2]);
            v7 = v8;
          }
          while (*((_QWORD *)a1 + 4) > (uint64_t)v8++);
          v6 = (void *)*((_QWORD *)a1 + 3);
        }
        free(v6);
      }
      free(a1);
    }
  }
}

uint64_t iPhoneSortKeyBuilderGetSectionFromiPhoneSortKey(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  const UInt8 *v12;
  unint64_t Bound;
  const __CFArray *v14;
  CFIndex Count;
  uint64_t v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFData *ValueAtIndex;
  unint64_t Length;
  int v23;
  size_t v24;
  const UInt8 *BytePtr;
  int v26;
  int v27;
  int v28;
  const __CFData *v29;
  unint64_t v30;
  int v31;
  size_t v32;
  const UInt8 *v33;
  int v34;
  int v35;
  CFDataRef cf;
  uint64_t v37;
  int v38;

  v6 = *(_QWORD *)(a1 + 24) + 48 * *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 - 8);
  result = CFArrayGetCount(*(CFArrayRef *)(v6 - 24)) + v7;
  if (a3 <= 0)
    return (result + 1);
  v9 = *a2;
  v10 = v9 - 48;
  if (v9 >= 0x30 && v10 < *(_QWORD *)(a1 + 32))
  {
    v11 = *(_QWORD *)(a1 + 24);
    v12 = a2 + 1;
    Bound = (int)ucol_getBound();
    cf = CFDataCreateWithBytesNoCopy(0, v12, Bound, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    v14 = *(const __CFArray **)(v11 + 48 * (int)v10 + 24);
    Count = CFArrayGetCount(v14);
    v16 = Count - 1;
    v37 = v11;
    v38 = v10;
    if (Count >= 1)
    {
      v17 = Count;
      v18 = 0;
      while (1)
      {
        v19 = v16 + v18;
        if (v16 + v18 < 0 != __OFADD__(v16, v18))
          ++v19;
        v20 = v19 >> 1;
        ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v14, v19 >> 1);
        Length = CFDataGetLength(ValueAtIndex);
        v23 = Length;
        if (Length >= Bound)
          v24 = Bound;
        else
          v24 = Length;
        BytePtr = CFDataGetBytePtr(ValueAtIndex);
        v26 = memcmp(BytePtr, v12, v24);
        v27 = v23 - Bound;
        if (v26)
          v27 = v26;
        if (v27 >= 1)
          v28 = 1;
        else
          v28 = v27 >> 31;
        if (v28 == 1)
        {
          v16 = v20 - 1;
        }
        else
        {
          if (!v28)
            goto LABEL_31;
          v18 = v20 + 1;
          if (v20 + 1 < v17)
          {
            v29 = (const __CFData *)CFArrayGetValueAtIndex(v14, v20 + 1);
            v30 = CFDataGetLength(v29);
            v31 = v30;
            v32 = v30 >= Bound ? Bound : v30;
            v33 = CFDataGetBytePtr(v29);
            v34 = memcmp(v33, v12, v32);
            v35 = v31 - Bound;
            if (v34)
              v35 = v34;
            if (v35 > 0)
              goto LABEL_31;
          }
        }
        if (v18 > v16)
          goto LABEL_31;
      }
    }
    v20 = 195935983;
LABEL_31:
    CFRelease(cf);
    return *(_QWORD *)(v37 + 48 * v38 + 40) + v20;
  }
  return result;
}

uint64_t iPhoneSortKeyBuilderGetLanguageCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t iPhoneSortKeyBuilderGetLanguageIndex(uint64_t a1, unsigned __int8 *a2)
{
  return *a2 - 48;
}

CFIndex iPhoneSortKeyBuilderGetSectionCountForLanguage(uint64_t a1, uint64_t a2)
{
  return CFArrayGetCount(*(CFArrayRef *)(*(_QWORD *)(a1 + 24) + 48 * a2 + 16));
}

uint64_t iPhoneSortKeyBuilderGetMaxSectionSortKeyLength(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 < 1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 32);
  do
  {
    v6 = *v4;
    v4 += 6;
    v5 = v6;
    if (v6 > result)
      result = v5;
    --v1;
  }
  while (v1);
  return result;
}

CFIndex iPhoneSortKeyBuilderGetUnknownSectionIndex(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24) + 48 * *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  return v2 + CFArrayGetCount(*(CFArrayRef *)(v1 - 24)) + 1;
}

__CFData *iPhoneSortKeyBuilderCopySectionSortKey(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  const __CFData *ValueAtIndex;
  const __CFAllocator *v5;
  CFIndex Length;
  __CFData *Mutable;
  const UInt8 *BytePtr;
  CFIndex v9;
  UInt8 bytes;

  v3 = a2;
  ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 24) + 48 * a2 + 24), a3 - *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48 * a2 + 40));
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Length = CFDataGetLength(ValueAtIndex);
  Mutable = CFDataCreateMutable(v5, Length + 1);
  bytes = v3 + 48;
  CFDataAppendBytes(Mutable, &bytes, 1);
  BytePtr = CFDataGetBytePtr(ValueAtIndex);
  v9 = CFDataGetLength(ValueAtIndex);
  CFDataAppendBytes(Mutable, BytePtr, v9);
  return Mutable;
}

_BYTE *iPhoneSortKeyBuilderCreateFromUTF16String(uint64_t a1, const UniChar *a2, int a3, _DWORD *a4)
{
  const __CFAllocator *v5;
  CFIndex v6;
  const __CFString *v7;
  const __CFString *v8;
  CFMutableStringRef MutableCopy;
  CFIndex v10;
  UniChar CharacterAtIndex;
  const __CFString *Copy;
  __CFStringTokenizer *v13;
  const __CFString *v14;
  CFStringTokenizerTokenType Token;
  char v16;
  const __CFString *v17;
  const __CFString *v18;
  CFIndex Length;
  CFIndex v20;
  CFIndex v21;
  CFIndex v22;
  const UniChar *CharactersPtr;
  int v24;
  int v25;
  UniChar *v26;
  uint64_t i;
  int v28;
  const __CFCharacterSet *Predefined;
  int IsCharacterMember;
  int SortKey;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const __CFData *v37;
  unint64_t v38;
  int v39;
  size_t v40;
  const UInt8 *BytePtr;
  int v42;
  int v43;
  const __CFData *v44;
  unint64_t v45;
  int v46;
  size_t v47;
  const UInt8 *v48;
  int v49;
  int v50;
  _BYTE *v52;
  const UniChar *v53;
  CFMutableStringRef cf;
  CFRange range;
  CFRange v57;
  CFRange v58;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = a3;
  v7 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, a3, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v8 = v7;
  if (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 40))
  {
    MutableCopy = CFStringCreateMutableCopy(v5, v6, v7);
    CFRelease(v8);
    if (*(_QWORD *)(a1 + 16))
    {
      v10 = 0;
      while (v10 < CFStringGetLength(MutableCopy))
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(MutableCopy, v10++);
        if ((unsigned __int16)((unsigned __int16)(CharacterAtIndex + 24656) >> 4) >= 0xAE5u)
        {
          Copy = CFStringCreateCopy(v5, MutableCopy);
          CFStringReplaceAll(MutableCopy, &stru_1E5B66908);
          v13 = *(__CFStringTokenizer **)(a1 + 16);
          v58.length = CFStringGetLength(Copy);
          v58.location = 0;
          CFStringTokenizerSetString(v13, Copy, v58);
          v14 = (const __CFString *)*MEMORY[0x1E0C9B348];
          while (1)
          {
            Token = CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 16));
            if (!Token)
              break;
            v16 = Token;
            v17 = (const __CFString *)CFStringTokenizerCopyCurrentTokenAttribute(*(CFStringTokenizerRef *)(a1 + 16), 0x10000uLL);
            if (v17)
            {
              v18 = v17;
              CFStringAppend(MutableCopy, v17);
              if ((v16 & 0x20) != 0)
              {
                range.location = 0;
                range.length = 0;
                Length = CFStringGetLength(MutableCopy);
                v20 = Length - CFStringGetLength(v18);
                v21 = CFStringGetLength(v18);
                range.location = v20;
                range.length = v21;
                CFStringTransform(MutableCopy, &range, v14, 0);
              }
              CFRelease(v18);
            }
          }
          CFRelease(Copy);
          break;
        }
      }
    }
    if (*(_QWORD *)(a1 + 40))
    {
      v22 = CFStringGetLength(MutableCopy);
      range.location = 0;
      range.length = v22;
      CFStringTransform(MutableCopy, &range, *(CFStringRef *)(a1 + 40), 0);
    }
  }
  else
  {
    MutableCopy = (CFMutableStringRef)v7;
  }
  CharactersPtr = CFStringGetCharactersPtr(MutableCopy);
  v24 = CFStringGetLength(MutableCopy);
  v25 = v24;
  v26 = (UniChar *)CharactersPtr;
  v53 = CharactersPtr;
  if (!CharactersPtr)
  {
    v26 = (UniChar *)malloc_type_malloc(2 * v24, 0x1000040BDFB0063uLL);
    v57.location = 0;
    v57.length = v25;
    CFStringGetCharacters(MutableCopy, v57, v26);
  }
  if (v25 >= 1)
  {
    for (i = 0; i != v25; ++i)
    {
      v28 = v26[i];
      Predefined = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
      IsCharacterMember = CFCharacterSetIsCharacterMember(Predefined, v28);
      if (v28 != 32 && IsCharacterMember != 0)
        break;
    }
  }
  cf = MutableCopy;
  SortKey = ucol_getSortKey();
  v52 = CFAllocatorAllocate(v5, SortKey + 1, 0);
  v33 = v52 + 1;
  ucol_getSortKey();
  if (*(uint64_t *)(a1 + 32) < 1)
  {
    LOBYTE(v35) = 0;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    do
    {
      v36 = *(_QWORD *)(a1 + 24);
      v37 = *(const __CFData **)(v36 + v34);
      v38 = CFDataGetLength(v37);
      v39 = v38;
      if (v38 >= SortKey)
        v40 = SortKey;
      else
        v40 = v38;
      BytePtr = CFDataGetBytePtr(v37);
      v42 = memcmp(BytePtr, v33, v40);
      v43 = v39 - SortKey;
      if (v42)
        v43 = v42;
      if (v43 <= 0)
      {
        v44 = *(const __CFData **)(v36 + v34 + 8);
        v45 = CFDataGetLength(v44);
        v46 = v45;
        if (v45 >= SortKey)
          v47 = SortKey;
        else
          v47 = v45;
        v48 = CFDataGetBytePtr(v44);
        v49 = memcmp(v48, v33, v47);
        v50 = v46 - SortKey;
        if (v49)
          v50 = v49;
        if ((v50 & 0x80000000) == 0)
          break;
      }
      ++v35;
      v34 += 48;
    }
    while (v35 < *(_QWORD *)(a1 + 32));
  }
  *v52 = v35 + 48;
  *a4 = SortKey + 1;
  if (!v53)
    free(v26);
  CFRelease(cf);
  return v52;
}

void iPhoneSortKeyBuilderMake_xFunc(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  void *v5;
  const UniChar *v6;
  int v7;
  _BYTE *v8;
  int v9;

  v5 = sqlite3_user_data(a1);
  v6 = (const UniChar *)sqlite3_value_text16(*a3);
  v7 = sqlite3_value_bytes16(*a3);
  v9 = 0;
  v8 = iPhoneSortKeyBuilderCreateFromUTF16String((uint64_t)v5, v6, v7 >> 1, &v9);
  if (v8)
    sqlite3_result_blob(a1, v8, v9, (void (__cdecl *)(void *))DeallocateSortKey);
  else
    sqlite3_result_error_nomem(a1);
}

void iPhoneSortKeyBuilderSection_xFunc(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  void *v5;
  unsigned __int8 *v6;
  int v7;
  int SectionFromiPhoneSortKey;

  v5 = sqlite3_user_data(a1);
  v6 = (unsigned __int8 *)sqlite3_value_blob(*a3);
  v7 = sqlite3_value_bytes(*a3);
  SectionFromiPhoneSortKey = iPhoneSortKeyBuilderGetSectionFromiPhoneSortKey((uint64_t)v5, v6, v7);
  sqlite3_result_int(a1, SectionFromiPhoneSortKey);
}

void iPhoneSortKeyBuilderGroupingKey_xFunc(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  _QWORD *v5;
  int v6;
  const UChar *v7;
  void *GroupingKeyFromCharacters;
  int v9[2];

  v5 = sqlite3_user_data(a1);
  v6 = sqlite3_value_bytes16(*a3);
  v7 = (const UChar *)sqlite3_value_text16(*a3);
  *(_QWORD *)v9 = 0;
  GroupingKeyFromCharacters = CreateGroupingKeyFromCharacters(v5[1], v7, (uint64_t)v6 >> 1, (int64_t *)v9);
  if (GroupingKeyFromCharacters)
    sqlite3_result_blob(a1, GroupingKeyFromCharacters, v9[0], (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  else
    sqlite3_result_error(a1, "could not build grouping key", 1);
}

void DeallocateSortKey(void *ptr)
{
  CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], ptr);
}

uint64_t iPhoneSortKeyBuilderUninstallSqlite3(int a1, sqlite3 *db)
{
  sqlite3_create_function(db, "iPhoneSortKey", 1, 2052, 0, 0, 0, 0);
  sqlite3_create_function(db, "iPhoneSortSection", 1, 2053, 0, 0, 0, 0);
  sqlite3_create_function(db, "iPhoneGroupingKey", 1, 2052, 0, 0, 0, 0);
  return 0;
}

CFDataRef iPhoneSortKeyBuilderCopyVersionData(uint64_t a1)
{
  CFDataRef result;
  UInt8 bytes[4];

  result = *(CFDataRef *)(a1 + 8);
  if (result)
  {
    *(_DWORD *)bytes = 0;
    ucol_getVersion();
    return CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 4);
  }
  return result;
}

void sub_1AC27C090(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t _ML3ValidationBuildDatabaseTables(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v6[4];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v1 = a1;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  +[ML3MusicLibrary allPragmaSQL](ML3MusicLibrary, "allPragmaSQL");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  _ML3ValidationExecuteSQLArray(v1, v2);

  objc_msgSend(v1, "executeUpdate:", CFSTR("VACUUM"));
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ML3ValidationBuildDatabaseTables_block_invoke;
  v6[3] = &unk_1E5B5FB90;
  v8 = &v9;
  v3 = v1;
  v7 = v3;
  objc_msgSend(v3, "performTransactionWithBlock:", v6);
  v4 = *((unsigned __int8 *)v10 + 24);

  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1AC27C7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _ML3ValidationExecuteSQLArray(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = a2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v10;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v4);
        if (!objc_msgSend(v3, "executeUpdate:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v7), (_QWORD)v9))
        {
          v5 = 0;
          goto LABEL_11;
        }
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v5)
        continue;
      break;
    }
    v5 = 1;
  }
LABEL_11:

  return v5;
}

uint64_t ML3ValidationRunInitialInsertStatements(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t buf[16];
  uint8_t v8[16];

  v1 = a1;
  if ((objc_msgSend(v1, "executeUpdate:", CFSTR("INSERT INTO base_location (base_location_id, path) VALUES (0, '')")) & 1) != 0)
  {
    ML3LocalizationLanguageCanonicalIdentifier();
    v2 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("INSERT OR REPLACE INTO _MLDatabaseProperties (key, value) VALUES ('OrderingLanguage','%@')"), v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v1, "executeUpdate:", v3);
    if ((v4 & 1) == 0)
    {
      v5 = os_log_create("com.apple.amp.medialibrary", "Validation");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v5, OS_LOG_TYPE_ERROR, "Failed to set ordering language with canonical identifier.", buf, 2u);
      }

    }
  }
  else
  {
    v2 = os_log_create("com.apple.amp.medialibrary", "Validation");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1AC149000, v2, OS_LOG_TYPE_ERROR, "Failed to insert empty base location into table.", v8, 2u);
    }
    v4 = 0;
  }

  return v4;
}

void ML3ContainerAuthorImportItem::~ML3ContainerAuthorImportItem(ML3ContainerAuthorImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ContainerAuthorImportItem::isValid(ML3ContainerAuthorImportItem *this)
{
  return 1;
}

uint64_t ML3ContainerAuthorImportItem::getIntegerValue(ML3ContainerAuthorImportItem *this, int a2)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 251658241:
      result = *((_QWORD *)this + 9);
      break;
    case 251658242:
      result = *((_QWORD *)this + 10);
      break;
    case 251658243:
      result = *((_QWORD *)this + 11);
      break;
    case 251658245:
      result = *((unsigned __int8 *)this + 96);
      break;
    case 251658246:
      result = *((_QWORD *)this + 13);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ML3ContainerAuthorImportItem::hasValue(ML3ContainerAuthorImportItem *this, int a2)
{
  return ((a2 - 251658241) < 6) & (0x37u >> (a2 - 1));
}

id ML3TrackRulesIdentityPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3TrackRulesIdentityPropertyForSource_onceToken != -1)
    dispatch_once(&ML3TrackRulesIdentityPropertyForSource_onceToken, &__block_literal_global_4774);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *ML3TrackRulesIdentityPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 27, CFSTR("ML3TrackRulesIdentityPropertyForSource called with invalid source=%d"), a1);

  }
  return (id)ML3TrackRulesIdentityPropertyForSource_values[(int)a1];
}

uint64_t ML3TrackRulesIdentityImportPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3TrackRulesIdentityImportPropertyForSource_onceToken != -1)
    dispatch_once(&ML3TrackRulesIdentityImportPropertyForSource_onceToken, &__block_literal_global_7);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MLImportPropertyKey ML3TrackRulesIdentityImportPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 44, CFSTR("ML3TrackRulesIdentityImportPropertyForSource called with invalid source=%d"), a1);

  }
  return *((unsigned int *)&ML3TrackRulesIdentityImportPropertyForSource_values + (int)a1);
}

uint64_t ML3TrackRulesMediaTypesForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3TrackRulesMediaTypesForSource_onceToken != -1)
    dispatch_once(&ML3TrackRulesMediaTypesForSource_onceToken, &__block_literal_global_10);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MLMediaType ML3TrackRulesMediaTypesForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 61, CFSTR("ML3TrackRulesMediaTypesForSource called with invalid source=%d"), a1);

  }
  return *((unsigned int *)&ML3TrackRulesMediaTypesForSource_values + (int)a1);
}

id ML3ContainerRulesIdentityPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3ContainerRulesIdentityPropertyForSource_onceToken != -1)
    dispatch_once(&ML3ContainerRulesIdentityPropertyForSource_onceToken, &__block_literal_global_13);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *ML3ContainerRulesIdentityPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 78, CFSTR("ML3ContainerRulesIdentityPropertyForSource called with invalid source=%d"), a1);

  }
  return ML3ContainerRulesIdentityPropertyForSource_values[(int)a1];
}

uint64_t ML3ContainerRulesIdentityImportPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3ContainerRulesIdentityImportPropertyForSource_onceToken != -1)
    dispatch_once(&ML3ContainerRulesIdentityImportPropertyForSource_onceToken, &__block_literal_global_16);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MLImportPropertyKey ML3ContainerRulesIdentityImportPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 95, CFSTR("ML3ContainerRulesIdentityImportPropertyForSource called with invalid source=%d"), a1);

  }
  return *((unsigned int *)&ML3ContainerRulesIdentityImportPropertyForSource_values + (int)a1);
}

id ML3ArtistRulesIdentityPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3ArtistRulesIdentityPropertyForSource_onceToken[0] != -1)
    dispatch_once(ML3ArtistRulesIdentityPropertyForSource_onceToken, &__block_literal_global_19);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *ML3ArtistRulesIdentityPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 112, CFSTR("ML3ArtistRulesIdentityPropertyForSource called with invalid source=%d"), a1);

  }
  return (id)ML3ArtistRulesIdentityPropertyForSource_values[(int)a1];
}

uint64_t ML3ItemArtistRulesIdentityImportPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3ItemArtistRulesIdentityImportPropertyForSource_onceToken != -1)
    dispatch_once(&ML3ItemArtistRulesIdentityImportPropertyForSource_onceToken, &__block_literal_global_24);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MLImportPropertyKey ML3ItemArtistRulesIdentityImportPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 133, CFSTR("ML3ItemArtistRulesIdentityImportPropertyForSource called with invalid source=%d"), a1);

  }
  return *((unsigned int *)&ML3ItemArtistRulesIdentityImportPropertyForSource_values + (int)a1);
}

id ML3AlbumArtistRulesIdentityPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3AlbumArtistRulesIdentityPropertyForSource_onceToken[0] != -1)
    dispatch_once(ML3AlbumArtistRulesIdentityPropertyForSource_onceToken, &__block_literal_global_27);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *ML3AlbumArtistRulesIdentityPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 151, CFSTR("ML3AlbumArtistRulesIdentityPropertyForSource called with invalid source=%d"), a1);

  }
  return ML3AlbumArtistRulesIdentityPropertyForSource_values[(int)a1];
}

uint64_t ML3AlbumArtistRulesIdentityImportPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3AlbumArtistRulesIdentityImportPropertyForSource_onceToken != -1)
    dispatch_once(&ML3AlbumArtistRulesIdentityImportPropertyForSource_onceToken, &__block_literal_global_30);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MLImportPropertyKey ML3AlbumArtistRulesIdentityImportPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 172, CFSTR("ML3AlbumArtistRulesIdentityImportPropertyForSource called with invalid source=%d"), a1);

  }
  return *((unsigned int *)&ML3AlbumArtistRulesIdentityImportPropertyForSource_values + (int)a1);
}

id ML3AlbumRulesIdentityPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3AlbumRulesIdentityPropertyForSource_onceToken != -1)
    dispatch_once(&ML3AlbumRulesIdentityPropertyForSource_onceToken, &__block_literal_global_33);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *ML3AlbumRulesIdentityPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 189, CFSTR("ML3AlbumRulesIdentityPropertyForSource called with invalid source=%d"), a1);

  }
  return ML3AlbumRulesIdentityPropertyForSource_values[(int)a1];
}

uint64_t ML3AlbumRulesIdentityImportPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3AlbumRulesIdentityImportPropertyForSource_onceToken != -1)
    dispatch_once(&ML3AlbumRulesIdentityImportPropertyForSource_onceToken, &__block_literal_global_36);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MLImportPropertyKey ML3AlbumRulesIdentityImportPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 206, CFSTR("ML3AlbumRulesIdentityImportPropertyForSource called with invalid source=%d"), a1);

  }
  return *((unsigned int *)&ML3AlbumRulesIdentityImportPropertyForSource_values + (int)a1);
}

id ML3TrackRulesRemovalSourceIdentityPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3TrackRulesRemovalSourceIdentityPropertyForSource_onceToken != -1)
    dispatch_once(&ML3TrackRulesRemovalSourceIdentityPropertyForSource_onceToken, &__block_literal_global_39);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *ML3TrackRulesRemovalSourceIdentityPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 227, CFSTR("ML3TrackRulesRemovalSourceIdentityPropertyForSource called with invalid source=%d"), a1);

  }
  return (id)ML3TrackRulesRemovalSourceIdentityPropertyForSource_values[(int)a1];
}

id ML3ContainerRulesRemovalSourceIdentityPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3ContainerRulesRemovalSourceIdentityPropertyForSource_onceToken != -1)
    dispatch_once(&ML3ContainerRulesRemovalSourceIdentityPropertyForSource_onceToken, &__block_literal_global_42);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *ML3ContainerRulesRemovalSourceIdentityPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 244, CFSTR("ML3ContainerRulesRemovalSourceIdentityPropertyForSource called with invalid source=%d"), a1);

  }
  return ML3ContainerRulesRemovalSourceIdentityPropertyForSource_values[(int)a1];
}

id ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource_onceToken != -1)
    dispatch_once(&ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource_onceToken, &__block_literal_global_45);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 262, CFSTR("ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource called with invalid source=%d"), a1);

  }
  return ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource_values[(int)a1];
}

id ML3AlbumRulesRemovalSourceIdentityPropertyForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3AlbumRulesRemovalSourceIdentityPropertyForSource_onceToken != -1)
    dispatch_once(&ML3AlbumRulesRemovalSourceIdentityPropertyForSource_onceToken, &__block_literal_global_48);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *ML3AlbumRulesRemovalSourceIdentityPropertyForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 280, CFSTR("ML3AlbumRulesRemovalSourceIdentityPropertyForSource called with invalid source=%d"), a1);

  }
  return ML3AlbumRulesRemovalSourceIdentityPropertyForSource_values[(int)a1];
}

id ML3TrackRulesRemovalPropertiesForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3TrackRulesRemovalPropertiesForSource_onceToken != -1)
    dispatch_once(&ML3TrackRulesRemovalPropertiesForSource_onceToken, &__block_literal_global_51);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSDictionary *ML3TrackRulesRemovalPropertiesForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 322, CFSTR("ML3TrackRulesRemovalPropertiesForSource called with invalid source=%d"), a1);

  }
  return (id)ML3TrackRulesRemovalPropertiesForSource_dictionaries[(int)a1];
}

uint64_t ML3TrackRulesRemoveLocalAssetForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3TrackRulesRemoveLocalAssetForSource_onceToken != -1)
    dispatch_once(&ML3TrackRulesRemoveLocalAssetForSource_onceToken, &__block_literal_global_59);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL ML3TrackRulesRemoveLocalAssetForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 341, CFSTR("ML3TrackRulesRemoveLocalAssetForSource called with invalid source=%d"), a1);

  }
  return *((unsigned __int8 *)&ML3TrackRulesRemoveLocalAssetForSource_values + (int)a1);
}

uint64_t ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource(uint64_t a1)
{
  void *v3;
  void *v4;

  if (ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource_onceToken != -1)
    dispatch_once(&ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource_onceToken, &__block_literal_global_62);
  if (a1 >= 7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource(ML3TrackSource)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3TrackRules.m"), 361, CFSTR("ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource called with invalid source=%d"), a1);

  }
  return *((unsigned __int8 *)&ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource_values + (int)a1);
}

id ML3TrackRulesGetPropertyName(int a1, uint64_t a2)
{
  return *(id *)(ML3TrackRulesGetRule(a1, a2) + 32);
}

uint64_t ML3TrackRulesGetRule(int a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  result = 0;
  switch(a1)
  {
    case 1:
      v5 = __itemRules;
      goto LABEL_27;
    case 2:
      v5 = __itemExtraRules;
      goto LABEL_27;
    case 3:
      v5 = __itemPlaybackRules;
      goto LABEL_27;
    case 4:
      v5 = __itemSearchRules;
      goto LABEL_27;
    case 5:
      v5 = __itemStatsRules;
      goto LABEL_27;
    case 6:
      v5 = __itemStoreRules;
      goto LABEL_27;
    case 7:
      v5 = __itemVideoRules;
      goto LABEL_27;
    case 8:
      v5 = __chapterRules;
      goto LABEL_27;
    case 9:
      v5 = __lyricsRules;
      goto LABEL_27;
    case 10:
      v5 = __specialRules;
      goto LABEL_27;
    case 11:
      v5 = __containerRules;
      goto LABEL_27;
    case 12:
      v5 = __containerSeedRules;
      goto LABEL_27;
    case 14:
      v5 = __containerItemRules;
      goto LABEL_27;
    case 15:
      v5 = __containerAuthorRules;
      goto LABEL_27;
    case 16:
      v5 = __containerItemReactionRules;
      goto LABEL_27;
    case 17:
      v5 = __albumRules;
      goto LABEL_27;
    case 18:
      v5 = __albumArtistRules;
      goto LABEL_27;
    case 19:
      v5 = __artistRules;
      goto LABEL_27;
    case 20:
      v5 = __composerRules;
      goto LABEL_27;
    case 21:
      v5 = __genreRules;
      goto LABEL_27;
    case 22:
      v5 = __personRules;
      goto LABEL_27;
    case 23:
      v5 = __containerItemPersonRules;
      goto LABEL_27;
    case 24:
      v5 = __bookletRules;
LABEL_27:
      result = v5 + 56 * a2;
      break;
    default:
      return result;
  }
  return result;
}

id ML3TrackRulesGetPropertyNameForKey(int a1, uint64_t a2)
{
  uint64_t PropertyIndex;
  void *v6;
  void *v7;

  PropertyIndex = ML3TrackRulesGetPropertyIndex(a1, a2);
  if (PropertyIndex == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *ML3TrackRulesGetPropertyNameForKey(MLImportPropertyGroupKey, MLImportPropertyKey)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("ML3TrackRules.m"), 1166, CFSTR("no track rule found for property %X"), a2);

    PropertyIndex = 0x7FFFFFFFFFFFFFFFLL;
  }
  return *(id *)(ML3TrackRulesGetRule(a1, PropertyIndex) + 32);
}

uint64_t ML3TrackRulesGetPropertyIndex(int a1, int a2)
{
  uint64_t Count;
  uint64_t v5;
  uint64_t v6;

  Count = ML3TrackRulesGetCount(a1);
  if (!Count)
    return 0x7FFFFFFFFFFFFFFFLL;
  v5 = Count;
  v6 = 0;
  while (*(_DWORD *)(ML3TrackRulesGetRule(a1, v6) + 48) != a2)
  {
    if (v5 == ++v6)
      return 0x7FFFFFFFFFFFFFFFLL;
  }
  return v6;
}

uint64_t ML3TrackRulesGetCount(int a1)
{
  uint64_t result;
  BOOL v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  result = 0;
  switch(a1)
  {
    case 1:
      v3 = __itemRulesCount == 0;
      v4 = 37;
      goto LABEL_31;
    case 2:
      v3 = __itemExtraRulesCount == 0;
      v4 = 33;
      goto LABEL_31;
    case 3:
      v5 = __itemPlaybackRulesCount;
      goto LABEL_9;
    case 4:
      v6 = __itemSearchRulesCount;
      goto LABEL_30;
    case 5:
      v5 = __itemStatsRulesCount;
LABEL_9:
      v3 = v5 == 0;
      v4 = 20;
      goto LABEL_31;
    case 6:
      v3 = __itemStoreRulesCount == 0;
      v4 = 57;
      goto LABEL_31;
    case 7:
      v3 = __itemVideoRulesCount == 0;
      v4 = 38;
      goto LABEL_31;
    case 8:
      return __chapterRulesCount;
    case 9:
      v6 = __lyricsRulesCount;
      goto LABEL_30;
    case 10:
      v3 = __specialRulesCount == 0;
      v4 = 27;
      goto LABEL_31;
    case 11:
      v3 = __containerRulesCount == 0;
      v4 = 89;
      goto LABEL_31;
    case 12:
      v7 = __containerSeedRulesCount;
      goto LABEL_28;
    case 14:
      v8 = __containerItemRulesCount;
      goto LABEL_26;
    case 15:
      v6 = __containerAuthorRulesCount;
      goto LABEL_30;
    case 16:
      v3 = __containerItemReactionRulesCount == 0;
      v4 = 4;
      goto LABEL_31;
    case 17:
      v3 = __albumRulesCount == 0;
      v4 = 26;
      goto LABEL_31;
    case 18:
      v3 = __albumArtistRulesCount == 0;
      v4 = 19;
      goto LABEL_31;
    case 19:
      v3 = __artistRulesCount == 0;
      v4 = 16;
      goto LABEL_31;
    case 20:
      v3 = __composerRulesCount == 0;
      v4 = 10;
      goto LABEL_31;
    case 21:
      v3 = __genreRulesCount == 0;
      v4 = 9;
      goto LABEL_31;
    case 22:
      v8 = __personRulesCount;
LABEL_26:
      v3 = v8 == 0;
      v4 = 6;
      goto LABEL_31;
    case 23:
      v7 = __containerItemPersonRulesCount;
LABEL_28:
      v3 = v7 == 0;
      v4 = 2;
      goto LABEL_31;
    case 24:
      v6 = __bookletRulesCount;
LABEL_30:
      v3 = v6 == 0;
      v4 = 5;
LABEL_31:
      if (v3)
        result = 0;
      else
        result = v4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ML3TrackRulesGetInsertionRule(int a1, uint64_t a2, int a3)
{
  return *(unsigned int *)(ML3TrackRulesGetRule(a1, a2) + 4 * a3);
}

uint64_t ML3TrackRulesShouldPreferMaximumValue(int a1, uint64_t a2)
{
  return *(unsigned __int8 *)(ML3TrackRulesGetRule(a1, a2) + 28);
}

uint64_t ML3TrackRulesGetPropertyKey(int a1, uint64_t a2)
{
  return *(unsigned int *)(ML3TrackRulesGetRule(a1, a2) + 48);
}

uint64_t ML3TrackRulesGetPropertyDatatype(int a1, uint64_t a2)
{
  return *(_QWORD *)(ML3TrackRulesGetRule(a1, a2) + 40);
}

void sub_1AC286200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1AC286DC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t compareSortKeys(void *a1, void *a2)
{
  id v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  id v7;
  const void *v8;
  id v9;
  const void *v10;
  size_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  v4 = a1;
  v5 = objc_msgSend(v4, "length");
  v6 = objc_msgSend(v3, "length");
  v7 = objc_retainAutorelease(v4);
  v8 = (const void *)objc_msgSend(v7, "bytes");

  v9 = objc_retainAutorelease(v3);
  v10 = (const void *)objc_msgSend(v9, "bytes");

  if (v5 >= v6)
    v11 = v6;
  else
    v11 = v5;
  v12 = memcmp(v8, v10, v11);
  v13 = -1;
  if (v5 >= v6)
    v14 = 0;
  else
    v14 = -1;
  if (v5 > v6)
    v14 = 1;
  if (v12 >= 0)
    v13 = v14;
  if (v12 <= 0)
    return v13;
  else
    return 1;
}

void sub_1AC288540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1AC2887B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC288920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5079(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5080(uint64_t a1)
{

}

void sub_1AC28902C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC289344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2896BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC28A7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

void sub_1AC28AB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC28AC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC28B088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a15, 8);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_1AC28B184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC28C3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC28C4D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC28C5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1AC28C88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3HomeSharingContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3HomeSharingContainerImportItem>,std::allocator<ML3HomeSharingContainerImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3HomeSharingContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3HomeSharingContainerImportItem>,std::allocator<ML3HomeSharingContainerImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3HomeSharingContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3HomeSharingContainerImportItem>,std::allocator<ML3HomeSharingContainerImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_33ML3HomeSharingContainerImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3HomeSharingTrackImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3HomeSharingTrackImportItem>,std::allocator<ML3HomeSharingTrackImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3HomeSharingTrackImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3HomeSharingTrackImportItem>,std::allocator<ML3HomeSharingTrackImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3HomeSharingTrackImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3HomeSharingTrackImportItem>,std::allocator<ML3HomeSharingTrackImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_29ML3HomeSharingTrackImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1AC28CB28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3MaintenanceUtilitiesMarkArtworkPurgeable(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  id v5;
  int IsAppleTV;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint8_t v51[4];
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  _QWORD v55[3];
  uint8_t buf[4];
  NSObject *v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "updateRootArtworkPurgeability");
  objc_msgSend(v1, "databasePath");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3MusicLibrary autoupdatingSharedLibraryPath](ML3MusicLibrary, "autoupdatingSharedLibraryPath");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "isEqualToString:", v3);

  if (v4)
  {
    v41 = v1;
    v5 = v1;
    IsAppleTV = MSVDeviceIsAppleTV();
    v7 = 1;
    if (!IsAppleTV)
      v7 = 2;
    v45 = v7;
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = v5;
    objc_msgSend(v5, "rootArtworkCacheDirectory");
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      v57 = v8;
      _os_log_impl(&dword_1AC149000, v9, OS_LOG_TYPE_DEFAULT, "_ML3MaintenanceUtilitiesMarkCacheArtworkPurgeable - Marking purgeable cached artwork at path %{private}@", buf, 0xCu);
    }

    objc_msgSend(v43, "enumeratorAtPath:", v8);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "nextObject");
    v10 = objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v11 = (void *)v10;
      v12 = 0;
      v13 = 0;
      do
      {
        -[NSObject stringByAppendingPathComponent:](v8, "stringByAppendingPathComponent:", v11);
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v51 = 138477827;
          v52 = v14;
          _os_log_impl(&dword_1AC149000, v15, OS_LOG_TYPE_DEFAULT, "_ML3MaintenanceUtilitiesMarkCacheArtworkPurgeable - Enumerating purgeable cached artwork size path %{private}@", v51, 0xCu);
        }

        v44 = (void *)v14;
        objc_msgSend(v43, "enumeratorAtPath:", v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = 0u;
        v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v47, buf, 16);
        if (v17)
        {
          v18 = v17;
          v19 = *(_QWORD *)v48;
          do
          {
            for (i = 0; i != v18; ++i)
            {
              if (*(_QWORD *)v48 != v19)
                objc_enumerationMutation(v16);
              v21 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * i);
              v22 = (void *)MEMORY[0x1E0CB3940];
              v55[0] = v8;
              v55[1] = v11;
              v55[2] = v21;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v55, 3);
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v22, "pathWithComponents:", v23);
              v24 = (void *)objc_claimAutoreleasedReturnValue();

              MSVEnableDirStatsForDirectory();
              v25 = objc_msgSend(v46, "markSystemPurgeableMusicPath:forUrgency:", v24, v45);
              v13 += v25 ^ 1;
              v12 += v25;
              objc_msgSend(v16, "skipDescendants");

            }
            v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v47, buf, 16);
          }
          while (v18);
        }
        objc_msgSend(v42, "skipDescendants");

        objc_msgSend(v42, "nextObject");
        v26 = objc_claimAutoreleasedReturnValue();

        v11 = (void *)v26;
      }
      while (v26);
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v27 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v51 = 134218240;
      v52 = v12;
      v53 = 2048;
      v54 = v13;
      _os_log_impl(&dword_1AC149000, v27, OS_LOG_TYPE_DEFAULT, "_ML3MaintenanceUtilitiesMarkCacheArtworkPurgeable - Completed with with %llu files marked and %llu failures", v51, 0x16u);
    }

    v28 = v46;
    v1 = v41;
    if ((MSVDeviceIsAppleTV() & 1) != 0)
    {
      v29 = 2;
    }
    else
    {
      if ((MSVDeviceIsWatch() & 1) == 0)
      {
        v30 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1AC149000, v30, OS_LOG_TYPE_DEFAULT, "_ML3MaintenanceUtilitiesMarkOrginalArtworkPurgeable - Original artwork is not purgeable. Skipping task.", buf, 2u);
        }
        goto LABEL_40;
      }
      v29 = 3;
    }
    objc_msgSend(v28, "originalArtworkDirectory");
    v30 = objc_claimAutoreleasedReturnValue();
    v31 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      v57 = v30;
      _os_log_impl(&dword_1AC149000, v31, OS_LOG_TYPE_DEFAULT, "_ML3MaintenanceUtilitiesMarkOrginalArtworkPurgeable - Marking original artwork at path %{private}@", buf, 0xCu);
    }

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "enumeratorAtPath:", v30);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "nextObject");
    v34 = objc_claimAutoreleasedReturnValue();
    if (v34)
    {
      v35 = (void *)v34;
      v36 = 0;
      v37 = 0;
      do
      {
        buf[0] = 1;
        -[NSObject stringByAppendingPathComponent:](v30, "stringByAppendingPathComponent:", v35);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "fileExistsAtPath:isDirectory:", v38, buf);
        if (!buf[0])
        {
          if (objc_msgSend(v28, "markSystemPurgeableMusicPath:forUrgency:", v38, v29))
            v37 = ((char *)v37 + 1);
          else
            ++v36;
        }

        objc_msgSend(v33, "nextObject");
        v39 = objc_claimAutoreleasedReturnValue();

        v35 = (void *)v39;
      }
      while (v39);
    }
    else
    {
      v37 = 0;
      v36 = 0;
    }
    v40 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v57 = v37;
      v58 = 2048;
      v59 = v36;
      _os_log_impl(&dword_1AC149000, v40, OS_LOG_TYPE_DEFAULT, "_ML3MaintenanceUtilitiesMarkOrginalArtworkPurgeable - Completed with with %llu files marked and %llu failures", buf, 0x16u);
    }

    v1 = v41;
LABEL_40:

  }
}

void sub_1AC2937B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void ML3ContainerItemReactionsDatabaseImportDataSource::~ML3ContainerItemReactionsDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ContainerItemReactionsDatabaseImportDataSource::getImportPropertyGroupKey(ML3ContainerItemReactionsDatabaseImportDataSource *this)
{
  return 16;
}

uint64_t ML3ContainerItemReactionsDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ContainerItemReactionsDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

id ML3ContainerItemReactionsDatabaseImportDataSource::generateVTableInsertionFromClause(ML3ContainerItemReactionsDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ LEFT OUTER JOIN container_item_reaction ON %@.ROWID = container_item_reaction.container_item_reaction_pid"), a3, a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1AC2955F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC295B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC296058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ML3ContainerItemDatabaseImportDataSource::~ML3ContainerItemDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ContainerItemDatabaseImportDataSource::getImportPropertyGroupKey(ML3ContainerItemDatabaseImportDataSource *this)
{
  return 14;
}

uint64_t ML3ContainerItemDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ContainerItemDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

id ML3ContainerItemDatabaseImportDataSource::generateVTableInsertionFromClause(ML3ContainerItemDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ LEFT OUTER JOIN container_item ON %@.ROWID = container_item.container_item_pid"), a3, a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1AC296DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6100(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6101(uint64_t a1)
{

}

void ML3ItemStatsDatabaseImportDataSource::~ML3ItemStatsDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ItemStatsDatabaseImportDataSource::getImportPropertyGroupKey(ML3ItemStatsDatabaseImportDataSource *this)
{
  return 5;
}

uint64_t ML3ItemStatsDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ItemStatsDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

void sub_1AC2970E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6170(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6171(uint64_t a1)
{

}

void sub_1AC298AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC298C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC298E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC298F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2990CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC299560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1AC2998EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6649(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6650(uint64_t a1)
{

}

void sub_1AC29B2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t create90sMusicSearchCriteria()
{
  if (!NewSearchCriteriaList())
  {
    InitValueRangeCriteria();
    AppendValueRangeSearchCriterion();
    if (!NewSearchCriteriaList())
    {
      InitValueRangeCriteria();
      AppendSearchCriterion();
      InitValueRangeCriteria();
      AppendSearchCriterion();
      AppendNestedSearchCriteriaList();
      DisposeSearchCriteriaList();
    }
  }
  return 0;
}

uint64_t createClassicalMusicSearchCriteria()
{
  uint64_t v0;
  const __CFAllocator *v1;
  __CFString *v2;
  uint64_t v3;
  _WORD *v4;
  void *v5;

  if (!NewSearchCriteriaList())
  {
    if (!NewSearchCriteriaList())
    {
      InitValueRangeCriteria();
      AppendSearchCriterion();
      InitValueRangeCriteria();
      AppendSearchCriterion();
      AppendNestedSearchCriteriaList();
      DisposeSearchCriteriaList();
    }
    if (!NewSearchCriteriaList())
    {
      v0 = 0;
      v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        v2 = classicalGenreStrings[v0];
        v3 = -[__CFString length](v2, "length");
        v4 = CFAllocatorAllocate(v1, 2 * v3 + 2, 0);
        if (v4)
        {
          v5 = v4;
          *v4 = v3;
          -[__CFString getCharacters:range:](v2, "getCharacters:range:", v4 + 1, 0, v3);
          AppendUStringSearchCriterion();
          CFAllocatorDeallocate(v1, v5);
        }

        ++v0;
      }
      while (v0 != 7);
      AppendNestedSearchCriteriaList();
      DisposeSearchCriteriaList();
    }
  }
  return 0;
}

uint64_t createMyTopRatedCriteria()
{
  if (!NewSearchCriteriaList())
    AppendNumericSearchCriterion();
  return 0;
}

uint64_t createTop25MostPlayedSearchCriteria()
{
  if (!NewSearchCriteriaList())
  {
    InitValueRangeCriteria();
    AppendSearchCriterion();
    AppendNumericSearchCriterion();
  }
  return 0;
}

uint64_t createRecentlyPlayedSearchCriteria()
{
  if (!NewSearchCriteriaList())
  {
    InitValueRangeCriteria();
    AppendValueRangeSearchCriterion();
    InitValueRangeCriteria();
    AppendSearchCriterion();
  }
  return 0;
}

void sub_1AC29D47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC29E9CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AC29EBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC29F19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC29F988(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

id StringPredicateForCriteriaInfo(uint64_t a1, void *a2)
{
  id v3;
  unsigned int v4;
  uint64_t matched;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void *v16;
  id v17;
  id v18;

  v3 = a2;
  v4 = *(_DWORD *)(a1 + 4);
  matched = ML3ComparisonForCriteronMatchType(v4);
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharacters:length:", *(_QWORD *)(a1 + 16), (unint64_t)*(unsigned int *)(a1 + 24) >> 1);
  v7 = v6;
  if (*(_DWORD *)a1 != 9)
  {
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", v3, v6, matched, HIBYTE(v4) & 1, &stru_1E5B66908);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v9)
      goto LABEL_13;
    goto LABEL_11;
  }
  if ((matched - 1) > 8)
    v8 = &__block_literal_global_596;
  else
    v8 = *(&off_1E5B621C0 + (matched - 1));
  v13 = MEMORY[0x1E0C809B0];
  v14 = 3221225472;
  v15 = __StringPredicateForCriteriaInfo_block_invoke_6;
  v16 = &unk_1E5B621A0;
  v18 = v8;
  v17 = v6;
  ML3KindsPassingTest(&v13);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "count", v13, v14, v15, v16))
    +[ML3ContainmentPredicate predicateWithProperty:values:](ML3ContainmentPredicate, "predicateWithProperty:values:", v3, v10);
  else
    +[ML3TruthPredicate falsePredicate](ML3TruthPredicate, "falsePredicate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
LABEL_11:
    if ((v4 & 0x2000000) != 0)
    {
      +[ML3UnaryPredicate predicateWithPredicate:](ML3NegationPredicate, "predicateWithPredicate:", v9);
      v11 = objc_claimAutoreleasedReturnValue();

      v9 = (void *)v11;
    }
  }
LABEL_13:

  return v9;
}

id NumericPredicateForCriteriaInfo(int *a1, void *a2)
{
  id v3;
  int v4;
  int SearchCriterionInfoValueRange;
  uint64_t ValueRangeCriteriaStartValue;
  uint64_t ValueRangeCriteriaEndValue;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t matched;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  int v25;
  void *v26;
  void *v27;
  uint64_t v28;

  v3 = a2;
  v4 = a1[1];
  LODWORD(v28) = 0;
  SearchCriterionInfoValueRange = GetSearchCriterionInfoValueRange();
  if (SearchCriterionInfoValueRange)
  {
    v25 = SearchCriterionInfoValueRange;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "ML3Predicate *NumericPredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, CFSTR("ML3Container.m"), 316, CFSTR("Could not get value range for %@ criterion: %ld"), v3, v25, 0, 0, 0, 0, 0, 0, 0, 0, v28);

  }
  ValueRangeCriteriaStartValue = GetValueRangeCriteriaStartValue();
  ValueRangeCriteriaEndValue = GetValueRangeCriteriaEndValue();
  if ((v4 & 0x4F1) == 0)
  {
    v15 = ValueRangeCriteriaEndValue;
    if ((v4 & 0x300) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ValueRangeCriteriaStartValue);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v4 & 0x100) != 0)
        v17 = 4;
      else
        v17 = 3;
      if ((v4 & 0x100) != 0)
        v18 = 6;
      else
        v18 = 5;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", v3, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v15);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", v3, v20, v18);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", v19, v21, 0);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v22);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v14)
        goto LABEL_29;
    }
    else
    {
      if ((v4 & 0x800) == 0)
      {
        v14 = 0;
        goto LABEL_29;
      }
      +[ML3BitMaskPredicate predicateWithProperty:mask:value:](ML3BitMaskPredicate, "predicateWithProperty:mask:value:", v3, ValueRangeCriteriaStartValue, ValueRangeCriteriaEndValue);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v14)
        goto LABEL_29;
    }
LABEL_27:
    if ((v4 & 0x2000000) != 0)
    {
      +[ML3UnaryPredicate predicateWithPredicate:](ML3NegationPredicate, "predicateWithPredicate:", v14);
      v23 = objc_claimAutoreleasedReturnValue();

      v14 = (void *)v23;
    }
    goto LABEL_29;
  }
  v8 = *a1;
  v9 = v4 & 0xFFFFFFFE ^ 0x401;
  if ((v4 & 0x400) == 0)
    v9 = v4;
  v10 = 33;
  if (ValueRangeCriteriaStartValue != 32)
    v10 = ValueRangeCriteriaStartValue;
  if (v8 == 60)
    v11 = v10;
  else
    v11 = ValueRangeCriteriaStartValue;
  if (v8 == 60)
    v4 = v9;
  matched = ML3ComparisonForCriteronMatchType(v4);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", v3, v13, matched);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
    goto LABEL_27;
LABEL_29:

  return v14;
}

id BooleanPredicateForCriteriaInfo(int *a1, void *a2)
{
  id v3;
  int v4;
  int v5;
  int SearchCriterionInfoNumericValue;
  void *v7;
  int SearchCriterionInfoBooleanValue;
  uint64_t v9;
  uint64_t v10;
  int v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;

  v3 = a2;
  v4 = *a1;
  v5 = a1[1];
  if ((v5 & 0x400) != 0 && v4 == 133)
  {
    SearchCriterionInfoNumericValue = GetSearchCriterionInfoNumericValue();
    if (SearchCriterionInfoNumericValue)
    {
      v14 = SearchCriterionInfoNumericValue;
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "ML3Predicate *BooleanPredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("ML3Container.m"), 218, CFSTR("Could not get numeric value for %@ criterion: %ld"), v3, v14);

    }
    v7 = 0;
    goto LABEL_15;
  }
  if (v4 == 37)
  {
    SearchCriterionInfoBooleanValue = GetSearchCriterionInfoBooleanValue();
    if (SearchCriterionInfoBooleanValue)
    {
      v17 = SearchCriterionInfoBooleanValue;
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "ML3Predicate *BooleanPredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("ML3Container.m"), 231, CFSTR("Could not get BOOLean value for %@ criterion: %ld"), v3, v17);

    }
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", v3, &stru_1E5B66908, 1);
    v9 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v9;
    if (v9)
    {
LABEL_13:
      if ((v5 & 0x2000000) != 0)
      {
        +[ML3UnaryPredicate predicateWithPredicate:](ML3NegationPredicate, "predicateWithPredicate:", v7);
        v10 = objc_claimAutoreleasedReturnValue();

        v7 = (void *)v10;
      }
    }
  }
  else
  {
    if ((v5 & 1) == 0)
    {
      v7 = 0;
      goto LABEL_15;
    }
    v12 = GetSearchCriterionInfoBooleanValue();
    if (v12)
    {
      v20 = v12;
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "ML3Predicate *BooleanPredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, CFSTR("ML3Container.m"), 237, CFSTR("Could not get BOOLean value for %@ criterion: %ld"), v3, v20);

    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", v3, v13, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
      goto LABEL_13;
  }
LABEL_15:

  return v7;
}

id DatePredicateForCriteriaInfo(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  int SearchCriterionInfoValueRange;
  const __CFTimeZone *v6;
  double *v7;
  CFAbsoluteTime v8;
  uint64_t v9;
  CFAbsoluteTime v10;
  uint64_t v11;
  uint64_t matched;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  int v23;
  void *v24;
  void *v25;

  v3 = a2;
  v4 = *(_DWORD *)(a1 + 4);
  SearchCriterionInfoValueRange = GetSearchCriterionInfoValueRange();
  if (SearchCriterionInfoValueRange)
  {
    v23 = SearchCriterionInfoValueRange;
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "ML3Predicate *DatePredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v25, CFSTR("ML3Container.m"), 256, CFSTR("Could not get value range for %@ date criterion: %ld"), v3, v23);

  }
  v6 = CFTimeZoneCopySystem();
  v7 = (double *)MEMORY[0x1E0C9ADE8];
  v8 = (double)(GetValueRangeCriteriaStartValue() - (uint64_t)*v7);
  v9 = (uint64_t)(v8 - CFTimeZoneGetSecondsFromGMT(v6, v8));
  v10 = (double)(GetValueRangeCriteriaEndValue() - (uint64_t)*v7);
  v11 = (uint64_t)(v10 - CFTimeZoneGetSecondsFromGMT(v6, v10));
  CFRelease(v6);
  if ((v4 & 0xF0) != 0)
  {
    matched = ML3ComparisonForCriteronMatchType(v4);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v9);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:transformFunction:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:transformFunction:", v3, v13, matched, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if ((v4 & 0x301) == 0)
    {
      v14 = 0;
      goto LABEL_17;
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v9);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if ((v4 & 0x101) != 0)
      v16 = 4;
    else
      v16 = 3;
    if ((v4 & 0x101) != 0)
      v17 = 6;
    else
      v17 = 5;
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:transformFunction:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:transformFunction:", v3, v15, v16, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v11);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:transformFunction:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:transformFunction:", v3, v18, v17, 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", v13, v19, 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v20);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  if (v14 && (v4 & 0x2000000) != 0)
  {
    +[ML3UnaryPredicate predicateWithPredicate:](ML3NegationPredicate, "predicateWithPredicate:", v14);
    v21 = objc_claimAutoreleasedReturnValue();

    v14 = (void *)v21;
  }
LABEL_17:

  return v14;
}

uint64_t ML3ComparisonForCriteronMatchType(int a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;

  if ((a1 & 1) != 0)
    return 1;
  if ((a1 & 0x10) != 0)
    return 3;
  if ((a1 & 8) != 0)
    v1 = 9;
  else
    v1 = (a1 << 21 >> 31) & 0xA;
  if ((a1 & 4) != 0)
    v2 = 8;
  else
    v2 = v1;
  if ((a1 & 2) != 0)
    v3 = 7;
  else
    v3 = v2;
  if ((a1 & 0x80) != 0)
    v4 = 6;
  else
    v4 = v3;
  if ((a1 & 0x40) != 0)
    v5 = 5;
  else
    v5 = v4;
  if ((a1 & 0x20) != 0)
    return 4;
  else
    return v5;
}

void ML3ContainerItemPersonImportItem::~ML3ContainerItemPersonImportItem(ML3ContainerItemPersonImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ContainerItemPersonImportItem::isValid(ML3ContainerItemPersonImportItem *this)
{
  return 1;
}

uint64_t ML3ContainerItemPersonImportItem::getIntegerValue(ML3ContainerItemPersonImportItem *this, int a2)
{
  char *v2;

  if (a2 == 385875970)
  {
    v2 = (char *)this + 80;
    return *(_QWORD *)v2;
  }
  if (a2 == 385875969)
  {
    v2 = (char *)this + 72;
    return *(_QWORD *)v2;
  }
  return 0;
}

BOOL ML3ContainerItemPersonImportItem::hasValue(ML3ContainerItemPersonImportItem *this, int a2)
{
  return (a2 - 385875969) < 2;
}

void sub_1AC2A3A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2A3BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2A3D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ML3AlbumDatabaseImportDataSource::~ML3AlbumDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3AlbumDatabaseImportDataSource::getImportPropertyGroupKey(ML3AlbumDatabaseImportDataSource *this)
{
  return 17;
}

uint64_t ML3AlbumDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3AlbumDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

id ML3AlbumDatabaseImportDataSource::identityPropertyForSource(ML3AlbumDatabaseImportDataSource *this, uint64_t a2)
{
  return ML3AlbumRulesIdentityPropertyForSource(a2);
}

void sub_1AC2A4900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC2A4BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2A59B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  void *v61;

  ML3ImportSession::~ML3ImportSession((ML3ImportSession *)&a61);
  _Unwind_Resume(a1);
}

void sub_1AC2A5BEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC2A5DCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC2A5F04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC2A6084(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC2A76B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v45 - 128);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v45 - 240);

  _Unwind_Resume(a1);
}

void sub_1AC2A7F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_1AC2A7FC4()
{
  JUMPOUT(0x1AC2A7FB4);
}

void sub_1AC2A84D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va2);

  _Unwind_Resume(a1);
}

void sub_1AC2A85C4()
{
  JUMPOUT(0x1AC2A85B4);
}

void sub_1AC2A88C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;
  void *v14;
  void *v15;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a13);

  _Unwind_Resume(a1);
}

void sub_1AC2A8D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1AC2A8F98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC2A8FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3ProtoSyncAlbumArtistDeleteImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncAlbumArtistDeleteImportItem>,std::allocator<ML3ProtoSyncAlbumArtistDeleteImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncAlbumArtistDeleteImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncAlbumArtistDeleteImportItem>,std::allocator<ML3ProtoSyncAlbumArtistDeleteImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncAlbumArtistDeleteImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncAlbumArtistDeleteImportItem>,std::allocator<ML3ProtoSyncAlbumArtistDeleteImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_39ML3ProtoSyncAlbumArtistDeleteImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ProtoSyncContainerImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncContainerImportItem>,std::allocator<ML3ProtoSyncContainerImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncContainerImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncContainerImportItem>,std::allocator<ML3ProtoSyncContainerImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncContainerImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncContainerImportItem>,std::allocator<ML3ProtoSyncContainerImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_31ML3ProtoSyncContainerImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1AC2A97C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1AC2A9FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1AC2AA240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1AC2AA4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2AA59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2AA77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2AA958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1AC2AAB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2AADAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7163(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7164(uint64_t a1)
{

}

void ML3CPPData::~ML3CPPData(ML3CPPData *this)
{
  *(_QWORD *)this = &off_1E5B4CF08;
  if (*((_QWORD *)this + 2))
  {
    if (*((_BYTE *)this + 24))
      MEMORY[0x1AF43C744]();
  }
}

{
  *(_QWORD *)this = &off_1E5B4CF08;
  if (*((_QWORD *)this + 2))
  {
    if (*((_BYTE *)this + 24))
      MEMORY[0x1AF43C744]();
  }
  JUMPOUT(0x1AF43C744);
}

id ML3CPPBridgeString(const UInt8 *a1, int a2)
{
  uint64_t *v2;
  void *v3;
  int v4;
  const UInt8 *v5;
  CFIndex v6;

  if (a2)
  {
    if (*((char *)a1 + 23) >= 0)
      v2 = (uint64_t *)a1;
    else
      v2 = *(uint64_t **)a1;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = *((char *)a1 + 23);
    if (v4 >= 0)
      v5 = a1;
    else
      v5 = *(const UInt8 **)a1;
    if (v4 >= 0)
      v6 = a1[23];
    else
      v6 = *((_QWORD *)a1 + 1);
    v3 = (void *)CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, v6, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  }
  return v3;
}

void ML3CPPBridgeNSData(NSData *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v6 = objc_retainAutorelease(a2);
  v3 = objc_msgSend(v6, "bytes");
  v4 = objc_msgSend(v6, "length");
  v5 = operator new();
  *(_QWORD *)v5 = &off_1E5B4CF08;
  *(_QWORD *)(v5 + 8) = v4;
  *(_BYTE *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 16) = v3;
  std::shared_ptr<ML3CPPData>::shared_ptr[abi:ne180100]<ML3CPPData,void>(a1, v5);

}

void sub_1AC2AC430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ML3CPPStringFromData(NSData *a1, void *a2)
{
  id v3;

  v3 = objc_retainAutorelease(a2);
  std::string::basic_string[abi:ne180100](a1, (void *)objc_msgSend(v3, "bytes"), objc_msgSend(v3, "length"));

}

void sub_1AC2AC49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ML3CPPSanitizeString(std::string *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  int v5;
  const std::string::value_type *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::wstring::size_type v15;
  uint64_t v16;
  _DWORD *v17;
  std::wstring::size_type v19;
  __n128 v20;
  __n128 v21;
  std::wstring::size_type size;
  std::wstring *v23;
  char *v24;
  int v25;
  std::wstring *v26;
  int64_t v27;
  std::wstring::size_type v28;
  std::wstring *v29;
  std::wstring *v30;
  char v31;
  uint64_t v32;
  std::wstring::size_type v33;
  std::wstring *v34;
  std::wstring::size_type v35;
  std::wstring *v36;
  std::wstring::size_type v37;
  std::wstring *v38;
  uint64_t v39;
  std::wstring::value_type v40;
  unsigned int v43;
  std::wstring::size_type v44;
  std::wstring *v45;
  std::wstring::size_type v46;
  std::string::size_type v47;
  std::wstring *v48;
  __n128 v49;
  __n128 v50;
  std::string::size_type v51;
  std::string *v52;
  char *v53;
  int v54;
  std::string *v55;
  uint64_t v56;
  std::string::size_type v57;
  std::string *v58;
  std::string *v59;
  unint64_t v60;
  unint64_t v61;
  std::string::size_type v62;
  std::string::size_type v63;
  std::string *v64;
  std::string *v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string::size_type v68;
  std::string::size_type v69;
  int v70;
  BOOL v71;
  std::string *v72;
  char *v73;
  std::string::size_type v74;
  char *i;
  int v76;
  std::string *v77;
  char *v78;
  std::string::size_type v79;
  std::string *v80;
  std::string *v81;
  unint64_t v82;
  _DWORD *p_p;
  std::wstring *v84;
  std::wstring *v85;
  std::wstring::value_type v86;
  unint64_t v87;
  _BYTE *v88;
  std::string *v89;
  _BYTE *v90;
  char data;
  std::string::size_type v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  const std::wstring::value_type *v96;
  std::wstring::size_type v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  const std::string::value_type *v101;
  std::string::size_type v102;
  std::wstring v103;
  std::wstring v104;
  uint64_t v105;
  std::wstring *v106;
  void *__p;
  std::wstring::size_type v108;
  int64_t v109;
  std::string::size_type v110[2];
  std::wstring::value_type *__s[4];
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __n128 v115;
  __n128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __n128 v124;
  __n128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;

  v2 = a2;
  v130 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = (char)v4;
  v6 = *(const std::string::value_type **)a2;
  if ((v4 & 0x80u) == 0)
    v7 = (_BYTE *)v2;
  else
    v7 = v6;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(v2 + 8);
  if (!v4)
  {
LABEL_10:
    if (v5 < 0)
      std::string::__init_copy_ctor_external(this, v6, *(_QWORD *)(v2 + 8));
    else
      *this = *(std::string *)v2;
    return;
  }
  while (*v7 && *v7 != 191)
  {
    ++v7;
    if (!--v4)
      goto LABEL_10;
  }
  v8 = operator new();
  std::codecvt<wchar_t,char,__mbstate_t>::codecvt((std::codecvt<wchar_t, char, mbstate_t> *)v8, 0);
  *(_QWORD *)(v8 + 24) = 1114111;
  *(_DWORD *)(v8 + 32) = 0;
  *(_QWORD *)v8 = &off_1E5B51238;
  *(_OWORD *)v110 = 0u;
  memset(__s, 0, sizeof(__s));
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v9 = *(_QWORD *)(v2 + 8);
  if (*(char *)(v2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(v2 + 23);
  }
  else
  {
    v2 = *(_QWORD *)v2;
    v10 = v9;
  }
  v11 = 2 * v10;
  v112 = v8;
  v121 = 0;
  if ((unint64_t)(2 * v10) >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 5)
  {
    v13 = v11 + 2;
    if ((v11 | 1) != 5)
      v13 = v11 | 1;
    v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v13 + 1);
    v104.__r_.__value_.__l.__size_ = 2 * v10;
    v104.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    v104.__r_.__value_.__r.__words[0] = (std::wstring::size_type)v12;
  }
  else
  {
    *((_BYTE *)&v104.__r_.__value_.__s + 23) = 2 * v10;
    v12 = &v104;
    if (!v10)
    {
      v104.__r_.__value_.__s.__data_[0] = 0;
      goto LABEL_64;
    }
  }
  v15 = v2 + v10;
  v16 = -2 * v10;
  v17 = v12;
  do
    *v17++ = 0;
  while (!__CFADD__(v16++, 1));
  v12[2 * v10] = 0;
  if (!v10)
    goto LABEL_64;
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = 4;
  else
    v19 = (v104.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  std::wstring::resize(&v104, v19, 0);
  v126 = v117;
  v127 = v118;
  v128 = v119;
  v129 = v120;
  v122 = v113;
  v123 = v114;
  v20 = v115;
  v21 = v116;
  size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v104;
  else
    v23 = (std::wstring *)v104.__r_.__value_.__r.__words[0];
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v104.__r_.__value_.__l.__size_;
  v24 = (char *)v23 + 4 * size;
  v124 = v115;
  v125 = v116;
  while (1)
  {
    v25 = (*(uint64_t (**)(uint64_t, __int128 *, unint64_t, std::wstring::size_type, std::wstring *, std::wstring *, char *, std::wstring **, __n128, __n128))(*(_QWORD *)v112 + 32))(v112, &v122, v2, v15, &v103, v23, v24, &v106, v20, v21);
    v121 += v103.__r_.__value_.__r.__words[0] - v2;
    if (v103.__r_.__value_.__r.__words[0] == v2)
      goto LABEL_57;
    if (v25 != 1)
      break;
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v104;
    else
      v26 = (std::wstring *)v104.__r_.__value_.__r.__words[0];
    v27 = (char *)v106 - (char *)v26;
    std::wstring::resize(&v104, ((char *)v106 - (char *)v26) >> 1, 0);
    v28 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    v29 = (std::wstring *)v104.__r_.__value_.__r.__words[0];
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v104;
    v23 = (std::wstring *)((char *)v29 + v27);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = v104.__r_.__value_.__l.__size_;
    v24 = (char *)v29 + 4 * v28;
    v2 = v103.__r_.__value_.__r.__words[0];
    if (v103.__r_.__value_.__r.__words[0] >= v15)
    {
      if ((*((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_47;
LABEL_58:
      operator delete(v104.__r_.__value_.__l.__data_);
LABEL_47:
      if ((SHIBYTE(__s[3]) & 0x80000000) == 0)
      {
        if (HIBYTE(__s[3]))
        {
          v104 = *(std::wstring *)&__s[1];
          goto LABEL_64;
        }
LABEL_226:
        std::__throw_range_error[abi:ne180100]("wstring_convert: from_bytes error");
      }
      if (!__s[2])
        goto LABEL_226;
      std::wstring::__init_copy_ctor_external(&v104, __s[1], (std::wstring::size_type)__s[2]);
      goto LABEL_64;
    }
  }
  if (v25)
  {
    if (v25 != 3)
    {
LABEL_57:
      if ((*((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_58;
      goto LABEL_47;
    }
    v30 = &v104;
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = (std::wstring *)v104.__r_.__value_.__r.__words[0];
    std::wstring::resize(&v104, ((char *)v23 - (char *)v30) >> 2, 0);
    v31 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    {
      v32 = v15 - v2;
      if (v15 == v2)
        goto LABEL_64;
      v33 = v104.__r_.__value_.__l.__size_;
      v35 = (v104.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v34 = (std::wstring *)v104.__r_.__value_.__r.__words[0];
      v31 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v32 = v15 - v2;
      if (v15 == v2)
        goto LABEL_64;
      v33 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      v34 = &v104;
      v35 = 4;
    }
    v82 = v32 >> 2;
    if ((unint64_t)v34 > v2 || (unint64_t)v34->__r_.__value_.__r.__words + 4 * v33 + 4 <= v2)
    {
      if (v35 - v33 < v82)
      {
        std::wstring::__grow_by(&v104, v35, v33 - v35 + v82, v33, v33, 0, 0);
        v104.__r_.__value_.__l.__size_ = v33;
        v31 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      }
      v84 = &v104;
      if (v31 < 0)
        v84 = (std::wstring *)v104.__r_.__value_.__r.__words[0];
      v85 = (std::wstring *)((char *)v84 + 4 * v33);
      while (v2 != v15)
      {
        v86 = *(_DWORD *)v2;
        v2 += 4;
        v85->__r_.__value_.__s.__data_[0] = v86;
        v85 = (std::wstring *)((char *)v85 + 4);
      }
      v85->__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        v104.__r_.__value_.__l.__size_ = v82 + v33;
      else
        *((_BYTE *)&v104.__r_.__value_.__s + 23) = (v82 + v33) & 0x7F;
    }
    else
    {
      if (v32 < 0)
        std::string::__throw_length_error[abi:ne180100]();
      if ((unint64_t)v32 > 0x13)
      {
        v93 = (v82 & 0xFFFFFFFFFFFFFFFELL) + 2;
        if ((v82 | 1) != 5)
          v93 = v82 | 1;
        p_p = std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v93 + 1);
        v108 = v82;
        v109 = v94 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        HIBYTE(v109) = (unint64_t)v32 >> 2;
        p_p = &__p;
      }
      while (v2 != v15)
      {
        v95 = *(_DWORD *)v2;
        v2 += 4;
        *p_p++ = v95;
      }
      *p_p = 0;
      if (v109 >= 0)
        v96 = (const std::wstring::value_type *)&__p;
      else
        v96 = (const std::wstring::value_type *)__p;
      if (v109 >= 0)
        v97 = HIBYTE(v109);
      else
        v97 = v108;
      std::wstring::append(&v104, v96, v97);
      if (SHIBYTE(v109) < 0)
        operator delete(__p);
    }
  }
  else
  {
    v36 = &v104;
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::wstring *)v104.__r_.__value_.__r.__words[0];
    std::wstring::resize(&v104, ((char *)v106 - (char *)v36) >> 2, 0);
  }
LABEL_64:
  memset(&v103, 0, sizeof(v103));
  v37 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &v104;
  else
    v38 = (std::wstring *)v104.__r_.__value_.__r.__words[0];
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v37 = v104.__r_.__value_.__l.__size_;
  if (v37)
  {
    v39 = 4 * v37;
    do
    {
      v40 = v38->__r_.__value_.__s.__data_[0];
      if ((v38->__r_.__value_.__s.__data_[0] - 65534) >= 2 && v40 != 0 && v40 != 65279)
        std::wstring::push_back(&v103, v40);
      v38 = (std::wstring *)((char *)v38 + 4);
      v39 -= 4;
    }
    while (v39);
    v43 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    v37 = v103.__r_.__value_.__l.__size_;
    v44 = v103.__r_.__value_.__r.__words[0];
  }
  else
  {
    v44 = 0;
    v43 = 0;
  }
  if ((v43 & 0x80u) == 0)
    v45 = &v103;
  else
    v45 = (std::wstring *)v44;
  if ((v43 & 0x80u) == 0)
    v46 = v43;
  else
    v46 = v37;
  v121 = 0;
  if (v112)
  {
    std::string::basic_string[abi:ne180100](this, 2 * v46, 0);
    if (v46)
    {
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = 22;
      else
        v47 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize(this, v47, 0);
      v48 = (std::wstring *)((char *)v45 + 4 * v46);
      v126 = v117;
      v127 = v118;
      v128 = v119;
      v129 = v120;
      v122 = v113;
      v123 = v114;
      v49 = v115;
      v50 = v116;
      v51 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v51 & 0x80u) == 0)
        v52 = this;
      else
        v52 = (std::string *)this->__r_.__value_.__r.__words[0];
      if ((v51 & 0x80u) != 0)
        v51 = this->__r_.__value_.__l.__size_;
      v53 = (char *)v52 + v51;
      v124 = v115;
      v125 = v116;
      while (1)
      {
        v54 = (*(uint64_t (**)(uint64_t, __int128 *, std::wstring *, std::wstring *, std::wstring **, std::string *, char *, uint64_t *, __n128, __n128))(*(_QWORD *)v112 + 24))(v112, &v122, v45, v48, &v106, v52, v53, &v105, v49, v50);
        v121 += ((char *)v106 - (char *)v45) >> 2;
        if (v106 == v45)
          goto LABEL_149;
        if (v54 != 1)
          break;
        if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = this;
        else
          v55 = (std::string *)this->__r_.__value_.__r.__words[0];
        v56 = v105 - (_QWORD)v55;
        std::string::resize(this, 2 * (v105 - (_QWORD)v55), 0);
        v57 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        if ((v57 & 0x80u) == 0)
          v58 = this;
        else
          v58 = (std::string *)this->__r_.__value_.__r.__words[0];
        v52 = (std::string *)((char *)v58 + v56);
        if ((v57 & 0x80u) != 0)
          v57 = this->__r_.__value_.__l.__size_;
        v53 = (char *)v58 + v57;
        v45 = v106;
        if (v106 >= v48)
          goto LABEL_149;
      }
      if (!v54)
      {
        if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = this;
        else
          v65 = (std::string *)this->__r_.__value_.__r.__words[0];
        std::string::resize(this, v105 - (_QWORD)v65, 0);
        goto LABEL_124;
      }
      if (v54 != 3)
        goto LABEL_149;
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = this;
      else
        v59 = (std::string *)this->__r_.__value_.__r.__words[0];
      std::string::resize(this, (char *)v52 - (char *)v59, 0);
      LODWORD(v60) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      v61 = (char *)v48 - (char *)v45;
      if ((v60 & 0x80000000) != 0)
      {
        if (v48 == v45)
          goto LABEL_124;
        v62 = this->__r_.__value_.__l.__size_;
        v87 = this->__r_.__value_.__r.__words[2];
        v63 = (v87 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        v64 = (std::string *)this->__r_.__value_.__r.__words[0];
        v60 = HIBYTE(v87);
      }
      else
      {
        if (v48 == v45)
          goto LABEL_124;
        v62 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        v63 = 22;
        v64 = this;
      }
      if (v64 > (std::string *)v45 || (char *)&v64->__r_.__value_.__l.__data_ + v62 + 1 <= (char *)v45)
      {
        if (v63 - v62 < v61)
        {
          std::string::__grow_by(this, v63, v62 - v63 + v61, v62, v62, 0, 0);
          this->__r_.__value_.__l.__size_ = v62;
          LOBYTE(v60) = *((_BYTE *)&this->__r_.__value_.__s + 23);
        }
        v89 = this;
        if ((v60 & 0x80) != 0)
          v89 = (std::string *)this->__r_.__value_.__r.__words[0];
        v90 = (char *)v89 + v62;
        do
        {
          data = (char)v45->__r_.__value_.__l.__data_;
          v45 = (std::wstring *)((char *)v45 + 1);
          *v90++ = data;
        }
        while (v45 != v48);
        *v90 = 0;
        v92 = v61 + v62;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          this->__r_.__value_.__l.__size_ = v92;
        else
          *((_BYTE *)&this->__r_.__value_.__s + 23) = v92 & 0x7F;
      }
      else
      {
        if (v61 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        if (v61 > 0x16)
        {
          v98 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v61 | 7) != 0x17)
            v98 = v61 | 7;
          v99 = v98 + 1;
          v88 = operator new(v98 + 1);
          v108 = (char *)v48 - (char *)v45;
          v109 = v99 | 0x8000000000000000;
          __p = v88;
        }
        else
        {
          HIBYTE(v109) = (_BYTE)v48 - (_BYTE)v45;
          v88 = &__p;
        }
        do
        {
          v100 = (char)v45->__r_.__value_.__l.__data_;
          v45 = (std::wstring *)((char *)v45 + 1);
          *v88++ = v100;
        }
        while (v45 != v48);
        *v88 = 0;
        if (v109 >= 0)
          v101 = (const std::string::value_type *)&__p;
        else
          v101 = (const std::string::value_type *)__p;
        if (v109 >= 0)
          v102 = HIBYTE(v109);
        else
          v102 = v108;
        std::string::append(this, v101, v102);
        if (SHIBYTE(v109) < 0)
          operator delete(__p);
      }
    }
    else
    {
      v126 = v117;
      v127 = v118;
      v128 = v119;
      v129 = v120;
      v122 = v113;
      v123 = v114;
      v124 = v115;
      v125 = v116;
    }
LABEL_124:
    v66 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v67 = this->__r_.__value_.__l.__size_;
    if ((v66 & 0x80u) == 0)
      v68 = 22;
    else
      v68 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::resize(this, v68, 0);
    if ((v66 & 0x80u) == 0)
      v69 = v66;
    else
      v69 = v67;
    v70 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    v71 = v70 < 0;
    if (v70 >= 0)
      v72 = this;
    else
      v72 = (std::string *)this->__r_.__value_.__r.__words[0];
    v73 = (char *)v72 + v69;
    if (v71)
      v74 = this->__r_.__value_.__l.__size_;
    else
      v74 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    for (i = &v73[v74]; ; i = (char *)v80 + v79)
    {
      v76 = (*(uint64_t (**)(uint64_t, __int128 *, char *, char *, void **))(*(_QWORD *)v112 + 40))(v112, &v122, v73, i, &__p);
      if (v76 != 1)
        break;
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = this;
      else
        v77 = (std::string *)this->__r_.__value_.__r.__words[0];
      v78 = (char *)((_BYTE *)__p - (_BYTE *)v77);
      std::string::resize(this, 2 * ((_BYTE *)__p - (_BYTE *)v77), 0);
      v79 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v79 & 0x80u) == 0)
        v80 = this;
      else
        v80 = (std::string *)this->__r_.__value_.__r.__words[0];
      v73 = &v78[(_QWORD)v80];
      if ((v79 & 0x80u) != 0)
        v79 = this->__r_.__value_.__l.__size_;
    }
    if (v76)
    {
      if (v76 != 3)
      {
LABEL_149:
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          operator delete(this->__r_.__value_.__l.__data_);
        goto LABEL_151;
      }
    }
    else
    {
      v73 = (char *)__p;
    }
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = this;
    else
      v81 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::resize(this, v73 - (char *)v81, 0);
    goto LABEL_161;
  }
LABEL_151:
  if (SHIBYTE(__s[0]) < 0)
  {
    if (v110[1])
    {
      std::string::__init_copy_ctor_external(this, (const std::string::value_type *)v110[0], v110[1]);
      goto LABEL_161;
    }
LABEL_225:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  if (!HIBYTE(__s[0]))
    goto LABEL_225;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)v110;
  this->__r_.__value_.__r.__words[2] = (std::string::size_type)__s[0];
LABEL_161:
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)v110);
}

void sub_1AC2ACF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  uint64_t v30;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v30 + 23) < 0)
    operator delete(*(void **)v30);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t std::wstring_convert<std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>,wchar_t,std::allocator<wchar_t>,std::allocator<char>>::~wstring_convert(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__throw_range_error[abi:ne180100](const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5B4B398, MEMORY[0x1E0DE42B0]);
}

void sub_1AC2AD068(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
  return result;
}

void std::wstring::__init_copy_ctor_external(std::wstring *this, const std::wstring::value_type *__s, std::wstring::size_type __sz)
{
  std::wstring *v5;
  std::wstring::size_type v6;
  std::wstring *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5)
      v6 = __sz | 1;
    v7 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 4 * __sz + 4);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

void std::codecvt_utf8_utf16<wchar_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8_utf16[abi:ne180100](std::codecvt<wchar_t, char, mbstate_t> *a1)
{
  std::codecvt<wchar_t,char,__mbstate_t>::~codecvt(a1);
  JUMPOUT(0x1AF43C744);
}

void ML3CPPStripInsignificantCharacters(_QWORD *a1, const UInt8 *a2)
{
  void *v3;
  void *v4;
  char *v5;
  id v6;

  ML3CPPBridgeString(a2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "copyWithoutInsignificantPrefixAndCharacters");
  v6 = v4;
  if (v4)
    v5 = (char *)objc_msgSend(objc_retainAutorelease(v4), "UTF8String");
  else
    v5 = "";
  std::string::basic_string[abi:ne180100]<0>(a1, v5);

}

void sub_1AC2AD208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3CPPSortableString(std::string *a1, const UInt8 *a2)
{
  uint64_t v4;
  std::string::size_type size;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  std::string *p_s1;
  void *v10;
  std::string __s1;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  ML3CPPStripInsignificantCharacters(&__s1, a2);
  v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v6 = a2[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (size == v6)
  {
    if (v7 >= 0)
      v8 = (unsigned __int8 *)a2;
    else
      v8 = *(unsigned __int8 **)a2;
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      v10 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v8, __s1.__r_.__value_.__l.__size_))
        goto LABEL_20;
    }
    else
    {
      if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        return;
      p_s1 = &__s1;
      while (p_s1->__r_.__value_.__s.__data_[0] == *v8)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v8;
        if (!--v4)
        {
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
            return;
          goto LABEL_19;
        }
      }
    }
  }
  std::string::operator=(a1, &__s1);
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    return;
LABEL_19:
  v10 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_20:
  operator delete(v10);
}

void sub_1AC2AD2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void sub_1AC2AD80C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if (a2 == 1)
  {
    v13 = objc_begin_catch(a1);
    v14 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v13, "description");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stringWithFormat:", CFSTR("*** Database Exception: %@"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13, "userInfo");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3MediaLibraryWriter writerErrorWithCode:description:userInfo:](ML3MediaLibraryWriter, "writerErrorWithCode:description:userInfo:", 301, v15, v16);
    v17 = objc_claimAutoreleasedReturnValue();

    _ML3LogCategoryDefault_Oversize();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v13, "callStackSymbols");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138543618;
      *(_QWORD *)((char *)&buf + 4) = v17;
      WORD6(buf) = 2114;
      *(_QWORD *)((char *)&buf + 14) = v19;
      _os_log_impl(&dword_1AC149000, v18, OS_LOG_TYPE_ERROR, "Exception performing validation. Error=%{public}@. stackTrace=%{public}@", (uint8_t *)&buf, 0x16u);

    }
    v20 = (void *)MEMORY[0x1E0D4D030];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Error performing database migration: %@"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", *MEMORY[0x1E0D4CE40], CFSTR("Bug"), CFSTR("Migration Error"), v21, 0, 0);

    objc_end_catch();
    if (!v17)
      JUMPOUT(0x1AC2AD76CLL);
    JUMPOUT(0x1AC2AD624);
  }
  _Unwind_Resume(a1);
}

void sub_1AC2ADF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2AE218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2AE38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MIPGenreReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  uint64_t result;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 != 2)
      {
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_47;
        }
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_39;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_41:
        v32 = 16;
        goto LABEL_46;
      }
      PBReaderReadString();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v29;

LABEL_47:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v24 = 0;
    v25 = 0;
    v20 = 0;
    *(_BYTE *)(a1 + 32) |= 1u;
    while (1)
    {
      v26 = *v3;
      v27 = *(_QWORD *)(a2 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
      *(_QWORD *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0)
        goto LABEL_43;
      v24 += 7;
      v14 = v25++ >= 9;
      if (v14)
      {
        v20 = 0;
        goto LABEL_45;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
    if (*(_BYTE *)(a2 + *v5))
      v20 = 0;
LABEL_45:
    v32 = 8;
LABEL_46:
    *(_QWORD *)(a1 + v32) = v20;
    goto LABEL_47;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1AC2AFF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7583(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7584(uint64_t a1)
{

}

void sub_1AC2B0A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7675(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7676(uint64_t a1)
{

}

void sub_1AC2B0C24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC2B0D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC2B0E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1AC2B1800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{

  _Block_object_dispose(&a62, 8);
  std::__hash_table<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>>>::~__hash_table(a13);
  _Block_object_dispose(&STACK[0x200], 8);

  _Block_object_dispose(&STACK[0x230], 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7757(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7758(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__54(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__55(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>>>::~__hash_table(a1 + 48);
}

void sub_1AC2B2360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  _QWORD *v17;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,void *>>>::operator()[abi:ne180100](1, v17);

  _Unwind_Resume(a1);
}

void sub_1AC2B269C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1AC2B2994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void std::__throw_out_of_range[abi:ne180100]()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception);
  __cxa_throw(exception, (struct type_info *)off_1E5B4B3A8, MEMORY[0x1E0DE42E0]);
}

void sub_1AC2B2A8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "unordered_map::at: key not found");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::vector<std::pair<long long,long long>>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  void *v3;

  if (a1)
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void ML3ITunesSyncImportItem::~ML3ITunesSyncImportItem(id *this)
{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
  JUMPOUT(0x1AF43C744);
}

void ML3ITunesSyncImportItem::getStringValue(ML3ITunesSyncImportItem *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v3;
  void *v4;
  char *v5;
  void *v6;
  std::string __str;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a2 = off_1E5B4D010;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = (std::string *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  (*(void (**)(ML3ITunesSyncImportItem *))(*(_QWORD *)this + 216))(this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = (char *)objc_msgSend(objc_retainAutorelease(v4), "UTF8String");
    if (v5)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, v5);
      std::string::operator=(v3, &__str);
      *(_BYTE *)(a2 + 8) = 1;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        v6 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_7:
        operator delete(v6);
      }
    }
  }
  else
  {
    __str.__r_.__value_.__s.__data_[8] = 0;
    v8 = 0;
    v9 = 0;
    __str.__r_.__value_.__r.__words[2] = 0;
    *(_BYTE *)(a2 + 8) = 0;
    std::string::operator=(v3, (const std::string *)&__str.__r_.__value_.__r.__words[2]);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5B4D010;
    if (SHIBYTE(v9) < 0)
    {
      v6 = (void *)__str.__r_.__value_.__r.__words[2];
      goto LABEL_7;
    }
  }

}

void sub_1AC2B2D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  int v25;

  if (a15 < 0)
    operator delete(__p);

  v25 = *(char *)(v21 + 39);
  *(_QWORD *)v21 = v23;
  if (v25 < 0)
    operator delete(*v22);
  _Unwind_Resume(a1);
}

uint64_t ML3ITunesSyncImportItem::getIntegerValue(ML3ITunesSyncImportItem *this)
{
  void *v1;
  uint64_t v2;

  (*(void (**)(ML3ITunesSyncImportItem *))(*(_QWORD *)this + 216))(this);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v2 = objc_msgSend(v1, "longLongValue");
  else
    v2 = 0;

  return v2;
}

void sub_1AC2B2DC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float ML3ITunesSyncImportItem::getFloatValue(ML3ITunesSyncImportItem *this)
{
  void *v1;
  float v2;
  float v3;
  double v4;

  (*(void (**)(ML3ITunesSyncImportItem *))(*(_QWORD *)this + 216))(this);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "floatValue");
    v3 = v2;
  }
  else
  {
    v3 = 0.0;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v1, "doubleValue");
      v3 = v4;
    }
  }

  return v3;
}

void sub_1AC2B2E50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ML3ITunesSyncImportItem::getDataValue(ML3ITunesSyncImportItem *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  const void *v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  id v12;
  __int128 v13;

  *a2 = 0;
  a2[1] = 0;
  (*(void (**)(ML3ITunesSyncImportItem *))(*(_QWORD *)this + 216))(this);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v3 = objc_retainAutorelease(v12);
    v4 = (const void *)objc_msgSend(v3, "bytes");
    v5 = objc_msgSend(v3, "length");
    v6 = operator new();
    *(_QWORD *)v6 = &off_1E5B4CF08;
    *(_QWORD *)(v6 + 8) = v5;
    if (v5)
      v7 = (void *)operator new[]();
    else
      v7 = 0;
    *(_QWORD *)(v6 + 16) = v7;
    *(_BYTE *)(v6 + 24) = 1;
    if (v4)
      memcpy(v7, v4, v5);
    else
      bzero(v7, v5);
    *(_QWORD *)&v13 = v6;
    v8 = (_QWORD *)operator new();
    *v8 = &off_1E5B51730;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v6;
    *((_QWORD *)&v13 + 1) = v8;
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a2, &v13);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

  }
}

void sub_1AC2B2FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;

  MEMORY[0x1AF43C744](v12, 0x1091C40934DB768);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

BOOL ML3ITunesSyncImportItem::hasValue(ML3ITunesSyncImportItem *this)
{
  void *v1;
  _BOOL8 v2;

  (*(void (**)(ML3ITunesSyncImportItem *))(*(_QWORD *)this + 216))(this);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1 != 0;

  return v2;
}

uint64_t ML3ITunesSyncImportItem::getDescription(ML3ITunesSyncImportItem *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v5[11];
  char v6;
  uint64_t v7;
  char v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"<ML3ITunesSyncImportItem ", 25);
  *(_DWORD *)((char *)&v5[1] + *(_QWORD *)(v5[0] - 24)) = *(_DWORD *)((_BYTE *)&v5[1] + *(_QWORD *)(v5[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (_QWORD *)std::ostream::operator<<();
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  v3 = (_QWORD *)std::ostream::operator<<();
  v8 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v8, 1);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v5[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v7);
}

void sub_1AC2B31BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ML3ITunesSyncImportItem::getSourceIdentifiers@<X0>(ML3ITunesSyncImportItem *this@<X0>, BOOL *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;

  result = std::vector<long long>::vector(a3);
  *a2 = 0;
  v6 = *((_QWORD *)this + 9);
  if (v6)
    *(_QWORD *)(*result + 24) = v6;
  return result;
}

id ML3ITunesSyncImportItem::getDeduplicationPredicates(ML3ITunesSyncImportItem *this)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((_QWORD *)this + 9))
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.sync_id"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v3);

  }
  return v2;
}

void sub_1AC2B3280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id ML3ITunesSyncImportItem::_getFoundationValue(ML3ITunesSyncImportItem *this, uint64_t a2)
{
  void *v2;
  void *v4;
  void *v5;

  if ((_DWORD)a2 == 100663308)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *((_QWORD *)this + 9));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual id ML3ITunesSyncImportItem::_getFoundationValue(MLImportPropertyKey) const");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("ML3ITunesSyncImportItem.mm"), 202, CFSTR("_getFoundationValue called with unknown property key %x"), a2);

    v2 = 0;
  }
  return v2;
}

void sub_1AC2B3354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3ITunesSyncTrackImportItem::~ML3ITunesSyncTrackImportItem(id *this)
{
  ML3ITunesSyncTrackImportItem::~ML3ITunesSyncTrackImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3ITunesSyncTrackImportItem::getDescription(ML3ITunesSyncTrackImportItem *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;
  char v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"<ML3ITunesSyncImportItem ", 25);
  *(_DWORD *)((char *)&v6[1] + *(_QWORD *)(v6[0] - 24)) = *(_DWORD *)((_BYTE *)&v6[1] + *(_QWORD *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (_QWORD *)std::ostream::operator<<();
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", store_id=", 11);
  v4 = (_QWORD *)std::ostream::operator<<();
  v9 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v9, 1);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v6[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v8);
}

void sub_1AC2B34E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::getDeduplicationPredicates(id *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v39;
  id v40;
  _QWORD v41[3];
  _QWORD v42[3];

  v42[2] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0C99DE8];
  ML3ITunesSyncImportItem::getDeduplicationPredicates((ML3ITunesSyncImportItem *)this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "arrayWithArray:", v3);
  v40 = (id)objc_claimAutoreleasedReturnValue();

  if ((unint64_t)this[19] + 1 >= 2)
  {
    if (this[9])
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v42[0] = v4;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.sync_id"), 0);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v42[1] = v5;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v42, 2);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "addObject:", v7);

      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.subscription_store_item_id"), this[19]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v41[0] = v8;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"), 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v41[1] = v9;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.sync_id"), 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v41[2] = v10;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v41, 3);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "addObject:", v12);

    }
    else
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "addObject:", v13);

    }
  }
  objc_msgSend(this[12], "objectForKey:", CFSTR("cloud_id"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v39 = 0;
LABEL_11:

    goto LABEL_13;
  }
  objc_msgSend(this[12], "objectForKey:", CFSTR("cloud_id"));
  v39 = (void *)objc_claimAutoreleasedReturnValue();

  if (v39)
  {
    if (!objc_msgSend(v39, "longLongValue"))
      goto LABEL_13;
    if (this[9])
    {
      v15 = (void *)MEMORY[0x1E0C99D20];
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_saga_id"), objc_msgSend(v39, "longLongValue"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.sync_id"), 0);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "arrayWithObjects:", v14, v16, 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "addObject:", v18);

    }
    else
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_saga_id"), objc_msgSend(v39, "longLongValue"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "addObject:", v14);
    }
    goto LABEL_11;
  }
  v39 = 0;
LABEL_13:
  (*((void (**)(id *, uint64_t))*this + 27))(this, 100663322);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19)
  {
    if (this[9])
    {
      v20 = (void *)MEMORY[0x1E0C99D20];
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:", CFSTR("item_store.external_guid"), v19, 1, 1);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.sync_id"), 0);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "arrayWithObjects:", v21, v22, 0);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "addObject:", v24);

    }
    else
    {
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:", CFSTR("item_store.external_guid"), v19, 1, 1);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "addObject:", v21);
    }

  }
  if (this[9])
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(this[12], "objectForKey:", CFSTR("title"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(this[12], "objectForKey:", CFSTR("title"));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v27 = 0;
    }

    objc_msgSend(this[12], "objectForKey:", CFSTR("total_time_ms"));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(this[12], "objectForKey:", CFSTR("total_time_ms"));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v29 = 0;
    }

    if (v27)
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("item_extra.title"), v27);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "addObject:", v30);

    }
    if (v29)
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_extra.total_time_ms"), objc_msgSend(v29, "longLongValue"));
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "addObject:", v31);

    }
    if (objc_msgSend(v25, "count"))
    {
      v32 = (void *)MEMORY[0x1E0C99D20];
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("ROWID"), this[9]);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.sync_id"), 0);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AnyCompoundPredicate, "predicateMatchingPredicates:", v25);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "arrayWithObjects:", v33, v34, v35, 0);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "addObject:", v37);

    }
  }

  return v40;
}

void sub_1AC2B3B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::_getFoundationValue(ML3ITunesSyncTrackImportItem *this, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  char v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  char isKindOfClass;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  if ((a2 - 0x1000000) >> 25 > 4)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    if ((int)a2 <= 100663296)
    {
      if ((int)a2 <= 50331648)
      {
        switch((int)a2)
        {
          case 16777217:
LABEL_44:
            _MLMediaTypeFromTrackProperiesDictionary(*((NSDictionary **)this + 12));
            v8 = objc_claimAutoreleasedReturnValue();
            goto LABEL_321;
          case 16777218:
          case 16777219:
          case 16777220:
          case 16777221:
          case 16777222:
          case 16777223:
          case 16777224:
          case 16777225:
          case 16777226:
          case 16777227:
          case 16777228:
          case 16777229:
          case 16777230:
          case 16777231:
          case 16777232:
          case 16777233:
          case 16777234:
          case 16777235:
          case 16777236:
          case 16777240:
          case 16777243:
          case 16777244:
          case 16777245:
          case 16777250:
          case 16777251:
          case 16777252:
          case 16777253:
            return v3;
          case 16777237:
            ML3ITunesSyncTrackImportItem::_getCurrentTrackDiscNumber((id *)this);
            v8 = objc_claimAutoreleasedReturnValue();
            goto LABEL_321;
          case 16777238:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("track_number"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("track_number"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 16777239:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("episode_sort_id"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("episode_sort_id"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 16777241:
LABEL_16:
            v3 = &unk_1E5BAB238;
            return v3;
          case 16777242:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("exclude_from_shuffle"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("exclude_from_shuffle"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 16777246:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("is_compilation"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("is_compilation"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 16777247:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("date_created"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v4)
              goto LABEL_316;
            v19 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("date_created"));
            v5 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();
            if ((isKindOfClass & 1) != 0)
            {
              objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("date_created"));
              v21 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v21 = 0;
            }
            goto LABEL_338;
          case 16777248:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("show_composer"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("show_composer"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 16777249:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("is_music_show"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("is_music_show"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          default:
            switch((int)a2)
            {
              case 33554433:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("title"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("title"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554434:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("sort_name"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("sort_name"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554435:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("disc_count"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("disc_count"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554436:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("track_count"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("track_count"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554437:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("total_time_ms"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("total_time_ms"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554438:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("year"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("year"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554439:
              case 33554441:
              case 33554460:
              case 33554461:
              case 33554466:
                return v3;
              case 33554440:
                objc_msgSend(*((id *)this + 10), "objectForKey:", CFSTR("location"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v4, "objectForKey:", CFSTR("file_size"));
                v5 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  objc_msgSend(*((id *)this + 10), "objectForKey:", CFSTR("location"));
                  v17 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v17, "objectForKey:", CFSTR("file_size"));
                  v18 = objc_claimAutoreleasedReturnValue();
LABEL_179:
                  v3 = (id)v18;

                }
                else
                {
LABEL_89:
                  v3 = 0;
                }
                goto LABEL_344;
              case 33554442:
                ML3ITunesSyncTrackImportItem::_getCurrentTrackIsAudibleAudioBook((id *)this);
                v8 = objc_claimAutoreleasedReturnValue();
                goto LABEL_321;
              case 33554443:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("date_modified"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v4)
                  goto LABEL_316;
                v19 = (void *)MEMORY[0x1E0CB37E8];
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("date_modified"));
                v5 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                isKindOfClass = objc_opt_isKindOfClass();
                if ((isKindOfClass & 1) != 0)
                {
                  objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("date_modified"));
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                }
                else
                {
                  v21 = 0;
                }
                goto LABEL_338;
              case 33554444:
                goto LABEL_44;
              case 33554445:
                ML3ITunesSyncTrackImportItem::_getCurrentTrackContentRating((id *)this);
                v8 = objc_claimAutoreleasedReturnValue();
                goto LABEL_321;
              case 33554446:
                ML3ITunesSyncTrackImportItem::_getCurrentTrackRatingLevel((id *)this);
                v8 = objc_claimAutoreleasedReturnValue();
                goto LABEL_321;
              case 33554447:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("is_user_disabled"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("is_user_disabled"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554448:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("bpm"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("bpm"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554449:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("genius_id"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("genius_id"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554450:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("comment"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("comment"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554451:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("grouping"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("grouping"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554452:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("description"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("description"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554453:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("description_long"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("description_long"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554454:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("collection_description"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("collection_description"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554455:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("copyright"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("copyright"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554456:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("genius_checksum"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("genius_checksum"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554457:
                goto LABEL_16;
              case 33554458:
                ML3ITunesSyncTrackImportItem::_getCurrentTrackLocationKind((id *)this);
                v8 = objc_claimAutoreleasedReturnValue();
                goto LABEL_321;
              case 33554462:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("work"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("work"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554463:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("movement_name"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("movement_name"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554464:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("movement_count"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("movement_count"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              case 33554465:
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("movement_number"));
                v4 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  goto LABEL_316;
                objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("movement_number"));
                v9 = objc_claimAutoreleasedReturnValue();
                goto LABEL_315;
              default:
                goto LABEL_320;
            }
        }
      }
      switch((int)a2)
      {
        case 50331649:
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("audio_format"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("audio_format"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331650:
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("bit_rate"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("bit_rate"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331651:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("codec_type"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("codec_type"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331652:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("codec_subtype"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("codec_subtype"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331653:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("data_kind"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("data_kind"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331654:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("data_url"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("data_url"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331655:
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("duration"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("duration"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331656:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("eq_preset"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("eq_preset"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331657:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("format"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("format"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331658:
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("gapless_heuristic_info"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("gapless_heuristic_info"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331659:
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("gapless_encoding_delay"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("gapless_encoding_delay"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331660:
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("gapless_encoding_drain"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("gapless_encoding_drain"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331661:
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("gapless_last_frame_resynch"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("gapless_last_frame_resynch"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331662:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("has_video"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("has_video"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331663:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("relative_volume"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("relative_volume"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331664:
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("sample_rate"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("sample_rate"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331665:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("start_time_ms"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("start_time_ms"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331666:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("stop_time_ms"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("stop_time_ms"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 50331667:
          objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("volume_normalization_energy"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("volume_normalization_energy"));
            v9 = objc_claimAutoreleasedReturnValue();
LABEL_315:
            v3 = (id)v9;
          }
          else
          {
LABEL_316:
            v3 = 0;
          }
          break;
        case 50331668:
          return v3;
        default:
          switch((int)a2)
          {
            case 83886081:
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("user_rating"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_316;
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("user_rating"));
              v9 = objc_claimAutoreleasedReturnValue();
              goto LABEL_315;
            case 83886082:
            case 83886095:
LABEL_19:
              v3 = (id)MEMORY[0x1E0C9AAA0];
              return v3;
            case 83886083:
            case 83886098:
            case 83886100:
              return v3;
            case 83886084:
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("play_count_user"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_316;
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("play_count_user"));
              v9 = objc_claimAutoreleasedReturnValue();
              goto LABEL_315;
            case 83886085:
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("play_count_recent"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_316;
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("play_count_recent"));
              v9 = objc_claimAutoreleasedReturnValue();
              goto LABEL_315;
            case 83886086:
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("has_been_played"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_316;
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("has_been_played"));
              v9 = objc_claimAutoreleasedReturnValue();
              goto LABEL_315;
            case 83886087:
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("date_played"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v4)
                goto LABEL_316;
              v19 = (void *)MEMORY[0x1E0CB37E8];
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("date_played"));
              v5 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              isKindOfClass = objc_opt_isKindOfClass();
              if ((isKindOfClass & 1) != 0)
                goto LABEL_211;
              v21 = 0;
              goto LABEL_338;
            case 83886088:
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("date_skipped"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v4)
                goto LABEL_316;
              v19 = (void *)MEMORY[0x1E0CB37E8];
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("date_skipped"));
              v5 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              isKindOfClass = objc_opt_isKindOfClass();
              if ((isKindOfClass & 1) != 0)
              {
                objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("date_skipped"));
                v21 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v21 = 0;
              }
              goto LABEL_338;
            case 83886089:
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("date_played"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v4)
                goto LABEL_316;
              v19 = (void *)MEMORY[0x1E0CB37E8];
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("date_played"));
              v5 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              isKindOfClass = objc_opt_isKindOfClass();
              if ((isKindOfClass & 1) != 0)
              {
LABEL_211:
                objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("date_played"));
                v21 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v21 = 0;
              }
LABEL_338:
              objc_msgSend(v21, "timeIntervalSinceReferenceDate");
              objc_msgSend(v19, "numberWithDouble:");
              v3 = (id)objc_claimAutoreleasedReturnValue();
              if ((isKindOfClass & 1) != 0)

              goto LABEL_344;
            case 83886090:
              objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("is_alarm"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_316;
              objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("is_alarm"));
              v9 = objc_claimAutoreleasedReturnValue();
              goto LABEL_315;
            case 83886091:
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("skip_count_user"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_316;
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("skip_count_user"));
              v9 = objc_claimAutoreleasedReturnValue();
              goto LABEL_315;
            case 83886092:
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("skip_count_recent"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_316;
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("skip_count_recent"));
              v9 = objc_claimAutoreleasedReturnValue();
              goto LABEL_315;
            case 83886093:
              objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("remember_bookmark"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_316;
              objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("remember_bookmark"));
              v9 = objc_claimAutoreleasedReturnValue();
              goto LABEL_315;
            case 83886094:
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("bookmark_time_ms"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_316;
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("bookmark_time_ms"));
              v9 = objc_claimAutoreleasedReturnValue();
              goto LABEL_315;
            case 83886096:
              objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("chosen_by_auto_fill"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_316;
              objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("chosen_by_auto_fill"));
              v9 = objc_claimAutoreleasedReturnValue();
              goto LABEL_315;
            case 83886097:
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("liked_state"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_316;
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("liked_state"));
              v9 = objc_claimAutoreleasedReturnValue();
              goto LABEL_315;
            case 83886099:
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("user_rating_is_derived"));
              v4 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
                goto LABEL_316;
              objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("user_rating_is_derived"));
              v9 = objc_claimAutoreleasedReturnValue();
              goto LABEL_315;
            default:
              if ((a2 - 67108865) >= 5)
              {
LABEL_320:
                ML3ITunesSyncImportItem::_getFoundationValue(this, a2);
                v8 = objc_claimAutoreleasedReturnValue();
LABEL_321:
                v3 = (id)v8;
              }
              return v3;
          }
      }
    }
    else if ((int)a2 <= 117440512)
    {
      switch((int)a2)
      {
        case 100663297:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("store_item_id"));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("store_item_id"));
            v23 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v23 = 0;
          }

          if (objc_msgSend(v23, "longLongValue") == -1)
            v3 = &unk_1E5BAB238;
          else
            v3 = v23;

          return v3;
        case 100663298:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("composer_id"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("composer_id"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663299:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("genre_id"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("genre_id"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663300:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("playlist_id"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("playlist_id"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663301:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("storefront_id"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("storefront_id"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663302:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("purchase_history_id"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("purchase_history_id"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663303:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("purchase_history_token"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("purchase_history_token"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663304:
        case 100663305:
        case 100663306:
        case 100663315:
        case 100663324:
        case 100663330:
        case 100663331:
        case 100663332:
        case 100663333:
        case 100663334:
        case 100663340:
        case 100663341:
        case 100663342:
        case 100663348:
        case 100663349:
        case 100663350:
        case 100663351:
        case 100663352:
        case 100663353:
        case 100663354:
        case 100663355:
          return v3;
        case 100663307:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("cloud_status"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("cloud_status"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663309:
        case 100663336:
        case 100663337:
        case 100663338:
        case 100663339:
        case 100663343:
        case 100663344:
        case 100663345:
        case 100663347:
          goto LABEL_16;
        case 100663310:
          goto LABEL_19;
        case 100663311:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("store_kind"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("store_kind"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663312:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("account_id"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("account_id"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663313:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("download_account_id"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("download_account_id"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663314:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("family_id"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("family_id"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663316:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("key_versions"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("key_versions"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663317:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("key_platform_id"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("key_platform_id"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663318:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("key_id"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("key_id"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663319:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("key_id_2"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("key_id_2"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663320:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("date_purchased"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("date_purchased"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663321:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("date_released"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("date_released"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663322:
          objc_msgSend(*((id *)this + 14), "objectForKey:", CFSTR("external_guid"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 14), "objectForKey:", CFSTR("external_guid"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663323:
          objc_msgSend(*((id *)this + 14), "objectForKey:", CFSTR("feed_url"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          v5 = v4;
          if (!v4)
          {
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("feed_url"));
            v5 = (void *)objc_claimAutoreleasedReturnValue();
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*((id *)this + 14), "objectForKey:", CFSTR("feed_url"));
            v6 = (void *)objc_claimAutoreleasedReturnValue();
            if (v6)
            {
LABEL_159:
              v7 = v6;
            }
            else
            {
              objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("feed_url"));
              v7 = (id)objc_claimAutoreleasedReturnValue();
            }
LABEL_342:
            v3 = v7;

          }
          else
          {
LABEL_264:
            v3 = 0;
          }
          if (!v4)
            break;
          goto LABEL_317;
        case 100663325:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("xid"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("xid"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663326:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("flavor"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("flavor"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663327:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("matched_status"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("matched_status"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663328:
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("redownloaded_status"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_316;
          objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("redownloaded_status"));
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_315;
        case 100663346:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("is_playlist_only"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v3 = &unk_1E5BAB250;
            goto LABEL_317;
          }
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("is_playlist_only"));
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          if (v5)
          {
            v24 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("is_playlist_only"));
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "numberWithBool:", objc_msgSend(v17, "BOOLValue") ^ 1);
            v18 = objc_claimAutoreleasedReturnValue();
            goto LABEL_179;
          }
          v3 = &unk_1E5BAB250;
          break;
        default:
          goto LABEL_320;
      }
LABEL_344:

    }
    else
    {
      if ((int)a2 > 150994945)
      {
        switch((int)a2)
        {
          case 167772161:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("artist"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("artist"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772162:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("series_name"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("series_name"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772163:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("album_artist"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("album_artist"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772164:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("album"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("album"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772165:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("composer"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("composer"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772166:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("genre"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("genre"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772167:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("sort_artist"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("sort_artist"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772168:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("sort_series_name"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("sort_series_name"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772169:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("sort_album_artist"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("sort_album_artist"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772170:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("sort_album"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("sort_album"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772171:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("sort_composer"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("sort_composer"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772172:
            goto LABEL_320;
          case 167772173:
            objc_msgSend(*((id *)this + 10), "objectForKey:", CFSTR("location"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "objectForKey:", CFSTR("location"));
            v5 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_89;
            objc_msgSend(*((id *)this + 10), "objectForKey:", CFSTR("location"));
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "objectForKey:", CFSTR("location"));
            v14 = objc_claimAutoreleasedReturnValue();

            v3 = (id)v14;
            goto LABEL_344;
          case 167772174:
          case 167772175:
          case 167772176:
          case 167772177:
          case 167772178:
          case 167772179:
          case 167772181:
          case 167772184:
          case 167772187:
          case 167772188:
            return v3;
          case 167772180:
            objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("artist_id"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("artist_id"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772182:
            objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("album_liked_state"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("album_liked_state"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772183:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("artwork_cache_id"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            v15 = objc_opt_isKindOfClass();
            if ((v15 & 1) != 0)
            {
              objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("artwork_cache_id"));
              v16 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v16 = 0;
            }
            objc_msgSend(v16, "stringValue");
            v3 = (id)objc_claimAutoreleasedReturnValue();
            if ((v15 & 1) != 0)

            goto LABEL_317;
          case 167772185:
            objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("album_rating"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("album_rating"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 167772186:
            objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("album_rating_is_derived"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("album_rating_is_derived"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          default:
            if ((a2 - 150994947) < 3)
              return v3;
            if ((_DWORD)a2 != 150994946)
              goto LABEL_320;
            objc_msgSend(*((id *)this + 18), "objectForKey:", CFSTR("checksum"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            v3 = &unk_1E5BAB238;
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_317;
            objc_msgSend(*((id *)this + 18), "objectForKey:", CFSTR("checksum"));
            v10 = objc_claimAutoreleasedReturnValue();
            v11 = (void *)v10;
            if (v10)
              v12 = (void *)v10;
            else
              v12 = &unk_1E5BAB238;
            break;
        }
      }
      else
      {
        switch((int)a2)
        {
          case 117440513:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("quality"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            v5 = v4;
            if (!v4)
            {
              objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("is_hd"));
              v5 = (void *)objc_claimAutoreleasedReturnValue();
            }
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_264;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("quality"));
            v6 = (void *)objc_claimAutoreleasedReturnValue();
            if (v6)
              goto LABEL_159;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("is_hd"));
            v7 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_342;
          case 117440514:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("is_rental"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("is_rental"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440515:
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("has_chapter_data"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("has_chapter_data"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440516:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("season_number"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("season_number"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440517:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("episode_id"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("episode_id"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440518:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("network_name"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("network_name"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440519:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("extended_content_rating"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("extended_content_rating"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440520:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("movie_info"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("movie_info"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440521:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("has_alternate_audio"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("has_alternate_audio"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440522:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("has_subtitles"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("has_subtitles"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440523:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("audio_language"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("audio_language"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440524:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("audio_track_index"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("audio_track_index"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440525:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("audio_track_id"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("audio_track_id"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440526:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("subtitle_language"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("subtitle_language"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440527:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("subtitle_track_index"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("subtitle_track_index"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440528:
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("rental_duration"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("rental_duration"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440529:
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("rental_playback_duration"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("rental_playback_duration"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440530:
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("rental_playback_date_started"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v4)
              goto LABEL_316;
            v19 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("rental_playback_date_started"));
            v5 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();
            if ((isKindOfClass & 1) != 0)
            {
              objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("rental_playback_date_started"));
              v21 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v21 = 0;
            }
            goto LABEL_338;
          case 117440531:
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("rental_date_started"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v4)
              goto LABEL_316;
            v19 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("rental_date_started"));
            v5 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();
            if ((isKindOfClass & 1) != 0)
            {
              objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("rental_date_started"));
              v21 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v21 = 0;
            }
            goto LABEL_338;
          case 117440532:
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("is_demo"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("is_demo"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440533:
          case 117440534:
          case 117440539:
          case 117440542:
          case 117440543:
          case 117440544:
          case 117440545:
          case 117440546:
          case 117440547:
          case 117440548:
          case 117440549:
          case 117440550:
            return v3;
          case 117440535:
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("show_sort_type"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("show_sort_type"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440536:
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("episode_type"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 15), "objectForKey:", CFSTR("episode_type"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440537:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("episode_type_display_name"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("episode_type_display_name"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440538:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("episode_sub_sort_order"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("episode_sub_sort_order"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          case 117440540:
            goto LABEL_16;
          case 117440541:
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("color_capability"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_316;
            objc_msgSend(*((id *)this + 17), "objectForKey:", CFSTR("color_capability"));
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_315;
          default:
            if ((_DWORD)a2 == 134217729)
            {
              ML3ITunesSyncTrackImportItem::_getCurrentTrackChapterData((id *)this);
              v8 = objc_claimAutoreleasedReturnValue();
              goto LABEL_321;
            }
            if ((_DWORD)a2 != 150994945)
              goto LABEL_320;
            objc_msgSend(*((id *)this + 18), "objectForKey:", CFSTR("checksum"));
            v4 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            v3 = &unk_1E5BAB238;
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_317;
            objc_msgSend(*((id *)this + 18), "objectForKey:", CFSTR("checksum"));
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            if (v11)
              v12 = 0;
            else
              v12 = &unk_1E5BAB238;
            break;
        }
      }
      v3 = v12;

    }
LABEL_317:

  }
  return v3;
}

void sub_1AC2B6B20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  if (!v1)

  _Unwind_Resume(a1);
}

id _MLMediaTypeFromTrackProperiesDictionary(NSDictionary *a1)
{
  NSDictionary *v1;
  void *v2;
  char isKindOfClass;
  void *v4;
  int v5;
  void *v6;
  char v7;
  void *v8;
  int v9;
  int v10;
  NSObject *v11;
  void *v12;
  char v13;
  void *v14;
  int v15;
  void *v16;
  char v17;
  void *v18;
  int v19;
  void *v20;
  char v21;
  void *v22;
  int v23;
  NSObject *v24;
  void *v25;
  char v26;
  void *v27;
  int v28;
  void *v29;
  char v30;
  void *v31;
  int v32;
  void *v33;
  char v34;
  void *v35;
  int v36;
  void *v37;
  char v38;
  void *v39;
  int v40;
  int v41;
  int v42;
  void *v43;
  uint8_t v45[16];
  uint8_t buf[16];

  v1 = a1;
  -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_podcast"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_podcast"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  v5 = objc_msgSend(v4, "BOOLValue");
  if ((isKindOfClass & 1) != 0)

  -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_song"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v7 = objc_opt_isKindOfClass();
  if ((v7 & 1) != 0)
  {
    -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_song"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }
  v9 = objc_msgSend(v8, "BOOLValue");
  if ((v7 & 1) != 0)

  if (v9)
    v10 = 8;
  else
    v10 = 0;
  if ((v9 & v5) == 1)
  {
    v11 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_DEFAULT, "item has both is_podcast and is_song modifiers. Ignoring is_song and treating item as a podcast", buf, 2u);
    }

    v10 = 0;
  }
  -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_audio_book"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v13 = objc_opt_isKindOfClass();
  if ((v13 & 1) != 0)
  {
    -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_audio_book"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v14 = 0;
  }
  v15 = objc_msgSend(v14, "BOOLValue");
  if ((v13 & 1) != 0)

  if (v15)
    v10 |= 2u;
  -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_music_video"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v17 = objc_opt_isKindOfClass();
  if ((v17 & 1) != 0)
  {
    -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_music_video"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v18 = 0;
  }
  v19 = objc_msgSend(v18, "BOOLValue");
  if ((v17 & 1) != 0)

  if (v19)
    v10 |= 0x408u;
  -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_movie"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v21 = objc_opt_isKindOfClass();
  if ((v21 & 1) != 0)
  {
    -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_movie"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v22 = 0;
  }
  v23 = objc_msgSend(v22, "BOOLValue");
  if ((v21 & 1) != 0)

  if (v23)
  {
    if (v5)
    {
      v24 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v45 = 0;
        _os_log_impl(&dword_1AC149000, v24, OS_LOG_TYPE_DEFAULT, "item has both is_podcast and is_movie modifiers. Treating media_type as MLMediaTypeVideoPodcast | MLMediaTypePodcast", v45, 2u);
      }

      v10 |= 0x100u;
    }
    else
    {
      v10 |= 0x800u;
    }
  }
  -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_tv_show"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v26 = objc_opt_isKindOfClass();
  if ((v26 & 1) != 0)
  {
    -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_tv_show"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v27 = 0;
  }
  v28 = objc_msgSend(v27, "BOOLValue");
  if ((v26 & 1) != 0)

  if (v28)
    v10 |= 0x200u;
  -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_home_video"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v30 = objc_opt_isKindOfClass();
  if ((v30 & 1) != 0)
  {
    -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_home_video"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v31 = 0;
  }
  v32 = objc_msgSend(v31, "BOOLValue");
  if ((v30 & 1) != 0)

  if (v32)
    v10 |= 0x2000u;
  -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_voice_memo"));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v34 = objc_opt_isKindOfClass();
  if ((v34 & 1) != 0)
  {
    -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_voice_memo"));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v35 = 0;
  }
  v36 = objc_msgSend(v35, "BOOLValue");
  if ((v34 & 1) != 0)

  if (v36)
    v10 |= 0x10u;
  -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_itunes_u"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v38 = objc_opt_isKindOfClass();
  if ((v38 & 1) != 0)
  {
    -[NSDictionary objectForKey:](v1, "objectForKey:", CFSTR("is_itunes_u"));
    v39 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v39 = 0;
  }
  v40 = objc_msgSend(v39, "BOOLValue");
  if ((v38 & 1) != 0)

  v41 = v10 | 0x20;
  if (!v40)
    v41 = v10;
  if (v5)
    v42 = v41 | 4;
  else
    v42 = v41;
  if (v42)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v43 = 0;
  }

  return v43;
}

void sub_1AC2B7344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  char v3;
  void *v4;

  if ((v3 & 1) != 0)

  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::_getCurrentTrackDiscNumber(id *this)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;

  objc_msgSend(this[12], "objectForKey:", CFSTR("disc_number"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(this[12], "objectForKey:", CFSTR("disc_number"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
      return v3;
  }
  else
  {

  }
  objc_msgSend(this[10], "objectForKey:", CFSTR("operation"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("insert_track"));

  if (v5)
    v3 = &unk_1E5BAB250;
  else
    v3 = 0;
  return v3;
}

void sub_1AC2B7474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::_getCurrentTrackIsAudibleAudioBook(id *this)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(this[11], "objectForKey:", CFSTR("audio_format"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(this[11], "objectForKey:", CFSTR("audio_format"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v3)
    {
      v4 = 0;
      return v4;
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (unint64_t)(objc_msgSend(v3, "integerValue") - 401) < 6);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v3;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1AC2B7544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::_getCurrentTrackContentRating(id *this)
{
  void *v2;
  void *v3;
  char v4;
  void *v5;
  void *v6;

  objc_msgSend(this[12], "objectForKey:", CFSTR("grouping"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "lowercaseString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("explicit"));

  if ((v4 & 1) != 0)
  {
    v5 = &unk_1E5BAB268;
  }
  else
  {
    objc_msgSend(this[12], "objectForKey:", CFSTR("content_rating"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(this[12], "objectForKey:", CFSTR("content_rating"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = 0;
    }

  }
  return v5;
}

void sub_1AC2B762C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::_getCurrentTrackRatingLevel(id *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  objc_msgSend(this[12], "objectForKey:", CFSTR("content_rating_level"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(this[12], "objectForKey:", CFSTR("content_rating_level"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  objc_msgSend(this[12], "objectForKey:", CFSTR("grouping"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "lowercaseString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isEqualToString:", CFSTR("explicit"));

  if (v6)
  {
    if (objc_msgSend(v3, "longLongValue") >= 1000)
      v7 = objc_msgSend(v3, "longLongValue");
    else
      v7 = 1000;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v7);
    v8 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v8;
  }
  return v3;
}

void sub_1AC2B7750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::_getCurrentTrackLocationKind(id *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(this[10], "objectForKey:", CFSTR("location"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", CFSTR("kind"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(this[10], "objectForKey:", CFSTR("location"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKey:", CFSTR("kind"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      v6 = 0;
      return v6;
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ML3KindForString(v5));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v5;
  }
  else
  {

    v6 = 0;
  }

  return v6;
}

void sub_1AC2B7878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id ML3ITunesSyncTrackImportItem::_getCurrentTrackChapterData(id *this)
{
  void *v2;
  void *v3;

  objc_msgSend(this[10], "objectForKey:", CFSTR("chapter_info"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3Track flattenedChapterDataFromSyncInfoDictionaries:trackPersistentID:](ML3Track, "flattenedChapterDataFromSyncInfoDictionaries:trackPersistentID:", v2, this[9]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1AC2B7908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ML3ITunesSyncContainerImportItem::~ML3ITunesSyncContainerImportItem(ML3ITunesSyncContainerImportItem *this)
{
  ML3ITunesSyncContainerImportItem::~ML3ITunesSyncContainerImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E5B4FDD8;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }

  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

void ML3ITunesSyncContainerImportItem::getDataValue(ML3ITunesSyncContainerImportItem *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  *a2 = 0;
  a2[1] = 0;
  ML3ITunesSyncImportItem::getDataValue(this, &v6);
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a2, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1AC2B7A38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL ML3ITunesSyncContainerImportItem::hasValue(id *this, int a2)
{
  void *v2;

  if (a2 == 218103812)
    objc_msgSend(this[8], "objectForKey:", CFSTR("item_to_container"));
  else
    (*((void (**)(id *))*this + 27))(this);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2 != 0;
}

void ML3ITunesSyncContainerImportItem::getImportItemArrayValue(id *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  void *v28;
  id obj;
  id obja;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int64x2_t v37;
  char *v38;
  _QWORD *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((a2 - 218103813) >= 2)
  {
    if ((_DWORD)a2 == 218103812)
    {
      objc_msgSend(this[8], "objectForKey:", CFSTR("item_to_container"));
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      obj = (id)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
      if (v5)
      {
        v6 = *(_QWORD *)v33;
        do
        {
          for (i = 0; i != v5; ++i)
          {
            if (*(_QWORD *)v33 != v6)
              objc_enumerationMutation(obj);
            v8 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
            v9 = operator new();
            v10 = objc_msgSend(v8, "longLongValue");
            *(_WORD *)(v9 + 16) = 256;
            *(_BYTE *)(v9 + 18) = 1;
            *(_OWORD *)(v9 + 24) = 0u;
            *(_OWORD *)(v9 + 40) = 0u;
            *(_DWORD *)(v9 + 56) = 1065353216;
            *(_QWORD *)v9 = &off_1E5B50F50;
            *(_QWORD *)(v9 + 8) = 0;
            *(_QWORD *)(v9 + 64) = v10;
            *(_QWORD *)&v31 = v9;
            v11 = (_QWORD *)operator new();
            *v11 = &off_1E5B52418;
            v11[1] = 0;
            v11[2] = 0;
            v11[3] = v9;
            *((_QWORD *)&v31 + 1) = v11;
            v13 = a3[1];
            v12 = (unint64_t)a3[2];
            if ((unint64_t)v13 >= v12)
            {
              v15 = (v13 - *a3) >> 4;
              if ((unint64_t)(v15 + 1) >> 60)
                std::vector<long long>::__throw_length_error[abi:ne180100]();
              v16 = v12 - (_QWORD)*a3;
              v17 = v16 >> 3;
              if (v16 >> 3 <= (unint64_t)(v15 + 1))
                v17 = v15 + 1;
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
                v18 = 0xFFFFFFFFFFFFFFFLL;
              else
                v18 = v17;
              v39 = a3 + 2;
              v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v18);
              v21 = &v19[16 * v15];
              *(_OWORD *)v21 = v31;
              v23 = *a3;
              v22 = a3[1];
              if (v22 == *a3)
              {
                v26 = vdupq_n_s64((unint64_t)v22);
                v24 = &v19[16 * v15];
              }
              else
              {
                v24 = &v19[16 * v15];
                do
                {
                  v25 = *((_OWORD *)v22 - 1);
                  v22 -= 16;
                  *((_OWORD *)v24 - 1) = v25;
                  v24 -= 16;
                  *(_QWORD *)v22 = 0;
                  *((_QWORD *)v22 + 1) = 0;
                }
                while (v22 != v23);
                v26 = *(int64x2_t *)a3;
              }
              v14 = v21 + 16;
              *a3 = v24;
              a3[1] = v21 + 16;
              v37 = v26;
              v27 = a3[2];
              a3[2] = &v19[16 * v20];
              v38 = v27;
              v36 = v26.i64[0];
              std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)&v36);
            }
            else
            {
              *(_OWORD *)v13 = v31;
              v14 = v13 + 16;
            }
            a3[1] = v14;
          }
          v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
        }
        while (v5);
      }

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      obja = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual std::vector<std::shared_ptr<ML3ImportItem>> ML3ITunesSyncContainerImportItem::getImportItemArrayValue(MLImportPropertyKey) const");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obja, "handleFailureInFunction:file:lineNumber:description:", v28, CFSTR("ML3ITunesSyncImportItem.mm"), 742, CFSTR("getImportItemArrayValue called with unknown property key %x"), a2);

    }
  }
}

void sub_1AC2B7DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13)
{
  void *v13;

  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void ML3ITunesSyncContainerImportItem::getDescription(id *this)
{
  void *v1;
  void *v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;
  void *v14[2];
  unsigned __int8 v15;
  char v16;

  objc_msgSend(this[12], "objectForKey:", CFSTR("name"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
    v3 = (char *)objc_msgSend(objc_retainAutorelease(v1), "UTF8String");
  else
    v3 = "<null>";
  std::string::basic_string[abi:ne180100]<0>(v14, v3);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"<MLDITunesSyncPlaylistImportItem ", 33);
  *(_DWORD *)((char *)&v11[1] + *(_QWORD *)(v11[0] - 24)) = *(_DWORD *)((_BYTE *)&v11[1] + *(_QWORD *)(v11[0] - 24)) & 0xFFFFFFB5 | 8;
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 8) & 0xFFFFFFB5 | 2;
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", name=", 7);
  if ((v15 & 0x80u) == 0)
    v8 = v14;
  else
    v8 = (void **)v14[0];
  if ((v15 & 0x80u) == 0)
    v9 = v15;
  else
    v9 = (uint64_t)v14[1];
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  v16 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v16, 1);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF43C6FC](&v13);
  if ((char)v15 < 0)
    operator delete(v14[0]);

}

void sub_1AC2B8054(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 57) < 0)
    operator delete(*(void **)(v2 - 80));

  _Unwind_Resume(a1);
}

id ML3ITunesSyncContainerImportItem::getDeduplicationPredicates(ML3ITunesSyncContainerImportItem *this)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((_QWORD *)this + 11))
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v3);

  }
  return v2;
}

void sub_1AC2B80FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id ML3ITunesSyncContainerImportItem::_getFoundationValue(ML3ITunesSyncContainerImportItem *this, uint64_t a2)
{
  void *v3;
  void *v4;
  const __CFString *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  char isKindOfClass;
  void *v11;
  _BOOL4 isMasterDevicePurchasedPlaylist;
  void *v13;

  if ((a2 - 184549376) >> 24 > 2)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    if ((int)a2 <= 201326592)
    {
      switch((int)a2)
      {
        case 184549377:
        case 184549378:
          v4 = (void *)*((_QWORD *)this + 8);
          v5 = CFSTR("pid");
          goto LABEL_58;
        case 184549379:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("distinguished_kind");
          goto LABEL_58;
        case 184549380:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("date_created"));
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v7)
            goto LABEL_33;
          v8 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("date_created"));
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("date_created"));
            v11 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v11 = 0;
          }
          goto LABEL_64;
        case 184549381:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("date_modified"));
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v7)
            goto LABEL_33;
          v8 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("date_modified"));
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("date_modified"));
            v11 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v11 = 0;
          }
LABEL_64:
          objc_msgSend(v11, "timeIntervalSinceReferenceDate");
          objc_msgSend(v8, "numberWithDouble:");
          v3 = (void *)objc_claimAutoreleasedReturnValue();
          if ((isKindOfClass & 1) != 0)

          goto LABEL_66;
        case 184549382:
        case 184549383:
        case 184549385:
        case 184549389:
        case 184549390:
        case 184549393:
        case 184549408:
        case 184549412:
        case 184549414:
        case 184549416:
        case 184549417:
        case 184549418:
        case 184549419:
        case 184549420:
        case 184549422:
        case 184549423:
        case 184549424:
        case 184549425:
        case 184549426:
        case 184549427:
        case 184549428:
        case 184549429:
        case 184549430:
        case 184549431:
        case 184549432:
        case 184549434:
        case 184549439:
        case 184549440:
        case 184549441:
        case 184549442:
        case 184549447:
        case 184549448:
        case 184549449:
        case 184549451:
        case 184549452:
        case 184549453:
        case 184549454:
        case 184549455:
        case 184549456:
        case 184549457:
        case 184549458:
        case 184549459:
        case 184549460:
        case 184549461:
        case 184549462:
        case 184549463:
        case 184549464:
        case 184549465:
        case 184549466:
        case 184549467:
        case 184549468:
          return v3;
        case 184549384:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("name");
          goto LABEL_58;
        case 184549386:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("description_long");
          goto LABEL_58;
        case 184549387:
          goto LABEL_38;
        case 184549388:
          v3 = (void *)MEMORY[0x1E0C9AAA0];
          return v3;
        case 184549391:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("liked_state");
          goto LABEL_58;
        case 184549392:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("parent_pid");
          goto LABEL_58;
        case 184549394:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("workout_template_id");
          goto LABEL_58;
        case 184549395:
          if (*((_BYTE *)this + 80))
          {
LABEL_38:
            v3 = (void *)MEMORY[0x1E0C9AAB0];
            return v3;
          }
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("is_hidden");
LABEL_58:
          objc_msgSend(v4, "objectForKey:", v5);
          v6 = (id)objc_claimAutoreleasedReturnValue();
          break;
        case 184549396:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("smart_evaluation_order");
          goto LABEL_58;
        case 184549397:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("smart_is_folder");
          goto LABEL_58;
        case 184549398:
          objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("smart_is_dynamic"));
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          if (v7)
          {
            objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("smart_is_dynamic"));
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v9, "BOOLValue"))
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", ML3ITunesSyncContainerImportItem::_canEvaluateSmartCriteria((id *)this));
              v3 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v3 = (void *)MEMORY[0x1E0C9AAA0];
            }
LABEL_66:

          }
          else
          {
LABEL_33:
            v3 = 0;
          }

          return v3;
        case 184549399:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("smart_is_filtered");
          goto LABEL_58;
        case 184549400:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("smart_is_genius");
          goto LABEL_58;
        case 184549401:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("smart_enabled_only");
          goto LABEL_58;
        case 184549402:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("smart_is_limited");
          goto LABEL_58;
        case 184549403:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("smart_limit_kind");
          goto LABEL_58;
        case 184549404:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("smart_limit_order");
          goto LABEL_58;
        case 184549405:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("smart_limit_value");
          goto LABEL_58;
        case 184549406:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("smart_reverse_limit_order");
          goto LABEL_58;
        case 184549407:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("smart_criteria");
          goto LABEL_58;
        case 184549409:
          v4 = (void *)*((_QWORD *)this + 13);
          v5 = CFSTR("play_order");
          goto LABEL_58;
        case 184549410:
          v4 = (void *)*((_QWORD *)this + 13);
          v5 = CFSTR("is_reversed");
          goto LABEL_58;
        case 184549413:
          v3 = &unk_1E5BAB268;
          return v3;
        case 184549415:
          isMasterDevicePurchasedPlaylist = ML3ITunesSyncContainerImportItem::_isMasterDevicePurchasedPlaylist((id *)this);
          v13 = (void *)MEMORY[0x1E0C9AAB0];
          if (!isMasterDevicePurchasedPlaylist)
            v13 = 0;
          v6 = v13;
          goto LABEL_59;
        case 184549435:
          v4 = (void *)*((_QWORD *)this + 13);
          v5 = CFSTR("album_field_order");
          goto LABEL_58;
        case 184549436:
          v4 = (void *)*((_QWORD *)this + 13);
          v5 = CFSTR("repeat_mode");
          goto LABEL_58;
        case 184549437:
          v4 = (void *)*((_QWORD *)this + 13);
          v5 = CFSTR("shuffle_items");
          goto LABEL_58;
        case 184549438:
          v4 = (void *)*((_QWORD *)this + 13);
          v5 = CFSTR("has_been_shuffled");
          goto LABEL_58;
        case 184549443:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("external_vendor_identifier");
          goto LABEL_58;
        case 184549444:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("external_vendor_display_name");
          goto LABEL_58;
        case 184549445:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("external_tag");
          goto LABEL_58;
        case 184549446:
          v4 = (void *)*((_QWORD *)this + 12);
          v5 = CFSTR("is_external_vendor_playlist");
          goto LABEL_58;
        case 184549450:
          ML3ITunesSyncContainerImportItem::_getContainerArtworkCacheId((id *)this);
          v6 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_59;
        default:
          goto LABEL_10;
      }
      goto LABEL_59;
    }
    if ((a2 - 218103810) > 4 || (_DWORD)a2 == 218103812)
    {
      if ((_DWORD)a2 == 201326593)
      {
        ML3ITunesSyncContainerImportItem::_getGeniusSeedItemPid(*((ML3ITunesSyncContainerImportItem **)this + 12));
        v6 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_59;
      }
      if ((_DWORD)a2 != 201326594)
      {
LABEL_10:
        ML3ITunesSyncImportItem::_getFoundationValue(this, a2);
        v6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_59:
        v3 = v6;
      }
    }
  }
  return v3;
}

void sub_1AC2B85E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ML3ITunesSyncContainerImportItem::_canEvaluateSmartCriteria(id *this)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!(*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 184549397))
  {
    objc_msgSend(this[12], "objectForKey:", CFSTR("smart_criteria"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      if (+[ML3Container smartCriteriaCanBeEvaluated:](ML3Container, "smartCriteriaCanBeEvaluated:", v3))
      {
        v2 = 1;
LABEL_10:

        return v2;
      }
      v4 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v6 = 138543362;
        v7 = v3;
        _os_log_impl(&dword_1AC149000, v4, OS_LOG_TYPE_ERROR, "Disabling smart evaluation for unsupported smart playlist type (%{public}@)", (uint8_t *)&v6, 0xCu);
      }

    }
    v2 = 0;
    goto LABEL_10;
  }
  return 0;
}

void sub_1AC2B8730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ML3ITunesSyncContainerImportItem::_isMasterDevicePurchasedPlaylist(id *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(this[12], "objectForKey:", CFSTR("distinguished_kind"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "integerValue");

  if (v3 != 20)
    return 0;
  objc_msgSend(this[12], "objectForKey:", CFSTR("source_device_guid"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "longLongValue");

  if (!v5)
    return 1;
  if (ML3ITunesSyncContainerImportItem::_deviceITunesComparableGUID(void)const::onceToken != -1)
    dispatch_once(&ML3ITunesSyncContainerImportItem::_deviceITunesComparableGUID(void)const::onceToken, &__block_literal_global_8133);
  return v5 == ML3ITunesSyncContainerImportItem::_deviceITunesComparableGUID(void)const::iTunesComparableGUID;
}

void sub_1AC2B8804(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CFString *ML3ITunesSyncContainerImportItem::_getContainerArtworkCacheId(id *this)
{
  void *v2;
  void *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;

  objc_msgSend(this[12], "objectForKey:", CFSTR("artwork_cache_id"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    v3 = 0;
    goto LABEL_6;
  }
  objc_msgSend(this[12], "objectForKey:", CFSTR("artwork_cache_id"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
LABEL_6:
    v5 = 0;
    goto LABEL_12;
  }
  if (objc_msgSend(v3, "integerValue"))
  {
    objc_msgSend(v3, "stringValue");
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (*((_BYTE *)this + 16))
      v6 = &stru_1E5B66908;
    else
      v6 = 0;
    v4 = v6;
  }
  v5 = v4;
LABEL_12:

  return v5;
}

void sub_1AC2B88E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ML3ITunesSyncContainerImportItem::_getGeniusSeedItemPid(ML3ITunesSyncContainerImportItem *this)
{
  void *v1;
  void *v2;

  -[ML3ITunesSyncContainerImportItem objectForKey:](this, "objectForKey:", CFSTR("genius_seed_tracks"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_msgSend(v1, "firstObject");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_1AC2B8968(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZNK32ML3ITunesSyncContainerImportItem27_deviceITunesComparableGUIDEv_block_invoke()
{
  id v0;
  id v1;

  v1 = (id)MGCopyAnswer();
  if ((unint64_t)objc_msgSend(v1, "length") >= 0x10)
  {
    objc_msgSend(v1, "substringFromIndex:", objc_msgSend(v1, "length") - 16);
    v0 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    ML3ITunesSyncContainerImportItem::_deviceITunesComparableGUID(void)const::iTunesComparableGUID = strtoull((const char *)objc_msgSend(v0, "UTF8String"), 0, 16);

  }
}

void sub_1AC2B89F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3ITunesSyncContainerTrackItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncContainerTrackItemImportItem>,std::allocator<ML3ITunesSyncContainerTrackItemImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ITunesSyncContainerTrackItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncContainerTrackItemImportItem>,std::allocator<ML3ITunesSyncContainerTrackItemImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ITunesSyncContainerTrackItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncContainerTrackItemImportItem>,std::allocator<ML3ITunesSyncContainerTrackItemImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_41ML3ITunesSyncContainerTrackItemImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ML3ITunesSyncContainerTrackItemImportItem::~ML3ITunesSyncContainerTrackItemImportItem(ML3ITunesSyncContainerTrackItemImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

void ML3ITunesSyncContainerTrackItemImportItem::getStringValue(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *v5;
  id v6;

  *(_QWORD *)a2 = off_1E5B4D010;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if ((a1 - 234881028) > 6 || ((1 << (a1 - 4)) & 0x43) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual ML3ImportStringValue ML3ITunesSyncContainerTrackItemImportItem::getStringValue(MLImportPropertyKey) const");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("ML3ITunesSyncImportItem.mm"), 965, CFSTR("ML3ITunesSyncContainerTrackItemImportItem::getStringValue called with unknown property key %x"), a1);

  }
}

void sub_1AC2B8BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _QWORD *v10;
  void *v11;
  uint64_t v12;

  *v10 = v12;
  _Unwind_Resume(a1);
}

uint64_t ML3ITunesSyncContainerTrackItemImportItem::getIntegerValue(ML3ITunesSyncContainerTrackItemImportItem *this, uint64_t a2)
{
  void *v4;
  void *v5;

  if ((_DWORD)a2 == 234881030)
    return *((_QWORD *)this + 8);
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual int64_t ML3ITunesSyncContainerTrackItemImportItem::getIntegerValue(MLImportPropertyKey) const");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("ML3ITunesSyncImportItem.mm"), 980, CFSTR("ML3ITunesSyncContainerTrackItemImportItem::getIntegerValue called with unknown property key %x"), a2);

  return 0;
}

void sub_1AC2B8CB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ML3ITunesSyncContainerTrackItemImportItem::hasValue(ML3ITunesSyncContainerTrackItemImportItem *this, int a2)
{
  return a2 == 234881030;
}

uint64_t ML3ITunesSyncContainerTrackItemImportItem::getDescription(ML3ITunesSyncContainerTrackItemImportItem *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v5[11];
  char v6;
  uint64_t v7;
  char v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"<ML3ITunesSyncContainerTrackItemImportItem ", 43);
  *(_DWORD *)((char *)&v5[1] + *(_QWORD *)(v5[0] - 24)) = *(_DWORD *)((_BYTE *)&v5[1] + *(_QWORD *)(v5[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (_QWORD *)std::ostream::operator<<();
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  v3 = (_QWORD *)std::ostream::operator<<();
  v8 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v8, 1);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v5[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v7);
}

void sub_1AC2B8E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ML3ITunesSyncAlbumImportItem::~ML3ITunesSyncAlbumImportItem(id *this)
{
  ML3ITunesSyncAlbumImportItem::~ML3ITunesSyncAlbumImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

BOOL ML3ITunesSyncAlbumImportItem::hasValue(ML3ITunesSyncAlbumImportItem *this)
{
  void *v1;
  _BOOL8 v2;

  (*(void (**)(ML3ITunesSyncAlbumImportItem *))(*(_QWORD *)this + 216))(this);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1 != 0;

  return v2;
}

uint64_t ML3ITunesSyncAlbumImportItem::getDescription(ML3ITunesSyncAlbumImportItem *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v5[11];
  char v6;
  uint64_t v7;
  char v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"<ML3ITunesSyncAlbumImportItem ", 30);
  *(_DWORD *)((char *)&v5[1] + *(_QWORD *)(v5[0] - 24)) = *(_DWORD *)((_BYTE *)&v5[1] + *(_QWORD *)(v5[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (_QWORD *)std::ostream::operator<<();
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  v3 = (_QWORD *)std::ostream::operator<<();
  v8 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v8, 1);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v5[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v7);
}

void sub_1AC2B9030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id ML3ITunesSyncAlbumImportItem::getDeduplicationPredicates(ML3ITunesSyncAlbumImportItem *this)
{
  uint64_t v2;
  uint64_t v3;
  std::string::size_type size;
  void *v5;
  void *v6;
  std::string::size_type v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  std::string *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v44;
  id v45;
  void *v46;
  void *v47;
  std::string v48;
  std::string v49;
  _QWORD v50[2];
  std::string __p;
  std::string v52;
  _QWORD v53[2];
  _QWORD v54[2];
  _QWORD v55[4];
  _QWORD v56[6];
  _QWORD v57[8];

  v57[6] = *MEMORY[0x1E0C80C00];
  v45 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v2 = (*(uint64_t (**)(ML3ITunesSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212696);
  v3 = (*(uint64_t (**)(ML3ITunesSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212691);
  v44 = (*(uint64_t (**)(ML3ITunesSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212683);
  (*(void (**)(_QWORD *__return_ptr, ML3ITunesSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v50, this, 285212673);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v52, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v50[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v52 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3ITunesSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v50, this, 285212699);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v49, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v50[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v49 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3ITunesSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v50, this, 285212682);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v48, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v50[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v48 = __p;
  }
  size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v52.__r_.__value_.__l.__size_;
  if (size)
  {
    v5 = (void *)*((_QWORD *)this + 17);
    ML3CPPBridgeString((const UInt8 *)&v52, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "groupingKeyForString:", v6);
    v47 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v47 = 0;
  }
  v7 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = v49.__r_.__value_.__l.__size_;
  if (v7)
  {
    v8 = (void *)*((_QWORD *)this + 17);
    ML3CPPBridgeString((const UInt8 *)&v49, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "groupingKeyForString:", v9);
    v46 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v46 = 0;
  }
  if (v3)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), v3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "addObject:", v10);

  }
  if (v2)
  {
    if (objc_msgSend(v47, "length") && objc_msgSend(v46, "length"))
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_id"), v2);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v57[0] = v11;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", CFSTR("cloud_library_id"), &stru_1E5B66908, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v57[1] = v12;
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("album_artist.grouping_key"), v46);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v57[2] = v13;
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v47);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v57[3] = v14;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), v44);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v57[4] = v15;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), 0);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v57[5] = v16;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v57, 6);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v45, "addObject:", v18);
    }
    else
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_id"), v2);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v56[0] = v19;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", CFSTR("cloud_library_id"), &stru_1E5B66908, 1);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v56[1] = v20;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("album_artist.grouping_key"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v56[2] = v21;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("grouping_key"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v56[3] = v22;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), v44);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v56[4] = v23;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v56[5] = v24;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v56, 6);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v25);
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v45, "addObject:", v18);
    }

  }
  if (objc_msgSend(v47, "length") && objc_msgSend(v46, "length"))
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("album_artist.grouping_key"), v46);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v55[0] = v26;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v47);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v55[1] = v27;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), v44);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v55[2] = v28;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), 0);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v55[3] = v29;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v55, 4);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v45, "addObject:", v31);
  }
  if (objc_msgSend(v47, "length"))
  {
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v48.__r_.__value_.__l.__size_)
      {
        v32 = (std::string *)v48.__r_.__value_.__r.__words[0];
        goto LABEL_40;
      }
    }
    else if (*((_BYTE *)&v48.__r_.__value_.__s + 23))
    {
      v32 = &v48;
LABEL_40:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("feed_url"), v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v54[0] = v34;
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v47);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v54[1] = v35;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v54, 2);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v45, "addObject:", v37);
    }
  }
  v38 = (*(uint64_t (**)(ML3ITunesSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777217);
  if ((MLMediaTypeByStandardizingMediaType(v38) & 0x10042) != 0 && !v47 && v46)
  {
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("grouping_key"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v53[0] = v39;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("album_artist.grouping_key"), v46);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v53[1] = v40;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v53, 2);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v45, "addObject:", v42);
  }

  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  return v45;
}

void sub_1AC2B98B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;

  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a39 < 0)
    operator delete(a34);

  _Unwind_Resume(a1);
}

uint64_t ML3ITunesSyncAlbumImportItem::sortPropertyKeyForPropertyKey(ML3ITunesSyncAlbumImportItem *this, int a2)
{
  if (a2 == 285212673)
    return 285212674;
  else
    return 0;
}

uint64_t ML3ITunesSyncAlbumImportItem::propertyKeyForSortPropertyKey(ML3ITunesSyncAlbumImportItem *this, int a2)
{
  if (a2 == 285212674)
    return 285212673;
  else
    return 0;
}

id ML3ITunesSyncAlbumImportItem::_getFoundationValue(id *this, int a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _BOOL8 v10;
  BOOL v11;

  v3 = 0;
  if (a2 > 33554461)
  {
    switch(a2)
    {
      case 285212673:
        objc_msgSend(this[12], "objectForKey:", CFSTR("album"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_45;
        objc_msgSend(this[12], "objectForKey:", CFSTR("album"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      case 285212674:
        objc_msgSend(this[12], "objectForKey:", CFSTR("sort_album"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_45;
        objc_msgSend(this[12], "objectForKey:", CFSTR("sort_album"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      case 285212675:
      case 285212676:
      case 285212677:
      case 285212678:
      case 285212682:
      case 285212685:
      case 285212686:
      case 285212687:
      case 285212689:
      case 285212692:
      case 285212693:
      case 285212694:
      case 285212697:
      case 285212698:
        return v3;
      case 285212679:
        objc_msgSend(this[10], "objectForKey:", CFSTR("album_rating"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_45;
        objc_msgSend(this[10], "objectForKey:", CFSTR("album_rating"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      case 285212680:
        objc_msgSend(this[10], "objectForKey:", CFSTR("album_liked_state"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_45;
        objc_msgSend(this[10], "objectForKey:", CFSTR("album_liked_state"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      case 285212681:
        objc_msgSend(this[12], "objectForKey:", CFSTR("is_compilation"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_45;
        objc_msgSend(this[12], "objectForKey:", CFSTR("is_compilation"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      case 285212683:
        objc_msgSend(this[14], "objectForKey:", CFSTR("season_number"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_45;
        objc_msgSend(this[14], "objectForKey:", CFSTR("season_number"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      case 285212684:
        objc_msgSend(this[12], "objectForKey:", CFSTR("year"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_45;
        objc_msgSend(this[12], "objectForKey:", CFSTR("year"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      case 285212688:
        (*((void (**)(id *, uint64_t))*this + 27))(this, 33554462);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id *, uint64_t))*this + 27))(this, 33554451);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        (*((void (**)(id *, uint64_t))*this + 27))(this, 16777248);
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        v8 = (void *)MEMORY[0x1E0CB37E8];
        v9 = objc_msgSend(v4, "length");
        v10 = v9 != 0;
        if (v9)
          v11 = 1;
        else
          v11 = v7 == 0;
        if (!v11)
          v10 = objc_msgSend(v6, "length", v10) != 0;
        objc_msgSend(v8, "numberWithBool:", v10);
        v3 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_46;
      case 285212690:
        objc_msgSend(this[10], "objectForKey:", CFSTR("album_rating_is_derived"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_45;
        objc_msgSend(this[10], "objectForKey:", CFSTR("album_rating_is_derived"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      case 285212691:
        objc_msgSend(this[12], "objectForKey:", CFSTR("album_pid"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_45;
        objc_msgSend(this[12], "objectForKey:", CFSTR("album_pid"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      case 285212695:
        objc_msgSend(this[12], "objectForKey:", CFSTR("album_date_liked"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_45;
        objc_msgSend(this[12], "objectForKey:", CFSTR("album_date_liked"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      case 285212696:
        objc_msgSend(this[13], "objectForKey:", CFSTR("playlist_id"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_45;
        objc_msgSend(this[13], "objectForKey:", CFSTR("playlist_id"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      case 285212699:
        objc_msgSend(this[12], "objectForKey:", CFSTR("album_artist"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_45;
        objc_msgSend(this[12], "objectForKey:", CFSTR("album_artist"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      default:
        if (a2 != 33554462)
          return v3;
        objc_msgSend(this[12], "objectForKey:", CFSTR("work"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_45;
        objc_msgSend(this[12], "objectForKey:", CFSTR("work"));
        v5 = objc_claimAutoreleasedReturnValue();
        break;
    }
    goto LABEL_44;
  }
  switch(a2)
  {
    case 16777217:
      _MLMediaTypeFromTrackProperiesDictionary((NSDictionary *)this[12]);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 16777248:
      objc_msgSend(this[12], "objectForKey:", CFSTR("show_composer"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(this[12], "objectForKey:", CFSTR("show_composer"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_44;
      }
LABEL_45:
      v3 = 0;
      goto LABEL_46;
    case 33554451:
      objc_msgSend(this[12], "objectForKey:", CFSTR("grouping"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(this[12], "objectForKey:", CFSTR("grouping"));
        v5 = objc_claimAutoreleasedReturnValue();
LABEL_44:
        v3 = (void *)v5;
LABEL_46:

        return v3;
      }
      goto LABEL_45;
  }
  return v3;
}

void sub_1AC2BA1E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ML3ITunesSyncArtistImportItem::~ML3ITunesSyncArtistImportItem(id *this)
{
  ML3ITunesSyncArtistImportItem::~ML3ITunesSyncArtistImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

BOOL ML3ITunesSyncArtistImportItem::hasValue(ML3ITunesSyncArtistImportItem *this)
{
  void *v1;
  _BOOL8 v2;

  (*(void (**)(ML3ITunesSyncArtistImportItem *))(*(_QWORD *)this + 216))(this);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1 != 0;

  return v2;
}

uint64_t ML3ITunesSyncArtistImportItem::getDescription(ML3ITunesSyncArtistImportItem *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  std::string *v6;
  std::string::size_type size;
  _QWORD *v8;
  _QWORD *v9;
  std::string *v10;
  std::string::size_type v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string v19;
  _QWORD v20[2];
  std::string __p;
  std::string v22;
  _QWORD v23[11];
  char v24;
  uint64_t v25;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  if (*((_QWORD *)this + 16) == 2)
    v2 = 318767105;
  else
    v2 = 301989889;
  (*(void (**)(_QWORD *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v20, this, v2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v20[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v22 = __p;
  }
  if (*((_QWORD *)this + 16) == 2)
    v3 = 318767106;
  else
    v3 = 301989890;
  (*(void (**)(_QWORD *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v20, this, v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v20[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = __p;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"<ML3ITunesSyncArtistImportItem ", 31);
  *(_DWORD *)((char *)&v23[1] + *(_QWORD *)(v23[0] - 24)) = *(_DWORD *)((_BYTE *)&v23[1] + *(_QWORD *)(v23[0] - 24)) & 0xFFFFFFB5 | 8;
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" name=", 6);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v22;
  else
    v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    size = v22.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, size);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" sortName=", 10);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v19;
  else
    v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    v11 = v19.__r_.__value_.__l.__size_;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 8) & 0xFFFFFFB5 | 2;
  v14 = (_QWORD *)std::ostream::operator<<();
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" store_id=", 10);
  *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 2;
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" artistType=", 12);
  v17 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v20[0]) = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v20, 1);
  std::stringbuf::str();
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v23[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v23[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete((void *)v23[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v25);
}

void sub_1AC2BA604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  std::ostringstream::~ostringstream((uint64_t)&a29);
  _Unwind_Resume(a1);
}

id ML3ITunesSyncArtistImportItem::getDeduplicationPredicates(ML3ITunesSyncArtistImportItem *this)
{
  id v2;
  __CFString *v3;
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  char v10;
  std::string::size_type v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v22[2];
  std::string v23;
  std::string __str;
  std::string __p;
  _QWORD v26[2];
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = CFSTR("store_id");
  v4 = CFSTR("grouping_key");
  memset(&__p, 0, sizeof(__p));
  if (*((_QWORD *)this + 16) == 2)
    v5 = 318767111;
  else
    v5 = 301989893;
  v6 = (*(uint64_t (**)(ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, v5);
  if (*((_QWORD *)this + 16) == 2)
  {
    (*(void (**)(_QWORD *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v22, this, 318767105);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    else
      __str = v23;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __str;
    v22[0] = off_1E5B4D010;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    v7 = (*(uint64_t (**)(ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777217);
    if ((MLMediaTypeByStandardizingMediaType(v7) & 8) == 0)
    {
      (*(void (**)(_QWORD *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v22, this, 318767107);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
        v22[0] = off_1E5B4D010;
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
      }
      else
      {
        __str = v23;
      }
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __str.__r_.__value_.__l.__size_;
      if (size)
      {
        std::string::operator=(&__p, &__str);
        v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      if (v10 < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v8 = 0;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, ML3ITunesSyncArtistImportItem *, _QWORD))(*(_QWORD *)this + 152))(v22, this, 0);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    else
      __str = v23;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __str;
    v22[0] = off_1E5B4D010;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    v8 = (*(uint64_t (**)(ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 301989898);
  }
  v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = __p.__r_.__value_.__l.__size_;
  if (v11)
  {
    v12 = (void *)*((_QWORD *)this + 17);
    ML3CPPBridgeString((const UInt8 *)&__p, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "groupingKeyForString:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v14 = 0;
  }
  if (v8)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), v8);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v15);

  }
  if (v6)
  {
    if (objc_msgSend(v14, "length"))
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", v3, v6);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v27[0] = v16;
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", v4, v14);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v27[1] = v17;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v27, 2);
    }
    else
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", v3, v6);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v26[0] = v16;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", v4, &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v26[1] = v17;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 2);
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "addObject:", v19);
  }
  if (objc_msgSend(v14, "length"))
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", v4, v14);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v20);

  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v2;
}

void sub_1AC2BAB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;

  if (a17 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);

  _Unwind_Resume(a1);
}

void ML3ITunesSyncArtistImportItem::getEffectiveAlbumArtist(ML3ITunesSyncArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  std::string::value_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string::value_type v13;
  std::string *v14;
  std::string v15;
  std::string v16;
  std::string v17;
  __int128 v18;
  std::string v19;
  std::string __str;

  v6 = (*(uint64_t (**)(ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 318767105);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    __str = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 318767107);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 301989889);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v19;
  }
  v7 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v18, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    v18 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[0] = v16.__r_.__value_.__r.__words[2];
  }
  if (!v6)
  {
    v8 = v19.__r_.__value_.__s.__data_[7];
    v9 = v19.__r_.__value_.__s.__data_[7];
    v10 = *((_QWORD *)&v18 + 1);
    if (v19.__r_.__value_.__s.__data_[7] >= 0)
      v11 = v19.__r_.__value_.__s.__data_[7];
    else
      v11 = *((_QWORD *)&v18 + 1);
    if (!v11)
    {
      std::string::operator=((std::string *)&v18, &__str);
      v8 = v19.__r_.__value_.__s.__data_[7];
      v10 = *((_QWORD *)&v18 + 1);
      v9 = v19.__r_.__value_.__s.__data_[7];
    }
    if (v9 < 0)
      v8 = v10;
    if (!v8)
      std::string::operator=((std::string *)&v18, &v17);
  }
  v12 = v19.__r_.__value_.__s.__data_[7];
  v13 = v19.__r_.__value_.__s.__data_[7];
  if (v19.__r_.__value_.__s.__data_[7] < 0)
    v12 = *((_QWORD *)&v18 + 1);
  if (v12 && a2)
  {
    ML3CPPSanitizeString(&v15, (unint64_t)&v18);
    if (v19.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v18);
    v19.__r_.__value_.__r.__words[0] = v15.__r_.__value_.__r.__words[2];
    v18 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v14 = (std::string *)(a3 + 16);
  if ((v13 & 0x80) == 0)
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v18;
    *(_QWORD *)(a3 + 32) = v19.__r_.__value_.__r.__words[0];
    if ((v7 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
  std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
  if ((v19.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
  operator delete((void *)v18);
  if (v7 < 0)
LABEL_38:
    operator delete(v16.__r_.__value_.__l.__data_);
LABEL_39:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1AC2BAF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v31 - 57) < 0)
    operator delete(*(void **)(v31 - 80));
  _Unwind_Resume(a1);
}

void ML3ITunesSyncArtistImportItem::getEffectiveSortAlbumArtist(ML3ITunesSyncArtistImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string v22;
  std::string v23;

  v6 = (*(uint64_t (**)(ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 301989889);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v23 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 301989890);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v20 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 318767105);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 318767106);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = v22;
  }
  v7 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v17, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    v17 = v20;
  v8 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  size = v17.__r_.__value_.__l.__size_;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = v17.__r_.__value_.__l.__size_;
  if (v8)
  {
    if (v6)
      goto LABEL_56;
    goto LABEL_28;
  }
  ML3CPPSortableString((std::string *)&v21, (const UInt8 *)&v23);
  if (v9 < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
  LOBYTE(v9) = v22.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v21 + 1);
  if (!v6)
  {
LABEL_28:
    if ((v9 & 0x80u) == 0)
      v11 = v9;
    else
      v11 = size;
    if (!v11)
    {
      v12 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = v23.__r_.__value_.__l.__size_;
      if (!v12)
      {
        (*(void (**)(__int128 *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this
                                                                                                 + 168))(&v21, this, a2);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
        else
          v16 = v22;
        if ((v9 & 0x80) != 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        v17 = v16;
        *(_QWORD *)&v21 = off_1E5B4D010;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        v13 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
        size = v17.__r_.__value_.__l.__size_;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v13 = v17.__r_.__value_.__l.__size_;
        if (!v13)
        {
          v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v14 = v19.__r_.__value_.__l.__size_;
          if (!v14)
          {
            (*(void (**)(__int128 *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 176))(&v21, this, a2);
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
            else
              v16 = v22;
            if (v9 < 0)
              operator delete(v17.__r_.__value_.__l.__data_);
            v17 = v16;
            *(_QWORD *)&v21 = off_1E5B4D010;
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v22.__r_.__value_.__l.__data_);
            LOBYTE(v9) = *((_BYTE *)&v17.__r_.__value_.__s + 23);
            size = v17.__r_.__value_.__l.__size_;
          }
        }
      }
    }
  }
LABEL_56:
  if ((v9 & 0x80u) == 0)
    size = v9;
  if (size && (_DWORD)a2)
  {
    ML3CPPSanitizeString((std::string *)&v21, (unint64_t)&v17);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
    LOBYTE(v9) = v22.__r_.__value_.__s.__data_[7];
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v15 = (std::string *)(a3 + 16);
  if ((v9 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(v15, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)&v17.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_71;
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
LABEL_71:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1AC2BB46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a47 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a25 < 0)
    operator delete(a20);
  if (a32 < 0)
    operator delete(a27);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  _Unwind_Resume(exception_object);
}

void ML3ITunesSyncArtistImportItem::getEffectiveSortArtist(ML3ITunesSyncArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string::value_type v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  std::string v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  (*(void (**)(__int128 *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v12, this, 318767105);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    *(_QWORD *)&v12 = off_1E5B4D010;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = v13;
  }
  (*(void (**)(__int128 *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v12, this, 318767106);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    *(_QWORD *)&v12 = off_1E5B4D010;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = v13;
  }
  std::string::operator=(&v15, &v11);
  v6 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  size = v15.__r_.__value_.__l.__size_;
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    v9 = v15.__r_.__value_.__l.__size_;
  if (!v9)
  {
    ML3CPPSortableString((std::string *)&v12, (const UInt8 *)&v14);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    v15.__r_.__value_.__r.__words[2] = v13.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
    v6 = v13.__r_.__value_.__s.__data_[7];
    size = *((_QWORD *)&v12 + 1);
    v7 = v13.__r_.__value_.__s.__data_[7];
  }
  if (v7 < 0)
    v6 = size;
  if (v6 && a2)
  {
    ML3CPPSanitizeString((std::string *)&v12, (unint64_t)&v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    v15.__r_.__value_.__r.__words[2] = v13.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
    v7 = v13.__r_.__value_.__s.__data_[7];
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v10 = (std::string *)(a3 + 16);
  if (v7 < 0)
  {
    std::string::__init_copy_ctor_external(v10, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1AC2BB780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

void ML3ITunesSyncArtistImportItem::getEffectiveSortSeriesName(ML3ITunesSyncArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  std::string::size_type v7;
  int v8;
  std::string::size_type size;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  __int128 v14;
  std::string v15;
  std::string v16;

  (*(void (**)(__int128 *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 318767107);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v15;
  }
  (*(void (**)(__int128 *__return_ptr, ML3ITunesSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 318767108);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = v15;
  }
  v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  v7 = v15.__r_.__value_.__s.__data_[7];
  v8 = v15.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0)
    v10 = v15.__r_.__value_.__s.__data_[7];
  else
    v10 = *((_QWORD *)&v14 + 1);
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0)
    v7 = size;
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (unint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(_QWORD *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0)
LABEL_31:
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1AC2BBA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v27;
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (v27 < 0)
    operator delete(a13);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t ML3ITunesSyncArtistImportItem::sortPropertyKeyForPropertyKey(ML3ITunesSyncArtistImportItem *this, int a2)
{
  int v2;
  unsigned int v3;

  if (a2 == 318767105)
    v2 = 318767106;
  else
    v2 = 0;
  if (a2 == 318767107)
    v3 = 318767108;
  else
    v3 = v2;
  if (a2 == 301989889)
    return 301989890;
  else
    return v3;
}

uint64_t ML3ITunesSyncArtistImportItem::propertyKeyForSortPropertyKey(ML3ITunesSyncArtistImportItem *this, int a2)
{
  int v2;
  unsigned int v3;

  if (a2 == 318767106)
    v2 = 318767105;
  else
    v2 = 0;
  if (a2 == 318767108)
    v3 = 318767107;
  else
    v3 = v2;
  if (a2 == 301989890)
    return 301989889;
  else
    return v3;
}

id ML3ITunesSyncArtistImportItem::_getFoundationValue(id *this, int a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  v3 = 0;
  if (a2 > 301989902)
  {
    switch(a2)
    {
      case 318767105:
        objc_msgSend(this[11], "objectForKey:", CFSTR("artist"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_31;
        objc_msgSend(this[11], "objectForKey:", CFSTR("artist"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_30;
      case 318767106:
        objc_msgSend(this[11], "objectForKey:", CFSTR("sort_artist"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_31;
        objc_msgSend(this[11], "objectForKey:", CFSTR("sort_artist"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_30;
      case 318767107:
        objc_msgSend(this[13], "objectForKey:", CFSTR("series_name"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_31;
        objc_msgSend(this[13], "objectForKey:", CFSTR("series_name"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_30;
      case 318767108:
        objc_msgSend(this[13], "objectForKey:", CFSTR("sort_series_name"));
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_31;
        objc_msgSend(this[13], "objectForKey:", CFSTR("sort_series_name"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_30;
      default:
        if (a2 == 301989903)
        {
          objc_msgSend(this[11], "objectForKey:", CFSTR("artist_liked_state"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_31;
          objc_msgSend(this[11], "objectForKey:", CFSTR("artist_liked_state"));
          v5 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          if (a2 != 301989904)
            return v3;
          objc_msgSend(this[11], "objectForKey:", CFSTR("artist_date_liked"));
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_31;
          objc_msgSend(this[11], "objectForKey:", CFSTR("artist_date_liked"));
          v5 = objc_claimAutoreleasedReturnValue();
        }
LABEL_30:
        v3 = (void *)v5;
        goto LABEL_32;
    }
  }
  switch(a2)
  {
    case 301989889:
      objc_msgSend(this[11], "objectForKey:", CFSTR("album_artist"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        break;
      objc_msgSend(this[11], "objectForKey:", CFSTR("album_artist"));
      v5 = objc_claimAutoreleasedReturnValue();
      goto LABEL_30;
    case 301989890:
      objc_msgSend(this[11], "objectForKey:", CFSTR("sort_album_artist"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        break;
      objc_msgSend(this[11], "objectForKey:", CFSTR("sort_album_artist"));
      v5 = objc_claimAutoreleasedReturnValue();
      goto LABEL_30;
    case 301989891:
    case 301989892:
    case 301989894:
    case 301989895:
    case 301989896:
    case 301989897:
      return v3;
    case 301989893:
      objc_msgSend(this[12], "objectForKey:", CFSTR("artist_id"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        break;
      objc_msgSend(this[12], "objectForKey:", CFSTR("artist_id"));
      v5 = objc_claimAutoreleasedReturnValue();
      goto LABEL_30;
    case 301989898:
      objc_msgSend(this[11], "objectForKey:", CFSTR("artist_pid"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        break;
      objc_msgSend(this[11], "objectForKey:", CFSTR("artist_pid"));
      v5 = objc_claimAutoreleasedReturnValue();
      goto LABEL_30;
    default:
      if (a2 == 16777217)
      {
        _MLMediaTypeFromTrackProperiesDictionary((NSDictionary *)this[11]);
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        return v3;
      }
      if (a2 != 16777246)
        return v3;
      objc_msgSend(this[11], "objectForKey:", CFSTR("is_compilation"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(this[11], "objectForKey:", CFSTR("is_compilation"));
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_30;
      }
      break;
  }
LABEL_31:
  v3 = 0;
LABEL_32:

  return v3;
}

void sub_1AC2BBF74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ML3ITunesSyncImportItem::ML3ITunesSyncImportItem(ML3ITunesSyncImportItem *this, NSDictionary *a2)
{
  NSDictionary *v4;
  void *v5;
  char isKindOfClass;
  void *v7;

  v4 = a2;
  *((_WORD *)this + 8) = 256;
  *((_BYTE *)this + 18) = 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)this = &off_1E5B4DE68;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 8) = 0;
  objc_storeStrong((id *)this + 8, a2);
  -[NSDictionary objectForKey:](v4, "objectForKey:", CFSTR("pid"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    -[NSDictionary objectForKey:](v4, "objectForKey:", CFSTR("pid"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = 0;
  }
  *((_QWORD *)this + 9) = objc_msgSend(v7, "longLongValue");
  if ((isKindOfClass & 1) != 0)

}

void sub_1AC2BC104(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  char v7;

  v7 = v5;
  if ((v7 & 1) != 0)

  *(_QWORD *)v2 = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v3);

  _Unwind_Resume(a1);
}

void ML3ITunesSyncTrackImportItem::ML3ITunesSyncTrackImportItem(ML3ITunesSyncTrackImportItem *this, NSDictionary *a2)
{
  NSDictionary *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char isKindOfClass;
  void *v23;
  void *v24;

  v4 = a2;
  ML3ITunesSyncImportItem::ML3ITunesSyncImportItem(this, v4);
  *(_QWORD *)this = &off_1E5B4EEA8;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_OWORD *)this + 5) = 0u;
  objc_storeStrong((id *)this + 10, a2);
  objc_msgSend(*((id *)this + 10), "objectForKey:", CFSTR("avformat_info"));
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v5;

  objc_msgSend(*((id *)this + 10), "objectForKey:", CFSTR("item"));
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v7;

  objc_msgSend(*((id *)this + 10), "objectForKey:", CFSTR("item_stats"));
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v9;

  objc_msgSend(*((id *)this + 10), "objectForKey:", CFSTR("podcast_info"));
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v11;

  objc_msgSend(*((id *)this + 10), "objectForKey:", CFSTR("rental_info"));
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v13;

  objc_msgSend(*((id *)this + 10), "objectForKey:", CFSTR("store_info"));
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v15;

  objc_msgSend(*((id *)this + 10), "objectForKey:", CFSTR("video_info"));
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v17;

  objc_msgSend(*((id *)this + 12), "objectForKey:", CFSTR("lyrics"));
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v19;

  objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("store_item_id"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(*((id *)this + 16), "objectForKey:", CFSTR("store_item_id"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v23 = 0;
  }
  *((_QWORD *)this + 19) = objc_msgSend(v23, "longLongValue");
  if ((isKindOfClass & 1) != 0)

  objc_msgSend(*((id *)this + 8), "objectForKey:", CFSTR("operation"));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 17) = objc_msgSend(v24, "isEqualToString:", CFSTR("insert_track"));

}

void sub_1AC2BC368(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  *(_QWORD *)v2 = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v2 + 24);

  _Unwind_Resume(a1);
}

void ML3ITunesSyncContainerImportItem::ML3ITunesSyncContainerImportItem(ML3ITunesSyncContainerImportItem *this, NSDictionary *a2, char a3)
{
  NSDictionary *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  ML3ITunesSyncImportItem::ML3ITunesSyncImportItem(this, v5);
  *(_QWORD *)this = &off_1E5B4FDD8;
  *((_BYTE *)this + 80) = a3;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 16) = 0;
  objc_msgSend(*((id *)this + 8), "objectForKey:", CFSTR("container"));
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v6;

  objc_msgSend(*((id *)this + 8), "objectForKey:", CFSTR("container_ui"));
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v8;

  objc_msgSend(*((id *)this + 8), "objectForKey:", CFSTR("pid"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *((_QWORD *)this + 11) = objc_msgSend(v10, "longLongValue");

  *((_QWORD *)this + 1) = *((_QWORD *)this + 11);
  objc_msgSend(*((id *)this + 8), "objectForKey:", CFSTR("item_to_container"));
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v11 = (id)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v30 != v13)
          objc_enumerationMutation(v11);
        v15 = objc_msgSend(*(id *)(*((_QWORD *)&v29 + 1) + 8 * i), "longLongValue", (_QWORD)v29);
        v16 = v15;
        v18 = (uint64_t *)*((_QWORD *)this + 15);
        v17 = *((_QWORD *)this + 16);
        if ((unint64_t)v18 >= v17)
        {
          v20 = (uint64_t *)*((_QWORD *)this + 14);
          v21 = v18 - v20;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          v23 = v17 - (_QWORD)v20;
          if (v23 >> 2 > v22)
            v22 = v23 >> 2;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v24);
            v20 = (uint64_t *)*((_QWORD *)this + 14);
            v18 = (uint64_t *)*((_QWORD *)this + 15);
          }
          else
          {
            v25 = 0;
          }
          v26 = (uint64_t *)(v24 + 8 * v21);
          *v26 = v16;
          v19 = v26 + 1;
          while (v18 != v20)
          {
            v27 = *--v18;
            *--v26 = v27;
          }
          *((_QWORD *)this + 14) = v26;
          *((_QWORD *)this + 15) = v19;
          *((_QWORD *)this + 16) = v24 + 8 * v25;
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v18 = v15;
          v19 = v18 + 1;
        }
        *((_QWORD *)this + 15) = v19;
      }
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    }
    while (v12);
  }

  objc_msgSend(*((id *)this + 8), "objectForKey:", CFSTR("operation"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 17) = objc_msgSend(v28, "isEqualToString:", CFSTR("insert_playlist"));

}

void sub_1AC2BC69C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v6;

  v6 = *(void **)(v1 + 112);
  if (v6)
  {
    *(_QWORD *)(v1 + 120) = v6;
    operator delete(v6);
  }

  *(_QWORD *)v1 = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v1 + 24);

  _Unwind_Resume(a1);
}

void ML3ITunesSyncAlbumImportItem::ML3ITunesSyncAlbumImportItem(ML3ITunesSyncAlbumImportItem *this, NSDictionary *a2, ML3MusicLibrary *a3)
{
  NSDictionary *v6;
  ML3MusicLibrary *v7;
  ML3MusicLibrary *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char isKindOfClass;
  void *v19;
  void *v20;
  char v21;
  void *v22;
  void *v23;

  v6 = a2;
  v7 = a3;
  ML3ITunesSyncImportItem::ML3ITunesSyncImportItem(this, v6);
  *(_QWORD *)this = &off_1E5B4EDB8;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  v8 = v7;
  *((_QWORD *)this + 17) = v8;
  objc_storeStrong((id *)this + 11, a2);
  objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("item_stats"));
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v9;

  objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("item"));
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v11;

  objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("store_info"));
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v13;

  objc_msgSend(*((id *)this + 11), "objectForKey:", CFSTR("video_info"));
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v15;

  objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("store_item_id"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(*((id *)this + 13), "objectForKey:", CFSTR("store_item_id"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v19 = 0;
  }
  *((_QWORD *)this + 15) = objc_msgSend(v19, "longLongValue");
  if ((isKindOfClass & 1) != 0)

  -[NSDictionary objectForKey:](v6, "objectForKey:", CFSTR("pid"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v21 = objc_opt_isKindOfClass();
  if ((v21 & 1) != 0)
  {
    -[NSDictionary objectForKey:](v6, "objectForKey:", CFSTR("pid"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v22 = 0;
  }
  *((_QWORD *)this + 16) = objc_msgSend(v22, "longLongValue");
  if ((v21 & 1) != 0)

  objc_msgSend(*((id *)this + 8), "objectForKey:", CFSTR("operation"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 17) = objc_msgSend(v23, "isEqualToString:", CFSTR("insert_track"));

}

void sub_1AC2BC964(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)v2 = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v2 + 24);

  _Unwind_Resume(a1);
}

uint64_t ML3ITunesSyncArtistImportItem::ML3ITunesSyncArtistImportItem(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  NSDictionary *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char isKindOfClass;
  void *v19;
  void *v20;
  char v21;
  void *v22;
  void *v23;

  v8 = a2;
  v9 = a4;
  ML3ITunesSyncImportItem::ML3ITunesSyncImportItem((ML3ITunesSyncImportItem *)a1, v8);
  *(_QWORD *)a1 = &off_1E5B4F578;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 128) = a3;
  v10 = v9;
  *(_QWORD *)(a1 + 136) = v10;
  objc_storeStrong((id *)(a1 + 80), a2);
  objc_msgSend(*(id *)(a1 + 80), "objectForKey:", CFSTR("item"));
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v11;

  objc_msgSend(*(id *)(a1 + 80), "objectForKey:", CFSTR("store_info"));
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v13;

  objc_msgSend(*(id *)(a1 + 80), "objectForKey:", CFSTR("video_info"));
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v15;

  objc_msgSend(*(id *)(a1 + 96), "objectForKey:", CFSTR("store_item_id"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 96), "objectForKey:", CFSTR("store_item_id"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v19 = 0;
  }
  *(_QWORD *)(a1 + 112) = objc_msgSend(v19, "longLongValue");
  if ((isKindOfClass & 1) != 0)

  -[NSDictionary objectForKey:](v8, "objectForKey:", CFSTR("pid"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v21 = objc_opt_isKindOfClass();
  if ((v21 & 1) != 0)
  {
    -[NSDictionary objectForKey:](v8, "objectForKey:", CFSTR("pid"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)(a1 + 120) = objc_msgSend(v22, "longLongValue");
  if ((v21 & 1) != 0)

  objc_msgSend(*(id *)(a1 + 64), "objectForKey:", CFSTR("operation"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a1 + 17) = objc_msgSend(v23, "isEqualToString:", CFSTR("insert_track"));

  return a1;
}

void sub_1AC2BCBFC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)v2 = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v2 + 24);

  _Unwind_Resume(a1);
}

void sub_1AC2BCE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t MLMediaTypeForITMediaKind(unsigned int a1)
{
  int v1;
  unsigned int v2;

  v1 = a1 & 4;
  if ((~a1 & 6) == 0)
    v1 = 256;
  v2 = (a1 >> 2) & 2 | (8 * (a1 & 1)) | (((a1 >> 5) & 1) << 10) | (8 * a1) & 0x2200 | HIWORD(a1) & 0x30 | ((~a1 & 0x21) == 0) | v1;
  if (((((((a1 >> 5) & 1) << 10) & 0xFF00 | (8 * a1) & 0x2200 | (((~a1 & 0x21) == 0) | v1) & 0xFF00) == 0) & (a1 >> 1)) != 0)
    return v2 | 0x800;
  else
    return v2;
}

uint64_t ITMediaKindForMLMediaType(unsigned int a1)
{
  int v2;
  int v3;

  if ((int)a1 > 65279)
  {
    if (a1 == 0xFFFFFF)
      return 3951;
    if (a1 == 65280)
      return 3682;
  }
  else if (a1 == 255 || a1 == 1535)
  {
    return 301;
  }
  v2 = a1 & 4;
  if ((a1 & 0x100) != 0)
    v2 = 6;
  v3 = (4 * a1) & 8 | (a1 >> 3) & 1 | v2;
  if ((a1 & 1) != 0)
    v3 |= 0x21u;
  return (a1 >> 3) & 0x440 | (((a1 >> 4) & 3) << 20) | (a1 >> 5) & 0x20 | (a1 >> 10) & 2 | v3;
}

id NSStringFromITMediaKind(int a1)
{
  id v2;
  uint64_t v3;
  const __CFString *v4;
  void *v5;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = 0;
  v4 = CFSTR("Song");
  do
  {
    if ((dword_1E5B625A8[v3] & a1) != 0)
      objc_msgSend(v2, "addObject:", v4);
    v4 = *(const __CFString **)&dword_1E5B625A8[v3 + 6];
    v3 += 4;
  }
  while (v3 != 100);
  objc_msgSend(v2, "componentsJoinedByString:", CFSTR("|"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id NSStringFromITDBTrackField(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const __CFString *v3;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;

  switch(a1)
  {
    case 0:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v5 = CFSTR("kITDBTrackField_Invalid");
      v7 = 0;
      goto LABEL_163;
    case 1:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 1;
      v3 = CFSTR("kITDBTrackField_PlayStatus");
      goto LABEL_162;
    case 2:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 2;
      v3 = CFSTR("kITDBTrackField_Name");
      goto LABEL_162;
    case 3:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 3;
      v3 = CFSTR("kITDBTrackField_Album");
      goto LABEL_162;
    case 4:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 4;
      v3 = CFSTR("kITDBTrackField_Artist");
      goto LABEL_162;
    case 5:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 5;
      v3 = CFSTR("kITDBTrackField_BitRate");
      goto LABEL_162;
    case 6:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 6;
      v3 = CFSTR("kITDBTrackField_SampleRate");
      goto LABEL_162;
    case 7:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 7;
      v3 = CFSTR("kITDBTrackField_Year");
      goto LABEL_162;
    case 8:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 8;
      v3 = CFSTR("kITDBTrackField_Genre");
      goto LABEL_162;
    case 9:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 9;
      v3 = CFSTR("kITDBTrackField_Kind");
      goto LABEL_162;
    case 10:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 10;
      v3 = CFSTR("kITDBTrackField_Date");
      goto LABEL_162;
    case 11:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 11;
      v3 = CFSTR("kITDBTrackField_TrackNumber");
      goto LABEL_162;
    case 12:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 12;
      v3 = CFSTR("kITDBTrackField_TotalSize");
      goto LABEL_162;
    case 13:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 13;
      v3 = CFSTR("kITDBTrackField_TotalTime");
      goto LABEL_162;
    case 14:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 14;
      v3 = CFSTR("kITDBTrackField_Comment");
      goto LABEL_162;
    case 15:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 15;
      v3 = CFSTR("kITDBTrackField_Location");
      goto LABEL_162;
    case 16:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 16;
      v3 = CFSTR("kITDBTrackField_DateAdded");
      goto LABEL_162;
    case 17:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 17;
      v3 = CFSTR("kITDBTrackField_EQPreset");
      goto LABEL_162;
    case 18:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 18;
      v3 = CFSTR("kITDBTrackField_Composer");
      goto LABEL_162;
    case 19:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 19;
      v3 = CFSTR("kITDBTrackField_ObsoleteDisplayArtist");
      goto LABEL_162;
    case 20:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 20;
      v3 = CFSTR("kITDBTrackField_NormalizedVolume");
      goto LABEL_162;
    case 21:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 21;
      v3 = CFSTR("kITDBTrackField_StreamStatus");
      goto LABEL_162;
    case 22:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 22;
      v3 = CFSTR("kITDBTrackField_UserPlayCount");
      goto LABEL_162;
    case 23:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 23;
      v3 = CFSTR("kITDBTrackField_PlayDate");
      goto LABEL_162;
    case 24:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 24;
      v3 = CFSTR("kITDBTrackField_DiscNumber");
      goto LABEL_162;
    case 25:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 25;
      v3 = CFSTR("kITDBTrackField_TrackRating");
      goto LABEL_162;
    case 26:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 26;
      v3 = CFSTR("kITDBTrackField_Price");
      goto LABEL_162;
    case 27:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 27;
      v3 = CFSTR("kITDBTrackField_ObjectID");
      goto LABEL_162;
    case 28:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 28;
      v3 = CFSTR("kITDBTrackField_PersistentID");
      goto LABEL_162;
    case 29:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 29;
      v3 = CFSTR("kITDBTrackField_OldUserDisabled");
      goto LABEL_162;
    case 30:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 30;
      v3 = CFSTR("kITDBTrackField_PlaylistItemID");
      goto LABEL_162;
    case 31:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 31;
      v3 = CFSTR("kITDBTrackField_Compilation");
      goto LABEL_162;
    case 32:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 32;
      v3 = CFSTR("kITDBTrackField_PurchaseDate");
      goto LABEL_162;
    case 33:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 33;
      v3 = CFSTR("kITDBTrackField_Relevance");
      goto LABEL_162;
    case 34:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 34;
      v3 = CFSTR("kITDBTrackField_ReleaseDate");
      goto LABEL_162;
    case 35:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 35;
      v3 = CFSTR("kITDBTrackField_BeatsPerMinute");
      goto LABEL_162;
    case 36:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 36;
      v3 = CFSTR("kITDBTrackField_ParentContainerID");
      goto LABEL_162;
    case 37:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 37;
      v3 = CFSTR("kITDBTrackField_Artwork");
      goto LABEL_162;
    case 38:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 38;
      v3 = CFSTR("kITDBTrackField_Popularity");
      goto LABEL_162;
    case 39:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 39;
      v3 = CFSTR("kITDBTrackField_Grouping");
      goto LABEL_162;
    case 40:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 40;
      v3 = CFSTR("kITDBTrackField_PlaylistPersistentID");
      goto LABEL_162;
    case 41:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 41;
      v3 = CFSTR("kITDBTrackField_SongID");
      goto LABEL_162;
    case 42:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 42;
      v3 = CFSTR("kITDBTrackField_ArtistID");
      goto LABEL_162;
    case 43:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 43;
      v3 = CFSTR("kITDBTrackField_PlaylistID");
      goto LABEL_162;
    case 44:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 44;
      v3 = CFSTR("kITDBTrackField_ComposerID");
      goto LABEL_162;
    case 45:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 45;
      v3 = CFSTR("kITDBTrackField_GenreID");
      goto LABEL_162;
    case 46:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 46;
      v3 = CFSTR("kITDBTrackField_CodecType");
      goto LABEL_162;
    case 47:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 47;
      v3 = CFSTR("kITDBTrackField_CodecSubType");
      goto LABEL_162;
    case 48:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 48;
      v3 = CFSTR("kITDBTrackField_SongDataKind");
      goto LABEL_162;
    case 49:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 49;
      v3 = CFSTR("kITDBTrackField_DiscCount");
      goto LABEL_162;
    case 50:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 50;
      v3 = CFSTR("kITDBTrackField_StartTime");
      goto LABEL_162;
    case 51:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 51;
      v3 = CFSTR("kITDBTrackField_StopTime");
      goto LABEL_162;
    case 52:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 52;
      v3 = CFSTR("kITDBTrackField_TrackCount");
      goto LABEL_162;
    case 53:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 53;
      v3 = CFSTR("kITDBTrackField_StorefrontID");
      goto LABEL_162;
    case 54:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 54;
      v3 = CFSTR("kITDBTrackField_Description");
      goto LABEL_162;
    case 55:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 55;
      v3 = CFSTR("kITDBTrackField_Category");
      goto LABEL_162;
    case 56:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 56;
      v3 = CFSTR("kITDBTrackField_Keywords");
      goto LABEL_162;
    case 57:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 57;
      v3 = CFSTR("kITDBTrackField_Podcast");
      goto LABEL_162;
    case 58:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 58;
      v3 = CFSTR("kITDBTrackField_CloudMatchState");
      goto LABEL_162;
    case 59:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 59;
      v3 = CFSTR("kITDBTrackField_HasLyrics");
      goto LABEL_162;
    case 60:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 60;
      v3 = CFSTR("kITDBTrackField_MediaKind");
      goto LABEL_162;
    case 61:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 61;
      v3 = CFSTR("kITDBTrackField_Debug");
      goto LABEL_162;
    case 62:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 62;
      v3 = CFSTR("kITDBTrackField_SeriesName");
      goto LABEL_162;
    case 63:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 63;
      v3 = CFSTR("kITDBTrackField_SeasonNumber");
      goto LABEL_162;
    case 64:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 64;
      v3 = CFSTR("kITDBTrackField_EpisodeID");
      goto LABEL_162;
    case 65:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 65;
      v3 = CFSTR("kITDBTrackField_EpisodeSortID");
      goto LABEL_162;
    case 66:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 66;
      v3 = CFSTR("kITDBTrackField_NetworkName");
      goto LABEL_162;
    case 67:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 67;
      v3 = CFSTR("kITDBTrackField_LastBackupDate");
      goto LABEL_162;
    case 68:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 68;
      v3 = CFSTR("kITDBTrackField_UserSkipCount");
      goto LABEL_162;
    case 69:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 69;
      v3 = CFSTR("kITDBTrackField_SkipDate");
      goto LABEL_162;
    case 70:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 70;
      v3 = CFSTR("kITDBTrackField_GaplessAlbum");
      goto LABEL_162;
    case 71:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 71;
      v3 = CFSTR("kITDBTrackField_AlbumArtist");
      goto LABEL_162;
    case 72:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 72;
      v3 = CFSTR("kITDBTrackField_ShuffleID");
      goto LABEL_162;
    case 73:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 73;
      v3 = CFSTR("kITDBTrackField_TrackID");
      goto LABEL_162;
    case 74:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 74;
      v3 = CFSTR("kITDBTrackField_RelativeVolume");
      goto LABEL_162;
    case 75:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 75;
      v3 = CFSTR("kITDBTrackField_Attributes");
      goto LABEL_162;
    case 76:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 76;
      v3 = CFSTR("kITDBTrackField_Private");
      goto LABEL_162;
    case 77:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 77;
      v3 = CFSTR("kITDBTrackField_AlbumInfo");
      goto LABEL_162;
    case 78:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 78;
      v3 = CFSTR("kITDBTrackField_SortName");
      goto LABEL_162;
    case 79:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 79;
      v3 = CFSTR("kITDBTrackField_SortAlbum");
      goto LABEL_162;
    case 80:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 80;
      v3 = CFSTR("kITDBTrackField_SortArtist");
      goto LABEL_162;
    case 81:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 81;
      v3 = CFSTR("kITDBTrackField_SortAlbumArtist");
      goto LABEL_162;
    case 82:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 82;
      v3 = CFSTR("kITDBTrackField_SortComposer");
      goto LABEL_162;
    case 83:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 83;
      v3 = CFSTR("kITDBTrackField_SortSeriesName");
      goto LABEL_162;
    case 84:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 84;
      v3 = CFSTR("kITDBTrackField_MovieInfo");
      goto LABEL_162;
    case 85:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 85;
      v3 = CFSTR("kITDBTrackField_PodcastURL");
      goto LABEL_162;
    case 86:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 86;
      v3 = CFSTR("kITDBTrackField_LongDescription");
      goto LABEL_162;
    case 87:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 87;
      v3 = CFSTR("kITDBTrackField_ExternalGUID");
      goto LABEL_162;
    case 88:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 88;
      v3 = CFSTR("kITDBTrackField_ChapterData");
      goto LABEL_162;
    case 89:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 89;
      v3 = CFSTR("kITDBTrackField_ExtendedContentRating");
      goto LABEL_162;
    case 90:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 90;
      v3 = CFSTR("kITDBTrackField_AlbumRating");
      goto LABEL_162;
    case 91:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 91;
      v3 = CFSTR("kITDBTrackField_RentalExpirationDate");
      goto LABEL_162;
    case 92:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 92;
      v3 = CFSTR("kITDBTrackField_ObsoleteRingtoneStatus");
      goto LABEL_162;
    case 93:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 93;
      v3 = CFSTR("kITDBTrackField_BookmarkTime");
      goto LABEL_162;
    case 94:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 94;
      v3 = CFSTR("kITDBTrackField_RememberBookmark");
      goto LABEL_162;
    case 95:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 95;
      v3 = CFSTR("kITDBTrackField_HasBeenPlayed");
      goto LABEL_162;
    case 96:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 96;
      v3 = CFSTR("kITDBTrackField_HasAlternateAudio");
      goto LABEL_162;
    case 97:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 97;
      v3 = CFSTR("kITDBTrackField_HasSubtitles");
      goto LABEL_162;
    case 98:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 98;
      v3 = CFSTR("kITDBTrackField_AudioLanguage");
      goto LABEL_162;
    case 99:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 99;
      v3 = CFSTR("kITDBTrackField_AudioTrackIndex");
      goto LABEL_162;
    case 100:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 100;
      v3 = CFSTR("kITDBTrackField_AudioTrackID");
      goto LABEL_162;
    case 101:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 101;
      v3 = CFSTR("kITDBTrackField_SubtitleLanguage");
      goto LABEL_162;
    case 102:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 102;
      v3 = CFSTR("kITDBTrackField_SubtitleTrackIndex");
      goto LABEL_162;
    case 103:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 103;
      v3 = CFSTR("kITDBTrackField_SubtitleTrackID");
      goto LABEL_162;
    case 104:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 104;
      v3 = CFSTR("kITDBTrackField_Studio");
      goto LABEL_162;
    case 105:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 105;
      v3 = CFSTR("kITDBTrackField_Reserved1");
      goto LABEL_162;
    case 106:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 106;
      v3 = CFSTR("kITDBTrackField_Reserved2");
      goto LABEL_162;
    case 107:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 107;
      v3 = CFSTR("kITDBTrackField_Reserved3");
      goto LABEL_162;
    case 108:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 108;
      v3 = CFSTR("kITDBTrackField_Reserved4");
      goto LABEL_162;
    case 109:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 109;
      v3 = CFSTR("kITDBTrackField_Reserved5");
      goto LABEL_162;
    case 110:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 110;
      v3 = CFSTR("kITDBTrackField_GaplessInfo");
      goto LABEL_162;
    case 111:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 111;
      v3 = CFSTR("kITDBTrackField_GeniusID");
      goto LABEL_162;
    case 112:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 112;
      v3 = CFSTR("kITDBTrackField_ExcludeFromShuffle");
      goto LABEL_162;
    case 113:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 113;
      v3 = CFSTR("kITDBTrackField_Lyrics");
      goto LABEL_162;
    case 114:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 114;
      v3 = CFSTR("kITDBTrackField_StorePersistentID");
      goto LABEL_162;
    case 115:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 115;
      v3 = CFSTR("kITDBTrackField_JukeboxVotes");
      goto LABEL_162;
    case 116:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 116;
      v3 = CFSTR("kITDBTrackField_VoiceOverLanguage");
      goto LABEL_162;
    case 117:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 117;
      v3 = CFSTR("kITDBTrackField_iTunesU");
      goto LABEL_162;
    case 118:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 118;
      v3 = CFSTR("kITDBTrackField_UncompressedSize");
      goto LABEL_162;
    case 119:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 119;
      v3 = CFSTR("kITDBTrackField_XID");
      goto LABEL_162;
    case 120:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 120;
      v3 = CFSTR("kITDBTrackField_GameGUID");
      goto LABEL_162;
    case 121:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 121;
      v3 = CFSTR("kITDBTrackField_AppIdentifier");
      goto LABEL_162;
    case 122:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 122;
      v3 = CFSTR("kITDBTrackField_ObsoleteTrackKind");
      goto LABEL_162;
    case 123:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 123;
      v3 = CFSTR("kITDBTrackField_Version");
      goto LABEL_162;
    case 124:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 124;
      v3 = CFSTR("kITDBTrackField_Copyright");
      goto LABEL_162;
    case 125:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 125;
      v3 = CFSTR("kITDBTrackField_UserDisabled");
      goto LABEL_162;
    case 126:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 126;
      v3 = CFSTR("kITDBTrackField_AlbumArtwork");
      goto LABEL_162;
    case 127:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 127;
      v3 = CFSTR("kITDBTrackField_CollectionDescription");
      goto LABEL_162;
    case 128:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 128;
      v3 = CFSTR("kITDBTrackField_Flavor");
      goto LABEL_162;
    case 129:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 129;
      v3 = CFSTR("kITDBTrackField_CloudID");
      goto LABEL_162;
    case 130:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 130;
      v3 = CFSTR("kITDBTrackField_CloudDownload");
      goto LABEL_162;
    case 131:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 131;
      v3 = CFSTR("kITDBTrackField_ChosenByAutoFill");
      goto LABEL_162;
    case 132:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 132;
      v3 = CFSTR("kITDBTrackField_CloudUserID");
      goto LABEL_162;
    case 133:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 133;
      v3 = CFSTR("kITDBTrackField_TrackKinds");
      goto LABEL_162;
    case 134:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 134;
      v3 = CFSTR("kITDBTrackField_CloudType");
      goto LABEL_162;
    case 135:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 135;
      v3 = CFSTR("kITDBTrackField_Tags");
      goto LABEL_162;
    case 136:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 136;
      v3 = CFSTR("kITDBTrackField_NumChannels");
      goto LABEL_162;
    case 137:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 137;
      v3 = CFSTR("kITDBTrackField_CloudFlavorID");
      goto LABEL_162;
    case 138:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 138;
      v3 = CFSTR("kITDBTrackField_CloudLibraryKind");
      goto LABEL_162;
    case 139:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 139;
      v3 = CFSTR("kITDBTrackField_StoreVersion");
      goto LABEL_162;
    case 140:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 140;
      v3 = CFSTR("kITDBTrackField_AppFamilyIDMask");
      goto LABEL_162;
    case 141:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 141;
      v3 = CFSTR("kITDBTrackField_ItemIsCompilation");
      goto LABEL_162;
    case 142:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 142;
      v3 = CFSTR("kITDBTrackField_ArtistInfo");
      goto LABEL_162;
    case 143:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 143;
      v3 = CFSTR("kITDBTrackField_PlaylistItemPersistentID");
      goto LABEL_162;
    case 144:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 144;
      v3 = CFSTR("kITDBTrackField_AppleID");
      goto LABEL_162;
    case 145:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 145;
      v3 = CFSTR("kITDBTrackField_OwnerName");
      goto LABEL_162;
    case 146:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 146;
      v3 = CFSTR("kITDBTrackField_URLExtraInfo");
      goto LABEL_162;
    case 147:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 147;
      v3 = CFSTR("kITDBTrackField_ManuallyMarked");
      goto LABEL_162;
    case 148:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 148;
      v3 = CFSTR("kITDBTrackField_DownloaderAppleID");
      goto LABEL_162;
    case 149:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 149;
      v3 = CFSTR("kITDBTrackField_DownloaderName");
      goto LABEL_162;
    case 150:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 150;
      v3 = CFSTR("kITDBTrackField_CloudServerAssetState");
      goto LABEL_162;
    case 151:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 151;
      v3 = CFSTR("kITDBTrackField_SubscriptionAdamID");
      goto LABEL_162;
    case 152:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 152;
      v3 = CFSTR("kITDBTrackField_ReportPlayEvents");
      goto LABEL_162;
    case 153:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 153;
      v3 = CFSTR("kITDBTrackField_IsPlaylistOnly");
      goto LABEL_162;
    case 154:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 154;
      v3 = CFSTR("kITDBTrackField_LikedState");
      goto LABEL_162;
    case 155:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 155;
      v3 = CFSTR("kITDBTrackField_CloudPlaybackEndpointType");
      goto LABEL_162;
    case 156:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 156;
      v3 = CFSTR("kITDBTrackField_AlbumLikedState");
      goto LABEL_162;
    case 183:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 183;
      v3 = CFSTR("kITDBTrackField_LikedStateModDate");
      goto LABEL_162;
    case 184:
      v1 = (void *)MEMORY[0x1E0CB3940];
      v2 = 184;
      v3 = CFSTR("kITDBTrackField_MaxValue");
LABEL_162:
      v5 = v3;
      v7 = v2;
LABEL_163:
      objc_msgSend(v1, "stringWithFormat:", CFSTR("%@ (%d)"), v5, v7);
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown kITDBTrackField_??? (%ld)"), a1, v6);
      break;
  }
  return (id)objc_claimAutoreleasedReturnValue();
}

id NSStringFromOSType(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (BYTE3(a1))
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("'%c%c%c%c'"), ((int)a1 >> 24), ((int)((_DWORD)a1 << 8) >> 24), ((__int16)a1 >> 8), (char)a1);
  else
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), a1, v2, v3, v4);
  return (id)objc_claimAutoreleasedReturnValue();
}

__CFString *NSStringCreateWithUStr255NoCopy(unsigned __int16 *a1)
{
  __CFString *v1;

  if (*a1)
    v1 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharactersNoCopy:length:freeWhenDone:", a1 + 1, *a1, 0);
  else
    v1 = &stru_1E5B66908;
  return v1;
}

__CFString *NSStringCreateWithUStr255(unsigned __int16 *a1)
{
  __CFString *v1;

  if (*a1)
    v1 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharacters:length:", a1 + 1, *a1);
  else
    v1 = &stru_1E5B66908;
  return v1;
}

__CFString *MLDescriptionFromChapterData(uint64_t a1)
{
  char Flags;
  char v3;
  char v4;
  uint64_t NumChapters;
  __CFString *v6;
  __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  uint64_t v11;
  int IndChapterTime;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  const char *v23;
  const char *v24;
  void *v25;
  __CFString *v26;
  __CFString *v27;
  NSObject *v29;
  char v30;
  int v31;
  char v32;
  void *v33;
  __int128 v34;
  _OWORD v35[32];
  uint8_t buf[4];
  const char *v37;
  _OWORD v38[32];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v7 = 0;
LABEL_43:
    v26 = CFSTR("(null)");
    if (v7)
      v26 = v7;
    v27 = v26;
    goto LABEL_46;
  }
  Flags = ChapterData_GetFlags();
  v3 = ChapterData_GetFlags();
  v4 = ChapterData_GetFlags();
  NumChapters = ChapterData_GetNumChapters();
  v6 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithFormat:", &stru_1E5B66908);
  v7 = v6;
  v8 = CFSTR("Y");
  v32 = Flags;
  if ((Flags & 1) != 0)
    v9 = CFSTR("Y");
  else
    v9 = CFSTR("N");
  if ((v3 & 4) != 0)
    v10 = CFSTR("Y");
  else
    v10 = CFSTR("N");
  if ((v4 & 2) == 0)
    v8 = CFSTR("N");
  -[__CFString appendFormat:](v6, "appendFormat:", CFSTR("ChapterDataRef = %p | has[names=%@, urls=%@, pics=%@] | chap count = %d \n"), a1, v9, v10, v8, NumChapters);
  v31 = NumChapters;
  if (!(_DWORD)NumChapters)
    goto LABEL_43;
  LODWORD(v11) = 0;
  v30 = v3;
  while (1)
  {
    v11 = (v11 + 1);
    IndChapterTime = ChapterData_GetIndChapterTime();
    if (ChapterData_GetNameCookieForTime()
      || (v4 & 2) != 0 && ChapterData_GetPictureCookieForTime())
    {
      break;
    }
    if ((v3 & 4) != 0 && ChapterData_GetURLCookieForTime())
      break;
    memset(v38, 0, sizeof(v38));
    if ((v32 & 1) != 0)
    {
      if (ChapterData_CopyProperty())
        break;
      NSStringCreateWithUStr255((unsigned __int16 *)v38);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v13 = 0;
    }
    buf[1] = 0;
    memset(v35, 0, sizeof(v35));
    if ((v3 & 4) == 0)
      goto LABEL_26;
    if (ChapterData_FindURLForTime())
      goto LABEL_47;
    if (buf[1])
    {
      if (ChapterData_FindURLTitleForTime())
      {
LABEL_47:

        break;
      }
      NSStringCreateWithUStr255((unsigned __int16 *)v35);
      *((_QWORD *)&v34 + 1) = objc_claimAutoreleasedReturnValue();
      *(_QWORD *)&v34 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", buf);
    }
    else
    {
LABEL_26:
      v34 = 0uLL;
    }
    v14 = 0;
    v33 = v13;
    if ((v4 & 2) != 0)
    {
      ChapterData_CopyProperty();
      v15 = objc_alloc(MEMORY[0x1E0CB3940]);
      NSStringFromOSType(0);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      NSStringFromOSType(0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)objc_msgSend(v15, "initWithFormat:", CFSTR("loc/fmt=%@%@"), v16, v17);

      v13 = v33;
    }
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v13, "length"))
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("name = %@"), v13);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObject:", v19);

    }
    if (v34 != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("url = [%@: %@]"), *((_QWORD *)&v34 + 1), (_QWORD)v34);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObject:", v20);

    }
    if (v14)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("pic = %@"), v14);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObject:", v21);

    }
    v22 = (double)IndChapterTime / 1000.0;
    v23 = "";
    if (v22 < 100.0)
      v23 = " ";
    if (v22 >= 10.0)
      v24 = v23;
    else
      v24 = "  ";
    objc_msgSend(v18, "componentsJoinedByString:", CFSTR(", "));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString appendFormat:](v7, "appendFormat:", CFSTR("\t{%3d: time=%s%.2f, cookies(name=%2u, pic=%2u, url=%2u), %@"), v11, v24, *(_QWORD *)&v22, 0x7FFFFFFFLL, 0x7FFFFFFFLL, 0x7FFFFFFFLL, v25);

    -[__CFString appendString:](v7, "appendString:", CFSTR("\n"));
    v3 = v30;
    if (v31 == (_DWORD)v11)
      goto LABEL_43;
  }
  v29 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v37 = "NSString *MLDescriptionFromChapterData(ITChapterDataRef)";
    _os_log_impl(&dword_1AC149000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s unexpected error", buf, 0xCu);
  }

  v27 = 0;
LABEL_46:

  return v27;
}

id MLExtendedRatingStringFromDictionary(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  const __CFString *v5;
  __CFString *v6;
  const __CFString *v7;
  __CFString *v8;
  uint64_t v9;
  const __CFString *v10;
  __CFString *v11;
  const __CFString *v12;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", CFSTR("system"));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
    v5 = (const __CFString *)v3;
  else
    v5 = &stru_1E5B66908;
  objc_msgSend(v2, "appendFormat:", CFSTR("%@|"), v5);
  objc_msgSend(v1, "objectForKey:", CFSTR("label"));
  v6 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v6)
    v7 = v6;
  else
    v7 = &stru_1E5B66908;
  objc_msgSend(v2, "appendFormat:", CFSTR("%@|"), v7);
  objc_msgSend(v1, "objectForKey:", CFSTR("rank"));
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[__CFString stringValue](v8, "stringValue");
    v9 = objc_claimAutoreleasedReturnValue();

    v8 = (__CFString *)v9;
  }
  if (v8)
    v10 = v8;
  else
    v10 = &stru_1E5B66908;
  objc_msgSend(v2, "appendFormat:", CFSTR("%@|"), v10);
  objc_msgSend(v1, "objectForKey:", CFSTR("content"));
  v11 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v11)
    v12 = v11;
  else
    v12 = &stru_1E5B66908;
  objc_msgSend(v2, "appendString:", v12);

  return v2;
}

id MLExtendedRatingInfoDictionaryFromString(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    objc_msgSend(v1, "componentsSeparatedByString:", CFSTR("|"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "count");
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v2, "objectAtIndex:", 0);
      v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (v4 == 1)
      {
        v6 = &stru_1E5B66908;
        v7 = &stru_1E5B66908;
        v8 = &stru_1E5B66908;
      }
      else
      {
        objc_msgSend(v2, "objectAtIndex:", 1);
        v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
        if (v4 < 3)
        {
          v6 = &stru_1E5B66908;
          v7 = &stru_1E5B66908;
        }
        else
        {
          objc_msgSend(v2, "objectAtIndex:", 2);
          v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
          if (v4 == 3)
          {
            v6 = &stru_1E5B66908;
          }
          else
          {
            objc_msgSend(v2, "objectAtIndex:", 3);
            v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
        }
      }
    }
    else
    {
      v6 = &stru_1E5B66908;
      v7 = &stru_1E5B66908;
      v8 = &stru_1E5B66908;
      v5 = &stru_1E5B66908;
    }
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v5, CFSTR("ratingProvider"), v8, CFSTR("localizedRating"), v7, CFSTR("ratingLevel"), v6, CFSTR("localizedReason"), 0, CFSTR("debugInfo"), 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id MLLocalizedSeasonDisplayStringForSeasonNumber(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD block[4];
  int v8;

  if ((_DWORD)a1)
  {
    v2 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("Season %d"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringWithFormat:", v4, a1);
    v5 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __MLLocalizedSeasonDisplayStringForSeasonNumber_block_invoke;
    block[3] = &__block_descriptor_36_e5_v8__0l;
    v8 = 0;
    if (MLLocalizedSeasonDisplayStringForSeasonNumber_onceToken != -1)
      dispatch_once(&MLLocalizedSeasonDisplayStringForSeasonNumber_onceToken, block);
    v5 = (id)MLLocalizedSeasonDisplayStringForSeasonNumber_zeroSeasonString;
  }
  return v5;
}

uint64_t MLGetSeasonNumberForLocalizedSeasonDisplayString(void *a1)
{
  id v1;
  void *v2;
  id v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  unsigned int v8;

  v1 = a1;
  v8 = 0;
  if (objc_msgSend(v1, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Season %d"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v4 = (const char *)objc_msgSend(v3, "UTF8String");

    v5 = fmtcheck(v4, "Season %d");
    sscanf((const char *)objc_msgSend(objc_retainAutorelease(v1), "UTF8String"), v5, &v8);
    v6 = v8;
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

float MLScaledVolumeAdjustmentFromITValue(int a1)
{
  float result;

  result = (float)((float)((float)(a1 + 1000) / 2000.0) * 2.0) + 0.0;
  if (result < 0.0)
    result = 0.0;
  if (result > 2.0)
    return 2.0;
  return result;
}

uint64_t MLVolumeAdjustmentFromScaledValue(float a1)
{
  float v1;
  float v2;
  float v3;

  v1 = (float)(a1 * 2000.0) * 0.5;
  v2 = -1000.0;
  v3 = v1 + -1000.0;
  if (v3 >= -1000.0)
  {
    v2 = v3;
    if (v3 > 1000.0)
      v2 = 1000.0;
  }
  return (int)v2;
}

float MLScaledVolumeNormalizationFromITValue(unsigned int a1)
{
  double v1;
  float v2;

  v1 = 1.0;
  if ((unsigned __int16)(a1 + 1) >= 2u)
  {
    v2 = sqrt(1000.0 / (double)a1);
    v1 = v2;
  }
  if (v1 < 0.251188643)
    v1 = 0.251188636;
  if (v1 > 3.98107171)
    v1 = 3.98107171;
  return floor(log10(v1) * 20.0 + 0.5);
}

void MLChapterDataSetASCIIValue(uint64_t a1, void *a2)
{
  __CFString *v2;
  int CString;
  char buffer[2048];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = a2;
    -[__CFString length](v2, "length");
    bzero(buffer, 0x800uLL);
    CString = CFStringGetCString(v2, buffer, 2047, 0x600u);

    if (CString)
      ChapterData_SetProperty();
  }
}

void MLChapterDataSetUTF16Value(uint64_t a1, void *a2)
{
  __CFString *v2;
  int CString;
  _BYTE v4[510];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = a2;
    -[__CFString length](v2, "length");
    memset(v4, 0, sizeof(v4));
    CString = CFStringGetCString(v2, v4, 510, 0x10000100u);

    if (CString)
      ChapterData_SetProperty();
  }
}

void ML3AlbumArtistDatabaseImportDataSource::~ML3AlbumArtistDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3AlbumArtistDatabaseImportDataSource::getImportPropertyGroupKey(ML3AlbumArtistDatabaseImportDataSource *this)
{
  return 18;
}

uint64_t ML3AlbumArtistDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3AlbumArtistDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

id ML3AlbumArtistDatabaseImportDataSource::identityPropertyForSource(ML3AlbumArtistDatabaseImportDataSource *this, uint64_t a2)
{
  return ML3AlbumArtistRulesIdentityPropertyForSource(a2);
}

uint64_t ML3BaseLocationIDFromMediaRelativePathInLibrary(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "resourcesManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = ML3BaseLocationIDFromMediaRelativePathInResourceProvider(v4, v5);

  if (!v6)
    v6 = objc_msgSend(v3, "isHomeSharingLibrary");

  return v6;
}

uint64_t ML3BaseLocationIDFromMediaRelativePathInResourceProvider(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  void *v21;
  void *v22;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "length"))
  {
    v5 = 250;
    objc_msgSend(v4, "pathForBaseLocationPath:", 250);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "hasSuffix:", v3);

    if ((v7 & 1) == 0)
    {
      v5 = 300;
      objc_msgSend(v4, "pathForBaseLocationPath:", 300);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "hasSuffix:", v3);

      if ((v9 & 1) == 0)
      {
        v5 = 200;
        objc_msgSend(v4, "pathForBaseLocationPath:", 200);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "hasSuffix:", v3);

        if ((v11 & 1) == 0)
        {
          v5 = 100;
          objc_msgSend(v4, "pathForBaseLocationPath:", 100);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "hasSuffix:", v3);

          if ((v13 & 1) == 0)
          {
            v5 = 400;
            objc_msgSend(v4, "pathForBaseLocationPath:", 400);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = objc_msgSend(v14, "hasSuffix:", v3);

            if ((v15 & 1) == 0)
            {
              v5 = 500;
              objc_msgSend(v4, "pathForBaseLocationPath:", 500);
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = objc_msgSend(v16, "hasSuffix:", v3);

              if ((v17 & 1) == 0)
              {
                v5 = 600;
                objc_msgSend(v4, "pathForBaseLocationPath:", 600);
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                v19 = objc_msgSend(v18, "hasSuffix:", v3);

                if ((v19 & 1) == 0)
                {
                  objc_msgSend(v3, "stringByDeletingLastPathComponent");
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v4, "pathForResourceFileOrFolder:", 11);
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  if (objc_msgSend(v21, "hasSuffix:", v20))
                  {
                    objc_msgSend(v3, "substringFromIndex:", objc_msgSend(v3, "length") - 2);
                    v22 = (void *)objc_claimAutoreleasedReturnValue();
                    v5 = (int)(objc_msgSend(v22, "intValue") + 3840);

                  }
                  else
                  {
                    v5 = 0;
                  }

                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t __Block_byref_object_copy__8841(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8842(uint64_t a1)
{

}

__CFString *ML3ArtworkConfigurationStringForArtworkType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return 0;
  else
    return off_1E5B62858[a1 - 1];
}

const __CFString *ML3ArtworkConfigurationStringForMediaType(int a1)
{
  const __CFString *result;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  BOOL v12;
  const __CFString *v13;
  const __CFString *v14;

  result = 0;
  if (a1 > 255)
  {
    v3 = CFSTR("MLMediaTypeAny");
    if (a1 != 0xFFFFFF)
      v3 = 0;
    if (a1 == 65280)
      v4 = CFSTR("MLMediaTypeAnyVideo");
    else
      v4 = v3;
    v5 = CFSTR("MLMediaTypeVideoITunesU");
    v6 = CFSTR("MLMediaTypeHomeVideo");
    if (a1 != 0x2000)
      v6 = 0;
    if (a1 != 4096)
      v5 = v6;
    if (a1 <= 65279)
      v7 = v5;
    else
      v7 = v4;
    v8 = CFSTR("MLMediaTypeMusicVideo");
    v9 = CFSTR("MLMediaTypeMovie");
    if (a1 != 2048)
      v9 = 0;
    if (a1 != 1024)
      v8 = v9;
    v10 = CFSTR("MLMediaTypeVideoPodcast");
    v11 = CFSTR("MLMediaTypeTVShow");
    if (a1 != 512)
      v11 = 0;
    if (a1 != 256)
      v10 = v11;
    if (a1 <= 1023)
      v8 = v10;
    v12 = a1 <= 4095;
  }
  else
  {
    if (a1 <= 15)
    {
      switch(a1)
      {
        case 1:
          result = CFSTR("MLMediaTypeMusicQuiz");
          break;
        case 2:
          result = CFSTR("MLMediaTypeAudioBook");
          break;
        case 4:
          result = CFSTR("MLMediaTypePodcast");
          break;
        case 8:
          result = CFSTR("MLMediaTypeSong");
          break;
        default:
          return result;
      }
      return result;
    }
    v7 = CFSTR("MLMediaTypeDigitalBooklet");
    v13 = CFSTR("MLMediaTypeAnyAudio");
    if (a1 != 255)
      v13 = 0;
    if (a1 != 64)
      v7 = v13;
    v8 = CFSTR("MLMediaTypeVoiceMemo");
    v14 = CFSTR("MLMediaTypeITunesUAudio");
    if (a1 != 32)
      v14 = 0;
    if (a1 != 16)
      v8 = v14;
    v12 = a1 <= 63;
  }
  if (v12)
    return v8;
  else
    return v7;
}

uint64_t ML3ArtworkConfigurationArtworkTypeForString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ML3ArtworkTypeItem")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ML3ArtworkTypeScreenshot")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ML3ArtworkTypeChapter")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ML3ArtworkTypeArtistHero")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("ML3ArtworkTypePlaylist")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t MIPSeriesReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 24;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_36;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_36:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 16;
      }
      v26 = *(void **)(a1 + v25);
      *(_QWORD *)(a1 + v25) = v24;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MIPPlaylistReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  MIPSmartPlaylistInfo *v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  char v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  char v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  char v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  char v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  char v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  char v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  uint64_t v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  uint64_t v166;
  unint64_t v167;
  char v168;
  char v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  char v174;
  unsigned int v175;
  uint64_t v176;
  unint64_t v177;
  char v178;
  char v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  char v183;
  char v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  void *v195;
  char v196;
  unsigned int v197;
  uint64_t v198;
  unint64_t v199;
  char v200;
  char v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char v206;
  char v207;
  unsigned int v208;
  uint64_t v209;
  unint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  BOOL v214;
  uint64_t v215;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 224;
        goto LABEL_270;
      case 2u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_QWORD *)(a1 + 340) |= 0x100uLL;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_299;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_299:
        v212 = 72;
        goto LABEL_428;
      case 3u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x400000uLL;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_303;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_303:
        v213 = 324;
        goto LABEL_438;
      case 4u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        *(_QWORD *)(a1 + 340) |= 0x20000000uLL;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v35 = 0;
                goto LABEL_307;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v35 = 0;
LABEL_307:
        v214 = v35 != 0;
        v215 = 334;
        goto LABEL_433;
      case 5u:
        v19 = objc_alloc_init(MIPSmartPlaylistInfo);
        objc_storeStrong((id *)(a1 + 288), v19);
        if (!PBReaderPlaceMark() || (MIPSmartPlaylistInfoReadFrom((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_441;
        goto LABEL_295;
      case 6u:
        v39 = 0;
        v40 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x20000uLL;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v29 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_311;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_311:
        v213 = 296;
        goto LABEL_438;
      case 7u:
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_QWORD *)(a1 + 340) |= 0x100000000uLL;
        while (2)
        {
          v47 = *v3;
          v48 = *(_QWORD *)(a2 + v47);
          if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v48 + 1;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v14 = v45++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_315;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
LABEL_315:
        v214 = v46 != 0;
        v215 = 337;
        goto LABEL_433;
      case 8u:
        v19 = objc_alloc_init(MIPMultiverseIdentifier);
        v50 = 232;
        goto LABEL_64;
      case 9u:
        v19 = objc_alloc_init(MIPMultiverseIdentifier);
        v50 = 200;
LABEL_64:
        objc_storeStrong((id *)(a1 + v50), v19);
        goto LABEL_293;
      case 0xAu:
        v51 = 0;
        v52 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x800uLL;
        while (2)
        {
          v53 = *v3;
          v54 = *(_QWORD *)(a2 + v53);
          if (v54 == -1 || v54 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v54);
            *(_QWORD *)(a2 + v53) = v54 + 1;
            v29 |= (unint64_t)(v55 & 0x7F) << v51;
            if (v55 < 0)
            {
              v51 += 7;
              v14 = v52++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_319;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_319:
        v213 = 168;
        goto LABEL_438;
      case 0xBu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 120;
        goto LABEL_270;
      case 0xCu:
        v56 = 0;
        v57 = 0;
        v58 = 0;
        *(_QWORD *)(a1 + 340) |= 0x2000000uLL;
        while (2)
        {
          v59 = *v3;
          v60 = *(_QWORD *)(a2 + v59);
          if (v60 == -1 || v60 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v60);
            *(_QWORD *)(a2 + v59) = v60 + 1;
            v58 |= (unint64_t)(v61 & 0x7F) << v56;
            if (v61 < 0)
            {
              v56 += 7;
              v14 = v57++ >= 9;
              if (v14)
              {
                v58 = 0;
                goto LABEL_323;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v58 = 0;
LABEL_323:
        v214 = v58 != 0;
        v215 = 330;
        goto LABEL_433;
      case 0xDu:
        v62 = 0;
        v63 = 0;
        v64 = 0;
        *(_QWORD *)(a1 + 340) |= 0x800000uLL;
        while (2)
        {
          v65 = *v3;
          v66 = *(_QWORD *)(a2 + v65);
          if (v66 == -1 || v66 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v67 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v66);
            *(_QWORD *)(a2 + v65) = v66 + 1;
            v64 |= (unint64_t)(v67 & 0x7F) << v62;
            if (v67 < 0)
            {
              v62 += 7;
              v14 = v63++ >= 9;
              if (v14)
              {
                v64 = 0;
                goto LABEL_327;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v64 = 0;
LABEL_327:
        v214 = v64 != 0;
        v215 = 328;
        goto LABEL_433;
      case 0xEu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 184;
        goto LABEL_270;
      case 0xFu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 176;
        goto LABEL_270;
      case 0x10u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 192;
        goto LABEL_270;
      case 0x11u:
        v68 = 0;
        v69 = 0;
        v70 = 0;
        *(_QWORD *)(a1 + 340) |= 0x10000000uLL;
        while (2)
        {
          v71 = *v3;
          v72 = *(_QWORD *)(a2 + v71);
          if (v72 == -1 || v72 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v72);
            *(_QWORD *)(a2 + v71) = v72 + 1;
            v70 |= (unint64_t)(v73 & 0x7F) << v68;
            if (v73 < 0)
            {
              v68 += 7;
              v14 = v69++ >= 9;
              if (v14)
              {
                v70 = 0;
                goto LABEL_331;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v70 = 0;
LABEL_331:
        v214 = v70 != 0;
        v215 = 333;
        goto LABEL_433;
      case 0x12u:
        v74 = 0;
        v75 = 0;
        v23 = 0;
        *(_QWORD *)(a1 + 340) |= 8uLL;
        while (2)
        {
          v76 = *v3;
          v77 = *(_QWORD *)(a2 + v76);
          if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v77);
            *(_QWORD *)(a2 + v76) = v77 + 1;
            v23 |= (unint64_t)(v78 & 0x7F) << v74;
            if (v78 < 0)
            {
              v74 += 7;
              v14 = v75++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_335;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_335:
        v212 = 32;
        goto LABEL_428;
      case 0x13u:
        v79 = 0;
        v80 = 0;
        v23 = 0;
        *(_QWORD *)(a1 + 340) |= 0x80uLL;
        while (2)
        {
          v81 = *v3;
          v82 = *(_QWORD *)(a2 + v81);
          if (v82 == -1 || v82 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v83 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v82);
            *(_QWORD *)(a2 + v81) = v82 + 1;
            v23 |= (unint64_t)(v83 & 0x7F) << v79;
            if (v83 < 0)
            {
              v79 += 7;
              v14 = v80++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_339;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_339:
        v212 = 64;
        goto LABEL_428;
      case 0x14u:
        v84 = 0;
        v85 = 0;
        v23 = 0;
        *(_QWORD *)(a1 + 340) |= 0x10uLL;
        while (2)
        {
          v86 = *v3;
          v87 = *(_QWORD *)(a2 + v86);
          if (v87 == -1 || v87 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v88 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v87);
            *(_QWORD *)(a2 + v86) = v87 + 1;
            v23 |= (unint64_t)(v88 & 0x7F) << v84;
            if (v88 < 0)
            {
              v84 += 7;
              v14 = v85++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_343;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_343:
        v212 = 40;
        goto LABEL_428;
      case 0x15u:
        v89 = 0;
        v90 = 0;
        v91 = 0;
        *(_QWORD *)(a1 + 340) |= 0x1000000uLL;
        while (2)
        {
          v92 = *v3;
          v93 = *(_QWORD *)(a2 + v92);
          if (v93 == -1 || v93 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v94 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v93);
            *(_QWORD *)(a2 + v92) = v93 + 1;
            v91 |= (unint64_t)(v94 & 0x7F) << v89;
            if (v94 < 0)
            {
              v89 += 7;
              v14 = v90++ >= 9;
              if (v14)
              {
                v91 = 0;
                goto LABEL_347;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v91 = 0;
LABEL_347:
        v214 = v91 != 0;
        v215 = 329;
        goto LABEL_433;
      case 0x16u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 136;
        goto LABEL_270;
      case 0x17u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 80;
        goto LABEL_270;
      case 0x18u:
        v95 = 0;
        v96 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x1000uLL;
        while (2)
        {
          v97 = *v3;
          v98 = *(_QWORD *)(a2 + v97);
          if (v98 == -1 || v98 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v99 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v98);
            *(_QWORD *)(a2 + v97) = v98 + 1;
            v29 |= (unint64_t)(v99 & 0x7F) << v95;
            if (v99 < 0)
            {
              v95 += 7;
              v14 = v96++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_351;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_351:
        v213 = 216;
        goto LABEL_438;
      case 0x19u:
        v100 = 0;
        v101 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x8000uLL;
        while (2)
        {
          v102 = *v3;
          v103 = *(_QWORD *)(a2 + v102);
          if (v103 == -1 || v103 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v104 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v103);
            *(_QWORD *)(a2 + v102) = v103 + 1;
            v29 |= (unint64_t)(v104 & 0x7F) << v100;
            if (v104 < 0)
            {
              v100 += 7;
              v14 = v101++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_355;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_355:
        v213 = 264;
        goto LABEL_438;
      case 0x1Au:
        v105 = 0;
        v106 = 0;
        v107 = 0;
        *(_QWORD *)(a1 + 340) |= 0x80000000uLL;
        while (2)
        {
          v108 = *v3;
          v109 = *(_QWORD *)(a2 + v108);
          if (v109 == -1 || v109 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v110 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v109);
            *(_QWORD *)(a2 + v108) = v109 + 1;
            v107 |= (unint64_t)(v110 & 0x7F) << v105;
            if (v110 < 0)
            {
              v105 += 7;
              v14 = v106++ >= 9;
              if (v14)
              {
                v107 = 0;
                goto LABEL_359;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v107 = 0;
LABEL_359:
        v214 = v107 != 0;
        v215 = 336;
        goto LABEL_433;
      case 0x1Bu:
        v111 = 0;
        v112 = 0;
        v113 = 0;
        *(_QWORD *)(a1 + 340) |= 0x8000000uLL;
        while (2)
        {
          v114 = *v3;
          v115 = *(_QWORD *)(a2 + v114);
          if (v115 == -1 || v115 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v116 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v115);
            *(_QWORD *)(a2 + v114) = v115 + 1;
            v113 |= (unint64_t)(v116 & 0x7F) << v111;
            if (v116 < 0)
            {
              v111 += 7;
              v14 = v112++ >= 9;
              if (v14)
              {
                v113 = 0;
                goto LABEL_363;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v113 = 0;
LABEL_363:
        v214 = v113 != 0;
        v215 = 332;
        goto LABEL_433;
      case 0x1Cu:
        v117 = 0;
        v118 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x2000uLL;
        while (2)
        {
          v119 = *v3;
          v120 = *(_QWORD *)(a2 + v119);
          if (v120 == -1 || v120 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v121 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v120);
            *(_QWORD *)(a2 + v119) = v120 + 1;
            v29 |= (unint64_t)(v121 & 0x7F) << v117;
            if (v121 < 0)
            {
              v117 += 7;
              v14 = v118++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_367;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_367:
        v213 = 240;
        goto LABEL_438;
      case 0x1Du:
        v122 = 0;
        v123 = 0;
        v124 = 0;
        *(_QWORD *)(a1 + 340) |= 0x200000000uLL;
        while (2)
        {
          v125 = *v3;
          v126 = *(_QWORD *)(a2 + v125);
          if (v126 == -1 || v126 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v127 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v126);
            *(_QWORD *)(a2 + v125) = v126 + 1;
            v124 |= (unint64_t)(v127 & 0x7F) << v122;
            if (v127 < 0)
            {
              v122 += 7;
              v14 = v123++ >= 9;
              if (v14)
              {
                v124 = 0;
                goto LABEL_371;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v124 = 0;
LABEL_371:
        v214 = v124 != 0;
        v215 = 338;
        goto LABEL_433;
      case 0x1Eu:
        v128 = 0;
        v129 = 0;
        v130 = 0;
        *(_QWORD *)(a1 + 340) |= 0x400000000uLL;
        while (2)
        {
          v131 = *v3;
          v132 = *(_QWORD *)(a2 + v131);
          if (v132 == -1 || v132 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v133 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v132);
            *(_QWORD *)(a2 + v131) = v132 + 1;
            v130 |= (unint64_t)(v133 & 0x7F) << v128;
            if (v133 < 0)
            {
              v128 += 7;
              v14 = v129++ >= 9;
              if (v14)
              {
                v130 = 0;
                goto LABEL_375;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v130 = 0;
LABEL_375:
        v214 = v130 != 0;
        v215 = 339;
        goto LABEL_433;
      case 0x1Fu:
        v134 = 0;
        v135 = 0;
        v23 = 0;
        *(_QWORD *)(a1 + 340) |= 1uLL;
        while (2)
        {
          v136 = *v3;
          v137 = *(_QWORD *)(a2 + v136);
          if (v137 == -1 || v137 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v138 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v137);
            *(_QWORD *)(a2 + v136) = v137 + 1;
            v23 |= (unint64_t)(v138 & 0x7F) << v134;
            if (v138 < 0)
            {
              v134 += 7;
              v14 = v135++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_379;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_379:
        v212 = 8;
        goto LABEL_428;
      case 0x20u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 88;
        goto LABEL_270;
      case 0x21u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 104;
        goto LABEL_270;
      case 0x22u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 96;
        goto LABEL_270;
      case 0x23u:
        v139 = 0;
        v140 = 0;
        v23 = 0;
        *(_QWORD *)(a1 + 340) |= 0x40uLL;
        while (2)
        {
          v141 = *v3;
          v142 = *(_QWORD *)(a2 + v141);
          if (v142 == -1 || v142 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v143 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v142);
            *(_QWORD *)(a2 + v141) = v142 + 1;
            v23 |= (unint64_t)(v143 & 0x7F) << v139;
            if (v143 < 0)
            {
              v139 += 7;
              v14 = v140++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_383;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_383:
        v212 = 56;
        goto LABEL_428;
      case 0x24u:
        v144 = 0;
        v145 = 0;
        v23 = 0;
        *(_QWORD *)(a1 + 340) |= 2uLL;
        while (2)
        {
          v146 = *v3;
          v147 = *(_QWORD *)(a2 + v146);
          if (v147 == -1 || v147 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v148 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v147);
            *(_QWORD *)(a2 + v146) = v147 + 1;
            v23 |= (unint64_t)(v148 & 0x7F) << v144;
            if (v148 < 0)
            {
              v144 += 7;
              v14 = v145++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_387;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_387:
        v212 = 16;
        goto LABEL_428;
      case 0x25u:
        v149 = 0;
        v150 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x40000uLL;
        while (2)
        {
          v151 = *v3;
          v152 = *(_QWORD *)(a2 + v151);
          if (v152 == -1 || v152 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v153 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v152);
            *(_QWORD *)(a2 + v151) = v152 + 1;
            v29 |= (unint64_t)(v153 & 0x7F) << v149;
            if (v153 < 0)
            {
              v149 += 7;
              v14 = v150++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_391;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_391:
        v213 = 300;
        goto LABEL_438;
      case 0x26u:
        v154 = 0;
        v155 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x100000uLL;
        while (2)
        {
          v156 = *v3;
          v157 = *(_QWORD *)(a2 + v156);
          if (v157 == -1 || v157 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v158 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v157);
            *(_QWORD *)(a2 + v156) = v157 + 1;
            v29 |= (unint64_t)(v158 & 0x7F) << v154;
            if (v158 < 0)
            {
              v154 += 7;
              v14 = v155++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_395;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_395:
        v213 = 308;
        goto LABEL_438;
      case 0x27u:
        v159 = 0;
        v160 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x80000uLL;
        while (2)
        {
          v161 = *v3;
          v162 = *(_QWORD *)(a2 + v161);
          if (v162 == -1 || v162 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v163 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v162);
            *(_QWORD *)(a2 + v161) = v162 + 1;
            v29 |= (unint64_t)(v163 & 0x7F) << v159;
            if (v163 < 0)
            {
              v159 += 7;
              v14 = v160++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_399;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_399:
        v213 = 304;
        goto LABEL_438;
      case 0x28u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 312;
        goto LABEL_270;
      case 0x29u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 248;
        goto LABEL_270;
      case 0x2Au:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 128;
        goto LABEL_270;
      case 0x2Bu:
        v164 = 0;
        v165 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x10000uLL;
        while (2)
        {
          v166 = *v3;
          v167 = *(_QWORD *)(a2 + v166);
          if (v167 == -1 || v167 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v168 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v167);
            *(_QWORD *)(a2 + v166) = v167 + 1;
            v29 |= (unint64_t)(v168 & 0x7F) << v164;
            if (v168 < 0)
            {
              v164 += 7;
              v14 = v165++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_403;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_403:
        v213 = 280;
        goto LABEL_438;
      case 0x2Cu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 272;
        goto LABEL_270;
      case 0x2Du:
        v169 = 0;
        v170 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x4000uLL;
        while (2)
        {
          v171 = *v3;
          v172 = *(_QWORD *)(a2 + v171);
          if (v172 == -1 || v172 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v173 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v172);
            *(_QWORD *)(a2 + v171) = v172 + 1;
            v29 |= (unint64_t)(v173 & 0x7F) << v169;
            if (v173 < 0)
            {
              v169 += 7;
              v14 = v170++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_407;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_407:
        v213 = 244;
        goto LABEL_438;
      case 0x2Eu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 256;
        goto LABEL_270;
      case 0x2Fu:
        v174 = 0;
        v175 = 0;
        v23 = 0;
        *(_QWORD *)(a1 + 340) |= 0x20uLL;
        while (2)
        {
          v176 = *v3;
          v177 = *(_QWORD *)(a2 + v176);
          if (v177 == -1 || v177 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v178 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v177);
            *(_QWORD *)(a2 + v176) = v177 + 1;
            v23 |= (unint64_t)(v178 & 0x7F) << v174;
            if (v178 < 0)
            {
              v174 += 7;
              v14 = v175++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_411;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_411:
        v212 = 48;
        goto LABEL_428;
      case 0x30u:
        v179 = 0;
        v180 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x200000uLL;
        while (2)
        {
          v181 = *v3;
          v182 = *(_QWORD *)(a2 + v181);
          if (v182 == -1 || v182 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v183 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v182);
            *(_QWORD *)(a2 + v181) = v182 + 1;
            v29 |= (unint64_t)(v183 & 0x7F) << v179;
            if (v183 < 0)
            {
              v179 += 7;
              v14 = v180++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_415;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_415:
        v213 = 320;
        goto LABEL_438;
      case 0x31u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 160;
        goto LABEL_270;
      case 0x32u:
        v184 = 0;
        v185 = 0;
        v186 = 0;
        *(_QWORD *)(a1 + 340) |= 0x40000000uLL;
        while (2)
        {
          v187 = *v3;
          v188 = *(_QWORD *)(a2 + v187);
          if (v188 == -1 || v188 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v189 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v188);
            *(_QWORD *)(a2 + v187) = v188 + 1;
            v186 |= (unint64_t)(v189 & 0x7F) << v184;
            if (v189 < 0)
            {
              v184 += 7;
              v14 = v185++ >= 9;
              if (v14)
              {
                v186 = 0;
                goto LABEL_419;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v186 = 0;
LABEL_419:
        v214 = v186 != 0;
        v215 = 335;
        goto LABEL_433;
      case 0x33u:
        v190 = 0;
        v191 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x200uLL;
        while (2)
        {
          v192 = *v3;
          v193 = *(_QWORD *)(a2 + v192);
          if (v193 == -1 || v193 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v194 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v193);
            *(_QWORD *)(a2 + v192) = v193 + 1;
            v29 |= (unint64_t)(v194 & 0x7F) << v190;
            if (v194 < 0)
            {
              v190 += 7;
              v14 = v191++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_423;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_423:
        v213 = 152;
        goto LABEL_438;
      case 0x34u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 144;
LABEL_270:
        v195 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_439;
      case 0x35u:
        v196 = 0;
        v197 = 0;
        v23 = 0;
        *(_QWORD *)(a1 + 340) |= 4uLL;
        while (2)
        {
          v198 = *v3;
          v199 = *(_QWORD *)(a2 + v198);
          if (v199 == -1 || v199 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v200 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v199);
            *(_QWORD *)(a2 + v198) = v199 + 1;
            v23 |= (unint64_t)(v200 & 0x7F) << v196;
            if (v200 < 0)
            {
              v196 += 7;
              v14 = v197++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_427;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_427:
        v212 = 24;
LABEL_428:
        *(_QWORD *)(a1 + v212) = v23;
        goto LABEL_439;
      case 0x36u:
        v201 = 0;
        v202 = 0;
        v203 = 0;
        *(_QWORD *)(a1 + 340) |= 0x4000000uLL;
        while (2)
        {
          v204 = *v3;
          v205 = *(_QWORD *)(a2 + v204);
          if (v205 == -1 || v205 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v206 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v205);
            *(_QWORD *)(a2 + v204) = v205 + 1;
            v203 |= (unint64_t)(v206 & 0x7F) << v201;
            if (v206 < 0)
            {
              v201 += 7;
              v14 = v202++ >= 9;
              if (v14)
              {
                v203 = 0;
                goto LABEL_432;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v203 = 0;
LABEL_432:
        v214 = v203 != 0;
        v215 = 331;
LABEL_433:
        *(_BYTE *)(a1 + v215) = v214;
        goto LABEL_439;
      case 0x37u:
        v207 = 0;
        v208 = 0;
        v29 = 0;
        *(_QWORD *)(a1 + 340) |= 0x400uLL;
        while (2)
        {
          v209 = *v3;
          v210 = *(_QWORD *)(a2 + v209);
          if (v210 == -1 || v210 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v211 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v210);
            *(_QWORD *)(a2 + v209) = v210 + 1;
            v29 |= (unint64_t)(v211 & 0x7F) << v207;
            if (v211 < 0)
            {
              v207 += 7;
              v14 = v208++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_437;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_437:
        v213 = 156;
LABEL_438:
        *(_DWORD *)(a1 + v213) = v29;
        goto LABEL_439;
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x51u:
      case 0x52u:
      case 0x53u:
      case 0x54u:
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
      case 0x59u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
        goto LABEL_22;
      case 0x64u:
        v19 = objc_alloc_init(MIPMultiverseIdentifier);
        objc_msgSend((id)a1, "addChildIdentifiers:", v19);
        goto LABEL_293;
      default:
        if ((v10 >> 3) != 200)
        {
LABEL_22:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_439;
        }
        v19 = objc_alloc_init(MIPMultiverseIdentifier);
        objc_msgSend((id)a1, "addItems:", v19);
LABEL_293:
        if (PBReaderPlaceMark() && (MIPMultiverseIdentifierReadFrom(v19, a2) & 1) != 0)
        {
LABEL_295:
          PBReaderRecallMark();

LABEL_439:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_441:

        return 0;
    }
  }
}

uint64_t ML3MigrationGetLatestVersion()
{
  return 2200070;
}

uint64_t ML3MigrationMigrateLibraryToCurrentVersion(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  os_log_t v8;
  void *v9;
  uint64_t v10;
  ML3MigrationDirectives *v11;
  int v12;
  void *v13;
  void *v14;
  int v15;
  NSObject *v16;
  _BOOL4 v17;
  void *v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  unsigned int v23;
  uint8_t v25[16];
  _QWORD v26[4];
  id v27;
  os_log_t v28;
  id v29;
  uint64_t *v30;
  __int128 *p_buf;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  __int128 buf;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = +[ML3MusicLibrary userVersionUsingConnection:](ML3MusicLibrary, "userVersionUsingConnection:", v6);
  if ((_DWORD)v7 == 2200070 || !objc_msgSend(v5, "isHomeSharingLibrary"))
  {
    v11 = -[ML3MigrationDirectives initWithOriginalUserVersion:]([ML3MigrationDirectives alloc], "initWithOriginalUserVersion:", v7);
    __exceptionsEnabled = 0;
    v33 = 0;
    v34 = &v33;
    v35 = 0x2020000000;
    v36 = 0;
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v38 = 0x3032000000;
    v39 = __Block_byref_object_copy__9536;
    v40 = __Block_byref_object_dispose__9537;
    v41 = 0;
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __ML3MigrationMigrateLibraryToCurrentVersion_block_invoke;
    v26[3] = &unk_1E5B62B50;
    v30 = &v33;
    v27 = v6;
    v8 = v11;
    v32 = 2200070;
    v28 = v8;
    p_buf = &buf;
    v29 = v5;
    v12 = objc_msgSend(v27, "performTransactionWithBlock:", v26);
    if (MSVDeviceOSIsInternalInstall()
      && (objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"),
          v13 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v13, "objectForKey:", CFSTR("MLTestHookFailMigration")),
          v14 = (void *)objc_claimAutoreleasedReturnValue(),
          v15 = objc_msgSend(v14, "BOOLValue"),
          v14,
          v13,
          v15))
    {
      v16 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v25 = 0;
        _os_log_impl(&dword_1AC149000, v16, OS_LOG_TYPE_DEFAULT, "[Migration] Test hook is set to fail migration.", v25, 2u);
      }

      v17 = a3 != 0;
      if (a3)
      {
        v18 = *(void **)(*((_QWORD *)&buf + 1) + 40);
        if (v18)
        {
          v12 = 0;
LABEL_15:
          v19 = objc_retainAutorelease(v18);
LABEL_24:
          *a3 = v19;
          goto LABEL_25;
        }
      }
    }
    else
    {
      v17 = a3 != 0;
      if (a3)
      {
        v18 = *(void **)(*((_QWORD *)&buf + 1) + 40);
        if (v18)
          goto LABEL_15;
      }
      if ((v12 & 1) != 0)
      {
        v12 = 1;
LABEL_25:
        __exceptionsEnabled = 1;
        v22 = MSVDeviceSupportsSideLoadedMediaContent();
        if (*((_BYTE *)v34 + 24))
          v23 = v12;
        else
          v23 = 0;
        if (v22)
          v10 = *((_BYTE *)v34 + 24) != 0;
        else
          v10 = v23;

        _Block_object_dispose(&buf, 8);
        _Block_object_dispose(&v33, 8);
        goto LABEL_32;
      }
    }
    v20 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1AC149000, v20, OS_LOG_TYPE_DEFAULT, "[Migration] Failed to commit transaction.", v25, 2u);
    }

    v21 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1AC149000, v21, OS_LOG_TYPE_FAULT, "Failed to commit transaction during migration", v25, 2u);
    }

    if (!v17)
    {
      v12 = 0;
      goto LABEL_25;
    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("ML3DatabaseErrorDomain"), -1, 0);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    v12 = 0;
    goto LABEL_24;
  }
  v8 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v6, "databasePath");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v9;
    _os_log_impl(&dword_1AC149000, v8, OS_LOG_TYPE_DEFAULT, "[Migration] HomeSharing library at %{public}@ has old schema", (uint8_t *)&buf, 0xCu);

  }
  v10 = 0;
LABEL_32:

  return v10;
}

void sub_1AC2CA164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9536(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9537(uint64_t a1)
{

}

id _ML3MigrationCreateMigrationError(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v8 = *MEMORY[0x1E0CB2D50];
    v9[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("ML3MigrationErrorDomain"), a1, v5);

  return v6;
}

uint64_t _ML3MigrationPerformPostMigration(void *a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  _BOOL4 v13;
  NSObject *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  id *v19;
  const __CFString *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  NSObject *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t k;
  void *v57;
  void *v58;
  NSObject *v59;
  void *v60;
  uint64_t v61;
  NSObject *v62;
  NSObject *v63;
  void *v64;
  NSObject *v65;
  void *v66;
  _BOOL4 v67;
  NSObject *v68;
  void *v69;
  _BOOL4 v70;
  NSObject *v71;
  NSObject *v72;
  NSObject *v73;
  NSObject *v74;
  uint64_t v76;
  _BOOL4 v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  id v83;
  id v84;
  _QWORD v85[4];
  id v86;
  _QWORD v87[4];
  id v88;
  _QWORD v89[7];
  _QWORD v90[4];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _QWORD v95[4];
  id v96;
  _QWORD v97[4];
  id v98;
  _QWORD v99[4];
  id v100;
  _QWORD v101[4];
  id v102;
  _QWORD v103[4];
  id v104;
  _QWORD v105[4];
  id v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _QWORD v111[4];
  id v112;
  _QWORD v113[4];
  id v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  int v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE v127[128];
  _QWORD v128[3];
  char v129;
  _QWORD v130[3];
  _QWORD v131[4];
  _BYTE v132[128];
  _BYTE v133[128];
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v84 = a1;
  v82 = a2;
  v81 = a3;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = 0u;
  +[ML3MusicLibrary allTables](ML3MusicLibrary, "allTables");
  v83 = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v115, v133, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v116;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v116 != v6)
          objc_enumerationMutation(v83);
        v8 = *(void **)(*((_QWORD *)&v115 + 1) + 8 * i);
        if ((objc_msgSend(v8, "isEqualToString:", CFSTR("sort_map")) & 1) == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT COUNT(name) FROM sqlite_master WHERE type='table' AND name = '%@';"),
            v8);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v84, "executeQuery:", v9);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "int64ValueForFirstRowAndColumn") == 0;

          if (v11)
          {
            v21 = os_log_create("com.apple.amp.medialibrary", "Default");
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v128[0]) = 138543362;
              *(_QWORD *)((char *)v128 + 4) = v8;
              _os_log_impl(&dword_1AC149000, v21, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check failure: Database is missing table %{public}@", (uint8_t *)v128, 0xCu);
            }

            v22 = 0;
            goto LABEL_93;
          }
        }
      }
      v5 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v115, v133, 16);
      if (v5)
        continue;
      break;
    }
  }

  objc_msgSend(v84, "executeQuery:", CFSTR("SELECT COUNT(name) FROM sqlite_master WHERE type='table' AND name = 'sort_map';"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "int64ValueForFirstRowAndColumn") == 0;

  if (v13)
  {
    v14 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v128[0]) = 0;
      _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check failure: Database is missing sort_map, rebuilding", (uint8_t *)v128, 2u);
    }

    objc_msgSend(v82, "updateSortMapOnConnection:forceUpdateOriginals:", v84, 1);
  }
  objc_msgSend(v84, "executeQuery:", CFSTR("SELECT COUNT() FROM item"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v80 = objc_msgSend(v15, "int64ValueForFirstRowAndColumn");

  objc_msgSend(v84, "executeQuery:", CFSTR("SELECT COUNT() FROM item_extra"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v79 = objc_msgSend(v16, "int64ValueForFirstRowAndColumn");

  v77 = v80 != v79;
  if (v80 != v79)
  {
    v17 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v128[0]) = 134218240;
      *(_QWORD *)((char *)v128 + 4) = v80;
      WORD2(v128[1]) = 2048;
      *(_QWORD *)((char *)&v128[1] + 6) = v79;
      _os_log_impl(&dword_1AC149000, v17, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check recoverable condition: %lli items in item and %lli items in item_extra", (uint8_t *)v128, 0x16u);
    }

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v78 = (id)objc_claimAutoreleasedReturnValue();
    if (v80 <= v79)
    {
      if (v80 >= v79)
      {
LABEL_25:
        objc_msgSend(v84, "executeUpdate:", CFSTR("DELETE FROM item_stats WHERE item_pid IN (SELECT item_stats.item_pid FROM item_stats LEFT OUTER JOIN item ON item_stats.item_pid=item.item_pid WHERE item.item_pid ISNULL)"));
        objc_msgSend(v84, "executeUpdate:", CFSTR("DELETE FROM item_search WHERE item_pid IN (SELECT item_search.item_pid FROM item_search LEFT OUTER JOIN item ON item_search.item_pid=item.item_pid WHERE item.item_pid ISNULL)"));
        objc_msgSend(v84, "executeUpdate:", CFSTR("DELETE FROM item_store WHERE item_pid IN (SELECT item_store.item_pid FROM item_store LEFT OUTER JOIN item ON item_store.item_pid=item.item_pid WHERE item.item_pid ISNULL)"));
        objc_msgSend(v84, "executeUpdate:", CFSTR("DELETE FROM item_playback WHERE item_pid IN (SELECT item_playback.item_pid FROM item_playback LEFT OUTER JOIN item ON item_playback.item_pid=item.item_pid WHERE item.item_pid ISNULL)"));
        objc_msgSend(v84, "executeUpdate:", CFSTR("DELETE FROM item_video WHERE Item_pid IN (SELECT item_video.item_pid FROM item_video LEFT OUTER JOIN item ON item_video.item_pid=item.item_pid WHERE item.item_pid ISNULL)"));
        if (objc_msgSend(v78, "count"))
        {
          v23 = os_log_create("com.apple.amp.medialibrary", "Default");
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v128[0]) = 138543362;
            *(_QWORD *)((char *)v128 + 4) = v78;
            _os_log_impl(&dword_1AC149000, v23, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check: Incrementing revision for removed tracks: %{public}@", (uint8_t *)v128, 0xCu);
          }

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", +[ML3Track revisionTrackingCode](ML3Track, "revisionTrackingCode"));
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          v108 = 0u;
          v83 = v78;
          v25 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v107, v132, 16);
          if (v25)
          {
            v26 = *(_QWORD *)v108;
            do
            {
              for (j = 0; j != v25; ++j)
              {
                if (*(_QWORD *)v108 != v26)
                  objc_enumerationMutation(v83);
                v131[0] = *(_QWORD *)(*((_QWORD *)&v107 + 1) + 8 * j);
                v28 = v131[0];
                v131[1] = &unk_1E5BAB298;
                v131[2] = v24;
                v131[3] = &unk_1E5BAB280;
                objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v131, 4);
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v84, "executeUpdate:withParameters:error:", CFSTR("REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES (?, ?, ?, ?)"), v29, 0);

                v130[0] = &unk_1E5BAB280;
                v130[1] = v24;
                v130[2] = v28;
                objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v130, 3);
                v30 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v84, "executeUpdate:withParameters:error:", CFSTR("DELETE FROM entity_revision WHERE revision_type > ? AND class = ? AND entity_pid = ?"), v30, 0);

              }
              v25 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v107, v132, 16);
            }
            while (v25);
          }

        }
        goto LABEL_37;
      }
      objc_msgSend(v84, "executeQuery:", CFSTR("SELECT ROWID FROM item_extra WHERE item_pid IN (SELECT item_extra.item_pid FROM item_extra LEFT OUTER JOIN item ON item_extra.item_pid=item.item_pid WHERE item.item_pid ISNULL)"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v111[0] = MEMORY[0x1E0C809B0];
      v111[1] = 3221225472;
      v111[2] = ___ML3MigrationPerformPostMigration_block_invoke_2;
      v111[3] = &unk_1E5B65EE0;
      v112 = v78;
      objc_msgSend(v18, "enumerateRowsWithBlock:", v111);
      v19 = &v112;
      v20 = CFSTR("DELETE FROM item_extra WHERE item_pid IN (SELECT item_extra.item_pid FROM item_extra LEFT OUTER JOIN item ON item_extra.item_pid=item.item_pid WHERE item.item_pid ISNULL)");
    }
    else
    {
      objc_msgSend(v84, "executeQuery:", CFSTR("SELECT ROWID FROM item WHERE item_pid IN (SELECT item.item_pid FROM item LEFT OUTER JOIN item_extra ON item.item_pid=item_extra.item_pid WHERE item_extra.item_pid ISNULL)"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v113[0] = MEMORY[0x1E0C809B0];
      v113[1] = 3221225472;
      v113[2] = ___ML3MigrationPerformPostMigration_block_invoke;
      v113[3] = &unk_1E5B65EE0;
      v114 = v78;
      objc_msgSend(v18, "enumerateRowsWithBlock:", v113);
      v19 = &v114;
      v20 = CFSTR("DELETE FROM item WHERE item_pid IN (SELECT item.item_pid FROM item LEFT OUTER JOIN item_extra ON item.item_pid=item_extra.item_pid WHERE item_extra.item_pid ISNULL)");
    }

    objc_msgSend(v84, "executeUpdate:", v20);
    goto LABEL_25;
  }
LABEL_37:
  objc_msgSend(v84, "executeQuery:", CFSTR("SELECT item_pid FROM item JOIN item_store USING(item_pid) WHERE media_type = 8 AND title_order = 0 AND album_order = 0 AND album_artist_order = 0 AND subscription_store_item_id = 0 AND is_ota_purchased = 0 AND store_saga_id = 0 AND store_item_id = 0 AND sync_id = 0 AND purchase_history_id = 0 AND base_location_id = 0 AND remote_location_id = 0 AND disc_number = 0 AND track_number = 0 AND needs_reporting = 1"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "objectsInColumn:", 0);
  v83 = (id)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v83, "count"))
  {
    v32 = objc_msgSend(v83, "count");
    MEMORY[0x1E0C80A78](v32);
    v34 = (char *)&v76 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (objc_msgSend(v83, "count"))
    {
      v35 = 0;
      do
      {
        objc_msgSend(v83, "objectAtIndexedSubscript:", v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v34[8 * v35] = objc_msgSend(v36, "longLongValue");

        ++v35;
      }
      while (objc_msgSend(v83, "count") > v35);
    }
    v37 = objc_msgSend(v83, "count");
    if (+[ML3Track deleteFromLibrary:deletionType:persistentIDs:count:usingConnection:](ML3Track, "deleteFromLibrary:deletionType:persistentIDs:count:usingConnection:", v82, 2, v34, v37, v84))
    {
      v38 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v128[0]) = 138543362;
        *(_QWORD *)((char *)v128 + 4) = v83;
        _os_log_impl(&dword_1AC149000, v38, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check: Deleted garbage tracks %{public}@", (uint8_t *)v128, 0xCu);
      }

    }
  }
  +[ML3Collection removeOrphanedCollectionsInLibrary:usingConnection:](ML3Collection, "removeOrphanedCollectionsInLibrary:usingConnection:", v82, v84);
  objc_msgSend(v82, "coalesceMismatchedCollectionsUsingConnection:", v84);
  objc_msgSend(v82, "repairAlbumArtistRelationshipsWithConnection:", v84);
  +[ML3Collection canonicalizeCollectionRepresentativeItemsInLibrary:usingConnection:](ML3Album, "canonicalizeCollectionRepresentativeItemsInLibrary:usingConnection:", v82, v84);
  +[ML3Collection canonicalizeCollectionRepresentativeItemsInLibrary:usingConnection:](ML3AlbumArtist, "canonicalizeCollectionRepresentativeItemsInLibrary:usingConnection:", v82, v84);
  +[ML3Collection canonicalizeCollectionRepresentativeItemsInLibrary:usingConnection:](ML3Artist, "canonicalizeCollectionRepresentativeItemsInLibrary:usingConnection:", v82, v84);
  +[ML3Collection canonicalizeCollectionRepresentativeItemsInLibrary:usingConnection:](ML3Composer, "canonicalizeCollectionRepresentativeItemsInLibrary:usingConnection:", v82, v84);
  +[ML3Collection canonicalizeCollectionRepresentativeItemsInLibrary:usingConnection:](ML3Genre, "canonicalizeCollectionRepresentativeItemsInLibrary:usingConnection:", v82, v84);
  v128[0] = 0;
  v128[1] = v128;
  v128[2] = 0x2020000000;
  v129 = 0;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v84, "executeQuery:", CFSTR("SELECT DISTINCT title, sort_title FROM item_extra JOIN item USING(item_pid) WHERE title_order = 0 AND LENGTH(title)"));
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v105[0] = MEMORY[0x1E0C809B0];
  v105[1] = 3221225472;
  v105[2] = ___ML3MigrationPerformPostMigration_block_invoke_63;
  v105[3] = &unk_1E5B65EE0;
  v41 = v39;
  v106 = v41;
  objc_msgSend(v40, "enumerateRowsWithBlock:", v105);

  objc_msgSend(v84, "executeQuery:", CFSTR("SELECT DISTINCT item_artist, sort_item_artist, series_name, sort_series_name FROM item_artist JOIN item USING(item_artist_pid) WHERE item_artist_order = 0 AND LENGTH(item_artist)"));
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v103[0] = MEMORY[0x1E0C809B0];
  v103[1] = 3221225472;
  v103[2] = ___ML3MigrationPerformPostMigration_block_invoke_2_66;
  v103[3] = &unk_1E5B65EE0;
  v43 = v41;
  v104 = v43;
  objc_msgSend(v42, "enumerateRowsWithBlock:", v103);

  objc_msgSend(v84, "executeQuery:", CFSTR("SELECT DISTINCT album_artist, sort_album_artist FROM album_artist WHERE sort_order = 0 AND LENGTH(album_artist)"));
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v101[0] = MEMORY[0x1E0C809B0];
  v101[1] = 3221225472;
  v101[2] = ___ML3MigrationPerformPostMigration_block_invoke_3;
  v101[3] = &unk_1E5B65EE0;
  v45 = v43;
  v102 = v45;
  objc_msgSend(v44, "enumerateRowsWithBlock:", v101);

  objc_msgSend(v84, "executeQuery:", CFSTR("SELECT DISTINCT album, sort_album FROM album JOIN item USING(album_pid) WHERE album_order = 0 AND LENGTH(album)"));
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v99[0] = MEMORY[0x1E0C809B0];
  v99[1] = 3221225472;
  v99[2] = ___ML3MigrationPerformPostMigration_block_invoke_4;
  v99[3] = &unk_1E5B65EE0;
  v47 = v45;
  v100 = v47;
  objc_msgSend(v46, "enumerateRowsWithBlock:", v99);

  objc_msgSend(v84, "executeQuery:", CFSTR("SELECT DISTINCT composer, sort_composer FROM composer JOIN item USING(composer_pid) WHERE composer_order = 0 AND LENGTH(composer)"));
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v97[0] = MEMORY[0x1E0C809B0];
  v97[1] = 3221225472;
  v97[2] = ___ML3MigrationPerformPostMigration_block_invoke_5;
  v97[3] = &unk_1E5B65EE0;
  v49 = v47;
  v98 = v49;
  objc_msgSend(v48, "enumerateRowsWithBlock:", v97);

  objc_msgSend(v84, "executeQuery:", CFSTR("SELECT DISTINCT genre FROM genre JOIN item USING(genre_id) WHERE genre_order = 0 AND LENGTH(genre)"));
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v95[0] = MEMORY[0x1E0C809B0];
  v95[1] = 3221225472;
  v95[2] = ___ML3MigrationPerformPostMigration_block_invoke_6;
  v95[3] = &unk_1E5B65EE0;
  v51 = v49;
  v96 = v51;
  objc_msgSend(v50, "enumerateRowsWithBlock:", v95);

  if (objc_msgSend(v51, "count"))
  {
    v52 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v123) = 138543362;
      *(_QWORD *)((char *)&v123 + 4) = v51;
      _os_log_impl(&dword_1AC149000, v52, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check recoverable condition: Sort map was missing the following names %{public}@", (uint8_t *)&v123, 0xCu);
    }

    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v53 = v51;
    v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v91, v127, 16);
    if (v54)
    {
      v55 = *(_QWORD *)v92;
      do
      {
        for (k = 0; k != v54; ++k)
        {
          if (*(_QWORD *)v92 != v55)
            objc_enumerationMutation(v53);
          v126 = *(_QWORD *)(*((_QWORD *)&v91 + 1) + 8 * k);
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v126, 1);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v84, "executeUpdate:withParameters:error:", CFSTR("INSERT OR REPLACE INTO sort_map (name, sort_key) VALUES (?, '')"), v57, 0);

        }
        v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v91, v127, 16);
      }
      while (v54);
    }

    *(_BYTE *)(v128[1] + 24) = 1;
  }
  *(_QWORD *)&v123 = 0;
  *((_QWORD *)&v123 + 1) = &v123;
  v124 = 0x2020000000;
  v125 = 0;
  v90[0] = 0;
  v90[1] = v90;
  v90[2] = 0x2020000000;
  v90[3] = 0;
  objc_msgSend(v84, "executeQuery:", CFSTR("SELECT name_order, name_section FROM sort_map ORDER BY sort_key ASC"));
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v89[0] = MEMORY[0x1E0C809B0];
  v89[1] = 3221225472;
  v89[2] = ___ML3MigrationPerformPostMigration_block_invoke_79;
  v89[3] = &unk_1E5B62B78;
  v89[4] = &v123;
  v89[5] = v128;
  v89[6] = v90;
  objc_msgSend(v58, "enumerateRowsWithBlock:", v89);

  if (!*(_BYTE *)(v128[1] + 24))
    goto LABEL_62;
  v59 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v119) = 0;
    _os_log_impl(&dword_1AC149000, v59, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check recoverable condition: Sort map is inconsistent", (uint8_t *)&v119, 2u);
  }

  if (objc_msgSend(v82, "inTransactionUpdateSortMapOnConnection:forceUpdateOriginals:", v84, 1)
    && objc_msgSend(v82, "inTransactionUpdateSearchMapOnConnection:", v84))
  {
    v77 = 1;
LABEL_62:
    objc_msgSend(v84, "executeQuery:", CFSTR("SELECT COUNT() FROM lyrics"));
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = objc_msgSend(v60, "int64ValueForFirstRowAndColumn");

    if (v61 != v80)
    {
      v62 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        v119 = 134218240;
        v120 = v80;
        v121 = 2048;
        v122 = v61;
        _os_log_impl(&dword_1AC149000, v62, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check recoverable condition: %lli rows in item and %lli rows in lyrics", (uint8_t *)&v119, 0x16u);
      }

      objc_msgSend(v84, "executeUpdate:", CFSTR("INSERT INTO lyrics (item_pid) SELECT item.item_pid FROM item LEFT OUTER JOIN lyrics USING (item_pid) WHERE lyrics.item_pid ISNULL;"));
    }
    objc_msgSend(v82, "cleanupArtworkWithOptions:usingConnection:", 8, v84);
    if (objc_msgSend(v81, "needsToMarkArtworkPurgeable"))
    {
      v63 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v82, "databasePath");
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        v119 = 138477827;
        v120 = (uint64_t)v64;
        _os_log_impl(&dword_1AC149000, v63, OS_LOG_TYPE_DEFAULT, "[Migration] Updating purgeability for library at path %{private}@.", (uint8_t *)&v119, 0xCu);

      }
      dispatch_get_global_queue(0, 0);
      v65 = objc_claimAutoreleasedReturnValue();
      v87[0] = MEMORY[0x1E0C809B0];
      v87[1] = 3221225472;
      v87[2] = ___ML3MigrationPerformPostMigration_block_invoke_84;
      v87[3] = &unk_1E5B65D80;
      v88 = v82;
      dispatch_async(v65, v87);

    }
    if (objc_msgSend(v81, "needsToAutogenerateArtworkVariants"))
      objc_msgSend(v82, "performColorAnalysisForArtworkWithConnection:shouldRegenerateColorAnalysis:", v84, 1);
    if (v80 != v79)
    {
      objc_msgSend(v84, "executeQuery:", CFSTR("SELECT value FROM _MLDatabaseProperties WHERE key = 'MLCloudDatabaseRevision'"));
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      v67 = objc_msgSend(v66, "int64ValueForFirstRowAndColumn") > 0;

      if (v67)
      {
        v68 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v119) = 0;
          _os_log_impl(&dword_1AC149000, v68, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check: flagging cloud library for full refresh after next update", (uint8_t *)&v119, 2u);
        }

        objc_msgSend(v84, "executeUpdate:withParameters:error:", CFSTR("INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (?, ?)"), &unk_1E5BAA8C0, 0);
      }
      objc_msgSend(v84, "executeQuery:", CFSTR("SELECT value FROM _MLDatabaseProperties WHERE key = 'MLJaliscoDatabaseRevision'"));
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      v70 = objc_msgSend(v69, "int64ValueForFirstRowAndColumn") > 0;

      if (v70)
      {
        v71 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v119) = 0;
          _os_log_impl(&dword_1AC149000, v71, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check: flagging purchase history for next update to include all tokens", (uint8_t *)&v119, 2u);
        }

        objc_msgSend(v84, "executeUpdate:withParameters:error:", CFSTR("INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (?, ?)"), &unk_1E5BAA8D8, 0);
      }
      v72 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v119) = 0;
        _os_log_impl(&dword_1AC149000, v72, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check: resetting sync anchors", (uint8_t *)&v119, 2u);
      }

      objc_msgSend(v84, "executeUpdate:", CFSTR("DELETE FROM _MLDatabaseProperties WHERE key = 'MLSyncClientLastSyncedRevision'"));
      objc_msgSend(v84, "executeUpdate:", CFSTR("DELETE FROM _MLDatabaseProperties WHERE key = 'MLSyncClientSyncAnchor'"));
      objc_msgSend(v84, "executeUpdate:", CFSTR("DELETE FROM _MLDatabaseProperties WHERE key = 'MLSyncClientGenerationID'"));
      objc_msgSend(v84, "executeUpdate:", CFSTR("DELETE FROM _MLDatabaseProperties WHERE key = 'MLSyncClientHasPendingAssets'"));
      v73 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v119) = 0;
        _os_log_impl(&dword_1AC149000, v73, OS_LOG_TYPE_DEFAULT, "[Migration] Sanity check: removing orphaned assets", (uint8_t *)&v119, 2u);
      }

      objc_msgSend(v82, "removeOrphanedTracksOnlyInCaches:", 1);
      ML3MigrationRemoveLocationsForItemsMissingAssets(v84);
    }
    if (v77)
    {
      v85[0] = MEMORY[0x1E0C809B0];
      v85[1] = 3221225472;
      v85[2] = ___ML3MigrationPerformPostMigration_block_invoke_106;
      v85[3] = &unk_1E5B64F90;
      v86 = v82;
      objc_msgSend(v84, "enqueueBlockForTransactionCommit:", v85);

    }
    v74 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v119) = 0;
      _os_log_impl(&dword_1AC149000, v74, OS_LOG_TYPE_DEFAULT, "[Migration] Migration sanity check complete", (uint8_t *)&v119, 2u);
    }

    v22 = 1;
    goto LABEL_92;
  }
  v22 = 0;
LABEL_92:
  _Block_object_dispose(v90, 8);
  _Block_object_dispose(&v123, 8);

  _Block_object_dispose(v128, 8);
LABEL_93:

  return v22;
}

void sub_1AC2CBD10(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 + 208), 8);
  _Block_object_dispose((const void *)(v1 + 784), 8);
  _Block_object_dispose((const void *)(v1 + 960), 8);
  _Unwind_Resume(a1);
}

uint64_t ML3MigrationModifyTableWithResultingSchema(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  os_log_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  void *v40;
  unint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t j;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  int v57;
  void *v58;
  int v59;
  void *v60;
  int v61;
  void *v62;
  int v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v69;
  void *v70;
  void *v71;
  id v72;
  void *v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  void *v78;
  void *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[128];
  uint8_t v93[128];
  uint8_t buf[4];
  void *v95;
  _BYTE v96[128];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v72 = a1;
  v9 = a2;
  v75 = a3;
  v77 = a4;
  v74 = a5;
  objc_msgSend(v74, "componentsSeparatedByString:", CFSTR(","));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3780], "whitespaceCharacterSet");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "addCharactersInString:", CFSTR(",)("));
  objc_msgSend(v12, "invertedSet");
  v13 = objc_claimAutoreleasedReturnValue();
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v14 = v10;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v88, v96, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v89;
LABEL_3:
    v18 = 0;
    while (1)
    {
      if (*(_QWORD *)v89 != v17)
        objc_enumerationMutation(v14);
      v19 = *(void **)(*((_QWORD *)&v88 + 1) + 8 * v18);
      v20 = objc_msgSend(v19, "rangeOfCharacterFromSet:options:", v13, 0);
      if (!v21)
        break;
      v22 = v20;
      v23 = objc_msgSend(v19, "rangeOfCharacterFromSet:options:range:", v12, 0, v22, objc_msgSend(v19, "length") - v22);
      if (!v24)
        break;
      objc_msgSend(v19, "substringWithRange:", v22, v24 + ~v22 + v23);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "addObject:", v25);

      if (v16 == ++v18)
      {
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v88, v96, 16);
        if (v16)
          goto LABEL_3;
        break;
      }
    }
  }
  v70 = (void *)v13;
  v71 = v12;

  v26 = objc_msgSend(v11, "count");
  v73 = v14;
  v76 = v9;
  if (v26 == objc_msgSend(v14, "count"))
  {
    v27 = (os_log_t)objc_msgSend(v11, "mutableCopy");
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    if (v77)
    {
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v28 = v77;
      v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v84, v93, 16);
      if (v29)
      {
        v30 = v29;
        v31 = *(_QWORD *)v85;
        do
        {
          for (i = 0; i != v30; ++i)
          {
            if (*(_QWORD *)v85 != v31)
              objc_enumerationMutation(v28);
            v33 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * i);
            if (objc_msgSend(v33, "shouldImportFromForeignTable"))
            {
              objc_msgSend(v33, "joinColumnName");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v33, "foreignTableName");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v79, "setObject:forKey:", v34, v35);

              objc_msgSend(v33, "columnName");
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              v37 = objc_msgSend(v11, "indexOfObject:", v36);

              if (v37 == 0x7FFFFFFFFFFFFFFFLL)
              {
                v38 = os_log_create("com.apple.amp.medialibrary", "Default");
                if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
                {
                  objc_msgSend(v33, "columnName");
                  v39 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 138543362;
                  v95 = v39;
                  _os_log_impl(&dword_1AC149000, v38, OS_LOG_TYPE_ERROR, "ERROR: Adding column not found in schema %{public}@", buf, 0xCu);

                }
              }
              else
              {
                objc_msgSend(v33, "foreignColumnName");
                v38 = objc_claimAutoreleasedReturnValue();
                -[NSObject replaceObjectAtIndex:withObject:](v27, "replaceObjectAtIndex:withObject:", v37, v38);
              }
            }
            else
            {
              objc_msgSend(v33, "columnName");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "removeObject:", v40);

              objc_msgSend(v33, "columnName");
              v38 = objc_claimAutoreleasedReturnValue();
              -[NSObject removeObject:](v27, "removeObject:", v38);
            }

          }
          v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v84, v93, 16);
        }
        while (v30);
      }

      v9 = v76;
    }
    if (v75 && -[NSObject count](v27, "count"))
    {
      v41 = 0;
      do
      {
        -[NSObject objectAtIndex:](v27, "objectAtIndex:", v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v75, "objectForKey:", v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();

        if (v43)
        {
          objc_msgSend(v75, "objectForKey:", v42);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject replaceObjectAtIndex:withObject:](v27, "replaceObjectAtIndex:withObject:", v41, v44);

        }
        ++v41;
      }
      while (-[NSObject count](v27, "count") > v41);
    }
    objc_msgSend(v11, "componentsJoinedByString:", CFSTR(", "));
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject componentsJoinedByString:](v27, "componentsJoinedByString:", CFSTR(", "));
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
    if (objc_msgSend(v79, "count"))
    {
      v69 = v45;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v47 = v79;
      v48 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v80, v92, 16);
      if (v48)
      {
        v49 = v48;
        v50 = *(_QWORD *)v81;
        do
        {
          for (j = 0; j != v49; ++j)
          {
            if (*(_QWORD *)v81 != v50)
              objc_enumerationMutation(v47);
            v52 = *(_QWORD *)(*((_QWORD *)&v80 + 1) + 8 * j);
            objc_msgSend(v47, "objectForKey:", v52);
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v46, "appendFormat:", CFSTR(" JOIN %@ USING(%@)"), v52, v53);

          }
          v49 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v80, v92, 16);
        }
        while (v49);
      }

      v9 = v76;
      v45 = v69;
    }
    objc_msgSend(v9, "stringByAppendingString:", CFSTR("_new"));
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("DROP TABLE IF EXISTS %@"), v54);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = v72;
    v57 = objc_msgSend(v72, "executeUpdate:", v55);

    if (!v57)
      goto LABEL_49;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("CREATE TABLE %@ (%@)"), v54, v74);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = objc_msgSend(v72, "executeUpdate:", v58);

    if (!v59)
      goto LABEL_49;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("INSERT INTO %@ (%@) SELECT %@ FROM %@%@"), v54, v45, v78, v9, v46);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = objc_msgSend(v72, "executeUpdate:", v60);

    if (!v61)
      goto LABEL_49;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("DROP TABLE %@"), v9);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    v63 = objc_msgSend(v72, "executeUpdate:", v62);

    if (v63)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("ALTER TABLE %@ RENAME TO %@"), v54, v9);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = objc_msgSend(v72, "executeUpdate:", v64);

    }
    else
    {
LABEL_49:
      v65 = 0;
    }

    v66 = v75;
  }
  else
  {
    v27 = os_log_create("com.apple.amp.medialibrary", "Default");
    v66 = v75;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v14, "objectAtIndex:", objc_msgSend(v11, "count"));
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v95 = v67;
      _os_log_impl(&dword_1AC149000, v27, OS_LOG_TYPE_ERROR, "ERROR: unable to find column name in definition %{public}@", buf, 0xCu);

    }
    v65 = 0;
    v56 = v72;
  }

  return v65;
}

uint64_t ML3MigrationExecuteSQLArray(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = a2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    while (2)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        if (!objc_msgSend(v3, "executeUpdate:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v8), (_QWORD)v11))
        {
          v9 = 0;
          goto LABEL_11;
        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v6)
        continue;
      break;
    }
  }
  v9 = 1;
LABEL_11:

  return v9;
}

uint64_t ML3MigrationColumnExistsInTable(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD v13[4];
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("PRAGMA table_info(%@)"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "executeQuery:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __ML3MigrationColumnExistsInTable_block_invoke;
  v13[3] = &unk_1E5B64FB8;
  v10 = v6;
  v14 = v10;
  v15 = &v16;
  objc_msgSend(v9, "enumerateRowsWithBlock:", v13);
  v11 = *((unsigned __int8 *)v17 + 24);

  _Block_object_dispose(&v16, 8);
  return v11;
}

void sub_1AC2CD078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3MigrationRemoveLocationsForItemsMissingAssets(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  __int128 *p_buf;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;
  __int128 buf;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v22 = 0;
  v23 = &v22;
  v24 = 0x3032000000;
  v25 = __Block_byref_object_copy__9701;
  v26 = __Block_byref_object_dispose__9702;
  v27 = 0;
  objc_msgSend(v1, "executeQuery:", CFSTR("SELECT item.item_pid,base_location.path,item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) JOIN item_store USING(item_pid) WHERE remote_location_id > 0 AND base_location_id > 0 OR LENGTH(item_extra.location) > 0"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;
  if (v2)
  {
    +[ML3MusicLibrary mediaFolderPath](ML3MusicLibrary, "mediaFolderPath");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v29 = 0x3032000000;
    v30 = __Block_byref_object_copy__9701;
    v31 = __Block_byref_object_dispose__9702;
    v32 = 0;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __ML3MigrationRemoveLocationsForItemsMissingAssets_block_invoke;
    v16[3] = &unk_1E5B62BE0;
    v17 = &unk_1E5BAA8F0;
    v6 = v4;
    v18 = v6;
    p_buf = &buf;
    v7 = v5;
    v19 = v7;
    v21 = &v22;
    objc_msgSend(v2, "enumerateRowsWithBlock:", v16);

    _Block_object_dispose(&buf, 8);
  }
  v8 = objc_msgSend((id)v23[5], "count");
  if (v8)
  {
    v9 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = v23[5];
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v10;
      _os_log_impl(&dword_1AC149000, v9, OS_LOG_TYPE_ERROR, "<MLERROR>: Locations for items are set and don't exist, or are missing critical information: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    objc_msgSend(&stru_1E5B66908, "stringByPaddingToLength:withString:startingAtIndex:", 2 * v8 - 1, CFSTR(",?"), 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ IN (%@)"), CFSTR("UPDATE item SET base_location_id=0 WHERE item.item_pid"), v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v23[5], "allObjects");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v1, "executeUpdate:withParameters:error:", v12, v13, 0);
    if ((_DWORD)v3)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ IN (%@)"), CFSTR("UPDATE item_extra SET location='',file_size=0 WHERE item_extra.item_pid"), v11);
      v14 = objc_claimAutoreleasedReturnValue();

      objc_msgSend(v1, "executeUpdate:withParameters:error:", v14, v13, 0);
      v12 = (void *)v14;
    }

  }
  _Block_object_dispose(&v22, 8);

  return v3;
}

void sub_1AC2CD3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9701(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9702(uint64_t a1)
{

}

id ML3MigrationTemporaryPathFromPath(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  objc_msgSend(v1, "lastPathComponent");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingString:", CFSTR("_tmp"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "stringByDeletingLastPathComponent");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "stringByAppendingPathComponent:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id ML3MigrationArtworkDirectoryAsOf1160030()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork"));
}

id ML3MigrationArtworkDirectoryAsOf1160130()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork"));
}

id ML3MigrationArtworkCacheDirectoryAsOf1160130()
{
  void *v0;
  void *v1;

  MSVMobileHomeDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("Library/Caches/com.apple.mediaplayer/Artwork"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id ML3MigrationPathFromArtworkCacheIDAsOf1160030(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  unsigned __int8 md[20];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "dataUsingEncoding:", 4);
  v1 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  CC_SHA1((const void *)objc_msgSend(v1, "bytes"), objc_msgSend(v1, "length"), md);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%x/%x%x%x%x%x%x%x%x_%d.%@"), md[0], md[1], md[2], md[3], md[4], md[5], md[6], md[7], md[8], 268500717, CFSTR("jpg"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringByAppendingPathComponent:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id ML3MigrationRelativePathFromArtworkComponentsAsOf1160030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t i;
  void *v7;
  unsigned __int8 md[20];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%ld%ld"), a1, a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dataUsingEncoding:", 4);
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  CC_SHA1((const void *)objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"), md);
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithCapacity:", 45);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "appendFormat:", CFSTR("%02x/"), md[0]);
  for (i = 1; i != 20; ++i)
    objc_msgSend(v5, "appendFormat:", CFSTR("%02x"), md[i]);
  objc_msgSend(v5, "appendString:", CFSTR(".jpeg"));
  v7 = (void *)objc_msgSend(v5, "copy");

  return v7;
}

id ML3MigrationRelativePathFromArtworkTokenAsOf1160130(void *a1)
{
  id v1;
  void *v2;
  uint64_t i;
  void *v4;
  unsigned __int8 md[20];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "dataUsingEncoding:", 4);
  v1 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  CC_SHA1((const void *)objc_msgSend(v1, "bytes"), objc_msgSend(v1, "length"), md);
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithCapacity:", 45);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendFormat:", CFSTR("%02x/"), md[0]);
  for (i = 1; i != 20; ++i)
    objc_msgSend(v2, "appendFormat:", CFSTR("%02x"), md[i]);
  objc_msgSend(v2, "appendString:", CFSTR(".jpeg"));
  v4 = (void *)objc_msgSend(v2, "copy");

  return v4;
}

id ML3MigrationArtworkOriginalsDirectoryBefore1160160()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork"));
}

id ML3MigrationArtworkOriginalsDirectoryAsOf1160160()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Originals"));
}

id ML3MigrationArtworkCacheDirectoryBefore1160160()
{
  void *v0;
  void *v1;

  MSVMobileHomeDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("Library/Caches/com.apple.mediaplayer/Artwork"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id ML3MigrationArtworkCacheDirectoryAsOf1160160()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
}

id ML3MigrationArtworkDirectoryAsOf1410060()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork"));
}

id ML3MigrationArtworkCacheDirectoryAsOf1410210()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
}

id ML3MigrationArtworkCacheDirectoryAsOf1450060()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
}

id ML3MigrationArtworkCacheDirectoryAsOf1450090()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
}

id ML3MigrationArtworkCacheDirectoryAsOf1510030()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
}

id ML3MigrationArtworkCacheDirectoryAsOf1910000()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
}

id ML3MigrationArtworkCacheDirectoryAsOf2050010()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
}

id ML3MigrationArtworkCacheDirectoryAsOf2100060()
{
  return +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
}

void ML3MigrationUpdateAllBestArtworkTokens(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  char v20;
  id v21;
  NSObject *v22;
  id obj;
  uint64_t v24;
  void *v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[4];
  id v32;
  void *v33;
  _QWORD *v34;
  __int128 *p_buf;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  __CFString *v47;
  _QWORD v48[4];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[4];
  id v54;
  _BYTE v55[128];
  _QWORD v56[6];
  __int128 buf;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  void (*v60)(uint64_t);
  __CFString *v61;
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "executeQuery:", CFSTR("SELECT entity_pid, entity_type, artwork_type FROM artwork_token GROUP BY entity_pid, entity_type, artwork_type"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v53[0] = MEMORY[0x1E0C809B0];
  v53[1] = 3221225472;
  v53[2] = __ML3MigrationUpdateAllBestArtworkTokens_block_invoke;
  v53[3] = &unk_1E5B65EE0;
  v4 = v2;
  v54 = v4;
  objc_msgSend(v3, "enumerateRowsWithBlock:", v53);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  obj = v4;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v62, 16);
  if (v5)
  {
    v24 = *(_QWORD *)v50;
    do
    {
      v6 = 0;
      v7 = v3;
      do
      {
        if (*(_QWORD *)v50 != v24)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * v6);
        *(_QWORD *)&buf = 0;
        *((_QWORD *)&buf + 1) = &buf;
        v58 = 0x3032000000;
        v59 = __Block_byref_object_copy__9701;
        v60 = __Block_byref_object_dispose__9702;
        v61 = &stru_1E5B66908;
        v48[0] = 0;
        v48[1] = v48;
        v48[2] = 0x2020000000;
        v48[3] = 0;
        v42 = 0;
        v43 = &v42;
        v44 = 0x3032000000;
        v45 = __Block_byref_object_copy__9701;
        v46 = __Block_byref_object_dispose__9702;
        v47 = &stru_1E5B66908;
        v38 = 0;
        v39 = &v38;
        v40 = 0x2020000000;
        v41 = 0;
        objc_msgSend(v1, "executeQuery:withParameters:", CFSTR("SELECT artwork_token.artwork_token, artwork_token.artwork_source_type, (artwork.relative_path IS NOT NULL) AS has_artwork_on_disk FROM artwork_token LEFT OUTER JOIN artwork USING (artwork_token) WHERE artwork_token.entity_pid = ? AND artwork_token.entity_type = ? AND artwork_token.artwork_type = ? ORDER BY artwork_token.artwork_source_type ASC"), v8);
        v3 = (void *)objc_claimAutoreleasedReturnValue();

        v31[0] = MEMORY[0x1E0C809B0];
        v31[1] = 3221225472;
        v31[2] = __ML3MigrationUpdateAllBestArtworkTokens_block_invoke_2;
        v31[3] = &unk_1E5B62C08;
        v34 = v48;
        p_buf = &buf;
        v36 = &v38;
        v32 = v1;
        v33 = v8;
        v37 = &v42;
        objc_msgSend(v3, "enumerateRowsWithBlock:", v31);
        objc_msgSend(v8, "objectAtIndexedSubscript:", 0);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v56[0] = v9;
        objc_msgSend(v8, "objectAtIndexedSubscript:", 1);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v56[1] = v10;
        objc_msgSend(v8, "objectAtIndexedSubscript:", 2);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 40);
        v56[2] = v11;
        v56[3] = v12;
        v56[4] = v43[5];
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v39[3]);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v56[5] = v13;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v56, 6);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "addObject:", v14);

        _Block_object_dispose(&v38, 8);
        _Block_object_dispose(&v42, 8);

        _Block_object_dispose(v48, 8);
        _Block_object_dispose(&buf, 8);

        ++v6;
        v7 = v3;
      }
      while (v5 != v6);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v62, 16);
    }
    while (v5);
  }

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v15 = v25;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v55, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v28 != v17)
          objc_enumerationMutation(v15);
        v19 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * i);
        v26 = 0;
        v20 = objc_msgSend(v1, "executeUpdate:withParameters:error:", CFSTR("INSERT OR REPLACE INTO best_artwork_token (entity_pid, entity_type, artwork_type, available_artwork_token, fetchable_artwork_token, fetchable_artwork_source_type) VALUES (?, ?, ?, ?, ?, ?)"), v19, &v26);
        v21 = v26;
        if ((v20 & 1) == 0)
        {
          v22 = os_log_create("com.apple.amp.medialibrary", "Default");
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 138543362;
            *(_QWORD *)((char *)&buf + 4) = v21;
            _os_log_impl(&dword_1AC149000, v22, OS_LOG_TYPE_ERROR, "Failed to update best_artwork_token with error: %{public}@", (uint8_t *)&buf, 0xCu);
          }

        }
      }
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v55, 16);
    }
    while (v16);
  }

}

void sub_1AC2CE110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Unwind_Resume(a1);
}

void sub_1AC2CE5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ML3MigrationRemoveNonLibraryItemsFromContainers(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t i;
  void *v11;
  void *v12;
  id v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  void *v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  id obj;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[4];
  id v43;
  _QWORD v44[4];
  id v45;
  _QWORD v46[2];
  _QWORD v47[4];
  _QWORD v48[2];
  uint64_t v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "executeQuery:", CFSTR("SELECT container_pid FROM container JOIN container_items USING (container_pid) WHERE distinguished_kind = 0 AND smart_criteria IS NULL AND is_hidden = 0 AND LENGTH(item_pid_data) > 0 AND cloud_is_subscribed = 0 AND cloud_is_curator_playlist = 0"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = MEMORY[0x1E0C809B0];
  v44[0] = MEMORY[0x1E0C809B0];
  v44[1] = 3221225472;
  v44[2] = __ML3MigrationRemoveNonLibraryItemsFromContainers_block_invoke;
  v44[3] = &unk_1E5B65EE0;
  v5 = v2;
  v45 = v5;
  objc_msgSend(v3, "enumerateRowsWithBlock:", v44);
  if (objc_msgSend(v5, "count"))
  {
    v29 = v3;
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "executeQuery:", CFSTR("SELECT item_pid FROM item WHERE in_my_library"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v42[0] = v4;
    v42[1] = 3221225472;
    v42[2] = __ML3MigrationRemoveNonLibraryItemsFromContainers_block_invoke_2;
    v42[3] = &unk_1E5B65EE0;
    v8 = v6;
    v43 = v8;
    v27 = v7;
    objc_msgSend(v7, "enumerateRowsWithBlock:", v42);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v28 = v5;
    obj = v5;
    v9 = v1;
    v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v50, 16);
    if (v34)
    {
      v33 = *(_QWORD *)v39;
      v31 = v1;
      do
      {
        for (i = 0; i != v34; ++i)
        {
          if (*(_QWORD *)v39 != v33)
            objc_enumerationMutation(obj);
          v35 = *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * i);
          v49 = v35;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v49, 1);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "executeQuery:withParameters:", CFSTR("SELECT item_pid_data FROM container_items WHERE container_pid = ?"), v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          v37 = v12;
          objc_msgSend(v12, "objectForFirstRowAndColumn");
          v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v14 = (_QWORD *)objc_msgSend(v13, "bytes");
          v15 = objc_msgSend(v13, "length");
          v16 = malloc_type_malloc(v15, 0xD9D56B1AuLL);
          objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (v15 >= 8)
          {
            v36 = v13;
            v18 = 0;
            v19 = v15 >> 3;
            if (v15 >> 3 <= 1)
              v20 = 1;
            else
              v20 = v15 >> 3;
            do
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *v14);
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v8, "containsObject:", v21))
                v16[v18++] = *v14;
              else
                objc_msgSend(v17, "addObject:", v21);

              ++v14;
              --v20;
            }
            while (v20);
            v22 = v18 == v19;
            v9 = v31;
            v13 = v36;
            if (!v22)
            {
              if (v18)
              {
                v23 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", v16, 8 * v18, 0);
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0C99E38], "null");
                v23 = objc_claimAutoreleasedReturnValue();
              }
              v30 = (void *)v23;
              v48[0] = v35;
              v48[1] = v23;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v48, 2);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "executeUpdate:withParameters:error:", CFSTR("REPLACE INTO container_items (container_pid, item_pid_data) VALUES (?, ?)"), v24, 0);

              v47[0] = v35;
              v47[1] = &unk_1E5BAB2B0;
              v47[2] = &unk_1E5BAB2C8;
              v47[3] = &unk_1E5BAB2B0;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v47, 4);
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "executeUpdate:withParameters:error:", CFSTR("REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES (?, ?, ?, ?)"), v25, 0);

              v46[0] = v35;
              v46[1] = &unk_1E5BAB2B0;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v46, 2);
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "executeUpdate:withParameters:error:", CFSTR("DELETE FROM entity_revision WHERE entity_pid = ? AND revision_type > ?"), v26, 0);

              v13 = v36;
            }
          }
          free(v16);

        }
        v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v50, 16);
      }
      while (v34);
    }

    v1 = v9;
    v5 = v28;
    v3 = v29;
  }

}

uint64_t ML3MigrationClearLocationFromLibraryAsOf2100100(void *a1, int a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  const __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  v7 = a1;
  v8 = a3;
  if (objc_msgSend(v7, "count"))
  {
    if (a2)
      v9 = CFSTR("UPDATE item SET base_location_id=0, date_downloaded=0, download_source_container_pid=0, keep_local=-1, keep_local_constraints=0, keep_local_status=0, keep_local_status_reason=0 WHERE item.item_pid");
    else
      v9 = CFSTR("UPDATE item SET base_location_id=0, date_downloaded=0, download_source_container_pid=0 WHERE item.item_pid");
    +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "statementWithPrefix:inParameterCount:", v9, objc_msgSend(v7, "count"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v8, "executeUpdate:withParameters:error:", v11, v7, 0))
    {
      +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "statementWithPrefix:inParameterCount:", CFSTR("UPDATE item_extra SET location = '' WHERE item_extra.item_pid"), objc_msgSend(v7, "count"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v8, "executeUpdate:withParameters:error:", v13, v7, 0))
      {
        +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "statementWithPrefix:inParameterCount:", CFSTR("UPDATE item_store SET sync_id = 0, downloader_account_id = 0, family_account_id = 0, is_protected = 0, is_ota_purchased = 0 WHERE item_store.item_pid"), objc_msgSend(v7, "count"));
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v8, "executeUpdate:withParameters:error:", v15, v7, 0))
        {
          +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "statementWithPrefix:inParameterCount:", CFSTR("UPDATE item_video SET hls_asset_traits = 0 WHERE item_video.item_pid"), objc_msgSend(v7, "count"));
          v17 = (void *)objc_claimAutoreleasedReturnValue();

          v18 = objc_msgSend(v8, "executeUpdate:withParameters:error:", v17, v7, 0);
          if ((_DWORD)v18)
            ML3MigrationIncrementRevisionForRevisionTypeContentAsOf2100100(a4, v8, 0, v7);

        }
        else
        {
          v18 = 0;
        }

      }
      else
      {
        v18 = 0;
      }

    }
    else
    {
      v18 = 0;
    }

  }
  else
  {
    v18 = 1;
  }

  return v18;
}

uint64_t ML3MigrationIncrementRevisionForRevisionTypeContentAsOf2100100(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  char v22;
  id v23;
  void *v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  void *v30;
  char v31;
  id v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  int v42;
  int v43;
  void *v44;
  NSObject *v45;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  char *context;
  void *contexta;
  id v55;
  id obj;
  id v57;
  id v58;
  id v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void *v64;
  uint8_t buf[4];
  id v66;
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v55 = a2;
  v7 = a4;
  v8 = objc_msgSend(v7, "count");
  if (v8)
  {
    v9 = (char *)v8;
    v10 = -1;
    v11 = 1;
    objc_msgSend(&stru_1E5B66908, "stringByPaddingToLength:withString:startingAtIndex:", 500 * objc_msgSend(CFSTR(",(?,?,?,?)"), "length") - 1, CFSTR(",(?,?,?,?)"), 1);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES "), "stringByAppendingString:");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 2000);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a3);
    v50 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
    v13 = objc_claimAutoreleasedReturnValue();
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    obj = v7;
    v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v67, 16);
    v51 = (void *)v13;
    v49 = v7;
    if (v14)
    {
      v15 = v14;
      v47 = -1;
      context = v9;
      v16 = 0;
      v17 = 0;
      v18 = *(_QWORD *)v61;
      v19 = v50;
      while (2)
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v61 != v18)
            objc_enumerationMutation(obj);
          v21 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * i);
          if (objc_msgSend(v21, "longLongValue", v47))
          {
            objc_msgSend(v12, "addObject:", v21);
            objc_msgSend(v12, "addObject:", v19);
            objc_msgSend(v12, "addObject:", v13);
            objc_msgSend(v12, "addObject:", &unk_1E5BAB2B0);
            if (objc_msgSend(v12, "count") == 2000)
            {
              v59 = v16;
              v22 = objc_msgSend(v55, "executeUpdate:withParameters:error:", v52, v12, &v59);
              v23 = v59;

              if ((v22 & 1) == 0)
              {
                v28 = os_log_create("com.apple.amp.medialibrary", "Default");
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138543362;
                  v66 = v23;
                  _os_log_impl(&dword_1AC149000, v28, OS_LOG_TYPE_DEFAULT, "Failed to insert batch of persistent ids in entity_revision, error = %{public}@", buf, 0xCu);
                }

                v11 = 0;
                goto LABEL_24;
              }
              if ((v17 & 1) == 0)
                v17 = 1;
              objc_msgSend(v12, "removeAllObjects");
              v16 = v23;
              v13 = (uint64_t)v51;
            }
          }
          else if (MSVDeviceOSIsInternalInstall())
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL ML3MigrationIncrementRevisionForRevisionTypeContentAsOf2100100(NSInteger, ML3DatabaseConnection *__strong, ML3EntityDeletionType, NSArray *__strong)");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v25, CFSTR("ML3MigrationUtilities.m"), 509, CFSTR("incrementRevisionForRevisionTypeContentWithConnection called with invalid pid"));

            v19 = v50;
          }
        }
        v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v67, 16);
        if (v15)
          continue;
        break;
      }
      v11 = 1;
      v23 = v16;
LABEL_24:
      v7 = v49;
      v9 = context;
      v10 = v47;
    }
    else
    {
      v23 = 0;
      v17 = 0;
    }

    if (objc_msgSend(v12, "count"))
    {
      objc_msgSend(&stru_1E5B66908, "stringByPaddingToLength:withString:startingAtIndex:", v10 + ((unint64_t)objc_msgSend(v12, "count") >> 2) * objc_msgSend(CFSTR(",(?,?,?,?)"), "length"), CFSTR(",(?,?,?,?)"), 1);
      v29 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(CFSTR("REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES "), "stringByAppendingString:", v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v58 = v23;
      v31 = objc_msgSend(v55, "executeUpdate:withParameters:error:", v30, v12, &v58);
      v32 = v58;

      if ((v31 & 1) == 0)
      {
        v45 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          v66 = v32;
          _os_log_impl(&dword_1AC149000, v45, OS_LOG_TYPE_DEFAULT, "Failed to insert batch of persistent ids in entity_revision, error = %{public}@", buf, 0xCu);
        }

        goto LABEL_47;
      }
      if ((v17 & 1) == 0)
        v17 = 1;

      v23 = v32;
    }
    else if (!v11)
    {
LABEL_44:
      v29 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        v66 = v23;
        _os_log_impl(&dword_1AC149000, v29, OS_LOG_TYPE_DEFAULT, "Failed to delete persistent ids in entity_revision, error = %{public}@", buf, 0xCu);
      }
      v32 = v23;
LABEL_47:
      v44 = (void *)v50;

      v43 = 0;
      v23 = v32;
      goto LABEL_48;
    }
    LODWORD(v47) = v17;
    v33 = 0;
    do
    {
      v34 = v23;
      contexta = (void *)MEMORY[0x1AF43CC0C]();
      if ((unint64_t)&v9[-v33] >= 0x1F4)
        v35 = 500;
      else
        v35 = (uint64_t)&v9[-v33];
      +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer", v47);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "statementWithPrefix:inParameterCount:", CFSTR("DELETE FROM entity_revision WHERE revision_type > ? AND entity_pid"), v35);
      v37 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(obj, "subarrayWithRange:", v33, v35);
      v38 = v9;
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v64 = &unk_1E5BAB2B0;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v64, 1);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "arrayByAddingObjectsFromArray:", v39);
      v41 = (void *)objc_claimAutoreleasedReturnValue();

      v57 = v23;
      v42 = objc_msgSend(v55, "executeUpdate:withParameters:error:", v37, v41, &v57);
      v23 = v57;

      v9 = v38;
      objc_autoreleasePoolPop(contexta);
      if (!v42)
        break;
      v33 += v35;
    }
    while (v33 < (unint64_t)v38);
    if ((v42 & 1) != 0)
    {
      v43 = 1;
      v7 = v49;
      v44 = (void *)v50;
      v17 = v47;
LABEL_48:

      v27 = v43 & v17;
      goto LABEL_49;
    }
    v7 = v49;
    v17 = v47;
    goto LABEL_44;
  }
  v26 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AC149000, v26, OS_LOG_TYPE_DEBUG, "No entities for which to increment revision numbers.", buf, 2u);
  }

  v27 = 0;
LABEL_49:

  return v27;
}

void ML3MigrationRemoveInvalidContainerItems(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;

  v3 = a2;
  v4 = (void *)MEMORY[0x1E0C99E08];
  v5 = a1;
  objc_msgSend(v4, "dictionary");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "executeQuery:", v5);
  v10 = (id)objc_claimAutoreleasedReturnValue();

  v7 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __ML3MigrationRemoveInvalidContainerItems_block_invoke;
  v13[3] = &unk_1E5B65EE0;
  v14 = v6;
  v8 = v6;
  objc_msgSend(v10, "enumerateRowsWithBlock:", v13);
  v11[0] = v7;
  v11[1] = 3221225472;
  v11[2] = __ML3MigrationRemoveInvalidContainerItems_block_invoke_2;
  v11[3] = &unk_1E5B62C58;
  v12 = v3;
  v9 = v3;
  objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v11);

}

void sub_1AC2CF764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id ML3MigrationStoreBookeeperDatabaseFilePathAsOf1450020()
{
  void *v0;
  void *v1;
  void *v2;

  +[ML3MusicLibrary mediaFolderPath](ML3MusicLibrary, "mediaFolderPath");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "msv_stringByResolvingRealPath");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/UbiquitousMetadata.sqlitedb"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id ML3MigrationStoreBookeeperDatabaseFilePathsAsOf1450020()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  ML3MigrationStoreBookeeperDatabaseFilePathAsOf1450020();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingString:", CFSTR("-shm"), v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[1] = v1;
  objc_msgSend(v0, "stringByAppendingString:", CFSTR("-wal"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[2] = v2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void ML3ContainerAuthorDatabaseImportDataSource::~ML3ContainerAuthorDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ContainerAuthorDatabaseImportDataSource::getImportPropertyGroupKey(ML3ContainerAuthorDatabaseImportDataSource *this)
{
  return 15;
}

uint64_t ML3ContainerAuthorDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ContainerAuthorDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

id ML3ContainerAuthorDatabaseImportDataSource::generateVTableInsertionFromClause(ML3ContainerAuthorDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ LEFT OUTER JOIN container_author ON %@.ROWID = container_author.container_author_pid"), a3, a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

void ML3LyricsDatabaseImportDataSource::~ML3LyricsDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3LyricsDatabaseImportDataSource::getImportPropertyGroupKey(ML3LyricsDatabaseImportDataSource *this)
{
  return 9;
}

uint64_t ML3LyricsDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3LyricsDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t MIPSmartPlaylistInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  void *v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 40) |= 0x10u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_93;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_95;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_93:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_95:
          v77 = v19 != 0;
          v78 = 32;
          goto LABEL_133;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_WORD *)(a1 + 40) |= 0x40u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v26 = 0;
                  goto LABEL_99;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_99:
          v77 = v26 != 0;
          v78 = 34;
          goto LABEL_133;
        case 3u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_WORD *)(a1 + 40) |= 0x100u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 1;
              v32 |= (unint64_t)(v35 & 0x7F) << v30;
              if (v35 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  v32 = 0;
                  goto LABEL_103;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_103:
          v77 = v32 != 0;
          v78 = 36;
          goto LABEL_133;
        case 4u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          *(_WORD *)(a1 + 40) |= 2u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                v14 = v37++ >= 9;
                if (v14)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_107;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_107:
          v79 = 12;
          goto LABEL_120;
        case 5u:
          v42 = 0;
          v43 = 0;
          v38 = 0;
          *(_WORD *)(a1 + 40) |= 1u;
          while (2)
          {
            v44 = *v3;
            v45 = *(_QWORD *)(a2 + v44);
            if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
              *(_QWORD *)(a2 + v44) = v45 + 1;
              v38 |= (unint64_t)(v46 & 0x7F) << v42;
              if (v46 < 0)
              {
                v42 += 7;
                v14 = v43++ >= 9;
                if (v14)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_111;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_111:
          v79 = 8;
          goto LABEL_120;
        case 6u:
          v47 = 0;
          v48 = 0;
          v38 = 0;
          *(_WORD *)(a1 + 40) |= 4u;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v50 + 1;
              v38 |= (unint64_t)(v51 & 0x7F) << v47;
              if (v51 < 0)
              {
                v47 += 7;
                v14 = v48++ >= 9;
                if (v14)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_115;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_115:
          v79 = 16;
          goto LABEL_120;
        case 7u:
          v52 = 0;
          v53 = 0;
          v38 = 0;
          *(_WORD *)(a1 + 40) |= 8u;
          while (2)
          {
            v54 = *v3;
            v55 = *(_QWORD *)(a2 + v54);
            if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v55);
              *(_QWORD *)(a2 + v54) = v55 + 1;
              v38 |= (unint64_t)(v56 & 0x7F) << v52;
              if (v56 < 0)
              {
                v52 += 7;
                v14 = v53++ >= 9;
                if (v14)
                {
                  LODWORD(v38) = 0;
                  goto LABEL_119;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v38) = 0;
LABEL_119:
          v79 = 20;
LABEL_120:
          *(_DWORD *)(a1 + v79) = v38;
          continue;
        case 8u:
          v57 = 0;
          v58 = 0;
          v59 = 0;
          *(_WORD *)(a1 + 40) |= 0x20u;
          while (2)
          {
            v60 = *v3;
            v61 = *(_QWORD *)(a2 + v60);
            if (v61 == -1 || v61 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v61);
              *(_QWORD *)(a2 + v60) = v61 + 1;
              v59 |= (unint64_t)(v62 & 0x7F) << v57;
              if (v62 < 0)
              {
                v57 += 7;
                v14 = v58++ >= 9;
                if (v14)
                {
                  v59 = 0;
                  goto LABEL_124;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v59 = 0;
LABEL_124:
          v77 = v59 != 0;
          v78 = 33;
          goto LABEL_133;
        case 9u:
          v63 = 0;
          v64 = 0;
          v65 = 0;
          *(_WORD *)(a1 + 40) |= 0x200u;
          while (2)
          {
            v66 = *v3;
            v67 = *(_QWORD *)(a2 + v66);
            if (v67 == -1 || v67 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v68 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v67);
              *(_QWORD *)(a2 + v66) = v67 + 1;
              v65 |= (unint64_t)(v68 & 0x7F) << v63;
              if (v68 < 0)
              {
                v63 += 7;
                v14 = v64++ >= 9;
                if (v14)
                {
                  v65 = 0;
                  goto LABEL_128;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v65 = 0;
LABEL_128:
          v77 = v65 != 0;
          v78 = 37;
          goto LABEL_133;
        case 0xAu:
          PBReaderReadData();
          v69 = objc_claimAutoreleasedReturnValue();
          v70 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v69;

          continue;
        case 0xBu:
          v71 = 0;
          v72 = 0;
          v73 = 0;
          *(_WORD *)(a1 + 40) |= 0x80u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v74 = *v3;
        v75 = *(_QWORD *)(a2 + v74);
        if (v75 == -1 || v75 >= *(_QWORD *)(a2 + *v4))
          break;
        v76 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v75);
        *(_QWORD *)(a2 + v74) = v75 + 1;
        v73 |= (unint64_t)(v76 & 0x7F) << v71;
        if ((v76 & 0x80) == 0)
          goto LABEL_130;
        v71 += 7;
        v14 = v72++ >= 9;
        if (v14)
        {
          v73 = 0;
          goto LABEL_132;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_130:
      if (*(_BYTE *)(a2 + *v5))
        v73 = 0;
LABEL_132:
      v77 = v73 != 0;
      v78 = 35;
LABEL_133:
      *(_BYTE *)(a1 + v78) = v77;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1AC2D302C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2D3130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2D32BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2D3504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 184), 8);
  _Block_object_dispose((const void *)(v32 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1AC2D36C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10393(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10394(uint64_t a1)
{

}

void sub_1AC2D42B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void *v13;

  MEMORY[0x1AF43C744](v11, 0x10A1C4088054FEALL);
  v13 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 72) = v13;
    operator delete(v13);
  }
  MEMORY[0x1AF43C744](v10, 0x10A0C4091C5D4D3);
  _Unwind_Resume(a1);
}

void sub_1AC2D48B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1AC2D4FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1AC2D5140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2D5390(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1AC2D532CLL);
  }
  _Unwind_Resume(exception_object);
}

id trackWithGlobalID(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  +[MLITDBGeniusDatabase sharedGeniusDatabase](MLITDBGeniusDatabase, "sharedGeniusDatabase");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "musicLibrary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (a2)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInteger:](ML3ComparisonPredicate, "predicateWithProperty:equalToInteger:", CFSTR("item_stats.hidden"), 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = 0;
  }
  v7 = (void *)MEMORY[0x1E0C99D20];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("item_extra.genius_id"), v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "arrayWithObjects:", v9, v6, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  +[ML3Entity anyInLibrary:predicate:options:](ML3Track, "anyInLibrary:predicate:options:", v5, v11, 7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

id MLCreateError_TooFewItemsReason(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = objc_alloc(MEMORY[0x1E0C99D80]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v2, "initWithObjectsAndKeys:", v3, CFSTR("count"), 0);

  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MLMusicLibraryErrorDomain"), 2, v4);
  return v5;
}

void sub_1AC2D5A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id MLCreateError_UnknownReason()
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MLMusicLibraryErrorDomain"), 0, 0);
}

uint64_t itdb_copy_configuration(void *a1, uint64_t *a2, _DWORD *a3)
{
  void *v5;
  void *v6;
  int v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  objc_msgSend(a1, "_sharedBlobMutableData");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[MLITDBGeniusDatabase sharedGeniusDatabase](MLITDBGeniusDatabase, "sharedGeniusDatabase");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "getGeniusConfigrationDataAndBytesIntoData:", v5);

  if (!v7)
  {
    v10 = 0;
    v9 = 0;
    if (!a2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = objc_retainAutorelease(v5);
  v9 = objc_msgSend(v8, "bytes");
  v10 = objc_msgSend(v8, "length");
  if (a2)
LABEL_5:
    *a2 = v10;
LABEL_6:
  if (a3)
  {
    +[MLITDBGeniusDatabase sharedGeniusDatabase](MLITDBGeniusDatabase, "sharedGeniusDatabase");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *a3 = objc_msgSend(v11, "geniusConfigurationVersion");

  }
  return v9;
}

uint64_t itdb_copy_metadata_for_global_id(void *a1, uint64_t a2, uint64_t *a3)
{
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend(a1, "_sharedBlobMutableData");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[MLITDBGeniusDatabase sharedGeniusDatabase](MLITDBGeniusDatabase, "sharedGeniusDatabase");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(a2) = objc_msgSend(v6, "getGeniusMetadataDataAndBytesForGlobalID:intoData:", a2, v5);

  if ((_DWORD)a2)
  {
    v7 = objc_retainAutorelease(v5);
    v8 = objc_msgSend(v7, "bytes");
    v9 = objc_msgSend(v7, "length");
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v9 = 0;
  v8 = 0;
  if (a3)
LABEL_5:
    *a3 = v9;
LABEL_6:

  return v8;
}

uint64_t itdb_check_for_global_id(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a1, "_sharedBlobMutableData");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[MLITDBGeniusDatabase sharedGeniusDatabase](MLITDBGeniusDatabase, "sharedGeniusDatabase");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "getGeniusMetadataDataAndBytesForGlobalID:intoData:", a2, v3);

  if ((_DWORD)v5)
    v5 = objc_msgSend(v3, "length") != 0;

  return v5;
}

uint64_t itdb_copy_similarities_for_global_id(void *a1, uint64_t a2, uint64_t *a3)
{
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend(a1, "_sharedBlobMutableData");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[MLITDBGeniusDatabase sharedGeniusDatabase](MLITDBGeniusDatabase, "sharedGeniusDatabase");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(a2) = objc_msgSend(v6, "getGeniusSimilaritiesDataAndBytesForGlobalID:intoData:", a2, v5);

  if ((_DWORD)a2)
  {
    v7 = objc_retainAutorelease(v5);
    v8 = objc_msgSend(v7, "bytes");
    v9 = objc_msgSend(v7, "length");
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v9 = 0;
  v8 = 0;
  if (a3)
LABEL_5:
    *a3 = v9;
LABEL_6:

  return v8;
}

uint64_t itdb_get_play_stats(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  void *v6;
  void *v7;
  double v8;
  CFAbsoluteTime v9;
  void *v10;
  double v11;
  void *v12;
  int v13;

  trackWithGlobalID(a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "distantPast");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "timeIntervalSinceReferenceDate");
  v9 = v8;

  if (v6)
  {
    objc_msgSend(v6, "valueForProperty:", CFSTR("item_stats.date_played"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "doubleValue");
    v9 = v11;

    objc_msgSend(v6, "valueForProperty:", CFSTR("item_stats.play_count_user"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "unsignedIntValue");

    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v13 = 0;
  if (a3)
LABEL_3:
    *a3 = ML3UInt32MacTimeFromCFAbsoluteTime(v9);
LABEL_4:
  if (a4)
    *a4 = v13;

  return 0;
}

uint64_t itdb_get_skip_stats(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  void *v6;
  void *v7;
  double v8;
  CFAbsoluteTime v9;
  void *v10;
  double v11;
  void *v12;
  int v13;

  trackWithGlobalID(a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "distantPast");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "timeIntervalSinceReferenceDate");
  v9 = v8;

  if (v6)
  {
    objc_msgSend(v6, "valueForProperty:", CFSTR("item_stats.date_skipped"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "doubleValue");
    v9 = v11;

    objc_msgSend(v6, "valueForProperty:", CFSTR("item_stats.skip_count_user"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "unsignedIntValue");

    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v13 = 0;
  if (a3)
LABEL_3:
    *a3 = ML3UInt32MacTimeFromCFAbsoluteTime(v9);
LABEL_4:
  if (a4)
    *a4 = v13;

  return 0;
}

uint64_t itdb_get_current_time()
{
  CFAbsoluteTime Current;

  Current = CFAbsoluteTimeGetCurrent();
  return ML3UInt32MacTimeFromCFAbsoluteTime(Current);
}

uint64_t itdb_playlist_random(uint64_t a1, unsigned int a2)
{
  int v2;

  if (a2 >= 0x7FFFFFFF)
    v2 = 0x7FFFFFFF;
  else
    v2 = a2;
  return ((double)(v2 - 1) * (double)arc4random() / 2147483650.0);
}

void sub_1AC2D6BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1AC2D715C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2D730C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2D74BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2D7698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2D786C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2D7A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10533(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10534(uint64_t a1)
{

}

void ML3ArtistDatabaseImportDataSource::~ML3ArtistDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ArtistDatabaseImportDataSource::getImportPropertyGroupKey(ML3ArtistDatabaseImportDataSource *this)
{
  return 19;
}

uint64_t ML3ArtistDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ArtistDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

id ML3ArtistDatabaseImportDataSource::identityPropertyForSource(ML3ArtistDatabaseImportDataSource *this, uint64_t a2)
{
  return ML3ArtistRulesIdentityPropertyForSource(a2);
}

uint64_t MIPAudiobookReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  MIPAlbum *v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(MIPAlbum);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && (MIPAlbumReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_76;
        goto LABEL_106;
      case 2u:
        v17 = objc_alloc_init(MIPArtist);
        v19 = 16;
        goto LABEL_26;
      case 3u:
        v17 = objc_alloc_init(MIPArtist);
        v19 = 32;
LABEL_26:
        objc_storeStrong((id *)(a1 + v19), v17);
        if (!PBReaderPlaceMark() || (MIPArtistReadFrom(v17, a2) & 1) == 0)
          goto LABEL_106;
        goto LABEL_76;
      case 4u:
        v17 = objc_alloc_init(MIPGenre);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (!PBReaderPlaceMark() || (MIPGenreReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_106;
        goto LABEL_76;
      case 5u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 84) |= 2u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_81:
        v55 = 40;
        goto LABEL_98;
      case 6u:
        v26 = 0;
        v27 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 84) |= 4u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v22 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_85:
        v55 = 72;
        goto LABEL_98;
      case 7u:
        v31 = 0;
        v32 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 84) |= 8u;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v22 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_89:
        v55 = 76;
        goto LABEL_98;
      case 8u:
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 84) |= 0x10u;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 1;
            v38 |= (unint64_t)(v41 & 0x7F) << v36;
            if (v41 < 0)
            {
              v36 += 7;
              v14 = v37++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
LABEL_93:
        v56 = v38 != 0;
        v57 = 80;
        goto LABEL_103;
      case 9u:
        v42 = 0;
        v43 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 84) |= 1u;
        while (2)
        {
          v44 = *v3;
          v45 = *(_QWORD *)(a2 + v44);
          if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
            *(_QWORD *)(a2 + v44) = v45 + 1;
            v22 |= (unint64_t)(v46 & 0x7F) << v42;
            if (v46 < 0)
            {
              v42 += 7;
              v14 = v43++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_97;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_97:
        v55 = 24;
LABEL_98:
        *(_DWORD *)(a1 + v55) = v22;
        goto LABEL_104;
      case 0xAu:
        v47 = 0;
        v48 = 0;
        v49 = 0;
        *(_BYTE *)(a1 + 84) |= 0x20u;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 1;
            v49 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              v14 = v48++ >= 9;
              if (v14)
              {
                v49 = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v49 = 0;
LABEL_102:
        v56 = v49 != 0;
        v57 = 81;
LABEL_103:
        *(_BYTE *)(a1 + v57) = v56;
        goto LABEL_104;
      case 0xBu:
        v17 = objc_alloc_init(MIPPlaybackInfo);
        objc_storeStrong((id *)(a1 + 64), v17);
        if (PBReaderPlaceMark() && (MIPPlaybackInfoReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_76:
          PBReaderRecallMark();

LABEL_104:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_106:

        return 0;
      case 0xCu:
        PBReaderReadString();
        v53 = objc_claimAutoreleasedReturnValue();
        v54 = *(void **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v53;

        goto LABEL_104;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_104;
    }
  }
}

void sub_1AC2DBB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10867(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10868(uint64_t a1)
{

}

void sub_1AC2DCFB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void MLChapterDataSetChapterArtworkCacheKey(uint64_t a1, uint64_t a2, void *a3)
{
  __CFString *v3;
  const char *CStringPtr;
  void *v5;
  void *v6;
  char buffer[16];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  if (!v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void MLChapterDataSetChapterArtworkCacheKey(ChapterDataRef, NSUInteger, NSString *__strong)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("ML3TrackImporter.m"), 568, CFSTR("no cache key specified"));

  }
  CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
  if (CStringPtr)
    goto LABEL_5;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)buffer = 0u;
  v8 = 0u;
  CStringPtr = buffer;
  if (CFStringGetCString(v3, buffer, 127, 0x8000100u))
  {
LABEL_5:
    strlen(CStringPtr);
    ChapterData_SetProperty();
    ChapterData_SetProperty();
  }

}

uint64_t ChapterData_GetNameCookieForTimeWithOptions()
{
  return ChapterData_GetNameCookieForTime();
}

uint64_t MIPAlbumReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  MIPArtist *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  void *v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 104) |= 4u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_90;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_92;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_90:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_92:
        v65 = 24;
        goto LABEL_122;
      case 2u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 72;
        goto LABEL_72;
      case 3u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 88;
        goto LABEL_72;
      case 4u:
        v23 = objc_alloc_init(MIPArtist);
        objc_storeStrong((id *)(a1 + 32), v23);
        if (PBReaderPlaceMark() && (MIPArtistReadFrom(v23, a2) & 1) != 0)
          goto LABEL_34;
        goto LABEL_125;
      case 5u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 104) |= 0x20u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v28) = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v28) = 0;
LABEL_96:
        v66 = 84;
        goto LABEL_117;
      case 6u:
        v32 = 0;
        v33 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 104) |= 0x10u;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v28 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                LODWORD(v28) = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v28) = 0;
LABEL_100:
        v66 = 80;
        goto LABEL_117;
      case 7u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 40;
        goto LABEL_72;
      case 8u:
        v37 = 0;
        v38 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 104) |= 0x40u;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 1;
            v28 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                LODWORD(v28) = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v28) = 0;
LABEL_104:
        v66 = 96;
        goto LABEL_117;
      case 9u:
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_BYTE *)(a1 + 104) |= 0x80u;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 1;
            v44 |= (unint64_t)(v47 & 0x7F) << v42;
            if (v47 < 0)
            {
              v42 += 7;
              v14 = v43++ >= 9;
              if (v14)
              {
                v44 = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
LABEL_108:
        *(_BYTE *)(a1 + 100) = v44 != 0;
        goto LABEL_123;
      case 0xAu:
        v48 = 0;
        v49 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 104) |= 2u;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 1;
            v19 |= (unint64_t)(v52 & 0x7F) << v48;
            if (v52 < 0)
            {
              v48 += 7;
              v14 = v49++ >= 9;
              if (v14)
              {
                v19 = 0;
                goto LABEL_112;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_112:
        v65 = 16;
        goto LABEL_122;
      case 0xBu:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 48;
LABEL_72:
        v53 = *(void **)(a1 + v25);
        *(_QWORD *)(a1 + v25) = v24;

        goto LABEL_123;
      case 0xCu:
        v54 = 0;
        v55 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 104) |= 8u;
        while (2)
        {
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
            *(_QWORD *)(a2 + v56) = v57 + 1;
            v28 |= (unint64_t)(v58 & 0x7F) << v54;
            if (v58 < 0)
            {
              v54 += 7;
              v14 = v55++ >= 9;
              if (v14)
              {
                LODWORD(v28) = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v28) = 0;
LABEL_116:
        v66 = 64;
LABEL_117:
        *(_DWORD *)(a1 + v66) = v28;
        goto LABEL_123;
      case 0xDu:
        v59 = 0;
        v60 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 104) |= 1u;
        while (2)
        {
          v61 = *v3;
          v62 = *(_QWORD *)(a2 + v61);
          if (v62 == -1 || v62 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
            *(_QWORD *)(a2 + v61) = v62 + 1;
            v19 |= (unint64_t)(v63 & 0x7F) << v59;
            if (v63 < 0)
            {
              v59 += 7;
              v14 = v60++ >= 9;
              if (v14)
              {
                v19 = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_121:
        v65 = 8;
LABEL_122:
        *(_QWORD *)(a1 + v65) = v19;
        goto LABEL_123;
      default:
        if ((v10 >> 3) != 50)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_123;
        }
        v23 = objc_alloc_init(MIPLibraryIdentifier);
        objc_msgSend((id)a1, "addLibraryIdentifiers:", v23);
        if (PBReaderPlaceMark() && (MIPLibraryIdentifierReadFrom((uint64_t)v23, a2) & 1) != 0)
        {
LABEL_34:
          PBReaderRecallMark();

LABEL_123:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_125:

        return 0;
    }
  }
}

void sub_1AC2E04D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  NSObject *v14;

  if (a2 == 1)
  {
    v10 = objc_begin_catch(exception_object);
    _ML3LogCategoryCacheManagement();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(a9) = 138543362;
      *(_QWORD *)((char *)&a9 + 4) = v10;
      _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_DEFAULT, "caught exception trying to purge storage: %{public}@", (uint8_t *)&a9, 0xCu);
    }

    objc_msgSend(v10, "userInfo");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKey:", CFSTR("ML3DatabaseExceptionErrorUserInfoKey"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13 && objc_msgSend(v13, "code") == 13)
    {
      _ML3LogCategoryCacheManagement();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(a9) = 0;
        _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_DEFAULT, "force-deleting cached assets to free space", (uint8_t *)&a9, 2u);
      }

      objc_msgSend(v9, "_clearAllCloudAssets");
      objc_end_catch();
      JUMPOUT(0x1AC2E0444);
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1AC2E12A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2E15FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 160), 8);
  _Block_object_dispose((const void *)(v34 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1AC2E1AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1AC2E1BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_1AC2E2CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2E3364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2E3594(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AC2E37D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2E3940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11281(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11282(uint64_t a1)
{

}

void sub_1AC2E3E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *ML3MusicLibraryDeletionUrgencyDescription(uint64_t a1)
{
  const __CFString *result;

  switch(a1)
  {
    case 1:
      result = CFSTR("medium");
      break;
    case 2:
      result = CFSTR("high");
      break;
    case 3:
      result = CFSTR("special");
      break;
    case 4:
      result = CFSTR("none");
      break;
    default:
      if (a1 == 0x7FFFFFFF)
        result = CFSTR("undefined");
      else
        result = CFSTR("low");
      break;
  }
  return result;
}

uint64_t ML3ArtworkPurgeabilityLevelOriginal()
{
  if ((MSVDeviceIsAppleTV() & 1) != 0)
    return 2;
  if (MSVDeviceIsWatch())
    return 3;
  return 0x7FFFFFFFLL;
}

uint64_t ML3ArtworkPurgeabilityLevelCache()
{
  if (MSVDeviceIsAppleTV())
    return 1;
  else
    return 2;
}

void ML3ItemVideoDatabaseImportDataSource::~ML3ItemVideoDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ItemVideoDatabaseImportDataSource::getImportPropertyGroupKey(ML3ItemVideoDatabaseImportDataSource *this)
{
  return 7;
}

uint64_t ML3ItemVideoDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ItemVideoDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t MIPMovieReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  MIPArtist *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  void *v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(MIPArtist);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (PBReaderPlaceMark() && (MIPArtistReadFrom(v17, a2) & 1) != 0)
          goto LABEL_128;
        goto LABEL_190;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 112) |= 0x200u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_132:
        v98 = 104;
        goto LABEL_170;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_WORD *)(a1 + 112) |= 0x2000u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v27 = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_136:
        v99 = v27 != 0;
        v100 = 111;
        goto LABEL_149;
      case 4u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        *(_WORD *)(a1 + 112) |= 0x800u;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                v33 = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_140:
        v99 = v33 != 0;
        v100 = 109;
        goto LABEL_149;
      case 5u:
        PBReaderReadString();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = 64;
        goto LABEL_125;
      case 6u:
        PBReaderReadString();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = 88;
        goto LABEL_125;
      case 7u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        *(_WORD *)(a1 + 112) |= 0x400u;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v41 = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v41 = 0;
LABEL_144:
        v99 = v41 != 0;
        v100 = 108;
        goto LABEL_149;
      case 8u:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        *(_WORD *)(a1 + 112) |= 0x1000u;
        while (2)
        {
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
            *(_QWORD *)(a2 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v14 = v46++ >= 9;
              if (v14)
              {
                v47 = 0;
                goto LABEL_148;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v47 = 0;
LABEL_148:
        v99 = v47 != 0;
        v100 = 110;
LABEL_149:
        *(_BYTE *)(a1 + v100) = v99;
        goto LABEL_188;
      case 9u:
        v51 = 0;
        v52 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 112) |= 0x10u;
        while (2)
        {
          v53 = *v3;
          v54 = *(_QWORD *)(a2 + v53);
          if (v54 == -1 || v54 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v54);
            *(_QWORD *)(a2 + v53) = v54 + 1;
            v21 |= (unint64_t)(v55 & 0x7F) << v51;
            if (v55 < 0)
            {
              v51 += 7;
              v14 = v52++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_153;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_153:
        v98 = 48;
        goto LABEL_170;
      case 0xAu:
        v56 = 0;
        v57 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 112) |= 0x40u;
        while (2)
        {
          v58 = *v3;
          v59 = *(_QWORD *)(a2 + v58);
          if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v59);
            *(_QWORD *)(a2 + v58) = v59 + 1;
            v21 |= (unint64_t)(v60 & 0x7F) << v56;
            if (v60 < 0)
            {
              v56 += 7;
              v14 = v57++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_157;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_157:
        v98 = 56;
        goto LABEL_170;
      case 0xBu:
        v61 = 0;
        v62 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 112) |= 0x20u;
        while (2)
        {
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
            *(_QWORD *)(a2 + v63) = v64 + 1;
            v21 |= (unint64_t)(v65 & 0x7F) << v61;
            if (v65 < 0)
            {
              v61 += 7;
              v14 = v62++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_161;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_161:
        v98 = 52;
        goto LABEL_170;
      case 0xCu:
        v66 = 0;
        v67 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 112) |= 0x80u;
        while (2)
        {
          v68 = *v3;
          v69 = *(_QWORD *)(a2 + v68);
          if (v69 == -1 || v69 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v69);
            *(_QWORD *)(a2 + v68) = v69 + 1;
            v21 |= (unint64_t)(v70 & 0x7F) << v66;
            if (v70 < 0)
            {
              v66 += 7;
              v14 = v67++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_165;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_165:
        v98 = 96;
        goto LABEL_170;
      case 0xDu:
        v71 = 0;
        v72 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 112) |= 0x100u;
        while (2)
        {
          v73 = *v3;
          v74 = *(_QWORD *)(a2 + v73);
          if (v74 == -1 || v74 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v74);
            *(_QWORD *)(a2 + v73) = v74 + 1;
            v21 |= (unint64_t)(v75 & 0x7F) << v71;
            if (v75 < 0)
            {
              v71 += 7;
              v14 = v72++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_169;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_169:
        v98 = 100;
LABEL_170:
        *(_DWORD *)(a1 + v98) = v21;
        goto LABEL_188;
      case 0xEu:
        v76 = 0;
        v77 = 0;
        v78 = 0;
        *(_WORD *)(a1 + 112) |= 1u;
        while (2)
        {
          v79 = *v3;
          v80 = *(_QWORD *)(a2 + v79);
          if (v80 == -1 || v80 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v81 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v80);
            *(_QWORD *)(a2 + v79) = v80 + 1;
            v78 |= (unint64_t)(v81 & 0x7F) << v76;
            if (v81 < 0)
            {
              v76 += 7;
              v14 = v77++ >= 9;
              if (v14)
              {
                v78 = 0;
                goto LABEL_174;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v78 = 0;
LABEL_174:
        v101 = 8;
        goto LABEL_187;
      case 0xFu:
        v82 = 0;
        v83 = 0;
        v78 = 0;
        *(_WORD *)(a1 + 112) |= 2u;
        while (2)
        {
          v84 = *v3;
          v85 = *(_QWORD *)(a2 + v84);
          if (v85 == -1 || v85 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v86 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v85);
            *(_QWORD *)(a2 + v84) = v85 + 1;
            v78 |= (unint64_t)(v86 & 0x7F) << v82;
            if (v86 < 0)
            {
              v82 += 7;
              v14 = v83++ >= 9;
              if (v14)
              {
                v78 = 0;
                goto LABEL_178;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v78 = 0;
LABEL_178:
        v101 = 16;
        goto LABEL_187;
      case 0x10u:
        v87 = 0;
        v88 = 0;
        v78 = 0;
        *(_WORD *)(a1 + 112) |= 4u;
        while (2)
        {
          v89 = *v3;
          v90 = *(_QWORD *)(a2 + v89);
          if (v90 == -1 || v90 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v91 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v90);
            *(_QWORD *)(a2 + v89) = v90 + 1;
            v78 |= (unint64_t)(v91 & 0x7F) << v87;
            if (v91 < 0)
            {
              v87 += 7;
              v14 = v88++ >= 9;
              if (v14)
              {
                v78 = 0;
                goto LABEL_182;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v78 = 0;
LABEL_182:
        v101 = 24;
        goto LABEL_187;
      case 0x11u:
        v92 = 0;
        v93 = 0;
        v78 = 0;
        *(_WORD *)(a1 + 112) |= 8u;
        while (2)
        {
          v94 = *v3;
          v95 = *(_QWORD *)(a2 + v94);
          if (v95 == -1 || v95 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v96 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v95);
            *(_QWORD *)(a2 + v94) = v95 + 1;
            v78 |= (unint64_t)(v96 & 0x7F) << v92;
            if (v96 < 0)
            {
              v92 += 7;
              v14 = v93++ >= 9;
              if (v14)
              {
                v78 = 0;
                goto LABEL_186;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v78 = 0;
LABEL_186:
        v101 = 32;
LABEL_187:
        *(_QWORD *)(a1 + v101) = v78;
        goto LABEL_188;
      case 0x12u:
        PBReaderReadData();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = 72;
LABEL_125:
        v97 = *(void **)(a1 + v38);
        *(_QWORD *)(a1 + v38) = v37;

        goto LABEL_188;
      case 0x13u:
        v17 = objc_alloc_init(MIPGenre);
        objc_storeStrong((id *)(a1 + 80), v17);
        if (PBReaderPlaceMark() && (MIPGenreReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_128:
          PBReaderRecallMark();

LABEL_188:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_190:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_188;
    }
  }
}

void sub_1AC2E9418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 184), 8);
  _Block_object_dispose((const void *)(v27 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12046(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12047(uint64_t a1)
{

}

void ML3ContainerItemImportItem::~ML3ContainerItemImportItem(ML3ContainerItemImportItem *this)
{
  ML3ContainerItemImportItem::~ML3ContainerItemImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{
  *(_QWORD *)this = &off_1E5B4E690;
  *((_QWORD *)this + 21) = off_1E5B4D010;
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 16) = off_1E5B4D010;
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  *((_QWORD *)this + 11) = off_1E5B4D010;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

uint64_t ML3ContainerItemImportItem::isValid(ML3ContainerItemImportItem *this)
{
  return 1;
}

void ML3ContainerItemImportItem::getStringValue(ML3ContainerItemImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const std::string *v4;
  void *v5;
  id v6;

  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  switch((_DWORD)a2)
  {
    case 0xE00000A:
      *(_BYTE *)(a3 + 8) = *((_BYTE *)this + 176);
      v4 = (const std::string *)((char *)this + 184);
      goto LABEL_7;
    case 0xE000005:
      *(_BYTE *)(a3 + 8) = *((_BYTE *)this + 136);
      v4 = (const std::string *)((char *)this + 144);
      goto LABEL_7;
    case 0xE000004:
      *(_BYTE *)(a3 + 8) = *((_BYTE *)this + 96);
      v4 = (const std::string *)((char *)this + 104);
LABEL_7:
      std::string::operator=((std::string *)(a3 + 16), v4);
      return;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual ML3ImportStringValue ML3ContainerItemImportItem::getStringValue(MLImportPropertyKey) const");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("ML3ContainerItemImportItem.mm"), 67, CFSTR("ML3ContainerItemImportItem::getIntegerValue called with unknown property key %x"), a2);

}

void sub_1AC2E9E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _QWORD *v10;
  void *v11;
  uint64_t v12;

  *v10 = v12;
  _Unwind_Resume(a1);
}

uint64_t ML3ContainerItemImportItem::getIntegerValue(ML3ContainerItemImportItem *this, uint64_t a2)
{
  void *v4;
  void *v5;

  switch((_DWORD)a2)
  {
    case 0xE000003:
      return *((_QWORD *)this + 10);
    case 0xE000002:
      return *((_QWORD *)this + 9);
    case 0xE000001:
      return *((_QWORD *)this + 8);
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual int64_t ML3ContainerItemImportItem::getIntegerValue(MLImportPropertyKey) const");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("ML3ContainerItemImportItem.mm"), 46, CFSTR("ML3ContainerItemImportItem::getIntegerValue called with unknown property key %x"), a2);

  return 0;
}

void sub_1AC2E9F58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ML3ContainerItemImportItem::hasValue(ML3ContainerItemImportItem *this, uint64_t a2)
{
  void *v3;
  void *v4;

  if ((a2 - 234881025) < 6 && ((0x37u >> (a2 - 1)) & 1) != 0)
    return 1;
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual BOOL ML3ContainerItemImportItem::hasValue(MLImportPropertyKey) const");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3ContainerItemImportItem.mm"), 87, CFSTR("ML3ContainerItemImportItem::hasValue called with unknown property key %x"), a2);

  return 0;
}

void sub_1AC2EA024(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ML3ImportValue<std::string>::ML3ImportValue(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  __int128 v4;

  *(_QWORD *)a1 = off_1E5B4D010;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

uint64_t ML3ContainerItemImportItem::ML3ContainerItemImportItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = &off_1E5B4E690;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 72) = a4;
  *(_QWORD *)(a1 + 80) = a5;
  ML3ImportValue<std::string>::ML3ImportValue(a1 + 88, a6);
  ML3ImportValue<std::string>::ML3ImportValue(a1 + 128, a7);
  ML3ImportValue<std::string>::ML3ImportValue(a1 + 168, a8);
  *(_QWORD *)(a1 + 8) = a2;
  return a1;
}

void sub_1AC2EA1C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 128) = off_1E5B4D010;
  if (*(char *)(v1 + 167) < 0)
    operator delete(*(void **)(v1 + 144));
  *(_QWORD *)(v1 + 88) = off_1E5B4D010;
  if (*(char *)(v1 + 127) < 0)
    operator delete(*(void **)(v1 + 104));
  *(_QWORD *)v1 = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

CFAbsoluteTime ML3CFAbsoluteTimeFromUInt32MacTime(unsigned int a1)
{
  CFAbsoluteTime v1;
  const __CFTimeZone *v2;
  CFAbsoluteTime v3;

  v1 = (double)a1 - *MEMORY[0x1E0C9ADE8];
  v2 = CFTimeZoneCopySystem();
  v3 = v1 - CFTimeZoneGetSecondsFromGMT(v2, v1);
  CFRelease(v2);
  return v3;
}

uint64_t ML3UInt32MacTimeFromCFAbsoluteTime(CFAbsoluteTime a1)
{
  unsigned int v2;
  const __CFTimeZone *v3;
  uint64_t v4;

  v2 = (*MEMORY[0x1E0C9ADE8] + a1);
  v3 = CFTimeZoneCopySystem();
  v4 = (CFTimeZoneGetSecondsFromGMT(v3, a1) + (double)v2);
  CFRelease(v3);
  return v4;
}

uint64_t ML3CreateIntegerUUID()
{
  const __CFUUID *v0;
  uint64_t v1;

  v0 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  v1 = *(_OWORD *)&CFUUIDGetUUIDBytes(v0);
  if (!v1)
  {
    v1 = ++ML3CreateIntegerUUID_sUInt64UUID;
    if (!v0)
      return v1;
    goto LABEL_3;
  }
  if (v0)
LABEL_3:
    CFRelease(v0);
  return v1;
}

CFNumberRef ML3CreateNumberUUID()
{
  uint64_t valuePtr;

  valuePtr = ML3CreateIntegerUUID();
  return CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
}

UInt8 *ML3CopyUTF8StringFromCFString(const __CFString *a1)
{
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v4;
  CFIndex usedBufLen;
  CFRange v7;

  if (!a1)
    return 0;
  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  usedBufLen = 0;
  v4 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xECA975D5uLL);
  v7.location = 0;
  v7.length = Length;
  CFStringGetBytes(a1, v7, 0x8000100u, 0, 0, v4, MaximumSizeForEncoding, &usedBufLen);
  v4[usedBufLen] = 0;
  return v4;
}

uint64_t MSPMediaSyncErrorReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MSPMediaSyncPackageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  MSPMediaSyncHeader *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 9)
      {
        if ((_DWORD)v17 == 1)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (1)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
              break;
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if ((v30 & 0x80) == 0)
              goto LABEL_54;
            v25 += 7;
            v14 = v26++ >= 9;
            if (v14)
            {
              LODWORD(v27) = 0;
              goto LABEL_56;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v27) = 0;
LABEL_56:
          *(_DWORD *)(a1 + 32) = v27;
        }
        else
        {
          if ((_DWORD)v17 != 2)
          {
LABEL_47:
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_50;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              v21 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v21 = 0;
LABEL_52:
          *(_BYTE *)(a1 + 36) = v21 != 0;
        }
      }
      else
      {
        switch((_DWORD)v17)
        {
          case 0xA:
            v18 = objc_alloc_init(MSPMediaSyncHeader);
            objc_storeStrong((id *)(a1 + 16), v18);
            if (!PBReaderPlaceMark() || !MSPMediaSyncHeaderReadFrom((uint64_t)v18, a2))
            {
LABEL_59:

              return 0;
            }
            break;
          case 0xB:
            v18 = objc_alloc_init(MSPMediaSyncOperation);
            objc_storeStrong((id *)(a1 + 24), v18);
            if (!PBReaderPlaceMark() || (MSPMediaSyncOperationReadFrom((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_59;
            break;
          case 0xD:
            v18 = objc_alloc_init(MSPMediaSyncError);
            objc_storeStrong((id *)(a1 + 8), v18);
            if (!PBReaderPlaceMark() || (MSPMediaSyncErrorReadFrom((uint64_t)v18, a2) & 1) == 0)
              goto LABEL_59;
            break;
          default:
            goto LABEL_47;
        }
        PBReaderRecallMark();

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void ML3ContainerItemPersonDatabaseImportDataSource::~ML3ContainerItemPersonDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ContainerItemPersonDatabaseImportDataSource::getImportPropertyGroupKey(ML3ContainerItemPersonDatabaseImportDataSource *this)
{
  return 23;
}

uint64_t ML3ContainerItemPersonDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ContainerItemPersonDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

id ML3ContainerItemPersonDatabaseImportDataSource::generateVTableInsertionFromClause(ML3ContainerItemPersonDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ LEFT OUTER JOIN container_item_person ON %@.ROWID = container_item_person.container_item_person_pid"), a3, a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

void ML3ContainerDatabaseImportDataSource::~ML3ContainerDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ContainerDatabaseImportDataSource::getImportPropertyGroupKey(ML3ContainerDatabaseImportDataSource *this)
{
  return 11;
}

uint64_t ML3ContainerDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ContainerDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

void ML3ContainerDatabaseImportDataSource::prepareColumns(_QWORD *a1, uint64_t *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t (**v7)();
  std::string __p;
  std::string v9;

  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v7, *a2, 184549384);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v9 = __p;
  ML3CPPBridgeString((const UInt8 *)&v9, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  v7 = off_1E5B4D010;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = *(id *)(a1[3] + 24);
  objc_msgSend(v4, "objectForKey:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  a1[9] = objc_msgSend(v5, "ML3NameOrderValue");
  a1[10] = v6;

}

void sub_1AC2EC514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t ML3ContainerDatabaseImportDataSource::integerValueForKey(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  _QWORD *v31;
  _QWORD *i;
  unint64_t v33;
  _QWORD *v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unint64_t *v60;
  NSObject *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  BOOL v76;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v85;
  __int128 v86;
  float v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint8_t buf[4];
  unint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  if ((int)a3 <= 184549391)
  {
    if ((_DWORD)a3 != 184549381)
    {
      if ((_DWORD)a3 == 184549385)
        return a1[9];
LABEL_97:
      v57 = *a2;
      v15 = (std::__shared_weak_count *)a2[1];
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v59 = __ldxr(p_shared_owners);
        while (__stxr(v59 + 1, p_shared_owners));
      }
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 32))(v57, a3);
      if (v15)
      {
        v60 = (unint64_t *)&v15->__shared_owners_;
        do
          v19 = __ldaxr(v60);
        while (__stlxr(v19 - 1, v60));
        goto LABEL_103;
      }
      return v6;
    }
    goto LABEL_9;
  }
  if ((_DWORD)a3 == 184549392)
  {
    v20 = *a2;
    v21 = (std::__shared_weak_count *)a2[1];
    v88 = *a2;
    v89 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 32))(v20, 184549392);
    if (v21)
    {
      v24 = (unint64_t *)&v21->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (!v6)
      return v6;
    v26 = a1[3];
    v85 = 0u;
    v86 = 0u;
    v87 = *(float *)(v26 + 2400);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>((uint64_t)&v85, *(_QWORD *)(v26 + 2376));
    v27 = *(_QWORD **)(v26 + 2384);
    if (!v27)
    {
LABEL_76:
      v43 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(&v85, v6);
      if (v43)
      {
        v6 = v43[3];
      }
      else
      {
        v61 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          v105 = v6;
          _os_log_impl(&dword_1AC149000, v61, OS_LOG_TYPE_ERROR, "failed to map container parent_pid %lld", buf, 0xCu);
        }

      }
      std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v85);
      return v6;
    }
    v28 = *((_QWORD *)&v85 + 1);
    while (1)
    {
      v29 = v27[2];
      if (v28)
      {
        v30 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          v3 = v27[2];
          if (v29 >= v28)
            v3 = v29 % v28;
        }
        else
        {
          v3 = (v28 - 1) & v29;
        }
        v31 = *(_QWORD **)(v85 + 8 * v3);
        if (v31)
        {
          for (i = (_QWORD *)*v31; i; i = (_QWORD *)*i)
          {
            v33 = i[1];
            if (v33 == v29)
            {
              if (i[2] == v29)
                goto LABEL_75;
            }
            else
            {
              if (v30.u32[0] > 1uLL)
              {
                if (v33 >= v28)
                  v33 %= v28;
              }
              else
              {
                v33 &= v28 - 1;
              }
              if (v33 != v3)
                break;
            }
          }
        }
      }
      v34 = operator new(0x20uLL);
      *v34 = 0;
      v34[1] = v29;
      *((_OWORD *)v34 + 1) = *((_OWORD *)v27 + 1);
      v35 = (float)(unint64_t)(*((_QWORD *)&v86 + 1) + 1);
      if (!v28 || (float)(v87 * (float)v28) < v35)
      {
        v36 = (v28 & (v28 - 1)) != 0;
        if (v28 < 3)
          v36 = 1;
        v37 = v36 | (2 * v28);
        v38 = vcvtps_u32_f32(v35 / v87);
        if (v37 <= v38)
          v39 = v38;
        else
          v39 = v37;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>((uint64_t)&v85, v39);
        v28 = *((_QWORD *)&v85 + 1);
        if ((*((_QWORD *)&v85 + 1) & (*((_QWORD *)&v85 + 1) - 1)) != 0)
        {
          if (v29 >= *((_QWORD *)&v85 + 1))
            v3 = v29 % *((_QWORD *)&v85 + 1);
          else
            v3 = v29;
        }
        else
        {
          v3 = (*((_QWORD *)&v85 + 1) - 1) & v29;
        }
      }
      v40 = v85;
      v41 = *(_QWORD **)(v85 + 8 * v3);
      if (v41)
      {
        *v34 = *v41;
      }
      else
      {
        *v34 = v86;
        *(_QWORD *)&v86 = v34;
        *(_QWORD *)(v40 + 8 * v3) = &v86;
        if (!*v34)
          goto LABEL_74;
        v42 = *(_QWORD *)(*v34 + 8);
        if ((v28 & (v28 - 1)) != 0)
        {
          if (v42 >= v28)
            v42 %= v28;
        }
        else
        {
          v42 &= v28 - 1;
        }
        v41 = (_QWORD *)(v85 + 8 * v42);
      }
      *v41 = v34;
LABEL_74:
      ++*((_QWORD *)&v86 + 1);
LABEL_75:
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_76;
    }
  }
  if ((_DWORD)a3 == 184549434)
  {
    v44 = *a2;
    v45 = (std::__shared_weak_count *)a2[1];
    v98 = *a2;
    v99 = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 32))(v44, 184549434);
    if (v45)
    {
      v48 = (unint64_t *)&v45->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v6)
      return v6;
    if (*(_BYTE *)(*a2 + 16))
    {
      v50 = (std::__shared_weak_count *)a2[1];
      v96 = *a2;
      v97 = v50;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      if ((*(unsigned int (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 120))(a1, &v96, 184549395))
      {
        v53 = (std::__shared_weak_count *)a2[1];
        v94 = *a2;
        v95 = v53;
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        if ((*(unsigned int (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 120))(a1, &v94, 184549379))
          v56 = *(_BYTE *)(*a2 + 18) != 0;
        else
          v56 = 0;
        v78 = v95;
        if (v95)
        {
          v79 = (unint64_t *)&v95->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
      }
      else
      {
        v56 = 0;
      }
      v81 = v97;
      if (!v97)
        goto LABEL_148;
      v82 = (unint64_t *)&v97->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
        if (!v56)
          return 0;
      }
      else
      {
LABEL_148:
        if (!v56)
          return 0;
      }
    }
    else if (!*(_BYTE *)(*a2 + 18))
    {
      return 0;
    }
    v62 = (std::__shared_weak_count *)a2[1];
    v92 = *a2;
    v93 = v62;
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    v65 = (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 80))(a1, &v92, 184549395);
    v66 = v93;
    if (v93)
    {
      v67 = (unint64_t *)&v93->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = (std::__shared_weak_count *)a2[1];
    v90 = *a2;
    v91 = v69;
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    v72 = (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 80))(a1, &v90, 184549379);
    v73 = v91;
    if (v91)
    {
      v74 = (unint64_t *)&v91->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    if (v65)
      v76 = (unint64_t)(v72 - 21) >= 0xFFFFFFFFFFFFFFFELL;
    else
      v76 = 1;
    return !v76 && v72 != 32;
  }
  if ((_DWORD)a3 != 184549416)
    goto LABEL_97;
LABEL_9:
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v102 = *a2;
  v103 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a3);
  v6 = v11;
  if (!v8)
    goto LABEL_16;
  v12 = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (v6)
      return v6;
  }
  else
  {
LABEL_16:
    if (v11)
      return v6;
  }
  if (*(_BYTE *)(*a2 + 16) || (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 184549430))
    return 0;
  v14 = *a2;
  v15 = (std::__shared_weak_count *)a2[1];
  v100 = v14;
  v101 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, 184549380);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
LABEL_103:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v6;
}

void sub_1AC2ECD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v16;
  va_list va;
  uint64_t v18;
  va_list va1;

  va_start(va1, a15);
  va_start(va, a15);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void ML3ContainerDatabaseImportDataSource::dataValueForKey(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;

  *a3 = 0;
  a3[1] = 0;
  v4 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(&v14, v4, a2);
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a3, &v14);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1AC2ECEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void ML3ContainerDatabaseImportDataSource::stringValueForKey(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string __str;
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t (**v29)();
  std::string::value_type v30;
  std::string __p;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v29 = off_1E5B4D010;
  v30 = 0;
  memset(&__p, 0, sizeof(__p));
  if ((_DWORD)a3 == 184549439)
  {
    v6 = *a2;
    v7 = (std::__shared_weak_count *)a2[1];
    v27 = *a2;
    v28 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      v32 = v6;
      v33 = v7;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    else
    {
      v32 = v6;
      v33 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, 184549439);
    if (v7)
    {
      v18 = (unint64_t *)&v7->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (!*(_BYTE *)(a4 + 8) && !*(_BYTE *)(v27 + 16))
    {
      v20 = *(_QWORD *)(v27 + 8);
      v21 = *(id *)(*(_QWORD *)(a1 + 24) + 8);
      +[ML3Container nextFilepathForPlaylistType:withPersistentID:inLibrary:](ML3Container, "nextFilepathForPlaylistType:withPersistentID:inLibrary:", 2, v20, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      if (v22)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(objc_retainAutorelease(v22), "UTF8String"));
        std::string::operator=((std::string *)(a4 + 16), &__str);
        *(_BYTE *)(a4 + 8) = 1;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }

    }
    if (v7)
    {
      v23 = (unint64_t *)&v7->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    v11 = *a2;
    v12 = (std::__shared_weak_count *)a2[1];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(&__str, v11, a3);
    v30 = __str.__r_.__value_.__s.__data_[8];
    std::string::operator=(&__p, (const std::string *)&__str.__r_.__value_.__r.__words[2]);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5B4D010;
    if (v26 < 0)
      operator delete((void *)__str.__r_.__value_.__r.__words[2]);
    if (v12)
    {
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    *(_QWORD *)a4 = off_1E5B4D010;
    *(_BYTE *)(a4 + 8) = v30;
    v17 = (std::string *)(a4 + 16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v17, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(a4 + 32) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
  }
  v29 = off_1E5B4D010;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AC2ED180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  void *v32;
  uint64_t v33;

  if (a16 < 0)
    operator delete(__p);

  *(_QWORD *)v31 = v33;
  if (*(char *)(v31 + 39) < 0)
    operator delete(*(void **)(v31 + 16));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  a24 = v33;
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

uint64_t ML3ContainerDatabaseImportDataSource::hasValueForKey(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  v5 = (a3 - 184549380);
  if (v5 > 0x3B)
    goto LABEL_34;
  if (((1 << (a3 - 4)) & 0x800001000000003) != 0)
  {
    v6 = *a2;
    if (*(_BYTE *)(*a2 + 16))
    {
      v7 = (std::__shared_weak_count *)a2[1];
      v46 = *a2;
      v47 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 56))(v6, a3) & 1) != 0)
      {
        v10 = 1;
        if (!v7)
          return v10;
      }
      else if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 200))(v6, a3))
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
        if (!v7)
          return v10;
      }
      else
      {
        v10 = 0;
        if (!v7)
          return v10;
      }
      v24 = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(v24);
      while (__stlxr(v17 - 1, v24));
      goto LABEL_69;
    }
    return 1;
  }
  if (v5 == 5)
  {
    v18 = *a2;
    v7 = (std::__shared_weak_count *)a2[1];
    if (v7)
    {
      v19 = (unint64_t *)&v7->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 56))(v18, 184549384) & 1) != 0)
    {
      v10 = 1;
      if (!v7)
        return v10;
    }
    else if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 200))(v18, 184549384))
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 56))(v18);
      if (!v7)
        return v10;
    }
    else
    {
      v10 = 0;
      if (!v7)
        return v10;
    }
    v34 = (unint64_t *)&v7->__shared_owners_;
    do
      v17 = __ldaxr(v34);
    while (__stlxr(v17 - 1, v34));
    goto LABEL_69;
  }
  if (v5 != 54)
  {
LABEL_34:
    v21 = *a2;
    v7 = (std::__shared_weak_count *)a2[1];
    if (v7)
    {
      v22 = (unint64_t *)&v7->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 56))(v21, a3) & 1) != 0)
    {
      v10 = 1;
      if (!v7)
        return v10;
    }
    else if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 200))(v21, a3))
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 56))(v21);
      if (!v7)
        return v10;
    }
    else
    {
      v10 = 0;
      if (!v7)
        return v10;
    }
    v35 = (unint64_t *)&v7->__shared_owners_;
    do
      v17 = __ldaxr(v35);
    while (__stlxr(v17 - 1, v35));
    goto LABEL_69;
  }
  v11 = *a2;
  if (!*(_BYTE *)(*a2 + 16))
    return 1;
  v13 = (std::__shared_weak_count *)a2[1];
  v44 = *a2;
  v45 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 56))(v11, 184549434) & 1) != 0
    || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 200))(v11, 184549434)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11) & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    v25 = (std::__shared_weak_count *)a2[1];
    v42 = *a2;
    v43 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 120))(a1, &v42, 184549395))
    {
      v28 = (std::__shared_weak_count *)a2[1];
      v40 = *a2;
      v41 = v28;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 120))(a1, &v40, 184549379);
      v31 = v41;
      if (v41)
      {
        v32 = (unint64_t *)&v41->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
    else
    {
      v10 = 0;
    }
    v37 = v43;
    if (v43)
    {
      v38 = (unint64_t *)&v43->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  v7 = v45;
  if (v45)
  {
    v16 = (unint64_t *)&v45->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
LABEL_69:
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v10;
}

void sub_1AC2ED638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

unint64_t ML3CPP::Element::integerValue(ML3CPP::Element *this)
{
  unint64_t result;

  result = 0;
  switch(*((_DWORD *)this + 16))
  {
    case 1:
      result = **((char **)this + 6);
      break;
    case 2:
      result = (__int16)(bswap32(**((unsigned __int16 **)this + 6)) >> 16);
      break;
    case 4:
      result = (int)bswap32(**((_DWORD **)this + 6));
      break;
    case 8:
      result = bswap64(**((_QWORD **)this + 6));
      break;
    default:
      return result;
  }
  return result;
}

void ML3CPP::Element::appendChildElement(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t **v45;
  uint64_t **v46;
  uint64_t v47;
  __int128 v48;

  if (*a2)
  {
    v4 = (_QWORD *)a1[10];
    v5 = a1[11];
    if ((unint64_t)v4 >= v5)
    {
      v10 = a1[9];
      v11 = ((uint64_t)v4 - v10) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v13 = v5 - v10;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v14);
      v17 = &v15[16 * v11];
      v18 = *(_OWORD *)a2;
      *(_OWORD *)v17 = *(_OWORD *)a2;
      if (*((_QWORD *)&v18 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v22 = (_QWORD *)a1[9];
      v21 = (_QWORD *)a1[10];
      if (v21 == v22)
      {
        v25 = vdupq_n_s64((unint64_t)v21);
        v23 = &v15[16 * v11];
      }
      else
      {
        v23 = &v15[16 * v11];
        do
        {
          v24 = *((_OWORD *)v21 - 1);
          v21 -= 2;
          *((_OWORD *)v23 - 1) = v24;
          v23 -= 16;
          *v21 = 0;
          v21[1] = 0;
        }
        while (v21 != v22);
        v25 = *(int64x2_t *)(a1 + 9);
      }
      v9 = v17 + 16;
      a1[9] = (uint64_t)v23;
      a1[10] = (uint64_t)(v17 + 16);
      a1[11] = (uint64_t)&v15[16 * v16];
      v26 = v25.i64[1];
      v27 = (void *)v25.i64[0];
      while ((void *)v26 != v27)
        v26 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v26 - 16);
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v4 = *a2;
      v6 = a2[1];
      v4[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = v4 + 2;
    }
    a1[10] = (uint64_t)v9;
    v28 = (std::__shared_weak_count *)a1[1];
    if (!v28 || (v29 = *a2, v30 = *a1, (v31 = std::__shared_weak_count::lock(v28)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v32 = v31;
    p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
    do
      v34 = __ldxr(p_shared_weak_owners);
    while (__stxr(v34 + 1, p_shared_weak_owners));
    v35 = *(std::__shared_weak_count **)(v29 + 32);
    *(_QWORD *)(v29 + 24) = v30;
    *(_QWORD *)(v29 + 32) = v32;
    if (v35)
      std::__shared_weak_count::__release_weak(v35);
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    v38 = a2[1];
    v39 = *(_DWORD *)(*a2 + 16);
    *(_QWORD *)&v48 = *a2;
    *((_QWORD *)&v48 + 1) = v38;
    if (v38)
    {
      v40 = (unint64_t *)(v38 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = (char *)operator new(0x38uLL);
    v43 = (uint64_t *)v42;
    v44 = (uint64_t **)(a1 + 13);
    v45 = (uint64_t **)a1[13];
    *((_DWORD *)v42 + 8) = v39;
    *(_OWORD *)(v42 + 40) = v48;
    if (v45)
    {
      do
      {
        while (1)
        {
          v44 = v45;
          if (v39 >= *((_DWORD *)v45 + 8))
            break;
          v45 = (uint64_t **)*v45;
          v46 = v44;
          if (!*v44)
            goto LABEL_46;
        }
        v45 = (uint64_t **)v45[1];
      }
      while (v45);
      v46 = v44 + 1;
    }
    else
    {
      v46 = (uint64_t **)(a1 + 13);
    }
LABEL_46:
    *(_QWORD *)v42 = 0;
    *((_QWORD *)v42 + 1) = 0;
    *((_QWORD *)v42 + 2) = v44;
    *v46 = (uint64_t *)v42;
    v47 = *(_QWORD *)a1[12];
    if (v47)
    {
      a1[12] = v47;
      v43 = *v46;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[13], v43);
    ++a1[14];
  }
}

void sub_1AC2EDA74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

uint64_t *ML3CPP::Element::childElementForCode(ML3CPP::Element *this, uint64_t a2, unsigned int a3)
{
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type size;
  void *exception;
  std::string v26;
  std::string v27;
  std::string v28;

  result = std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(a2 + 96, a3);
  if ((unint64_t)result >= 2)
  {
    v18 = (unint64_t)result;
    std::to_string(&v27, a3);
    v19 = std::string::insert(&v27, 0, "There is more than one child for this code, please use childElementsForCode. ElementCode=");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    std::to_string(&v26, v18);
    v21 = std::string::insert(&v26, 0, "numberOfChildren=");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v27;
    else
      v23 = (std::string *)v27.__r_.__value_.__r.__words[0];
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    else
      size = v27.__r_.__value_.__l.__size_;
    std::string::append(&v28, (const std::string::value_type *)v23, size);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1AF43C4F8](exception, &v28);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (result == (uint64_t *)1)
  {
    v9 = *(_QWORD *)(a2 + 104);
    v8 = a2 + 104;
    v7 = v9;
    if (!v9)
      goto LABEL_14;
    v10 = v8;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 >= a3;
      if (v11 >= a3)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 == v8 || *(_DWORD *)(v10 + 32) > a3)
LABEL_14:
      v10 = v8;
    v15 = *(_QWORD *)(v10 + 40);
    v14 = *(_QWORD *)(v10 + 48);
    *(_QWORD *)this = v15;
    *((_QWORD *)this + 1) = v14;
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  return result;
}

void sub_1AC2EDC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(uint64_t a1, unsigned int a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v3;
  while (1)
  {
    v5 = *((_DWORD *)v3 + 8);
    if (v5 <= a2)
      break;
    v2 = v3;
LABEL_6:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return v3;
  }
  if (v5 < a2)
  {
    ++v3;
    goto LABEL_6;
  }
  v6 = *v3;
  v7 = v3;
  if (*v3)
  {
    v7 = v3;
    do
    {
      v8 = *(_DWORD *)(v6 + 32);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (uint64_t *)v6;
      else
        v10 = (uint64_t *)(v6 + 8);
      if (v9)
        v7 = (_QWORD *)v6;
      v6 = *v10;
    }
    while (*v10);
  }
  v11 = v3[1];
  if (v11)
  {
    do
    {
      v12 = *(_DWORD *)(v11 + 32);
      v13 = v12 > a2;
      if (v12 <= a2)
        v14 = (uint64_t *)(v11 + 8);
      else
        v14 = (uint64_t *)v11;
      if (v13)
        v2 = (_QWORD *)v11;
      v11 = *v14;
    }
    while (*v14);
  }
  if (v7 == v2)
    return 0;
  v3 = 0;
  do
  {
    v15 = (_QWORD *)v7[1];
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (_QWORD *)v7[2];
        v17 = *v16 == (_QWORD)v7;
        v7 = v16;
      }
      while (!v17);
    }
    v3 = (uint64_t *)((char *)v3 + 1);
    v7 = v16;
  }
  while (v16 != v2);
  return v3;
}

void ML3BookletDatabaseImportDataSource::~ML3BookletDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3BookletDatabaseImportDataSource::getImportPropertyGroupKey(ML3BookletDatabaseImportDataSource *this)
{
  return 24;
}

uint64_t ML3BookletDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3BookletDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

const __CFString *ML3BookletDatabaseImportDataSource::identityPropertyForSource(ML3BookletDatabaseImportDataSource *this)
{
  __CFString *v1;

  v1 = CFSTR("store_item_id");
  return CFSTR("store_item_id");
}

id ML3BookletDatabaseImportDataSource::generateVTableInsertionFromClause(ML3BookletDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ LEFT OUTER JOIN booklet ON %@.ROWID = booklet.booklet_pid"), a3, a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

void ML3ShowDuplicateVideoAlert(void *a1)
{
  ML3ShowFileRadarAlert(CFSTR("Duplicate Video Detected"), CFSTR("The media library service has detected that a duplicate video has been imported."), a1);
}

void ML3ShowFileRadarAlert(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (ML3IsProcessRunning(CFSTR("com.apple.SpringBoard"))
    && !ML3IsProcessRunning(CFSTR("com.apple.datamigrator"))
    && (MSVDeviceOSIsInternalInstall() & 1) != 0)
  {
    v8 = v5;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@\n\nPlease file a radar now using the button below.\n\n[This dialog is shown for internal users only.]"), v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_alloc_init(MEMORY[0x1E0D4D100]);
    objc_msgSend(v10, "setAlertHeader:", v8);
    objc_msgSend(v10, "setAlertMessage:", v9);
    objc_msgSend(v10, "setDefaultButtonTitle:", CFSTR("File Radar"));
    objc_msgSend(v10, "setAlternateButtonTitle:", CFSTR("Ignore"));
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4D0F8]), "initWithOptions:", v10);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __ML3ShowFileRadarAlert_block_invoke;
    v13[3] = &unk_1E5B63568;
    v14 = v8;
    v15 = v7;
    v12 = v8;
    objc_msgSend(v11, "presentWithCompletion:", v13);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D4D030], "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", *MEMORY[0x1E0D4CE40], CFSTR("Bug"), v5, v6, 0, 0, 0);
  }

}

void sub_1AC2EE360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getLSApplicationWorkspaceClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!CoreServicesLibraryCore_frameworkLibrary)
    CoreServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!CoreServicesLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreServicesLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3DiagnosticUtilities.m"), 17, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("LSApplicationWorkspace");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getLSApplicationWorkspaceClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("ML3DiagnosticUtilities.m"), 18, CFSTR("Unable to find class %s"), "LSApplicationWorkspace");

LABEL_8:
    __break(1u);
  }
  getLSApplicationWorkspaceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1AC2EE6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2EEF84(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a7);

  ML3ImportSession::~ML3ImportSession((ML3ImportSession *)va);
  _Unwind_Resume(a1);
}

void sub_1AC2EF958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1AC2F0358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ML3SetCloudIDContainerImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3SetCloudIDContainerImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_emplace<ML3SetCloudIDContainerImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void _ZNSt3__115allocate_sharedB8ne180100I29ML3SetCloudIDArtistImportItemNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x68uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E5B51618;
  ML3SetCloudIDImportItem::ML3SetCloudIDImportItem((ML3SetCloudIDImportItem *)(v2 + 3), 0);
  v2[3] = &off_1E5B4F750;
  *a1 = v3;
  a1[1] = v2;
}

void std::__shared_ptr_emplace<ML3SetCloudIDAlbumImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B515A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3SetCloudIDAlbumImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B515A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_emplace<ML3SetCloudIDAlbumImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ML3SetCloudIDArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3SetCloudIDArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51618;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_emplace<ML3SetCloudIDArtistImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ML3SetCloudIDTrackImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B515E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3SetCloudIDTrackImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B515E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_emplace<ML3SetCloudIDTrackImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1AC2F0710(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ML3MigrationCreateNewAlbumForMisgroupedTracks(void *a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  id v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  char v27;
  os_log_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  uint64_t v43;
  void *v44;
  id v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  _BYTE v59[128];
  _QWORD v60[3];
  _QWORD v61[3];
  uint8_t buf[4];
  id v63;
  _QWORD v64[4];

  v64[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  if (!objc_msgSend(v8, "count"))
  {
    v39 = 1;
    goto LABEL_33;
  }
  v49 = v8;
  objc_msgSend(&unk_1E5BAA950, "componentsJoinedByString:", CFSTR(", "));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("INSERT OR REPLACE INTO album (%@) SELECT %@ FROM album WHERE album_pid=?"), v9, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v64[0] = v11;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v64, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = 0;
  v13 = objc_msgSend(v7, "executeUpdate:withParameters:error:", v10, v12, &v57);
  v14 = v57;

  if ((v13 & 1) != 0)
  {
    v47 = v10;
    v48 = v9;
    v15 = v7;
    v16 = objc_msgSend(v7, "lastInsertionRowID");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v61[0] = v17;
    v61[1] = &unk_1E5BAB5C8;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", +[ML3Album revisionTrackingCode](ML3Album, "revisionTrackingCode"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v61[2] = v18;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v61, 3);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = v14;
    v20 = objc_msgSend(v15, "executeUpdate:withParameters:error:", CFSTR("REPLACE INTO entity_revision (entity_pid, deleted, class) VALUES (?, ?, ?)"), v19, &v56);
    v21 = v56;

    if ((v20 & 1) != 0)
    {
      v46 = a4;
      objc_msgSend(v49, "firstObject");
      v22 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", -[NSObject albumArtistPID](v22, "albumArtistPID"));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v60[0] = v23;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", -[NSObject persistentID](v22, "persistentID"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v60[1] = v24;
      v43 = v16;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v16);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v60[2] = v25;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v60, 3);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = v21;
      v27 = objc_msgSend(v15, "executeUpdate:withParameters:error:", CFSTR("UPDATE album SET album_artist_pid=?, representative_item_pid=? WHERE album_pid=?"), v26, &v55);
      v45 = v55;

      v7 = v15;
      if ((v27 & 1) != 0)
      {
        v8 = v49;
        v28 = (os_log_t)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v49, "count"));
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v54 = 0u;
        v29 = v49;
        v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
        if (v30)
        {
          v31 = v30;
          v32 = *(_QWORD *)v52;
          do
          {
            v33 = 0;
            do
            {
              if (*(_QWORD *)v52 != v32)
                objc_enumerationMutation(v29);
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * v33), "persistentID"));
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              -[NSObject addObject:](v28, "addObject:", v34);

              ++v33;
            }
            while (v31 != v33);
            v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v51, v59, 16);
          }
          while (v31);
        }

        -[NSObject componentsJoinedByString:](v28, "componentsJoinedByString:", CFSTR(", "));
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE item SET album_pid=? WHERE item_pid IN (%@)"), v35);
        v36 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v43);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v58 = v37;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v58, 1);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v50 = v45;
        v44 = (void *)v36;
        v39 = objc_msgSend(v7, "executeUpdate:withParameters:error:", v36, v38, &v50);
        v14 = v50;

        a4 = v46;
        v9 = v48;
        if ((v39 & 1) == 0)
        {
          v40 = v35;
          v41 = os_log_create("com.apple.amp.medialibrary", "Default");
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v63 = v14;
            _os_log_impl(&dword_1AC149000, v41, OS_LOG_TYPE_ERROR, "Failed to update item's album column with newly created album. %{public}@", buf, 0xCu);
          }

          v35 = v40;
        }

        v10 = v47;
      }
      else
      {
        v28 = os_log_create("com.apple.amp.medialibrary", "Default");
        a4 = v46;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v14 = v45;
          v63 = v45;
          _os_log_impl(&dword_1AC149000, v28, OS_LOG_TYPE_ERROR, "Failed to update representative item for newly created album. %{public}@", buf, 0xCu);
          v39 = 0;
        }
        else
        {
          v39 = 0;
          v14 = v45;
        }
        v10 = v47;
        v9 = v48;
        v8 = v49;
      }

      goto LABEL_30;
    }
    v7 = v15;
    v22 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v63 = v21;
      _os_log_impl(&dword_1AC149000, v22, OS_LOG_TYPE_ERROR, "Failed to update entity revision with newly created album. %{public}@", buf, 0xCu);
    }
    v39 = 0;
    v14 = v21;
    v10 = v47;
    v9 = v48;
  }
  else
  {
    v22 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v63 = v14;
      _os_log_impl(&dword_1AC149000, v22, OS_LOG_TYPE_ERROR, "Failed to create new album for misgrouped track. %{public}@", buf, 0xCu);
    }
    v39 = 0;
  }
  v8 = v49;
LABEL_30:

  if (a4)
    *a4 = objc_retainAutorelease(v14);

LABEL_33:
  return v39;
}

BOOL MSPMediaSyncHeaderReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___MSPMediaSyncHeader__totalPackages;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR___MSPMediaSyncHeader__totalPackages;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___MSPMediaSyncHeader__totalPackages;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 16) |= 1u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___MSPMediaSyncHeader__syncType;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR___MSPMediaSyncHeader__syncType;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___MSPMediaSyncHeader__syncType;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void ML3AlbumImportItem::~ML3AlbumImportItem(id *this)
{
  ML3AlbumImportItem::~ML3AlbumImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{
  *this = &off_1E5B4D1A8;

  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3AlbumImportItem::isValid(ML3AlbumImportItem *this)
{
  return 1;
}

void ML3AlbumImportItem::getStringValue(ML3AlbumImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  _BYTE *v5;
  std::string *v6;
  char *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const std::string::value_type *v13;
  std::string::size_type v14;

  if (a2 > 285212681)
  {
    if (a2 == 285212682)
    {
      *(_QWORD *)a3 = off_1E5B4D010;
      *(_BYTE *)(a3 + 8) = 1;
      v6 = (std::string *)(a3 + 16);
      if ((*((char *)this + 103) & 0x80000000) == 0)
      {
        v7 = (char *)this + 80;
        goto LABEL_16;
      }
      v13 = (const std::string::value_type *)*((_QWORD *)this + 10);
      v14 = *((_QWORD *)this + 11);
      goto LABEL_24;
    }
    if (a2 != 285212697)
    {
LABEL_17:
      *(_QWORD *)a3 = off_1E5B4D010;
      *(_BYTE *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      return;
    }
    v8 = *((_QWORD *)this + 8);
    *(_QWORD *)a3 = off_1E5B4D010;
    *(_BYTE *)(a3 + 8) = 1;
    v9 = (std::string *)(a3 + 16);
    if ((*(char *)(v8 + 135) & 0x80000000) == 0)
    {
      v10 = v8 + 112;
LABEL_13:
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)v10;
      v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
      return;
    }
    v13 = *(const std::string::value_type **)(v8 + 112);
    v14 = *(_QWORD *)(v8 + 120);
LABEL_21:
    std::string::__init_copy_ctor_external(v9, v13, v14);
    return;
  }
  if (a2 == 285212673)
  {
    v11 = *((_QWORD *)this + 8);
    *(_QWORD *)a3 = off_1E5B4D010;
    *(_BYTE *)(a3 + 8) = 1;
    v9 = (std::string *)(a3 + 16);
    if ((*(char *)(v11 + 31) & 0x80000000) == 0)
    {
      v10 = v11 + 8;
      goto LABEL_13;
    }
    v13 = *(const std::string::value_type **)(v11 + 8);
    v14 = *(_QWORD *)(v11 + 16);
    goto LABEL_21;
  }
  if (a2 != 285212674)
    goto LABEL_17;
  v3 = *((_QWORD *)this + 8);
  v4 = *(char *)(v3 + 55);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (_BYTE *)(a3 + 8);
    *(_QWORD *)a3 = off_1E5B4D010;
    v6 = (std::string *)(a3 + 16);
    if ((_BYTE)v4)
    {
      v7 = (char *)(v3 + 32);
      *v5 = 1;
LABEL_16:
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      return;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(v3 + 40);
  v5 = (_BYTE *)(a3 + 8);
  *(_QWORD *)a3 = off_1E5B4D010;
  v6 = (std::string *)(a3 + 16);
  if (v12)
  {
    *v5 = 1;
    v13 = *(const std::string::value_type **)(v3 + 32);
    v14 = *(_QWORD *)(v3 + 40);
LABEL_24:
    v9 = v6;
    goto LABEL_21;
  }
LABEL_25:
  *v5 = 0;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
}

uint64_t ML3AlbumImportItem::getIntegerValue(ML3AlbumImportItem *this, int a2)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 285212675:
      result = *((_QWORD *)this + 16);
      break;
    case 285212676:
      result = *((_QWORD *)this + 15);
      break;
    case 285212677:
    case 285212678:
    case 285212682:
    case 285212685:
    case 285212686:
    case 285212687:
    case 285212689:
    case 285212690:
    case 285212692:
    case 285212694:
      return result;
    case 285212679:
      result = *(int *)(*((_QWORD *)this + 8) + 56);
      break;
    case 285212680:
      result = *(int *)(*((_QWORD *)this + 8) + 64);
      break;
    case 285212681:
      goto LABEL_15;
    case 285212683:
      result = *((_QWORD *)this + 17);
      break;
    case 285212684:
      result = *(int *)(*((_QWORD *)this + 8) + 68);
      break;
    case 285212688:
      result = *((unsigned __int8 *)this + 144);
      break;
    case 285212691:
      result = *(_QWORD *)(*((_QWORD *)this + 8) + 96);
      break;
    case 285212693:
      result = *(unsigned __int8 *)(*((_QWORD *)this + 8) + 137);
      break;
    case 285212695:
      result = *(_QWORD *)(*((_QWORD *)this + 8) + 144);
      break;
    case 285212696:
      this = (ML3AlbumImportItem *)*((_QWORD *)this + 8);
LABEL_15:
      result = *((_QWORD *)this + 13);
      break;
    default:
      if (a2 == 167772186)
        result = *(unsigned __int8 *)(*((_QWORD *)this + 8) + 60);
      break;
  }
  return result;
}

void ML3AlbumImportItem::getDataValue(void **this@<X0>, int a2@<W1>, NSData *a3@<X8>)
{
  if (a2 == 285212677)
  {
    ML3CPPBridgeNSData(a3, this[14]);
  }
  else
  {
    a3->super.isa = 0;
    a3[1].super.isa = 0;
  }
}

uint64_t ML3AlbumImportItem::hasValue(ML3AlbumImportItem *this)
{
  return 1;
}

void ML3AlbumArtistImportItem::~ML3AlbumArtistImportItem(id *this)
{
  ML3AlbumArtistImportItem::~ML3AlbumArtistImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{
  *this = &off_1E5B4E218;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3AlbumArtistImportItem::isValid(ML3AlbumArtistImportItem *this)
{
  return 1;
}

void ML3AlbumArtistImportItem::getStringValue(ML3AlbumArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  std::string *v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  uint64_t v13;

  if (a2 == 301989899)
  {
    v6 = *((_QWORD *)this + 8);
    *(_QWORD *)a3 = off_1E5B4D010;
    *(_BYTE *)(a3 + 8) = 1;
    v4 = (std::string *)(a3 + 16);
    if ((*(char *)(v6 + 175) & 0x80000000) == 0)
    {
      v5 = v6 + 152;
      goto LABEL_8;
    }
    v11 = *(const std::string::value_type **)(v6 + 152);
    v12 = *(_QWORD *)(v6 + 160);
LABEL_14:
    std::string::__init_copy_ctor_external(v4, v11, v12);
    return;
  }
  if (a2 != 301989890)
  {
    if (a2 != 301989889)
    {
      *(_QWORD *)a3 = off_1E5B4D010;
      *(_BYTE *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      return;
    }
    v3 = *((_QWORD *)this + 8);
    *(_QWORD *)a3 = off_1E5B4D010;
    *(_BYTE *)(a3 + 8) = 1;
    v4 = (std::string *)(a3 + 16);
    if ((*(char *)(v3 + 31) & 0x80000000) == 0)
    {
      v5 = v3 + 8;
LABEL_8:
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      return;
    }
    v11 = *(const std::string::value_type **)(v3 + 8);
    v12 = *(_QWORD *)(v3 + 16);
    goto LABEL_14;
  }
  v7 = *((_QWORD *)this + 8);
  v8 = *(char *)(v7 + 55);
  if (v8 < 0)
  {
    v13 = *(_QWORD *)(v7 + 40);
    v9 = (_BYTE *)(a3 + 8);
    *(_QWORD *)a3 = off_1E5B4D010;
    v10 = (std::string *)(a3 + 16);
    if (v13)
    {
      *v9 = 1;
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(v7 + 32), *(_QWORD *)(v7 + 40));
      return;
    }
  }
  else
  {
    v9 = (_BYTE *)(a3 + 8);
    *(_QWORD *)a3 = off_1E5B4D010;
    v10 = (std::string *)(a3 + 16);
    if ((_BYTE)v8)
    {
      *v9 = 1;
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)(v7 + 32);
      v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 48);
      return;
    }
  }
  *v9 = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
}

uint64_t ML3AlbumArtistImportItem::getIntegerValue(ML3AlbumArtistImportItem *this, int a2)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 301989893:
      result = *(_QWORD *)(*((_QWORD *)this + 8) + 104);
      break;
    case 301989894:
      result = *((_QWORD *)this + 11);
      break;
    case 301989898:
      result = *(_QWORD *)(*((_QWORD *)this + 8) + 144);
      break;
    case 301989901:
      result = *(unsigned __int8 *)(*((_QWORD *)this + 8) + 176);
      break;
    case 301989903:
      result = *(int *)(*((_QWORD *)this + 8) + 180);
      break;
    case 301989904:
      result = *(_QWORD *)(*((_QWORD *)this + 8) + 184);
      break;
    case 301989906:
      result = *(_QWORD *)(*((_QWORD *)this + 8) + 112);
      break;
    case 301989907:
      result = *(_QWORD *)(*((_QWORD *)this + 8) + 120);
      break;
    default:
      return result;
  }
  return result;
}

void ML3AlbumArtistImportItem::getDataValue(void **this@<X0>, int a2@<W1>, NSData *a3@<X8>)
{
  if (a2 == 301989891)
  {
    ML3CPPBridgeNSData(a3, this[10]);
  }
  else
  {
    a3->super.isa = 0;
    a3[1].super.isa = 0;
  }
}

uint64_t ML3AlbumArtistImportItem::hasValue(ML3AlbumArtistImportItem *this)
{
  return 1;
}

void ML3ArtistImportItem::~ML3ArtistImportItem(id *this)
{
  ML3ArtistImportItem::~ML3ArtistImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{
  *this = &off_1E5B4D550;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3ArtistImportItem::isValid(ML3ArtistImportItem *this)
{
  return 1;
}

void ML3ArtistImportItem::getStringValue(ML3ArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE *v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;

  switch(a2)
  {
    case 318767105:
      v3 = *((_QWORD *)this + 8);
      *(_QWORD *)a3 = off_1E5B4D010;
      *(_BYTE *)(a3 + 8) = 1;
      v4 = (std::string *)(a3 + 16);
      if ((*(char *)(v3 + 31) & 0x80000000) == 0)
      {
        v5 = v3 + 8;
        goto LABEL_10;
      }
      v14 = *(const std::string::value_type **)(v3 + 8);
      v15 = *(_QWORD *)(v3 + 16);
      goto LABEL_16;
    case 318767106:
      v6 = *((_QWORD *)this + 8);
      v7 = *(char *)(v6 + 55);
      if ((v7 & 0x80000000) == 0)
      {
        v8 = (_BYTE *)(a3 + 8);
        *(_QWORD *)a3 = off_1E5B4D010;
        v9 = (std::string *)(a3 + 16);
        if (!(_BYTE)v7)
          goto LABEL_23;
        v10 = v6 + 32;
        goto LABEL_14;
      }
      v16 = *(_QWORD *)(v6 + 40);
      v8 = (_BYTE *)(a3 + 8);
      *(_QWORD *)a3 = off_1E5B4D010;
      v9 = (std::string *)(a3 + 16);
      if (!v16)
        goto LABEL_23;
      *v8 = 1;
      v14 = *(const std::string::value_type **)(v6 + 32);
      v15 = *(_QWORD *)(v6 + 40);
      goto LABEL_22;
    case 318767107:
      v11 = *((_QWORD *)this + 8);
      *(_QWORD *)a3 = off_1E5B4D010;
      *(_BYTE *)(a3 + 8) = 1;
      v4 = (std::string *)(a3 + 16);
      if (*(char *)(v11 + 79) < 0)
      {
        v14 = *(const std::string::value_type **)(v11 + 56);
        v15 = *(_QWORD *)(v11 + 64);
        goto LABEL_16;
      }
      v5 = v11 + 56;
LABEL_10:
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      return;
    case 318767108:
      v12 = *((_QWORD *)this + 8);
      v13 = *(char *)(v12 + 103);
      if ((v13 & 0x80000000) == 0)
      {
        v8 = (_BYTE *)(a3 + 8);
        *(_QWORD *)a3 = off_1E5B4D010;
        v9 = (std::string *)(a3 + 16);
        if ((_BYTE)v13)
        {
          v10 = v12 + 80;
LABEL_14:
          *v8 = 1;
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)v10;
          v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
          return;
        }
LABEL_23:
        *v8 = 0;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        return;
      }
      v17 = *(_QWORD *)(v12 + 88);
      v8 = (_BYTE *)(a3 + 8);
      *(_QWORD *)a3 = off_1E5B4D010;
      v9 = (std::string *)(a3 + 16);
      if (!v17)
        goto LABEL_23;
      *v8 = 1;
      v14 = *(const std::string::value_type **)(v12 + 80);
      v15 = *(_QWORD *)(v12 + 88);
LABEL_22:
      v4 = v9;
LABEL_16:
      std::string::__init_copy_ctor_external(v4, v14, v15);
      return;
    default:
      *(_QWORD *)a3 = off_1E5B4D010;
      *(_BYTE *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      return;
  }
}

uint64_t ML3ArtistImportItem::getIntegerValue(ML3ArtistImportItem *this, int a2)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 318767111:
      result = *(_QWORD *)(*((_QWORD *)this + 8) + 104);
      break;
    case 318767112:
      result = *((_QWORD *)this + 11);
      break;
    case 318767116:
      result = *(_QWORD *)(*((_QWORD *)this + 8) + 144);
      break;
    case 318767118:
      result = *(unsigned __int8 *)(*((_QWORD *)this + 8) + 176);
      break;
    default:
      return result;
  }
  return result;
}

void ML3ArtistImportItem::getDataValue(void **this@<X0>, int a2@<W1>, NSData *a3@<X8>)
{
  if (a2 == 318767109)
  {
    ML3CPPBridgeNSData(a3, this[10]);
  }
  else
  {
    a3->super.isa = 0;
    a3[1].super.isa = 0;
  }
}

uint64_t ML3ArtistImportItem::hasValue(ML3ArtistImportItem *this)
{
  return 1;
}

void ML3ComposerImportItem::~ML3ComposerImportItem(id *this)
{
  ML3ComposerImportItem::~ML3ComposerImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{
  *this = &off_1E5B4D6A0;

  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3ComposerImportItem::isValid(ML3ComposerImportItem *this)
{
  return 1;
}

void ML3ComposerImportItem::getStringValue(ML3ComposerImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::string *v3;
  char *v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  uint64_t v10;

  if (a2 != 335544322)
  {
    if (a2 != 335544321)
    {
      *(_QWORD *)a3 = off_1E5B4D010;
      *(_BYTE *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      return;
    }
    *(_QWORD *)a3 = off_1E5B4D010;
    *(_BYTE *)(a3 + 8) = 1;
    v3 = (std::string *)(a3 + 16);
    if ((*((char *)this + 103) & 0x80000000) == 0)
    {
      v4 = (char *)this + 80;
LABEL_8:
      *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
      v3->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
      return;
    }
    v8 = (const std::string::value_type *)*((_QWORD *)this + 10);
    v9 = *((_QWORD *)this + 11);
    goto LABEL_13;
  }
  v5 = *((_QWORD *)this + 8);
  v6 = *(char *)(v5 + 55);
  if (v6 < 0)
  {
    v10 = *(_QWORD *)(v5 + 40);
    v7 = (_BYTE *)(a3 + 8);
    *(_QWORD *)a3 = off_1E5B4D010;
    v3 = (std::string *)(a3 + 16);
    if (v10)
    {
      *v7 = 1;
      v8 = *(const std::string::value_type **)(v5 + 32);
      v9 = *(_QWORD *)(v5 + 40);
LABEL_13:
      std::string::__init_copy_ctor_external(v3, v8, v9);
      return;
    }
  }
  else
  {
    v7 = (_BYTE *)(a3 + 8);
    *(_QWORD *)a3 = off_1E5B4D010;
    v3 = (std::string *)(a3 + 16);
    if ((_BYTE)v6)
    {
      v4 = (char *)(v5 + 32);
      *v7 = 1;
      goto LABEL_8;
    }
  }
  *v7 = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
}

uint64_t ML3ComposerImportItem::getIntegerValue(ML3ComposerImportItem *this, int a2)
{
  char *v2;

  if (a2 == 335544328)
  {
    v2 = (char *)(*((_QWORD *)this + 8) + 72);
    return *(_QWORD *)v2;
  }
  if (a2 == 335544325)
  {
    v2 = (char *)this + 112;
    return *(_QWORD *)v2;
  }
  return 0;
}

void ML3ComposerImportItem::getDataValue(void **this@<X0>, int a2@<W1>, NSData *a3@<X8>)
{
  if (a2 == 335544323)
  {
    ML3CPPBridgeNSData(a3, this[13]);
  }
  else
  {
    a3->super.isa = 0;
    a3[1].super.isa = 0;
  }
}

uint64_t ML3ComposerImportItem::hasValue(ML3ComposerImportItem *this)
{
  return 1;
}

void ML3GenreImportItem::~ML3GenreImportItem(id *this)
{
  ML3GenreImportItem::~ML3GenreImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{
  *this = &off_1E5B4D290;

  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3GenreImportItem::isValid(ML3GenreImportItem *this)
{
  return 1;
}

void ML3GenreImportItem::getStringValue(ML3GenreImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::string *v3;

  if (a2 == 352321537)
  {
    *(_QWORD *)a3 = off_1E5B4D010;
    *(_BYTE *)(a3 + 8) = 1;
    v3 = (std::string *)(a3 + 16);
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    }
    else
    {
      *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *((_OWORD *)this + 5);
      v3->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
    }
  }
  else
  {
    *(_QWORD *)a3 = off_1E5B4D010;
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

uint64_t ML3GenreImportItem::getIntegerValue(ML3GenreImportItem *this, int a2)
{
  char *v2;

  if (a2 == 352321543)
  {
    v2 = (char *)(*((_QWORD *)this + 8) + 48);
    return *(_QWORD *)v2;
  }
  if (a2 == 352321540)
  {
    v2 = (char *)this + 112;
    return *(_QWORD *)v2;
  }
  return 0;
}

void ML3GenreImportItem::getDataValue(void **this@<X0>, int a2@<W1>, NSData *a3@<X8>)
{
  if (a2 == 352321538)
  {
    ML3CPPBridgeNSData(a3, this[13]);
  }
  else
  {
    a3->super.isa = 0;
    a3[1].super.isa = 0;
  }
}

uint64_t ML3GenreImportItem::hasValue(ML3GenreImportItem *this)
{
  return 1;
}

uint64_t ML3AlbumImportItem::ML3AlbumImportItem(uint64_t a1, _QWORD *a2, __int128 *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  id v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  __int128 v21;
  id v22;

  v16 = a5;
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)a1 = &off_1E5B4D1A8;
  *(_QWORD *)(a1 + 8) = 0;
  v17 = a2[1];
  *(_QWORD *)(a1 + 64) = *a2;
  *(_QWORD *)(a1 + 72) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (std::string *)(a1 + 80);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v21 = *a3;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  *(_QWORD *)(a1 + 104) = a4;
  v22 = v16;
  *(_QWORD *)(a1 + 112) = v22;
  *(_QWORD *)(a1 + 120) = a6;
  *(_QWORD *)(a1 + 128) = a7;
  *(_QWORD *)(a1 + 136) = a8;
  *(_BYTE *)(a1 + 144) = a9;
  *(_WORD *)(a1 + 16) = 256;
  *(_QWORD *)(a1 + 8) = **(_QWORD **)(a1 + 64);

  return a1;
}

void sub_1AC2F4CA4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v4);
  *v1 = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v3);

  _Unwind_Resume(a1);
}

uint64_t ML3AlbumArtistImportItem::ML3AlbumArtistImportItem(uint64_t a1, _QWORD *a2, void *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  id v11;

  v7 = a3;
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)a1 = &off_1E5B4E218;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = a2[1];
  *(_QWORD *)(a1 + 64) = *a2;
  *(_QWORD *)(a1 + 72) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = v7;
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = a4;
  *(_WORD *)(a1 + 16) = 256;
  *(_QWORD *)(a1 + 8) = **(_QWORD **)(a1 + 64);

  return a1;
}

void sub_1AC2F55F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2F5848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2F5B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *iTunesCloudLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!iTunesCloudLibraryCore_frameworkLibrary)
    iTunesCloudLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)iTunesCloudLibraryCore_frameworkLibrary;
  if (!iTunesCloudLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *iTunesCloudLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("ML3StoreItemPlaylistData.m"), 19, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void sub_1AC2F64CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC2F6550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1AC2F683C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1AC2F6AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

ML3DatabaseColumn *ML3DefineCol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return +[ML3DatabaseColumn columnWithName:datatype:constraints:defaultValue:](ML3DatabaseColumn, "columnWithName:datatype:constraints:defaultValue:", a1, a2, a3, a4);
}

uint64_t MSPMediaSyncOperationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  MIPMultiverseIdentifier *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 72) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_52;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_54;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_52:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_54:
        *(_DWORD *)(a1 + 48) = v19;
        goto LABEL_49;
      case 2u:
        v23 = objc_alloc_init(MIPMultiverseIdentifier);
        objc_storeStrong((id *)(a1 + 40), v23);
        if (!PBReaderPlaceMark() || (MIPMultiverseIdentifierReadFrom(v23, a2) & 1) == 0)
          goto LABEL_56;
        goto LABEL_48;
      case 0xAu:
        v23 = objc_alloc_init(MIPArtist);
        objc_storeStrong((id *)(a1 + 16), v23);
        if (!PBReaderPlaceMark() || (MIPArtistReadFrom(v23, a2) & 1) == 0)
          goto LABEL_56;
        goto LABEL_48;
      case 0xBu:
        v23 = objc_alloc_init(MIPAlbum);
        objc_storeStrong((id *)(a1 + 8), v23);
        if (!PBReaderPlaceMark() || (MIPAlbumReadFrom((uint64_t)v23, a2) & 1) == 0)
          goto LABEL_56;
        goto LABEL_48;
      case 0xCu:
        v23 = objc_alloc_init(MIPGenre);
        objc_storeStrong((id *)(a1 + 24), v23);
        if (!PBReaderPlaceMark() || (MIPGenreReadFrom((uint64_t)v23, a2) & 1) == 0)
          goto LABEL_56;
        goto LABEL_48;
      case 0xDu:
        v23 = objc_alloc_init(MIPSeries);
        objc_storeStrong((id *)(a1 + 64), v23);
        if (!PBReaderPlaceMark() || (MIPSeriesReadFrom((uint64_t)v23, a2) & 1) == 0)
          goto LABEL_56;
        goto LABEL_48;
      case 0xEu:
        v23 = objc_alloc_init(MIPMediaItem);
        objc_storeStrong((id *)(a1 + 32), v23);
        if (!PBReaderPlaceMark() || (MIPMediaItemReadFrom((uint64_t)v23, a2) & 1) == 0)
          goto LABEL_56;
        goto LABEL_48;
      case 0x14u:
        v23 = objc_alloc_init(MIPPlaylist);
        objc_storeStrong((id *)(a1 + 56), v23);
        if (PBReaderPlaceMark() && (MIPPlaylistReadFrom((uint64_t)v23, a2) & 1) != 0)
        {
LABEL_48:
          PBReaderRecallMark();

LABEL_49:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_56:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_49;
    }
  }
}

void ML3PersonDatabaseImportDataSource::~ML3PersonDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3PersonDatabaseImportDataSource::getImportPropertyGroupKey(ML3PersonDatabaseImportDataSource *this)
{
  return 22;
}

uint64_t ML3PersonDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3PersonDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

const __CFString *ML3PersonDatabaseImportDataSource::identityPropertyForSource(ML3PersonDatabaseImportDataSource *this)
{
  __CFString *v1;

  v1 = CFSTR("cloud_id");
  return CFSTR("cloud_id");
}

id ML3PersonDatabaseImportDataSource::generateVTableInsertionFromClause(ML3PersonDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ LEFT OUTER JOIN person ON %@.ROWID = person.person_pid"), a3, a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1AC2F9680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC2F9724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC2F9888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC2F99C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AC2F9B4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1AC2F9C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AC2F9E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t MIPMultiverseIdentifierReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  unint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  MIPLibraryIdentifier *v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  void *v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = 0x1EEC79000uLL;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  v9 = 0x1EEC79000uLL;
  v10 = 0x1EEC79000uLL;
  while (1)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      if (v15 == -1 || v15 >= *(_QWORD *)(a2 + *v4))
        break;
      v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v15);
      *(_QWORD *)(a2 + v14) = v15 + 1;
      v13 |= (unint64_t)(v16 & 0x7F) << v11;
      if ((v16 & 0x80) == 0)
        goto LABEL_12;
      v11 += 7;
      v17 = v12++ >= 9;
      if (v17)
      {
        v13 = 0;
        v18 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v18 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v13 = 0;
LABEL_14:
    if (v18 || (v13 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    v20 = v13 >> 3;
    if ((int)(v13 >> 3) > 29)
      break;
    if ((_DWORD)v20 == 1)
    {
      v49 = 0;
      v50 = 0;
      v51 = 0;
      a1[*(int *)(v7 + 3728)] |= 0x10u;
      while (1)
      {
        v52 = *v3;
        v53 = *(_QWORD *)(a2 + v52);
        if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          break;
        v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v53);
        *(_QWORD *)(a2 + v52) = v53 + 1;
        v51 |= (unint64_t)(v54 & 0x7F) << v49;
        if ((v54 & 0x80) == 0)
          goto LABEL_93;
        v49 += 7;
        v17 = v50++ >= 9;
        if (v17)
        {
          LODWORD(v51) = 0;
          goto LABEL_95;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_93:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v51) = 0;
LABEL_95:
      v62 = *(int *)(v9 + 3732);
    }
    else
    {
      if ((_DWORD)v20 != 2)
      {
        if ((_DWORD)v20 == 3)
        {
          PBReaderReadString();
          v27 = objc_claimAutoreleasedReturnValue();
          v28 = 72;
LABEL_58:
          v48 = *(void **)&a1[v28];
          *(_QWORD *)&a1[v28] = v27;

        }
        else
        {
LABEL_73:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_101;
      }
      v55 = 0;
      v56 = 0;
      v51 = 0;
      a1[*(int *)(v7 + 3728)] |= 0x20u;
      while (1)
      {
        v57 = *v3;
        v58 = *(_QWORD *)(a2 + v57);
        if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
          break;
        v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v58);
        *(_QWORD *)(a2 + v57) = v58 + 1;
        v51 |= (unint64_t)(v59 & 0x7F) << v55;
        if ((v59 & 0x80) == 0)
          goto LABEL_97;
        v55 += 7;
        v17 = v56++ >= 9;
        if (v17)
        {
          LODWORD(v51) = 0;
          goto LABEL_99;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_97:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v51) = 0;
LABEL_99:
      v62 = *(int *)(v10 + 3736);
    }
    *(_DWORD *)&a1[v62] = v51;
LABEL_101:
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return *(_BYTE *)(a2 + *v5) == 0;
  }
  switch((int)v20)
  {
    case 30:
      v21 = 0;
      v22 = 0;
      v23 = 0;
      a1[*(int *)(v7 + 3728)] |= 1u;
      while (2)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
        {
          *(_BYTE *)(a2 + *v5) = 1;
        }
        else
        {
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v25);
          *(_QWORD *)(a2 + v24) = v25 + 1;
          v23 |= (unint64_t)(v26 & 0x7F) << v21;
          if (v26 < 0)
          {
            v21 += 7;
            v17 = v22++ >= 9;
            if (v17)
            {
              v23 = 0;
              goto LABEL_78;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_78:
      v61 = 8;
      goto LABEL_91;
    case 31:
      v33 = 0;
      v34 = 0;
      v23 = 0;
      a1[*(int *)(v7 + 3728)] |= 8u;
      while (2)
      {
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
        {
          *(_BYTE *)(a2 + *v5) = 1;
        }
        else
        {
          v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 1;
          v23 |= (unint64_t)(v37 & 0x7F) << v33;
          if (v37 < 0)
          {
            v33 += 7;
            v17 = v34++ >= 9;
            if (v17)
            {
              v23 = 0;
              goto LABEL_82;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_82:
      v61 = 32;
      goto LABEL_91;
    case 32:
      v38 = 0;
      v39 = 0;
      v23 = 0;
      a1[*(int *)(v7 + 3728)] |= 4u;
      while (2)
      {
        v40 = *v3;
        v41 = *(_QWORD *)(a2 + v40);
        if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
        {
          *(_BYTE *)(a2 + *v5) = 1;
        }
        else
        {
          v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v41);
          *(_QWORD *)(a2 + v40) = v41 + 1;
          v23 |= (unint64_t)(v42 & 0x7F) << v38;
          if (v42 < 0)
          {
            v38 += 7;
            v17 = v39++ >= 9;
            if (v17)
            {
              v23 = 0;
              goto LABEL_86;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_86:
      v61 = 24;
      goto LABEL_91;
    case 33:
      v43 = 0;
      v44 = 0;
      v23 = 0;
      a1[*(int *)(v7 + 3728)] |= 2u;
      while (2)
      {
        v45 = *v3;
        v46 = *(_QWORD *)(a2 + v45);
        if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
        {
          *(_BYTE *)(a2 + *v5) = 1;
        }
        else
        {
          v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v46);
          *(_QWORD *)(a2 + v45) = v46 + 1;
          v23 |= (unint64_t)(v47 & 0x7F) << v43;
          if (v47 < 0)
          {
            v43 += 7;
            v17 = v44++ >= 9;
            if (v17)
            {
              v23 = 0;
              goto LABEL_90;
            }
            continue;
          }
        }
        break;
      }
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_90:
      v61 = 16;
LABEL_91:
      *(_QWORD *)&a1[v61] = v23;
      goto LABEL_101;
    case 34:
      PBReaderReadString();
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = 48;
      goto LABEL_58;
    case 35:
      PBReaderReadString();
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = 40;
      goto LABEL_58;
    default:
      if ((_DWORD)v20 != 50)
        goto LABEL_73;
      v29 = v10;
      v30 = v7;
      v31 = v9;
      v32 = objc_alloc_init(MIPLibraryIdentifier);
      objc_msgSend(a1, "addLibraryIdentifiers:", v32);
      if (PBReaderPlaceMark() && (MIPLibraryIdentifierReadFrom((uint64_t)v32, a2) & 1) != 0)
      {
        PBReaderRecallMark();

        v9 = v31;
        v7 = v30;
        v10 = v29;
        goto LABEL_101;
      }

      return 0;
  }
}

void sub_1AC2FCA54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC2FCAD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC2FCC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1AC2FCED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2)
            v7 %= a2;
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

__n128 __Block_byref_object_copy__14080(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1AC2FD724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1AC2FDB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  uint64_t v15;
  void *v17;
  va_list va;

  va_start(va, a13);

  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)va);
  v17 = *(void **)(v15 - 104);
  if (v17)
  {
    *(_QWORD *)(v15 - 96) = v17;
    operator delete(v17);
  }

  _Unwind_Resume(a1);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1AC2FDF38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1AC2FE024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1AC2FE178(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1AC2FE2F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC2FE714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;

  _Unwind_Resume(a1);
}

void sub_1AC2FEA84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC2FEBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1AC2FED20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1AC2FEE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AC2FEE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AC2FEEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AC2FEF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ML3ItemPlaybackDatabaseImportDataSource::~ML3ItemPlaybackDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ItemPlaybackDatabaseImportDataSource::getImportPropertyGroupKey(ML3ItemPlaybackDatabaseImportDataSource *this)
{
  return 3;
}

uint64_t ML3ItemPlaybackDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ItemPlaybackDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

void sub_1AC30032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14336(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14337(uint64_t a1)
{

}

void sub_1AC300554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC301848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose((const void *)(v8 - 128), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC30320C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1AC303638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC304164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1AC304388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC3044AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC304624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC304748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC3048C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC3049E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC304B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC304C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC304F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *iTunesCloudLibrary_14584()
{
  void *v0;
  void *v2;
  void *v3;

  if (!iTunesCloudLibraryCore_frameworkLibrary_14592)
    iTunesCloudLibraryCore_frameworkLibrary_14592 = _sl_dlopen();
  v0 = (void *)iTunesCloudLibraryCore_frameworkLibrary_14592;
  if (!iTunesCloudLibraryCore_frameworkLibrary_14592)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *iTunesCloudLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("ML3StoreItemTrackData.m"), 23, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void getICStorePlatformMetadataKindArtist()
{
  id *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v0 = (id *)getICStorePlatformMetadataKindArtistSymbolLoc_ptr;
  v8 = getICStorePlatformMetadataKindArtistSymbolLoc_ptr;
  if (!getICStorePlatformMetadataKindArtistSymbolLoc_ptr)
  {
    v1 = iTunesCloudLibrary_14584();
    v0 = (id *)dlsym(v1, "ICStorePlatformMetadataKindArtist");
    v6[3] = (uint64_t)v0;
    getICStorePlatformMetadataKindArtistSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    v2 = *v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getICStorePlatformMetadataKindArtist(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3StoreItemTrackData.m"), 40, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1AC30517C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getICStorePlatformMetadataClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  iTunesCloudLibrary_14584();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("ICStorePlatformMetadata");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getICStorePlatformMetadataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getICStorePlatformMetadataClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ML3StoreItemTrackData.m"), 24, CFSTR("Unable to find class %s"), "ICStorePlatformMetadata");

    __break(1u);
  }
}

void __getICStoreArtworkInfoClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  iTunesCloudLibrary_14584();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("ICStoreArtworkInfo");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getICStoreArtworkInfoClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getICStoreArtworkInfoClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ML3StoreItemTrackData.m"), 28, CFSTR("Unable to find class %s"), "ICStoreArtworkInfo");

    __break(1u);
  }
}

uint64_t __Block_byref_object_copy__14753(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14754(uint64_t a1)
{

}

void __getICStorePlatformRequestClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  iTunesCloudLibrary_14584();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("ICStorePlatformRequest");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getICStorePlatformRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getICStorePlatformRequestClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ML3StoreItemTrackData.m"), 25, CFSTR("Unable to find class %s"), "ICStorePlatformRequest");

    __break(1u);
  }
}

void __getICStoreRequestContextClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  iTunesCloudLibrary_14584();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("ICStoreRequestContext");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getICStoreRequestContextClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getICStoreRequestContextClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ML3StoreItemTrackData.m"), 26, CFSTR("Unable to find class %s"), "ICStoreRequestContext");

    __break(1u);
  }
}

void __getICUserIdentityClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  iTunesCloudLibrary_14584();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("ICUserIdentity");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getICUserIdentityClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getICUserIdentityClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ML3StoreItemTrackData.m"), 27, CFSTR("Unable to find class %s"), "ICUserIdentity");

    __break(1u);
  }
}

void sub_1AC3058F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC305F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a5);

  ML3ImportSession::~ML3ImportSession((ML3ImportSession *)va);
  _Unwind_Resume(a1);
}

void sub_1AC306CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  void *v49;
  uint64_t v50;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v50 - 256);

  _Unwind_Resume(a1);
}

void sub_1AC307368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1AC307844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ML3StoreArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3StoreArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51538;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_emplace<ML3StoreArtistImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ML3StoreContainerImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3StoreContainerImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51570;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_emplace<ML3StoreContainerImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ML3StoreAlbumImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B514C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3StoreAlbumImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B514C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_emplace<ML3StoreAlbumImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<ML3StoreImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51420;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3StoreImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51420;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_emplace<ML3StoreImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1AC307BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC309220(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1AC30A000(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

id ML3GetStringForKind(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (_ML3InitializeKinds_onceToken != -1)
    dispatch_once(&_ML3InitializeKinds_onceToken, &__block_literal_global_14999);
  v2 = (void *)__kindsForStrings;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "allKeysForObject:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id ML3GetOldStringForKind(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (_ML3InitializeKinds_onceToken != -1)
    dispatch_once(&_ML3InitializeKinds_onceToken, &__block_literal_global_14999);
  v2 = (void *)__kindsForOldStrings;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "allKeysForObject:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

uint64_t ML3KindForString(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void *v4;

  v1 = a1;
  if (_ML3InitializeKinds_onceToken != -1)
    dispatch_once(&_ML3InitializeKinds_onceToken, &__block_literal_global_14999);
  objc_msgSend((id)__kindsForStrings, "objectForKey:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "intValue");
  if (!v3)
  {
    objc_msgSend((id)__kindsForOldStrings, "objectForKey:", v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v4, "intValue");

  }
  return v3;
}

id ML3KindsPassingTest(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  _QWORD v13[4];
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;

  v1 = a1;
  if (_ML3InitializeKinds_onceToken != -1)
    dispatch_once(&_ML3InitializeKinds_onceToken, &__block_literal_global_14999);
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)__kindsForStrings;
  v4 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __ML3KindsPassingTest_block_invoke;
  v16[3] = &unk_1E5B639E8;
  v5 = v1;
  v18 = v5;
  v6 = v2;
  v17 = v6;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v16);
  v7 = (void *)__kindsForOldStrings;
  v13[0] = v4;
  v13[1] = 3221225472;
  v13[2] = __ML3KindsPassingTest_block_invoke_2;
  v13[3] = &unk_1E5B639E8;
  v15 = v5;
  v8 = v6;
  v14 = v8;
  v9 = v5;
  objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v13);
  v10 = v14;
  v11 = v8;

  return v11;
}

void sub_1AC30DE58()
{
  objc_end_catch();
  JUMPOUT(0x1AC30DE74);
}

void sub_1AC30DE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC30E2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose((const void *)(v17 - 176), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC30E6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_1AC30E88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15430(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15431(uint64_t a1)
{

}

void sub_1AC310968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1AC310B38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void sub_1AC310C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1AC310D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1AC310F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1AC3113A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void **v17;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::string>,void *>>>::operator()[abi:ne180100](1, v17);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::string>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t __Block_byref_object_copy__15756(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15757(uint64_t a1)
{

}

void ML3SpotlightNameCacheTimer(void)
{
  void *v0;
  dispatch_time_t v1;

  v0 = (void *)__nameCache;
  if (__nameCache)
  {
    if (*(_BYTE *)(__nameCache + 48))
    {
      __nameCache = 0;

    }
    else
    {
      *(_BYTE *)(__nameCache + 48) = 1;
      v1 = dispatch_time(0, 20000000000);
      dispatch_after(v1, (dispatch_queue_t)__nameCacheAccessQueue, &__block_literal_global_90_15760);
    }
  }
}

void ___ZL22ML3NameCacheInitializev_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  dispatch_queue_t v2;
  void *v3;

  v0 = dispatch_queue_create("com.apple.ml.SpotlightNameCache", 0);
  v1 = (void *)__nameCacheLoadingQueue;
  __nameCacheLoadingQueue = (uint64_t)v0;

  v2 = dispatch_queue_create("com.apple.ml.SpotlightNameCacheAccess", 0);
  v3 = (void *)__nameCacheAccessQueue;
  __nameCacheAccessQueue = (uint64_t)v2;

}

void sub_1AC311900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1AC311AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1AC311D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  operator delete(v10);

  _Unwind_Resume(a1);
}

void ML3SpotlightMatchingNameCacheTimer(ML3SpotlightMatchingNameCache *a1)
{
  ML3SpotlightMatchingNameCache *v1;
  NSObject *v2;
  id *v3;
  dispatch_time_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  ML3SpotlightMatchingNameCache *v9;
  _QWORD block[4];
  ML3SpotlightMatchingNameCache *v11;

  v1 = a1;
  if (!v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ML3SpotlightMatchingNameCacheTimer(ML3SpotlightMatchingNameCache *__strong)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("ML3SpotlightQuery.mm"), 259, CFSTR("invalid parameter"));

  }
  if (v1->_idle)
  {
    v2 = __nameCacheAccessQueue;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZL34ML3SpotlightMatchingNameCacheTimerP29ML3SpotlightMatchingNameCache_block_invoke;
    block[3] = &unk_1E5B65D80;
    v3 = (id *)&v11;
    v11 = v1;
    dispatch_async(v2, block);
  }
  else
  {
    if ((ML3SpotlightMatchingNameCache *)__matchingNameCache != v1)
      goto LABEL_7;
    v1->_idle = 1;
    v4 = dispatch_time(0, 20000000000);
    v5 = __nameCacheAccessQueue;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = ___ZL34ML3SpotlightMatchingNameCacheTimerP29ML3SpotlightMatchingNameCache_block_invoke_2;
    v8[3] = &unk_1E5B65D80;
    v3 = (id *)&v9;
    v9 = v1;
    dispatch_after(v4, v5, v8);
  }

LABEL_7:
}

void sub_1AC31211C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL34ML3SpotlightMatchingNameCacheTimerP29ML3SpotlightMatchingNameCache_block_invoke(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  if (v1 == (void *)__matchingNameCache)
  {
    __matchingNameCache = 0;

  }
}

uint64_t ___ZL34ML3SpotlightMatchingNameCacheTimerP29ML3SpotlightMatchingNameCache_block_invoke_2(uint64_t a1)
{
  return ML3SpotlightMatchingNameCacheTimer(*(ML3SpotlightMatchingNameCache **)(a1 + 32));
}

void sub_1AC312208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC312428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC312544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC31260C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1AC312740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3SpotlightMatch(sqlite3_context *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  _QWORD v6[6];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  _QWORD block[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (a2 < 1)
  {
    v5 = 0;
  }
  else
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __ML3SpotlightMatch_block_invoke;
    v6[3] = &unk_1E5B63C40;
    v7 = a2;
    v6[4] = &v8;
    v6[5] = a3;
    v13 = 0;
    v14 = &v13;
    v15 = 0x3032000000;
    v16 = __Block_byref_object_copy__15756;
    v17 = __Block_byref_object_dispose__15757;
    v18 = 0;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZL45ML3SpotlightMatchingNamesCacheAccessWithBlockU13block_pointerFvRNSt3__113unordered_setIxNS_4hashIxEENS_8equal_toIxEENS_9allocatorIxEEEEE_block_invoke;
    block[3] = &unk_1E5B64C48;
    block[4] = &v13;
    dispatch_sync((dispatch_queue_t)__nameCacheAccessQueue, block);
    v4 = v14[5];
    if (v4)
      __ML3SpotlightMatch_block_invoke((int *)v6, (_QWORD *)(v4 + 8));
    _Block_object_dispose(&v13, 8);

    v5 = *((_DWORD *)v9 + 6);
  }
  sqlite3_result_int(a1, v5);
  _Block_object_dispose(&v8, 8);
}

void sub_1AC312888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose((const void *)(v8 - 64), 8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL45ML3SpotlightMatchingNamesCacheAccessWithBlockU13block_pointerFvRNSt3__113unordered_setIxNS_4hashIxEENS_8equal_toIxEENS_9allocatorIxEEEEE_block_invoke(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (id)__matchingNameCache);
}

id ML3SpotlightMatchPredicateNameForID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t);
  id v11;
  _QWORD block[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v6 = 0;
  v7 = &v6;
  v8 = 0x3032000000;
  v9 = __Block_byref_object_copy__15756;
  v10 = __Block_byref_object_dispose__15757;
  v11 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __ML3SpotlightMatchPredicateNameForID_block_invoke;
  v5[3] = &unk_1E5B63C68;
  v5[4] = &v6;
  v5[5] = a2;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__15756;
  v17 = __Block_byref_object_dispose__15757;
  v18 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZL35ML3SpotlightNameCacheNamesAccessMapU13block_pointerFvRNSt3__113unordered_mapIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIxEENS_8equal_toIxEENS4_INS_4pairIKxS6_EEEEEEE_block_invoke;
  block[3] = &unk_1E5B64C48;
  block[4] = &v13;
  dispatch_sync((dispatch_queue_t)__nameCacheAccessQueue, block);
  v2 = v14[5];
  if (v2)
    __ML3SpotlightMatchPredicateNameForID_block_invoke((uint64_t)v5, (_QWORD *)(v2 + 8));
  _Block_object_dispose(&v13, 8);

  v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v3;
}

void sub_1AC312A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 64), 8);

  _Block_object_dispose(&a16, 8);
  _Unwind_Resume(a1);
}

void sub_1AC312BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZL35ML3SpotlightNameCacheNamesAccessMapU13block_pointerFvRNSt3__113unordered_mapIxNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIxEENS_8equal_toIxEENS4_INS_4pairIKxS6_EEEEEEE_block_invoke(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (id)__nameCache);
}

void sub_1AC3135C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1AC313F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC3142A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location,id a28)
{
  id *v28;
  id *v29;
  id *v30;
  id *v31;

  objc_destroyWeak(v31);
  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a28);
  _Unwind_Resume(a1);
}

void sub_1AC3145BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15981(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15982(uint64_t a1)
{

}

uint64_t ML3ProtocolMediaTypeForMLMediaType(int a1)
{
  uint64_t v1;
  unsigned int v2;

  if (a1 > 255)
  {
    if (a1 > 2047)
    {
      switch(a1)
      {
        case 0x800:
          return 2;
        case 0x1000:
          return 11;
        case 0x2000:
          return 12;
      }
    }
    else
    {
      switch(a1)
      {
        case 256:
          return 6;
        case 512:
          return 3;
        case 1024:
          return 7;
      }
    }
    goto LABEL_26;
  }
  if (a1 > 15)
  {
    switch(a1)
    {
      case 16:
        return 5;
      case 32:
        return 10;
      case 64:
        return 9;
    }
LABEL_26:
    if ((a1 & 4) != 0)
      v2 = 4;
    else
      v2 = (a1 >> 3) & 1;
    if ((a1 & 0x400) != 0)
      return 7;
    else
      return v2;
  }
  v1 = 13;
  switch(a1)
  {
    case 1:
      return v1;
    case 2:
      v1 = 8;
      break;
    case 4:
      v1 = 4;
      break;
    case 8:
      v1 = 1;
      break;
    default:
      goto LABEL_26;
  }
  return v1;
}

uint64_t ML3MLMediaTypeForProtocolMediaType(int a1)
{
  if ((a1 - 1) > 0xC)
    return 0;
  else
    return dword_1AC3D997C[a1 - 1];
}

uint64_t MLFrameworkBundle()
{
  return objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
}

void sub_1AC31BB34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC31BC8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1AC31BDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1AC31C074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;

  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  *(_QWORD *)(v23 - 56) = &a10;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 56));
  if (__p)
    operator delete(__p);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1AC31C304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  void *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1AC31C544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  void *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1AC31C728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  _QWORD *v9;
  uint64_t v10;
  void *v11;

  *v9 = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v10);
  operator delete(v11);
  MEMORY[0x1AF43C744](v9, 0x10B3C40FB617A5FLL);
  _Unwind_Resume(a1);
}

void sub_1AC31C8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  _QWORD *v9;
  uint64_t v10;
  void *v11;

  *v9 = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v10);
  operator delete(v11);
  MEMORY[0x1AF43C744](v9, 0x10B3C40FB617A5FLL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3MatchDeleteAlbumImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3MatchDeleteAlbumImportItem>,std::allocator<ML3MatchDeleteAlbumImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3MatchDeleteAlbumImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3MatchDeleteAlbumImportItem>,std::allocator<ML3MatchDeleteAlbumImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3MatchDeleteAlbumImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3MatchDeleteAlbumImportItem>,std::allocator<ML3MatchDeleteAlbumImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI23ML3DAAPDeleteImportItemE27__shared_ptr_default_deleteIS1_29ML3MatchDeleteAlbumImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3MatchDeleteArtistImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3MatchDeleteArtistImportItem>,std::allocator<ML3MatchDeleteArtistImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3MatchDeleteArtistImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3MatchDeleteArtistImportItem>,std::allocator<ML3MatchDeleteArtistImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3MatchDeleteArtistImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3MatchDeleteArtistImportItem>,std::allocator<ML3MatchDeleteArtistImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI23ML3DAAPDeleteImportItemE27__shared_ptr_default_deleteIS1_30ML3MatchDeleteArtistImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3MatchArtistImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchArtistImportItem>,std::allocator<ML3MatchArtistImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3MatchArtistImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchArtistImportItem>,std::allocator<ML3MatchArtistImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3MatchArtistImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchArtistImportItem>,std::allocator<ML3MatchArtistImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_24ML3MatchArtistImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3MatchAlbumImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchAlbumImportItem>,std::allocator<ML3MatchAlbumImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3MatchAlbumImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchAlbumImportItem>,std::allocator<ML3MatchAlbumImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3MatchAlbumImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchAlbumImportItem>,std::allocator<ML3MatchAlbumImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_23ML3MatchAlbumImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3MatchContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchContainerImportItem>,std::allocator<ML3MatchContainerImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3MatchContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchContainerImportItem>,std::allocator<ML3MatchContainerImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3MatchContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchContainerImportItem>,std::allocator<ML3MatchContainerImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_27ML3MatchContainerImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3MatchImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchImportItem>,std::allocator<ML3MatchImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3MatchImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchImportItem>,std::allocator<ML3MatchImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3MatchImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3MatchImportItem>,std::allocator<ML3MatchImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_18ML3MatchImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1AC31CCAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3SetCloudIDImportItem::~ML3SetCloudIDImportItem(id *this)
{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
  JUMPOUT(0x1AF43C744);
}

BOOL ML3SetCloudIDImportItem::isValid(ML3SetCloudIDImportItem *this)
{
  return *((_QWORD *)this + 1) && *((_QWORD *)this + 9) > 0;
}

void ML3SetCloudIDTrackImportItem::~ML3SetCloudIDTrackImportItem(id *this)
{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3SetCloudIDTrackImportItem::getIntegerValue(ML3SetCloudIDTrackImportItem *this, int a2)
{
  if (a2 == 100663305)
    return *((_QWORD *)this + 9);
  else
    return 0;
}

BOOL ML3SetCloudIDTrackImportItem::hasValue(ML3SetCloudIDTrackImportItem *this, int a2)
{
  return a2 == 100663305;
}

uint64_t ML3SetCloudIDTrackImportItem::getDescription(ML3SetCloudIDTrackImportItem *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;
  char v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"<ML3SetCloudIDTrackImportItem ", 30);
  *(_DWORD *)((char *)&v6[1] + *(_QWORD *)(v6[0] - 24)) = *(_DWORD *)((_BYTE *)&v6[1] + *(_QWORD *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (_QWORD *)std::ostream::operator<<();
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" persistentID=", 14);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", cloudID=", 10);
  v4 = (_QWORD *)std::ostream::operator<<();
  v9 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v9, 1);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v6[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v8);
}

void sub_1AC31CF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id ML3SetCloudIDTrackImportItem::getDeduplicationPredicates(ML3SetCloudIDTrackImportItem *this)
{
  void *v1;
  void *v2;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("ROWID"), *((_QWORD *)this + 1));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1AC31D020(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ML3SetCloudIDTrackImportItem::onlyRequiresItemStoreDataSource(ML3SetCloudIDTrackImportItem *this)
{
  return 1;
}

void ML3SetCloudIDArtistImportItem::~ML3SetCloudIDArtistImportItem(id *this)
{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3SetCloudIDArtistImportItem::getIntegerValue(ML3SetCloudIDArtistImportItem *this)
{
  return 0;
}

uint64_t ML3SetCloudIDArtistImportItem::hasValue(ML3SetCloudIDArtistImportItem *this)
{
  return 0;
}

uint64_t ML3SetCloudIDArtistImportItem::getDescription(ML3SetCloudIDArtistImportItem *this)
{
  _QWORD *v1;
  _QWORD v3[11];
  char v4;
  uint64_t v5;
  char v6;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"<ML3SetCloudIDArtistImportItem ", 31);
  *(_DWORD *)((char *)&v3[1] + *(_QWORD *)(v3[0] - 24)) = *(_DWORD *)((_BYTE *)&v3[1] + *(_QWORD *)(v3[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (_QWORD *)std::ostream::operator<<();
  v6 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v6, 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v5);
}

void sub_1AC31D1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ML3SetCloudIDArtistImportItem::getDeduplicationPredicates(ML3SetCloudIDArtistImportItem *this)
{
  return MEMORY[0x1E0C9AA60];
}

void ML3SetCloudIDAlbumImportItem::~ML3SetCloudIDAlbumImportItem(id *this)
{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3SetCloudIDAlbumImportItem::getIntegerValue(ML3SetCloudIDAlbumImportItem *this)
{
  return 0;
}

uint64_t ML3SetCloudIDAlbumImportItem::hasValue(ML3SetCloudIDAlbumImportItem *this)
{
  return 0;
}

uint64_t ML3SetCloudIDAlbumImportItem::getDescription(ML3SetCloudIDAlbumImportItem *this)
{
  _QWORD *v1;
  _QWORD v3[11];
  char v4;
  uint64_t v5;
  char v6;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"<ML3SetCloudIDAlbumImportItem ", 30);
  *(_DWORD *)((char *)&v3[1] + *(_QWORD *)(v3[0] - 24)) = *(_DWORD *)((_BYTE *)&v3[1] + *(_QWORD *)(v3[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (_QWORD *)std::ostream::operator<<();
  v6 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v6, 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v5);
}

void sub_1AC31D390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ML3SetCloudIDAlbumImportItem::getDeduplicationPredicates(ML3SetCloudIDAlbumImportItem *this)
{
  return MEMORY[0x1E0C9AA60];
}

void ML3SetCloudIDContainerImportItem::~ML3SetCloudIDContainerImportItem(id *this)
{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3SetCloudIDContainerImportItem::getIntegerValue(ML3SetCloudIDContainerImportItem *this, int a2)
{
  if (a2 == 184549408)
    return *((_QWORD *)this + 9);
  else
    return 0;
}

BOOL ML3SetCloudIDContainerImportItem::hasValue(ML3SetCloudIDContainerImportItem *this, int a2)
{
  return a2 == 184549408;
}

uint64_t ML3SetCloudIDContainerImportItem::getDescription(ML3SetCloudIDContainerImportItem *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;
  char v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"<ML3SetCloudIDContainerImportItem ", 34);
  *(_DWORD *)((char *)&v6[1] + *(_QWORD *)(v6[0] - 24)) = *(_DWORD *)((_BYTE *)&v6[1] + *(_QWORD *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (_QWORD *)std::ostream::operator<<();
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" persistentID=", 14);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", cloudID=", 10);
  v4 = (_QWORD *)std::ostream::operator<<();
  v9 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v9, 1);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v6[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v8);
}

void sub_1AC31D5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id ML3SetCloudIDContainerImportItem::getDeduplicationPredicates(ML3SetCloudIDContainerImportItem *this)
{
  void *v1;
  void *v2;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("container_pid"), *((_QWORD *)this + 1));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1AC31D668(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ML3SetCloudIDImportItem::ML3SetCloudIDImportItem(ML3SetCloudIDImportItem *this, NSDictionary *a2)
{
  NSDictionary *v3;
  NSDictionary *v4;

  v3 = a2;
  *((_WORD *)this + 8) = 256;
  *((_BYTE *)this + 18) = 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *(_QWORD *)this = &off_1E5B4E048;
  *((_QWORD *)this + 1) = 0;
  v4 = v3;
  *((_QWORD *)this + 8) = v4;
  *((_BYTE *)this + 17) = 0;

}

void sub_1AC31E324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1AC31F014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 200), 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1AC31F260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1AC31F3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16725(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__16726(uint64_t a1)
{

}

void _ML3LogReplyError(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  objc_class *v11;
  id v12;
  void *v13;
  NSObject *v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v10 = a1;
  v11 = (objc_class *)MEMORY[0x1E0CB3940];
  v12 = a2;
  v13 = (void *)objc_msgSend([v11 alloc], "initWithFormat:arguments:", v12, &a9);

  v14 = os_log_create("com.apple.amp.medialibrary", "Service");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543618;
    v16 = v13;
    v17 = 2114;
    v18 = v10;
    _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_ERROR, "%{public}@ There was an error waiting for a reply from the media library service. %{public}@", buf, 0x16u);
  }

}

const __CFString *MLServiceLockReasonDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("No lock");
  else
    return off_1E5B64A90[a1 - 1];
}

BOOL MLIsMediaLibraryDaemon()
{
  return __daemonProcessInfo != 0;
}

void ML3ChapterDatabaseImportDataSource::~ML3ChapterDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ChapterDatabaseImportDataSource::getImportPropertyGroupKey(ML3ChapterDatabaseImportDataSource *this)
{
  return 8;
}

uint64_t ML3ChapterDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ChapterDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

void sub_1AC322EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC322FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_DWORD *_MSV_XXH_XXH32_update(_DWORD *result, char *__src, size_t __n)
{
  int v3;
  char *v4;
  _DWORD *v5;
  int v6;
  unsigned int v7;
  _BOOL4 v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;

  if (__src)
  {
    v3 = __n;
    v4 = __src;
    v5 = result;
    v6 = result[1];
    v7 = *result + __n;
    v9 = __n > 0xF || v7 > 0xF;
    *result = v7;
    result[1] = v6 | v9;
    v10 = result[10];
    if (v10 + __n <= 0xF)
    {
      result = memcpy((char *)result + v10 + 24, __src, __n);
      LODWORD(v11) = v5[10] + v3;
LABEL_18:
      v5[10] = v11;
      return result;
    }
    v12 = &__src[__n];
    if ((_DWORD)v10)
    {
      result = memcpy((char *)result + v10 + 24, __src, (16 - v10));
      HIDWORD(v13) = v5[2] - 2048144777 * v5[6];
      LODWORD(v13) = HIDWORD(v13);
      v14 = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[3] - 2048144777 * v5[7];
      LODWORD(v13) = HIDWORD(v13);
      v5[2] = v14;
      v5[3] = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[4] - 2048144777 * v5[8];
      LODWORD(v13) = HIDWORD(v13);
      v5[4] = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[5] - 2048144777 * v5[9];
      LODWORD(v13) = HIDWORD(v13);
      v5[5] = -1640531535 * (v13 >> 19);
      v4 += (16 - v5[10]);
      v5[10] = 0;
    }
    if (v4 <= v12 - 16)
    {
      v15 = v5[2];
      v16 = v5[3];
      v17 = v5[4];
      v18 = v5[5];
      do
      {
        HIDWORD(v19) = v15 - 2048144777 * *(_DWORD *)v4;
        LODWORD(v19) = HIDWORD(v19);
        v15 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v16 - 2048144777 * *((_DWORD *)v4 + 1);
        LODWORD(v19) = HIDWORD(v19);
        v16 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v17 - 2048144777 * *((_DWORD *)v4 + 2);
        LODWORD(v19) = HIDWORD(v19);
        v17 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v18 - 2048144777 * *((_DWORD *)v4 + 3);
        LODWORD(v19) = HIDWORD(v19);
        v18 = -1640531535 * (v19 >> 19);
        v4 += 16;
      }
      while (v4 <= v12 - 16);
      v5[2] = v15;
      v5[3] = v16;
      v5[4] = v17;
      v5[5] = v18;
    }
    if (v4 < v12)
    {
      v11 = v12 - v4;
      result = memcpy(v5 + 6, v4, v11);
      goto LABEL_18;
    }
  }
  return result;
}

char *_MSV_XXH_XXH64_update(char *result, char *__src, size_t __n)
{
  int v3;
  char *v4;
  char *v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (__src)
  {
    v3 = __n;
    v4 = __src;
    v5 = result;
    *(_QWORD *)result += __n;
    v6 = *((unsigned int *)result + 18);
    if (v6 + __n <= 0x1F)
    {
      result = (char *)memcpy(&result[v6 + 40], __src, __n);
      LODWORD(v7) = *((_DWORD *)v5 + 18) + v3;
LABEL_12:
      *((_DWORD *)v5 + 18) = v7;
      return result;
    }
    v8 = &__src[__n];
    if ((_DWORD)v6)
    {
      result = (char *)memcpy(&result[v6 + 40], __src, (32 - v6));
      v9 = __ROR8__(*((_QWORD *)v5 + 2) - 0x3D4D51C2D82B14B1 * *((_QWORD *)v5 + 6), 33);
      *((_QWORD *)v5 + 1) = 0x9E3779B185EBCA87
                          * __ROR8__(*((_QWORD *)v5 + 1) - 0x3D4D51C2D82B14B1 * *((_QWORD *)v5 + 5), 33);
      *((_QWORD *)v5 + 2) = 0x9E3779B185EBCA87 * v9;
      v10 = 0x9E3779B185EBCA87 * __ROR8__(*((_QWORD *)v5 + 4) - 0x3D4D51C2D82B14B1 * *((_QWORD *)v5 + 8), 33);
      *((_QWORD *)v5 + 3) = 0x9E3779B185EBCA87
                          * __ROR8__(*((_QWORD *)v5 + 3) - 0x3D4D51C2D82B14B1 * *((_QWORD *)v5 + 7), 33);
      *((_QWORD *)v5 + 4) = v10;
      v4 += (32 - *((_DWORD *)v5 + 18));
      *((_DWORD *)v5 + 18) = 0;
    }
    if (v4 + 32 <= v8)
    {
      v11 = *((_QWORD *)v5 + 1);
      v12 = *((_QWORD *)v5 + 2);
      v14 = *((_QWORD *)v5 + 3);
      v13 = *((_QWORD *)v5 + 4);
      do
      {
        v11 = 0x9E3779B185EBCA87 * __ROR8__(v11 - 0x3D4D51C2D82B14B1 * *(_QWORD *)v4, 33);
        v12 = 0x9E3779B185EBCA87 * __ROR8__(v12 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 1), 33);
        v14 = 0x9E3779B185EBCA87 * __ROR8__(v14 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 2), 33);
        v13 = 0x9E3779B185EBCA87 * __ROR8__(v13 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 3), 33);
        v4 += 32;
      }
      while (v4 <= v8 - 32);
      *((_QWORD *)v5 + 1) = v11;
      *((_QWORD *)v5 + 2) = v12;
      *((_QWORD *)v5 + 3) = v14;
      *((_QWORD *)v5 + 4) = v13;
    }
    if (v4 < v8)
    {
      v7 = v8 - v4;
      result = (char *)memcpy(v5 + 40, v4, v7);
      goto LABEL_12;
    }
  }
  return result;
}

unint64_t _MSV_XXH_XXH64_digest(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;

  if (*a1 < 0x20uLL)
    v1 = a1[3] + 0x27D4EB2F165667C5;
  else
    v1 = 0x85EBCA77C2B2AE63
       - 0x61C8864E7A143579
       * ((0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579
         * ((0x85EBCA77C2B2AE63
           - 0x61C8864E7A143579
           * ((0x85EBCA77C2B2AE63
             - 0x61C8864E7A143579
             * ((__ROR8__(a1[2], 57) + __ROR8__(a1[1], 63) + __ROR8__(a1[3], 52) + __ROR8__(a1[4], 46)) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[1], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[2], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[3], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[4], 33)));
  v2 = v1 + *a1;
  v3 = a1 + 5;
  v4 = *a1 & 0x1FLL;
  if (v4 >= 8)
  {
    do
    {
      v5 = *v3++;
      v2 = 0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579 * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * v5, 33)) ^ v2, 37);
      v4 -= 8;
    }
    while (v4 > 7);
  }
  if (v4 >= 4)
  {
    v6 = *(_DWORD *)v3;
    v3 = (uint64_t *)((char *)v3 + 4);
    v2 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * v6) ^ v2, 41);
    v4 -= 4;
  }
  for (; v4; --v4)
  {
    v7 = *(unsigned __int8 *)v3;
    v3 = (uint64_t *)((char *)v3 + 1);
    v2 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v7) ^ v2, 53);
  }
  v8 = 0x165667B19E3779F9
     * ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) >> 29));
  return v8 ^ HIDWORD(v8);
}

uint64_t __Block_byref_object_copy__17006(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17007(uint64_t a1)
{

}

void sub_1AC3255C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1AC325BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC325E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC3260B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getKVMediaItemBuilderClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getKVMediaItemBuilderClass_softClass;
  v7 = getKVMediaItemBuilderClass_softClass;
  if (!getKVMediaItemBuilderClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getKVMediaItemBuilderClass_block_invoke;
    v3[3] = &unk_1E5B64C48;
    v3[4] = &v4;
    __getKVMediaItemBuilderClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1AC326198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _CreateKVItem(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  id v10;
  ML3Track *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  __int16 v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  ML3Track *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  char v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  char v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  ML3Track *v52;
  void *v53;
  __int16 v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  char v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  char v66;
  void *v67;
  uint64_t v68;
  id v70;
  void *v71;
  id v72;
  _QWORD v73[3];
  _QWORD v74[2];
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[3];
  _QWORD v78[8];

  v78[6] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v72 = a3;
  if (+[ML3Track revisionTrackingCode](ML3Track, "revisionTrackingCode") == a5)
  {
    v71 = v9;
    v70 = v10;
    v11 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3Track alloc], "initWithPersistentID:inLibrary:", a4, v10);
    v78[0] = CFSTR("media_type");
    v78[1] = CFSTR("item_extra.title");
    v78[2] = CFSTR("album_pid");
    v78[3] = CFSTR("album_artist_pid");
    v78[4] = CFSTR("item_artist_pid");
    v78[5] = CFSTR("genre_id");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v78, 6);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[ML3Entity getValuesForProperties:](v11, "getValuesForProperties:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("item_extra.title"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("media_type"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "unsignedIntValue");

    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("album_pid"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = (void *)objc_msgSend(v17, "longLongValue");

    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("album_artist_pid"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (void *)objc_msgSend(v19, "longLongValue");

    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("item_artist_pid"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)objc_msgSend(v21, "longLongValue");

    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("genre_id"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)objc_msgSend(v23, "longLongValue");

    -[ML3Entity URL](v11, "URL");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "absoluteString");
    v26 = (ML3Track *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      +[ML3Entity URLForEntityWithPersistentID:libraryUID:](ML3Album, "URLForEntityWithPersistentID:libraryUID:", v18, v72);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "absoluteString");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

    }
    if (v20)
    {
      +[ML3Entity URLForEntityWithPersistentID:libraryUID:](ML3AlbumArtist, "URLForEntityWithPersistentID:libraryUID:", v20, v72);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "absoluteString");
      v20 = (void *)objc_claimAutoreleasedReturnValue();

    }
    if (v22)
    {
      +[ML3Entity URLForEntityWithPersistentID:libraryUID:](ML3Artist, "URLForEntityWithPersistentID:libraryUID:", v22, v72);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "absoluteString");
      v22 = (void *)objc_claimAutoreleasedReturnValue();

    }
    if (v24)
    {
      +[ML3Entity URLForEntityWithPersistentID:libraryUID:](ML3Genre, "URLForEntityWithPersistentID:libraryUID:", v24, v72);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "absoluteString");
      v24 = (void *)objc_claimAutoreleasedReturnValue();

    }
    if ((v16 & 0x400) != 0)
    {
      objc_msgSend(v71, "musicVideoItemWithName:itemId:albumArtistId:songArtistId:albumId:genreId:", v14, v26, v20, v22, v18, v24);
      v42 = objc_claimAutoreleasedReturnValue();
    }
    else if ((v16 & 8) != 0)
    {
      objc_msgSend(v71, "songItemWithName:itemId:albumArtistId:songArtistId:albumId:genreId:", v14, v26, v20, v22, v18, v24);
      v42 = objc_claimAutoreleasedReturnValue();
    }
    else if ((v16 & 0x200) != 0)
    {
      objc_msgSend(v71, "tvEpisodeItemWithName:itemId:showId:", v14, v26, v22);
      v42 = objc_claimAutoreleasedReturnValue();
    }
    else if ((v16 & 0x800) != 0)
    {
      objc_msgSend(v71, "movieItemWithName:itemId:", v14, v26);
      v42 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if ((v16 & 2) == 0)
      {
        v31 = 0;
LABEL_51:

        v10 = v70;
        v9 = v71;
        goto LABEL_52;
      }
      objc_msgSend(v71, "audioBookItemWithName:itemId:artistId:", v14, v26, v22);
      v42 = objc_claimAutoreleasedReturnValue();
    }
    v31 = (void *)v42;
    goto LABEL_51;
  }
  if (+[ML3Album revisionTrackingCode](ML3Album, "revisionTrackingCode") == a5)
  {
    v11 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3Album alloc], "initWithPersistentID:inLibrary:", a4, v10);
    v77[0] = CFSTR("album");
    v77[1] = CFSTR("representative_item_pid");
    v77[2] = CFSTR("album_artist_pid");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v77, 3);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[ML3Entity getValuesForProperties:](v11, "getValuesForProperties:", v32);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("album"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("representative_item_pid"));
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = objc_msgSend(v33, "longLongValue");

    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("album_artist_pid"));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = (void *)objc_msgSend(v35, "longLongValue");

    if (objc_msgSend(v14, "length"))
    {
      v26 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3Track alloc], "initWithPersistentID:inLibrary:", v34, v10);
      -[ML3Entity valueForProperty:](v26, "valueForProperty:", CFSTR("media_type"));
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend(v37, "unsignedIntValue");

      if ((v38 & 8) != 0)
      {
        -[ML3Entity URL](v11, "URL");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "absoluteString");
        v40 = (void *)objc_claimAutoreleasedReturnValue();

        if (v36)
        {
          +[ML3Entity URLForEntityWithPersistentID:libraryUID:](ML3AlbumArtist, "URLForEntityWithPersistentID:libraryUID:", v36, v72);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "absoluteString");
          v36 = (void *)objc_claimAutoreleasedReturnValue();

        }
        objc_msgSend(v9, "albumItemWithName:itemId:albumArtistId:", v14, v40, v36);
        v31 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_42;
      }
LABEL_26:
      v31 = 0;
LABEL_52:

      goto LABEL_53;
    }
LABEL_39:
    v31 = 0;
LABEL_53:

    goto LABEL_54;
  }
  if (+[ML3AlbumArtist revisionTrackingCode](ML3AlbumArtist, "revisionTrackingCode") == a5)
  {
    v11 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3AlbumArtist alloc], "initWithPersistentID:inLibrary:", a4, v10);
    v76[0] = CFSTR("album_artist");
    v76[1] = CFSTR("representative_item_pid");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v76, 2);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    -[ML3Entity getValuesForProperties:](v11, "getValuesForProperties:", v43);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("album_artist"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("representative_item_pid"));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = objc_msgSend(v44, "longLongValue");

    if (!objc_msgSend(v14, "length"))
      goto LABEL_39;
    v26 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3Track alloc], "initWithPersistentID:inLibrary:", v45, v10);
    -[ML3Entity valueForProperty:](v26, "valueForProperty:", CFSTR("media_type"));
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = objc_msgSend(v46, "unsignedIntValue");

    if ((v47 & 8) == 0)
      goto LABEL_26;
    -[ML3Entity URL](v11, "URL");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "absoluteString");
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "albumArtistItemWithName:itemId:", v14, v40);
    v61 = objc_claimAutoreleasedReturnValue();
LABEL_41:
    v31 = (void *)v61;
LABEL_42:

    goto LABEL_52;
  }
  if (+[ML3Artist revisionTrackingCode](ML3Artist, "revisionTrackingCode") == a5)
  {
    v11 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3Artist alloc], "initWithPersistentID:inLibrary:", a4, v10);
    v75[0] = CFSTR("item_artist");
    v75[1] = CFSTR("representative_item_pid");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v75, 2);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    -[ML3Entity getValuesForProperties:](v11, "getValuesForProperties:", v48);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("item_artist"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("representative_item_pid"));
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = objc_msgSend(v49, "longLongValue");

    if (!objc_msgSend(v14, "length"))
      goto LABEL_39;
    -[ML3Entity URL](v11, "URL");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "absoluteString");
    v26 = (ML3Track *)objc_claimAutoreleasedReturnValue();

    v52 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3Track alloc], "initWithPersistentID:inLibrary:", v50, v10);
    -[ML3Entity valueForProperty:](v52, "valueForProperty:", CFSTR("media_type"));
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = objc_msgSend(v53, "unsignedIntValue");

    if ((v54 & 8) != 0)
    {
      objc_msgSend(v9, "songArtistItemWithName:itemId:", v14, v26);
      v68 = objc_claimAutoreleasedReturnValue();
    }
    else if ((v54 & 0x200) != 0)
    {
      objc_msgSend(v9, "tvShowItemWithName:itemId:", v14, v26);
      v68 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if ((v54 & 2) == 0)
      {
        v31 = 0;
LABEL_60:

        goto LABEL_52;
      }
      objc_msgSend(v9, "audioBookArtistItemWithName:itemId:", v14, v26);
      v68 = objc_claimAutoreleasedReturnValue();
    }
    v31 = (void *)v68;
    goto LABEL_60;
  }
  if (+[ML3Genre revisionTrackingCode](ML3Genre, "revisionTrackingCode") == a5)
  {
    v11 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3Genre alloc], "initWithPersistentID:inLibrary:", a4, v10);
    v74[0] = CFSTR("genre");
    v74[1] = CFSTR("representative_item_pid");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v74, 2);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    -[ML3Entity getValuesForProperties:](v11, "getValuesForProperties:", v55);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("genre"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("representative_item_pid"));
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = objc_msgSend(v56, "longLongValue");

    if (!objc_msgSend(v14, "length"))
      goto LABEL_39;
    v26 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3Track alloc], "initWithPersistentID:inLibrary:", v57, v10);
    -[ML3Entity valueForProperty:](v26, "valueForProperty:", CFSTR("media_type"));
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = objc_msgSend(v58, "unsignedIntValue");

    if ((v59 & 8) == 0)
      goto LABEL_26;
    -[ML3Entity URL](v11, "URL");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "absoluteString");
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "genreItemWithName:itemId:", v14, v40);
    v61 = objc_claimAutoreleasedReturnValue();
    goto LABEL_41;
  }
  if (+[ML3Container revisionTrackingCode](ML3Container, "revisionTrackingCode") != a5)
  {
    v31 = 0;
    goto LABEL_55;
  }
  v11 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3Container alloc], "initWithPersistentID:inLibrary:", a4, v10);
  v73[0] = CFSTR("name");
  v73[1] = CFSTR("is_hidden");
  v73[2] = CFSTR("smart_is_folder");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v73, 3);
  v63 = objc_claimAutoreleasedReturnValue();
  -[ML3Entity getValuesForProperties:](v11, "getValuesForProperties:", v63);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("is_hidden"));
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v63) = objc_msgSend(v64, "BOOLValue");

  objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("smart_is_folder"));
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = objc_msgSend(v65, "BOOLValue");

  v31 = 0;
  if ((v63 & 1) == 0 && (v66 & 1) == 0)
  {
    objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("name"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[ML3Entity URL](v11, "URL");
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v67, "absoluteString");
    v26 = (ML3Track *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "playlistItemWithName:itemId:", v14, v26);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_52;
  }
LABEL_54:

LABEL_55:
  return v31;
}

void __getKVMediaItemBuilderClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  KoaLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("KVMediaItemBuilder");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getKVMediaItemBuilderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getKVMediaItemBuilderClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ML3UpdateSiriIndexOperation.m"), 34, CFSTR("Unable to find class %s"), "KVMediaItemBuilder");

    __break(1u);
  }
}

void *KoaLibrary()
{
  void *v0;
  void *v2;
  void *v3;

  if (!KoaLibraryCore_frameworkLibrary)
    KoaLibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = (void *)KoaLibraryCore_frameworkLibrary;
  if (!KoaLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *KoaLibrary(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("ML3UpdateSiriIndexOperation.m"), 32, CFSTR("%s"), 0);

    __break(1u);
    free(v3);
  }
  return v0;
}

void __getKVDonatorClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  KoaLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("KVDonator");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getKVDonatorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getKVDonatorClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ML3UpdateSiriIndexOperation.m"), 33, CFSTR("Unable to find class %s"), "KVDonator");

    __break(1u);
  }
}

void sub_1AC32754C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1AC32798C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getKVIncrementalDatasetStreamClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  KoaLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("KVIncrementalDatasetStream");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getKVIncrementalDatasetStreamClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getKVIncrementalDatasetStreamClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ML3UpdateSiriIndexOperation.m"), 36, CFSTR("Unable to find class %s"), "KVIncrementalDatasetStream");

    __break(1u);
  }
}

void __getKVFullDatasetStreamClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  KoaLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("KVFullDatasetStream");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getKVFullDatasetStreamClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getKVFullDatasetStreamClass(void)_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ML3UpdateSiriIndexOperation.m"), 35, CFSTR("Unable to find class %s"), "KVFullDatasetStream");

    __break(1u);
  }
}

void ML3ComposerDatabaseImportDataSource::~ML3ComposerDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ComposerDatabaseImportDataSource::getImportPropertyGroupKey(ML3ComposerDatabaseImportDataSource *this)
{
  return 20;
}

uint64_t ML3ComposerDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ComposerDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

void ML3ItemExtraDatabaseImportDataSource::~ML3ItemExtraDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ItemExtraDatabaseImportDataSource::getImportPropertyGroupKey(ML3ItemExtraDatabaseImportDataSource *this)
{
  return 2;
}

uint64_t ML3ItemExtraDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ItemExtraDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3ItemExtraDatabaseImportDataSource::integerValueForKey(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = *a2;
  if ((_DWORD)a3 == 33554444)
  {
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, 33554444);
    return ITMediaKindForMLMediaType(v4);
  }
  else
  {
    v6 = (std::__shared_weak_count *)a2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a3);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return v5;
}

void sub_1AC327E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ML3ItemExtraDatabaseImportDataSource::dataValueForKey(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;

  *a3 = 0;
  a3[1] = 0;
  v4 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(&v14, v4, a2);
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a3, &v14);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1AC327EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void ML3ItemExtraDatabaseImportDataSource::stringValueForKey(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  std::string *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string::size_type size;
  std::string v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (std::string *)(a3 + 16);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  if ((_DWORD)a2 == 33554434)
  {
    v5 = *a1;
    v6 = (std::__shared_weak_count *)a1[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(&v18, v5, 33554434);
    *(_BYTE *)(a3 + 8) = v18.__r_.__value_.__s.__data_[8];
    std::string::operator=(v4, (const std::string *)&v18.__r_.__value_.__r.__words[2]);
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5B4D010;
    if (SHIBYTE(v20) < 0)
      operator delete((void *)v18.__r_.__value_.__r.__words[2]);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (*(_BYTE *)(a3 + 8))
    {
      if (*(char *)(a3 + 39) < 0)
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
      else
        v18 = *v4;
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      else
        size = v18.__r_.__value_.__l.__size_;
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v18.__r_.__value_.__l.__data_);
        if (size)
          return;
      }
      else if (size)
      {
        return;
      }
      v18.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5B4D010;
      v18.__r_.__value_.__s.__data_[8] = 0;
      v19 = 0;
      v20 = 0;
      v18.__r_.__value_.__r.__words[2] = 0;
      *(_BYTE *)(a3 + 8) = 0;
      std::string::operator=(v4, (const std::string *)&v18.__r_.__value_.__r.__words[2]);
      v18.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5B4D010;
      if (SHIBYTE(v20) < 0)
        operator delete((void *)v18.__r_.__value_.__r.__words[2]);
    }
  }
  else
  {
    v11 = *a1;
    v12 = (std::__shared_weak_count *)a1[1];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(&v18, v11, a2);
    *(_BYTE *)(a3 + 8) = v18.__r_.__value_.__s.__data_[8];
    std::string::operator=(v4, (const std::string *)&v18.__r_.__value_.__r.__words[2]);
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5B4D010;
    if (SHIBYTE(v20) < 0)
      operator delete((void *)v18.__r_.__value_.__r.__words[2]);
    if (v12)
    {
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_1AC328138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void **v21;
  uint64_t v22;

  if (a20 < 0)
    operator delete(__p);
  *(_QWORD *)v20 = v22;
  if (*(char *)(v20 + 39) < 0)
    operator delete(*v21);
  _Unwind_Resume(exception_object);
}

uint64_t ML3ItemExtraDatabaseImportDataSource::hasValueForKey(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(v5, a3) & 1) != 0)
  {
    v8 = 1;
    if (!v4)
      return v8;
  }
  else if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 200))(v5, a3))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
    if (!v4)
      return v8;
  }
  else
  {
    v8 = 0;
    if (!v4)
      return v8;
  }
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v8;
}

void sub_1AC3282AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ML3MediaAssetFileExtensions()
{
  return objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("mp3"), CFSTR("m4a"), CFSTR("m4p"), CFSTR("aa"), CFSTR("aax"), CFSTR("mp4"), CFSTR("m4v"), CFSTR("mov"), CFSTR("m4b"), CFSTR("movpkg"), CFSTR("m4bpkg"), 0);
}

uint64_t ML3ArtworkAssetFileExtensions()
{
  return objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("jpg"), CFSTR("blob"), CFSTR("png"), CFSTR("jpeg"), 0);
}

uint64_t ML3OfflineHLSFileExtensions()
{
  return objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("movpkg"), CFSTR("m4bpkg"), 0);
}

void ML3RemovePathsFromPurchaseManifests(void *a1)
{
  id v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  id v16;
  const char *v17;
  NSObject *v18;
  _BOOL4 v19;
  int *v20;
  char *v21;
  NSObject *v22;
  const char *v23;
  uint32_t v24;
  void (**v25)(_QWORD, _QWORD, _QWORD);
  __int128 v26;
  _QWORD v27[4];
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
  if (v2)
  {
    v4 = v2;
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)v30;
    *(_QWORD *)&v3 = 136446210;
    v26 = v3;
    while (1)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v30 != v7)
          objc_enumerationMutation(v1);
        v9 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
        +[ML3MusicLibrary pathForResourceFileOrFolder:](ML3MusicLibrary, "pathForResourceFileOrFolder:", 21, v26);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v9, "hasPrefix:", v10);

        if (v11)
        {
          if (!v6)
          {
            objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v6 = (void *)objc_claimAutoreleasedReturnValue();
          }
          v12 = v6;
LABEL_14:
          objc_msgSend(v12, "addObject:", v9);
          continue;
        }
        +[ML3MusicLibrary pathForResourceFileOrFolder:](ML3MusicLibrary, "pathForResourceFileOrFolder:", 20);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v9, "hasPrefix:", v13);

        if (v14)
        {
          if (!v5)
          {
            objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v5 = (void *)objc_claimAutoreleasedReturnValue();
          }
          v12 = v5;
          goto LABEL_14;
        }
        objc_msgSend(v9, "stringByDeletingPathExtension");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "stringByAppendingPathExtension:", CFSTR("plist"));
        v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v17 = (const char *)objc_msgSend(v16, "fileSystemRepresentation");

        LODWORD(v15) = unlink(v17);
        v18 = os_log_create("com.apple.amp.medialibrary", "Default");
        v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v15)
        {
          if (v19)
          {
            v20 = __error();
            v21 = strerror(*v20);
            *(_DWORD *)buf = 136446466;
            v34 = v17;
            v35 = 2082;
            v36 = v21;
            v22 = v18;
            v23 = "Could not delete %{public}s: %{public}s";
            v24 = 22;
LABEL_20:
            _os_log_impl(&dword_1AC149000, v22, OS_LOG_TYPE_DEFAULT, v23, buf, v24);
          }
        }
        else if (v19)
        {
          *(_DWORD *)buf = v26;
          v34 = v17;
          v22 = v18;
          v23 = "Removed file: %{public}s";
          v24 = 12;
          goto LABEL_20;
        }

      }
      v4 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
      if (!v4)
        goto LABEL_26;
    }
  }
  v5 = 0;
  v6 = 0;
LABEL_26:
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __ML3RemovePathsFromPurchaseManifests_block_invoke;
  v27[3] = &unk_1E5B64C20;
  v28 = 0;
  v25 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x1AF43CDE0](v27);
  ((void (**)(_QWORD, void *, _QWORD))v25)[2](v25, v6, 0);
  ((void (**)(_QWORD, void *, uint64_t))v25)[2](v25, v5, 1);

}

void sub_1AC328D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSSDownloadFileManifestClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  void *v4;
  void *v5;

  if (!StoreServicesLibraryCore_frameworkLibrary)
    StoreServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!StoreServicesLibraryCore_frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *StoreServicesLibrary(void)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3StorageUtilities.m"), 18, CFSTR("%s"), 0);

    goto LABEL_8;
  }
  result = objc_getClass("SSDownloadFileManifest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSSDownloadFileManifestClass(void)_block_invoke");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("ML3StorageUtilities.m"), 19, CFSTR("Unable to find class %s"), "SSDownloadFileManifest");

LABEL_8:
    __break(1u);
  }
  getSSDownloadFileManifestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void ML3DeleteAssetsAtPaths(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  const char *v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  os_log_t v12;
  int *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  uint32_t v18;
  void *v19;
  int v20;
  NSObject *v21;
  char *v22;
  id v23;
  stat v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v26 != v4)
          objc_enumerationMutation(v1);
        v6 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v25 + 1) + 8 * i));
        v7 = (const char *)objc_msgSend(v6, "fileSystemRepresentation");
        objc_msgSend(v6, "pathExtension");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
        {
          objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("movpkg"), CFSTR("m4bpkg"), 0);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = objc_msgSend(v9, "containsObject:", v8);

        }
        else
        {
          v10 = 0;
        }
        memset(&v24, 0, sizeof(v24));
        if (!stat(v7, &v24))
        {
          v11 = (v24.st_mode & 0x4000) != 0 ? v10 : 1;
          if (v11 == 1)
          {
            if ((v24.st_mode & 0x4000) != 0)
            {
              objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              v23 = 0;
              v20 = objc_msgSend(v19, "removeItemAtPath:error:", v6, &v23);
              v12 = (os_log_t)v23;

              if (!v20)
              {
                v21 = os_log_create("com.apple.amp.medialibrary", "Default");
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  -[NSObject localizedDescription](v12, "localizedDescription");
                  v22 = (char *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446466;
                  v30 = v7;
                  v31 = 2114;
                  v32 = v22;
                  _os_log_impl(&dword_1AC149000, v21, OS_LOG_TYPE_ERROR, "Could not delete %{public}s: %{public}@", buf, 0x16u);

                }
                goto LABEL_26;
              }

            }
            else if (unlink(v7))
            {
              v12 = os_log_create("com.apple.amp.medialibrary", "Default");
              if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
              {
                v13 = __error();
                v14 = strerror(*v13);
                *(_DWORD *)buf = 136446466;
                v30 = v7;
                v31 = 2082;
                v32 = v14;
                v15 = v12;
                v16 = OS_LOG_TYPE_ERROR;
                v17 = "Could not delete %{public}s: %{public}s";
                v18 = 22;
                goto LABEL_22;
              }
              goto LABEL_26;
            }
            v12 = os_log_create("com.apple.amp.medialibrary", "Default");
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446210;
              v30 = v7;
              v15 = v12;
              v16 = OS_LOG_TYPE_DEFAULT;
              v17 = "Removed file: %{public}s";
              v18 = 12;
LABEL_22:
              _os_log_impl(&dword_1AC149000, v15, v16, v17, buf, v18);
            }
LABEL_26:

          }
        }

      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    }
    while (v3);
  }
  ML3RemovePathsFromPurchaseManifests(v1);

}

void sub_1AC329A74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC329AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ML3VirtualTable;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1AC329D64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC329EFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _ML3VirtualTableCreate(sqlite3 *a1, void *a2, int a3, const char *const *a4, sqlite3_vtab **a5, char **a6)
{
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  objc_msgSend(v6, "databaseTable");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "columns");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (v10)
  {
    v11 = 0;
    v12 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v32 != v12)
          objc_enumerationMutation(v9);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * i), "columnConstraints") & 1) == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("col%lu"), v11);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "addObject:", v14);

          ++v11;
        }
      }
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    }
    while (v10);
  }

  objc_msgSend(v7, "componentsJoinedByString:", CFSTR(", "));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(v6, "name");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "stringWithFormat:", CFSTR("CREATE TABLE %@ (%@)"), v17, v15);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  v19 = objc_retainAutorelease(v18);
  v20 = sqlite3_declare_vtab(a1, (const char *)objc_msgSend(v19, "UTF8String"));
  if (!(_DWORD)v20)
  {
    v21 = operator new();
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    bzero((void *)v21, 0x18uLL);
    objc_storeStrong((id *)(v21 + 40), a2);
    if (v6)
    {
      objc_msgSend(v6, "dataSource");
      v22 = v30;
    }
    else
    {
      v22 = 0uLL;
    }
    v23 = *(std::__shared_weak_count **)(v21 + 32);
    *(_OWORD *)(v21 + 24) = v22;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    *a5 = (sqlite3_vtab *)v21;
  }

  return v20;
}

void sub_1AC32A32C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t _ML3VirtualTableBestIndex(sqlite3_vtab *a1, sqlite3_index_info *a2)
{
  return 0;
}

uint64_t _ML3VirtualTableDestroy(sqlite3_vtab *a1)
{
  if (a1)
  {

    std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a1[1]);
    MEMORY[0x1AF43C744](a1, 0x10F0C40C957F46CLL);
  }
  return 0;
}

uint64_t _ML3VirtualTableOpen(sqlite3_vtab *a1, sqlite3_vtab_cursor **a2)
{
  const sqlite3_module *pModule;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  char v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v24[6];

  pModule = a1[1].pModule;
  v4 = *(std::__shared_weak_count **)&a1[1].nRef;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = operator new();
  *(_QWORD *)(v7 + 24) = &off_1E5B4F838;
  *(_QWORD *)(v7 + 32) = 0;
  bzero((void *)v7, 8uLL);
  *(_DWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 12) = (**(uint64_t (***)(const sqlite3_module *))&pModule->iVersion)(pModule);
  v8 = a1[1].zErrMsg;
  objc_msgSend(v8, "databaseTable");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "int _ML3VirtualTableOpen(sqlite3_vtab *, sqlite3_vtab_cursor **)");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, CFSTR("ML3VirtualTable.mm"), 198, CFSTR("Virtual table %@ did not provide a database table structure."), v8);

  }
  v10 = operator new();
  *(_DWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  objc_msgSend(v9, "columns");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "count");
  objc_msgSend(v11, "objectAtIndex:", 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "columnConstraints");

  if (v12 <= 1 && (v14 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "ML3VirtualTableRow::ML3VirtualTableRow(ML3DatabaseTable *__strong)");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "handleFailureInFunction:file:lineNumber:description:", v22, CFSTR("ML3VirtualTableRow.mm"), 21, CFSTR("No data columns in table schema."));

  }
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = ___ZN18ML3VirtualTableRowC2EP16ML3DatabaseTable_block_invoke;
  v24[3] = &__block_descriptor_40_e34_v32__0__ML3DatabaseColumn_8Q16_B24l;
  v24[4] = v10;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v24);

  *(_DWORD *)v10 = -1;
  *(_QWORD *)(v7 + 16) = v10;
  objc_msgSend(v8, "delegate");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15 && (objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v15, "virtualTableDidOpenCursor:", v8);
  *a2 = (sqlite3_vtab_cursor *)v7;

  if (v4)
  {
    v16 = (unint64_t *)&v4->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return 0;
}

void sub_1AC32A6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);

  std::vector<ML3VirtualTableColumn>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  MEMORY[0x1AF43C744](v5, 0x1020C40E72D6CFBLL);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ML3VirtualTableClose(sqlite3_vtab_cursor *a1)
{
  char *v2;
  char *v3;
  void *v4;
  sqlite3_vtab *pVtab;
  void **p_nRef;

  v2 = a1->pVtab[1].zErrMsg;
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "delegate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4 && (objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v4, "virtualTableDidCloseCursor:", v3);

  }
  pVtab = a1[2].pVtab;
  if (pVtab)
  {
    p_nRef = (void **)&pVtab->nRef;
    std::vector<ML3VirtualTableColumn>::__destroy_vector::operator()[abi:ne180100](&p_nRef);
    MEMORY[0x1AF43C744](pVtab, 0x1020C40E72D6CFBLL);
  }
  MEMORY[0x1AF43C744](a1, 0x10A0C40A32EB4A5);

  return 0;
}

void sub_1AC32A83C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t _ML3VirtualTableFilter(sqlite3_vtab_cursor *a1, int a2, const char *a3, int a4, sqlite3_value **a5)
{
  LODWORD(a1[1].pVtab) = 0;
  return 0;
}

uint64_t _ML3VirtualTableNext(sqlite3_vtab_cursor *a1)
{
  std::__shared_weak_count *v2;
  const sqlite3_module *pModule;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;

  pModule = a1->pVtab[1].pModule;
  v2 = *(std::__shared_weak_count **)&a1->pVtab[1].nRef;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = (LODWORD(a1[1].pVtab) + 1);
  do
  {
    v7 = v6;
    if (v6 >= HIDWORD(a1[1].pVtab))
      break;
    v8 = (*(uint64_t (**)(const sqlite3_module *, uint64_t))(*(_QWORD *)&pModule->iVersion + 24))(pModule, v6);
    v6 = (v7 + 1);
  }
  while ((v8 & 1) == 0);
  LODWORD(a1[1].pVtab) = v7;
  if (v2)
  {
    v9 = (unint64_t *)&v2->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return 0;
}

void sub_1AC32A924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL _ML3VirtualTableEOF(sqlite3_vtab_cursor *a1)
{
  return LODWORD(a1[1].pVtab) >= HIDWORD(a1[1].pVtab);
}

uint64_t _ML3VirtualTableColumn(sqlite3_vtab_cursor *a1, sqlite3_vtab *a2, int a3)
{
  sqlite3_vtab *pVtab;
  std::__shared_weak_count *v7;
  const sqlite3_module *pModule;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  char *i;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;

  pVtab = a1[2].pVtab;
  if (LODWORD(pVtab->pModule) != LODWORD(a1[1].pVtab))
  {
    pModule = a1->pVtab[1].pModule;
    v7 = *(std::__shared_weak_count **)&a1->pVtab[1].nRef;
    v19[0] = pModule;
    v19[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (pModule)
    {
      v11 = *(_QWORD *)&pVtab->nRef;
      for (i = pVtab->zErrMsg; (char *)v11 != i; v11 += 48)
      {
        v20 = 0;
        if (*(_BYTE *)(v11 + 40))
        {
          std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>::operator=[abi:ne180100]<long long,0,long long,0ul,0>(v11 + 8, &v20);
        }
        else
        {
          *(_QWORD *)(v11 + 8) = 0;
          *(_DWORD *)(v11 + 32) = 0;
          *(_BYTE *)(v11 + 40) = 1;
        }
      }
      v13 = a1[1].pVtab;
      (*(void (**)(const sqlite3_module *, sqlite3_vtab *, _QWORD))(*(_QWORD *)&pModule->iVersion + 8))(pModule, pVtab, v13);
      LODWORD(pVtab->pModule) = v13;
    }
    if (v7)
    {
      v14 = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v16 = *(_QWORD *)&pVtab->nRef + 48 * a3;
  if (*(_BYTE *)(v16 + 40))
  {
    a1[4].pVtab = a2;
    v17 = *(unsigned int *)(v16 + 32);
    if ((_DWORD)v17 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v19[0] = a1 + 3;
    ((void (*)(_QWORD *))off_1E5B64CE8[v17])(v19);
  }
  else
  {
    sqlite3_result_null((sqlite3_context *)a2);
  }
  return 0;
}

void sub_1AC32AAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ML3VirtualTableRowID(sqlite3_vtab_cursor *a1, const sqlite3_module **a2)
{
  sqlite3_vtab *pVtab;
  const sqlite3_module *pModule;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  pVtab = a1->pVtab;
  pModule = a1->pVtab[1].pModule;
  v6 = *(std::__shared_weak_count **)&pVtab[1].nRef;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (pModule)
    pModule = (const sqlite3_module *)(*(uint64_t (**)(const sqlite3_module *, _QWORD))(*(_QWORD *)&pModule->iVersion
                                                                                                + 16))(pModule, LODWORD(a1[1].pVtab));
  *a2 = pModule;
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 0;
}

void sub_1AC32AB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ML3VirtualTableRename(sqlite3_vtab *a1, const char *a2)
{
  return 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3VirtualTableBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(uint64_t *a1, sqlite3_int64 *a2)
{
  uint64_t v3;
  sqlite3_context *v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v4 = *(sqlite3_context **)(*a1 + 8);
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ML3VirtualTableBindingVisitor::operator()(const int64_t &)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("ML3VirtualTableRow.mm"), 58, CFSTR("Cannot bind int64_t: NULL context"));

    v4 = *(sqlite3_context **)(v3 + 8);
  }
  sqlite3_result_int64(v4, *a2);
}

void sub_1AC32AC20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3VirtualTableBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(uint64_t *a1, float *a2)
{
  uint64_t v3;
  sqlite3_context *v4;
  double result;
  void *v6;
  void *v7;

  v3 = *a1;
  v4 = *(sqlite3_context **)(*a1 + 8);
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ML3VirtualTableBindingVisitor::operator()(const float_t &)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("ML3VirtualTableRow.mm"), 64, CFSTR("Cannot bind float_t: NULL context"));

    v4 = *(sqlite3_context **)(v3 + 8);
  }
  sqlite3_result_double(v4, *a2);
  return result;
}

void sub_1AC32ACD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3VirtualTableBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  sqlite3_context *v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v4 = *(sqlite3_context **)(*a1 + 8);
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ML3VirtualTableBindingVisitor::operator()(const BOOL &)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("ML3VirtualTableRow.mm"), 70, CFSTR("Cannot bind BOOL: NULL context"));

    v4 = *(sqlite3_context **)(v3 + 8);
  }
  sqlite3_result_int(v4, *a2);
}

void sub_1AC32AD84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3VirtualTableBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  sqlite3_context *v4;
  const char *v5;
  void *v6;
  void *v7;

  v3 = *a1;
  v4 = *(sqlite3_context **)(*a1 + 8);
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ML3VirtualTableBindingVisitor::operator()(const std::string &)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("ML3VirtualTableRow.mm"), 76, CFSTR("Cannot bind std::string: NULL context"));

    v4 = *(sqlite3_context **)(v3 + 8);
  }
  if (*(char *)(a2 + 23) >= 0)
    v5 = (const char *)a2;
  else
    v5 = *(const char **)a2;
  sqlite3_result_text(v4, v5, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

void sub_1AC32AE48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3VirtualTableBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const void *v7;
  sqlite3_context *v8;
  void *v9;
  void *v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = *a1;
  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (*(_QWORD *)(v2 + 8))
  {
    if (v4)
      goto LABEL_6;
LABEL_9:
    v8 = *(sqlite3_context **)(v2 + 8);
    goto LABEL_10;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ML3VirtualTableBindingVisitor::operator()(ML3CPPDataRef)");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("ML3VirtualTableRow.mm"), 82, CFSTR("Cannot bind ML3CPPDataRef: NULL context"));

  if (!v4)
    goto LABEL_9;
LABEL_6:
  v7 = *(const void **)(v4 + 16);
  v8 = *(sqlite3_context **)(v2 + 8);
  if (v7)
  {
    sqlite3_result_blob(v8, v7, *(_DWORD *)(v4 + 8), 0);
    goto LABEL_11;
  }
LABEL_10:
  sqlite3_result_null(v8);
LABEL_11:
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1AC32AF7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  void *v3;
  void *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = v3;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

void std::vector<ML3VirtualTableColumn>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*(v4 - 8))
          std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v4 - 40));
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL ML3DeviceIsUnlocked()
{
  int v0;

  v0 = MKBGetDeviceLockState();
  return !v0 || v0 == 3;
}

uint64_t ML3IsUIApplication()
{
  if (ML3IsUIApplication___once != -1)
    dispatch_once(&ML3IsUIApplication___once, &__block_literal_global_17676);
  return ML3IsUIApplication___isUIApplication;
}

uint64_t ML3IsFirstPartyMediaApplication()
{
  void *v0;
  void *v1;
  uint64_t v2;

  if (ML3IsFirstPartyMediaApplication___once != -1)
    dispatch_once(&ML3IsFirstPartyMediaApplication___once, &__block_literal_global_2);
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "bundleIdentifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  v2 = objc_msgSend((id)ML3IsFirstPartyMediaApplication___firstPartyBundleIDs, "containsObject:", v1);
  return v2;
}

BOOL ML3RepairFilePermissions(void *a1, _QWORD *a2)
{
  id v3;
  NSObject *v4;
  _BOOL8 v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  int v21;
  passwd *v23;
  uid_t pw_uid;
  gid_t pw_gid;
  uint64_t v27;
  NSObject *v28;
  int v29;
  stat buf;
  uint64_t v31;
  void *v32;
  _QWORD v33[4];
  _QWORD v34[4];
  void *v35;
  uint8_t v36[4];
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!getuid())
  {
    v6 = objc_retainAutorelease(v3);
    v7 = (const char *)objc_msgSend(v6, "UTF8String");
    memset(&buf, 0, sizeof(buf));
    v8 = stat(v7, &buf);
    if ((_DWORD)v8)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed to get permissions info on file %s."), v7);
    }
    else
    {
      v23 = getpwnam("mobile");
      if (v23)
      {
        pw_uid = v23->pw_uid;
        pw_gid = v23->pw_gid;
        if (buf.st_uid == pw_uid && buf.st_gid == pw_gid)
        {
          v9 = 0;
          v21 = 1;
LABEL_12:

          v5 = v21 != 0;
          goto LABEL_13;
        }
        v27 = chown(v7, pw_uid, pw_gid);
        if ((_DWORD)v27)
        {
          v10 = v27;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed to chown file %s. Err %d."), v7, *__error());
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = 0;
        }
        else
        {
          _ML3LogCategoryDefault();
          v28 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v36 = 136446210;
            v37 = v7;
            _os_log_impl(&dword_1AC149000, v28, OS_LOG_TYPE_DEBUG, "Successfully repaired permissions for file %{public}s.", v36, 0xCu);
          }

          v9 = 0;
          v10 = 0;
          v29 = 1;
        }
LABEL_8:
        v11 = (void *)MEMORY[0x1E0D4D030];
        v12 = *MEMORY[0x1E0D4CE40];
        v34[0] = v6;
        v33[0] = CFSTR("filePath");
        v33[1] = CFSTR("chownError");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v10);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v34[1] = v13;
        v33[2] = CFSTR("statError");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v8);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v33[3] = CFSTR("errorMsg");
        v34[2] = v14;
        v34[3] = v9;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, v33, 4);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v35 = v15;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v35, 1);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Validation Bug"), CFSTR("wrong permisions"), 0, v16, 0);

        if (a2 && v9)
        {
          v17 = objc_alloc(MEMORY[0x1E0CB35C8]);
          v31 = *MEMORY[0x1E0CB2D50];
          v32 = v9;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = (void *)objc_msgSend(v17, "initWithDomain:code:userInfo:", CFSTR("ML3SystemErrorDomain"), 42, v18);

          v20 = objc_retainAutorelease(v19);
          *a2 = v20;

        }
        v21 = v29;
        goto LABEL_12;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed to get uid for user 'mobile'. Err %d."), *__error());
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = 0;
    v10 = 0;
    goto LABEL_8;
  }
  v4 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.st_dev) = 0;
    _os_log_impl(&dword_1AC149000, v4, OS_LOG_TYPE_DEBUG, "Can't repair database permissions because we are not running as root.", (uint8_t *)&buf, 2u);
  }

  v5 = 0;
LABEL_13:

  return v5;
}

BOOL ML3IsProcessRunning(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  id v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0D87DA0], "predicateMatchingServiceName:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 0;
  objc_msgSend(MEMORY[0x1E0D87D68], "handleForPredicate:error:", v2, &v9);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v9;
  objc_msgSend(v4, "domain");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0D87E40]))
  {
    v6 = objc_msgSend(v4, "code");

    if (v6 == 3)
      goto LABEL_8;
  }
  else
  {

  }
  v7 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543618;
    v11 = v1;
    v12 = 2114;
    v13 = v4;
    _os_log_impl(&dword_1AC149000, v7, OS_LOG_TYPE_ERROR, "Failed to query for running process '%{public}@'. err=%{public}@", buf, 0x16u);
  }

LABEL_8:
  return v3 != 0;
}

id ML3ProcessHandleFromPID(uint64_t a1)
{
  int v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  NSObject *v6;
  id v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v1 = a1;
  v13 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a1)
  {
    objc_msgSend(MEMORY[0x1E0D87DF8], "targetWithPid:", a1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D87DA0], "predicateMatchingTarget:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = 0;
    objc_msgSend(MEMORY[0x1E0D87D68], "handleForPredicate:error:", v3, &v8);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v8;

    if (v4)
      goto LABEL_8;
  }
  else
  {
    v5 = 0;
  }
  v6 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218242;
    v10 = v1;
    v11 = 2114;
    v12 = v5;
    _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, "Failed to query process handle for PID '%lld'. err=%{public}@", buf, 0x16u);
  }

  v4 = 0;
LABEL_8:

  return v4;
}

id ML3LocalizedSortingDetailsDictionary()
{
  void *v0;
  void *v1;
  void *v2;

  +[ML3LanguageResourceManager sharedResourceManager](ML3LanguageResourceManager, "sharedResourceManager");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "resources");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "sortingDetails");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t ML3GetDiskUsageForPath(void *a1)
{
  id v1;
  void *v2;
  id v3;
  NSObject *v4;
  int *v5;
  char *v6;
  uint8_t buf[4];
  id v9;
  __int16 v10;
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = objc_retainAutorelease(v1);
    objc_msgSend(v3, "UTF8String");
    if (dirstat_np() == -1)
    {
      v4 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = __error();
        v6 = strerror(*v5);
        *(_DWORD *)buf = 138543618;
        v9 = v3;
        v10 = 2080;
        v11 = v6;
        _os_log_impl(&dword_1AC149000, v4, OS_LOG_TYPE_ERROR, "ML3GetUsageForPath encountered error. path=%{public}@ err=%s", buf, 0x16u);
      }

    }
  }

  return 0;
}

void ML3ImportSession::~ML3ImportSession(ML3ImportSession *this)
{
  ML3ImportSession::~ML3ImportSession(this);
  JUMPOUT(0x1AF43C744);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void **v13;

  *(_QWORD *)this = &off_1E5B4D030;
  v2 = *((_QWORD *)this + 8);
  if (v2 && v2 != *((_QWORD *)this + 2))
  {
    objc_msgSend(*((id *)this + 1), "checkInDatabaseConnection:");
    v3 = (void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;

  }
  v4 = (void *)*((_QWORD *)this + 337);
  if (v4)
  {
    *((_QWORD *)this + 338) = v4;
    operator delete(v4);
  }
  v13 = (void **)((char *)this + 2672);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v13);

  v13 = (void **)((char *)this + 2640);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v13);

  v13 = (void **)((char *)this + 2608);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v13);

  v13 = (void **)((char *)this + 2568);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v13);

  v13 = (void **)((char *)this + 2536);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = (void **)((char *)this + 2512);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = (void **)((char *)this + 2488);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v13);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)this + 2448);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 2408);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 2368);
  v13 = (void **)((char *)this + 2344);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = (void **)((char *)this + 2320);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v5 = (void *)*((_QWORD *)this + 287);
  if (v5)
  {
    *((_QWORD *)this + 288) = v5;
    operator delete(v5);
  }

  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 2248);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 2208);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 2168);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)this + 2128);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 2088);

  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 2040);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 2000);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1960);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)this + 1920);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1880);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 1840);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1800);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1760);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1720);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1680);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 1640);
  v13 = (void **)((char *)this + 1616);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = (void **)((char *)this + 1592);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v13);

  v13 = (void **)((char *)this + 1552);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = (void **)((char *)this + 1528);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v13);
  if (*((char *)this + 1511) < 0)
    operator delete(*((void **)this + 186));
  if (*((char *)this + 1487) < 0)
    operator delete(*((void **)this + 183));
  if (*((char *)this + 1463) < 0)
    operator delete(*((void **)this + 180));
  if (*((char *)this + 1439) < 0)
    operator delete(*((void **)this + 177));
  if (*((char *)this + 1415) < 0)
    operator delete(*((void **)this + 174));
  if (*((char *)this + 1391) < 0)
    operator delete(*((void **)this + 171));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1328);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1288);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1248);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1208);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table((uint64_t)this + 1088);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 1048);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 1008);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 968);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 928);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)this + 888);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 848);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 808);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 768);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 728);

  v6 = (void *)*((_QWORD *)this + 87);
  if (v6)
  {
    *((_QWORD *)this + 88) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 83);
  if (v7)
    operator delete(v7);
  v13 = (void **)((char *)this + 640);
  std::vector<std::unordered_map<long long,unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v13);
  v13 = (void **)((char *)this + 616);
  std::vector<std::unordered_map<long long,unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v13);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 576);
  v8 = (void *)*((_QWORD *)this + 69);
  if (v8)
  {
    *((_QWORD *)this + 70) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 66);
  if (v9)
  {
    *((_QWORD *)this + 67) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 63);
  if (v10)
  {
    *((_QWORD *)this + 64) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 60);
  if (v11)
  {
    *((_QWORD *)this + 61) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 57);
  if (v12)
  {
    *((_QWORD *)this + 58) = v12;
    operator delete(v12);
  }
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 416);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)this + 376);
  std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::~__hash_table((uint64_t)this + 336);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 304);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 256);

}

uint64_t std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::vector<std::unordered_map<long long,unsigned long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<long long const,ML3CollectionInfoSet>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<long long const,ML3CollectionInfoSet>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 8;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 72);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 40);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 24);
  return std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v2);
}

void std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 3));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ML3ComposerData>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ML3ComposerData>>,0>(uint64_t a1)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1AC32CC98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC32CD58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC32CEAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3GenreDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3GenreDatabaseImportDataSource>,std::allocator<ML3GenreDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3GenreDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3GenreDatabaseImportDataSource>,std::allocator<ML3GenreDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3GenreDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3GenreDatabaseImportDataSource>,std::allocator<ML3GenreDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_32ML3GenreDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ComposerDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ComposerDatabaseImportDataSource>,std::allocator<ML3ComposerDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ComposerDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ComposerDatabaseImportDataSource>,std::allocator<ML3ComposerDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ComposerDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ComposerDatabaseImportDataSource>,std::allocator<ML3ComposerDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_35ML3ComposerDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ArtistDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ArtistDatabaseImportDataSource>,std::allocator<ML3ArtistDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ArtistDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ArtistDatabaseImportDataSource>,std::allocator<ML3ArtistDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ArtistDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ArtistDatabaseImportDataSource>,std::allocator<ML3ArtistDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_33ML3ArtistDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3AlbumArtistDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3AlbumArtistDatabaseImportDataSource>,std::allocator<ML3AlbumArtistDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3AlbumArtistDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3AlbumArtistDatabaseImportDataSource>,std::allocator<ML3AlbumArtistDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3AlbumArtistDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3AlbumArtistDatabaseImportDataSource>,std::allocator<ML3AlbumArtistDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_38ML3AlbumArtistDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3AlbumDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3AlbumDatabaseImportDataSource>,std::allocator<ML3AlbumDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3AlbumDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3AlbumDatabaseImportDataSource>,std::allocator<ML3AlbumDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3AlbumDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3AlbumDatabaseImportDataSource>,std::allocator<ML3AlbumDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_32ML3AlbumDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ML3ImportSession::ML3ImportSession(ML3ImportSession *this, ML3MusicLibrary *a2, ML3DatabaseConnection *a3, int a4, char a5)
{
  ML3MusicLibrary *v9;
  ML3DatabaseConnection *v10;
  ML3MusicLibrary *v11;
  ML3DatabaseConnection *v12;
  ML3ImportPersistentIDGenerator *v13;
  void *v14;
  ML3PersistentIDGenerator *v15;
  void *v16;
  ML3PersistentIDGenerator *v17;
  void *v18;
  ML3PersistentIDGenerator *v19;
  void *v20;
  ML3PersistentIDGenerator *v21;
  void *v22;
  ML3PersistentIDGenerator *v23;
  void *v24;
  ML3PersistentIDGenerator *v25;
  void *v26;
  ML3PersistentIDGenerator *v27;
  void *v28;
  ML3PersistentIDGenerator *v29;
  void *v30;
  ML3PersistentIDGenerator *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  _DWORD *v60;
  unint64_t v61;
  BOOL v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  _DWORD *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  id v114;
  void *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v119;
  unint64_t v120;
  unint64_t *p_shared_weak_owners;
  unint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  std::__shared_weak_count *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  std::__shared_weak_count *v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  std::__shared_weak_count *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  std::__shared_weak_count *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  ML3MusicLibrary *v186;
  ML3DatabaseConnection *v187;
  void **v188;
  __int128 v189[2];

  v9 = a2;
  v10 = a3;
  *(_QWORD *)this = &off_1E5B4D030;
  v11 = v9;
  *((_QWORD *)this + 1) = v11;
  v12 = v10;
  *((_QWORD *)this + 2) = v12;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = a4;
  *((_BYTE *)this + 36) = a5;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 1065353216;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_DWORD *)this + 102) = 1065353216;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 112) = 1065353216;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_QWORD *)this + 75) = 0;
  *((_DWORD *)this + 152) = 1065353216;
  *(_OWORD *)((char *)this + 673) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *((_DWORD *)this + 190) = 1065353216;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_DWORD *)this + 200) = 1065353216;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_DWORD *)this + 210) = 1065353216;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_DWORD *)this + 220) = 1065353216;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_DWORD *)this + 230) = 1065353216;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_DWORD *)this + 240) = 1065353216;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((_DWORD *)this + 250) = 1065353216;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_DWORD *)this + 260) = 1065353216;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_DWORD *)this + 270) = 1065353216;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_DWORD *)this + 280) = 1065353216;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *((_DWORD *)this + 290) = 1065353216;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_DWORD *)this + 300) = 1065353216;
  *(_OWORD *)((char *)this + 1208) = 0u;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *((_DWORD *)this + 310) = 1065353216;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_DWORD *)this + 320) = 1065353216;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *((_DWORD *)this + 330) = 1065353216;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_DWORD *)this + 340) = 1065353216;
  *((_BYTE *)this + 1513) = 0;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *(_OWORD *)((char *)this + 1416) = 0u;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *(_OWORD *)((char *)this + 1400) = 0u;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *(_OWORD *)((char *)this + 1640) = 0u;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *(_OWORD *)((char *)this + 1608) = 0u;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *(_OWORD *)((char *)this + 1592) = 0u;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *((_DWORD *)this + 418) = 1065353216;
  *((_OWORD *)this + 106) = 0u;
  *((_OWORD *)this + 105) = 0u;
  *((_DWORD *)this + 428) = 1065353216;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  *((_DWORD *)this + 438) = 1065353216;
  *((_OWORD *)this + 111) = 0u;
  *((_OWORD *)this + 110) = 0u;
  *((_DWORD *)this + 448) = 1065353216;
  *(_OWORD *)((char *)this + 1800) = 0u;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *((_DWORD *)this + 458) = 1065353216;
  *((_OWORD *)this + 116) = 0u;
  *((_OWORD *)this + 115) = 0u;
  *((_DWORD *)this + 468) = 1065353216;
  *(_OWORD *)((char *)this + 1880) = 0u;
  *(_OWORD *)((char *)this + 1896) = 0u;
  *((_DWORD *)this + 478) = 1065353216;
  *((_OWORD *)this + 121) = 0u;
  *((_OWORD *)this + 120) = 0u;
  *((_DWORD *)this + 488) = 1065353216;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *((_DWORD *)this + 498) = 1065353216;
  *((_OWORD *)this + 126) = 0u;
  *((_OWORD *)this + 125) = 0u;
  *((_DWORD *)this + 508) = 1065353216;
  *(_OWORD *)((char *)this + 2040) = 0u;
  *(_OWORD *)((char *)this + 2056) = 0u;
  *((_DWORD *)this + 518) = 1065353216;
  *((_QWORD *)this + 264) = 0;
  *((_OWORD *)this + 131) = 0u;
  *((_OWORD *)this + 130) = 0u;
  *((_DWORD *)this + 530) = 1065353216;
  *((_OWORD *)this + 134) = 0u;
  *((_OWORD *)this + 133) = 0u;
  *((_DWORD *)this + 540) = 1065353216;
  *(_OWORD *)((char *)this + 2168) = 0u;
  *(_OWORD *)((char *)this + 2184) = 0u;
  *((_DWORD *)this + 550) = 1065353216;
  *((_OWORD *)this + 139) = 0u;
  *((_OWORD *)this + 138) = 0u;
  *((_DWORD *)this + 560) = 1065353216;
  *(_OWORD *)((char *)this + 2248) = 0u;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *((_DWORD *)this + 570) = 1065353216;
  *((_OWORD *)this + 149) = 0u;
  *((_OWORD *)this + 148) = 0u;
  *((_OWORD *)this + 147) = 0u;
  *((_OWORD *)this + 146) = 0u;
  *((_OWORD *)this + 145) = 0u;
  *((_OWORD *)this + 144) = 0u;
  *((_OWORD *)this + 143) = 0u;
  *((_DWORD *)this + 600) = 1065353216;
  *(_OWORD *)((char *)this + 2408) = 0u;
  *(_OWORD *)((char *)this + 2424) = 0u;
  *((_DWORD *)this + 610) = 1065353216;
  *((_OWORD *)this + 154) = 0u;
  *((_OWORD *)this + 153) = 0u;
  *((_DWORD *)this + 620) = 1065353216;
  *((_QWORD *)this + 339) = 0;
  *(_OWORD *)((char *)this + 2680) = 0u;
  *(_OWORD *)((char *)this + 2696) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *(_OWORD *)((char *)this + 2616) = 0u;
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *(_OWORD *)((char *)this + 2568) = 0u;
  *(_OWORD *)((char *)this + 2520) = 0u;
  *(_OWORD *)((char *)this + 2536) = 0u;
  *(_OWORD *)((char *)this + 2488) = 0u;
  *(_OWORD *)((char *)this + 2504) = 0u;
  v13 = -[ML3ImportPersistentIDGenerator initWithDatabaseConnection:tableName:]([ML3ImportPersistentIDGenerator alloc], "initWithDatabaseConnection:tableName:", v12, CFSTR("item"));
  v14 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v13;

  v15 = -[ML3PersistentIDGenerator initWithDatabaseConnection:tableName:]([ML3PersistentIDGenerator alloc], "initWithDatabaseConnection:tableName:", v12, CFSTR("container_item"));
  v16 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v15;

  v17 = -[ML3PersistentIDGenerator initWithDatabaseConnection:tableName:]([ML3PersistentIDGenerator alloc], "initWithDatabaseConnection:tableName:", v12, CFSTR("person"));
  v18 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v17;

  v19 = -[ML3PersistentIDGenerator initWithDatabaseConnection:tableName:]([ML3PersistentIDGenerator alloc], "initWithDatabaseConnection:tableName:", v12, CFSTR("container_item_person"));
  v20 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v19;

  v21 = -[ML3PersistentIDGenerator initWithDatabaseConnection:tableName:]([ML3PersistentIDGenerator alloc], "initWithDatabaseConnection:tableName:", v12, CFSTR("booklet"));
  v22 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v21;

  v23 = -[ML3PersistentIDGenerator initWithDatabaseConnection:tableName:]([ML3PersistentIDGenerator alloc], "initWithDatabaseConnection:tableName:", v12, CFSTR("item_artist"));
  v24 = (void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v23;

  v25 = -[ML3PersistentIDGenerator initWithDatabaseConnection:tableName:]([ML3PersistentIDGenerator alloc], "initWithDatabaseConnection:tableName:", v12, CFSTR("album_artist"));
  v26 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v25;

  v27 = -[ML3PersistentIDGenerator initWithDatabaseConnection:tableName:]([ML3PersistentIDGenerator alloc], "initWithDatabaseConnection:tableName:", v12, CFSTR("album"));
  v28 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v27;

  v29 = -[ML3PersistentIDGenerator initWithDatabaseConnection:tableName:]([ML3PersistentIDGenerator alloc], "initWithDatabaseConnection:tableName:", v12, CFSTR("container_author"));
  v30 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v29;

  v31 = -[ML3PersistentIDGenerator initWithDatabaseConnection:tableName:]([ML3PersistentIDGenerator alloc], "initWithDatabaseConnection:tableName:", v12, CFSTR("container_item_reaction"));
  v32 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v31;

  std::vector<std::shared_ptr<ML3ImportItem>>::__vdeallocate((void **)this + 191);
  *((_QWORD *)this + 191) = 0;
  *((_QWORD *)this + 192) = 0;
  *((_QWORD *)this + 193) = 0;
  v188 = (void **)v189;
  memset(v189, 0, 24);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v188);
  memset(v189, 0, 24);
  std::vector<std::shared_ptr<ML3ImportItem>>::__vdeallocate((void **)this + 194);
  *((_OWORD *)this + 97) = v189[0];
  *((_QWORD *)this + 196) = *(_QWORD *)&v189[1];
  v188 = (void **)v189;
  memset(v189, 0, 24);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v188);
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 1000);
  v33 = objc_claimAutoreleasedReturnValue();
  v34 = (void *)*((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = v33;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 1000);
  v35 = objc_claimAutoreleasedReturnValue();
  v36 = (void *)*((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = v35;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 1000);
  v37 = objc_claimAutoreleasedReturnValue();
  v38 = (void *)*((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = v37;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 1000);
  v39 = objc_claimAutoreleasedReturnValue();
  v40 = (void *)*((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = v39;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 100);
  v41 = objc_claimAutoreleasedReturnValue();
  v42 = (void *)*((_QWORD *)this + 320);
  *((_QWORD *)this + 320) = v41;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 100);
  v43 = objc_claimAutoreleasedReturnValue();
  v44 = (void *)*((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = v43;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 100);
  v45 = objc_claimAutoreleasedReturnValue();
  v46 = (void *)*((_QWORD *)this + 329);
  *((_QWORD *)this + 329) = v45;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 100);
  v47 = objc_claimAutoreleasedReturnValue();
  v48 = (void *)*((_QWORD *)this + 333);
  *((_QWORD *)this + 333) = v47;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 100);
  v49 = objc_claimAutoreleasedReturnValue();
  v50 = (void *)*((_QWORD *)this + 324);
  *((_QWORD *)this + 324) = v49;

  v51 = *((_QWORD *)this + 78);
  v52 = *((_QWORD *)this + 77);
  v53 = 0xCCCCCCCCCCCCCCCDLL * ((v51 - v52) >> 3);
  if (v53 > 6)
  {
    if (v51 - v52 != 280)
    {
      v74 = v52 + 280;
      while (v51 != v74)
      {
        v51 -= 40;
        std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v51);
      }
      *((_QWORD *)this + 78) = v74;
    }
  }
  else
  {
    v54 = *((_QWORD *)this + 79);
    if (0xCCCCCCCCCCCCCCCDLL * ((v54 - v51) >> 3) >= 7 - v53)
    {
      v75 = v51 + 40 * (7 - v53);
      do
      {
        *(_OWORD *)v51 = 0uLL;
        *(_OWORD *)(v51 + 16) = 0uLL;
        *(_DWORD *)(v51 + 32) = 1065353216;
        v51 += 40;
      }
      while (v51 != v75);
      *((_QWORD *)this + 78) = v75;
    }
    else
    {
      v55 = 0x999999999999999ALL * ((v54 - v52) >> 3);
      if (v55 <= 7)
        v55 = 7;
      if (0xCCCCCCCCCCCCCCCDLL * ((v54 - v52) >> 3) >= 0x333333333333333)
        v56 = 0x666666666666666;
      else
        v56 = v55;
      if (v56 > 0x666666666666666)
        goto LABEL_192;
      v57 = (char *)operator new(40 * v56);
      v58 = &v57[8 * ((v51 - v52) >> 3)];
      v59 = v57 + 280;
      v60 = v58 + 32;
      v61 = v53 - 7;
      do
      {
        *((_OWORD *)v60 - 2) = 0uLL;
        *((_OWORD *)v60 - 1) = 0uLL;
        *v60 = 1065353216;
        v60 += 10;
        v62 = __CFADD__(v61++, 1);
      }
      while (!v62);
      v63 = &v57[40 * v56];
      if (v51 != v52)
      {
        v64 = 0;
        do
        {
          v65 = &v58[v64];
          v66 = v51 + v64;
          v67 = *(_QWORD *)(v51 + v64 - 40);
          *(_QWORD *)(v66 - 40) = 0;
          *((_QWORD *)v65 - 5) = v67;
          *((_QWORD *)v65 - 4) = *(_QWORD *)(v51 + v64 - 32);
          *(_QWORD *)(v66 - 32) = 0;
          v68 = *(_QWORD *)(v51 + v64 - 24);
          *(_QWORD *)&v58[v64 - 24] = v68;
          v69 = *(_QWORD *)(v51 + v64 - 16);
          *((_QWORD *)v65 - 2) = v69;
          *((_DWORD *)v65 - 2) = *(_DWORD *)(v51 + v64 - 8);
          if (v69)
          {
            v70 = *(_QWORD *)(v68 + 8);
            v71 = *((_QWORD *)v65 - 4);
            if ((v71 & (v71 - 1)) != 0)
            {
              if (v70 >= v71)
                v70 %= v71;
            }
            else
            {
              v70 &= v71 - 1;
            }
            *(_QWORD *)(v67 + 8 * v70) = &v58[v64 - 24];
            *(_QWORD *)(v51 + v64 - 24) = 0;
            *(_QWORD *)(v51 + v64 - 16) = 0;
          }
          v64 -= 40;
        }
        while (v51 + v64 != v52);
        v58 += v64;
      }
      v72 = (void *)*((_QWORD *)this + 77);
      *((_QWORD *)this + 77) = v58;
      v73 = *((_QWORD *)this + 78);
      *((_QWORD *)this + 78) = v59;
      *((_QWORD *)this + 79) = v63;
      while ((void *)v73 != v72)
        v73 = std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v73 - 40);
      if (v72)
        operator delete(v72);
    }
  }
  v76 = *((_QWORD *)this + 81);
  v77 = *((_QWORD *)this + 80);
  v78 = 0xCCCCCCCCCCCCCCCDLL * ((v76 - v77) >> 3);
  if (v78 <= 6)
  {
    v79 = *((_QWORD *)this + 82);
    if (0xCCCCCCCCCCCCCCCDLL * ((v79 - v76) >> 3) >= 7 - v78)
    {
      v99 = v76 + 40 * (7 - v78);
      do
      {
        *(_OWORD *)v76 = 0uLL;
        *(_OWORD *)(v76 + 16) = 0uLL;
        *(_DWORD *)(v76 + 32) = 1065353216;
        v76 += 40;
      }
      while (v76 != v99);
      *((_QWORD *)this + 81) = v99;
      goto LABEL_69;
    }
    v80 = 0x999999999999999ALL * ((v79 - v77) >> 3);
    if (v80 <= 7)
      v80 = 7;
    if (0xCCCCCCCCCCCCCCCDLL * ((v79 - v77) >> 3) >= 0x333333333333333)
      v81 = 0x666666666666666;
    else
      v81 = v80;
    if (v81 <= 0x666666666666666)
    {
      v82 = (char *)operator new(40 * v81);
      v83 = &v82[8 * ((v76 - v77) >> 3)];
      v84 = v82 + 280;
      v85 = v83 + 32;
      v86 = v78 - 7;
      do
      {
        *((_OWORD *)v85 - 2) = 0uLL;
        *((_OWORD *)v85 - 1) = 0uLL;
        *v85 = 1065353216;
        v85 += 10;
        v62 = __CFADD__(v86++, 1);
      }
      while (!v62);
      v87 = &v82[40 * v81];
      if (v76 != v77)
      {
        v88 = 0;
        do
        {
          v89 = &v83[v88];
          v90 = v76 + v88;
          v91 = *(_QWORD *)(v76 + v88 - 40);
          *(_QWORD *)(v90 - 40) = 0;
          *((_QWORD *)v89 - 5) = v91;
          *((_QWORD *)v89 - 4) = *(_QWORD *)(v76 + v88 - 32);
          *(_QWORD *)(v90 - 32) = 0;
          v92 = *(_QWORD *)(v76 + v88 - 24);
          *(_QWORD *)&v83[v88 - 24] = v92;
          v93 = *(_QWORD *)(v76 + v88 - 16);
          *((_QWORD *)v89 - 2) = v93;
          *((_DWORD *)v89 - 2) = *(_DWORD *)(v76 + v88 - 8);
          if (v93)
          {
            v94 = *(_QWORD *)(v92 + 8);
            v95 = *((_QWORD *)v89 - 4);
            if ((v95 & (v95 - 1)) != 0)
            {
              if (v94 >= v95)
                v94 %= v95;
            }
            else
            {
              v94 &= v95 - 1;
            }
            *(_QWORD *)(v91 + 8 * v94) = &v83[v88 - 24];
            *(_QWORD *)(v76 + v88 - 24) = 0;
            *(_QWORD *)(v76 + v88 - 16) = 0;
          }
          v88 -= 40;
        }
        while (v76 + v88 != v77);
        v83 += v88;
      }
      v96 = (void *)*((_QWORD *)this + 80);
      *((_QWORD *)this + 80) = v83;
      v97 = *((_QWORD *)this + 81);
      *((_QWORD *)this + 81) = v84;
      *((_QWORD *)this + 82) = v87;
      while ((void *)v97 != v96)
        v97 = std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v97 - 40);
      if (v96)
        operator delete(v96);
      goto LABEL_69;
    }
LABEL_192:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  if (v76 - v77 != 280)
  {
    v98 = v77 + 280;
    while (v76 != v98)
    {
      v76 -= 40;
      std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v76);
    }
    *((_QWORD *)this + 81) = v98;
  }
LABEL_69:
  v100 = *((_QWORD *)this + 84);
  if (v100 > 6)
  {
    *((_QWORD *)this + 84) = 7;
    goto LABEL_101;
  }
  v101 = *((_QWORD *)this + 85);
  v102 = 7 - v100;
  if (v101 << 6 < 7 - v100 || v100 > (v101 << 6) - (7 - v100))
  {
    v187 = v12;
    memset(v189, 0, 24);
    v104 = v101 << 7;
    if ((unint64_t)(v101 << 7) <= 0x40)
      v104 = 64;
    if ((unint64_t)(v101 << 6) >= 0x3FFFFFFFFFFFFFFFLL)
      v105 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v105 = v104;
    std::vector<BOOL>::reserve((uint64_t)v189, v105);
    v106 = *((_QWORD *)this + 84);
    *((_QWORD *)&v189[0] + 1) = v106 + v102;
    v107 = (void *)*((_QWORD *)this + 83);
    v108 = *(_QWORD *)&v189[0];
    if (v106 < 1)
    {
      LODWORD(v110) = 0;
      v111 = *(unint64_t **)&v189[0];
    }
    else
    {
      v186 = v11;
      v109 = v106 >> 6;
      if ((unint64_t)(v106 + 63) >= 0x7F)
        memmove(*(void **)&v189[0], v107, 8 * v109);
      v110 = v106 - (v109 << 6);
      v111 = (unint64_t *)(v108 + 8 * v109);
      if (v110 < 1)
        LODWORD(v110) = 0;
      else
        *v111 = *v111 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v110) | *((_QWORD *)v107 + v109) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v110);
      v11 = v186;
      v107 = (void *)*((_QWORD *)this + 83);
    }
    *((_QWORD *)this + 83) = v108;
    *(_QWORD *)&v189[0] = v107;
    *((_OWORD *)this + 42) = *(__int128 *)((char *)v189 + 8);
    if (v107)
      operator delete(v107);
    v12 = v187;
    if ((_DWORD)v110)
      goto LABEL_87;
  }
  else
  {
    v111 = (unint64_t *)*((_QWORD *)this + 83);
    LODWORD(v110) = v100 & 0x3F;
    *((_QWORD *)this + 84) = 7;
    if ((v100 & 0x3F) != 0)
    {
LABEL_87:
      if ((64 - v110) >= v102)
        v112 = v102;
      else
        v112 = (64 - v110);
      *v111++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v110 - v112)) & (-1 << v110));
      v102 -= v112;
      v113 = v102 >> 6;
      if (v102 >= 0x40)
        bzero(v111, 8 * v113);
      goto LABEL_99;
    }
  }
  v113 = v102 >> 6;
LABEL_99:
  if ((v102 & 0x3F) != 0)
    v111[v113] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v102 & 0x3F));
LABEL_101:
  v114 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v115 = (void *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = v114;

  v116 = operator new();
  *(_OWORD *)(v116 + 56) = 0u;
  *(_OWORD *)(v116 + 40) = 0u;
  *(_OWORD *)(v116 + 24) = 0u;
  *(_OWORD *)(v116 + 8) = 0u;
  *(_QWORD *)v116 = &off_1E5B4FAC8;
  *(_QWORD *)&v189[0] = v116;
  v117 = (std::__shared_weak_count *)operator new();
  v117->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v117->__shared_owners_;
  v117->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51E30;
  v117->__shared_weak_owners_ = 0;
  v117[1].__vftable = (std::__shared_weak_count_vtbl *)v116;
  *((_QWORD *)&v189[0] + 1) = v117;
  v119 = *(std::__shared_weak_count **)(v116 + 16);
  if (v119)
  {
    if (v119->__shared_owners_ != -1)
      goto LABEL_114;
    do
      v120 = __ldxr(p_shared_owners);
    while (__stxr(v120 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v117->__shared_weak_owners_;
    do
      v122 = __ldxr(p_shared_weak_owners);
    while (__stxr(v122 + 1, p_shared_weak_owners));
    *(_QWORD *)(v116 + 8) = v116;
    *(_QWORD *)(v116 + 16) = v117;
    std::__shared_weak_count::__release_weak(v119);
  }
  else
  {
    do
      v123 = __ldxr(p_shared_owners);
    while (__stxr(v123 + 1, p_shared_owners));
    v124 = (unint64_t *)&v117->__shared_weak_owners_;
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
    *(_QWORD *)(v116 + 8) = v116;
    *(_QWORD *)(v116 + 16) = v117;
  }
  do
    v126 = __ldaxr(p_shared_owners);
  while (__stlxr(v126 - 1, p_shared_owners));
  if (!v126)
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
LABEL_114:
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)this + 256, v189);
  v127 = (std::__shared_weak_count *)*((_QWORD *)&v189[0] + 1);
  if (*((_QWORD *)&v189[0] + 1))
  {
    v128 = (unint64_t *)(*((_QWORD *)&v189[0] + 1) + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = operator new();
  *(_OWORD *)(v130 + 56) = 0u;
  *(_OWORD *)(v130 + 40) = 0u;
  *(_OWORD *)(v130 + 24) = 0u;
  *(_OWORD *)(v130 + 8) = 0u;
  *(_QWORD *)v130 = &off_1E5B50B00;
  *(_QWORD *)&v189[0] = v130;
  v131 = (std::__shared_weak_count *)operator new();
  v131->__shared_owners_ = 0;
  v132 = (unint64_t *)&v131->__shared_owners_;
  v131->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B522C8;
  v131->__shared_weak_owners_ = 0;
  v131[1].__vftable = (std::__shared_weak_count_vtbl *)v130;
  *((_QWORD *)&v189[0] + 1) = v131;
  v133 = *(std::__shared_weak_count **)(v130 + 16);
  if (v133)
  {
    if (v133->__shared_owners_ != -1)
      goto LABEL_132;
    do
      v134 = __ldxr(v132);
    while (__stxr(v134 + 1, v132));
    v135 = (unint64_t *)&v131->__shared_weak_owners_;
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
    *(_QWORD *)(v130 + 8) = v130;
    *(_QWORD *)(v130 + 16) = v131;
    std::__shared_weak_count::__release_weak(v133);
  }
  else
  {
    do
      v137 = __ldxr(v132);
    while (__stxr(v137 + 1, v132));
    v138 = (unint64_t *)&v131->__shared_weak_owners_;
    do
      v139 = __ldxr(v138);
    while (__stxr(v139 + 1, v138));
    *(_QWORD *)(v130 + 8) = v130;
    *(_QWORD *)(v130 + 16) = v131;
  }
  do
    v140 = __ldaxr(v132);
  while (__stlxr(v140 - 1, v132));
  if (!v140)
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
  }
LABEL_132:
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)this + 272, v189);
  v141 = (std::__shared_weak_count *)*((_QWORD *)&v189[0] + 1);
  if (*((_QWORD *)&v189[0] + 1))
  {
    v142 = (unint64_t *)(*((_QWORD *)&v189[0] + 1) + 8);
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = operator new();
  *(_OWORD *)(v144 + 56) = 0u;
  *(_OWORD *)(v144 + 40) = 0u;
  *(_OWORD *)(v144 + 24) = 0u;
  *(_OWORD *)(v144 + 8) = 0u;
  *(_QWORD *)v144 = &off_1E5B4FFB0;
  *(_QWORD *)&v189[0] = v144;
  v145 = (std::__shared_weak_count *)operator new();
  v145->__shared_owners_ = 0;
  v146 = (unint64_t *)&v145->__shared_owners_;
  v145->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51F48;
  v145->__shared_weak_owners_ = 0;
  v145[1].__vftable = (std::__shared_weak_count_vtbl *)v144;
  *((_QWORD *)&v189[0] + 1) = v145;
  v147 = *(std::__shared_weak_count **)(v144 + 16);
  if (v147)
  {
    if (v147->__shared_owners_ != -1)
      goto LABEL_150;
    do
      v148 = __ldxr(v146);
    while (__stxr(v148 + 1, v146));
    v149 = (unint64_t *)&v145->__shared_weak_owners_;
    do
      v150 = __ldxr(v149);
    while (__stxr(v150 + 1, v149));
    *(_QWORD *)(v144 + 8) = v144;
    *(_QWORD *)(v144 + 16) = v145;
    std::__shared_weak_count::__release_weak(v147);
  }
  else
  {
    do
      v151 = __ldxr(v146);
    while (__stxr(v151 + 1, v146));
    v152 = (unint64_t *)&v145->__shared_weak_owners_;
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
    *(_QWORD *)(v144 + 8) = v144;
    *(_QWORD *)(v144 + 16) = v145;
  }
  do
    v154 = __ldaxr(v146);
  while (__stlxr(v154 - 1, v146));
  if (!v154)
  {
    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
    std::__shared_weak_count::__release_weak(v145);
  }
LABEL_150:
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)this + 288, v189);
  v155 = (std::__shared_weak_count *)*((_QWORD *)&v189[0] + 1);
  if (*((_QWORD *)&v189[0] + 1))
  {
    v156 = (unint64_t *)(*((_QWORD *)&v189[0] + 1) + 8);
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = operator new();
  *(_OWORD *)(v158 + 56) = 0u;
  *(_OWORD *)(v158 + 40) = 0u;
  *(_OWORD *)(v158 + 24) = 0u;
  *(_OWORD *)(v158 + 8) = 0u;
  *(_QWORD *)v158 = &off_1E5B505B8;
  *(_QWORD *)&v189[0] = v158;
  v159 = (std::__shared_weak_count *)operator new();
  v159->__shared_owners_ = 0;
  v160 = (unint64_t *)&v159->__shared_owners_;
  v159->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B52108;
  v159->__shared_weak_owners_ = 0;
  v159[1].__vftable = (std::__shared_weak_count_vtbl *)v158;
  *((_QWORD *)&v189[0] + 1) = v159;
  v161 = *(std::__shared_weak_count **)(v158 + 16);
  if (v161)
  {
    if (v161->__shared_owners_ != -1)
      goto LABEL_168;
    do
      v162 = __ldxr(v160);
    while (__stxr(v162 + 1, v160));
    v163 = (unint64_t *)&v159->__shared_weak_owners_;
    do
      v164 = __ldxr(v163);
    while (__stxr(v164 + 1, v163));
    *(_QWORD *)(v158 + 8) = v158;
    *(_QWORD *)(v158 + 16) = v159;
    std::__shared_weak_count::__release_weak(v161);
  }
  else
  {
    do
      v165 = __ldxr(v160);
    while (__stxr(v165 + 1, v160));
    v166 = (unint64_t *)&v159->__shared_weak_owners_;
    do
      v167 = __ldxr(v166);
    while (__stxr(v167 + 1, v166));
    *(_QWORD *)(v158 + 8) = v158;
    *(_QWORD *)(v158 + 16) = v159;
  }
  do
    v168 = __ldaxr(v160);
  while (__stlxr(v168 - 1, v160));
  if (!v168)
  {
    ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
    std::__shared_weak_count::__release_weak(v159);
  }
LABEL_168:
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)this + 304, v189);
  v169 = (std::__shared_weak_count *)*((_QWORD *)&v189[0] + 1);
  if (*((_QWORD *)&v189[0] + 1))
  {
    v170 = (unint64_t *)(*((_QWORD *)&v189[0] + 1) + 8);
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = operator new();
  *(_OWORD *)(v172 + 56) = 0u;
  *(_OWORD *)(v172 + 40) = 0u;
  *(_OWORD *)(v172 + 24) = 0u;
  *(_OWORD *)(v172 + 8) = 0u;
  *(_QWORD *)v172 = &off_1E5B4FD38;
  *(_QWORD *)&v189[0] = v172;
  v173 = (std::__shared_weak_count *)operator new();
  v173->__shared_owners_ = 0;
  v174 = (unint64_t *)&v173->__shared_owners_;
  v173->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51ED8;
  v173->__shared_weak_owners_ = 0;
  v173[1].__vftable = (std::__shared_weak_count_vtbl *)v172;
  *((_QWORD *)&v189[0] + 1) = v173;
  v175 = *(std::__shared_weak_count **)(v172 + 16);
  if (v175)
  {
    if (v175->__shared_owners_ != -1)
      goto LABEL_186;
    do
      v176 = __ldxr(v174);
    while (__stxr(v176 + 1, v174));
    v177 = (unint64_t *)&v173->__shared_weak_owners_;
    do
      v178 = __ldxr(v177);
    while (__stxr(v178 + 1, v177));
    *(_QWORD *)(v172 + 8) = v172;
    *(_QWORD *)(v172 + 16) = v173;
    std::__shared_weak_count::__release_weak(v175);
  }
  else
  {
    do
      v179 = __ldxr(v174);
    while (__stxr(v179 + 1, v174));
    v180 = (unint64_t *)&v173->__shared_weak_owners_;
    do
      v181 = __ldxr(v180);
    while (__stxr(v181 + 1, v180));
    *(_QWORD *)(v172 + 8) = v172;
    *(_QWORD *)(v172 + 16) = v173;
  }
  do
    v182 = __ldaxr(v174);
  while (__stlxr(v182 - 1, v174));
  if (!v182)
  {
    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
    std::__shared_weak_count::__release_weak(v173);
  }
LABEL_186:
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)this + 320, v189);
  v183 = (std::__shared_weak_count *)*((_QWORD *)&v189[0] + 1);
  if (*((_QWORD *)&v189[0] + 1))
  {
    v184 = (unint64_t *)(*((_QWORD *)&v189[0] + 1) + 8);
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  *((_BYTE *)this + 1515) = ((a4 - 1) & 0xFFFFFFFD) == 0;
  *((_BYTE *)this + 252) = -[ML3MusicLibrary unknownSectionIndex](v11, "unknownSectionIndex");
  *((_WORD *)this + 760) = 0;

}

void sub_1AC32E4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void **a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  *(_QWORD *)(v42 - 176) = a1;
  v43 = *(void **)(v42 - 112);
  if (v43)
    operator delete(v43);
  v44 = *(void **)(v38 + 2696);
  if (v44)
  {
    *(_QWORD *)(v38 + 2704) = v44;
    operator delete(v44);
  }
  *(_QWORD *)(v42 - 112) = v38 + 2672;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));

  *(_QWORD *)(v42 - 112) = v38 + 2640;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));

  *(_QWORD *)(v42 - 112) = v38 + 2608;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));

  *(_QWORD *)(v42 - 112) = v38 + 2568;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));

  *(_QWORD *)(v42 - 112) = v38 + 2536;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));
  *(_QWORD *)(v42 - 112) = v38 + 2512;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));
  *(_QWORD *)(v42 - 112) = v40;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table(v38 + 2448);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a27);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v38 + 2368);
  *(_QWORD *)(v42 - 112) = v38 + 2344;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));
  *(_QWORD *)(v42 - 112) = v38 + 2320;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));
  v45 = *(void **)(v38 + 2296);
  if (v45)
  {
    *(_QWORD *)(v38 + 2304) = v45;
    operator delete(v45);
  }

  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(a28);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v38 + 2208);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a29);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table(v38 + 2128);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v38 + 2088);

  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(a30);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v38 + 2000);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a31);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table(v38 + 1920);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a32);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(v38 + 1840);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a33);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v38 + 1760);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a34);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v38 + 1680);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v38 + 1640);
  *(_QWORD *)(v42 - 112) = v38 + 1616;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));
  *(_QWORD *)(v42 - 112) = v38 + 1592;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));

  *(_QWORD *)(v42 - 112) = *(_QWORD *)(v42 - 128);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));
  *(_QWORD *)(v42 - 112) = v41;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));
  if (*(char *)(v38 + 1511) < 0)
    operator delete(*(void **)(v38 + 1488));
  if (*(char *)(v38 + 1487) < 0)
    operator delete(*(void **)(v38 + 1464));
  if (*(char *)(v38 + 1463) < 0)
    operator delete(*(void **)(v38 + 1440));
  if (*(char *)(v38 + 1439) < 0)
    operator delete(*(void **)(v38 + 1416));
  *(_QWORD *)(v42 - 128) = v38 + 768;
  if (*(char *)(v38 + 1415) < 0)
    operator delete(*(void **)(v38 + 1392));
  if (*(char *)(v38 + 1391) < 0)
    operator delete(*a26);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(v38 + 1328);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(a35);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(v38 + 1248);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(a36);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(v38 + 1168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(a37);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::~__hash_table(v38 + 1088);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(a38);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(v38 + 1008);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(*(_QWORD *)(v42 - 224));
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(v38 + 928);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(*(_QWORD *)(v42 - 216));
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v38 + 848);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(*(_QWORD *)(v42 - 208));
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(*(_QWORD *)(v42 - 128));
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v38 + 728);

  v46 = *(void **)(v38 + 696);
  if (v46)
  {
    *(_QWORD *)(v38 + 704) = v46;
    operator delete(v46);
  }
  v47 = *(void **)(v38 + 664);
  if (v47)
    operator delete(v47);
  *(_QWORD *)(v42 - 112) = v38 + 640;
  std::vector<std::unordered_map<long long,unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));
  *(_QWORD *)(v42 - 112) = *(_QWORD *)(v42 - 200);
  std::vector<std::unordered_map<long long,unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 112));
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v38 + 576);
  v48 = *(void **)(v38 + 552);
  if (v48)
  {
    *(_QWORD *)(v38 + 560) = v48;
    operator delete(v48);
  }
  v49 = *(void **)(v38 + 528);
  if (v49)
  {
    *(_QWORD *)(v38 + 536) = v49;
    operator delete(v49);
  }
  v50 = *(void **)(v38 + 504);
  if (v50)
  {
    *(_QWORD *)(v38 + 512) = v50;
    operator delete(v50);
  }
  v51 = *(void **)(v38 + 480);
  if (v51)
  {
    *(_QWORD *)(v38 + 488) = v51;
    operator delete(v51);
  }
  v52 = **(void ***)(v42 - 192);
  if (v52)
  {
    *(_QWORD *)(v38 + 464) = v52;
    operator delete(v52);
  }
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v38 + 416);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(*(_QWORD *)(v42 - 184));
  std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::~__hash_table(v38 + 336);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](*(_QWORD *)(v42 - 168));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](*(_QWORD *)(v42 - 160));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](*(_QWORD *)(v42 - 152));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](*(_QWORD *)(v42 - 144));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](*(_QWORD *)(v42 - 136));

  _Unwind_Resume(*(_Unwind_Exception **)(v42 - 176));
}

void ML3ImportSession::_populateExistingTrackIdentifiersForSource(ML3ImportSession *this, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[5];
  int v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  void *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1AF43CC0C]();
  ML3TrackRulesIdentityPropertyForSource(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = *((_QWORD *)this + 1);
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", v5, &unk_1E5BAC360, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3Track, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", v6, v7, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v19[0] = v5;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = ___ZN16ML3ImportSession42_populateExistingTrackIdentifiersForSourceEi_block_invoke;
    v13[3] = &__block_descriptor_44_e20_v40__0q8r__16Q24_B32l;
    v13[4] = this;
    v14 = a2;
    objc_msgSend(v8, "enumeratePersistentIDsAndProperties:usingBlock:", v9, v13);

    v10 = a2;
    *(_QWORD *)(*((_QWORD *)this + 83) + (((unint64_t)(int)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
    v11 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(*((_QWORD *)this + 77) + 40 * v10 + 24);
      *(_DWORD *)buf = 134218242;
      v16 = v12;
      v17 = 2114;
      v18 = v5;
      _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_DEFAULT, "saved %lu id mappings for existing tracks with %{public}@ != 0", buf, 0x16u);
    }

  }
  objc_autoreleasePoolPop(v4);
}

void sub_1AC32EBD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession42_populateExistingTrackIdentifiersForSourceEi_block_invoke(uint64_t a1, unint64_t a2, id *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v9 = a2;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_msgSend(*a3, "longLongValue");
  v7 = *(_QWORD *)(v5 + 616) + 40 * *(int *)(a1 + 40);
  v8 = v6;
  std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, v6, &v8)[3] = a2;
  std::__hash_table<std::__hash_value_type<long long,unsigned long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,unsigned long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,unsigned long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,unsigned long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((float *)(*(_QWORD *)(v5 + 640) + 40 * *(int *)(a1 + 40)), a2, &v9)[3] = v6;
  if (*(_BYTE *)(v5 + 1512))
  {
    if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(v5 + 32))
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(v5 + 728, a2, a2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AC32EEB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,unsigned long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,unsigned long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,unsigned long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,unsigned long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v14 = 1;
  if (v7 >= 3)
    v14 = (v7 & (v7 - 1)) != 0;
  v15 = v14 | (2 * v7);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = (int8x8_t)v16;
  else
    prime = (int8x8_t)v15;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (*(_QWORD *)&prime <= v24)
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v18 = operator new(8 * *(_QWORD *)&prime);
  v19 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v18;
  if (v19)
    operator delete(v19);
  v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
  while (*(_QWORD *)&prime != v20);
  v21 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = v21[1];
    v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&prime)
        v22 %= *(_QWORD *)&prime;
    }
    else
    {
      v22 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
    v27 = (_QWORD *)*v21;
    if (*v21)
    {
      do
      {
        v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&prime)
            v28 %= *(_QWORD *)&prime;
        }
        else
        {
          v28 &= *(_QWORD *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *v21 = *v27;
          *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
          v27 = v21;
        }
        v28 = v22;
LABEL_56:
        v21 = v27;
        v27 = (_QWORD *)*v27;
        v22 = v28;
      }
      while (v27);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v30)
  {
    *i = *v30;
LABEL_72:
    *v30 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v29[v5] = a1 + 4;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_1AC32F2A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_populateExistingContainerIdentifiersForSource(ML3ImportSession *this, int a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD v12[5];
  int v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  void *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1AF43CC0C]();
  if ((a2 - 1) <= 2)
  {
    ML3ContainerRulesIdentityPropertyForSource(*((unsigned int *)this + 8));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *((_QWORD *)this + 1);
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", v5, &unk_1E5BAC360, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3Container, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", v6, v7, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v18[0] = v5;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = ___ZN16ML3ImportSession46_populateExistingContainerIdentifiersForSourceEi_block_invoke;
    v12[3] = &__block_descriptor_44_e20_v40__0q8r__16Q24_B32l;
    v12[4] = this;
    v13 = a2;
    objc_msgSend(v8, "enumeratePersistentIDsAndProperties:usingBlock:", v9, v12);

    *((_BYTE *)this + 688) = 1;
    v10 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *((_QWORD *)this + 299);
      *(_DWORD *)buf = 134218242;
      v15 = v11;
      v16 = 2114;
      v17 = v5;
      _os_log_impl(&dword_1AC149000, v10, OS_LOG_TYPE_DEFAULT, "saved %lu id mappings for existing containers with %{public}@ != 0", buf, 0x16u);
    }

  }
  objc_autoreleasePoolPop(v4);
}

void sub_1AC32F480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession46_populateExistingContainerIdentifiersForSourceEi_block_invoke(uint64_t a1, unint64_t a2, id *a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = objc_msgSend(*a3, "longLongValue");
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v5 + 2368, v6, &v6)[3] = a2;
  if (*(_BYTE *)(v5 + 1512))
  {
    if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(v5 + 32))
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(v5 + 768, a2, a2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AC32F730(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_populateExistingArtistIdentifiersForSource(ML3ImportSession *this, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD v18[6];
  _QWORD v19[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, _QWORD *);
  uint64_t (*v24)(uint64_t);
  _BYTE v25[32];
  uint64_t v26;
  int v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  void *v31;
  _QWORD v32[5];

  v32[2] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1AF43CC0C]();
  ML3ArtistRulesIdentityPropertyForSource(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *((_QWORD *)this + 1);
  +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", v5, &unk_1E5BAC360, 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3Artist, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", v6, v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = 0;
  v21 = &v20;
  v22 = 0x5812000000;
  v23 = __Block_byref_object_copy__17831;
  v24 = __Block_byref_object_dispose__17832;
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  v27 = 1065353216;
  v32[0] = v5;
  v32[1] = CFSTR("representative_item_pid");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v32, 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = ___ZN16ML3ImportSession43_populateExistingArtistIdentifiersForSourceEi_block_invoke;
  v19[3] = &unk_1E5B64E58;
  v19[4] = &v20;
  v19[5] = this;
  objc_msgSend(v8, "enumeratePersistentIDsAndProperties:usingBlock:", v9, v19);

  v11 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *((_QWORD *)this + 208);
    *(_DWORD *)buf = 134218242;
    v29 = v12;
    v30 = 2114;
    v31 = v5;
    _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_DEFAULT, "saved %lu store id mappings for existing item artists with %{public}@", buf, 0x16u);
  }

  v13 = v21 + 8;
  while (1)
  {
    v13 = (_QWORD *)*v13;
    if (!v13)
      break;
    v14 = v13[2];
    v15 = (void *)*((_QWORD *)this + 1);
    v18[0] = v10;
    v18[1] = 3221225472;
    v18[2] = ___ZN16ML3ImportSession43_populateExistingArtistIdentifiersForSourceEi_block_invoke_28;
    v18[3] = &__block_descriptor_48_e31_v16__0__ML3DatabaseConnection_8l;
    v18[4] = this;
    v18[5] = v14;
    objc_msgSend(v15, "databaseConnectionAllowingWrites:withBlock:", 0, v18);
  }
  v16 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *((_QWORD *)this + 213);
    *(_DWORD *)buf = 134217984;
    v29 = v17;
    _os_log_impl(&dword_1AC149000, v16, OS_LOG_TYPE_DEFAULT, "saved %lu name order mappings for existing artist name/section order", buf, 0xCu);
  }

  *((_BYTE *)this + 1517) = 1;
  _Block_object_dispose(&v20, 8);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v25[8]);

  objc_autoreleasePoolPop(v4);
}

void sub_1AC32FA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  va_list va;

  va_start(va, a14);

  _Block_object_dispose(va, 8);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17831(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__17832(uint64_t a1)
{
  return std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 48);
}

void ___ZN16ML3ImportSession43_populateExistingArtistIdentifiersForSourceEi_block_invoke_28(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[6];
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "executeQuery:withParameters:", CFSTR("SELECT item_artist_order, item_artist_order_section, series_name_order, series_name_order_section from item where item_artist_pid=? LIMIT 1"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN16ML3ImportSession43_populateExistingArtistIdentifiersForSourceEi_block_invoke_2;
  v9[3] = &__block_descriptor_48_e40_v32__0__ML3DatabaseRow_8__NSError_16_B24l;
  v8 = *(_QWORD *)(a1 + 40);
  v9[4] = v4;
  v9[5] = v8;
  objc_msgSend(v7, "enumerateRowsWithBlock:", v9);

}

void sub_1AC32FC78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession43_populateExistingArtistIdentifiersForSourceEi_block_invoke_2(uint64_t *a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  id v14;

  v14 = a2;
  v5 = a3;
  v6 = a1[4];
  v7 = objc_msgSend(v14, "int64ForColumnIndex:", 0);
  v8 = objc_msgSend(v14, "intForColumnIndex:", 1);
  v9 = a1[5];
  a1 += 5;
  v10 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v6 + 1680, v9, a1);
  v10[3] = v7;
  v10[4] = v8;
  v11 = objc_msgSend(v14, "int64ForColumnIndex:", 2);
  v12 = objc_msgSend(v14, "intForColumnIndex:", 3);
  v13 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v6 + 1760, *a1, a1);
  v13[3] = v11;
  v13[4] = v12;

}

void sub_1AC32FD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = a2;
  v12 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v12;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AC32FF8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_populateExistingAlbumArtistIdentifiersForSource(ML3ImportSession *this, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD v19[6];
  _QWORD v20[6];
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD *);
  uint64_t (*v26)(uint64_t);
  _BYTE v27[32];
  uint64_t v28;
  int v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  void *v35;
  _QWORD v36[5];

  v36[2] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1AF43CC0C]();
  ML3AlbumArtistRulesIdentityPropertyForSource(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *((_QWORD *)this + 1);
  if ((_DWORD)a2 == 2)
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:", v5, &stru_1E5B66908, 2, 1);
  else
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", v5, &unk_1E5BAC360, 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3AlbumArtist, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", v6, v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = 0;
  v23 = &v22;
  v24 = 0x5812000000;
  v25 = __Block_byref_object_copy__17831;
  v26 = __Block_byref_object_dispose__17832;
  memset(v27, 0, sizeof(v27));
  v28 = 0;
  v29 = 1065353216;
  v36[0] = v5;
  v36[1] = CFSTR("representative_item_pid");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v36, 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___ZN16ML3ImportSession48_populateExistingAlbumArtistIdentifiersForSourceEi_block_invoke;
  v20[3] = &unk_1E5B64EC0;
  v21 = a2;
  v20[4] = &v22;
  v20[5] = this;
  objc_msgSend(v8, "enumeratePersistentIDsAndProperties:usingBlock:", v9, v20);

  v11 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *((_QWORD *)this + 243);
    v13 = *((_QWORD *)this + 238);
    *(_DWORD *)buf = 134218498;
    v31 = v12;
    v32 = 2048;
    v33 = v13;
    v34 = 2114;
    v35 = v5;
    _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_DEFAULT, "saved %lu cloud id, %lu store id mappings for existing album artists with %{public}@", buf, 0x20u);
  }

  v14 = v23 + 8;
  while (1)
  {
    v14 = (_QWORD *)*v14;
    if (!v14)
      break;
    v15 = v14[2];
    v16 = (void *)*((_QWORD *)this + 1);
    v19[0] = v10;
    v19[1] = 3221225472;
    v19[2] = ___ZN16ML3ImportSession48_populateExistingAlbumArtistIdentifiersForSourceEi_block_invoke_39;
    v19[3] = &__block_descriptor_48_e31_v16__0__ML3DatabaseConnection_8l;
    v19[4] = this;
    v19[5] = v15;
    objc_msgSend(v16, "databaseConnectionAllowingWrites:withBlock:", 0, v19);
  }
  v17 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *((_QWORD *)this + 248);
    *(_DWORD *)buf = 134217984;
    v31 = v18;
    _os_log_impl(&dword_1AC149000, v17, OS_LOG_TYPE_DEFAULT, "saved %lu id mappings for existing album artist name/section order", buf, 0xCu);
  }

  *((_BYTE *)this + 1518) = 1;
  _Block_object_dispose(&v22, 8);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v27[8]);

  objc_autoreleasePoolPop(v4);
}

void sub_1AC3302D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession48_populateExistingAlbumArtistIdentifiersForSourceEi_block_invoke(uint64_t a1, unint64_t a2, id *a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  int v9;
  void *__p[2];
  char v12;
  unint64_t v13;
  void **v14;

  v13 = a2;
  v6 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 48) == 2)
  {
    v7 = *a3;
    if (objc_msgSend(v7, "length"))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String"));
      v14 = __p;
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 1920, (unsigned __int8 *)__p, (__int128 **)&v14)+ 5) = a2;
      if (v12 < 0)
        operator delete(__p[0]);
    }

  }
  else
  {
    __p[0] = (void *)objc_msgSend(*a3, "longLongValue");
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v6 + 1880, (unint64_t)__p[0], __p)[3] = a2;
  }
  v8 = objc_msgSend(a3[1], "longLongValue");
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, a2, &v13)[3] = v8;
  if (*(_BYTE *)(v6 + 1512))
  {
    v9 = *(_DWORD *)(v6 + 32);
    if (*(_DWORD *)(a1 + 48) == v9 && (v9 - 1) <= 2)
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(v6 + 808, a2, a2);
  }
}

void sub_1AC330450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession48_populateExistingAlbumArtistIdentifiersForSourceEi_block_invoke_39(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[6];
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "executeQuery:withParameters:", CFSTR("SELECT album_artist_order, album_artist_order_section from item where album_artist_pid=? LIMIT 1"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN16ML3ImportSession48_populateExistingAlbumArtistIdentifiersForSourceEi_block_invoke_2;
  v9[3] = &__block_descriptor_48_e40_v32__0__ML3DatabaseRow_8__NSError_16_B24l;
  v8 = *(_QWORD *)(a1 + 40);
  v9[4] = v4;
  v9[5] = v8;
  objc_msgSend(v7, "enumerateRowsWithBlock:", v9);

}

void sub_1AC330588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession48_populateExistingAlbumArtistIdentifiersForSourceEi_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = objc_msgSend(v10, "int64ForColumnIndex:", 0);
  v8 = objc_msgSend(v10, "intForColumnIndex:", 1);
  v9 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v6 + 1960, *(_QWORD *)(a1 + 40), (uint64_t *)(a1 + 40));
  v9[3] = v7;
  v9[4] = v8;

}

void sub_1AC330650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  v15 = *a3;
  v16 = **a3;
  *((_QWORD *)i + 4) = *((_QWORD *)*a3 + 2);
  *((_OWORD *)i + 1) = v16;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = 0;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)i + 5) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AC330898(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_populateExistingAlbumIdentifiersForSource(ML3ImportSession *this, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD v19[6];
  _QWORD v20[6];
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD *);
  uint64_t (*v26)(uint64_t);
  _BYTE v27[32];
  uint64_t v28;
  int v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  void *v35;
  _QWORD v36[5];

  v36[2] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1AF43CC0C]();
  ML3AlbumRulesIdentityPropertyForSource(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *((_QWORD *)this + 1);
  if ((_DWORD)a2 == 2)
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:", v5, &stru_1E5B66908, 2, 1);
  else
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", v5, &unk_1E5BAC360, 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3Album, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", v6, v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = 0;
  v23 = &v22;
  v24 = 0x5812000000;
  v25 = __Block_byref_object_copy__17831;
  v26 = __Block_byref_object_dispose__17832;
  memset(v27, 0, sizeof(v27));
  v28 = 0;
  v29 = 1065353216;
  v36[0] = v5;
  v36[1] = CFSTR("representative_item_pid");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v36, 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = ___ZN16ML3ImportSession42_populateExistingAlbumIdentifiersForSourceEi_block_invoke;
  v20[3] = &unk_1E5B64EC0;
  v21 = a2;
  v20[4] = &v22;
  v20[5] = this;
  objc_msgSend(v8, "enumeratePersistentIDsAndProperties:usingBlock:", v9, v20);

  v11 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *((_QWORD *)this + 269);
    v13 = *((_QWORD *)this + 264);
    *(_DWORD *)buf = 134218498;
    v31 = v12;
    v32 = 2048;
    v33 = v13;
    v34 = 2114;
    v35 = v5;
    _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_DEFAULT, "saved %lu cloud id, %lu store id mappings for existing album with %{public}@", buf, 0x20u);
  }

  v14 = v23 + 8;
  while (1)
  {
    v14 = (_QWORD *)*v14;
    if (!v14)
      break;
    v15 = v14[2];
    v16 = (void *)*((_QWORD *)this + 1);
    v19[0] = v10;
    v19[1] = 3221225472;
    v19[2] = ___ZN16ML3ImportSession42_populateExistingAlbumIdentifiersForSourceEi_block_invoke_43;
    v19[3] = &__block_descriptor_48_e31_v16__0__ML3DatabaseConnection_8l;
    v19[4] = this;
    v19[5] = v15;
    objc_msgSend(v16, "databaseConnectionAllowingWrites:withBlock:", 0, v19);
  }
  v17 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *((_QWORD *)this + 274);
    *(_DWORD *)buf = 134217984;
    v31 = v18;
    _os_log_impl(&dword_1AC149000, v17, OS_LOG_TYPE_DEFAULT, "saved %lu id mappings for existing album name/section order", buf, 0xCu);
  }

  *((_BYTE *)this + 1519) = 1;
  _Block_object_dispose(&v22, 8);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v27[8]);

  objc_autoreleasePoolPop(v4);
}

void sub_1AC330BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession42_populateExistingAlbumIdentifiersForSourceEi_block_invoke(uint64_t a1, unint64_t a2, id *a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  int v9;
  void *__p[2];
  char v12;
  unint64_t v13;
  void **v14;

  v13 = a2;
  v6 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 48) == 2)
  {
    v7 = *a3;
    if (objc_msgSend(v7, "length"))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String"));
      v14 = __p;
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6 + 2128, (unsigned __int8 *)__p, (__int128 **)&v14)+ 5) = a2;
      if (v12 < 0)
        operator delete(__p[0]);
    }

  }
  else
  {
    __p[0] = (void *)objc_msgSend(*a3, "longLongValue");
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v6 + 2088, (unint64_t)__p[0], __p)[3] = a2;
  }
  v8 = objc_msgSend(a3[1], "longLongValue");
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, a2, &v13)[3] = v8;
  if (*(_BYTE *)(v6 + 1512))
  {
    v9 = *(_DWORD *)(v6 + 32);
    if (*(_DWORD *)(a1 + 48) == v9 && (v9 - 1) <= 2)
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(v6 + 848, a2, a2);
  }
}

void sub_1AC330D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession42_populateExistingAlbumIdentifiersForSourceEi_block_invoke_43(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[6];
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "executeQuery:withParameters:", CFSTR("SELECT album_order, album_order_section FROM item where album_pid=? LIMIT 1"), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN16ML3ImportSession42_populateExistingAlbumIdentifiersForSourceEi_block_invoke_2;
  v9[3] = &__block_descriptor_48_e40_v32__0__ML3DatabaseRow_8__NSError_16_B24l;
  v8 = *(_QWORD *)(a1 + 40);
  v9[4] = v4;
  v9[5] = v8;
  objc_msgSend(v7, "enumerateRowsWithBlock:", v9);

}

void sub_1AC330E98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession42_populateExistingAlbumIdentifiersForSourceEi_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = objc_msgSend(v10, "int64ForColumnIndex:", 0);
  v8 = objc_msgSend(v10, "intForColumnIndex:", 1);
  v9 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v6 + 2168, *(_QWORD *)(a1 + 40), (uint64_t *)(a1 + 40));
  v9[3] = v7;
  v9[4] = v8;

}

void sub_1AC330F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_getTrackPersistentID(uint64_t a1, _QWORD *a2)
{
  _BYTE *v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  ML3Track *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  NSObject *v32;
  uint32_t v33;
  int v34;
  BOOL v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  NSObject *v48;
  void *v50;
  id obj;
  void *v53;
  _QWORD v54[7];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void *__p;
  _BYTE *v60;
  char *v61;
  char v62;
  uint8_t v63[4];
  uint64_t v64;
  __int16 v65;
  void *v66;
  _BYTE buf[24];
  uint64_t v68;
  _QWORD v69[2];
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v62 = 0;
  (*(void (**)(void **__return_ptr, _QWORD, char *))(*(_QWORD *)*a2 + 104))(&__p, *a2, &v62);
  v3 = v60;
  v4 = v60 - (_BYTE *)__p;
  if ((unint64_t)(v60 - (_BYTE *)__p) <= 0x37)
  {
    v5 = 7 - (v4 >> 3);
    if (v5 > (v61 - v60) >> 3)
    {
      v6 = (v61 - (_BYTE *)__p) >> 2;
      if (v6 <= 7)
        v6 = 7;
      if ((unint64_t)(v61 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v7 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v7 = v6;
      v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v7);
      v9 = __p;
      v10 = v60;
      v11 = &v8[8 * (v4 >> 3)];
      v13 = &v8[8 * v12];
      bzero(v11, 8 * v5);
      v14 = &v11[8 * v5];
      while (v10 != v9)
      {
        v15 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v11 - 1) = v15;
        v11 -= 8;
      }
      __p = v11;
      v60 = v14;
      v61 = v13;
      if (v9)
        operator delete(v9);
      goto LABEL_17;
    }
    bzero(v60, 8 * v5);
    v16 = &v3[8 * v5];
    goto LABEL_14;
  }
  if (v4 != 56)
  {
    v16 = (char *)__p + 56;
LABEL_14:
    v60 = v16;
  }
LABEL_17:
  v17 = *(_DWORD *)(a1 + 248) > 0x3E7u || *(_BYTE *)(a1 + 1512) != 0;
  v18 = *((_QWORD *)__p + *(int *)(a1 + 32));
  if (!*(_BYTE *)(a1 + 36))
    goto LABEL_40;
  v19 = 0;
  v20 = 0;
  while (1)
  {
    v21 = *((_QWORD *)__p + v20);
    if (v21)
    {
      if (v17 && ((*(_QWORD *)(*(_QWORD *)(a1 + 664) + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      {
        ML3ImportSession::_populateExistingTrackIdentifiersForSource((ML3ImportSession *)a1, v20);
        v21 = *((_QWORD *)__p + v20);
      }
      v22 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(*(_QWORD *)(a1 + 616) + v19), v21);
      if (v22)
      {
        v23 = v22;
        if (v20 == *(_DWORD *)(a1 + 32))
        {
          v29 = v22[3];
          v30 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            goto LABEL_39;
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v29;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v20;
          v31 = "matched track to cached item pid %lld in source map %d";
          v32 = v30;
          v33 = 18;
          goto LABEL_38;
        }
        v24 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3Track alloc], "initWithPersistentID:inLibrary:", v22[3], *(_QWORD *)(a1 + 8));
        ML3TrackRulesIdentityPropertyForSource(*(unsigned int *)(a1 + 32));
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        -[ML3Entity valueForProperty:](v24, "valueForProperty:", v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = objc_msgSend(v26, "longLongValue");

        if (!v27 || v27 == v18)
          break;
      }
    }
    ++v20;
    v19 += 40;
    if (v20 == 7)
      goto LABEL_40;
  }
  v29 = v23[3];
  v30 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    goto LABEL_39;
  v34 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)buf = 134218496;
  *(_QWORD *)&buf[4] = v29;
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = v20;
  *(_WORD *)&buf[18] = 1024;
  *(_DWORD *)&buf[20] = v34;
  v31 = "matched track to cached item pid %lld in source map %d for import source %d";
  v32 = v30;
  v33 = 24;
LABEL_38:
  _os_log_impl(&dword_1AC149000, v32, OS_LOG_TYPE_DEFAULT, v31, buf, v33);
LABEL_39:

  if (!v29)
  {
LABEL_40:
    if (v62)
      v35 = v17;
    else
      v35 = 0;
    if (v35)
    {
      v29 = 0;
      goto LABEL_66;
    }
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = v36;
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 120))(*a2);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    if (v36)
    {
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      obj = v36;
      v29 = 0;
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v70, 16);
      if (!v37)
        goto LABEL_63;
      v38 = *(_QWORD *)v56;
      while (1)
      {
        for (i = 0; i != v37; ++i)
        {
          if (*(_QWORD *)v56 != v38)
            objc_enumerationMutation(obj);
          v40 = *(id *)(*((_QWORD *)&v55 + 1) + 8 * i);
          if (!*(_BYTE *)(a1 + 36))
          {
            v41 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 100663312);
            v69[0] = v40;
            +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.account_id"), v41);
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            v69[1] = v42;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v69, 2);
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v43);
            v44 = objc_claimAutoreleasedReturnValue();

            v40 = (id)v44;
          }
          +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3Track, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", *(_QWORD *)(a1 + 8), v40, v53);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          v46 = v45;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x2020000000;
          v68 = 0;
          if (v18)
          {
            v54[0] = MEMORY[0x1E0C809B0];
            v54[1] = 3221225472;
            v54[2] = ___ZN16ML3ImportSession21_getTrackPersistentIDENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke;
            v54[3] = &unk_1E5B64EF0;
            v54[5] = a1;
            v54[6] = v18;
            v54[4] = buf;
            objc_msgSend(v45, "enumeratePersistentIDsUsingBlock:", v54);
            v47 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
            if (!v47)
              goto LABEL_60;
          }
          else
          {
            v47 = objc_msgSend(v45, "anyEntityPersistentID");
            *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v47;
            if (!v47)
              goto LABEL_60;
          }
          v48 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v63 = 134218242;
            v64 = v47;
            v65 = 2114;
            v66 = v46;
            _os_log_impl(&dword_1AC149000, v48, OS_LOG_TYPE_DEFAULT, "matched track to item pid %lld using query %{public}@", v63, 0x16u);
          }

          v29 = v47;
LABEL_60:
          _Block_object_dispose(buf, 8);

          if (v47)
            goto LABEL_63;
        }
        v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v70, 16);
        if (!v37)
        {
LABEL_63:

          goto LABEL_65;
        }
      }
    }
    v29 = 0;
LABEL_65:

  }
LABEL_66:
  if (__p)
  {
    v60 = __p;
    operator delete(__p);
  }
  return v29;
}

void sub_1AC3315B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession21_getTrackPersistentIDENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke(_QWORD *a1, unint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a1[5];
  v7 = *(_DWORD *)(v6 + 32);
  v8 = (_QWORD *)(*(_QWORD *)(v6 + 640) + 40 * v7);
  v9 = (int8x8_t)v8[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_17;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = a2;
    if (*(_QWORD *)&v9 <= a2)
      v11 = a2 % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & a2;
  }
  v12 = *(_QWORD **)(*v8 + 8 * v11);
  if (!v12)
    goto LABEL_17;
  v13 = (_QWORD *)*v12;
  if (!v13)
    goto LABEL_17;
  while (1)
  {
    v14 = v13[1];
    if (v14 == a2)
      break;
    if (v10.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v9)
        v14 %= *(_QWORD *)&v9;
    }
    else
    {
      v14 &= *(_QWORD *)&v9 - 1;
    }
    if (v14 != v11)
      goto LABEL_17;
LABEL_16:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_17;
  }
  if (v13[2] != a2)
    goto LABEL_16;
  if (v7 == 6 || (v15 = v13[3]) == 0 || v15 == a1[6])
  {
LABEL_17:
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
    *a4 = 1;
    return;
  }
  v16 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = a1[6];
    v18 = 134218496;
    v19 = a2;
    v20 = 2048;
    v21 = v15;
    v22 = 2048;
    v23 = v17;
    _os_log_impl(&dword_1AC149000, v16, OS_LOG_TYPE_DEFAULT, "skipping existing item pid %lld with source id %lld that does not match import item source id %lld", (uint8_t *)&v18, 0x20u);
  }

}

uint64_t ML3ImportSession::_newTrackPersistentID(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = objc_msgSend(a1, "nextPersistentIDForImportItem:", &v11);
  v6 = v12;
  if (v12)
  {
    v7 = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v14 = v5;
    _os_log_impl(&dword_1AC149000, v9, OS_LOG_TYPE_DEFAULT, "created new item pid %lld", buf, 0xCu);
  }

  return v5;
}

void sub_1AC331944(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportSession::_getContainerPersistentID(uint64_t a1, _QWORD *a2)
{
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  NSObject *v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  void *v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 248) > 0x3E7u || *(_BYTE *)(a1 + 1512) != 0;
  v5 = ML3ContainerRulesIdentityImportPropertyForSource(*(unsigned int *)(a1 + 32));
  if (!(_DWORD)v5)
    goto LABEL_13;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v5);
  if (!v6)
    goto LABEL_13;
  v7 = v6;
  if (v4 && !*(_BYTE *)(a1 + 688))
    ML3ImportSession::_populateExistingContainerIdentifiersForSource((ML3ImportSession *)a1, *(_DWORD *)(a1 + 32));
  v8 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 2368), v7);
  if (!v8)
    goto LABEL_13;
  v9 = v8[3];
  v10 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v25 = v9;
    _os_log_impl(&dword_1AC149000, v10, OS_LOG_TYPE_DEFAULT, "matched to cached container pid %lld", buf, 0xCu);
  }

  if (!v9)
  {
LABEL_13:
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 120))(*a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v13 = v11;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
      if (v14)
      {
        v15 = *(_QWORD *)v21;
        while (2)
        {
          for (i = 0; i != v14; ++i)
          {
            if (*(_QWORD *)v21 != v15)
              objc_enumerationMutation(v13);
            +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3Container, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", *(_QWORD *)(a1 + 8), *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i), v12, (_QWORD)v20);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v9 = objc_msgSend(v17, "anyEntityPersistentID");
            if (v9)
            {
              v18 = os_log_create("com.apple.amp.medialibrary", "Import");
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134218242;
                v25 = v9;
                v26 = 2114;
                v27 = v17;
                _os_log_impl(&dword_1AC149000, v18, OS_LOG_TYPE_DEFAULT, "matched to container pid %lld using query %{public}@", buf, 0x16u);
              }

              goto LABEL_26;
            }

          }
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
          if (v14)
            continue;
          break;
        }
      }
      v9 = 0;
LABEL_26:

    }
    else
    {
      v9 = 0;
    }

  }
  return v9;
}

void sub_1AC331C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_getContainerPersistentID(ML3ImportSession *this, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v13[5];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v4 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)this + 296, a2);
  if (v4)
  {
    v5 = v4[3];
    v17 = v5;
  }
  else
  {
    ML3ContainerRulesIdentityPropertyForSource(*((unsigned int *)this + 8));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT ROWID,%@ FROM container WHERE %@=?"), v6, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)*((_QWORD *)this + 2);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = v9;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "executeQuery:withParameters:", v7, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = ___ZN16ML3ImportSession25_getContainerPersistentIDEx_block_invoke;
    v13[3] = &unk_1E5B65200;
    v13[4] = &v14;
    objc_msgSend(v11, "enumerateRowsWithBlock:", v13);

    v5 = v15[3];
  }
  _Block_object_dispose(&v14, 8);
  return v5;
}

void sub_1AC331DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a9);
  v14 = v12;

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession25_getContainerPersistentIDEx_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  objc_msgSend(v4, "numberForColumnIndex:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v3, "longLongValue");

}

void sub_1AC331E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_getPersonPersistentID(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  NSObject *v14;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::string v21;
  _BYTE v22[128];
  _BYTE buf[12];
  __int16 v24;
  _BYTE v25[26];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(buf, *a2, 369098753);
  if ((v25[25] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)&v25[2], *(std::string::size_type *)&v25[10]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((v25[25] & 0x80000000) != 0)
      operator delete(*(void **)&v25[2]);
  }
  else
  {
    v21 = *(std::string *)&v25[2];
  }
  v4 = a1 + 2448;
  v5 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a1 + 2448), (unsigned __int8 *)&v21);
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 5);
    v7 = os_log_create("com.apple.amp.medialibrary", "Import");
    v16 = v7;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl(&dword_1AC149000, v7, OS_LOG_TYPE_DEFAULT, "matched to cached person pid %lld", buf, 0xCu);
    }
  }
  else
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 120))(*a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v16, "count"))
    {
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v9 = v16;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
      if (v10)
      {
        v11 = *(_QWORD *)v18;
        while (2)
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v18 != v11)
              objc_enumerationMutation(v9);
            +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3Person, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", *(_QWORD *)(a1 + 8), *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i), v8);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v6 = objc_msgSend(v13, "anyEntityPersistentID");
            if (v6)
            {
              v14 = os_log_create("com.apple.amp.medialibrary", "Import");
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134218242;
                *(_QWORD *)&buf[4] = v6;
                v24 = 2114;
                *(_QWORD *)v25 = v13;
                _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_DEFAULT, "matched to person pid %lld using query %{public}@", buf, 0x16u);
              }

              *(_QWORD *)buf = &v21;
              *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (unsigned __int8 *)&v21, (__int128 **)buf)+ 5) = v6;

              goto LABEL_21;
            }

          }
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
          if (v10)
            continue;
          break;
        }
      }
      v6 = 0;
LABEL_21:

    }
    else
    {
      v6 = 0;
    }

  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1AC3321AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;

  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

char *std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  *((_QWORD *)v13 + 5) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v13 = *v25;
LABEL_41:
    *v25 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1AC332568(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_getAlbumArtistPersistentID(uint64_t a1, _QWORD *a2, void *a3)
{
  id v5;
  void *v6;
  _BOOL4 v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  std::string::size_type size;
  unsigned __int8 *v14;
  NSObject *v15;
  std::string *v16;
  unsigned __int8 *v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  NSObject *v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  std::string v38;
  void *__p[2];
  uint64_t v40;
  _BYTE v41[128];
  _BYTE buf[12];
  __int16 v43;
  _BYTE v44[26];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  v7 = *(_DWORD *)(a1 + 248) > 0x3E7u || *(_BYTE *)(a1 + 1512) != 0;
  v8 = *(_DWORD *)(a1 + 32);
  if (objc_msgSend(v5, "length"))
  {
    ML3CPPStringFromData((NSData *)__p, v6);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v40 = 0;
  }
  if (!ML3AlbumArtistRulesIdentityImportPropertyForSource(*(unsigned int *)(a1 + 32)))
    goto LABEL_38;
  if (*(_DWORD *)(a1 + 32) != 2)
  {
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
    if (!v9)
      goto LABEL_38;
    if (v7 && !*(_BYTE *)(a1 + 1518))
      ML3ImportSession::_populateExistingAlbumArtistIdentifiersForSource((ML3ImportSession *)a1, *(unsigned int *)(a1 + 32));
    v10 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 1880), v9);
    if (!v10)
      goto LABEL_38;
    v11 = v10[3];
    v12 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v11;
      v43 = 2048;
      *(_QWORD *)v44 = v9;
      _os_log_impl(&dword_1AC149000, v12, OS_LOG_TYPE_DEFAULT, "matched to cached albumArtistPID=%lld on sourceID=%lld", buf, 0x16u);
    }

    goto LABEL_35;
  }
  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 24))(buf);
  if ((v44[25] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)&v44[2], *(std::string::size_type *)&v44[10]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((v44[25] & 0x80000000) != 0)
      operator delete(*(void **)&v44[2]);
  }
  else
  {
    v38 = *(std::string *)&v44[2];
  }
  size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v38.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_33;
  if (v7 && !*(_BYTE *)(a1 + 1518))
    ML3ImportSession::_populateExistingAlbumArtistIdentifiersForSource((ML3ImportSession *)a1, *(unsigned int *)(a1 + 32));
  v14 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a1 + 1920), (unsigned __int8 *)&v38);
  if (v14)
  {
    v11 = *((_QWORD *)v14 + 5);
    v15 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = &v38;
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v16 = (std::string *)v38.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = v11;
      v43 = 2082;
      *(_QWORD *)v44 = v16;
      _os_log_impl(&dword_1AC149000, v15, OS_LOG_TYPE_DEFAULT, "matched to cached albumArtistPID=%lld on cloudID=%{public}s", buf, 0x16u);
    }

  }
  else
  {
LABEL_33:
    v11 = 0;
  }
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    if (v11)
      goto LABEL_67;
    goto LABEL_38;
  }
  operator delete(v38.__r_.__value_.__l.__data_);
  if (v11)
    goto LABEL_67;
LABEL_38:
  if (v6)
  {
    if ((v8 - 1) >= 2)
    {
      v17 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a1 + 1128), (unsigned __int8 *)__p);
      if (v17)
      {
        v18 = (uint64_t *)*((_QWORD *)v17 + 5);
        v19 = (std::__shared_weak_count *)*((_QWORD *)v17 + 6);
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldxr(p_shared_owners);
          while (__stxr(v21 + 1, p_shared_owners));
        }
        v11 = *v18;
        v22 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v11;
          _os_log_impl(&dword_1AC149000, v22, OS_LOG_TYPE_DEFAULT, "matched to cached album artist import item=%lld based on grouping key", buf, 0xCu);
        }

        if (!v19)
          goto LABEL_50;
        v23 = (unint64_t *)&v19->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
          if (v11)
            goto LABEL_67;
        }
        else
        {
LABEL_50:
          if (v11)
            goto LABEL_67;
        }
      }
    }
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = v25;
  if (v25)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v27 = v25;
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
    if (v28)
    {
      v29 = *(_QWORD *)v35;
      while (2)
      {
        for (i = 0; i != v28; ++i)
        {
          if (*(_QWORD *)v35 != v29)
            objc_enumerationMutation(v27);
          +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3AlbumArtist, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", *(_QWORD *)(a1 + 8), *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * i), 0, (_QWORD)v34);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v31, "anyEntityPersistentID");
          if (v11)
          {
            v32 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218242;
              *(_QWORD *)&buf[4] = v11;
              v43 = 2114;
              *(_QWORD *)v44 = v31;
              _os_log_impl(&dword_1AC149000, v32, OS_LOG_TYPE_DEFAULT, "matched to album artist pid %lld using query %{public}@", buf, 0x16u);
            }

            goto LABEL_64;
          }

        }
        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v34, v41, 16);
        if (v28)
          continue;
        break;
      }
    }
    v11 = 0;
LABEL_64:

  }
  else
  {
    v11 = 0;
  }

LABEL_67:
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);

  return v11;
}

void sub_1AC332AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::begin(ML3ImportSession *this, int a2, int a3, int a4)
{
  NSObject *v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  _BOOL8 v18;
  ML3SortMap *v19;
  void *v20;
  unsigned int v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  int v25;
  void *v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  void *v37;
  ML3ImportSession *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  NSObject *v42;
  void *v43;
  ML3ImportSession *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  NSObject *v51;
  void *v52;
  ML3ImportSession *v53;
  NSObject *v54;
  void *v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  NSObject *v60;
  void *v61;
  int v62;
  NSObject *v63;
  uint8_t buf[4];
  ML3ImportSession *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v8 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *((_DWORD *)this + 8);
    *(_DWORD *)buf = 134219008;
    v66 = this;
    v67 = 1024;
    v68 = v9;
    v69 = 1024;
    v70 = a2;
    v71 = 1024;
    v72 = a3;
    v73 = 1024;
    v74 = a4;
    _os_log_impl(&dword_1AC149000, v8, OS_LOG_TYPE_DEFAULT, "starting import session %p. source=%d, itemCount=%d, isReset=%d, clientInitiatedReset=%d", buf, 0x24u);
  }

  bzero((char *)this + 152, 0x60uLL);
  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  *((_QWORD *)this + 30) = v10;
  *((_DWORD *)this + 62) = a2;
  *((_BYTE *)this + 1512) = a3;
  if (objc_msgSend(*((id *)this + 2), "journalingMode") == 1)
  {
    objc_msgSend(*((id *)this + 1), "connectionPool");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "_connectionForWriting:useThreadConnection:storeThreadLocalConnection:", 0, 0, 1);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v12;

  }
  else
  {
    v14 = *((id *)this + 2);
    v11 = (void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v14;
  }

  objc_msgSend(*((id *)this + 2), "executeQuery:", CFSTR("SELECT COUNT() FROM sort_map"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "int64ValueForFirstRowAndColumn");

  v18 = *((_DWORD *)this + 62) > 0x14u && v16 < 100000;
  v19 = -[ML3SortMap initWithConnection:library:preloadNames:]([ML3SortMap alloc], "initWithConnection:library:preloadNames:", *((_QWORD *)this + 2), *((_QWORD *)this + 1), v18);
  v20 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v19;

  v21 = *((_DWORD *)this + 62);
  if (v21 > 0x3E7 || a3)
  {
    v22 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v22, OS_LOG_TYPE_DEFAULT, "dropping indexes for large import", buf, 2u);
    }

    *((_BYTE *)this + 1513) = 1;
    if (!+[ML3MusicLibrary dropIndexesUsingConnection:tableNames:](ML3MusicLibrary, "dropIndexesUsingConnection:tableNames:", *((_QWORD *)this + 2), "'item', 'item_extra', 'item_stats'"))
    {
      v23 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v23, OS_LOG_TYPE_ERROR, "failed to drop indexes. this is non-fatal for now", buf, 2u);
      }

    }
    v21 = *((_DWORD *)this + 62);
  }
  if (v21 >= 0x15)
  {
    v24 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *((_DWORD *)this + 62);
      *(_DWORD *)buf = 67109120;
      LODWORD(v66) = v25;
      _os_log_impl(&dword_1AC149000, v24, OS_LOG_TYPE_DEFAULT, "disabling triggers for _approximateItemCount=%d", buf, 8u);
    }

    ML3ImportSession::_disableTriggers(this);
  }
  objc_msgSend(*((id *)this + 1), "valueForDatabaseProperty:", CFSTR("MLResetCollectionsOnNextImport"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  *((_BYTE *)this + 1514) = objc_msgSend(v26, "BOOLValue");

  if (*((_BYTE *)this + 1514))
  {
    v27 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v27, OS_LOG_TYPE_DEFAULT, "resetting collection data", buf, 2u);
    }

    objc_msgSend(*((id *)this + 2), "executeUpdate:", CFSTR("UPDATE album SET representative_item_pid=0"));
    objc_msgSend(*((id *)this + 2), "executeUpdate:", CFSTR("UPDATE album_artist SET representative_item_pid=0"));
    objc_msgSend(*((id *)this + 2), "executeUpdate:", CFSTR("UPDATE item_artist SET representative_item_pid=0"));
  }
  if (!a3)
    goto LABEL_36;
  v28 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AC149000, v28, OS_LOG_TYPE_DEFAULT, "preparing for a reset", buf, 2u);
  }

  v29 = *((unsigned int *)this + 8);
  if (!(_DWORD)v29)
  {
LABEL_36:
    v31 = 1;
    goto LABEL_73;
  }
  if ((_DWORD)v29 == 2 && (a4 & 1) != 0)
  {
    v30 = 2;
  }
  else
  {
    ML3ImportSession::_populateExistingTrackIdentifiersForSource(this, v29);
    v30 = *((_DWORD *)this + 8);
  }
  ML3ImportSession::_populateExistingContainerIdentifiersForSource(this, v30);
  if (_os_feature_enabled_impl())
  {
    ML3ImportSession::_populateExistingArtistIdentifiersForSource(this, *((unsigned int *)this + 8));
    ML3ImportSession::_populateExistingAlbumArtistIdentifiersForSource(this, *((unsigned int *)this + 8));
    ML3ImportSession::_populateExistingAlbumIdentifiersForSource(this, *((unsigned int *)this + 8));
  }
  ML3TrackRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  ML3NonQualifiedColumnNameFromProperty(v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  v34 = (void *)*((_QWORD *)this + 2);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE item_store SET %@=0"), v33);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v34, "executeUpdate:", v35);

  if ((v31 & 1) == 0)
  {
    v36 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v36, OS_LOG_TYPE_ERROR, "failed to remove source for tracks - aborting", buf, 2u);
    }

  }
  ML3ContainerRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  ML3NonQualifiedColumnNameFromProperty(v37);
  v38 = (ML3ImportSession *)objc_claimAutoreleasedReturnValue();

  if (v38)
  {
    v39 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v66 = v38;
      _os_log_impl(&dword_1AC149000, v39, OS_LOG_TYPE_DEFAULT, "Clearing containerSourceIdentityProperty=%{public}@", buf, 0xCu);
    }

    v40 = (void *)*((_QWORD *)this + 2);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE container SET %@=0"), v38);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v40) = objc_msgSend(v40, "executeUpdate:", v41);

    if ((v40 & 1) != 0)
    {
      v31 = 1;
    }
    else
    {
      v42 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v42, OS_LOG_TYPE_ERROR, "failed to remove source for containers - aborting", buf, 2u);
      }

      v31 = 0;
    }
  }
  ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  ML3NonQualifiedColumnNameFromProperty(v43);
  v44 = (ML3ImportSession *)objc_claimAutoreleasedReturnValue();

  if (v44)
  {
    v45 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v66 = v44;
      _os_log_impl(&dword_1AC149000, v45, OS_LOG_TYPE_DEFAULT, "Clearing albumArtistSourceIdentityProperty=%{public}@", buf, 0xCu);
    }

    v46 = (void *)*((_QWORD *)this + 2);
    if (*((_DWORD *)this + 8) == 2)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE album_artist SET %@=''"), v44);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = objc_msgSend(v46, "executeUpdate:", v47);

      if ((v48 & 1) != 0)
      {
LABEL_57:
        v31 = 1;
        goto LABEL_62;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE album_artist SET %@=0"), v44);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v50 = objc_msgSend(v46, "executeUpdate:", v49);

      if ((v50 & 1) != 0)
        goto LABEL_57;
    }
    v51 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v66 = v44;
      _os_log_impl(&dword_1AC149000, v51, OS_LOG_TYPE_ERROR, "failed to remove source property=%{public}@ for album artists - aborting", buf, 0xCu);
    }

    v31 = 0;
  }
LABEL_62:
  ML3AlbumRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  ML3NonQualifiedColumnNameFromProperty(v52);
  v53 = (ML3ImportSession *)objc_claimAutoreleasedReturnValue();

  if (v53)
  {
    v54 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v66 = v53;
      _os_log_impl(&dword_1AC149000, v54, OS_LOG_TYPE_DEFAULT, "Clearing albumSourceIdentityProperty=%{public}@", buf, 0xCu);
    }

    v55 = (void *)*((_QWORD *)this + 2);
    if (*((_DWORD *)this + 8) == 2)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE album SET %@=''"), v53);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v57 = objc_msgSend(v55, "executeUpdate:", v56);

      if ((v57 & 1) != 0)
      {
LABEL_67:
        v31 = 1;
        goto LABEL_72;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE album SET %@=0"), v53);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      v59 = objc_msgSend(v55, "executeUpdate:", v58);

      if ((v59 & 1) != 0)
        goto LABEL_67;
    }
    v60 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v66 = v53;
      _os_log_impl(&dword_1AC149000, v60, OS_LOG_TYPE_ERROR, "failed to remove source property=%{public}@ for album - aborting", buf, 0xCu);
    }

    v31 = 0;
  }
LABEL_72:

LABEL_73:
  objc_msgSend(*((id *)this + 8), "executeQuery:", CFSTR("SELECT 1 FROM sort_map WHERE name_order IS NULL"));
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = objc_msgSend(v61, "hasAtLeastOneRow");

  if (v62)
  {
    v63 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v63, OS_LOG_TYPE_DEFAULT, "sort_map contains at least one NULL name_order, updating now...", buf, 2u);
    }

    objc_msgSend(*((id *)this + 1), "updateSortMapOnConnection:forceUpdateOriginals:", *((_QWORD *)this + 2), 0);
  }
  return v31;
}

void sub_1AC333504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_disableTriggers(ML3ImportSession *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint8_t buf[4];
  uint64_t v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  result = objc_msgSend(&unk_1E5BAA9B0, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
  v3 = result;
  if (result)
  {
    v4 = *(_QWORD *)v12;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v12 != v4)
          objc_enumerationMutation(&unk_1E5BAA9B0);
        v6 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v5);
        v7 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          v16 = v6;
          _os_log_impl(&dword_1AC149000, v7, OS_LOG_TYPE_DEFAULT, "dropping trigger: %{public}@", buf, 0xCu);
        }

        v8 = (void *)*((_QWORD *)this + 2);
        objc_msgSend(CFSTR("DROP TRIGGER IF EXISTS "), "stringByAppendingString:", v6);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v8) = objc_msgSend(v8, "executeUpdate:", v9);

        if ((v8 & 1) == 0)
        {
          v10 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1AC149000, v10, OS_LOG_TYPE_ERROR, "failed to drop trigger", buf, 2u);
          }

        }
        ++v5;
      }
      while (v3 != v5);
      result = objc_msgSend(&unk_1E5BAA9B0, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
      v3 = result;
    }
    while (result);
  }
  return result;
}

void sub_1AC3337B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ML3ImportSession::_addTrackDataToSourceMaps(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unint64_t v10;
  uint8_t buf[16];

  v4 = ML3TrackRulesIdentityImportPropertyForSource(*(unsigned int *)(a1 + 32));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v4);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)(*a2 + 8);
    v8 = *(_QWORD *)(a1 + 616) + 40 * *(int *)(a1 + 32);
    v10 = v6;
    std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v8, v6, &v10)[3] = v7;
  }
  else
  {
    v9 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v9, OS_LOG_TYPE_ERROR, "no identity property for track import item", buf, 2u);
    }

  }
}

uint64_t ML3ImportSession::_addItemArtistDataToSourceMaps(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;

  result = ML3ItemArtistRulesIdentityImportPropertyForSource(*(unsigned int *)(a1 + 32));
  if ((_DWORD)result)
  {
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, result);
    v5 = *(_QWORD *)(*a2 + 8);
    result = (uint64_t)std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 1640, v6, &v6);
    *(_QWORD *)(result + 24) = v5;
  }
  return result;
}

void ML3ImportSession::_addAlbumArtistDataToSourceMaps(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7[2];
  std::string __p;
  std::string v9;

  v4 = ML3AlbumArtistRulesIdentityImportPropertyForSource(*(unsigned int *)(a1 + 32));
  if ((_DWORD)v4)
  {
    if (*(_DWORD *)(a1 + 32) == 2)
    {
      (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)*a2 + 24))(v7);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        v7[0] = (__int128 *)off_1E5B4D010;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v9 = __p;
      }
      v6 = *(_QWORD *)(*a2 + 8);
      v7[0] = (__int128 *)&v9;
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 1920, (unsigned __int8 *)&v9, v7)+ 5) = v6;
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
    }
    else
    {
      v7[0] = (__int128 *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v4);
      v5 = *(_QWORD *)(*a2 + 8);
      std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 1880, (unint64_t)v7[0], v7)[3] = v5;
    }
  }
}

void sub_1AC333A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ML3ImportSession::_addAlbumDataToSourceMaps(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7[2];
  std::string __p;
  std::string v9;

  v4 = ML3AlbumRulesIdentityImportPropertyForSource(*(unsigned int *)(a1 + 32));
  if (*(_DWORD *)(a1 + 32) == 2)
  {
    (*(void (**)(__int128 **__return_ptr))(*(_QWORD *)*a2 + 24))(v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v7[0] = (__int128 *)off_1E5B4D010;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v9 = __p;
    }
    v6 = *(_QWORD *)(*a2 + 8);
    v7[0] = (__int128 *)&v9;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2128, (unsigned __int8 *)&v9, v7)+ 5) = v6;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
  else
  {
    v7[0] = (__int128 *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, v4);
    v5 = *(_QWORD *)(*a2 + 8);
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 2088, (unint64_t)v7[0], v7)[3] = v5;
  }
}

void sub_1AC333B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportSession::_prepareTrackForImport(uint64_t a1, uint64_t *a2, int a3, char a4)
{
  BOOL v4;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t TrackPersistentID;
  unint64_t *v12;
  unint64_t v13;
  uint64_t result;
  NSObject *v15;
  void **v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  void *__p[2];
  char v32;
  _QWORD v33[2];
  uint8_t buf[4];
  void **v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*a2 + 8))
    v4 = a3 == 0;
  else
    v4 = 0;
  if (v4)
    return 0;
  v8 = (std::__shared_weak_count *)a2[1];
  v33[0] = *a2;
  v33[1] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  TrackPersistentID = ML3ImportSession::_getTrackPersistentID(a1, v33);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (!TrackPersistentID && (a4 & 1) != 0)
    return 2;
  if (!TrackPersistentID || (a4 & 1) != 0)
  {
LABEL_35:
    v22 = TrackPersistentID != 0;
    if (!TrackPersistentID)
    {
      v23 = *a2;
      v24 = (std::__shared_weak_count *)a2[1];
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      TrackPersistentID = ML3ImportSession::_newTrackPersistentID(*(void **)(a1 + 72), v23, v24);
      if (v24)
      {
        v27 = (unint64_t *)&v24->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    goto LABEL_45;
  }
  if (std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 576), TrackPersistentID))
  {
    v15 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 88))(__p);
      v16 = v32 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v35 = v16;
      _os_log_impl(&dword_1AC149000, v15, OS_LOG_TYPE_DEFAULT, "PID collision detected for track=%{public}s", buf, 0xCu);
      if (v32 < 0)
        operator delete(__p[0]);
    }

    if (!ML3ImportSession::flush((ML3ImportSession *)a1, 1))
      return 1;
    v17 = (std::__shared_weak_count *)a2[1];
    v30[0] = *a2;
    v30[1] = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    TrackPersistentID = ML3ImportSession::_getTrackPersistentID(a1, v30);
    if (v17)
    {
      v20 = (unint64_t *)&v17->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    goto LABEL_35;
  }
  v22 = TrackPersistentID != 0;
LABEL_45:
  result = 0;
  v29 = *a2;
  *(_BYTE *)(v29 + 16) = v22;
  *(_QWORD *)(v29 + 8) = TrackPersistentID;
  return result;
}

void sub_1AC333E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::flush(ML3ImportSession *this, int a2)
{
  NSObject *v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  __int128 v32;
  int64x2_t v33;
  char *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char v40;
  char v41;
  unint64_t *v42;
  unint64_t v43;
  char updated;
  NSObject *v45;
  unint64_t v46;
  int v47;
  char v48;
  NSObject *v49;
  void *v50;
  void *v51;
  unint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *j;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t *v63;
  unint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  char *v78;
  __int128 v79;
  int64x2_t v80;
  char *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  char v87;
  char v88;
  unint64_t *v89;
  unint64_t v90;
  char v91;
  NSObject *v92;
  unint64_t v93;
  __int128 v94;
  int v95;
  char v96;
  NSObject *v97;
  void *v98;
  void *v99;
  unint64_t v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *k;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  unint64_t *v111;
  unint64_t v112;
  _OWORD *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  char *v126;
  __int128 v127;
  int64x2_t v128;
  char *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  char v135;
  char v136;
  unint64_t *v137;
  unint64_t v138;
  char v139;
  NSObject *v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  char v148;
  char v149;
  unint64_t *v150;
  unint64_t v151;
  char v152;
  NSObject *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  NSObject *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  char v163;
  char v164;
  unint64_t *v165;
  unint64_t v166;
  char v167;
  NSObject *v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  uint64_t v172;
  char v173;
  char v174;
  NSObject *v175;
  uint64_t v176;
  uint64_t v177;
  NSObject *v178;
  uint64_t v179;
  char v180;
  char v181;
  NSObject *v182;
  uint64_t v183;
  uint64_t v184;
  NSObject *v185;
  uint64_t v186;
  BOOL v187;
  NSObject *v188;
  _QWORD *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  NSObject *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  char v199;
  id v200;
  NSObject *v201;
  _QWORD *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  NSObject *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  char v212;
  id v213;
  NSObject *v214;
  _QWORD *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  NSObject *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  char v225;
  id v226;
  NSObject *v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  NSObject *v232;
  void *v233;
  void *v234;
  void *v235;
  void *v236;
  void *v237;
  char v238;
  id v239;
  NSObject *v240;
  NSObject *v241;
  uint64_t v242;
  char v243;
  char v244;
  NSObject *v245;
  uint64_t v246;
  uint64_t v247;
  NSObject *v248;
  uint64_t v249;
  char v250;
  char v251;
  NSObject *v252;
  uint64_t v253;
  uint64_t v254;
  NSObject *v255;
  uint64_t v256;
  char v257;
  NSObject *v258;
  uint64_t v259;
  uint64_t v260;
  NSObject *v261;
  uint64_t v262;
  char v263;
  NSObject *v264;
  uint64_t v265;
  uint64_t v266;
  NSObject *v267;
  uint64_t v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  std::__shared_weak_count *v272;
  unint64_t v273;
  unint64_t *p_shared_weak_owners;
  unint64_t v275;
  unint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  _QWORD *v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  NSObject *v285;
  NSObject *v286;
  uint64_t v287;
  uint64_t v288;
  NSObject *v289;
  uint64_t v290;
  void *v291;
  _QWORD *m;
  void *v293;
  void *v294;
  void *v295;
  void *v296;
  char v297;
  id v298;
  void *v299;
  NSObject *v300;
  NSObject *v301;
  uint64_t v302;
  uint64_t n;
  _QWORD *v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t ii;
  _QWORD *v308;
  _QWORD *v309;
  uint64_t v310;
  __int128 v312;
  id v313;
  id v314;
  id v315;
  id v316;
  _QWORD v317[2];
  _QWORD v318[2];
  _QWORD v319[2];
  _QWORD v320[6];
  _QWORD v321[2];
  _QWORD v322[6];
  _QWORD v323[2];
  uint8_t v324[16];
  char *v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  char v329;
  _QWORD v330[3];
  _QWORD v331[3];
  _QWORD v332[3];
  _QWORD v333[3];
  uint64_t v334;
  __int128 v335;
  uint8_t buf[24];
  char *v337;
  char **v338;
  uint64_t v339;

  v339 = *MEMORY[0x1E0C80C00];
  v326 = 0;
  v327 = &v326;
  v328 = 0x2020000000;
  v329 = 1;
  v4 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_1AC149000, v4, OS_LOG_TYPE_DEFAULT, "starting to flush (all=%{BOOL}u)", buf, 8u);
  }

  v5 = *((_QWORD *)this + 258);
  if (a2)
  {
    if (v5)
      goto LABEL_8;
  }
  else if (v5 > 0x3E7)
  {
    goto LABEL_8;
  }
  if (!*((_QWORD *)this + 253))
    goto LABEL_57;
LABEL_8:
  v6 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((_QWORD *)this + 258);
    v8 = *((_QWORD *)this + 253);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v8;
    _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_DEFAULT, "flushing %u album artist insertions (_updatedAlbumArtistNameOrder size=%u)", buf, 0xEu);
  }

  memset(v324, 0, sizeof(v324));
  v325 = 0;
  std::vector<std::shared_ptr<ML3ImportItem>>::reserve(v324, *((_QWORD *)this + 258));
  for (i = (_QWORD *)*((_QWORD *)this + 257); i; i = (_QWORD *)*i)
  {
    v10 = i[3];
    v334 = i[2];
    *(_QWORD *)&v335 = v10;
    v11 = (std::__shared_weak_count *)i[4];
    *((_QWORD *)&v335 + 1) = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = *(_QWORD *)&v324[8];
      v15 = v325;
      if (*(_QWORD *)&v324[8] >= (unint64_t)v325)
      {
LABEL_21:
        v19 = (v14 - *(_QWORD *)v324) >> 4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60)
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        v21 = (uint64_t)&v15[-*(_QWORD *)v324];
        if (v21 >> 3 > v20)
          v20 = v21 >> 3;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
          v22 = 0xFFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        v338 = &v325;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v22);
        v25 = &v23[16 * v19];
        v26 = *((_QWORD *)&v335 + 1);
        *(_OWORD *)v25 = v335;
        if (v26)
        {
          v27 = (unint64_t *)(v26 + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v30 = *(_QWORD **)v324;
        v29 = *(_QWORD **)&v324[8];
        if (*(_QWORD *)&v324[8] == *(_QWORD *)v324)
        {
          v33 = vdupq_n_s64(*(unint64_t *)&v324[8]);
          v31 = &v23[16 * v19];
        }
        else
        {
          v31 = &v23[16 * v19];
          do
          {
            v32 = *((_OWORD *)v29 - 1);
            v29 -= 2;
            *((_OWORD *)v31 - 1) = v32;
            v31 -= 16;
            *v29 = 0;
            v29[1] = 0;
          }
          while (v29 != v30);
          v33 = *(int64x2_t *)v324;
        }
        v18 = v25 + 16;
        *(_QWORD *)v324 = v31;
        *(_QWORD *)&v324[8] = v25 + 16;
        *(int64x2_t *)&buf[8] = v33;
        v34 = v325;
        v325 = &v23[16 * v24];
        v337 = v34;
        *(_QWORD *)buf = v33.i64[0];
        std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
        v11 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
        goto LABEL_36;
      }
      **(_QWORD **)&v324[8] = v335;
      *(_QWORD *)(v14 + 8) = v11;
      v16 = (unint64_t *)&v11->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    else
    {
      v14 = *(_QWORD *)&v324[8];
      v15 = v325;
      if (*(_QWORD *)&v324[8] >= (unint64_t)v325)
        goto LABEL_21;
      **(_QWORD **)&v324[8] = v335;
      *(_QWORD *)(v14 + 8) = 0;
    }
    v18 = (_OWORD *)(v14 + 16);
LABEL_36:
    *(_QWORD *)&v324[8] = v18;
    if (v11)
    {
      v35 = (unint64_t *)&v11->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!*((_BYTE *)v327 + 24))
    goto LABEL_51;
  v37 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  v323[0] = *((_QWORD *)this + 34);
  v323[1] = v37;
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = ML3ImportSession::_flushCollectionImportItems((uint64_t)this, (uint64_t **)v324, (uint64_t)v323);
  v41 = v40;
  *((_BYTE *)v327 + 24) = v40;
  if (v37)
  {
    v42 = (unint64_t *)&v37->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      if ((v41 & 1) != 0)
        goto LABEL_51;
LABEL_53:
      v45 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v45, OS_LOG_TYPE_ERROR, "failed to import added album artists", buf, 2u);
      }

      goto LABEL_56;
    }
  }
  if ((v40 & 1) == 0)
    goto LABEL_53;
LABEL_51:
  updated = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)v324, +[ML3AlbumArtist revisionTrackingCode](ML3AlbumArtist, "revisionTrackingCode"));
  *((_BYTE *)v327 + 24) = updated;
LABEL_56:
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear((uint64_t)this + 2040);
  *(_QWORD *)buf = v324;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_57:
  v46 = objc_msgSend(*((id *)this + 260), "count");
  v47 = v46;
  if (v46)
    v48 = a2;
  else
    v48 = 0;
  if ((v48 & 1) != 0 || v46 >= 0x3E8)
  {
    v49 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v47;
      _os_log_impl(&dword_1AC149000, v49, OS_LOG_TYPE_DEFAULT, "flushing %u album artist deletions", buf, 8u);
    }

    ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v50, "length"))
    {
      v51 = (void *)*((_QWORD *)this + 260);
      v322[0] = MEMORY[0x1E0C809B0];
      v322[1] = 3221225472;
      v322[2] = ___ZN16ML3ImportSession5flushEb_block_invoke;
      v322[3] = &unk_1E5B64F18;
      v322[4] = &v326;
      v322[5] = this;
      objc_msgSend(v51, "enumerateObjectsUsingBlock:", v322);
    }
    objc_msgSend(*((id *)this + 260), "removeAllObjects");

  }
  v52 = *((_QWORD *)this + 284);
  if (a2)
  {
    if (v52)
      goto LABEL_72;
  }
  else if (v52 > 0x3E7)
  {
    goto LABEL_72;
  }
  if (!*((_QWORD *)this + 279))
    goto LABEL_121;
LABEL_72:
  v53 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
  {
    v54 = *((_QWORD *)this + 284);
    v55 = *((_QWORD *)this + 279);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v54;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v55;
    _os_log_impl(&dword_1AC149000, v53, OS_LOG_TYPE_DEFAULT, "flushing %u album insertions (_updatedAlbumNameOrder size=%u)", buf, 0xEu);
  }

  memset(v324, 0, sizeof(v324));
  v325 = 0;
  std::vector<std::shared_ptr<ML3ImportItem>>::reserve(v324, *((_QWORD *)this + 284));
  for (j = (_QWORD *)*((_QWORD *)this + 283); j; j = (_QWORD *)*j)
  {
    v57 = j[3];
    v334 = j[2];
    *(_QWORD *)&v335 = v57;
    v58 = (std::__shared_weak_count *)j[4];
    *((_QWORD *)&v335 + 1) = v58;
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
      v61 = *(_QWORD *)&v324[8];
      v62 = v325;
      if (*(_QWORD *)&v324[8] >= (unint64_t)v325)
      {
LABEL_85:
        v66 = (v61 - *(_QWORD *)v324) >> 4;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 60)
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        v68 = (uint64_t)&v62[-*(_QWORD *)v324];
        if (v68 >> 3 > v67)
          v67 = v68 >> 3;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0)
          v69 = 0xFFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        v338 = &v325;
        v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v69);
        v72 = &v70[16 * v66];
        v73 = *((_QWORD *)&v335 + 1);
        *(_OWORD *)v72 = v335;
        if (v73)
        {
          v74 = (unint64_t *)(v73 + 8);
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        v77 = *(_QWORD **)v324;
        v76 = *(_QWORD **)&v324[8];
        if (*(_QWORD *)&v324[8] == *(_QWORD *)v324)
        {
          v80 = vdupq_n_s64(*(unint64_t *)&v324[8]);
          v78 = &v70[16 * v66];
        }
        else
        {
          v78 = &v70[16 * v66];
          do
          {
            v79 = *((_OWORD *)v76 - 1);
            v76 -= 2;
            *((_OWORD *)v78 - 1) = v79;
            v78 -= 16;
            *v76 = 0;
            v76[1] = 0;
          }
          while (v76 != v77);
          v80 = *(int64x2_t *)v324;
        }
        v65 = v72 + 16;
        *(_QWORD *)v324 = v78;
        *(_QWORD *)&v324[8] = v72 + 16;
        *(int64x2_t *)&buf[8] = v80;
        v81 = v325;
        v325 = &v70[16 * v71];
        v337 = v81;
        *(_QWORD *)buf = v80.i64[0];
        std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
        v58 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
        goto LABEL_100;
      }
      **(_QWORD **)&v324[8] = v335;
      *(_QWORD *)(v61 + 8) = v58;
      v63 = (unint64_t *)&v58->__shared_owners_;
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
    else
    {
      v61 = *(_QWORD *)&v324[8];
      v62 = v325;
      if (*(_QWORD *)&v324[8] >= (unint64_t)v325)
        goto LABEL_85;
      **(_QWORD **)&v324[8] = v335;
      *(_QWORD *)(v61 + 8) = 0;
    }
    v65 = (_OWORD *)(v61 + 16);
LABEL_100:
    *(_QWORD *)&v324[8] = v65;
    if (v58)
    {
      v82 = (unint64_t *)&v58->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
  if (!*((_BYTE *)v327 + 24))
    goto LABEL_115;
  v84 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  v321[0] = *((_QWORD *)this + 32);
  v321[1] = v84;
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  v87 = ML3ImportSession::_flushCollectionImportItems((uint64_t)this, (uint64_t **)v324, (uint64_t)v321);
  v88 = v87;
  *((_BYTE *)v327 + 24) = v87;
  if (v84)
  {
    v89 = (unint64_t *)&v84->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
      if ((v88 & 1) != 0)
        goto LABEL_115;
LABEL_117:
      v92 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v92, OS_LOG_TYPE_ERROR, "failed to import added albums", buf, 2u);
      }

      goto LABEL_120;
    }
  }
  if ((v87 & 1) == 0)
    goto LABEL_117;
LABEL_115:
  v91 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)v324, +[ML3Album revisionTrackingCode](ML3Album, "revisionTrackingCode"));
  *((_BYTE *)v327 + 24) = v91;
LABEL_120:
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear((uint64_t)this + 2248);
  *(_QWORD *)buf = v324;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_121:
  v93 = objc_msgSend(*((id *)this + 286), "count");
  v95 = v93;
  if (v93)
    v96 = a2;
  else
    v96 = 0;
  if ((v96 & 1) != 0 || v93 >= 0x3E8)
  {
    v97 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v95;
      _os_log_impl(&dword_1AC149000, v97, OS_LOG_TYPE_DEFAULT, "flushing %u album deletions", buf, 8u);
    }

    ML3AlbumRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v98, "length"))
    {
      v99 = (void *)*((_QWORD *)this + 286);
      v320[0] = MEMORY[0x1E0C809B0];
      v320[1] = 3221225472;
      v320[2] = ___ZN16ML3ImportSession5flushEb_block_invoke_89;
      v320[3] = &unk_1E5B64F18;
      v320[4] = &v326;
      v320[5] = this;
      objc_msgSend(v99, "enumerateObjectsUsingBlock:", v320);
    }
    objc_msgSend(*((id *)this + 286), "removeAllObjects");

  }
  v100 = *((_QWORD *)this + 233);
  if (a2)
  {
    if (v100)
      goto LABEL_136;
  }
  else if (v100 > 0x3E7)
  {
    goto LABEL_136;
  }
  if (!*((_QWORD *)this + 218))
    goto LABEL_185;
LABEL_136:
  v101 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
  {
    v102 = *((_QWORD *)this + 233);
    v103 = *((_QWORD *)this + 218);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v102;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v103;
    _os_log_impl(&dword_1AC149000, v101, OS_LOG_TYPE_DEFAULT, "flushing %u artist insertions (_updatedArtistNameOrder size=%u)", buf, 0xEu);
  }

  memset(v324, 0, sizeof(v324));
  v325 = 0;
  std::vector<std::shared_ptr<ML3ImportItem>>::reserve(v324, *((_QWORD *)this + 233));
  for (k = (_QWORD *)*((_QWORD *)this + 232); k; k = (_QWORD *)*k)
  {
    v105 = k[3];
    v334 = k[2];
    *(_QWORD *)&v335 = v105;
    v106 = (std::__shared_weak_count *)k[4];
    *((_QWORD *)&v335 + 1) = v106;
    if (v106)
    {
      v107 = (unint64_t *)&v106->__shared_owners_;
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
      v109 = *(_QWORD *)&v324[8];
      v110 = v325;
      if (*(_QWORD *)&v324[8] >= (unint64_t)v325)
      {
LABEL_149:
        v114 = (v109 - *(_QWORD *)v324) >> 4;
        v115 = v114 + 1;
        if ((unint64_t)(v114 + 1) >> 60)
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        v116 = (uint64_t)&v110[-*(_QWORD *)v324];
        if (v116 >> 3 > v115)
          v115 = v116 >> 3;
        if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF0)
          v117 = 0xFFFFFFFFFFFFFFFLL;
        else
          v117 = v115;
        v338 = &v325;
        v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v117);
        v120 = &v118[16 * v114];
        v121 = *((_QWORD *)&v335 + 1);
        *(_OWORD *)v120 = v335;
        if (v121)
        {
          v122 = (unint64_t *)(v121 + 8);
          do
            v123 = __ldxr(v122);
          while (__stxr(v123 + 1, v122));
        }
        v125 = *(_QWORD **)v324;
        v124 = *(_QWORD **)&v324[8];
        if (*(_QWORD *)&v324[8] == *(_QWORD *)v324)
        {
          v128 = vdupq_n_s64(*(unint64_t *)&v324[8]);
          v126 = &v118[16 * v114];
        }
        else
        {
          v126 = &v118[16 * v114];
          do
          {
            v127 = *((_OWORD *)v124 - 1);
            v124 -= 2;
            *((_OWORD *)v126 - 1) = v127;
            v126 -= 16;
            *v124 = 0;
            v124[1] = 0;
          }
          while (v124 != v125);
          v128 = *(int64x2_t *)v324;
        }
        v113 = v120 + 16;
        *(_QWORD *)v324 = v126;
        *(_QWORD *)&v324[8] = v120 + 16;
        *(int64x2_t *)&buf[8] = v128;
        v129 = v325;
        v325 = &v118[16 * v119];
        v337 = v129;
        *(_QWORD *)buf = v128.i64[0];
        std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
        v106 = (std::__shared_weak_count *)*((_QWORD *)&v335 + 1);
        goto LABEL_164;
      }
      **(_QWORD **)&v324[8] = v335;
      *(_QWORD *)(v109 + 8) = v106;
      v111 = (unint64_t *)&v106->__shared_owners_;
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 1, v111));
    }
    else
    {
      v109 = *(_QWORD *)&v324[8];
      v110 = v325;
      if (*(_QWORD *)&v324[8] >= (unint64_t)v325)
        goto LABEL_149;
      **(_QWORD **)&v324[8] = v335;
      *(_QWORD *)(v109 + 8) = 0;
    }
    v113 = (_OWORD *)(v109 + 16);
LABEL_164:
    *(_QWORD *)&v324[8] = v113;
    if (v106)
    {
      v130 = (unint64_t *)&v106->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
  }
  if (!*((_BYTE *)v327 + 24))
    goto LABEL_179;
  v132 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  v319[0] = *((_QWORD *)this + 36);
  v319[1] = v132;
  if (v132)
  {
    v133 = (unint64_t *)&v132->__shared_owners_;
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
  }
  v135 = ML3ImportSession::_flushCollectionImportItems((uint64_t)this, (uint64_t **)v324, (uint64_t)v319);
  v136 = v135;
  *((_BYTE *)v327 + 24) = v135;
  if (v132)
  {
    v137 = (unint64_t *)&v132->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
      if ((v136 & 1) != 0)
        goto LABEL_179;
LABEL_181:
      v140 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v140, OS_LOG_TYPE_ERROR, "failed to import added artists", buf, 2u);
      }

      goto LABEL_184;
    }
  }
  if ((v135 & 1) == 0)
    goto LABEL_181;
LABEL_179:
  v139 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)v324, +[ML3Artist revisionTrackingCode](ML3Artist, "revisionTrackingCode"));
  *((_BYTE *)v327 + 24) = v139;
LABEL_184:
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear((uint64_t)this + 1840);
  *(_QWORD *)buf = v324;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_185:
  if ((a2 & 1) != 0)
  {
    v141 = *((_QWORD *)this + 200);
    if (v141 != *((_QWORD *)this + 199))
      goto LABEL_190;
    v142 = *((_QWORD *)this + 200);
  }
  else
  {
    v142 = *((_QWORD *)this + 200);
    v141 = *((_QWORD *)this + 199);
  }
  if ((unint64_t)(v142 - v141) < 0x3E71)
    goto LABEL_210;
LABEL_190:
  v143 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
  {
    v144 = (*((_QWORD *)this + 200) - *((_QWORD *)this + 199)) >> 4;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v144;
    _os_log_impl(&dword_1AC149000, v143, OS_LOG_TYPE_DEFAULT, "flushing %u composer insertions", buf, 8u);
  }

  if (!*((_BYTE *)v327 + 24))
    goto LABEL_201;
  v145 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  v318[0] = *((_QWORD *)this + 38);
  v318[1] = v145;
  if (v145)
  {
    v146 = (unint64_t *)&v145->__shared_owners_;
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
  }
  v148 = ML3ImportSession::_flushCollectionImportItems((uint64_t)this, (uint64_t **)this + 199, (uint64_t)v318);
  v149 = v148;
  *((_BYTE *)v327 + 24) = v148;
  if (v145)
  {
    v150 = (unint64_t *)&v145->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
      if ((v149 & 1) != 0)
        goto LABEL_201;
LABEL_203:
      v153 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v153, OS_LOG_TYPE_ERROR, "failed to import added composers", buf, 2u);
      }

      goto LABEL_206;
    }
  }
  if ((v148 & 1) == 0)
    goto LABEL_203;
LABEL_201:
  v152 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)this + 199, +[ML3Composer revisionTrackingCode](ML3Composer, "revisionTrackingCode"));
  *((_BYTE *)v327 + 24) = v152;
LABEL_206:
  v154 = *((_QWORD *)this + 200);
  v155 = *((_QWORD *)this + 199);
  while (v154 != v155)
    v154 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v154 - 16);
  *((_QWORD *)this + 200) = v155;
LABEL_210:
  if ((a2 & 1) != 0)
  {
    v156 = *((_QWORD *)this + 203);
    if (v156 != *((_QWORD *)this + 202))
      goto LABEL_215;
    v157 = *((_QWORD *)this + 203);
  }
  else
  {
    v157 = *((_QWORD *)this + 203);
    v156 = *((_QWORD *)this + 202);
  }
  if ((unint64_t)(v157 - v156) < 0x3E71)
    goto LABEL_235;
LABEL_215:
  v158 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
  {
    v159 = (*((_QWORD *)this + 203) - *((_QWORD *)this + 202)) >> 4;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v159;
    _os_log_impl(&dword_1AC149000, v158, OS_LOG_TYPE_DEFAULT, "flushing %u genre insertions", buf, 8u);
  }

  if (!*((_BYTE *)v327 + 24))
    goto LABEL_226;
  v160 = (std::__shared_weak_count *)*((_QWORD *)this + 41);
  v317[0] = *((_QWORD *)this + 40);
  v317[1] = v160;
  if (v160)
  {
    v161 = (unint64_t *)&v160->__shared_owners_;
    do
      v162 = __ldxr(v161);
    while (__stxr(v162 + 1, v161));
  }
  v163 = ML3ImportSession::_flushCollectionImportItems((uint64_t)this, (uint64_t **)this + 202, (uint64_t)v317);
  v164 = v163;
  *((_BYTE *)v327 + 24) = v163;
  if (v160)
  {
    v165 = (unint64_t *)&v160->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
      if ((v164 & 1) != 0)
        goto LABEL_226;
LABEL_228:
      v168 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v168, OS_LOG_TYPE_ERROR, "failed to import added genres", buf, 2u);
      }

      goto LABEL_231;
    }
  }
  if ((v163 & 1) == 0)
    goto LABEL_228;
LABEL_226:
  v167 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)this + 202, +[ML3Genre revisionTrackingCode](ML3Genre, "revisionTrackingCode"));
  *((_BYTE *)v327 + 24) = v167;
LABEL_231:
  v169 = *((_QWORD *)this + 203);
  v170 = *((_QWORD *)this + 202);
  while (v169 != v170)
    v169 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v169 - 16);
  *((_QWORD *)this + 203) = v170;
LABEL_235:
  if (*((_QWORD *)this + 192) != *((_QWORD *)this + 191))
  {
    v171 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
    {
      v172 = (*((_QWORD *)this + 192) - *((_QWORD *)this + 191)) >> 4;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v172;
      _os_log_impl(&dword_1AC149000, v171, OS_LOG_TYPE_DEFAULT, "flushing %u track insertions", buf, 8u);
    }

    if (*((_BYTE *)v327 + 24)
      && (v173 = ML3ImportSession::_flushTrackImportItems((uint64_t)this, (uint64_t **)this + 191),
          *((_BYTE *)v327 + 24) = v173,
          (v173 & 1) == 0))
    {
      v175 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v175, OS_LOG_TYPE_ERROR, "failed to import added tracks", buf, 2u);
      }

    }
    else
    {
      v174 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)this + 191, +[ML3Track revisionTrackingCode](ML3Track, "revisionTrackingCode"));
      *((_BYTE *)v327 + 24) = v174;
    }
    v176 = *((_QWORD *)this + 192);
    v177 = *((_QWORD *)this + 191);
    while (v176 != v177)
      v176 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v176 - 16);
    *((_QWORD *)this + 192) = v177;
  }
  if (*((_BYTE *)v327 + 24))
  {
    if (*((_QWORD *)this + 195) == *((_QWORD *)this + 194))
      goto LABEL_434;
    v178 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
    {
      v179 = (*((_QWORD *)this + 195) - *((_QWORD *)this + 194)) >> 4;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v179;
      _os_log_impl(&dword_1AC149000, v178, OS_LOG_TYPE_DEFAULT, "flushing %u track updates", buf, 8u);
    }

    v180 = ML3ImportSession::_flushTrackImportItems((uint64_t)this, (uint64_t **)this + 194);
    *((_BYTE *)v327 + 24) = v180;
    if ((v180 & 1) != 0)
    {
      v181 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)this + 194, +[ML3Track revisionTrackingCode](ML3Track, "revisionTrackingCode"));
      *((_BYTE *)v327 + 24) = v181;
    }
    else
    {
      v182 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v182, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v182, OS_LOG_TYPE_ERROR, "failed to import added tracks", buf, 2u);
      }

    }
    v183 = *((_QWORD *)this + 195);
    v184 = *((_QWORD *)this + 194);
    while (v183 != v184)
      v183 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v183 - 16);
    *((_QWORD *)this + 195) = v184;
    if (*((_BYTE *)v327 + 24))
    {
LABEL_434:
      if (objc_msgSend(*((id *)this + 197), "count"))
      {
        v185 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
        {
          v186 = objc_msgSend(*((id *)this + 197), "count");
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v186;
          _os_log_impl(&dword_1AC149000, v185, OS_LOG_TYPE_DEFAULT, "flushing %lu track deletes", buf, 0xCu);
        }

        v187 = ML3ImportSession::_removeTracksFromLibrary(this, *((NSArray **)this + 197));
        *((_BYTE *)v327 + 24) = v187;
        if (!v187)
        {
          v188 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1AC149000, v188, OS_LOG_TYPE_ERROR, "failed to process deletes", buf, 2u);
          }

        }
        objc_msgSend(*((id *)this + 197), "removeAllObjects");
      }
    }
  }
  if (!*((_BYTE *)v327 + 24))
    goto LABEL_413;
  if (*((_QWORD *)this + 253))
  {
    v189 = (_QWORD *)*((_QWORD *)this + 252);
    if (v189)
    {
      *(_QWORD *)&v94 = 134218496;
      v312 = v94;
      while (1)
      {
        v190 = v189[2];
        v191 = (char *)v189[3];
        v192 = v189[4];
        v193 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v193, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v312;
          *(_QWORD *)&buf[4] = v190;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v192;
          *(_WORD *)&buf[22] = 2048;
          v337 = v191;
          _os_log_impl(&dword_1AC149000, v193, OS_LOG_TYPE_DEFAULT, "updating album artist name order of trackPID=%lld to order.section=%ld, order.sortOrder=%lld", buf, 0x20u);
        }

        v194 = (void *)*((_QWORD *)this + 2);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v191);
        v195 = (void *)objc_claimAutoreleasedReturnValue();
        v333[0] = v195;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v192);
        v196 = (void *)objc_claimAutoreleasedReturnValue();
        v333[1] = v196;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v190);
        v197 = (void *)objc_claimAutoreleasedReturnValue();
        v333[2] = v197;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v333, 3);
        v198 = (void *)objc_claimAutoreleasedReturnValue();
        v316 = 0;
        v199 = objc_msgSend(v194, "executeUpdate:withParameters:error:", CFSTR("UPDATE item SET album_artist_order=?, album_artist_order_section=? WHERE album_artist_pid=?"), v198, &v316);
        v200 = v316;

        if ((v199 & 1) == 0)
          break;

        v189 = (_QWORD *)*v189;
        if (!v189)
          goto LABEL_281;
      }
      v201 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = v190;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v200;
        _os_log_impl(&dword_1AC149000, v201, OS_LOG_TYPE_ERROR, "Failed to update name order of tracks with album_artist_pid=%lld, error=%{public}@", buf, 0x16u);
      }

      *((_BYTE *)v327 + 24) = 0;
    }
LABEL_281:
    std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::clear((_QWORD *)this + 250);
    if (!*((_BYTE *)v327 + 24))
      goto LABEL_413;
  }
  if (*((_QWORD *)this + 218))
  {
    v202 = (_QWORD *)*((_QWORD *)this + 217);
    if (v202)
    {
      *(_QWORD *)&v94 = 134218496;
      v312 = v94;
      while (1)
      {
        v203 = v202[2];
        v204 = (char *)v202[3];
        v205 = v202[4];
        v206 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v206, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v312;
          *(_QWORD *)&buf[4] = v203;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v205;
          *(_WORD *)&buf[22] = 2048;
          v337 = v204;
          _os_log_impl(&dword_1AC149000, v206, OS_LOG_TYPE_DEFAULT, "updating item artist name order of trackPID=%lld to order.section=%ld, order.sortOrder=%lld", buf, 0x20u);
        }

        v207 = (void *)*((_QWORD *)this + 2);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v204);
        v208 = (void *)objc_claimAutoreleasedReturnValue();
        v332[0] = v208;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v205);
        v209 = (void *)objc_claimAutoreleasedReturnValue();
        v332[1] = v209;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v203);
        v210 = (void *)objc_claimAutoreleasedReturnValue();
        v332[2] = v210;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v332, 3);
        v211 = (void *)objc_claimAutoreleasedReturnValue();
        v315 = 0;
        v212 = objc_msgSend(v207, "executeUpdate:withParameters:error:", CFSTR("UPDATE item SET item_artist_order=?, item_artist_order_section=? WHERE item_artist_pid=?"), v211, &v315);
        v213 = v315;

        if ((v212 & 1) == 0)
          break;

        v202 = (_QWORD *)*v202;
        if (!v202)
          goto LABEL_293;
      }
      v214 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = v203;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v213;
        _os_log_impl(&dword_1AC149000, v214, OS_LOG_TYPE_ERROR, "Failed to update name order of tracks with item_artist_pid=%lld, error=%{public}@", buf, 0x16u);
      }

      *((_BYTE *)v327 + 24) = 0;
    }
LABEL_293:
    std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::clear((_QWORD *)this + 215);
    if (!*((_BYTE *)v327 + 24))
      goto LABEL_413;
  }
  if (*((_QWORD *)this + 228))
  {
    v215 = (_QWORD *)*((_QWORD *)this + 227);
    if (v215)
    {
      *(_QWORD *)&v94 = 134218496;
      v312 = v94;
      while (1)
      {
        v216 = v215[2];
        v217 = (char *)v215[3];
        v218 = v215[4];
        v219 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v219, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v312;
          *(_QWORD *)&buf[4] = v216;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v218;
          *(_WORD *)&buf[22] = 2048;
          v337 = v217;
          _os_log_impl(&dword_1AC149000, v219, OS_LOG_TYPE_DEFAULT, "updating item artist series order of trackPID=%lld to order.section=%ld, order.sortOrder=%lld", buf, 0x20u);
        }

        v220 = (void *)*((_QWORD *)this + 2);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v217);
        v221 = (void *)objc_claimAutoreleasedReturnValue();
        v331[0] = v221;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v218);
        v222 = (void *)objc_claimAutoreleasedReturnValue();
        v331[1] = v222;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v216);
        v223 = (void *)objc_claimAutoreleasedReturnValue();
        v331[2] = v223;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v331, 3);
        v224 = (void *)objc_claimAutoreleasedReturnValue();
        v314 = 0;
        v225 = objc_msgSend(v220, "executeUpdate:withParameters:error:", CFSTR("UPDATE item SET series_name_order=?, series_name_order_section=? WHERE item_artist_pid=?"), v224, &v314);
        v226 = v314;

        if ((v225 & 1) == 0)
          break;

        v215 = (_QWORD *)*v215;
        if (!v215)
          goto LABEL_305;
      }
      v227 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v227, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = v216;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v226;
        _os_log_impl(&dword_1AC149000, v227, OS_LOG_TYPE_ERROR, "Failed to update name order of tracks with item_artist_pid=%lld, error=%{public}@", buf, 0x16u);
      }

      *((_BYTE *)v327 + 24) = 0;
    }
LABEL_305:
    std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::clear((_QWORD *)this + 225);
    if (!*((_BYTE *)v327 + 24))
      goto LABEL_413;
  }
  if (*((_QWORD *)this + 279))
  {
    v228 = (_QWORD *)*((_QWORD *)this + 278);
    if (v228)
    {
      *(_QWORD *)&v94 = 134218496;
      v312 = v94;
      while (1)
      {
        v229 = v228[2];
        v230 = v228[3];
        v231 = v228[4];
        v232 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v312;
          *(_QWORD *)&buf[4] = v229;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v231;
          *(_WORD *)&buf[22] = 2048;
          v337 = (char *)v230;
          _os_log_impl(&dword_1AC149000, v232, OS_LOG_TYPE_DEFAULT, "updating album name order of trackPID=%lld to order.section=%ld, order.sortOrder=%lld", buf, 0x20u);
        }

        v233 = (void *)*((_QWORD *)this + 2);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v230);
        v234 = (void *)objc_claimAutoreleasedReturnValue();
        v330[0] = v234;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v231);
        v235 = (void *)objc_claimAutoreleasedReturnValue();
        v330[1] = v235;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v229);
        v236 = (void *)objc_claimAutoreleasedReturnValue();
        v330[2] = v236;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v330, 3);
        v237 = (void *)objc_claimAutoreleasedReturnValue();
        v313 = 0;
        v238 = objc_msgSend(v233, "executeUpdate:withParameters:error:", CFSTR("UPDATE item SET album_order=?, album_order_section=? WHERE album_pid=?"), v237, &v313);
        v239 = v313;

        if ((v238 & 1) == 0)
          break;

        v228 = (_QWORD *)*v228;
        if (!v228)
          goto LABEL_317;
      }
      v240 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v240, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = v229;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v239;
        _os_log_impl(&dword_1AC149000, v240, OS_LOG_TYPE_ERROR, "Failed to update name order of tracks with album_pid=%lld, error=%{public}@", buf, 0x16u);
      }

      *((_BYTE *)v327 + 24) = 0;
    }
LABEL_317:
    std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::clear((_QWORD *)this + 276);
    if (!*((_BYTE *)v327 + 24))
      goto LABEL_413;
  }
  if (*((_QWORD *)this + 291) != *((_QWORD *)this + 290))
  {
    v241 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v241, OS_LOG_TYPE_DEFAULT))
    {
      v242 = (*((_QWORD *)this + 291) - *((_QWORD *)this + 290)) >> 4;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v242;
      _os_log_impl(&dword_1AC149000, v241, OS_LOG_TYPE_DEFAULT, "flushing %u playlist insertions", buf, 8u);
    }

    if (*((_BYTE *)v327 + 24)
      && (v243 = ML3ImportSession::_flushPlaylistImportItems((uint64_t)this, (uint64_t **)this + 290),
          *((_BYTE *)v327 + 24) = v243,
          (v243 & 1) == 0))
    {
      v245 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v245, OS_LOG_TYPE_ERROR, "failed to import added playlists", buf, 2u);
      }

    }
    else
    {
      v244 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)this + 290, +[ML3Container revisionTrackingCode](ML3Container, "revisionTrackingCode", v312));
      *((_BYTE *)v327 + 24) = v244;
    }
    v246 = *((_QWORD *)this + 291);
    v247 = *((_QWORD *)this + 290);
    while (v246 != v247)
      v246 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v246 - 16);
    *((_QWORD *)this + 291) = v247;
    if (!*((_BYTE *)v327 + 24))
      goto LABEL_413;
  }
  if (*((_QWORD *)this + 294) != *((_QWORD *)this + 293))
  {
    v248 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v248, OS_LOG_TYPE_DEFAULT))
    {
      v249 = (*((_QWORD *)this + 294) - *((_QWORD *)this + 293)) >> 4;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v249;
      _os_log_impl(&dword_1AC149000, v248, OS_LOG_TYPE_DEFAULT, "flushing %u playlist updates", buf, 8u);
    }

    v250 = ML3ImportSession::_flushPlaylistImportItems((uint64_t)this, (uint64_t **)this + 293);
    *((_BYTE *)v327 + 24) = v250;
    if ((v250 & 1) != 0)
    {
      v251 = ML3ImportSession::_updateEntityRevisionTable((uint64_t)this, (uint64_t *)this + 293, +[ML3Container revisionTrackingCode](ML3Container, "revisionTrackingCode"));
      *((_BYTE *)v327 + 24) = v251;
    }
    else
    {
      v252 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v252, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v252, OS_LOG_TYPE_ERROR, "failed to import updated playlists", buf, 2u);
      }

    }
    v253 = *((_QWORD *)this + 294);
    v254 = *((_QWORD *)this + 293);
    while (v253 != v254)
      v253 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v253 - 16);
    *((_QWORD *)this + 294) = v254;
    if (!*((_BYTE *)v327 + 24))
      goto LABEL_413;
  }
  if (*((_QWORD *)this + 312) != *((_QWORD *)this + 311))
  {
    v255 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT))
    {
      v256 = (*((_QWORD *)this + 312) - *((_QWORD *)this + 311)) >> 4;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v256;
      _os_log_impl(&dword_1AC149000, v255, OS_LOG_TYPE_DEFAULT, "flushing %u person insertions", buf, 8u);
    }

    v257 = ML3ImportSession::_flushPersonImportItems((uint64_t)this, (uint64_t)this + 2488);
    *((_BYTE *)v327 + 24) = v257;
    if ((v257 & 1) == 0)
    {
      v258 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v258, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v258, OS_LOG_TYPE_ERROR, "failed to flush added persons", buf, 2u);
      }

    }
    v259 = *((_QWORD *)this + 312);
    v260 = *((_QWORD *)this + 311);
    while (v259 != v260)
      v259 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v259 - 16);
    *((_QWORD *)this + 312) = v260;
    if (!*((_BYTE *)v327 + 24))
      goto LABEL_413;
  }
  if (*((_QWORD *)this + 315) != *((_QWORD *)this + 314))
  {
    v261 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v261, OS_LOG_TYPE_DEFAULT))
    {
      v262 = (*((_QWORD *)this + 315) - *((_QWORD *)this + 314)) >> 4;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v262;
      _os_log_impl(&dword_1AC149000, v261, OS_LOG_TYPE_DEFAULT, "flushing %u person updates", buf, 8u);
    }

    v263 = ML3ImportSession::_flushPersonImportItems((uint64_t)this, (uint64_t)this + 2512);
    *((_BYTE *)v327 + 24) = v263;
    if ((v263 & 1) == 0)
    {
      v264 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v264, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v264, OS_LOG_TYPE_ERROR, "failed to flush updated persons", buf, 2u);
      }

    }
    v265 = *((_QWORD *)this + 315);
    v266 = *((_QWORD *)this + 314);
    while (v265 != v266)
      v265 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v265 - 16);
    *((_QWORD *)this + 315) = v266;
    if (!*((_BYTE *)v327 + 24))
      goto LABEL_413;
  }
  if (*((_QWORD *)this + 335) == *((_QWORD *)this + 334))
  {
LABEL_400:
    if (*((_QWORD *)this + 338) != *((_QWORD *)this + 337))
    {
      v289 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v289, OS_LOG_TYPE_DEFAULT))
      {
        v290 = (*((_QWORD *)this + 338) - *((_QWORD *)this + 337)) >> 3;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v290;
        _os_log_impl(&dword_1AC149000, v289, OS_LOG_TYPE_DEFAULT, "flushing %u booklet deletes", buf, 8u);
      }

      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", (uint64_t)(*((_QWORD *)this + 338) - *((_QWORD *)this + 337)) >> 3);
      v291 = (void *)objc_claimAutoreleasedReturnValue();
      for (m = (_QWORD *)*((_QWORD *)this + 337); m != *((_QWORD **)this + 338); ++m)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *m, v312);
        v293 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v291, "addObject:", v293);

      }
      +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer", v312);
      v294 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v294, "statementWithPrefix:inParameterCount:", CFSTR("DELETE FROM booklet WHERE ROWID"), objc_msgSend(v291, "count"));
      v295 = (void *)objc_claimAutoreleasedReturnValue();
      v296 = (void *)*((_QWORD *)this + 2);
      *(_QWORD *)v324 = 0;
      v297 = objc_msgSend(v296, "executeUpdate:withParameters:error:", v295, v291, v324);
      v298 = *(id *)v324;
      v299 = v298;
      if ((v297 & 1) != 0)
      {

        *((_BYTE *)v327 + 24) = 1;
      }
      else
      {
        v300 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v300, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v299;
          _os_log_impl(&dword_1AC149000, v300, OS_LOG_TYPE_ERROR, "Failed to delete booklet items. err=%{public}@", buf, 0xCu);
        }

        *((_BYTE *)v327 + 24) = 0;
        _ML3LogCategoryImport();
        v301 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v301, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1AC149000, v301, OS_LOG_TYPE_ERROR, "failed to remove deleted booklets", buf, 2u);
        }

      }
      *((_QWORD *)this + 338) = *((_QWORD *)this + 337);
    }
    goto LABEL_413;
  }
  v267 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
  {
    v268 = (*((_QWORD *)this + 335) - *((_QWORD *)this + 334)) >> 4;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v268;
    _os_log_impl(&dword_1AC149000, v267, OS_LOG_TYPE_DEFAULT, "flushing %u booklet updates", buf, 8u);
  }

  v269 = operator new();
  *(_QWORD *)(v269 + 8) = 0;
  *(_QWORD *)(v269 + 16) = 0;
  *(_OWORD *)(v269 + 24) = 0u;
  *(_OWORD *)(v269 + 40) = 0u;
  *(_OWORD *)(v269 + 56) = 0u;
  *(_QWORD *)v269 = &off_1E5B50280;
  v334 = v269;
  v270 = (std::__shared_weak_count *)operator new();
  v270->__shared_owners_ = 0;
  v271 = (unint64_t *)&v270->__shared_owners_;
  v270->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B52028;
  v270->__shared_weak_owners_ = 0;
  v270[1].__vftable = (std::__shared_weak_count_vtbl *)v269;
  *(_QWORD *)&v335 = v270;
  v272 = *(std::__shared_weak_count **)(v269 + 16);
  if (v272)
  {
    if (v272->__shared_owners_ != -1)
      goto LABEL_381;
    do
      v273 = __ldxr(v271);
    while (__stxr(v273 + 1, v271));
    p_shared_weak_owners = (unint64_t *)&v270->__shared_weak_owners_;
    do
      v275 = __ldxr(p_shared_weak_owners);
    while (__stxr(v275 + 1, p_shared_weak_owners));
    *(_QWORD *)(v269 + 8) = v269;
    *(_QWORD *)(v269 + 16) = v270;
    std::__shared_weak_count::__release_weak(v272);
  }
  else
  {
    do
      v276 = __ldxr(v271);
    while (__stxr(v276 + 1, v271));
    v277 = (unint64_t *)&v270->__shared_weak_owners_;
    do
      v278 = __ldxr(v277);
    while (__stxr(v278 + 1, v277));
    *(_QWORD *)(v269 + 8) = v269;
    *(_QWORD *)(v269 + 16) = v270;
  }
  do
    v279 = __ldaxr(v271);
  while (__stlxr(v279 - 1, v271));
  if (!v279)
  {
    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
    std::__shared_weak_count::__release_weak(v270);
  }
LABEL_381:
  memset(buf, 0, sizeof(buf));
  *(_QWORD *)v324 = buf;
  v324[8] = 0;
  v280 = operator new(0x10uLL);
  *(_QWORD *)buf = v280;
  *(_QWORD *)&buf[8] = v280;
  *(_QWORD *)&buf[16] = v280 + 2;
  v281 = (std::__shared_weak_count *)v335;
  *v280 = v334;
  v280[1] = v281;
  if (v281)
  {
    v282 = (unint64_t *)&v281->__shared_owners_;
    do
      v283 = __ldxr(v282);
    while (__stxr(v283 + 1, v282));
    *(_QWORD *)&buf[8] = v280 + 2;
    do
      v284 = __ldaxr(v282);
    while (__stlxr(v284 - 1, v282));
    if (!v284)
    {
      ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
      std::__shared_weak_count::__release_weak(v281);
    }
  }
  else
  {
    *(_QWORD *)&buf[8] = v280 + 2;
  }
  if ((ML3ImportSession::_flushImportItems((uint64_t)this, (uint64_t)this + 2672, buf) & 1) != 0)
  {
    *(_QWORD *)v324 = buf;
    std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)v324);
    *((_BYTE *)v327 + 24) = 1;
  }
  else
  {
    v285 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v285, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v324 = 0;
      _os_log_impl(&dword_1AC149000, v285, OS_LOG_TYPE_ERROR, "Failed to flush booklet items", v324, 2u);
    }

    *(_QWORD *)v324 = buf;
    std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)v324);
    *((_BYTE *)v327 + 24) = 0;
    v286 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v286, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v286, OS_LOG_TYPE_ERROR, "failed to flush booklets", buf, 2u);
    }

  }
  v287 = *((_QWORD *)this + 335);
  v288 = *((_QWORD *)this + 334);
  while (v287 != v288)
    v287 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v287 - 16);
  *((_QWORD *)this + 335) = v288;
  if (*((_BYTE *)v327 + 24))
    goto LABEL_400;
LABEL_413:
  if (*((_QWORD *)this + 45))
  {
    std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__deallocate_node(*((_QWORD **)this + 44));
    *((_QWORD *)this + 44) = 0;
    v302 = *((_QWORD *)this + 43);
    if (v302)
    {
      for (n = 0; n != v302; ++n)
        *(_QWORD *)(*((_QWORD *)this + 42) + 8 * n) = 0;
    }
    *((_QWORD *)this + 45) = 0;
  }
  if (*((_QWORD *)this + 75))
  {
    v304 = (_QWORD *)*((_QWORD *)this + 74);
    if (v304)
    {
      do
      {
        v305 = (_QWORD *)*v304;
        operator delete(v304);
        v304 = v305;
      }
      while (v305);
    }
    *((_QWORD *)this + 74) = 0;
    v306 = *((_QWORD *)this + 73);
    if (v306)
    {
      for (ii = 0; ii != v306; ++ii)
        *(_QWORD *)(*((_QWORD *)this + 72) + 8 * ii) = 0;
    }
    *((_QWORD *)this + 75) = 0;
  }
  v308 = (_QWORD *)*((_QWORD *)this + 88);
  v309 = (_QWORD *)*((_QWORD *)this + 87);
  if (v308 != v309)
  {
    do
    {
      objc_msgSend(*((id *)this + 1), "updateBestArtworkTokenForEntityPersistentID:entityType:artworkType:retrievalTime:usingConnection:", *v309, v309[1] == 5, 0.0);
      v309 += 2;
    }
    while (v309 != v308);
    *((_QWORD *)this + 88) = *((_QWORD *)this + 87);
  }
  v310 = *((unsigned __int8 *)v327 + 24);
  _Block_object_dispose(&v326, 8);
  return v310;
}

void sub_1AC336478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  void *v40;
  void *v41;
  void *v42;

  _Block_object_dispose(&a40, 8);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<ML3ImportItem>>::reserve(_QWORD *result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  __int128 v9;
  int64x2_t v10;
  char *v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  _QWORD *v15;

  if (a2 > (uint64_t)(result[2] - *result) >> 4)
  {
    if (a2 >> 60)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v2 = (char **)result;
    v3 = result[1] - *result;
    v15 = result + 2;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(a2);
    v7 = *v2;
    v6 = v2[1];
    if (v6 == *v2)
    {
      v10 = vdupq_n_s64((unint64_t)v6);
      v8 = &v4[v3];
    }
    else
    {
      v8 = &v4[v3];
      do
      {
        v9 = *((_OWORD *)v6 - 1);
        v6 -= 16;
        *((_OWORD *)v8 - 1) = v9;
        v8 -= 16;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v6 + 1) = 0;
      }
      while (v6 != v7);
      v10 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = &v4[v3];
    v13 = v10;
    v11 = v2[2];
    v2[2] = &v4[16 * v5];
    v14 = v11;
    v12 = v10.i64[0];
    return (_QWORD *)std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

uint64_t ML3ImportSession::_flushCollectionImportItems(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  uint64_t i;
  uint64_t v18;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint8_t buf[8];
  char v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)a3;
  v5[3] = a1;
  ML3DatabaseImportDataSource::setImportItems(v5, a2);
  v7 = *(_QWORD **)a3;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  v25 = *(_QWORD **)a3;
  v26 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  *(_QWORD *)buf = &v20;
  v24 = 0;
  v10 = operator new(0x10uLL);
  v20 = v10;
  v22 = v10 + 2;
  *v10 = v7;
  v10[1] = v6;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v21 = v10 + 2;
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = v10 + 2;
  }
  v14 = ML3ImportSession::_performDatabaseImport(a1, (uint64_t)&v20);
  if ((v14 & 1) == 0)
  {
    v15 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v15, OS_LOG_TYPE_ERROR, "Database import failed.", buf, 2u);
    }

  }
  v16 = *(_QWORD **)a3;
  v16[3] = 0;
  v18 = v16[6];
  for (i = v16[7]; i != v18; i = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](i - 16))
    ;
  v16[7] = v18;
  *(_QWORD *)buf = &v20;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v14;
}

void sub_1AC3368F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportSession::_updateEntityRevisionTable(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  uint64_t i;
  NSObject *v11;
  char *v14;
  uint64_t v15;
  char *v16;
  void *__p[2];
  char v18;
  char **v19;
  char v20;
  uint8_t buf[24];
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  _QWORD v27[3];
  int v28;
  _BYTE v29[8];
  _QWORD v30[3];

  v30[1] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "REPLACE INTO entity_revision (entity_pid, deleted, class) VALUES (?, ?, ?)");
  v5 = *a2;
  v6 = a2[1];
  v7 = 1;
  if (v5 != v6)
  {
    while (1)
    {
      v8 = *(void **)(a1 + 16);
      *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)v5 + 8);
      v22 = 0;
      v23 = 1;
      v24 = 0;
      v25 = 0;
      v26 = 1;
      v27[0] = a3;
      v28 = 0;
      v29[0] = 1;
      v15 = 0;
      v16 = 0;
      v14 = 0;
      v19 = &v14;
      v20 = 0;
      v14 = (char *)operator new(0x78uLL);
      v15 = (uint64_t)v14;
      v16 = v14 + 120;
      v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)&v16, (uint64_t)buf, (uint64_t)v30, (uint64_t)v14);
      v9 = ML3ImportExecuteVariadicStatement(v8, (const UInt8 *)__p, (uint64_t *)&v14);
      v19 = &v14;
      std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
      for (i = 0; i != -15; i -= 5)
      {
        if (v29[i * 8])
          std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v27[i]);
      }
      if ((v9 & 1) == 0)
        break;
      v5 += 16;
      if (v5 == v6)
      {
        v7 = 1;
        goto LABEL_12;
      }
    }
    v11 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_ERROR, "failed to update entity revisions", buf, 2u);
    }

    v7 = 0;
  }
LABEL_12:
  if (v18 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_1AC336B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3GenreData>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void ___ZN16ML3ImportSession5flushEb_block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  id v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = *(void **)(*(_QWORD *)(a1 + 40) + 16);
  v19[0] = &stru_1E5B66908;
  v19[1] = &unk_1E5BAC378;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v19[2] = v8;
  v19[3] = v6;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  v10 = objc_msgSend(v7, "executeUpdate:withParameters:error:", CFSTR("UPDATE album_artist set cloud_universal_library_id=?, liked_state=?, liked_state_changed_date=? WHERE album_artist_pid=?"), v9, &v14);
  v11 = v14;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v10;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v12 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = objc_msgSend(v6, "longLongValue");
      *(_DWORD *)buf = 134218242;
      v16 = v13;
      v17 = 2114;
      v18 = v11;
      _os_log_impl(&dword_1AC149000, v12, OS_LOG_TYPE_ERROR, "Could not remove cloud_library_id from album_artist with persistentID:%lld, error=%{public}@", buf, 0x16u);
    }

    *a4 = 1;
  }

}

void sub_1AC336D64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession5flushEb_block_invoke_89(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  id v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = *(void **)(*(_QWORD *)(a1 + 40) + 16);
  v19[0] = &stru_1E5B66908;
  v19[1] = &unk_1E5BAC378;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v19[2] = v8;
  v19[3] = v6;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  v10 = objc_msgSend(v7, "executeUpdate:withParameters:error:", CFSTR("UPDATE album set cloud_library_id=?, liked_state=?, liked_state_changed_date=? WHERE album_pid=?"), v9, &v14);
  v11 = v14;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v10;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v12 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = objc_msgSend(v6, "longLongValue");
      *(_DWORD *)buf = 134218242;
      v16 = v13;
      v17 = 2114;
      v18 = v11;
      _os_log_impl(&dword_1AC149000, v12, OS_LOG_TYPE_ERROR, "Could not remove cloud_library_id from album with persistentID:%lld, error=%{public}@", buf, 0x16u);
    }

    *a4 = 1;
  }

}

void sub_1AC336F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_flushTrackImportItems(uint64_t a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  std::__shared_weak_count *v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  std::__shared_weak_count *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  std::__shared_weak_count *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  std::__shared_weak_count *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t i;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  NSObject *v116;
  uint64_t v117;
  char v118;
  NSObject *v119;
  uint64_t *v120;
  uint64_t *v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  unint64_t v127;
  uint64_t v128;
  ML3Track *v129;
  void *v130;
  void *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void *v137;
  void *v138;
  void *v139;
  _QWORD *v140;
  _QWORD *j;
  void *v142;
  void *v143;
  uint64_t v144;
  id v145;
  NSObject *v146;
  uint64_t *v148;
  uint64_t *v149;
  char *v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  char *v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  BOOL v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 buf;
  void (*v185)(uint64_t, uint64_t);
  std::__shared_weak_count *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  id v201[4];

  v201[2] = *(id *)MEMORY[0x1E0C80C00];
  v181 = 0;
  v182 = 0;
  v183 = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = 1;
    do
    {
      v7 = *v4;
      v8 = (std::__shared_weak_count *)v4[1];
      *(_QWORD *)&buf = *v4;
      *((_QWORD *)&buf + 1) = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7);
      if (v8)
      {
        v12 = (unint64_t *)&v8->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 &= v11;
      v4 += 2;
    }
    while (v4 != v5);
    if ((v6 & 1) == 0)
    {
      v18 = operator new();
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = 0;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_OWORD *)(v18 + 40) = 0u;
      *(_OWORD *)(v18 + 56) = 0u;
      *(_QWORD *)v18 = &off_1E5B50838;
      std::shared_ptr<ML3DatabaseImportDataSource>::shared_ptr[abi:ne180100]<ML3ItemStoreDatabaseImportDataSource,void>(&buf, v18);
      v19 = (void (*)(uint64_t, uint64_t))operator new();
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      *(_OWORD *)((char *)v19 + 24) = 0u;
      *(_OWORD *)((char *)v19 + 40) = 0u;
      *(_OWORD *)((char *)v19 + 56) = 0u;
      *(_QWORD *)v19 = &off_1E5B4F940;
      *(_OWORD *)((char *)v19 + 72) = 0u;
      *(_OWORD *)((char *)v19 + 88) = 0u;
      *(_OWORD *)((char *)v19 + 104) = 0u;
      *(_OWORD *)((char *)v19 + 120) = 0u;
      *(_OWORD *)((char *)v19 + 136) = 0u;
      v185 = v19;
      v20 = (std::__shared_weak_count *)operator new();
      v20->__shared_owners_ = 0;
      v21 = (unint64_t *)&v20->__shared_owners_;
      v20->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51DC0;
      v20->__shared_weak_owners_ = 0;
      v20[1].__vftable = (std::__shared_weak_count_vtbl *)v19;
      v186 = v20;
      v22 = (std::__shared_weak_count *)*((_QWORD *)v19 + 2);
      if (v22)
      {
        if (v22->__shared_owners_ != -1)
          goto LABEL_31;
        do
          v23 = __ldxr(v21);
        while (__stxr(v23 + 1, v21));
        p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
        do
          v25 = __ldxr(p_shared_weak_owners);
        while (__stxr(v25 + 1, p_shared_weak_owners));
        *((_QWORD *)v19 + 1) = v19;
        *((_QWORD *)v19 + 2) = v20;
        std::__shared_weak_count::__release_weak(v22);
      }
      else
      {
        do
          v26 = __ldxr(v21);
        while (__stxr(v26 + 1, v21));
        v27 = (unint64_t *)&v20->__shared_weak_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        *((_QWORD *)v19 + 1) = v19;
        *((_QWORD *)v19 + 2) = v20;
      }
      do
        v29 = __ldaxr(v21);
      while (__stlxr(v29 - 1, v21));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
LABEL_31:
      v30 = operator new();
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = 0;
      *(_OWORD *)(v30 + 24) = 0u;
      *(_OWORD *)(v30 + 40) = 0u;
      *(_OWORD *)(v30 + 56) = 0u;
      *(_QWORD *)v30 = &off_1E5B506F8;
      v187 = v30;
      v31 = (std::__shared_weak_count *)operator new();
      v31->__shared_owners_ = 0;
      v32 = (unint64_t *)&v31->__shared_owners_;
      v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B52178;
      v31->__shared_weak_owners_ = 0;
      v31[1].__vftable = (std::__shared_weak_count_vtbl *)v30;
      v188 = v31;
      v33 = *(std::__shared_weak_count **)(v30 + 16);
      if (v33)
      {
        if (v33->__shared_owners_ != -1)
          goto LABEL_44;
        do
          v34 = __ldxr(v32);
        while (__stxr(v34 + 1, v32));
        v35 = (unint64_t *)&v31->__shared_weak_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        *(_QWORD *)(v30 + 8) = v30;
        *(_QWORD *)(v30 + 16) = v31;
        std::__shared_weak_count::__release_weak(v33);
      }
      else
      {
        do
          v37 = __ldxr(v32);
        while (__stxr(v37 + 1, v32));
        v38 = (unint64_t *)&v31->__shared_weak_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        *(_QWORD *)(v30 + 8) = v30;
        *(_QWORD *)(v30 + 16) = v31;
      }
      do
        v40 = __ldaxr(v32);
      while (__stlxr(v40 - 1, v32));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
LABEL_44:
      v41 = operator new();
      *(_QWORD *)(v41 + 8) = 0;
      *(_QWORD *)(v41 + 16) = 0;
      *(_OWORD *)(v41 + 24) = 0u;
      *(_OWORD *)(v41 + 40) = 0u;
      *(_OWORD *)(v41 + 56) = 0u;
      *(_QWORD *)v41 = &off_1E5B50BA0;
      v189 = v41;
      v42 = (std::__shared_weak_count *)operator new();
      v42->__shared_owners_ = 0;
      v43 = (unint64_t *)&v42->__shared_owners_;
      v42->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B52300;
      v42->__shared_weak_owners_ = 0;
      v42[1].__vftable = (std::__shared_weak_count_vtbl *)v41;
      v190 = v42;
      v44 = *(std::__shared_weak_count **)(v41 + 16);
      if (v44)
      {
        if (v44->__shared_owners_ != -1)
          goto LABEL_57;
        do
          v45 = __ldxr(v43);
        while (__stxr(v45 + 1, v43));
        v46 = (unint64_t *)&v42->__shared_weak_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        *(_QWORD *)(v41 + 8) = v41;
        *(_QWORD *)(v41 + 16) = v42;
        std::__shared_weak_count::__release_weak(v44);
      }
      else
      {
        do
          v48 = __ldxr(v43);
        while (__stxr(v48 + 1, v43));
        v49 = (unint64_t *)&v42->__shared_weak_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
        *(_QWORD *)(v41 + 8) = v41;
        *(_QWORD *)(v41 + 16) = v42;
      }
      do
        v51 = __ldaxr(v43);
      while (__stlxr(v51 - 1, v43));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
LABEL_57:
      v52 = operator new();
      *(_QWORD *)(v52 + 8) = 0;
      *(_QWORD *)(v52 + 16) = 0;
      *(_OWORD *)(v52 + 24) = 0u;
      *(_OWORD *)(v52 + 40) = 0u;
      *(_OWORD *)(v52 + 56) = 0u;
      *(_QWORD *)v52 = &off_1E5B50A60;
      v191 = v52;
      v53 = (std::__shared_weak_count *)operator new();
      v53->__shared_owners_ = 0;
      v54 = (unint64_t *)&v53->__shared_owners_;
      v53->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B52290;
      v53->__shared_weak_owners_ = 0;
      v53[1].__vftable = (std::__shared_weak_count_vtbl *)v52;
      v192 = v53;
      v55 = *(std::__shared_weak_count **)(v52 + 16);
      if (v55)
      {
        if (v55->__shared_owners_ != -1)
          goto LABEL_70;
        do
          v56 = __ldxr(v54);
        while (__stxr(v56 + 1, v54));
        v57 = (unint64_t *)&v53->__shared_weak_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
        *(_QWORD *)(v52 + 8) = v52;
        *(_QWORD *)(v52 + 16) = v53;
        std::__shared_weak_count::__release_weak(v55);
      }
      else
      {
        do
          v59 = __ldxr(v54);
        while (__stxr(v59 + 1, v54));
        v60 = (unint64_t *)&v53->__shared_weak_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
        *(_QWORD *)(v52 + 8) = v52;
        *(_QWORD *)(v52 + 16) = v53;
      }
      do
        v62 = __ldaxr(v54);
      while (__stlxr(v62 - 1, v54));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
LABEL_70:
      v63 = operator new();
      *(_QWORD *)(v63 + 8) = 0;
      *(_QWORD *)(v63 + 16) = 0;
      *(_OWORD *)(v63 + 24) = 0u;
      *(_OWORD *)(v63 + 40) = 0u;
      *(_OWORD *)(v63 + 56) = 0u;
      *(_QWORD *)v63 = &off_1E5B50798;
      v193 = v63;
      v64 = (std::__shared_weak_count *)operator new();
      v64->__shared_owners_ = 0;
      v65 = (unint64_t *)&v64->__shared_owners_;
      v64->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B521B0;
      v64->__shared_weak_owners_ = 0;
      v64[1].__vftable = (std::__shared_weak_count_vtbl *)v63;
      v194 = v64;
      v66 = *(std::__shared_weak_count **)(v63 + 16);
      if (v66)
      {
        if (v66->__shared_owners_ != -1)
          goto LABEL_83;
        do
          v67 = __ldxr(v65);
        while (__stxr(v67 + 1, v65));
        v68 = (unint64_t *)&v64->__shared_weak_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
        *(_QWORD *)(v63 + 8) = v63;
        *(_QWORD *)(v63 + 16) = v64;
        std::__shared_weak_count::__release_weak(v66);
      }
      else
      {
        do
          v70 = __ldxr(v65);
        while (__stxr(v70 + 1, v65));
        v71 = (unint64_t *)&v64->__shared_weak_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
        *(_QWORD *)(v63 + 8) = v63;
        *(_QWORD *)(v63 + 16) = v64;
      }
      do
        v73 = __ldaxr(v65);
      while (__stlxr(v73 - 1, v65));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
LABEL_83:
      v74 = operator new();
      *(_QWORD *)(v74 + 8) = 0;
      *(_QWORD *)(v74 + 16) = 0;
      *(_OWORD *)(v74 + 24) = 0u;
      *(_OWORD *)(v74 + 40) = 0u;
      *(_OWORD *)(v74 + 56) = 0u;
      *(_QWORD *)v74 = &off_1E5B508D8;
      v195 = v74;
      v75 = (std::__shared_weak_count *)operator new();
      v75->__shared_owners_ = 0;
      v76 = (unint64_t *)&v75->__shared_owners_;
      v75->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B52220;
      v75->__shared_weak_owners_ = 0;
      v75[1].__vftable = (std::__shared_weak_count_vtbl *)v74;
      v196 = v75;
      v77 = *(std::__shared_weak_count **)(v74 + 16);
      if (v77)
      {
        if (v77->__shared_owners_ != -1)
          goto LABEL_96;
        do
          v78 = __ldxr(v76);
        while (__stxr(v78 + 1, v76));
        v79 = (unint64_t *)&v75->__shared_weak_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
        *(_QWORD *)(v74 + 8) = v74;
        *(_QWORD *)(v74 + 16) = v75;
        std::__shared_weak_count::__release_weak(v77);
      }
      else
      {
        do
          v81 = __ldxr(v76);
        while (__stxr(v81 + 1, v76));
        v82 = (unint64_t *)&v75->__shared_weak_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
        *(_QWORD *)(v74 + 8) = v74;
        *(_QWORD *)(v74 + 16) = v75;
      }
      do
        v84 = __ldaxr(v76);
      while (__stlxr(v84 - 1, v76));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
LABEL_96:
      v85 = operator new();
      *(_QWORD *)(v85 + 8) = 0;
      *(_QWORD *)(v85 + 16) = 0;
      *(_OWORD *)(v85 + 24) = 0u;
      *(_OWORD *)(v85 + 40) = 0u;
      *(_OWORD *)(v85 + 56) = 0u;
      *(_QWORD *)v85 = &off_1E5B50320;
      v197 = v85;
      v86 = (std::__shared_weak_count *)operator new();
      v86->__shared_owners_ = 0;
      v87 = (unint64_t *)&v86->__shared_owners_;
      v86->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B52060;
      v86->__shared_weak_owners_ = 0;
      v86[1].__vftable = (std::__shared_weak_count_vtbl *)v85;
      v198 = v86;
      v88 = *(std::__shared_weak_count **)(v85 + 16);
      if (v88)
      {
        if (v88->__shared_owners_ != -1)
          goto LABEL_109;
        do
          v89 = __ldxr(v87);
        while (__stxr(v89 + 1, v87));
        v90 = (unint64_t *)&v86->__shared_weak_owners_;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
        *(_QWORD *)(v85 + 8) = v85;
        *(_QWORD *)(v85 + 16) = v86;
        std::__shared_weak_count::__release_weak(v88);
      }
      else
      {
        do
          v92 = __ldxr(v87);
        while (__stxr(v92 + 1, v87));
        v93 = (unint64_t *)&v86->__shared_weak_owners_;
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
        *(_QWORD *)(v85 + 8) = v85;
        *(_QWORD *)(v85 + 16) = v86;
      }
      do
        v95 = __ldaxr(v87);
      while (__stlxr(v95 - 1, v87));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
LABEL_109:
      v96 = operator new();
      *(_QWORD *)(v96 + 8) = 0;
      *(_QWORD *)(v96 + 16) = 0;
      *(_OWORD *)(v96 + 24) = 0u;
      *(_OWORD *)(v96 + 40) = 0u;
      *(_OWORD *)(v96 + 56) = 0u;
      *(_QWORD *)v96 = &off_1E5B50140;
      v199 = v96;
      v97 = (std::__shared_weak_count *)operator new();
      v97->__shared_owners_ = 0;
      v98 = (unint64_t *)&v97->__shared_owners_;
      v97->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51FB8;
      v97->__shared_weak_owners_ = 0;
      v97[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
      v200 = v97;
      v99 = *(std::__shared_weak_count **)(v96 + 16);
      if (v99)
      {
        if (v99->__shared_owners_ != -1)
        {
LABEL_122:
          std::vector<std::shared_ptr<ML3DatabaseImportDataSource>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ML3DatabaseImportDataSource> const*,std::shared_ptr<ML3DatabaseImportDataSource> const*>((uint64_t)&v181, (uint64_t *)&buf, (uint64_t *)v201, 9uLL);
          for (i = 128; i != -16; i -= 16)
            std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&buf + i);
          goto LABEL_124;
        }
        do
          v100 = __ldxr(v98);
        while (__stxr(v100 + 1, v98));
        v101 = (unint64_t *)&v97->__shared_weak_owners_;
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
        *(_QWORD *)(v96 + 8) = v96;
        *(_QWORD *)(v96 + 16) = v97;
        std::__shared_weak_count::__release_weak(v99);
      }
      else
      {
        do
          v103 = __ldxr(v98);
        while (__stxr(v103 + 1, v98));
        v104 = (unint64_t *)&v97->__shared_weak_owners_;
        do
          v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
        *(_QWORD *)(v96 + 8) = v96;
        *(_QWORD *)(v96 + 16) = v97;
      }
      do
        v106 = __ldaxr(v98);
      while (__stlxr(v106 - 1, v98));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
      goto LABEL_122;
    }
  }
  v14 = operator new();
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_QWORD *)v14 = &off_1E5B50838;
  std::shared_ptr<ML3DatabaseImportDataSource>::shared_ptr[abi:ne180100]<ML3ItemStoreDatabaseImportDataSource,void>(&buf, v14);
  std::vector<std::shared_ptr<ML3DatabaseImportDataSource>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ML3DatabaseImportDataSource> const*,std::shared_ptr<ML3DatabaseImportDataSource> const*>((uint64_t)&v181, (uint64_t *)&buf, (uint64_t *)&v185, 1uLL);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_124:
  v108 = v181;
  v109 = v182;
  while (v108 != v109)
  {
    v110 = *(_QWORD **)v108;
    v111 = *(std::__shared_weak_count **)(v108 + 8);
    *(_QWORD *)&buf = *(_QWORD *)v108;
    *((_QWORD *)&buf + 1) = v111;
    if (v111)
    {
      v112 = (unint64_t *)&v111->__shared_owners_;
      do
        v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
    }
    v110[3] = a1;
    ML3DatabaseImportDataSource::setImportItems(v110, a2);
    if (v111)
    {
      v114 = (unint64_t *)&v111->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    v108 += 16;
  }
  if (*(_DWORD *)(a1 + 32) == 2)
  {
    if (objc_msgSend(*(id *)(a1 + 8), "downloadOnAddToLibrary"))
    {
      if (!*(_BYTE *)(a1 + 1512))
      {
        v148 = *a2;
        v149 = a2[1];
        if (*a2 != v149)
        {
          v150 = 0;
          v151 = 0;
          v152 = 0;
          do
          {
            v153 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v148 + 32))(*v148, 100663347);
            v154 = *(_QWORD *)(*v148 + 8);
            v155 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v148 + 32))(*v148, 16777217);
            if ((MLMediaTypeByStandardizingMediaType(v155) & 8) != 0)
            {
              if (*(_BYTE *)(*v148 + 16))
                v156 = v153 == 0;
              else
                v156 = 1;
              if (v156)
              {
                if (v153 && (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v148 + 32))(*v148, 100663305))
                {
                  v157 = *(char **)(a1 + 536);
                  v158 = *(_QWORD *)(a1 + 544);
                  if ((unint64_t)v157 >= v158)
                  {
                    v164 = *(char **)(a1 + 528);
                    v165 = (v157 - v164) >> 3;
                    v166 = v165 + 1;
                    if ((unint64_t)(v165 + 1) >> 61)
LABEL_229:
                      std::vector<long long>::__throw_length_error[abi:ne180100]();
                    v167 = v158 - (_QWORD)v164;
                    if (v167 >> 2 > v166)
                      v166 = v167 >> 2;
                    v168 = (unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8;
                    v169 = 0x1FFFFFFFFFFFFFFFLL;
                    if (!v168)
                      v169 = v166;
                    if (v169)
                    {
                      v169 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v169);
                      v157 = *(char **)(a1 + 536);
                      v164 = *(char **)(a1 + 528);
                    }
                    else
                    {
                      v170 = 0;
                    }
                    v174 = (_QWORD *)(v169 + 8 * v165);
                    *v174 = v154;
                    v159 = v174 + 1;
                    while (v157 != v164)
                    {
                      v175 = *((_QWORD *)v157 - 1);
                      v157 -= 8;
                      *--v174 = v175;
                    }
                    *(_QWORD *)(a1 + 528) = v174;
                    *(_QWORD *)(a1 + 536) = v159;
                    *(_QWORD *)(a1 + 544) = v169 + 8 * v170;
                    if (v164)
                      operator delete(v164);
                  }
                  else
                  {
                    *(_QWORD *)v157 = v154;
                    v159 = v157 + 8;
                  }
                  *(_QWORD *)(a1 + 536) = v159;
                }
              }
              else if ((unint64_t)v151 >= v152)
              {
                v160 = (v151 - v150) >> 3;
                v161 = v160 + 1;
                if ((unint64_t)(v160 + 1) >> 61)
                  goto LABEL_229;
                if ((uint64_t)(v152 - (_QWORD)v150) >> 2 > v161)
                  v161 = (uint64_t)(v152 - (_QWORD)v150) >> 2;
                if (v152 - (unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8)
                  v162 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v162 = v161;
                if (v162)
                  v162 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v162);
                else
                  v163 = 0;
                v171 = (char *)(v162 + 8 * v160);
                *(_QWORD *)v171 = v154;
                v172 = v171 + 8;
                while (v151 != v150)
                {
                  v173 = *((_QWORD *)v151 - 1);
                  v151 -= 8;
                  *((_QWORD *)v171 - 1) = v173;
                  v171 -= 8;
                }
                v152 = v162 + 8 * v163;
                if (v150)
                  operator delete(v150);
                v150 = v171;
                v151 = v172;
              }
              else
              {
                *(_QWORD *)v151 = v154;
                v151 += 8;
              }
            }
            v148 += 2;
          }
          while (v148 != v149);
          if (v151 != v150)
          {
            +[ML3PersistentIDsPredicate predicateWithPersistentIDs:count:shouldContain:](ML3PersistentIDsPredicate, "predicateWithPersistentIDs:count:shouldContain:", v150, (v151 - v150) >> 3, 1);
            v176 = (void *)objc_claimAutoreleasedReturnValue();
            +[ML3ComparisonPredicate predicateWithProperty:equalToInteger:](ML3ComparisonPredicate, "predicateWithProperty:equalToInteger:", CFSTR("item_store.cloud_in_my_library"), 0);
            v177 = (void *)objc_claimAutoreleasedReturnValue();
            v201[0] = v177;
            v201[1] = v176;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v201, 2);
            v178 = (void *)objc_claimAutoreleasedReturnValue();
            +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v178);
            v179 = (void *)objc_claimAutoreleasedReturnValue();

            +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3Track, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", *(_QWORD *)(a1 + 8), v179, 0);
            v180 = (void *)objc_claimAutoreleasedReturnValue();
            *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
            *((_QWORD *)&buf + 1) = 3221225472;
            v185 = ___ZN16ML3ImportSession34_prepareTracksForAutomaticDownloadERNSt3__16vectorINS0_10shared_ptrI13ML3ImportItemEENS0_9allocatorIS4_EEEE_block_invoke;
            v186 = (std::__shared_weak_count *)&__block_descriptor_40_e15_v32__0q8Q16_B24l;
            v187 = a1;
            objc_msgSend(v180, "enumeratePersistentIDsUsingBlock:", &buf);

          }
          if (v150)
            operator delete(v150);
        }
      }
    }
  }
  v116 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
  {
    v117 = (uint64_t)(*(_QWORD *)(a1 + 536) - *(_QWORD *)(a1 + 528)) >> 3;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v117;
    _os_log_impl(&dword_1AC149000, v116, OS_LOG_TYPE_DEFAULT, "Prepared %lu tracks for automatic download.", (uint8_t *)&buf, 0xCu);
  }

  v118 = ML3ImportSession::_performDatabaseImport(a1, (uint64_t)&v181);
  if ((v118 & 1) == 0)
  {
    v119 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AC149000, v119, OS_LOG_TYPE_ERROR, "Database import failed.", (uint8_t *)&buf, 2u);
    }

  }
  v120 = *a2;
  v121 = a2[1];
  if (*a2 != v121)
  {
    do
    {
      v123 = *v120;
      v122 = (std::__shared_weak_count *)v120[1];
      *(_QWORD *)&buf = *v120;
      *((_QWORD *)&buf + 1) = v122;
      if (v122)
      {
        v124 = (unint64_t *)&v122->__shared_owners_;
        do
          v125 = __ldxr(v124);
        while (__stxr(v125 + 1, v124));
        v126 = (void *)MEMORY[0x1AF43CC0C]();
        do
          v127 = __ldxr(v124);
        while (__stxr(v127 + 1, v124));
      }
      else
      {
        v126 = (void *)MEMORY[0x1AF43CC0C]();
      }
      v128 = *(_QWORD *)(v123 + 8);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v123 + 32))(v123, 83886093))
      {
        v129 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3Track alloc], "initWithPersistentID:inLibrary:", v128, *(_QWORD *)(a1 + 8));
        -[ML3Track updateStoreBookmarkMetadataIdentifier](v129, "updateStoreBookmarkMetadataIdentifier");

      }
      if (!*(_BYTE *)(v123 + 16) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v123 + 128))(v123))
      {
        v130 = *(void **)(a1 + 720);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v128);
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v130, "addObject:", v131);

      }
      if (v122)
      {
        v132 = (unint64_t *)&v122->__shared_owners_;
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      objc_autoreleasePoolPop(v126);
      v134 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        v135 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      v120 += 2;
    }
    while (v120 != v121);
  }
  if ((v118 & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 536) == *(_QWORD *)(a1 + 528))
    {
      v144 = 1;
    }
    else
    {
      +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer");
      v137 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v137, "statementWithPrefix:inParameterCount:", CFSTR("UPDATE item SET keep_local = ? WHERE ROWID"), (uint64_t)(*(_QWORD *)(a1 + 536) - *(_QWORD *)(a1 + 528)) >> 3);
      v138 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", &unk_1E5BAC390);
      v139 = (void *)objc_claimAutoreleasedReturnValue();
      v140 = *(_QWORD **)(a1 + 528);
      for (j = *(_QWORD **)(a1 + 536); v140 != j; ++v140)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *v140);
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v139, "addObject:", v142);

      }
      v143 = *(void **)(a1 + 16);
      v201[0] = 0;
      v144 = objc_msgSend(v143, "executeUpdate:withParameters:error:", v138, v139, v201);
      v145 = v201[0];
      if ((v144 & 1) == 0)
      {
        v146 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v145;
          _os_log_impl(&dword_1AC149000, v146, OS_LOG_TYPE_ERROR, "Failed to update tracks for automatic download: %@", (uint8_t *)&buf, 0xCu);
        }

      }
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 528);

    }
  }
  else
  {
    v144 = 0;
  }
  *(_QWORD *)&buf = &v181;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  return v144;
}

void sub_1AC338174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (v18)
    operator delete(v18);
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

BOOL ML3ImportSession::_removeTracksFromLibrary(ML3ImportSession *this, NSArray *a2)
{
  NSArray *v3;
  uint64_t v4;
  _BOOL8 v5;
  NSObject *v6;
  uint8_t v8[16];

  v3 = a2;
  if ((ML3ImportSession::_enableTriggers((id *)this) & 1) != 0)
  {
    v4 = *((unsigned int *)this + 8);
    if ((_DWORD)v4 == 2)
    {
      v5 = +[ML3Track unlinkRedownloadableAssetsFromLibrary:persistentIDs:deletionType:deletedFileSize:](ML3Track, "unlinkRedownloadableAssetsFromLibrary:persistentIDs:deletionType:deletedFileSize:", *((_QWORD *)this + 1), v3, 2, 0);
      v4 = *((unsigned int *)this + 8);
    }
    else
    {
      v5 = 1;
    }
    objc_msgSend(*((id *)this + 1), "removeSource:fromPersistentIDS:forImportOperation:canonocalizeCollections:usingConnection:postNotifications:", v4, v3, 0, 0, *((_QWORD *)this + 2), 0);
    ML3ImportSession::_disableTriggers(this);
  }
  else
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, "failed to re-enable triggers", v8, 2u);
    }

    v5 = 0;
  }

  return v5;
}

void sub_1AC3383E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t ML3ImportSession::_flushPlaylistImportItems(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  char v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t i;
  _QWORD *v33;
  _OWORD *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  void *v49;
  void *v50;
  _BOOL4 v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  _QWORD *v67;
  _QWORD *j;
  void *v69;
  void *v70;
  char v71;
  id v72;
  void *v73;
  NSObject *v74;
  const char *v75;
  NSObject *v76;
  _QWORD *v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  _QWORD *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t k;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  char v94;
  id v95;
  void *v96;
  char v97;
  id v98;
  NSObject *v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  std::__shared_weak_count *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  NSObject *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  std::__shared_weak_count *v123;
  _QWORD *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t *v130;
  void *v131;
  void *v132;
  uint64_t *m;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t *n;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  void *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  void *v153;
  void *v154;
  uint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _OWORD *v164;
  unint64_t v165;
  _OWORD *v166;
  NSObject *v167;
  __int128 *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  _QWORD *v176;
  _QWORD *v177;
  char *v178;
  __int128 v179;
  int64x2_t v180;
  uint64_t v181;
  void **v182;
  void *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  NSObject *v189;
  uint64_t v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  std::__shared_weak_count *v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  _QWORD *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  int v207;
  NSObject *v208;
  uint64_t v209;
  uint64_t v210;
  NSObject *v211;
  int v212;
  void *v213;
  void *v214;
  void *v215;
  uint64_t v216;
  int v217;
  id v218;
  NSObject *v219;
  NSObject *v220;
  uint64_t v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  std::__shared_weak_count *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  _QWORD *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  int v238;
  NSObject *v239;
  uint64_t v240;
  uint64_t v241;
  NSObject *v242;
  int v243;
  void *v244;
  void *v245;
  void *v246;
  uint64_t v247;
  int v248;
  id v249;
  NSObject *v250;
  uint64_t *v251;
  std::__shared_weak_count *v252;
  _QWORD *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t v256;
  NSObject *v257;
  uint64_t v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  _QWORD *ii;
  uint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t *v274;
  uint64_t **v275;
  std::__shared_weak_count *v276;
  std::__shared_weak_count *shared_owners;
  std::__shared_weak_count_vtbl *v278;
  unint64_t *v279;
  unint64_t v280;
  NSObject *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  std::__shared_weak_count *v285;
  uint64_t *v286;
  unint64_t *v287;
  unint64_t v288;
  NSObject *v289;
  int64_t v290;
  std::string *v291;
  NSObject *v292;
  std::string *v293;
  NSObject *v294;
  int64_t v295;
  std::string *v296;
  std::string *v297;
  std::string::size_type v298;
  uint64_t v299;
  _QWORD *v300;
  _OWORD *v301;
  unint64_t v302;
  _OWORD *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char *v309;
  uint64_t v310;
  char *v311;
  _QWORD *v312;
  _QWORD *v313;
  char *v314;
  __int128 v315;
  int64x2_t v316;
  uint64_t v317;
  std::string *v318;
  std::string::size_type v319;
  uint64_t v320;
  _QWORD *v321;
  _OWORD *v322;
  unint64_t v323;
  _OWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  char *v330;
  uint64_t v331;
  char *v332;
  _QWORD *v333;
  _QWORD *v334;
  char *v335;
  __int128 v336;
  int64x2_t v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t *v340;
  uint64_t *v341;
  uint64_t *v342;
  uint64_t *v343;
  uint64_t *v344;
  uint64_t *v345;
  int v346;
  uint64_t *v347;
  uint64_t **v348;
  uint64_t *v349;
  int v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t *v362;
  BOOL v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  _QWORD *v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  BOOL v379;
  _QWORD *v380;
  uint64_t v381;
  NSObject *v383;
  uint64_t **v384;
  unint64_t *v385;
  unint64_t v386;
  _QWORD *v387;
  _QWORD *v388;
  std::__shared_weak_count *v389;
  uint64_t *v390;
  unint64_t *v391;
  unint64_t v392;
  void *v393;
  void *v394;
  NSObject *v395;
  _QWORD *v396;
  uint64_t v397;
  unint64_t *v398;
  unint64_t v399;
  _QWORD *v400;
  _BYTE *v401;
  _QWORD *v402;
  _QWORD *v403;
  unint64_t *v404;
  unint64_t v405;
  uint64_t *v406;
  unint64_t v407;
  NSObject *v408;
  uint64_t v409;
  uint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  std::__shared_weak_count *v413;
  unint64_t v414;
  unint64_t *v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t *v418;
  unint64_t v419;
  unint64_t v420;
  _QWORD *v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  unint64_t v425;
  int v426;
  NSObject *v427;
  uint64_t v428;
  uint64_t v429;
  NSObject *v430;
  int v431;
  void *v432;
  void *v433;
  void *v434;
  uint64_t v435;
  id v436;
  NSObject *v437;
  uint64_t v438;
  NSObject *v439;
  void *v440;
  uint64_t v441;
  void *v442;
  void *v443;
  void *v444;
  char v445;
  id v446;
  NSObject *v447;
  uint64_t *v449;
  uint64_t *v450;
  std::__shared_weak_count *v451;
  void *v452;
  void *v453;
  uint64_t *v454;
  uint64_t *v455;
  std::__shared_weak_count *v456;
  _QWORD *v457;
  uint64_t v458;
  void *v459;
  uint64_t v461;
  int v462;
  id v463;
  unsigned int v464;
  void *v465;
  int64x2_t *v466;
  id v467;
  id v468[2];
  std::__shared_weak_count *v469;
  uint64_t v470;
  std::__shared_weak_count *v471;
  id v472;
  id v473[2];
  std::__shared_weak_count *v474;
  _QWORD *v475;
  _OWORD *v476;
  _OWORD *v477;
  std::string v478;
  uint64_t v479;
  std::__shared_weak_count *v480;
  std::string v481;
  std::string v482;
  __int128 v483;
  std::string v484;
  std::__shared_weak_count_vtbl *v485;
  std::__shared_weak_count *v486;
  std::__shared_weak_count *v487;
  std::__shared_weak_count *v488;
  uint64_t v489;
  std::__shared_weak_count *v490;
  __int128 v491;
  int64_t v492;
  std::string v493;
  void *v494;
  uint8_t *v495;
  uint8_t v496[8];
  uint64_t *v497;
  uint64_t v498;
  void *v499;
  void *v500;
  __int128 v501;
  __int128 v502;
  uint64_t v503;
  int v504;
  __int128 v505;
  __int128 v506;
  uint8_t *v507;
  uint64_t v508;
  uint64_t v509;
  void (*v510)(uint64_t, void *, void *);
  void *v511;
  uint8_t *v512;
  std::string v513;
  _BYTE v514[40];
  uint64_t *v515;
  uint64_t *v516;
  uint64_t v517;
  void *v518;
  void *v519;
  uint8_t buf[16];
  uint64_t v521;
  std::__shared_weak_count *v522;
  uint64_t (*v523)(uint64_t);
  __int128 v524;
  __int128 v525;
  uint64_t v526;
  int v527;
  void *v528;
  __int128 v529;
  __int128 v530;
  uint8_t *v531;
  const char *v532;
  _QWORD **v533;
  _QWORD *v534[3];
  _BYTE v535[40];
  uint64_t v536;

  v536 = *MEMORY[0x1E0C80C00];
  v3 = operator new();
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_QWORD *)v3 = &off_1E5B50658;
  *(_QWORD *)buf = v3;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B52140;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *(_QWORD *)&buf[8] = v4;
  v6 = *(std::__shared_weak_count **)(v3 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)(v3 + 8) = v3;
    *(_QWORD *)(v3 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    *(_QWORD *)(v3 + 8) = v3;
    *(_QWORD *)(v3 + 16) = v4;
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_14:
  v14 = operator new();
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_QWORD *)v14 = &off_1E5B50DC8;
  v521 = v14;
  v15 = (std::__shared_weak_count *)operator new();
  v15->__shared_owners_ = 0;
  v16 = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B523A8;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v522 = v15;
  v17 = *(std::__shared_weak_count **)(v14 + 16);
  if (v17)
  {
    if (v17->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    v19 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)(v14 + 8) = v14;
    *(_QWORD *)(v14 + 16) = v15;
    std::__shared_weak_count::__release_weak(v17);
  }
  else
  {
    do
      v21 = __ldxr(v16);
    while (__stxr(v21 + 1, v16));
    v22 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *(_QWORD *)(v14 + 8) = v14;
    *(_QWORD *)(v14 + 16) = v15;
  }
  do
    v24 = __ldaxr(v16);
  while (__stlxr(v24 - 1, v16));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_27:
  v475 = 0;
  v476 = 0;
  v477 = 0;
  *(_QWORD *)v496 = &v475;
  LOBYTE(v497) = 0;
  v25 = operator new(0x20uLL);
  v26 = 0;
  v27 = 0;
  v475 = v25;
  v476 = v25;
  v477 = v25 + 2;
  do
  {
    v28 = v26;
    v29 = *(_OWORD *)&buf[16 * v27];
    *v25 = v29;
    if (*((_QWORD *)&v29 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    ++v25;
    v26 = 1;
    v27 = 1;
  }
  while ((v28 & 1) == 0);
  v476 = v25;
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&buf[i]);
  v33 = v475;
  v34 = v476;
  while (v33 != (_QWORD *)v34)
  {
    v35 = (_QWORD *)*v33;
    v36 = (std::__shared_weak_count *)v33[1];
    *(_QWORD *)buf = *v33;
    *(_QWORD *)&buf[8] = v36;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    v35[3] = a1;
    ML3DatabaseImportDataSource::setImportItems(v35, a2);
    if (v36)
    {
      v39 = (unint64_t *)&v36->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v33 += 2;
  }
  if (!*(_BYTE *)(a1 + 1512))
  {
    if (objc_msgSend(*(id *)(a1 + 8), "downloadOnAddToLibrary"))
    {
      if ((*(_DWORD *)(a1 + 32) | 4) == 6)
      {
        v41 = *a2;
        v42 = a2[1];
        if (*a2 != v42)
        {
          do
          {
            v43 = *(_DWORD *)(a1 + 32) == 6
               || (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v41 + 32))(*v41, 184549430) != 0;
            v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v41 + 32))(*v41, 184549387);
            v45 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v41 + 32))(*v41, 184549395);
            v46 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v41 + 32))(*v41, 184549430);
            if (v43)
            {
              v47 = v46 && v44 == 0;
              if (v47 && v45 == 0)
              {
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT cloud_is_subscribed FROM container WHERE container_pid=%lld"), *(_QWORD *)(*v41 + 8));
                v49 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(*(id *)(a1 + 16), "executeQuery:", v49);
                v50 = (void *)objc_claimAutoreleasedReturnValue();
                v51 = objc_msgSend(v50, "int64ValueForFirstRowAndColumn") == 0;

                if (v51)
                {
                  v52 = *(_QWORD *)(*v41 + 8);
                  v53 = *(char **)(a1 + 560);
                  v54 = *(_QWORD *)(a1 + 568);
                  if ((unint64_t)v53 >= v54)
                  {
                    v56 = *(char **)(a1 + 552);
                    v57 = (v53 - v56) >> 3;
                    v58 = v57 + 1;
                    if ((unint64_t)(v57 + 1) >> 61)
                      std::vector<long long>::__throw_length_error[abi:ne180100]();
                    v59 = v54 - (_QWORD)v56;
                    if (v59 >> 2 > v58)
                      v58 = v59 >> 2;
                    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
                      v60 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v60 = v58;
                    if (v60)
                    {
                      v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v60);
                      v53 = *(char **)(a1 + 560);
                      v56 = *(char **)(a1 + 552);
                    }
                    else
                    {
                      v61 = 0;
                    }
                    v62 = (_QWORD *)(v60 + 8 * v57);
                    *v62 = v52;
                    v55 = v62 + 1;
                    while (v53 != v56)
                    {
                      v63 = *((_QWORD *)v53 - 1);
                      v53 -= 8;
                      *--v62 = v63;
                    }
                    *(_QWORD *)(a1 + 552) = v62;
                    *(_QWORD *)(a1 + 560) = v55;
                    *(_QWORD *)(a1 + 568) = v60 + 8 * v61;
                    if (v56)
                      operator delete(v56);
                  }
                  else
                  {
                    *(_QWORD *)v53 = v52;
                    v55 = v53 + 8;
                  }
                  *(_QWORD *)(a1 + 560) = v55;
                }

              }
            }
            v41 += 2;
          }
          while (v41 != v42);
        }
      }
    }
  }
  if ((ML3ImportSession::_performDatabaseImport(a1, (uint64_t)&v475) & 1) == 0)
  {
    v74 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v75 = "Database container import failed.";
LABEL_94:
      _os_log_impl(&dword_1AC149000, v74, OS_LOG_TYPE_ERROR, v75, buf, 2u);
    }
LABEL_95:

    v462 = 0;
    goto LABEL_96;
  }
  if (*(_QWORD *)(a1 + 560) != *(_QWORD *)(a1 + 552))
  {
    +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer");
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "statementWithPrefix:inParameterCount:", CFSTR("UPDATE container SET keep_local = ? WHERE ROWID"), (uint64_t)(*(_QWORD *)(a1 + 560) - *(_QWORD *)(a1 + 552)) >> 3);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", &unk_1E5BAC390);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = *(_QWORD **)(a1 + 552);
    for (j = *(_QWORD **)(a1 + 560); v67 != j; ++v67)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *v67);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v66, "addObject:", v69);

    }
    v70 = *(void **)(a1 + 16);
    *(_QWORD *)v496 = 0;
    v71 = objc_msgSend(v70, "executeUpdate:withParameters:error:", v65, v66, v496);
    v72 = *(id *)v496;
    v73 = v72;
    if ((v71 & 1) != 0)
    {
      *(_QWORD *)(a1 + 560) = *(_QWORD *)(a1 + 552);

      goto LABEL_87;
    }
    v76 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v73;
      _os_log_impl(&dword_1AC149000, v76, OS_LOG_TYPE_ERROR, "Failed to update containers for automatic download: %{public}@", buf, 0xCu);
    }

    *(_QWORD *)(a1 + 560) = *(_QWORD *)(a1 + 552);
    v74 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v75 = "failed to finalize container items for automatic download.";
      goto LABEL_94;
    }
    goto LABEL_95;
  }
LABEL_87:
  v462 = 1;
LABEL_96:
  v77 = v475;
  v78 = v476;
  while (v77 != v78)
  {
    v80 = (_QWORD *)*v77;
    v79 = (std::__shared_weak_count *)v77[1];
    if (v79)
    {
      v81 = (unint64_t *)&v79->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    v80[3] = 0;
    v84 = v80[6];
    for (k = v80[7]; k != v84; k = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](k - 16))
      ;
    v80[7] = v84;
    if (v79)
    {
      v85 = (unint64_t *)&v79->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v77 += 2;
  }
  if (objc_msgSend(*(id *)(a1 + 2560), "count"))
  {
    v463 = *(id *)(a1 + 2560);
    if (objc_msgSend(v463, "count"))
    {
      +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer");
      v465 = (void *)objc_claimAutoreleasedReturnValue();
      v87 = objc_msgSend(v463, "count");
      if (v87)
      {
        v88 = 0;
        v89 = 0;
        while (1)
        {
          v90 = v87 - v89 >= 0x64 ? 100 : v87 - v89;
          objc_msgSend(v463, "subarrayWithRange:", v89, v90);
          v91 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v465, "statementWithPrefix:inParameterCount:", CFSTR("DELETE FROM container_item WHERE ROWID"), v90);
          v92 = (void *)objc_claimAutoreleasedReturnValue();

          v93 = *(void **)(a1 + 16);
          *(_QWORD *)v496 = 0;
          v94 = objc_msgSend(v93, "executeUpdate:withParameters:error:", v92, v91, v496);
          v95 = *(id *)v496;
          if ((v94 & 1) == 0)
            break;
          objc_msgSend(v465, "statementWithPrefix:inParameterCount:", CFSTR("DELETE FROM container_item_person WHERE container_item_pid"), v90);
          v88 = (void *)objc_claimAutoreleasedReturnValue();

          v96 = *(void **)(a1 + 16);
          *(_QWORD *)&v529 = v95;
          v97 = objc_msgSend(v96, "executeUpdate:withParameters:error:", v88, v91, &v529);
          v98 = (id)v529;

          if ((v97 & 1) == 0)
          {
            v99 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              *(_QWORD *)&buf[4] = v98;
              _os_log_impl(&dword_1AC149000, v99, OS_LOG_TYPE_ERROR, "Failed to delete container_item_person rows with error: %{public}@", buf, 0xCu);
            }
            v92 = v88;
            v95 = v98;
            goto LABEL_126;
          }

          v89 += v90;
          if (v89 >= v87)
            goto LABEL_127;
        }
        v99 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v95;
          _os_log_impl(&dword_1AC149000, v99, OS_LOG_TYPE_ERROR, "Failed to delete container_item rows with error: %{public}@", buf, 0xCu);
        }
LABEL_126:

        v88 = v92;
LABEL_127:

      }
    }

  }
  if (!v462)
    goto LABEL_640;
  if (*(_QWORD *)(a1 + 2544) == *(_QWORD *)(a1 + 2536))
    goto LABEL_163;
  v100 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
  {
    v101 = (*(_QWORD *)(a1 + 2544) - *(_QWORD *)(a1 + 2536)) >> 4;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v101;
    _os_log_impl(&dword_1AC149000, v100, OS_LOG_TYPE_DEFAULT, "Flushing %d container items", buf, 8u);
  }

  v102 = operator new();
  *(_OWORD *)(v102 + 56) = 0u;
  *(_OWORD *)(v102 + 40) = 0u;
  *(_OWORD *)(v102 + 24) = 0u;
  *(_OWORD *)(v102 + 8) = 0u;
  *(_QWORD *)v102 = &off_1E5B50D28;
  *(_QWORD *)&v529 = v102;
  v103 = (std::__shared_weak_count *)operator new();
  v103->__shared_owners_ = 0;
  v104 = (unint64_t *)&v103->__shared_owners_;
  v103->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B52370;
  v103->__shared_weak_owners_ = 0;
  v103[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  *((_QWORD *)&v529 + 1) = v103;
  v105 = *(std::__shared_weak_count **)(v102 + 16);
  if (v105)
  {
    if (v105->__shared_owners_ != -1)
      goto LABEL_147;
    do
      v106 = __ldxr(v104);
    while (__stxr(v106 + 1, v104));
    v107 = (unint64_t *)&v103->__shared_weak_owners_;
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
    *(_QWORD *)(v102 + 8) = v102;
    *(_QWORD *)(v102 + 16) = v103;
    std::__shared_weak_count::__release_weak(v105);
  }
  else
  {
    do
      v109 = __ldxr(v104);
    while (__stxr(v109 + 1, v104));
    v110 = (unint64_t *)&v103->__shared_weak_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
    *(_QWORD *)(v102 + 8) = v102;
    *(_QWORD *)(v102 + 16) = v103;
  }
  do
    v112 = __ldaxr(v104);
  while (__stlxr(v112 - 1, v104));
  if (!v112)
  {
    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
    std::__shared_weak_count::__release_weak(v103);
  }
LABEL_147:
  *(_OWORD *)buf = 0uLL;
  v521 = 0;
  *(_QWORD *)v496 = buf;
  LOBYTE(v497) = 0;
  v113 = operator new(0x10uLL);
  *(_QWORD *)buf = v113;
  *(_QWORD *)&buf[8] = v113;
  v521 = (uint64_t)(v113 + 2);
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
  *v113 = v529;
  v113[1] = v114;
  if (v114)
  {
    v115 = (unint64_t *)&v114->__shared_owners_;
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
    *(_QWORD *)&buf[8] = v113 + 2;
    do
      v117 = __ldaxr(v115);
    while (__stlxr(v117 - 1, v115));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  else
  {
    *(_QWORD *)&buf[8] = v113 + 2;
  }
  v118 = ML3ImportSession::_flushImportItems(a1, a1 + 2536, buf);
  if ((v118 & 1) == 0)
  {
    v119 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v496 = 0;
      _os_log_impl(&dword_1AC149000, v119, OS_LOG_TYPE_ERROR, "Failed to flush container items", v496, 2u);
    }

  }
  v120 = *(_QWORD *)(a1 + 2544);
  v121 = *(_QWORD *)(a1 + 2536);
  while (v120 != v121)
    v120 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v120 - 16);
  *(_QWORD *)(a1 + 2544) = v121;
  *(_QWORD *)v496 = buf;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)v496);
  if (!v118)
    goto LABEL_640;
LABEL_163:
  v122 = *a2;
  v454 = a2[1];
  if (*a2 == v454)
    goto LABEL_256;
  v466 = (int64x2_t *)(a1 + 2568);
  do
  {
    v124 = (_QWORD *)*v122;
    v123 = (std::__shared_weak_count *)v122[1];
    v487 = (std::__shared_weak_count *)*v122;
    v488 = v123;
    v455 = v122;
    v456 = v123;
    if (v123)
    {
      v125 = (unint64_t *)&v123->__shared_owners_;
      do
        v126 = __ldxr(v125);
      while (__stxr(v126 + 1, v125));
      v474 = v123;
      do
        v127 = __ldxr(v125);
      while (__stxr(v127 + 1, v125));
    }
    else
    {
      v474 = 0;
    }
    v473[1] = v124;
    v128 = v124[1];
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v521 = 0x5812000000;
    v522 = (std::__shared_weak_count *)__Block_byref_object_copy__17831;
    v523 = __Block_byref_object_dispose__17832;
    v524 = 0u;
    v525 = 0u;
    v526 = 0;
    v527 = 1065353216;
    v129 = *(void **)(a1 + 16);
    v458 = v128;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:");
    v130 = (uint64_t *)objc_claimAutoreleasedReturnValue();
    v515 = v130;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v515, 1);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v129, "executeQuery:withParameters:", CFSTR("SELECT container_item_pid, position FROM container_item WHERE container_pid = ? ORDER BY position"), v131);
    v132 = (void *)objc_claimAutoreleasedReturnValue();

    v508 = MEMORY[0x1E0C809B0];
    v509 = 3221225472;
    v510 = ___ZN16ML3ImportSession38_prepareContainerItemPersonImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke;
    v511 = &unk_1E5B65200;
    v512 = buf;
    objc_msgSend(v132, "enumerateRowsWithBlock:", &v508);
    *(_QWORD *)v496 = 0;
    v497 = (uint64_t *)v496;
    v498 = 0x4812000000;
    v499 = __Block_byref_object_copy__418;
    v500 = __Block_byref_object_dispose__419;
    *(_QWORD *)&v501 = "";
    v502 = 0uLL;
    *((_QWORD *)&v501 + 1) = 0;
    (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(*v124 + 80))(v514, v124, 218103812);
    for (m = *(uint64_t **)v514; m != *(uint64_t **)&v514[8]; m += 2)
    {
      v134 = *m;
      v135 = m[1];
      *(_QWORD *)&v483 = *m;
      *((_QWORD *)&v483 + 1) = v135;
      if (v135)
      {
        v136 = (unint64_t *)(v135 + 8);
        do
          v137 = __ldxr(v136);
        while (__stxr(v137 + 1, v136));
      }
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v134 + 80))(&v505, v134, 369098759);
      v529 = 0u;
      v530 = 0u;
      LODWORD(v531) = 1065353216;
      for (n = (uint64_t *)v505; n != *((uint64_t **)&v505 + 1); n += 2)
      {
        v139 = *n;
        v140 = (std::__shared_weak_count *)n[1];
        *(_QWORD *)&v491 = *n;
        *((_QWORD *)&v491 + 1) = v140;
        if (v140)
        {
          v141 = (unint64_t *)&v140->__shared_owners_;
          do
            v142 = __ldxr(v141);
          while (__stxr(v142 + 1, v141));
        }
        (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v139 + 24))(v535, v139, 369098753);
        if (v535[8])
        {
          if ((v535[39] & 0x80000000) != 0)
            std::string::__init_copy_ctor_external(&v493, *(const std::string::value_type **)&v535[16], *(std::string::size_type *)&v535[24]);
          else
            v493 = *(std::string *)&v535[16];
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v529, (unsigned __int8 *)&v493, (uint64_t)&v493);
          if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v493.__r_.__value_.__l.__data_);
        }
        *(_QWORD *)v535 = off_1E5B4D010;
        if ((v535[39] & 0x80000000) != 0)
        {
          operator delete(*(void **)&v535[16]);
          if (!v140)
            continue;
        }
        else if (!v140)
        {
          continue;
        }
        v143 = (unint64_t *)&v140->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      v145 = v497;
      v146 = v497[7];
      if (v146 >= v497[8])
      {
        v147 = std::vector<std::unordered_set<std::string>>::__push_back_slow_path<std::unordered_set<std::string> const&>(v497 + 6, (uint64_t)&v529);
      }
      else
      {
        std::unordered_set<std::string>::unordered_set(v497[7], (uint64_t)&v529);
        v147 = v146 + 40;
        v145[7] = v146 + 40;
      }
      v145[7] = v147;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v530);
      v148 = (void *)v529;
      *(_QWORD *)&v529 = 0;
      if (v148)
        operator delete(v148);
      *(_QWORD *)&v529 = &v505;
      std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v529);
      v149 = (std::__shared_weak_count *)*((_QWORD *)&v483 + 1);
      if (*((_QWORD *)&v483 + 1))
      {
        v150 = (unint64_t *)(*((_QWORD *)&v483 + 1) + 8);
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
      }
    }
    v505 = 0u;
    v506 = 0u;
    LODWORD(v507) = 1065353216;
    v152 = *(void **)(a1 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v458);
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    v513.__r_.__value_.__r.__words[0] = (std::string::size_type)v153;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v513, 1);
    v154 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v152, "executeQuery:withParameters:", CFSTR("SELECT position, container_item_person_pid, cloud_id FROM container_item_person LEFT OUTER JOIN container_item USING (container_item_pid) JOIN person USING (person_pid) WHERE container_pid = ? ORDER BY position"), v154);
    v459 = (void *)objc_claimAutoreleasedReturnValue();

    *(_QWORD *)&v529 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v529 + 1) = 3221225472;
    *(_QWORD *)&v530 = ___ZN16ML3ImportSession38_prepareContainerItemPersonImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke_423;
    *((_QWORD *)&v530 + 1) = &unk_1E5B65228;
    v531 = v496;
    v532 = (const char *)a1;
    objc_msgSend(v459, "enumerateRowsWithBlock:", &v529);
    v482.__r_.__value_.__r.__words[0] = 0;
    v155 = v497[6];
    if (v497[7] != v155)
    {
      v156 = 0;
      do
      {
        std::unordered_set<std::string>::unordered_set((uint64_t)&v493, v155 + 40 * v156);
        v157 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(*(_QWORD *)&buf[8] + 48, v156, &v482);
        v158 = (uint64_t *)v493.__r_.__value_.__r.__words[2];
        if (v493.__r_.__value_.__r.__words[2])
        {
          v159 = v157[3];
          do
          {
            if (*((char *)v158 + 39) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v483, (const std::string::value_type *)v158[2], v158[3]);
            }
            else
            {
              v483 = *((_OWORD *)v158 + 1);
              v484.__r_.__value_.__r.__words[0] = v158[4];
            }
            *(_QWORD *)v535 = &v483;
            v160 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2448, (unsigned __int8 *)&v483, (__int128 **)v535)+ 5);
            if (v160)
            {
              v161 = operator new();
              v162 = objc_msgSend(*(id *)(a1 + 96), "nextPersistentID");
              *(_WORD *)(v161 + 16) = 256;
              *(_BYTE *)(v161 + 18) = 1;
              *(_OWORD *)(v161 + 24) = 0u;
              *(_OWORD *)(v161 + 40) = 0u;
              *(_DWORD *)(v161 + 56) = 1065353216;
              *(_QWORD *)(v161 + 64) = v162;
              *(_QWORD *)(v161 + 72) = v159;
              *(_QWORD *)(v161 + 80) = v160;
              *(_QWORD *)v161 = &off_1E5B4FB68;
              *(_QWORD *)(v161 + 8) = v162;
              *(_QWORD *)&v491 = v161;
              v163 = (_QWORD *)operator new();
              *v163 = &off_1E5B51E68;
              v163[1] = 0;
              v163[2] = 0;
              v163[3] = v161;
              *((_QWORD *)&v491 + 1) = v163;
              v164 = *(_OWORD **)(a1 + 2576);
              v165 = *(_QWORD *)(a1 + 2584);
              if ((unint64_t)v164 >= v165)
              {
                v169 = ((uint64_t)v164 - v466->i64[0]) >> 4;
                if ((unint64_t)(v169 + 1) >> 60)
                  std::vector<long long>::__throw_length_error[abi:ne180100]();
                v170 = v165 - v466->i64[0];
                v171 = v170 >> 3;
                if (v170 >> 3 <= (unint64_t)(v169 + 1))
                  v171 = v169 + 1;
                if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF0)
                  v172 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v172 = v171;
                *(_QWORD *)&v535[32] = a1 + 2584;
                v173 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v172);
                v175 = &v173[16 * v169];
                *(_OWORD *)v175 = v491;
                v491 = 0uLL;
                v176 = *(_QWORD **)(a1 + 2576);
                v177 = *(_QWORD **)(a1 + 2568);
                if (v176 == v177)
                {
                  v180 = vdupq_n_s64((unint64_t)v176);
                  v178 = &v173[16 * v169];
                }
                else
                {
                  v178 = &v173[16 * v169];
                  do
                  {
                    v179 = *((_OWORD *)v176 - 1);
                    v176 -= 2;
                    *((_OWORD *)v178 - 1) = v179;
                    v178 -= 16;
                    *v176 = 0;
                    v176[1] = 0;
                  }
                  while (v176 != v177);
                  v180 = *v466;
                }
                v166 = v175 + 16;
                *(_QWORD *)(a1 + 2568) = v178;
                *(_QWORD *)(a1 + 2576) = v175 + 16;
                *(int64x2_t *)&v535[8] = v180;
                v181 = *(_QWORD *)(a1 + 2584);
                *(_QWORD *)(a1 + 2584) = &v173[16 * v174];
                *(_QWORD *)&v535[24] = v181;
                *(_QWORD *)v535 = v180.i64[0];
                std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)v535);
              }
              else
              {
                *v164 = v491;
                v166 = v164 + 1;
              }
              *(_QWORD *)(a1 + 2576) = v166;
            }
            else
            {
              v167 = os_log_create("com.apple.amp.medialibrary", "Import");
              if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
              {
                if (v484.__r_.__value_.__s.__data_[7] >= 0)
                  v168 = &v483;
                else
                  v168 = (__int128 *)v483;
                *(_DWORD *)v535 = 136315138;
                *(_QWORD *)&v535[4] = v168;
                _os_log_impl(&dword_1AC149000, v167, OS_LOG_TYPE_DEFAULT, "Failed to look up person_pid for identifier %s", v535, 0xCu);
              }

            }
            if (v484.__r_.__value_.__s.__data_[7] < 0)
              operator delete((void *)v483);
            v158 = (uint64_t *)*v158;
          }
          while (v158);
          v182 = (void **)v493.__r_.__value_.__r.__words[2];
        }
        else
        {
          v182 = 0;
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v182);
        v183 = (void *)v493.__r_.__value_.__r.__words[0];
        v493.__r_.__value_.__r.__words[0] = 0;
        if (v183)
          operator delete(v183);
        v482.__r_.__value_.__r.__words[0] = ++v156;
        v155 = v497[6];
      }
      while (v156 < 0xCCCCCCCCCCCCCCCDLL * ((v497[7] - v155) >> 3));
    }
    std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v505);
    *(_QWORD *)v535 = v514;
    std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)v535);
    _Block_object_dispose(v496, 8);
    *(_QWORD *)v535 = (char *)&v501 + 8;
    std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v535);

    _Block_object_dispose(buf, 8);
    std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v524 + 8);
    if (v456)
    {
      v184 = (unint64_t *)&v456->__shared_owners_;
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
      {
        ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
        std::__shared_weak_count::__release_weak(v456);
      }
    }
    v186 = v488;
    if (v488)
    {
      v187 = (unint64_t *)&v488->__shared_owners_;
      do
        v188 = __ldaxr(v187);
      while (__stlxr(v188 - 1, v187));
      if (!v188)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
    }
    v122 = v455 + 2;
  }
  while (v455 + 2 != v454);
LABEL_256:
  if (*(_QWORD *)(a1 + 2576) != *(_QWORD *)(a1 + 2568))
  {
    v189 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
    {
      v190 = (*(_QWORD *)(a1 + 2576) - *(_QWORD *)(a1 + 2568)) >> 4;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v190;
      _os_log_impl(&dword_1AC149000, v189, OS_LOG_TYPE_DEFAULT, "Flushing %d container item persons", buf, 8u);
    }

    v191 = operator new();
    *(_QWORD *)(v191 + 8) = 0;
    *(_QWORD *)(v191 + 16) = 0;
    *(_OWORD *)(v191 + 24) = 0u;
    *(_OWORD *)(v191 + 40) = 0u;
    *(_OWORD *)(v191 + 56) = 0u;
    *(_QWORD *)v191 = &off_1E5B510D8;
    *(_QWORD *)&v529 = v191;
    v192 = (std::__shared_weak_count *)operator new();
    v192->__shared_owners_ = 0;
    v193 = (unint64_t *)&v192->__shared_owners_;
    v192->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B52488;
    v192->__shared_weak_owners_ = 0;
    v192[1].__vftable = (std::__shared_weak_count_vtbl *)v191;
    *((_QWORD *)&v529 + 1) = v192;
    v194 = *(std::__shared_weak_count **)(v191 + 16);
    if (!v194)
    {
      do
        v198 = __ldxr(v193);
      while (__stxr(v198 + 1, v193));
      v199 = (unint64_t *)&v192->__shared_weak_owners_;
      do
        v200 = __ldxr(v199);
      while (__stxr(v200 + 1, v199));
      *(_QWORD *)(v191 + 8) = v191;
      *(_QWORD *)(v191 + 16) = v192;
      goto LABEL_269;
    }
    if (v194->__shared_owners_ == -1)
    {
      do
        v195 = __ldxr(v193);
      while (__stxr(v195 + 1, v193));
      v196 = (unint64_t *)&v192->__shared_weak_owners_;
      do
        v197 = __ldxr(v196);
      while (__stxr(v197 + 1, v196));
      *(_QWORD *)(v191 + 8) = v191;
      *(_QWORD *)(v191 + 16) = v192;
      std::__shared_weak_count::__release_weak(v194);
      do
LABEL_269:
        v201 = __ldaxr(v193);
      while (__stlxr(v201 - 1, v193));
      if (!v201)
      {
        ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
        std::__shared_weak_count::__release_weak(v192);
      }
    }
    *(_OWORD *)buf = 0uLL;
    v521 = 0;
    *(_QWORD *)v496 = buf;
    LOBYTE(v497) = 0;
    v202 = operator new(0x10uLL);
    *(_QWORD *)buf = v202;
    *(_QWORD *)&buf[8] = v202;
    v521 = (uint64_t)(v202 + 2);
    v203 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
    *v202 = v529;
    v202[1] = v203;
    if (v203)
    {
      v204 = (unint64_t *)&v203->__shared_owners_;
      do
        v205 = __ldxr(v204);
      while (__stxr(v205 + 1, v204));
      *(_QWORD *)&buf[8] = v202 + 2;
      do
        v206 = __ldaxr(v204);
      while (__stlxr(v206 - 1, v204));
      if (!v206)
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
      }
    }
    else
    {
      *(_QWORD *)&buf[8] = v202 + 2;
    }
    v207 = ML3ImportSession::_flushImportItems(a1, a1 + 2568, buf);
    if ((v207 & 1) == 0)
    {
      v208 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v208, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v496 = 0;
        _os_log_impl(&dword_1AC149000, v208, OS_LOG_TYPE_ERROR, "Failed to flush container item persons", v496, 2u);
      }

    }
    v209 = *(_QWORD *)(a1 + 2576);
    v210 = *(_QWORD *)(a1 + 2568);
    while (v209 != v210)
      v209 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v209 - 16);
    *(_QWORD *)(a1 + 2576) = v210;
    *(_QWORD *)v496 = buf;
    std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)v496);
    if (!v207)
      goto LABEL_640;
  }
  if (objc_msgSend(*(id *)(a1 + 2592), "count"))
  {
    v211 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT))
    {
      v212 = objc_msgSend(*(id *)(a1 + 2592), "count");
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v212;
      _os_log_impl(&dword_1AC149000, v211, OS_LOG_TYPE_DEFAULT, "Removing %d container item persons", buf, 8u);
    }

    +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer");
    v213 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v213, "statementWithPrefix:inParameterCount:", CFSTR("DELETE FROM container_item_person WHERE ROWID"), objc_msgSend(*(id *)(a1 + 2592), "count"));
    v214 = (void *)objc_claimAutoreleasedReturnValue();
    v215 = *(void **)(a1 + 16);
    v216 = *(_QWORD *)(a1 + 2592);
    v473[0] = 0;
    v217 = objc_msgSend(v215, "executeUpdate:withParameters:error:", v214, v216, v473);
    v218 = v473[0];
    if ((v217 & 1) == 0)
    {
      v219 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v218;
        _os_log_impl(&dword_1AC149000, v219, OS_LOG_TYPE_ERROR, "Failed to remove container item persons. err=%{public}@", buf, 0xCu);
      }

    }
    objc_msgSend(*(id *)(a1 + 2592), "removeAllObjects");

    if (!v217)
      goto LABEL_640;
  }
  if (*(_QWORD *)(a1 + 2616) != *(_QWORD *)(a1 + 2608))
  {
    v220 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v220, OS_LOG_TYPE_DEFAULT))
    {
      v221 = (*(_QWORD *)(a1 + 2616) - *(_QWORD *)(a1 + 2608)) >> 4;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v221;
      _os_log_impl(&dword_1AC149000, v220, OS_LOG_TYPE_DEFAULT, "Flushing %d container authors", buf, 8u);
    }

    v222 = operator new();
    *(_QWORD *)(v222 + 8) = 0;
    *(_QWORD *)(v222 + 16) = 0;
    *(_OWORD *)(v222 + 24) = 0u;
    *(_OWORD *)(v222 + 40) = 0u;
    *(_OWORD *)(v222 + 56) = 0u;
    *(_QWORD *)v222 = &off_1E5B51038;
    *(_QWORD *)&v529 = v222;
    v223 = (std::__shared_weak_count *)operator new();
    v223->__shared_owners_ = 0;
    v224 = (unint64_t *)&v223->__shared_owners_;
    v223->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B52450;
    v223->__shared_weak_owners_ = 0;
    v223[1].__vftable = (std::__shared_weak_count_vtbl *)v222;
    *((_QWORD *)&v529 + 1) = v223;
    v225 = *(std::__shared_weak_count **)(v222 + 16);
    if (!v225)
    {
      do
        v229 = __ldxr(v224);
      while (__stxr(v229 + 1, v224));
      v230 = (unint64_t *)&v223->__shared_weak_owners_;
      do
        v231 = __ldxr(v230);
      while (__stxr(v231 + 1, v230));
      *(_QWORD *)(v222 + 8) = v222;
      *(_QWORD *)(v222 + 16) = v223;
      goto LABEL_309;
    }
    if (v225->__shared_owners_ == -1)
    {
      do
        v226 = __ldxr(v224);
      while (__stxr(v226 + 1, v224));
      v227 = (unint64_t *)&v223->__shared_weak_owners_;
      do
        v228 = __ldxr(v227);
      while (__stxr(v228 + 1, v227));
      *(_QWORD *)(v222 + 8) = v222;
      *(_QWORD *)(v222 + 16) = v223;
      std::__shared_weak_count::__release_weak(v225);
      do
LABEL_309:
        v232 = __ldaxr(v224);
      while (__stlxr(v232 - 1, v224));
      if (!v232)
      {
        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
        std::__shared_weak_count::__release_weak(v223);
      }
    }
    *(_OWORD *)buf = 0uLL;
    v521 = 0;
    *(_QWORD *)v496 = buf;
    LOBYTE(v497) = 0;
    v233 = operator new(0x10uLL);
    *(_QWORD *)buf = v233;
    *(_QWORD *)&buf[8] = v233;
    v521 = (uint64_t)(v233 + 2);
    v234 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
    *v233 = v529;
    v233[1] = v234;
    if (v234)
    {
      v235 = (unint64_t *)&v234->__shared_owners_;
      do
        v236 = __ldxr(v235);
      while (__stxr(v236 + 1, v235));
      *(_QWORD *)&buf[8] = v233 + 2;
      do
        v237 = __ldaxr(v235);
      while (__stlxr(v237 - 1, v235));
      if (!v237)
      {
        ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
        std::__shared_weak_count::__release_weak(v234);
      }
    }
    else
    {
      *(_QWORD *)&buf[8] = v233 + 2;
    }
    v238 = ML3ImportSession::_flushImportItems(a1, a1 + 2608, buf);
    if ((v238 & 1) == 0)
    {
      v239 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v239, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v496 = 0;
        _os_log_impl(&dword_1AC149000, v239, OS_LOG_TYPE_ERROR, "Failed to flush container authors", v496, 2u);
      }

    }
    v240 = *(_QWORD *)(a1 + 2616);
    v241 = *(_QWORD *)(a1 + 2608);
    while (v240 != v241)
      v240 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v240 - 16);
    *(_QWORD *)(a1 + 2616) = v241;
    *(_QWORD *)v496 = buf;
    std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)v496);
    if (!v238)
      goto LABEL_640;
  }
  if (objc_msgSend(*(id *)(a1 + 2632), "count"))
  {
    v242 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v242, OS_LOG_TYPE_DEFAULT))
    {
      v243 = objc_msgSend(*(id *)(a1 + 2632), "count");
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v243;
      _os_log_impl(&dword_1AC149000, v242, OS_LOG_TYPE_DEFAULT, "Removing %d container authors", buf, 8u);
    }

    +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer");
    v244 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v244, "statementWithPrefix:inParameterCount:", CFSTR("DELETE FROM container_author WHERE ROWID"), objc_msgSend(*(id *)(a1 + 2632), "count"));
    v245 = (void *)objc_claimAutoreleasedReturnValue();
    v246 = *(void **)(a1 + 16);
    v247 = *(_QWORD *)(a1 + 2632);
    v472 = 0;
    v248 = objc_msgSend(v246, "executeUpdate:withParameters:error:", v245, v247, &v472);
    v249 = v472;
    if ((v248 & 1) == 0)
    {
      v250 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v249;
        _os_log_impl(&dword_1AC149000, v250, OS_LOG_TYPE_ERROR, "Failed to remove container authors. err=%{public}@", buf, 0xCu);
      }

    }
    objc_msgSend(*(id *)(a1 + 2632), "removeAllObjects");

    if (!v248)
      goto LABEL_640;
  }
  v251 = *a2;
  v449 = a2[1];
  if (*a2 != v449)
  {
    do
    {
      v253 = (_QWORD *)*v251;
      v252 = (std::__shared_weak_count *)v251[1];
      v470 = *v251;
      v471 = v252;
      v450 = v251;
      v451 = v252;
      if (v252)
      {
        v254 = (unint64_t *)&v252->__shared_owners_;
        do
          v255 = __ldxr(v254);
        while (__stxr(v255 + 1, v254));
        v469 = v252;
        do
          v256 = __ldxr(v254);
        while (__stxr(v256 + 1, v254));
      }
      else
      {
        v469 = 0;
      }
      v468[1] = v253;
      v257 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v257, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v257, OS_LOG_TYPE_DEFAULT, "Preparing container reactions", buf, 2u);
      }

      v258 = v253[1];
      *(_QWORD *)&v529 = 0;
      *((_QWORD *)&v529 + 1) = &v529;
      *(_QWORD *)&v530 = 0x4812000000;
      *((_QWORD *)&v530 + 1) = __Block_byref_object_copy__434;
      v531 = (uint8_t *)__Block_byref_object_dispose__435;
      v534[0] = 0;
      v534[1] = 0;
      v532 = "";
      v533 = v534;
      v259 = *(void **)(a1 + 16);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v258);
      v260 = (void *)objc_claimAutoreleasedReturnValue();
      v528 = v260;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v528, 1);
      v261 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v259, "executeQuery:withParameters:", CFSTR("SELECT container_item_pid, position, container_item_reaction_pid, cloud_id, date FROM container_item_reaction JOIN container_item USING (container_item_pid) LEFT OUTER JOIN person USING (person_pid) WHERE container_item.container_pid = ?"), v261);
      v452 = (void *)objc_claimAutoreleasedReturnValue();

      v508 = MEMORY[0x1E0C809B0];
      v509 = 3221225472;
      v510 = ___ZN16ML3ImportSession40_prepareContainerItemReactionImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke;
      v511 = &unk_1E5B65200;
      v512 = (uint8_t *)&v529;
      objc_msgSend(v452, "enumerateRowsWithBlock:", &v508);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v521 = 0x5812000000;
      v522 = (std::__shared_weak_count *)__Block_byref_object_copy__17831;
      v523 = __Block_byref_object_dispose__17832;
      v524 = 0u;
      v525 = 0u;
      v526 = 0;
      v527 = 1065353216;
      v262 = *(void **)(a1 + 16);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v258);
      v263 = (void *)objc_claimAutoreleasedReturnValue();
      v519 = v263;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v519, 1);
      v264 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v262, "executeQuery:withParameters:", CFSTR("SELECT container_item_pid, position FROM container_item WHERE container_pid = ? ORDER BY position"), v264);
      v265 = (void *)objc_claimAutoreleasedReturnValue();

      *(_QWORD *)&v505 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v505 + 1) = 3221225472;
      *(_QWORD *)&v506 = ___ZN16ML3ImportSession40_prepareContainerItemReactionImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke_2;
      *((_QWORD *)&v506 + 1) = &unk_1E5B65200;
      v507 = buf;
      objc_msgSend(v265, "enumerateRowsWithBlock:", &v505);
      *(_QWORD *)v496 = 0;
      v497 = (uint64_t *)v496;
      v498 = 0x5812000000;
      v499 = __Block_byref_object_copy__424;
      v500 = __Block_byref_object_dispose__425;
      v501 = 0u;
      v502 = 0u;
      v503 = 0;
      v504 = 1065353216;
      v266 = *(void **)(a1 + 16);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v258);
      v267 = (void *)objc_claimAutoreleasedReturnValue();
      v518 = v267;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v518, 1);
      v268 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v266, "executeQuery:withParameters:", CFSTR("SELECT person_pid, cloud_id FROM person JOIN container_author USING (person_pid) JOIN container USING (container_pid) WHERE container_pid = ?"), v268);
      v453 = (void *)objc_claimAutoreleasedReturnValue();

      v493.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
      v493.__r_.__value_.__l.__size_ = 3221225472;
      v493.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN16ML3ImportSession40_prepareContainerItemReactionImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke_3;
      v494 = &unk_1E5B65200;
      v495 = v496;
      objc_msgSend(v453, "enumerateRowsWithBlock:", &v493);
      v492 = 0;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v253 + 80))(&v491, v253, 218103812);
      for (ii = (_QWORD *)v491; ii != *((_QWORD **)&v491 + 1); ii = v457 + 2)
      {
        v270 = *ii;
        v271 = (std::__shared_weak_count *)ii[1];
        v457 = ii;
        v489 = *ii;
        v490 = v271;
        if (v271)
        {
          v272 = (unint64_t *)&v271->__shared_owners_;
          do
            v273 = __ldxr(v272);
          while (__stxr(v273 + 1, v272));
        }
        (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v270 + 80))(&v487, v270, 234881033);
        v274 = (uint64_t *)v492;
        v461 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(*(_QWORD *)&buf[8] + 48, v492, &v492)[3];
        if (!v461)
        {
          v383 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v383, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v535 = 134217984;
            *(_QWORD *)&v535[4] = v274;
            _os_log_impl(&dword_1AC149000, v383, OS_LOG_TYPE_ERROR, "no mapping for container item position %lld - skipping reactions", v535, 0xCu);
          }

          goto LABEL_557;
        }
        v275 = std::map<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>::operator[]((uint64_t **)(*((_QWORD *)&v529 + 1) + 48), v274);
        std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::map[abi:ne180100]((uint64_t)&v515, v275);
        v276 = v487;
LABEL_353:
        if (v276 != v488)
        {
          v278 = v276->__vftable;
          shared_owners = (std::__shared_weak_count *)v276->__shared_owners_;
          v485 = v276->__vftable;
          v486 = shared_owners;
          if (shared_owners)
          {
            v279 = (unint64_t *)&shared_owners->__shared_owners_;
            do
              v280 = __ldxr(v279);
            while (__stxr(v280 + 1, v279));
          }
          (*((void (**)(_BYTE *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v278->~__shared_weak_count
           + 3))(v514, v278, 268435457);
          if (!v514[8])
          {
            v281 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v281, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v535 = 0;
              _os_log_impl(&dword_1AC149000, v281, OS_LOG_TYPE_ERROR, "Found reaction item with no social profile identifier - ignoring", v535, 2u);
            }

            goto LABEL_527;
          }
          if ((v514[39] & 0x80000000) != 0)
            std::string::__init_copy_ctor_external(&v513, *(const std::string::value_type **)&v514[16], *(std::string::size_type *)&v514[24]);
          else
            v513 = *(std::string *)&v514[16];
          (*((void (**)(__int128 *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v278->~__shared_weak_count
           + 3))(&v483, v278, 268435458);
          v282 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *, uint64_t))v278->~__shared_weak_count + 4))(v278, 268435459);
          *(_QWORD *)v535 = &v513;
          v283 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v497 + 6), (unsigned __int8 *)&v513, (__int128 **)v535)+ 5);
          if (!v283)
          {
            v292 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v292, OS_LOG_TYPE_ERROR))
            {
              v293 = &v513;
              if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v293 = (std::string *)v513.__r_.__value_.__r.__words[0];
              *(_DWORD *)v535 = 136315138;
              *(_QWORD *)&v535[4] = v293;
              _os_log_impl(&dword_1AC149000, v292, OS_LOG_TYPE_ERROR, "no mapping for person identifier %s - skipping reactions", v535, 0xCu);
            }

            goto LABEL_523;
          }
          if (&v516 == std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::find<std::string>((uint64_t)&v515, &v513))
          {
            v294 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v294, OS_LOG_TYPE_DEFAULT))
            {
              v295 = v492;
              if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v296 = &v513;
              else
                v296 = (std::string *)v513.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v482, v484.__r_.__value_.__l.__data_, v484.__r_.__value_.__l.__size_);
              else
                v482 = v484;
              v297 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v297 = (std::string *)v482.__r_.__value_.__r.__words[0];
              *(_DWORD *)v535 = 134218498;
              *(_QWORD *)&v535[4] = v295;
              *(_WORD *)&v535[12] = 2080;
              *(_QWORD *)&v535[14] = v296;
              *(_WORD *)&v535[22] = 2080;
              *(_QWORD *)&v535[24] = v297;
              _os_log_impl(&dword_1AC149000, v294, OS_LOG_TYPE_DEFAULT, "Adding new reaction on track %lld from %s: %s", v535, 0x20u);
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v482.__r_.__value_.__l.__data_);
            }

            v298 = operator new();
            v299 = objc_msgSend(*(id *)(a1 + 144), "nextPersistentID");
            if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v481, v484.__r_.__value_.__l.__data_, v484.__r_.__value_.__l.__size_);
            else
              v481 = v484;
            ML3ContainerItemReactionImportItem::ML3ContainerItemReactionImportItem(v298, v299, v461, v283, (__int128 *)&v481, v282);
            v482.__r_.__value_.__r.__words[0] = v298;
            v300 = (_QWORD *)operator new();
            *v300 = &off_1E5B52098;
            v300[1] = 0;
            v300[2] = 0;
            v300[3] = v298;
            v482.__r_.__value_.__l.__size_ = (std::string::size_type)v300;
            v301 = *(_OWORD **)(a1 + 2648);
            v302 = *(_QWORD *)(a1 + 2656);
            if ((unint64_t)v301 >= v302)
            {
              v304 = *(_QWORD *)(a1 + 2640);
              v305 = ((uint64_t)v301 - v304) >> 4;
              if ((unint64_t)(v305 + 1) >> 60)
                std::vector<long long>::__throw_length_error[abi:ne180100]();
              v306 = v302 - v304;
              v307 = v306 >> 3;
              if (v306 >> 3 <= (unint64_t)(v305 + 1))
                v307 = v305 + 1;
              if ((unint64_t)v306 >= 0x7FFFFFFFFFFFFFF0)
                v308 = 0xFFFFFFFFFFFFFFFLL;
              else
                v308 = v307;
              *(_QWORD *)&v535[32] = a1 + 2656;
              v309 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v308);
              v311 = &v309[16 * v305];
              *(_OWORD *)v311 = *(_OWORD *)&v482.__r_.__value_.__l.__data_;
              *(_OWORD *)&v482.__r_.__value_.__l.__data_ = 0uLL;
              v312 = *(_QWORD **)(a1 + 2648);
              v313 = *(_QWORD **)(a1 + 2640);
              if (v312 == v313)
              {
                v316 = vdupq_n_s64((unint64_t)v312);
                v314 = &v309[16 * v305];
              }
              else
              {
                v314 = &v309[16 * v305];
                do
                {
                  v315 = *((_OWORD *)v312 - 1);
                  v312 -= 2;
                  *((_OWORD *)v314 - 1) = v315;
                  v314 -= 16;
                  *v312 = 0;
                  v312[1] = 0;
                }
                while (v312 != v313);
                v316 = *(int64x2_t *)(a1 + 2640);
              }
              v303 = v311 + 16;
              *(_QWORD *)(a1 + 2640) = v314;
              *(_QWORD *)(a1 + 2648) = v311 + 16;
              *(int64x2_t *)&v535[8] = v316;
              v317 = *(_QWORD *)(a1 + 2656);
              *(_QWORD *)(a1 + 2656) = &v309[16 * v310];
              *(_QWORD *)&v535[24] = v317;
              *(_QWORD *)v535 = v316.i64[0];
              std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)v535);
            }
            else
            {
              *v301 = *(_OWORD *)&v482.__r_.__value_.__l.__data_;
              v303 = v301 + 1;
            }
            *(_QWORD *)(a1 + 2648) = v303;
            if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v481.__r_.__value_.__l.__data_);
            goto LABEL_523;
          }
          v284 = std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::operator[](&v515, (uint64_t)&v513);
          v286 = (uint64_t *)*v284;
          v285 = (std::__shared_weak_count *)v284[1];
          v479 = *v284;
          v480 = v285;
          if (v285)
          {
            v287 = (unint64_t *)&v285->__shared_owners_;
            do
              v288 = __ldxr(v287);
            while (__stxr(v288 + 1, v287));
          }
          if (v282 != v286[5])
          {
            v289 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v289, OS_LOG_TYPE_DEFAULT))
            {
              v290 = v492;
              if ((v513.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v291 = &v513;
              else
                v291 = (std::string *)v513.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v482, v484.__r_.__value_.__l.__data_, v484.__r_.__value_.__l.__size_);
              else
                v482 = v484;
              v318 = &v482;
              if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v318 = (std::string *)v482.__r_.__value_.__r.__words[0];
              *(_DWORD *)v535 = 134218498;
              *(_QWORD *)&v535[4] = v290;
              *(_WORD *)&v535[12] = 2080;
              *(_QWORD *)&v535[14] = v291;
              *(_WORD *)&v535[22] = 2080;
              *(_QWORD *)&v535[24] = v318;
              _os_log_impl(&dword_1AC149000, v289, OS_LOG_TYPE_DEFAULT, "Updating reaction on track %lld from %s: %s", v535, 0x20u);
              if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v482.__r_.__value_.__l.__data_);
            }

            v319 = operator new();
            v320 = *v286;
            if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v478, v484.__r_.__value_.__l.__data_, v484.__r_.__value_.__l.__size_);
            else
              v478 = v484;
            ML3ContainerItemReactionImportItem::ML3ContainerItemReactionImportItem(v319, v320, v461, v283, (__int128 *)&v478, v282);
            v482.__r_.__value_.__r.__words[0] = v319;
            v321 = (_QWORD *)operator new();
            *v321 = &off_1E5B52098;
            v321[1] = 0;
            v321[2] = 0;
            v321[3] = v319;
            v482.__r_.__value_.__l.__size_ = (std::string::size_type)v321;
            v322 = *(_OWORD **)(a1 + 2648);
            v323 = *(_QWORD *)(a1 + 2656);
            if ((unint64_t)v322 >= v323)
            {
              v325 = *(_QWORD *)(a1 + 2640);
              v326 = ((uint64_t)v322 - v325) >> 4;
              if ((unint64_t)(v326 + 1) >> 60)
                std::vector<long long>::__throw_length_error[abi:ne180100]();
              v327 = v323 - v325;
              v328 = v327 >> 3;
              if (v327 >> 3 <= (unint64_t)(v326 + 1))
                v328 = v326 + 1;
              if ((unint64_t)v327 >= 0x7FFFFFFFFFFFFFF0)
                v329 = 0xFFFFFFFFFFFFFFFLL;
              else
                v329 = v328;
              *(_QWORD *)&v535[32] = a1 + 2656;
              v330 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v329);
              v332 = &v330[16 * v326];
              *(_OWORD *)v332 = *(_OWORD *)&v482.__r_.__value_.__l.__data_;
              *(_OWORD *)&v482.__r_.__value_.__l.__data_ = 0uLL;
              v333 = *(_QWORD **)(a1 + 2648);
              v334 = *(_QWORD **)(a1 + 2640);
              if (v333 == v334)
              {
                v337 = vdupq_n_s64((unint64_t)v333);
                v335 = &v330[16 * v326];
              }
              else
              {
                v335 = &v330[16 * v326];
                do
                {
                  v336 = *((_OWORD *)v333 - 1);
                  v333 -= 2;
                  *((_OWORD *)v335 - 1) = v336;
                  v335 -= 16;
                  *v333 = 0;
                  v333[1] = 0;
                }
                while (v333 != v334);
                v337 = *(int64x2_t *)(a1 + 2640);
              }
              v324 = v332 + 16;
              *(_QWORD *)(a1 + 2640) = v335;
              *(_QWORD *)(a1 + 2648) = v332 + 16;
              *(int64x2_t *)&v535[8] = v337;
              v338 = *(_QWORD *)(a1 + 2656);
              *(_QWORD *)(a1 + 2656) = &v330[16 * v331];
              *(_QWORD *)&v535[24] = v338;
              *(_QWORD *)v535 = v337.i64[0];
              std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)v535);
            }
            else
            {
              *v322 = *(_OWORD *)&v482.__r_.__value_.__l.__data_;
              v324 = v322 + 1;
            }
            *(_QWORD *)(a1 + 2648) = v324;
            if (SHIBYTE(v478.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v478.__r_.__value_.__l.__data_);
          }
          v339 = std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::find<std::string>((uint64_t)&v515, &v513);
          if (&v516 == (uint64_t **)v339)
            goto LABEL_518;
          v340 = v339;
          v341 = (uint64_t *)v339[1];
          v342 = v341;
          if (v341)
          {
            do
            {
              v343 = v342;
              v342 = (uint64_t *)*v342;
            }
            while (v342);
          }
          else
          {
            v344 = v339;
            do
            {
              v343 = (uint64_t *)v344[2];
              v47 = *v343 == (_QWORD)v344;
              v344 = v343;
            }
            while (!v47);
          }
          if (v515 == v339)
            v515 = v343;
          --v517;
          if (*v339)
          {
            if (v341)
            {
              do
              {
                v345 = v341;
                v341 = (uint64_t *)*v341;
              }
              while (v341);
              v341 = (uint64_t *)v345[1];
              if (!v341)
              {
LABEL_450:
                v346 = 1;
LABEL_453:
                v347 = v516;
                v348 = (uint64_t **)v345[2];
                v349 = *v348;
                if (*v348 == v345)
                {
                  *v348 = v341;
                  if (v345 == v347)
                  {
                    v349 = 0;
                    v347 = v341;
                  }
                  else
                  {
                    v349 = v348[1];
                  }
                }
                else
                {
                  v348[1] = v341;
                }
                v350 = *((unsigned __int8 *)v345 + 24);
                if (v345 != v339)
                {
                  v351 = v339[2];
                  v345[2] = v351;
                  *(_QWORD *)(v351 + 8 * (*(_QWORD *)v339[2] != (_QWORD)v339)) = v345;
                  v352 = (_QWORD *)*v339;
                  *v345 = *v339;
                  v352[2] = v345;
                  v353 = v339[1];
                  v345[1] = v353;
                  if (v353)
                    *(_QWORD *)(v353 + 16) = v345;
                  *((_BYTE *)v345 + 24) = *((_BYTE *)v339 + 24);
                  if (v347 == v339)
                    v347 = v345;
                }
                if (!v350 || !v347)
                  goto LABEL_517;
                if (!v346)
                {
                  *((_BYTE *)v341 + 24) = 1;
                  goto LABEL_517;
                }
                while (1)
                {
                  v354 = v349[2];
                  if (*(uint64_t **)v354 == v349)
                  {
                    if (!*((_BYTE *)v349 + 24))
                    {
                      *((_BYTE *)v349 + 24) = 1;
                      *(_BYTE *)(v354 + 24) = 0;
                      v360 = v349[1];
                      *(_QWORD *)v354 = v360;
                      if (v360)
                        *(_QWORD *)(v360 + 16) = v354;
                      v349[2] = *(_QWORD *)(v354 + 16);
                      *(_QWORD *)(*(_QWORD *)(v354 + 16) + 8 * (**(_QWORD **)(v354 + 16) != v354)) = v349;
                      v349[1] = v354;
                      *(_QWORD *)(v354 + 16) = v349;
                      if (v347 == (uint64_t *)v354)
                        v347 = v349;
                      v349 = *(uint64_t **)v354;
                    }
                    v361 = *v349;
                    if (*v349 && !*(_BYTE *)(v361 + 24))
                      goto LABEL_512;
                    v362 = (uint64_t *)v349[1];
                    if (v362 && !*((_BYTE *)v362 + 24))
                    {
                      if (v361 && !*(_BYTE *)(v361 + 24))
                      {
LABEL_512:
                        v362 = v349;
                      }
                      else
                      {
                        *((_BYTE *)v362 + 24) = 1;
                        *((_BYTE *)v349 + 24) = 0;
                        v368 = *v362;
                        v349[1] = *v362;
                        if (v368)
                          *(_QWORD *)(v368 + 16) = v349;
                        v362[2] = v349[2];
                        *(_QWORD *)(v349[2] + 8 * (*(_QWORD *)v349[2] != (_QWORD)v349)) = v362;
                        *v362 = (uint64_t)v349;
                        v349[2] = (uint64_t)v362;
                        v361 = (uint64_t)v349;
                      }
                      v365 = v362[2];
                      *((_BYTE *)v362 + 24) = *(_BYTE *)(v365 + 24);
                      *(_BYTE *)(v365 + 24) = 1;
                      *(_BYTE *)(v361 + 24) = 1;
                      v366 = *(uint64_t **)v365;
                      v369 = *(_QWORD *)(*(_QWORD *)v365 + 8);
                      *(_QWORD *)v365 = v369;
                      if (v369)
                        *(_QWORD *)(v369 + 16) = v365;
                      v366[2] = *(_QWORD *)(v365 + 16);
                      *(_QWORD *)(*(_QWORD *)(v365 + 16) + 8 * (**(_QWORD **)(v365 + 16) != v365)) = v366;
                      v366[1] = v365;
                      goto LABEL_516;
                    }
                    *((_BYTE *)v349 + 24) = 0;
                    v359 = (uint64_t *)v349[2];
                    if (*((_BYTE *)v359 + 24))
                      v363 = v359 == v347;
                    else
                      v363 = 1;
                    if (v363)
                      goto LABEL_497;
                  }
                  else
                  {
                    if (!*((_BYTE *)v349 + 24))
                    {
                      *((_BYTE *)v349 + 24) = 1;
                      *(_BYTE *)(v354 + 24) = 0;
                      v355 = *(uint64_t **)(v354 + 8);
                      v356 = *v355;
                      *(_QWORD *)(v354 + 8) = *v355;
                      if (v356)
                        *(_QWORD *)(v356 + 16) = v354;
                      v355[2] = *(_QWORD *)(v354 + 16);
                      *(_QWORD *)(*(_QWORD *)(v354 + 16) + 8 * (**(_QWORD **)(v354 + 16) != v354)) = v355;
                      *v355 = v354;
                      *(_QWORD *)(v354 + 16) = v355;
                      if (v347 == (uint64_t *)*v349)
                        v347 = v349;
                      v349 = *(uint64_t **)(*v349 + 8);
                    }
                    v357 = *v349;
                    if (*v349 && !*(_BYTE *)(v357 + 24))
                    {
                      v358 = (uint64_t *)v349[1];
                      if (v358 && !*((_BYTE *)v358 + 24))
                      {
LABEL_503:
                        v357 = (uint64_t)v349;
                      }
                      else
                      {
                        *(_BYTE *)(v357 + 24) = 1;
                        *((_BYTE *)v349 + 24) = 0;
                        v364 = *(_QWORD *)(v357 + 8);
                        *v349 = v364;
                        if (v364)
                          *(_QWORD *)(v364 + 16) = v349;
                        *(_QWORD *)(v357 + 16) = v349[2];
                        *(_QWORD *)(v349[2] + 8 * (*(_QWORD *)v349[2] != (_QWORD)v349)) = v357;
                        *(_QWORD *)(v357 + 8) = v349;
                        v349[2] = v357;
                        v358 = v349;
                      }
                      v365 = *(_QWORD *)(v357 + 16);
                      *(_BYTE *)(v357 + 24) = *(_BYTE *)(v365 + 24);
                      *(_BYTE *)(v365 + 24) = 1;
                      *((_BYTE *)v358 + 24) = 1;
                      v366 = *(uint64_t **)(v365 + 8);
                      v367 = *v366;
                      *(_QWORD *)(v365 + 8) = *v366;
                      if (v367)
                        *(_QWORD *)(v367 + 16) = v365;
                      v366[2] = *(_QWORD *)(v365 + 16);
                      *(_QWORD *)(*(_QWORD *)(v365 + 16) + 8 * (**(_QWORD **)(v365 + 16) != v365)) = v366;
                      *v366 = v365;
LABEL_516:
                      *(_QWORD *)(v365 + 16) = v366;
LABEL_517:
                      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ML3ComposerData>>,0>((uint64_t)(v339 + 4));
                      operator delete(v340);
LABEL_518:
                      if (v285)
                      {
                        v370 = (unint64_t *)&v285->__shared_owners_;
                        do
                          v371 = __ldaxr(v370);
                        while (__stlxr(v371 - 1, v370));
                        if (!v371)
                        {
                          ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                          std::__shared_weak_count::__release_weak(v285);
                        }
                      }
LABEL_523:
                      *(_QWORD *)&v483 = off_1E5B4D010;
                      if (SHIBYTE(v484.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v484.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v513.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v513.__r_.__value_.__l.__data_);
LABEL_527:
                      *(_QWORD *)v514 = off_1E5B4D010;
                      if ((v514[39] & 0x80000000) != 0)
                        operator delete(*(void **)&v514[16]);
                      v372 = v486;
                      if (v486)
                      {
                        v373 = (unint64_t *)&v486->__shared_owners_;
                        do
                          v374 = __ldaxr(v373);
                        while (__stlxr(v374 - 1, v373));
                        if (!v374)
                        {
                          ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                          std::__shared_weak_count::__release_weak(v372);
                        }
                      }
                      v276 = (std::__shared_weak_count *)((char *)v276 + 16);
                      goto LABEL_353;
                    }
                    v358 = (uint64_t *)v349[1];
                    if (v358 && !*((_BYTE *)v358 + 24))
                      goto LABEL_503;
                    *((_BYTE *)v349 + 24) = 0;
                    v359 = (uint64_t *)v349[2];
                    if (v359 == v347)
                    {
                      v359 = v347;
LABEL_497:
                      *((_BYTE *)v359 + 24) = 1;
                      goto LABEL_517;
                    }
                    if (!*((_BYTE *)v359 + 24))
                      goto LABEL_497;
                  }
                  v349 = *(uint64_t **)(v359[2] + 8 * (*(_QWORD *)v359[2] == (_QWORD)v359));
                }
              }
            }
            else
            {
              v341 = (uint64_t *)*v339;
              v345 = v339;
            }
          }
          else
          {
            v345 = v339;
            if (!v341)
              goto LABEL_450;
          }
          v346 = 0;
          v341[2] = v345[2];
          goto LABEL_453;
        }
        v375 = *(_QWORD **)(*((_QWORD *)&v529 + 1) + 56);
        if (!v375)
        {
          v381 = v517;
          v376 = (uint64_t *)v492;
LABEL_554:
          if (v381)
            goto LABEL_555;
          goto LABEL_556;
        }
        v376 = (uint64_t *)v492;
        v377 = *((_QWORD *)&v529 + 1) + 56;
        do
        {
          v378 = v375[4];
          v379 = v378 < v492;
          if (v378 >= v492)
            v380 = v375;
          else
            v380 = v375 + 1;
          if (!v379)
            v377 = (uint64_t)v375;
          v375 = (_QWORD *)*v380;
        }
        while (*v380);
        v381 = v517;
        if (v377 == *((_QWORD *)&v529 + 1) + 56)
          goto LABEL_554;
        if (v492 >= *(_QWORD *)(v377 + 32) || v517 != 0)
        {
LABEL_555:
          v384 = std::map<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>::operator[]((uint64_t **)(*((_QWORD *)&v529 + 1) + 48), v376);
          std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::operator=[abi:ne180100]((uint64_t)v384, &v515);
        }
LABEL_556:
        v492 = (int64_t)v376 + 1;
        std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(v516);
        v271 = v490;
LABEL_557:
        *(_QWORD *)v535 = &v487;
        std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)v535);
        if (v271)
        {
          v385 = (unint64_t *)&v271->__shared_owners_;
          do
            v386 = __ldaxr(v385);
          while (__stlxr(v386 - 1, v385));
          if (!v386)
          {
            ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
            std::__shared_weak_count::__release_weak(v271);
          }
        }
      }
      v387 = *(_QWORD **)(*((_QWORD *)&v529 + 1) + 48);
      if (v387 != (_QWORD *)(*((_QWORD *)&v529 + 1) + 56))
      {
        do
        {
          std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::map[abi:ne180100]((uint64_t)v535, v387 + 5);
          v388 = *(_QWORD **)v535;
          if (*(_BYTE **)v535 != &v535[8])
          {
            do
            {
              v390 = (uint64_t *)v388[7];
              v389 = (std::__shared_weak_count *)v388[8];
              *(_QWORD *)&v483 = v390;
              *((_QWORD *)&v483 + 1) = v389;
              if (v389)
              {
                v391 = (unint64_t *)&v389->__shared_owners_;
                do
                  v392 = __ldxr(v391);
                while (__stxr(v392 + 1, v391));
              }
              v393 = *(void **)(a1 + 2664);
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *v390);
              v394 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v393, "addObject:", v394);

              v395 = os_log_create("com.apple.amp.medialibrary", "Import");
              if (os_log_type_enabled(v395, OS_LOG_TYPE_DEFAULT))
              {
                v396 = v390 + 2;
                if (*((char *)v390 + 39) < 0)
                  v396 = (_QWORD *)*v396;
                v397 = *v390;
                *(_DWORD *)v514 = 134218242;
                *(_QWORD *)&v514[4] = v397;
                *(_WORD *)&v514[12] = 2080;
                *(_QWORD *)&v514[14] = v396;
                _os_log_impl(&dword_1AC149000, v395, OS_LOG_TYPE_DEFAULT, "Removing reaction on track %lld from %s", v514, 0x16u);
              }

              if (v389)
              {
                v398 = (unint64_t *)&v389->__shared_owners_;
                do
                  v399 = __ldaxr(v398);
                while (__stlxr(v399 - 1, v398));
                if (!v399)
                {
                  ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
                  std::__shared_weak_count::__release_weak(v389);
                }
              }
              v400 = (_QWORD *)v388[1];
              if (v400)
              {
                do
                {
                  v401 = v400;
                  v400 = (_QWORD *)*v400;
                }
                while (v400);
              }
              else
              {
                do
                {
                  v401 = (_BYTE *)v388[2];
                  v47 = *(_QWORD *)v401 == (_QWORD)v388;
                  v388 = v401;
                }
                while (!v47);
              }
              v388 = v401;
            }
            while (v401 != &v535[8]);
          }
          std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(*(_QWORD **)&v535[8]);
          v402 = (_QWORD *)v387[1];
          if (v402)
          {
            do
            {
              v403 = v402;
              v402 = (_QWORD *)*v402;
            }
            while (v402);
          }
          else
          {
            do
            {
              v403 = (_QWORD *)v387[2];
              v47 = *v403 == (_QWORD)v387;
              v387 = v403;
            }
            while (!v47);
          }
          v387 = v403;
        }
        while (v403 != (_QWORD *)(*((_QWORD *)&v529 + 1) + 56));
      }
      *(_QWORD *)v535 = &v491;
      std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)v535);
      _Block_object_dispose(v496, 8);
      std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)&v501 + 8);
      _Block_object_dispose(buf, 8);
      std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v524 + 8);

      _Block_object_dispose(&v529, 8);
      std::__tree<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::__map_value_compare<long long,std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>>::destroy(v534[0]);
      if (v451)
      {
        v404 = (unint64_t *)&v451->__shared_owners_;
        do
          v405 = __ldaxr(v404);
        while (__stlxr(v405 - 1, v404));
        if (!v405)
        {
          ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
          std::__shared_weak_count::__release_weak(v451);
        }
      }
      if (v471)
      {
        v406 = &v471->__shared_owners_;
        do
          v407 = __ldaxr((unint64_t *)v406);
        while (__stlxr(v407 - 1, (unint64_t *)v406));
        if (!v407)
        {
          ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
          std::__shared_weak_count::__release_weak(v471);
        }
      }
      v251 = v450 + 2;
    }
    while (v450 + 2 != v449);
  }
  if (*(_QWORD *)(a1 + 2648) != *(_QWORD *)(a1 + 2640))
  {
    v408 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v408, OS_LOG_TYPE_DEFAULT))
    {
      v409 = (*(_QWORD *)(a1 + 2648) - *(_QWORD *)(a1 + 2640)) >> 4;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v409;
      _os_log_impl(&dword_1AC149000, v408, OS_LOG_TYPE_DEFAULT, "Flushing %d container reactions", buf, 8u);
    }

    v410 = operator new();
    *(_QWORD *)(v410 + 8) = 0;
    *(_QWORD *)(v410 + 16) = 0;
    *(_OWORD *)(v410 + 24) = 0u;
    *(_OWORD *)(v410 + 40) = 0u;
    *(_OWORD *)(v410 + 56) = 0u;
    *(_QWORD *)v410 = &off_1E5B51178;
    *(_QWORD *)&v529 = v410;
    v411 = (std::__shared_weak_count *)operator new();
    v411->__shared_owners_ = 0;
    v412 = (unint64_t *)&v411->__shared_owners_;
    v411->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B524C0;
    v411->__shared_weak_owners_ = 0;
    v411[1].__vftable = (std::__shared_weak_count_vtbl *)v410;
    *((_QWORD *)&v529 + 1) = v411;
    v413 = *(std::__shared_weak_count **)(v410 + 16);
    if (!v413)
    {
      do
        v417 = __ldxr(v412);
      while (__stxr(v417 + 1, v412));
      v418 = (unint64_t *)&v411->__shared_weak_owners_;
      do
        v419 = __ldxr(v418);
      while (__stxr(v419 + 1, v418));
      *(_QWORD *)(v410 + 8) = v410;
      *(_QWORD *)(v410 + 16) = v411;
      goto LABEL_613;
    }
    if (v413->__shared_owners_ == -1)
    {
      do
        v414 = __ldxr(v412);
      while (__stxr(v414 + 1, v412));
      v415 = (unint64_t *)&v411->__shared_weak_owners_;
      do
        v416 = __ldxr(v415);
      while (__stxr(v416 + 1, v415));
      *(_QWORD *)(v410 + 8) = v410;
      *(_QWORD *)(v410 + 16) = v411;
      std::__shared_weak_count::__release_weak(v413);
      do
LABEL_613:
        v420 = __ldaxr(v412);
      while (__stlxr(v420 - 1, v412));
      if (!v420)
      {
        ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
        std::__shared_weak_count::__release_weak(v411);
      }
    }
    *(_OWORD *)buf = 0uLL;
    v521 = 0;
    *(_QWORD *)v496 = buf;
    LOBYTE(v497) = 0;
    v421 = operator new(0x10uLL);
    *(_QWORD *)buf = v421;
    *(_QWORD *)&buf[8] = v421;
    v521 = (uint64_t)(v421 + 2);
    v422 = (std::__shared_weak_count *)*((_QWORD *)&v529 + 1);
    *v421 = v529;
    v421[1] = v422;
    if (v422)
    {
      v423 = (unint64_t *)&v422->__shared_owners_;
      do
        v424 = __ldxr(v423);
      while (__stxr(v424 + 1, v423));
      *(_QWORD *)&buf[8] = v421 + 2;
      do
        v425 = __ldaxr(v423);
      while (__stlxr(v425 - 1, v423));
      if (!v425)
      {
        ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
        std::__shared_weak_count::__release_weak(v422);
      }
    }
    else
    {
      *(_QWORD *)&buf[8] = v421 + 2;
    }
    v426 = ML3ImportSession::_flushImportItems(a1, a1 + 2640, buf);
    if ((v426 & 1) == 0)
    {
      v427 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v427, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v496 = 0;
        _os_log_impl(&dword_1AC149000, v427, OS_LOG_TYPE_ERROR, "Failed to flush container reactions", v496, 2u);
      }

    }
    v428 = *(_QWORD *)(a1 + 2648);
    v429 = *(_QWORD *)(a1 + 2640);
    while (v428 != v429)
      v428 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v428 - 16);
    *(_QWORD *)(a1 + 2648) = v429;
    *(_QWORD *)v496 = buf;
    std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)v496);
    if (!v426)
    {
LABEL_640:
      v464 = 0;
      goto LABEL_641;
    }
  }
  if (objc_msgSend(*(id *)(a1 + 2664), "count"))
  {
    v430 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v430, OS_LOG_TYPE_DEFAULT))
    {
      v431 = objc_msgSend(*(id *)(a1 + 2632), "count");
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v431;
      _os_log_impl(&dword_1AC149000, v430, OS_LOG_TYPE_DEFAULT, "Removing %d container authors", buf, 8u);
    }

    +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer");
    v432 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v432, "statementWithPrefix:inParameterCount:", CFSTR("DELETE FROM container_item_reaction WHERE ROWID"), objc_msgSend(*(id *)(a1 + 2664), "count"));
    v433 = (void *)objc_claimAutoreleasedReturnValue();
    v434 = *(void **)(a1 + 16);
    v435 = *(_QWORD *)(a1 + 2664);
    v468[0] = 0;
    v464 = objc_msgSend(v434, "executeUpdate:withParameters:error:", v433, v435, v468);
    v436 = v468[0];
    if ((v464 & 1) == 0)
    {
      _ML3LogCategoryImport();
      v437 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v437, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v436;
        _os_log_impl(&dword_1AC149000, v437, OS_LOG_TYPE_ERROR, "Failed to remove container reactions. err=%{public}@", buf, 0xCu);
      }

    }
    objc_msgSend(*(id *)(a1 + 2664), "removeAllObjects");

  }
  else
  {
    v464 = 1;
  }
LABEL_641:
  v438 = objc_msgSend(*(id *)(a1 + 2600), "count");
  if (v438 >= 1)
  {
    v439 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v439, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v438;
      _os_log_impl(&dword_1AC149000, v439, OS_LOG_TYPE_ERROR, "Will clear keep local for %d playlist items", buf, 8u);
    }

    +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer");
    v440 = (void *)objc_claimAutoreleasedReturnValue();
    do
    {
      if (v438 >= 200)
        v441 = 200;
      else
        v441 = v438;
      objc_msgSend(v440, "statementWithPrefix:inParameterCount:", CFSTR("UPDATE item set keep_local=0 WHERE keep_local<1 AND item_pid"), v441);
      v442 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 2600), "subarrayWithRange:", objc_msgSend(*(id *)(a1 + 2600), "count") - v438, v441);
      v443 = (void *)objc_claimAutoreleasedReturnValue();
      v444 = *(void **)(a1 + 16);
      v467 = 0;
      v445 = objc_msgSend(v444, "executeUpdate:withParameters:error:", v442, v443, &v467);
      v446 = v467;
      if ((v445 & 1) == 0)
      {
        v447 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v447, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v446;
          _os_log_impl(&dword_1AC149000, v447, OS_LOG_TYPE_ERROR, "Failed to update keep_local for container_items. err=%{public}@", buf, 0xCu);
        }

      }
      v379 = v438 <= v441;
      v438 -= v441;
    }
    while (!v379);

  }
  *(_QWORD *)buf = &v475;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v464;
}

void sub_1AC33BBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  void *v50;

  STACK[0x3A0] = (unint64_t)&a50;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3A0]);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_flushPersonImportItems(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v7;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint8_t buf[8];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_QWORD *)v4 = &off_1E5B501E0;
  v28 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51FF0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v29 = v5;
  v7 = *(std::__shared_weak_count **)(v4 + 16);
  if (v7)
  {
    if (v7->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(v4 + 8) = v4;
    *(_QWORD *)(v4 + 16) = v5;
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    *(_QWORD *)(v4 + 8) = v4;
    *(_QWORD *)(v4 + 16) = v5;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_14:
  v23 = 0;
  v24 = 0;
  v25 = 0;
  *(_QWORD *)buf = &v23;
  v27 = 0;
  v15 = operator new(0x10uLL);
  v23 = v15;
  v24 = v15;
  v25 = v15 + 2;
  v16 = v29;
  *v15 = v28;
  v15[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v24 = v15 + 2;
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    v24 = v15 + 2;
  }
  v20 = ML3ImportSession::_flushImportItems(a1, a2, &v23);
  if ((v20 & 1) == 0)
  {
    v21 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v21, OS_LOG_TYPE_ERROR, "Failed to flush person items", buf, 2u);
    }

  }
  *(_QWORD *)buf = &v23;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v20;
}

void sub_1AC33C514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportSession::_flushImportItems(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t i;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
    return 1;
  v5 = (_QWORD *)*a3;
  v6 = (_QWORD *)a3[1];
  if ((_QWORD *)*a3 != v6)
  {
    do
    {
      v8 = (_QWORD *)*v5;
      v9 = (std::__shared_weak_count *)v5[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v8[3] = a1;
      ML3DatabaseImportDataSource::setImportItems(v8, (uint64_t **)a2);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  v14 = ML3ImportSession::_performDatabaseImport(a1, (uint64_t)a3);
  v15 = (_QWORD *)*a3;
  v16 = (_QWORD *)a3[1];
  while (v15 != v16)
  {
    v18 = (_QWORD *)*v15;
    v17 = (std::__shared_weak_count *)v15[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v18[3] = 0;
    v22 = v18[6];
    for (i = v18[7]; i != v22; i = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](i - 16))
      ;
    v18[7] = v22;
    if (v17)
    {
      v23 = (unint64_t *)&v17->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v15 += 2;
  }
  return v14;
}

void sub_1AC33C6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_performDatabaseImport(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 1;
  v2 = *(void **)(a1 + 16);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN16ML3ImportSession22_performDatabaseImportERNSt3__16vectorINS0_10shared_ptrI27ML3DatabaseImportDataSourceEENS0_9allocatorIS4_EEEE_block_invoke;
  v5[3] = &unk_1E5B64F68;
  v5[5] = a1;
  v5[6] = a2;
  v5[4] = &v6;
  objc_msgSend(v2, "performTransactionWithBlock:", v5);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1AC33C770(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN16ML3ImportSession22_performDatabaseImportERNSt3__16vectorINS0_10shared_ptrI27ML3DatabaseImportDataSourceEENS0_9allocatorIS4_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, float);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  float v11;
  ML3DatabaseImportDataSource *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  void *v17;
  ML3VirtualTable *v18;
  ML3VirtualTable *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  ML3VirtualTable *v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  void *v32;
  ML3VirtualTable *v33;
  void *v34;
  uint64_t v35;
  void (*v36)(_QWORD, float);
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char v40;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  ML3DatabaseImportDataSource *v47;
  std::__shared_weak_count *v48;
  ML3DatabaseImportDataSource *v49;
  std::__shared_weak_count *v50;
  uint8_t buf[4];
  ML3VirtualTable *v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;

  v1 = a1;
  v55 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40);
  v2 = *(uint64_t **)(a1 + 48);
  v5 = *v2;
  v4 = v2[1];
  v6 = *(uint64_t (**)(_QWORD, float))(v3 + 40);
  if (v6)
  {
    a1 = v6(*(_QWORD *)(v3 + 48), 0.0);
    v7 = *(uint64_t **)(v1 + 48);
    v9 = *v7;
    v8 = v7[1];
  }
  else
  {
    v8 = v4;
    v9 = v5;
  }
  v42 = v1;
  if (v9 == v8)
  {
    v27 = 1;
  }
  else
  {
    v43 = v8;
    v45 = v3;
    v10 = 0;
    v11 = (float)(unint64_t)((v4 - v5) >> 4);
    do
    {
      v12 = *(ML3DatabaseImportDataSource **)v9;
      v13 = *(std::__shared_weak_count **)(v9 + 8);
      v49 = *(ML3DatabaseImportDataSource **)v9;
      v50 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = (void *)MEMORY[0x1AF43CC0C](a1);
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      ML3DatabaseImportDataSource::getTableSchema(v12);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = -[ML3VirtualTable initWithDatabaseTable:]([ML3VirtualTable alloc], "initWithDatabaseTable:", v17);
      v19 = v18;
      v47 = v12;
      v48 = v13;
      if (v13)
      {
        v20 = (unint64_t *)&v13->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      -[ML3VirtualTable setDataSource:](v18, "setDataSource:", &v47);
      v22 = v48;
      if (v48)
      {
        v23 = (unint64_t *)&v48->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (-[ML3VirtualTable registerWithConnection:](v19, "registerWithConnection:", *(_QWORD *)(v45 + 16)))
      {
        v25 = (*(uint64_t (**)(ML3DatabaseImportDataSource *, ML3VirtualTable *, _QWORD))(*(_QWORD *)v49 + 48))(v49, v19, *(unsigned int *)(v45 + 32));
        v26 = *(void **)(v45 + 16);
        v46 = 0;
        v27 = objc_msgSend(v26, "executeUpdate:withParameters:error:", v25, 0, &v46);
        v28 = (ML3VirtualTable *)v46;
        if ((v27 & 1) == 0)
        {
          v29 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v52 = v28;
            _os_log_impl(&dword_1AC149000, v29, OS_LOG_TYPE_ERROR, "Error executing import virtual table insert statement. %{public}@", buf, 0xCu);
          }

        }
      }
      else
      {
        v25 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          v30 = *(_QWORD *)(v45 + 16);
          *(_DWORD *)buf = 138543618;
          v52 = v19;
          v53 = 2048;
          v54 = v30;
          _os_log_impl(&dword_1AC149000, v25, OS_LOG_TYPE_ERROR, "Could not register virtual table %{public}@ on connection %p.", buf, 0x16u);
        }
        v27 = 0;
      }

      -[ML3VirtualTable unregister](v19, "unregister");
      v31 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        ML3DatabaseImportDataSource::getTableSchema(v49);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "name");
        v33 = (ML3VirtualTable *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "timeIntervalSinceDate:", v44);
        *(_DWORD *)buf = 138543618;
        v52 = v33;
        v53 = 2048;
        v54 = v35;
        _os_log_impl(&dword_1AC149000, v31, OS_LOG_TYPE_DEFAULT, "Data source %{public}@ took %.2fs to import", buf, 0x16u);

      }
      v36 = *(void (**)(_QWORD, float))(v45 + 40);
      if (v36)
        v36(*(_QWORD *)(v45 + 48), (float)v10 / v11);

      objc_autoreleasePoolPop(v16);
      v37 = v50;
      if (v50)
      {
        v38 = (unint64_t *)&v50->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      ++v10;
      v9 += 16;
      if (v9 == v43)
        v40 = 0;
      else
        v40 = v27;
    }
    while ((v40 & 1) != 0);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v42 + 32) + 8) + 24) = v27;
  return v27;
}

void sub_1AC33CBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a13);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3BookletDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3BookletDatabaseImportDataSource>,std::allocator<ML3BookletDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3BookletDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3BookletDatabaseImportDataSource>,std::allocator<ML3BookletDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3BookletDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3BookletDatabaseImportDataSource>,std::allocator<ML3BookletDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_34ML3BookletDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3PersonDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3PersonDatabaseImportDataSource>,std::allocator<ML3PersonDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3PersonDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3PersonDatabaseImportDataSource>,std::allocator<ML3PersonDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3PersonDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3PersonDatabaseImportDataSource>,std::allocator<ML3PersonDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_33ML3PersonDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ContainerItemReactionsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemReactionsDatabaseImportDataSource>,std::allocator<ML3ContainerItemReactionsDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemReactionsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemReactionsDatabaseImportDataSource>,std::allocator<ML3ContainerItemReactionsDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemReactionsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemReactionsDatabaseImportDataSource>,std::allocator<ML3ContainerItemReactionsDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_49ML3ContainerItemReactionsDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *__Block_byref_object_copy__434(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__435(uint64_t a1)
{
  std::__tree<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::__map_value_compare<long long,std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>>::destroy(*(_QWORD **)(a1 + 56));
}

void ___ZN16ML3ImportSession40_prepareContainerItemReactionImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  std::string *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t **v26;
  unint64_t v27;
  uint64_t **v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  void *__p[2];
  uint64_t v35;

  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(v5, "int64ForColumnIndex:", 0);
  v8 = (uint64_t *)objc_msgSend(v5, "int64ForColumnIndex:", 1);
  v9 = objc_msgSend(v5, "int64ForColumnIndex:", 2);
  v10 = objc_msgSend(v5, "cStringForColumnIndex:", 3);
  if (v10)
    v11 = (char *)v10;
  else
    v11 = "";
  std::string::basic_string[abi:ne180100]<0>(__p, v11);
  v12 = objc_msgSend(v5, "int64ForColumnIndex:", 4);
  v13 = (_QWORD *)operator new();
  *v13 = v9;
  v13[1] = v7;
  v14 = (std::string *)(v13 + 2);
  if (SHIBYTE(v35) < 0)
  {
    std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v13[4] = v35;
  }
  v13[5] = v12;
  v32 = v13;
  v15 = (std::__shared_weak_count *)operator new();
  v15->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B524F8;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v13;
  v33 = v15;
  v30 = 0;
  v31 = 0;
  v29 = (uint64_t *)&v30;
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v20 = *(_QWORD **)(v17 + 56);
  v18 = (_QWORD *)(v17 + 56);
  v19 = v20;
  if (!v20)
    goto LABEL_17;
  v21 = v18;
  do
  {
    v22 = v19[4];
    v23 = v22 < (uint64_t)v8;
    if (v22 >= (uint64_t)v8)
      v24 = v19;
    else
      v24 = v19 + 1;
    if (!v23)
      v21 = v19;
    v19 = (_QWORD *)*v24;
  }
  while (*v24);
  if (v21 != v18 && (uint64_t)v8 >= v21[4])
  {
    v28 = std::map<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>::operator[]((uint64_t **)v18 - 1, v8);
    std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::operator=[abi:ne180100]((uint64_t)&v29, v28);
  }
  else
  {
LABEL_17:
    v30 = 0;
    v31 = 0;
    v29 = (uint64_t *)&v30;
    std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(0);
  }
  v25 = std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::operator[](&v29, (uint64_t)__p);
  std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v25, (uint64_t)v13, (uint64_t)v15);
  v26 = std::map<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>::operator[]((uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), v8);
  std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::operator=[abi:ne180100]((uint64_t)v26, &v29);
  std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(v30);
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (SHIBYTE(v35) < 0)
    operator delete(__p[0]);

}

void sub_1AC33D04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  uint64_t v25;

  MEMORY[0x1AF43C744](v25, 0x1012C40ACBB1BAALL);
  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession40_prepareContainerItemReactionImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;

  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(v5, "int64ForColumnIndex:", 0);
  v8 = objc_msgSend(v5, "int64ForColumnIndex:", 1);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, v8, &v8)[3] = v7;

}

void sub_1AC33D154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__424(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__425(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table(a1 + 48);
}

void ___ZN16ML3ImportSession40_prepareContainerItemReactionImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  void **v11;

  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(v5, "int64ForColumnIndex:", 0);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v5, "cStringForColumnIndex:", 1));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48;
  v11 = __p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)__p, (__int128 **)&v11)+ 5) = v7;
  if (v10 < 0)
    operator delete(__p[0]);

}

void sub_1AC33D290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t **std::map<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>::operator[](uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = (uint64_t *)v4[4];
        if ((uint64_t)v7 <= (uint64_t)a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if ((uint64_t)v7 >= (uint64_t)a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x40uLL);
    v6[7] = 0;
    v6[6] = 0;
    v6[4] = a2;
    v6[5] = (uint64_t *)(v6 + 6);
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 5;
}

uint64_t std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v16[3];
  _QWORD *v17;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = v3;
      if (*(_QWORD **)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      if (std::less<std::string>::operator()[abi:ne180100](v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          v17 = v3;
          v12 = (uint64_t)v3;
          v11 = (uint64_t **)v3;
          goto LABEL_14;
        }
        v17 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__find_equal<std::string>(a1, &v17, v5 + 4);
      }
      if (!*v11)
      {
        v12 = (uint64_t)v17;
LABEL_14:
        std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>> const&>((uint64_t)v16, a1, (uint64_t)(v5 + 4));
        std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__insert_node_at((uint64_t **)a1, v12, v11, v16[0]);
        v16[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v16);
      }
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v10 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v10);
      }
      v5 = v14;
    }
    while (v14 != v4);
  }
  return a1;
}

void sub_1AC33D4EC(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::find<std::string>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::less<std::string>::operator()[abi:ne180100](v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<std::string>::operator()[abi:ne180100](a2, v5 + 4))
    return v2;
  return v5;
}

uint64_t *std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::operator[](uint64_t **a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v7;
  std::string *v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__find_equal<std::string>((uint64_t)a1, &v12, (_QWORD *)a2);
  v5 = *v4;
  if (!*v4)
  {
    v6 = v4;
    v7 = operator new(0x48uLL);
    v10[0] = v7;
    v10[1] = a1 + 1;
    v11 = 0;
    v8 = (std::string *)(v7 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v5 = (uint64_t *)v10[0];
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v7[6] = *(_QWORD *)(a2 + 16);
      v5 = v7;
    }
    v7[7] = 0;
    v7[8] = 0;
    v11 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__insert_node_at(a1, v12, v6, v5);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v10);
  }
  return v5 + 7;
}

void sub_1AC33D640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::operator=[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v23[2];
  uint64_t *v24;

  if ((_QWORD *)a1 != a2)
  {
    v3 = a2 + 1;
    v4 = (_QWORD *)*a2;
    if (*(_QWORD *)(a1 + 16))
    {
      v5 = *(uint64_t **)a1;
      v7 = (uint64_t **)(a1 + 8);
      v6 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = a1 + 8;
      *(_QWORD *)(v6 + 16) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      if (v5[1])
        v5 = (uint64_t *)v5[1];
      v23[0] = a1;
      v23[1] = v5;
      std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::_DetachedTreeCache::__advance[abi:ne180100]((uint64_t)v23);
      v8 = v24;
      if (!v24 || v4 == v3)
      {
        v14 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v8 + 7, v4[7], v4[8]);
          v9 = v24;
          v10 = *v7;
          v11 = (uint64_t **)(a1 + 8);
          v12 = (uint64_t **)(a1 + 8);
          if (*v7)
          {
            do
            {
              while (1)
              {
                v11 = (uint64_t **)v10;
                if (!std::less<std::string>::operator()[abi:ne180100](v9 + 4, v10 + 4))
                  break;
                v10 = *v11;
                v12 = v11;
                if (!*v11)
                  goto LABEL_13;
              }
              v10 = v11[1];
            }
            while (v10);
            v12 = v11 + 1;
          }
LABEL_13:
          std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v11, v12, v9);
          std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::_DetachedTreeCache::__advance[abi:ne180100]((uint64_t)v23);
          v13 = (_QWORD *)v4[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v4[2];
              v15 = *v14 == (_QWORD)v4;
              v4 = v14;
            }
            while (!v15);
          }
          v8 = v24;
          if (v24)
            v15 = v14 == v3;
          else
            v15 = 1;
          v4 = v14;
        }
        while (!v15);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)v23);
      v4 = v14;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>> const&>((uint64_t)v23, a1, (uint64_t)(v4 + 4));
        v16 = (uint64_t *)v23[0];
        v17 = *(uint64_t **)(a1 + 8);
        v18 = (uint64_t **)(a1 + 8);
        v19 = (uint64_t **)(a1 + 8);
        if (v17)
        {
          do
          {
            while (1)
            {
              v18 = (uint64_t **)v17;
              if (!std::less<std::string>::operator()[abi:ne180100](v16 + 4, v17 + 4))
                break;
              v17 = *v18;
              v19 = v18;
              if (!*v18)
                goto LABEL_33;
            }
            v17 = v18[1];
          }
          while (v17);
          v19 = v18 + 1;
        }
LABEL_33:
        std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v18, v19, v16);
        v23[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v23);
        v20 = (_QWORD *)v4[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v4[2];
            v15 = *v21 == (_QWORD)v4;
            v4 = v21;
          }
          while (!v15);
        }
        v4 = v21;
      }
      while (v21 != v3);
    }
  }
  return a1;
}

void sub_1AC33D874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ML3ComposerData>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::__map_value_compare<long long,std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::__map_value_compare<long long,std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::__map_value_compare<long long,std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,std::map<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::_DetachedTreeCache::__advance[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 16) = v1;
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 16);
    if (v2)
    {
      v3 = (_QWORD *)*v2;
      if (*v2 == v1)
      {
        *v2 = 0;
        while (1)
        {
          v4 = (_QWORD *)v2[1];
          if (!v4)
            break;
          do
          {
            v2 = v4;
            v4 = (_QWORD *)*v4;
          }
          while (v4);
        }
      }
      else
      {
        for (v2[1] = 0; v3; v3 = (_QWORD *)v2[1])
        {
          do
          {
            v2 = v3;
            v3 = (_QWORD *)*v3;
          }
          while (v3);
        }
      }
    }
    *(_QWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::destroy(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v5 = a2 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v6[6] = *(_QWORD *)(a3 + 16);
  }
  v8 = *(_QWORD *)(a3 + 32);
  v6[7] = *(_QWORD *)(a3 + 24);
  v6[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_1AC33DA98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ML3ComposerData>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
  return a1;
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__shared_ptr_pointer<ML3ContainerItemReactionImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemReactionImportItem>,std::allocator<ML3ContainerItemReactionImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemReactionImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemReactionImportItem>,std::allocator<ML3ContainerItemReactionImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemReactionImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemReactionImportItem>,std::allocator<ML3ContainerItemReactionImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_34ML3ContainerItemReactionImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 39) < 0)
      operator delete(*(void **)(result + 16));
    JUMPOUT(0x1AF43C744);
  }
  return result;
}

void std::__shared_ptr_pointer<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo *,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>::__shared_ptr_default_delete<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo,ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>,std::allocator<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo *,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>::__shared_ptr_default_delete<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo,ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>,std::allocator<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo *,std::shared_ptr<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>::__shared_ptr_default_delete<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo,ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>,std::allocator<ML3ImportSession::_prepareContainerItemReactionImportItems(std::shared_ptr<ML3ImportItem>)::_ContainerItemReactionInfo>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIZN16ML3ImportSession40_prepareContainerItemReactionImportItemsENS0_I13ML3ImportItemEEE26_ContainerItemReactionInfoE27__shared_ptr_default_deleteIS4_S4_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ContainerAuthorDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerAuthorDatabaseImportDataSource>,std::allocator<ML3ContainerAuthorDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerAuthorDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerAuthorDatabaseImportDataSource>,std::allocator<ML3ContainerAuthorDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ContainerAuthorDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerAuthorDatabaseImportDataSource>,std::allocator<ML3ContainerAuthorDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_42ML3ContainerAuthorDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ContainerItemPersonDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemPersonDatabaseImportDataSource>,std::allocator<ML3ContainerItemPersonDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemPersonDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemPersonDatabaseImportDataSource>,std::allocator<ML3ContainerItemPersonDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemPersonDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemPersonDatabaseImportDataSource>,std::allocator<ML3ContainerItemPersonDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_46ML3ContainerItemPersonDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ___ZN16ML3ImportSession38_prepareContainerItemPersonImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;

  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(v5, "int64ForColumnIndex:", 0);
  v8 = objc_msgSend(v5, "int64ForColumnIndex:", 1);
  std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, v8, &v8)[3] = v7;

}

void sub_1AC33DE2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__418(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__419(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN16ML3ImportSession38_prepareContainerItemPersonImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke_423(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  const std::string::value_type *v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  BOOL v30;
  void **v31;
  BOOL v32;
  char *v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  void *v37;
  void *__p;
  int8x8_t v39;
  void *v40;
  uint64_t v41;
  int v42;
  void *v43[2];
  unsigned __int8 v44;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = objc_msgSend(v3, "int64ForColumnIndex:", 0);
  v6 = objc_msgSend(v3, "int64ForColumnIndex:", 1);
  v7 = objc_msgSend(v3, "cStringForColumnIndex:", 2);
  if (v7)
    v8 = (char *)v7;
  else
    v8 = "";
  std::string::basic_string[abi:ne180100]<0>(v43, v8);
  v9 = v44;
  if ((v44 & 0x80u) != 0)
    v9 = (unint64_t)v43[1];
  if (v9
    && (v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48),
        v5 < 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56) - v10) >> 3)))
  {
    std::unordered_set<std::string>::unordered_set((uint64_t)&__p, v10 + 40 * v5);
    v11 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>(&__p, (unsigned __int8 *)v43);
    if (v11)
    {
      v12 = v39;
      v13 = *((_QWORD *)v11 + 1);
      v14 = (uint8x8_t)vcnt_s8(v39);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        if (v13 >= *(_QWORD *)&v39)
          v13 %= *(_QWORD *)&v39;
      }
      else
      {
        v13 &= *(_QWORD *)&v39 - 1;
      }
      v19 = (unsigned __int8 *)*((_QWORD *)__p + v13);
      do
      {
        v20 = v19;
        v19 = *(unsigned __int8 **)v19;
      }
      while (v19 != v11);
      if (v20 == (unsigned __int8 *)&v40)
        goto LABEL_28;
      v21 = *((_QWORD *)v20 + 1);
      if (v14.u32[0] > 1uLL)
      {
        if (v21 >= *(_QWORD *)&v39)
          v21 %= *(_QWORD *)&v39;
      }
      else
      {
        v21 &= *(_QWORD *)&v39 - 1;
      }
      if (v21 != v13)
      {
LABEL_28:
        if (!*(_QWORD *)v11)
          goto LABEL_29;
        v22 = *(_QWORD *)(*(_QWORD *)v11 + 8);
        if (v14.u32[0] > 1uLL)
        {
          if (v22 >= *(_QWORD *)&v39)
            v22 %= *(_QWORD *)&v39;
        }
        else
        {
          v22 &= *(_QWORD *)&v39 - 1;
        }
        if (v22 != v13)
LABEL_29:
          *((_QWORD *)__p + v13) = 0;
      }
      v23 = *(_QWORD *)v11;
      if (*(_QWORD *)v11)
      {
        v24 = *(_QWORD *)(v23 + 8);
        if (v14.u32[0] > 1uLL)
        {
          if (v24 >= *(_QWORD *)&v12)
            v24 %= *(_QWORD *)&v12;
        }
        else
        {
          v24 &= *(_QWORD *)&v12 - 1;
        }
        if (v24 != v13)
        {
          *((_QWORD *)__p + v24) = v20;
          v23 = *(_QWORD *)v11;
        }
      }
      *(_QWORD *)v20 = v23;
      *(_QWORD *)v11 = 0;
      --v41;
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, (void **)v11);
      v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) + 40 * v5;
      if ((void **)v25 != &__p)
      {
        *(_DWORD *)(v25 + 32) = v42;
        v26 = (const std::string::value_type *)v40;
        v27 = *(_QWORD *)(v25 + 8);
        if (v27)
        {
          for (i = 0; i != v27; ++i)
            *(_QWORD *)(*(_QWORD *)v25 + 8 * i) = 0;
          v29 = *(_QWORD *)(v25 + 16);
          *(_QWORD *)(v25 + 16) = 0;
          *(_QWORD *)(v25 + 24) = 0;
          if (v29)
            v30 = v26 == 0;
          else
            v30 = 1;
          if (v30)
          {
            v31 = (void **)v29;
          }
          else
          {
            do
            {
              std::string::operator=((std::string *)(v29 + 16), (const std::string *)(v26 + 16));
              v31 = *(void ***)v29;
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(v25, v29);
              v26 = *(const std::string::value_type **)v26;
              if (v31)
                v32 = v26 == 0;
              else
                v32 = 1;
              v29 = (uint64_t)v31;
            }
            while (!v32);
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v31);
        }
        while (v26)
        {
          v33 = (char *)operator new(0x28uLL);
          v34 = (uint64_t)v33;
          v35 = v33 + 16;
          *(_QWORD *)v33 = 0;
          *((_QWORD *)v33 + 1) = 0;
          if (v26[39] < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v33 + 16), *((const std::string::value_type **)v26 + 2), *((_QWORD *)v26 + 3));
          }
          else
          {
            v36 = *((_OWORD *)v26 + 1);
            *((_QWORD *)v33 + 4) = *((_QWORD *)v26 + 4);
            *v35 = v36;
          }
          *(_QWORD *)(v34 + 8) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v35);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(v25, v34);
          v26 = *(const std::string::value_type **)v26;
        }
      }
    }
    else
    {
      v17 = *(void **)(v4 + 2592);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v6);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "addObject:", v18);

    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v40);
    v37 = __p;
    __p = 0;
    if (v37)
      operator delete(v37);
  }
  else
  {
    v15 = *(void **)(v4 + 2592);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v6);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "addObject:", v16);

  }
  if ((char)v44 < 0)
    operator delete(v43[0]);

}

void sub_1AC33E234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3ContainerItemPersonImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemPersonImportItem>,std::allocator<ML3ContainerItemPersonImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemPersonImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemPersonImportItem>,std::allocator<ML3ContainerItemPersonImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemPersonImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemPersonImportItem>,std::allocator<ML3ContainerItemPersonImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_32ML3ContainerItemPersonImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint8x8_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unint64_t v43;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v43 = std::__string_hash<char>::operator()[abi:ne180100](a2 + 16);
  v2[1] = v43;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    v8 = 1;
    if (v5 >= 3)
      v8 = (v5 & (v5 - 1)) != 0;
    v9 = v8 | (2 * v5);
    v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10)
      prime = (int8x8_t)v10;
    else
      prime = (int8x8_t)v9;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v5)
      goto LABEL_99;
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_60;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v5)
    {
      v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = operator new(8 * *(_QWORD *)&prime);
      v13 = *(void **)a1;
      *(_QWORD *)a1 = v12;
      if (v13)
        operator delete(v13);
      v41 = v4;
      v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
      while (*(_QWORD *)&prime != v14);
      v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        v16 = v15[1];
        v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        v18 = v17.u32[0];
        v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(_QWORD *)&prime)
            v16 %= *(_QWORD *)&prime;
        }
        else
        {
          v16 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = a1 + 16;
        v22 = *v15;
        if (*v15)
        {
          v42 = v17.u32[0];
          do
          {
            v23 = *(_QWORD *)(v22 + 8);
            if (v18 > 1)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            if (v23 == v16)
            {
              v15 = (uint64_t *)v22;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              v24 = *(_QWORD **)v22;
              if (*(_QWORD *)v22)
              {
                v25 = (_QWORD *)v22;
                while (1)
                {
                  v26 = v24;
                  if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(v22 + 16), (unsigned __int8 *)v24 + 16))break;
                  v24 = (_QWORD *)*v26;
                  v25 = v26;
                  if (!*v26)
                    goto LABEL_47;
                }
                v24 = v26;
                v26 = v25;
LABEL_47:
                v18 = v42;
              }
              else
              {
                v26 = (_QWORD *)v22;
              }
              *v15 = (uint64_t)v24;
              *v26 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v15;
              v15 = (uint64_t *)v22;
              v16 = v23;
            }
            v22 = *v15;
          }
          while (*v15);
        }
        v5 = (unint64_t)prime;
        v2 = v40;
        v4 = v41;
      }
      else
      {
        v5 = (unint64_t)prime;
        v4 = v41;
      }
    }
    else
    {
      v27 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v27)
        operator delete(v27);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    v30 = v43;
    if (v5 <= v43)
      v30 = v43 % v5;
  }
  else
  {
    v30 = (v5 - 1) & v43;
  }
  v31 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v30);
  if (v31)
  {
    v32 = *(unsigned __int8 **)v31;
    if (*(_QWORD *)v31)
    {
      v33 = 0;
      do
      {
        v34 = v32;
        v35 = *((_QWORD *)v32 + 1);
        if (v29 > 1)
        {
          v36 = v35;
          if (v35 >= v5)
            v36 = v35 % v5;
        }
        else
        {
          v36 = v35 & (v5 - 1);
        }
        if (v36 != v30)
          break;
        v37 = v35 == v43 && std::equal_to<std::string>::operator()[abi:ne180100](v34 + 16, v4);
        if ((v33 & !v37 & 1) != 0)
          break;
        v33 |= v37;
        v32 = *(unsigned __int8 **)v34;
        v31 = v34;
      }
      while (*(_QWORD *)v34);
    }
  }
  v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5)
      v38 %= v5;
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    *v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = a1 + 16;
    if (!*v2)
      goto LABEL_95;
    v39 = *(_QWORD *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5)
        v39 %= v5;
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  *v2 = *(_QWORD *)v31;
  *(_QWORD *)v31 = v2;
  if (*v2)
  {
    v39 = *(_QWORD *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5)
        v39 %= v5;
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38)
      goto LABEL_94;
  }
LABEL_95:
  ++*(_QWORD *)(a1 + 24);
}

void std::__shared_ptr_pointer<ML3ContainerItemDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemDatabaseImportDataSource>,std::allocator<ML3ContainerItemDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemDatabaseImportDataSource>,std::allocator<ML3ContainerItemDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerItemDatabaseImportDataSource>,std::allocator<ML3ContainerItemDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_40ML3ContainerItemDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ContainerSeedDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerSeedDatabaseImportDataSource>,std::allocator<ML3ContainerSeedDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerSeedDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerSeedDatabaseImportDataSource>,std::allocator<ML3ContainerSeedDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ContainerSeedDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerSeedDatabaseImportDataSource>,std::allocator<ML3ContainerSeedDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_40ML3ContainerSeedDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ContainerDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerDatabaseImportDataSource>,std::allocator<ML3ContainerDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerDatabaseImportDataSource>,std::allocator<ML3ContainerDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ContainerDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ContainerDatabaseImportDataSource>,std::allocator<ML3ContainerDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ContainerDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t ML3ImportSession::_enableTriggers(id *this)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint8_t buf[8];
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AC149000, v2, OS_LOG_TYPE_DEFAULT, "enabling triggers", buf, 2u);
  }

  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  +[ML3MusicLibrary allTriggersSQL](ML3MusicLibrary, "allTriggersSQL", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        if ((objc_msgSend(this[2], "executeUpdate:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v6)) & 1) == 0)
        {
          v8 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1AC149000, v8, OS_LOG_TYPE_ERROR, "failed to re-create triggers", buf, 2u);
          }

          v7 = 0;
          goto LABEL_15;
        }
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
      if (v4)
        continue;
      break;
    }
  }
  v7 = 1;
LABEL_15:

  return v7;
}

void sub_1AC33EB10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<ML3DatabaseImportDataSource>::shared_ptr[abi:ne180100]<ML3ItemStoreDatabaseImportDataSource,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B521E8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  v6 = (_QWORD *)(a2 + 8);
  if (a2)
  {
    v7 = *(std::__shared_weak_count **)(a2 + 16);
    if (v7)
    {
      if (v7->__shared_owners_ != -1)
        return a1;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      *v6 = a2;
      *(_QWORD *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }
    else
    {
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      *v6 = a2;
      *(_QWORD *)(a2 + 16) = v4;
    }
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1AC33EC40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::shared_ptr<ML3DatabaseImportDataSource>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ML3DatabaseImportDataSource> const*,std::shared_ptr<ML3DatabaseImportDataSource> const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *result;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (a4 <= (v8 - *(_QWORD *)a1) >> 4)
  {
    result = *(char **)(a1 + 8);
    v18 = (result - v9) >> 4;
    if (v18 >= a4)
    {
      if (a2 != a3)
      {
        do
        {
          v26 = *v6;
          v27 = v6[1];
          v6 += 2;
          std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9, v26, v27);
          v9 += 16;
        }
        while (v6 != a3);
        result = *(char **)(a1 + 8);
      }
      while (result != v9)
        result = (char *)std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(result - 16));
      *(_QWORD *)(a1 + 8) = v9;
    }
    else
    {
      v19 = &a2[2 * v18];
      if (result != v9)
      {
        do
        {
          v20 = *v6;
          v21 = v6[1];
          v6 += 2;
          result = (char *)std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9, v20, v21);
          v9 += 16;
        }
        while (v6 != v19);
        v9 = *(char **)(a1 + 8);
      }
      v22 = v9;
      if (v19 != a3)
      {
        v22 = v9;
        do
        {
          v23 = v19[1];
          *v22 = *v19;
          v22[1] = v23;
          if (v23)
          {
            v24 = (unint64_t *)(v23 + 8);
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
          v19 += 2;
          v22 += 2;
        }
        while (v19 != a3);
      }
      *(_QWORD *)(a1 + 8) = v22;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = v9;
      if ((char *)v10 != v9)
      {
        do
          v10 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v10 - 16);
        while ((char *)v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    v12 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v12 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13 >> 60)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    result = (char *)operator new(16 * v13);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[16 * v13];
    while (v6 != a3)
    {
      v15 = v6[1];
      *(_QWORD *)result = *v6;
      *((_QWORD *)result + 1) = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v6 += 2;
      result += 16;
    }
    *(_QWORD *)(a1 + 8) = result;
  }
  return result;
}

void ___ZN16ML3ImportSession34_prepareTracksForAutomaticDownloadERNSt3__16vectorINS0_10shared_ptrI13ML3ImportItemEENS0_9allocatorIS4_EEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = (char *)v3[67];
  v5 = v3[68];
  if ((unint64_t)v4 >= v5)
  {
    v7 = (char *)v3[66];
    v8 = (v4 - v7) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v9;
    if (v12)
    {
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v12);
      v4 = (char *)v3[67];
      v7 = (char *)v3[66];
    }
    else
    {
      v13 = 0;
    }
    v14 = (_QWORD *)(v12 + 8 * v8);
    v15 = v12 + 8 * v13;
    *v14 = a2;
    v6 = v14 + 1;
    while (v4 != v7)
    {
      v16 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *--v14 = v16;
    }
    v3[66] = v14;
    v3[67] = v6;
    v3[68] = v15;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v4 = a2;
    v6 = v4 + 8;
  }
  v3[67] = v6;
}

void std::__shared_ptr_pointer<ML3LyricsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3LyricsDatabaseImportDataSource>,std::allocator<ML3LyricsDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3LyricsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3LyricsDatabaseImportDataSource>,std::allocator<ML3LyricsDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3LyricsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3LyricsDatabaseImportDataSource>,std::allocator<ML3LyricsDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_33ML3LyricsDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ChapterDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ChapterDatabaseImportDataSource>,std::allocator<ML3ChapterDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ChapterDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ChapterDatabaseImportDataSource>,std::allocator<ML3ChapterDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ChapterDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ChapterDatabaseImportDataSource>,std::allocator<ML3ChapterDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_34ML3ChapterDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ItemVideoDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemVideoDatabaseImportDataSource>,std::allocator<ML3ItemVideoDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ItemVideoDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemVideoDatabaseImportDataSource>,std::allocator<ML3ItemVideoDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ItemVideoDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemVideoDatabaseImportDataSource>,std::allocator<ML3ItemVideoDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemVideoDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ItemStatsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemStatsDatabaseImportDataSource>,std::allocator<ML3ItemStatsDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ItemStatsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemStatsDatabaseImportDataSource>,std::allocator<ML3ItemStatsDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ItemStatsDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemStatsDatabaseImportDataSource>,std::allocator<ML3ItemStatsDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemStatsDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ItemSearchDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemSearchDatabaseImportDataSource>,std::allocator<ML3ItemSearchDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ItemSearchDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemSearchDatabaseImportDataSource>,std::allocator<ML3ItemSearchDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ItemSearchDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemSearchDatabaseImportDataSource>,std::allocator<ML3ItemSearchDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_37ML3ItemSearchDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ItemPlaybackDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemPlaybackDatabaseImportDataSource>,std::allocator<ML3ItemPlaybackDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ItemPlaybackDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemPlaybackDatabaseImportDataSource>,std::allocator<ML3ItemPlaybackDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ItemPlaybackDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemPlaybackDatabaseImportDataSource>,std::allocator<ML3ItemPlaybackDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_39ML3ItemPlaybackDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ItemExtraDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemExtraDatabaseImportDataSource>,std::allocator<ML3ItemExtraDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ItemExtraDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemExtraDatabaseImportDataSource>,std::allocator<ML3ItemExtraDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ItemExtraDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemExtraDatabaseImportDataSource>,std::allocator<ML3ItemExtraDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemExtraDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ItemDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemDatabaseImportDataSource>,std::allocator<ML3ItemDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ItemDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemDatabaseImportDataSource>,std::allocator<ML3ItemDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ItemDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemDatabaseImportDataSource>,std::allocator<ML3ItemDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_31ML3ItemDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ItemStoreDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemStoreDatabaseImportDataSource>,std::allocator<ML3ItemStoreDatabaseImportDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ItemStoreDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemStoreDatabaseImportDataSource>,std::allocator<ML3ItemStoreDatabaseImportDataSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ItemStoreDatabaseImportDataSource *,std::shared_ptr<ML3DatabaseImportDataSource>::__shared_ptr_default_delete<ML3DatabaseImportDataSource,ML3ItemStoreDatabaseImportDataSource>,std::allocator<ML3ItemStoreDatabaseImportDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemStoreDatabaseImportDataSourceEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__optional_copy_base<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,false>::__optional_copy_base[abi:ne180100](v4, v6);
      v6 += 40;
      v4 = v11 + 40;
      v11 += 40;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AC33F3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v6 = v4 - 40;
        if (*(_BYTE *)(v4 - 8))
          v6 = std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor(v6);
        v4 = v6;
      }
      while ((void *)v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_copy_base<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 24) = -1;
    v3 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E5B651D0[v3])(&v5, a1, a2);
      *(_DWORD *)(a1 + 24) = v3;
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

void sub_1AC33F4F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  if (*(_BYTE *)(v1 + 32))
    std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      do
      {
        v4 = v2 - 40;
        if (*(_BYTE *)(v2 - 8))
          v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor(v4);
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJxfbSD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJxfbSD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJxfbSD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJxfbSD_SG_EEERKSY_EEEDcSQ_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSL_1EJxfbSD_SG_EEERKSY_EEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

id ML3ImportSession::_getGroupingKeyForAlbumArtistImportItem(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t (**v7)();
  std::string __p;
  std::string v9;

  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(&v7, a2, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v9 = __p;
  v3 = *(void **)(a1 + 8);
  ML3CPPBridgeString((const UInt8 *)&v9, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "groupingKeyForString:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  v7 = off_1E5B4D010;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1AC33F6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportSession::addAlbum(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t AlbumArtistPIDForAlbumImportItem)
{
  _BOOL4 v8;
  _BOOL4 v9;
  NSObject *v10;
  void **v11;
  _BYTE *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  int v21;
  std::string::size_type v22;
  std::string *p_buf;
  void **v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  _BOOL4 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int matched;
  char v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  BOOL v63;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t AlbumPersistentID;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  unint64_t *v100;
  unint64_t v101;
  std::string::size_type v102;
  unint64_t v103;
  _QWORD v104[2];
  _QWORD v105[2];
  uint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  _QWORD v110[2];
  _QWORD v111[2];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  _QWORD v118[2];
  uint64_t v119[2];
  uint64_t (**v120)();
  std::string v121;
  uint64_t (**v122)();
  __int128 v123;
  uint64_t v124;
  void *__p[2];
  std::string v126;
  __int128 *v127;
  __int128 *v128;
  _QWORD v129[2];
  char v130;
  _BYTE v131[12];
  __int16 v132;
  _BYTE v133[18];
  uint64_t v134;
  std::string buf;
  _BYTE v136[40];
  uint64_t v137;
  std::string v138;
  __int128 v139;

  *((_QWORD *)&v139 + 1) = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 2272) >= 0x3E8uLL
    && *(_QWORD *)(a1 + 1536) == *(_QWORD *)(a1 + 1528)
    && !objc_msgSend(*(id *)(a1 + 1584), "count")
    && objc_msgSend(*(id *)(a1 + 1576), "count") == 0;
  if (*(_DWORD *)(a1 + 32) == 2 && !*a3)
  {
    if (*(_QWORD *)(a1 + 2064))
      v9 = 1;
    else
      v9 = objc_msgSend(*(id *)(a1 + 2080), "count") != 0;
  }
  else
  {
    v9 = 0;
  }
  v10 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = __p;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 88))(__p);
    if (v126.__r_.__value_.__s.__data_[7] < 0)
      v11 = (void **)__p[0];
    if (*a3)
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a3 + 88))(v131);
      if (v133[9] >= 0)
        v12 = v131;
      else
        v12 = *(_BYTE **)v131;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136447234;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v12;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      *(_QWORD *)v136 = AlbumArtistPIDForAlbumImportItem;
      *(_WORD *)&v136[8] = 1024;
      *(_DWORD *)&v136[10] = v8;
      *(_WORD *)&v136[14] = 1024;
      *(_DWORD *)&v136[16] = v9;
      _os_log_impl(&dword_1AC149000, v10, OS_LOG_TYPE_DEFAULT, "adding album=%{public}s trackImportItem=%{public}s, albumArtistPersistentID=%lld, addedAlbumsOverThreshold=%{BOOL}u, switchingToAlbumPayload=%{BOOL}u", (uint8_t *)&buf, 0x2Cu);
      if ((v133[9] & 0x80000000) != 0)
        operator delete(*(void **)v131);
    }
    else
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136447234;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"<nil>";
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      *(_QWORD *)v136 = AlbumArtistPIDForAlbumImportItem;
      *(_WORD *)&v136[8] = 1024;
      *(_DWORD *)&v136[10] = v8;
      *(_WORD *)&v136[14] = 1024;
      *(_DWORD *)&v136[16] = v9;
      _os_log_impl(&dword_1AC149000, v10, OS_LOG_TYPE_DEFAULT, "adding album=%{public}s trackImportItem=%{public}s, albumArtistPersistentID=%lld, addedAlbumsOverThreshold=%{BOOL}u, switchingToAlbumPayload=%{BOOL}u", (uint8_t *)&buf, 0x2Cu);
    }
    if (v126.__r_.__value_.__s.__data_[7] < 0)
      operator delete(__p[0]);
  }

  if (*a3)
  {
    v13 = (std::__shared_weak_count *)a3[1];
    v119[0] = *a3;
    v119[1] = (uint64_t)v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = ML3ImportSession::_prepareTrackForImport(a1, v119, 0, 0);
    v17 = v16;
    if (!v13)
      goto LABEL_30;
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (v17)
        goto LABEL_31;
    }
    else
    {
LABEL_30:
      if (v16)
      {
LABEL_31:
        v20 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a2 + 88))(&buf);
          v21 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
          v22 = buf.__r_.__value_.__r.__words[0];
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 88))(__p);
          p_buf = &buf;
          if (v21 < 0)
            p_buf = (std::string *)v22;
          if (v126.__r_.__value_.__s.__data_[7] >= 0)
            v24 = __p;
          else
            v24 = (void **)__p[0];
          *(_DWORD *)v131 = 136446466;
          *(_QWORD *)&v131[4] = p_buf;
          v132 = 2082;
          *(_QWORD *)v133 = v24;
          _os_log_impl(&dword_1AC149000, v20, OS_LOG_TYPE_ERROR, "Error adding album=%{public}s. Could not prepare track data for import=%{public}s", v131, 0x16u);
          if (v126.__r_.__value_.__s.__data_[7] < 0)
            operator delete(__p[0]);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        v25 = 0;
LABEL_161:

        return v25;
      }
    }
  }
  if (objc_msgSend(*(id *)(a1 + 2288), "count"))
    v26 = 1;
  else
    v26 = v9;
  if ((v26 | v8) != 1 || ML3ImportSession::flush((ML3ImportSession *)a1, 1))
  {
    if (*a3)
      v27 = *(_QWORD *)(*a3 + 8);
    else
      v27 = 0;
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212691);
    v29 = *a3;
    v102 = v28;
    if (*a3)
    {
      v30 = *(_BYTE *)(v29 + 16) != 0;
      v31 = *(_BYTE *)(v29 + 17) != 0;
      v32 = (std::__shared_weak_count *)a3[1];
      v118[0] = *a3;
      v118[1] = v32;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      matched = ML3ImportSession::_matchAlbumToImportedEntity(a1, v118, AlbumArtistPIDForAlbumImportItem);
      v36 = matched;
      if (!v32)
        goto LABEL_59;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
        if ((v36 & 1) == 0)
        {
LABEL_102:
          v51 = v27;
          v52 = 0;
          v20 = 0;
          goto LABEL_103;
        }
      }
      else
      {
LABEL_59:
        if (!matched)
          goto LABEL_102;
      }
    }
    else
    {
      v31 = 0;
      v30 = 0;
    }
    v39 = (std::__shared_weak_count *)a2[1];
    v116 = *a2;
    v117 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = (std::__shared_weak_count *)a3[1];
    v114 = *a3;
    v115 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    ML3ImportSession::_getAlbumGroupingIdentifierForImportItem(a1, &v116, &v114, AlbumArtistPIDForAlbumImportItem);
    v20 = objc_claimAutoreleasedReturnValue();
    v45 = v115;
    if (v115)
    {
      v46 = (unint64_t *)&v115->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v117;
    if (v117)
    {
      v49 = (unint64_t *)&v117->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = v27;
    v52 = 1;
    if (!AlbumArtistPIDForAlbumImportItem && !v20)
    {
      v53 = a2[1];
      v112 = *a2;
      v113 = v53;
      if (v53)
      {
        v54 = (unint64_t *)(v53 + 8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v56 = (std::__shared_weak_count *)a3[1];
      v111[0] = *a3;
      v111[1] = v56;
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      AlbumArtistPIDForAlbumImportItem = ML3ImportSession::_getAlbumArtistPIDForAlbumImportItem((_QWORD *)a1, &v112, v111);
      if (v56)
      {
        v59 = (unint64_t *)&v56->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v20 = v113;
      if (v113)
      {
        v61 = (unint64_t *)(v113 + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          (*((void (**))v20->isa + 2))(v20);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
        }
        v20 = 0;
      }
      v52 = 1;
    }
LABEL_103:
    if (*a3)
      v63 = !v30;
    else
      v63 = 1;
    if (!v63 && !v31)
    {
      v103 = 0;
    }
    else
    {
      if (v52)
      {
        v65 = (std::__shared_weak_count *)a2[1];
        v110[0] = *a2;
        v110[1] = v65;
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        AlbumPersistentID = ML3ImportSession::_getAlbumPersistentID(a1, v110, v20);
        if (v65)
        {
          v69 = (unint64_t *)&v65->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            v71 = AlbumPersistentID;
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
            AlbumPersistentID = v71;
          }
        }
      }
      else
      {
        AlbumPersistentID = 0;
      }
      v103 = AlbumPersistentID;
      if (*(_DWORD *)(a1 + 32) == 2)
      {
        if (!AlbumPersistentID)
        {
          v72 = 0;
          ++*(_DWORD *)(a1 + 212);
LABEL_128:
          v74 = os_log_create("com.apple.amp.medialibrary", "Import_Oversize");
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 134219520;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v103;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v102;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
            *(_DWORD *)v136 = v52;
            *(_WORD *)&v136[4] = 1024;
            *(_DWORD *)&v136[6] = v72;
            *(_WORD *)&v136[10] = 2048;
            *(_QWORD *)&v136[12] = v20;
            *(_WORD *)&v136[20] = 2048;
            *(_QWORD *)&v136[22] = AlbumArtistPIDForAlbumImportItem;
            *(_WORD *)&v136[30] = 2048;
            *(_QWORD *)&v136[32] = v51;
            _os_log_impl(&dword_1AC149000, v74, OS_LOG_TYPE_DEFAULT, "importing album with PID=%lld, syncID=%lld, matchAlbumToImportedEntity=%{BOOL}u, isAlbumUpdate=%{BOOL}u, albumGroupingIdentifier=%p, albumArtistPersistentID=%lld, trackPersistentID=%lld", (uint8_t *)&buf, 0x40u);
          }

          v75 = *a2;
          if (!*a2 || *a3)
            goto LABEL_132;
          v95 = (std::__shared_weak_count *)a2[1];
          v108 = *a2;
          v109 = v95;
          if (v95)
          {
            v96 = (unint64_t *)&v95->__shared_owners_;
            do
              v97 = __ldxr(v96);
            while (__stxr(v97 + 1, v96));
          }
          ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)__p, v75, 285212673);
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&buf, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
          else
            buf = v126;
          ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)v131, v75, 285212699);
          if (SHIBYTE(v134) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v136, *(const std::string::value_type **)&v133[2], *(std::string::size_type *)&v133[10]);
          }
          else
          {
            *(_OWORD *)v136 = *(_OWORD *)&v133[2];
            *(_QWORD *)&v136[16] = v134;
          }
          (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 144))(&v122, v75, 285212673, 1);
          if (SHIBYTE(v124) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v136[24], (const std::string::value_type *)v123, *((std::string::size_type *)&v123 + 1));
          }
          else
          {
            *(_OWORD *)&v136[24] = v123;
            v137 = v124;
          }
          (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 144))(&v120, v75, 285212699, 1);
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v138, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
          else
            v138 = v121;
          v127 = 0;
          v128 = 0;
          v129[0] = 0;
          v129[1] = &v127;
          v130 = 0;
          v127 = (__int128 *)operator new(0x60uLL);
          v128 = v127;
          v129[0] = v127 + 6;
          v98 = 0;
          v128 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v129, (__int128 *)&buf, &v139, (std::string *)v127);
          do
          {
            if (SHIBYTE(v138.__r_.__value_.__r.__words[v98 + 2]) < 0)
              operator delete(*(void **)((char *)&v138.__r_.__value_.__l.__data_ + v98 * 8));
            v98 -= 3;
          }
          while (v98 != -12);
          v120 = off_1E5B4D010;
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v121.__r_.__value_.__l.__data_);
          v122 = off_1E5B4D010;
          if (SHIBYTE(v124) < 0)
            operator delete((void *)v123);
          *(_QWORD *)v131 = off_1E5B4D010;
          if (SHIBYTE(v134) < 0)
            operator delete(*(void **)&v133[2]);
          __p[0] = off_1E5B4D010;
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v126.__r_.__value_.__l.__data_);
          memset(&buf, 0, sizeof(buf));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&buf, v127, v128, 0xAAAAAAAAAAAAAAABLL * (((char *)v128 - (char *)v127) >> 3));
          v99 = ML3ImportSession::_processSortableNames(a1, (uint64_t *)&buf);
          __p[0] = &buf;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          __p[0] = &v127;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (!v95)
            goto LABEL_194;
          v100 = (unint64_t *)&v95->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
            if ((v99 & 1) == 0)
            {
LABEL_197:
              v25 = 0;
LABEL_159:
              if (*(_BYTE *)(a1 + 1512))
                std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>((_QWORD *)(a1 + 848), v103);
              goto LABEL_161;
            }
          }
          else
          {
LABEL_194:
            if (!v99)
              goto LABEL_197;
          }
LABEL_132:
          v76 = (std::__shared_weak_count *)a2[1];
          v106 = *a2;
          v107 = v76;
          if (v76)
          {
            v77 = (unint64_t *)&v76->__shared_owners_;
            do
              v78 = __ldxr(v77);
            while (__stxr(v78 + 1, v77));
          }
          if (v20)
            AlbumArtistPIDForAlbumImportItem = -[NSObject albumArtistPersistentID](v20, "albumArtistPersistentID");
          v79 = *a3;
          v80 = (std::__shared_weak_count *)a3[1];
          v105[0] = v79;
          v105[1] = v80;
          if (v80)
          {
            v81 = (unint64_t *)&v80->__shared_owners_;
            do
              v82 = __ldxr(v81);
            while (__stxr(v82 + 1, v81));
          }
          ML3ImportSession::_addAlbum(a1, &v106, v20, AlbumArtistPIDForAlbumImportItem, v105);
          if (v80)
          {
            v83 = (unint64_t *)&v80->__shared_owners_;
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v85 = v107;
          if (v107)
          {
            v86 = (unint64_t *)&v107->__shared_owners_;
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          v88 = *a2;
          v89 = (std::__shared_weak_count *)a2[1];
          v104[0] = v88;
          v104[1] = v89;
          if (v89)
          {
            v90 = (unint64_t *)&v89->__shared_owners_;
            do
              v91 = __ldxr(v90);
            while (__stxr(v91 + 1, v90));
          }
          ML3ImportSession::_addAlbumDataToSourceMaps(a1, v104);
          if (v89)
          {
            v92 = (unint64_t *)&v89->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
          v25 = 1;
          goto LABEL_159;
        }
        ++*(_DWORD *)(a1 + 216);
LABEL_126:
        v73 = *a2;
        v72 = 1;
        *(_BYTE *)(v73 + 16) = 1;
        *(_QWORD *)(v73 + 8) = AlbumPersistentID;
        goto LABEL_128;
      }
      if (AlbumPersistentID)
        goto LABEL_126;
    }
    v72 = 0;
    goto LABEL_128;
  }
  return 0;
}

void sub_1AC34030C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t (**a33)(),uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t (**a41)(),uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t (**a49)(),uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57,uint64_t a58,uint64_t a59,char a60)
{
  void *v60;
  uint64_t v61;
  uint64_t v62;

  a33 = off_1E5B4D010;
  if (a40 < 0)
    operator delete(__p);
  a41 = off_1E5B4D010;
  if (a48 < 0)
    operator delete(a43);
  *(_QWORD *)(v62 - 256) = off_1E5B4D010;
  if (*(char *)(v62 - 217) < 0)
    operator delete(*(void **)(v62 - 240));
  a49 = off_1E5B4D010;
  if (a56 < 0)
    operator delete(a51);
  for (; v61 != v62 - 208; v61 -= 24)
  {
    if (*(char *)(v61 - 1) < 0)
      operator delete(*(void **)(v61 - 24));
  }
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a17);

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_matchAlbumToImportedEntity(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  char v25;
  NSObject *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v30[6];
  char v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  __n128 (*v40)(__n128 *, __n128 *);
  void (*v41)(uint64_t);
  uint64_t v42;
  std::string __p;
  uint64_t v44;
  void *v45;
  _BYTE buf[12];
  __int16 v47;
  _BYTE v48[26];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v37 = 0;
  v38 = &v37;
  v39 = 0x4812000000;
  v40 = __Block_byref_object_copy__214;
  v41 = __Block_byref_object_dispose__215;
  v42 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(buf, *a2, 167772164);
  if ((v48[25] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v48[2], *(std::string::size_type *)&v48[10]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((v48[25] & 0x80000000) != 0)
      operator delete(*(void **)&v48[2]);
  }
  else
  {
    __p = *(std::string *)&v48[2];
  }
  v33 = 0;
  v34 = &v33;
  v35 = 0x2020000000;
  v36 = 0;
  v36 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 117440516);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 16777217);
  v7 = MLMediaTypeByStandardizingMediaType(v6);
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, 167772164);
  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, 117440516);
  v10 = *a2;
  if (*(_BYTE *)(*a2 + 16))
  {
    if (!*(_BYTE *)(v10 + 17))
    {
      v11 = v9;
      if ((v8 & v9 & 1) == 0)
      {
        v12 = *(void **)(a1 + 16);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(v10 + 8));
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = v13;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v45, 1);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "executeQuery:withParameters:", CFSTR("SELECT album_pid FROM item WHERE ROWID = ?"), v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v15, "objectForFirstRowAndColumn");
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = (void *)v16;
        if (v16)
        {
          v18 = *(void **)(a1 + 16);
          v44 = v16;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v44, 1);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "executeQuery:withParameters:", CFSTR("SELECT album, season_number FROM album WHERE album_pid = ?"), v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          v30[0] = MEMORY[0x1E0C809B0];
          v30[1] = 3221225472;
          v30[2] = ___ZN16ML3ImportSession27_matchAlbumToImportedEntityENSt3__110shared_ptrI13ML3ImportItemEEx_block_invoke;
          v30[3] = &unk_1E5B651B0;
          v31 = v8;
          v32 = v11;
          v30[4] = &v37;
          v30[5] = &v33;
          v15 = v20;
          objc_msgSend(v20, "enumerateRowsWithBlock:", v30);
        }

      }
    }
  }
  if (v34[3])
  {
    v21 = 1;
  }
  else
  {
    v22 = v7 & 0x10042;
    if (*((char *)v38 + 71) < 0)
      v23 = v38[7];
    else
      v23 = *((unsigned __int8 *)v38 + 71);
    if (a3)
      v24 = v22 == 0;
    else
      v24 = 1;
    v25 = !v24;
    v21 = 1;
    if (!v23 && (v25 & 1) == 0)
    {
      v26 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v27 = v38 + 6;
        if (*((char *)v38 + 71) < 0)
          v27 = (_QWORD *)*v27;
        v28 = v34[3];
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = v27;
        v47 = 2048;
        *(_QWORD *)v48 = v28;
        *(_WORD *)&v48[8] = 2048;
        *(_QWORD *)&v48[10] = a3;
        *(_WORD *)&v48[18] = 1024;
        *(_DWORD *)&v48[20] = v22 != 0;
        _os_log_impl(&dword_1AC149000, v26, OS_LOG_TYPE_DEFAULT, "will not try to deduplicate album with name=%{public}s, seasonNumber=%lld, albumArtistPID=%lld, isBook=%{BOOL}u", buf, 0x26u);
      }

      v21 = 0;
    }
  }
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v37, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v21;
}

void sub_1AC340948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a20, 8);
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

ML3AlbumGroupingIdentifier *ML3ImportSession::_getAlbumGroupingIdentifierForImportItem(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t AlbumArtistPIDForAlbumImportItem)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  std::string::size_type size;
  int v16;
  BOOL v17;
  ML3AlbumGroupingIdentifier *v18;
  void *v19;
  void *v20;
  void *v21;
  ML3AlbumGroupingIdentifier *v22;
  NSObject *v23;
  std::string *v24;
  ML3AlbumGroupingIdentifier *v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::string v42;
  std::string v43;
  std::string v44;
  _BYTE buf[12];
  __int16 v46;
  _BYTE v47[26];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)*a3;
  if (*a3)
  {
    v9 = v8[1];
    v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v8 + 32))(v8, 16777246) != 0;
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212681);
    v9 = 0;
  }
  if (*a3)
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a3 + 24))(buf, *a3, 167772164);
  else
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 24))(buf, *a2, 285212673);
  if ((v47[25] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)&v47[2], *(std::string::size_type *)&v47[10]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((v47[25] & 0x80000000) != 0)
      operator delete(*(void **)&v47[2]);
  }
  else
  {
    v44 = *(std::string *)&v47[2];
  }
  v11 = *a3;
  if (!*a3)
    v11 = *a2;
  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v11 + 24))(buf);
  if ((v47[25] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)&v47[2], *(std::string::size_type *)&v47[10]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((v47[25] & 0x80000000) != 0)
      operator delete(*(void **)&v47[2]);
  }
  else
  {
    v43 = *(std::string *)&v47[2];
  }
  if (*a3)
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 117440516) != 0;
  else
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212683);
  if (*a3)
    (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*a3 + 152))(buf, *a3, 0);
  else
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 24))(buf, *a2, 285212699);
  if ((v47[25] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)&v47[2], *(std::string::size_type *)&v47[10]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((v47[25] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v47[2]);
      if (AlbumArtistPIDForAlbumImportItem)
        goto LABEL_28;
    }
    else if (AlbumArtistPIDForAlbumImportItem)
    {
      goto LABEL_28;
    }
  }
  else
  {
    v42 = *(std::string *)&v47[2];
    if (AlbumArtistPIDForAlbumImportItem)
      goto LABEL_28;
  }
  v27 = (std::__shared_weak_count *)a2[1];
  v40 = *a2;
  v41 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  v30 = (std::__shared_weak_count *)a3[1];
  v38 = *a3;
  v39 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  AlbumArtistPIDForAlbumImportItem = ML3ImportSession::_getAlbumArtistPIDForAlbumImportItem((_QWORD *)a1, &v40, &v38);
  if (v30)
  {
    v33 = (unint64_t *)&v30->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v35 = v41;
  if (v41)
  {
    v36 = (unint64_t *)&v41->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
LABEL_28:
  if (!v9)
    goto LABEL_31;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 16777217);
  v14 = MLMediaTypeByStandardizingMediaType(v13);
  if ((v14 & 0x10002) != 0)
  {
    LODWORD(v9) = 1;
LABEL_31:
    if (v12)
      goto LABEL_44;
    goto LABEL_32;
  }
  LODWORD(v9) = (v14 >> 6) & 1;
  if (v12)
    goto LABEL_44;
LABEL_32:
  size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v44.__r_.__value_.__l.__size_;
  if (AlbumArtistPIDForAlbumImportItem)
    v16 = v9;
  else
    v16 = 0;
  if (size)
    v17 = 0;
  else
    v17 = v16 == 0;
  if (v17)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    goto LABEL_45;
  }
LABEL_44:
  ML3CPPBridgeString((const UInt8 *)&v44, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  ML3CPPBridgeString((const UInt8 *)&v43, 1);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 8), "groupingKeyForString:", v20);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = [ML3AlbumGroupingIdentifier alloc];
  v18 = -[ML3AlbumGroupingIdentifier initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:](v22, "initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:", AlbumArtistPIDForAlbumImportItem, v19, v21, v12, v10 != 0, v38, v39, v40);
LABEL_45:
  v23 = os_log_create("com.apple.amp.medialibrary", "Import_Oversize");
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v24 = &v42;
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v42.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 138544130;
    *(_QWORD *)&buf[4] = v18;
    v46 = 2114;
    *(_QWORD *)v47 = v20;
    *(_WORD *)&v47[8] = 2082;
    *(_QWORD *)&v47[10] = v24;
    *(_WORD *)&v47[18] = 1024;
    *(_DWORD *)&v47[20] = v9;
    _os_log_impl(&dword_1AC149000, v23, OS_LOG_TYPE_DEFAULT, "Creating albumGroupingIdentifier=%{public}@ with albumName=%{public}@, albumArtistName=%{public}s, isBook=%{BOOL}u", buf, 0x26u);
  }

  v25 = v18;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  return v25;
}

void sub_1AC340F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_getAlbumArtistPIDForAlbumImportItem(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  std::string::size_type v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  _BOOL4 v40;
  void *isa;
  const char *v42;
  NSObject *v43;
  uint32_t v44;
  void *v45;
  std::string *v46;
  std::string v48;
  std::string v49;
  NSData v50;
  std::string __p;
  std::string v52;
  void *v53;
  std::string v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (*a3)
    (*(void (**)(NSData *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a3 + 152))(&v50, *a3, 0);
  else
    (*(void (**)(NSData *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(&v50, *a2, 285212699);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v52, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v50.super.isa = (Class)off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v52 = __p;
  }
  v6 = (_QWORD *)*a3;
  if (*a3)
  {
    v7 = v6[1];
  }
  else
  {
    v7 = 0;
    v6 = (_QWORD *)*a2;
  }
  (*(void (**)(NSData *__return_ptr))(*v6 + 24))(&v50);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v49, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v50.super.isa = (Class)off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v49 = __p;
  }
  memset(&v48, 0, sizeof(v48));
  v8 = *a2;
  if (!*a3)
  {
    if (!v8)
      goto LABEL_24;
    (*(void (**)(NSData *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v8 + 24))(&v50, *a2, 285212701);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_22;
LABEL_21:
    v54 = __p;
    v48 = __p;
    v50.super.isa = (Class)off_1E5B4D010;
    goto LABEL_24;
  }
  if (v8)
    goto LABEL_24;
  (*(void (**)(NSData *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a3 + 24))(&v50, *a3, 301989899);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_21;
LABEL_22:
  std::string::__init_copy_ctor_external(&v54, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  v48 = v54;
  v50.super.isa = (Class)off_1E5B4D010;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
  size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v48.__r_.__value_.__l.__size_;
  if (size)
  {
    v10 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>(a1 + 161, (unsigned __int8 *)&v48);
    if (v10)
    {
      v11 = (uint64_t *)*((_QWORD *)v10 + 5);
      v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        v15 = *v11;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        if (v15)
          goto LABEL_90;
      }
      else
      {
        v15 = *v11;
        if (*v11)
          goto LABEL_90;
      }
    }
  }
  v17 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = v52.__r_.__value_.__l.__size_;
  if (v17)
  {
    v18 = (void *)a1[1];
    ML3CPPBridgeString((const UInt8 *)&v52, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "groupingKeyForString:", v19, v48.__r_.__value_.__r.__words[0]);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v20, "length"))
    {
      ML3CPPStringFromData(&v50, v20);
      v21 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>(a1 + 141, (unsigned __int8 *)&v50);
      v22 = v21;
      if (__p.__r_.__value_.__s.__data_[7] < 0)
      {
        operator delete(v50.super.isa);
        if (!v22)
          goto LABEL_58;
      }
      else if (!v21)
      {
        goto LABEL_58;
      }
      v23 = (uint64_t *)*((_QWORD *)v22 + 5);
      v24 = (std::__shared_weak_count *)*((_QWORD *)v22 + 6);
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        v15 = *v23;
        do
          v27 = __ldaxr(v25);
        while (__stlxr(v27 - 1, v25));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        if (v15)
          goto LABEL_59;
        goto LABEL_58;
      }
      v15 = *v23;
      if (!*v23)
      {
LABEL_58:
        v28 = (void *)a1[2];
        v53 = v20;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v53, 1);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "executeQuery:withParameters:", CFSTR("SELECT album_artist_pid FROM album_artist WHERE grouping_key=? LIMIT 1"), v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();

        v15 = objc_msgSend(v30, "int64ValueForFirstRowAndColumn");
      }
    }
    else
    {
      v15 = 0;
    }
LABEL_59:

    goto LABEL_60;
  }
  v15 = 0;
LABEL_60:
  if (v15 || !v7)
    goto LABEL_73;
  v31 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(a1 + 42, v7);
  if (!v31)
    goto LABEL_74;
  v32 = (uint64_t *)v31[5];
  v33 = (std::__shared_weak_count *)v31[6];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  if (v32)
  {
    v15 = *v32;
    if (!v33)
      goto LABEL_73;
  }
  else
  {
    v15 = 0;
    if (!v33)
      goto LABEL_73;
  }
  v36 = (unint64_t *)&v33->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (v37)
  {
LABEL_73:
    if (v15)
      goto LABEL_90;
LABEL_74:
    v38 = *a2;
    v39 = os_log_create("com.apple.amp.medialibrary", "Import");
    v40 = os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
    if (v38)
    {
      if (v40)
      {
        (*(void (**)(NSData *__return_ptr))(*(_QWORD *)*a2 + 88))(&v50);
        if (__p.__r_.__value_.__s.__data_[7] >= 0)
          isa = &v50;
        else
          isa = v50.super.isa;
        LODWORD(v54.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 4) = (std::string::size_type)isa;
        v42 = "Album import item=%{public}s does not have valid album artist";
        v43 = v39;
        v44 = 12;
LABEL_87:
        _os_log_impl(&dword_1AC149000, v43, OS_LOG_TYPE_ERROR, v42, (uint8_t *)&v54, v44);
        if (__p.__r_.__value_.__s.__data_[7] < 0)
          operator delete(v50.super.isa);
      }
    }
    else if (v40)
    {
      (*(void (**)(NSData *__return_ptr))(*(_QWORD *)*a3 + 88))(&v50);
      if (__p.__r_.__value_.__s.__data_[7] >= 0)
        v45 = &v50;
      else
        v45 = v50.super.isa;
      v46 = &v49;
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v46 = (std::string *)v49.__r_.__value_.__r.__words[0];
      LODWORD(v54.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
      WORD2(v54.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v54.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v46;
      v42 = "Track import item=%{public}s with albumName=%{public}s does not have valid album artist";
      v43 = v39;
      v44 = 22;
      goto LABEL_87;
    }

    v15 = 0;
    goto LABEL_90;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (!v15)
    goto LABEL_74;
LABEL_90:
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  return v15;
}

void sub_1AC34164C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_getAlbumPersistentID(uint64_t a1, _QWORD *a2, void *a3)
{
  id v5;
  _BOOL4 v6;
  unsigned int v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  std::string::size_type size;
  unsigned __int8 *v13;
  NSObject *v14;
  std::string *v15;
  void *v16;
  unsigned __int8 *v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  NSObject *v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  std::string v38;
  _BYTE v39[128];
  _BYTE buf[12];
  __int16 v41;
  _BYTE v42[26];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = *(_DWORD *)(a1 + 248) > 0x3E7u || *(_BYTE *)(a1 + 1512) != 0;
  v7 = *(_DWORD *)(a1 + 32);
  if (ML3AlbumRulesIdentityImportPropertyForSource(v7))
  {
    if (*(_DWORD *)(a1 + 32) == 2)
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 24))(buf);
      if ((v42[25] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)&v42[2], *(std::string::size_type *)&v42[10]);
        *(_QWORD *)buf = off_1E5B4D010;
        if ((v42[25] & 0x80000000) != 0)
          operator delete(*(void **)&v42[2]);
      }
      else
      {
        v38 = *(std::string *)&v42[2];
      }
      size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v38.__r_.__value_.__l.__size_;
      if (!size)
        goto LABEL_30;
      if (v6 && !*(_BYTE *)(a1 + 1519))
        ML3ImportSession::_populateExistingAlbumIdentifiersForSource((ML3ImportSession *)a1, *(unsigned int *)(a1 + 32));
      v13 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a1 + 2128), (unsigned __int8 *)&v38);
      if (v13)
      {
        v10 = *((_QWORD *)v13 + 5);
        v14 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v15 = &v38;
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v15 = (std::string *)v38.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v10;
          v41 = 2082;
          *(_QWORD *)v42 = v15;
          _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_DEFAULT, "matched to cached album pid %lld on cloudID=%{public}s", buf, 0x16u);
        }

      }
      else
      {
LABEL_30:
        v10 = 0;
      }
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
      operator delete(v38.__r_.__value_.__l.__data_);
      if (v10)
        goto LABEL_66;
    }
    else
    {
      v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
      if (v8)
      {
        if (v6 && !*(_BYTE *)(a1 + 1519))
          ML3ImportSession::_populateExistingAlbumIdentifiersForSource((ML3ImportSession *)a1, *(unsigned int *)(a1 + 32));
        v9 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 2088), v8);
        if (v9)
        {
          v10 = v9[3];
          v11 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = v10;
            v41 = 2048;
            *(_QWORD *)v42 = v8;
            _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_DEFAULT, "matched to cached album pid %lld on sourceID=%lld", buf, 0x16u);
          }

LABEL_32:
          if (v10)
            goto LABEL_66;
        }
      }
    }
  }
  if (v5 && v7 - 1 >= 2)
  {
    objc_msgSend(v5, "keyValue");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    ML3CPPStringFromData((NSData *)buf, v16);
    v17 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a1 + 1248), buf);
    if ((v42[9] & 0x80000000) != 0)
      operator delete(*(void **)buf);

    if (v17)
    {
      v18 = (uint64_t *)*((_QWORD *)v17 + 5);
      v19 = (std::__shared_weak_count *)*((_QWORD *)v17 + 6);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      v10 = *v18;
      v22 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v10;
        _os_log_impl(&dword_1AC149000, v22, OS_LOG_TYPE_DEFAULT, "matched to cached album pid %lld based on grouping key", buf, 0xCu);
      }

      if (!v19)
        goto LABEL_49;
      v23 = (unint64_t *)&v19->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        if (v10)
          goto LABEL_66;
      }
      else
      {
LABEL_49:
        if (v10)
          goto LABEL_66;
      }
    }
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = v25;
  if (v25)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v27 = v25;
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
    if (v28)
    {
      v29 = *(_QWORD *)v35;
      while (2)
      {
        for (i = 0; i != v28; ++i)
        {
          if (*(_QWORD *)v35 != v29)
            objc_enumerationMutation(v27);
          +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3Album, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", *(_QWORD *)(a1 + 8), *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * i), 0, (_QWORD)v34);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = objc_msgSend(v31, "anyEntityPersistentID");
          if (v10)
          {
            v32 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218242;
              *(_QWORD *)&buf[4] = v10;
              v41 = 2114;
              *(_QWORD *)v42 = v31;
              _os_log_impl(&dword_1AC149000, v32, OS_LOG_TYPE_DEFAULT, "matched to album pid %lld using query %{public}@", buf, 0x16u);
            }

            goto LABEL_63;
          }

        }
        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
        if (v28)
          continue;
        break;
      }
    }
    v10 = 0;
LABEL_63:

  }
  else
  {
    v10 = 0;
  }

LABEL_66:
  return v10;
}

void sub_1AC341C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ML3ImportSession::_addAlbum(uint64_t a1, _QWORD *a2, void *a3, uint64_t a4, _QWORD *a5)
{
  id v7;
  void *v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  std::string *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int shouldPreserveTrackProperty;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  const void *v37;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  NSObject *v43;
  std::string::size_type v44;
  _BYTE *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  std::string::__raw *v53;
  std::string::__raw *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  const std::string *v60;
  const std::string *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  std::__shared_weak_count *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const std::string *v72;
  std::string::size_type v73;
  std::string::size_type v74;
  std::string *v75;
  const std::string *v76;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  NSObject *v99;
  std::string::__raw *v100;
  std::string *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  char shouldPreserveAlbumProperty;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t PropertyIndex;
  BOOL v114;
  std::string::size_type v115;
  std::string::size_type v116;
  const void **p_data;
  std::string::size_type v118;
  std::string::size_type v119;
  std::string::size_type v120;
  char v121;
  std::string::size_type v122;
  std::string::size_type v123;
  std::string *v124;
  const std::string *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  NSObject *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  std::string::size_type v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  void *v143;
  void *v144;
  std::string::size_type v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *size;
  unint64_t *v168;
  unint64_t v169;
  void *v170;
  int v171;
  std::string::size_type v172;
  char v173;
  int v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  BOOL v179;
  NSObject *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  NSObject *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  NSObject *v188;
  uint64_t v189;
  const std::string *v190;
  uint64_t v191;
  uint64_t v192;
  std::string::size_type v193;
  std::string *v194;
  unsigned __int8 *v195;
  std::string::size_type v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  NSObject *v203;
  std::string::__raw *v204;
  std::string *v205;
  unint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v211;
  _QWORD *v212;
  NSObject *v213;
  uint64_t v214;
  std::string::__raw *v215;
  NSObject *v216;
  _QWORD *v217;
  std::string *v218;
  _QWORD *v219;
  unsigned __int8 *v220;
  int8x8_t v221;
  unint64_t v222;
  uint8x8_t v223;
  NSObject *v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;
  unint64_t v227;
  unint64_t v228;
  BOOL v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  NSObject *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  NSObject *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  NSObject *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  NSObject *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  _QWORD *v256;
  char *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  BOOL v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  NSObject *v267;
  uint64_t v268;
  uint64_t v269;
  _BOOL4 v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  _QWORD *v276;
  char *v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  NSObject *v286;
  int v287;
  int v288;
  NSObject *v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  unint64_t v298;
  _QWORD *v299;
  char *v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  NSObject *v309;
  int v310;
  uint64_t *v311;
  int v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t *v322;
  unint64_t v323;
  int v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t *v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  uint64_t *v344;
  uint64_t *v345;
  uint64_t *v346;
  unsigned __int8 *v347;
  unint64_t v348;
  uint64_t v349;
  unsigned int v350;
  id v351;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  std::__shared_weak_count *v357;
  uint64_t v358;
  std::__shared_weak_count *v359;
  std::string v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  uint64_t *v363;
  std::__shared_weak_count *v364;
  std::string v365;
  BOOL v366;
  _QWORD v367[23];
  std::__shared_weak_count *v368;
  uint64_t v369;
  uint64_t v370;
  std::__shared_weak_count *v371;
  uint64_t v372;
  unint64_t v373;
  int v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  _QWORD v377[2];
  uint64_t v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  char v386;
  uint64_t v387;
  uint64_t *v388;
  uint64_t v389;
  BOOL v390;
  BOOL v391;
  uint64_t v392;
  unsigned __int8 *v393;
  uint64_t v394;
  BOOL v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t *v425;
  uint64_t v426;
  __n128 (*v427)(__n128 *, __n128 *);
  void (*v428)(uint64_t);
  uint64_t v429;
  std::string __p;
  std::string v431;
  uint64_t v432;
  __int128 *v433;
  uint64_t v434;
  __n128 (*v435)(__n128 *, __n128 *);
  void (*v436)(uint64_t);
  uint64_t v437;
  std::string v438;
  uint64_t v439;
  const std::string *v440;
  uint64_t v441;
  __n128 (*v442)(__n128 *, __n128 *);
  void (*v443)(uint64_t);
  uint64_t v444;
  std::string v445;
  uint64_t v446;
  const std::string *v447;
  uint64_t v448;
  __n128 (*v449)(__n128 *, __n128 *);
  void (*v450)(uint64_t);
  uint64_t v451;
  std::string v452;
  uint64_t v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t (*v456)(uint64_t, uint64_t);
  void (*v457)(uint64_t);
  id v458;
  id v459;
  uint64_t v460;
  uint64_t *v461;
  uint64_t v462;
  __n128 (*v463)(__n128 *, __n128 *);
  uint64_t (*v464)(uint64_t);
  const char *v465;
  uint64_t v466;
  std::__shared_weak_count *v467;
  std::string v468;
  _BYTE buf[42];
  __int16 v470;
  uint64_t v471;
  __int16 v472;
  uint64_t v473;
  __int16 v474;
  _QWORD *v475;
  __int16 v476;
  uint64_t v477;
  __int16 v478;
  unsigned int v479;
  __int16 v480;
  uint64_t v481;
  __int16 v482;
  uint64_t v483;
  __int16 v484;
  uint64_t v485;
  void *v486;
  void *v487;
  std::string v488;
  uint64_t v489;

  v489 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = v7;
  v460 = 0;
  v461 = &v460;
  v462 = 0x4012000000;
  v463 = __Block_byref_object_copy__337;
  v464 = __Block_byref_object_dispose__338;
  v467 = 0;
  v465 = "";
  v466 = 0;
  if (v7)
  {
    objc_msgSend(v7, "groupingKey");
    v459 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v459 = 0;
  }
  v453 = 0;
  v454 = &v453;
  v455 = 0x3032000000;
  v456 = __Block_byref_object_copy__212;
  v457 = __Block_byref_object_dispose__213;
  v351 = v8;
  v458 = v351;
  v446 = 0;
  v447 = (const std::string *)&v446;
  v448 = 0x4812000000;
  v449 = __Block_byref_object_copy__214;
  v450 = __Block_byref_object_dispose__215;
  v451 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(buf, *a2, 285212673);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v452, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v452 = *(std::string *)&buf[16];
  }
  v439 = 0;
  v440 = (const std::string *)&v439;
  v441 = 0x4812000000;
  v442 = __Block_byref_object_copy__214;
  v443 = __Block_byref_object_dispose__215;
  v444 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(buf, *a2, 285212674);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v445, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v445 = *(std::string *)&buf[16];
  }
  v432 = 0;
  v433 = (__int128 *)&v432;
  v434 = 0x4812000000;
  v435 = __Block_byref_object_copy__214;
  v436 = __Block_byref_object_dispose__215;
  v437 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(buf, *a2, 285212682);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v438, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v438 = *(std::string *)&buf[16];
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(buf, *a2, 301989889);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v431, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v431 = *(std::string *)&buf[16];
  }
  v424 = 0;
  v425 = &v424;
  v426 = 0x4812000000;
  v427 = __Block_byref_object_copy__214;
  v428 = __Block_byref_object_dispose__215;
  v429 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(buf, *a2, 285212697);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    __p = *(std::string *)&buf[16];
  }
  v420 = 0;
  v421 = &v420;
  v422 = 0x2020000000;
  v423 = 0;
  v423 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212679);
  v416 = 0;
  v417 = &v416;
  v418 = 0x2020000000;
  v419 = 0;
  v419 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212690);
  v412 = 0;
  v413 = &v412;
  v414 = 0x2020000000;
  v415 = 0;
  v415 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212680);
  v408 = 0;
  v409 = &v408;
  v410 = 0x2020000000;
  v411 = 0;
  v411 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212683);
  v404 = 0;
  v405 = &v404;
  v406 = 0x2020000000;
  v407 = 0;
  v407 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212684);
  v400 = 0;
  v401 = &v400;
  v402 = 0x2020000000;
  v403 = 0;
  v403 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212696);
  v396 = 0;
  v397 = &v396;
  v398 = 0x2020000000;
  v399 = 0;
  v399 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212695);
  v392 = 0;
  v393 = (unsigned __int8 *)&v392;
  v394 = 0x2020000000;
  v395 = 0;
  v395 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212681) != 0;
  v391 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212688) != 0;
  v387 = 0;
  v388 = &v387;
  v389 = 0x2020000000;
  v390 = 0;
  v390 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212693) != 0;
  v383 = 0;
  v384 = &v383;
  v385 = 0x2020000000;
  v386 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, 33554462) & 1) != 0)
    v9 = 1;
  else
    v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, 16777248);
  v386 = v9;
  v382 = a4;
  v355 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 167772175);
  v378 = 0;
  v379 = &v378;
  v380 = 0x2020000000;
  v381 = 0;
  v381 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 285212691);
  v10 = (_QWORD *)*a5;
  if (*a5)
  {
    v354 = v10[1];
    v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v10 + 32))(v10, 16777217);
    v350 = (MLMediaTypeByStandardizingMediaType(v11) >> 10) & 1;
  }
  else
  {
    v354 = 0;
    v350 = 0;
  }
  if (v355 && v379[3])
  {
    *(_BYTE *)(a1 + 1521) = 1;
    v12 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a2 + 88))(&v488);
      v13 = (v488.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v488
          : (std::string *)v488.__r_.__value_.__r.__words[0];
      v14 = v379[3];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v355;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v14;
      _os_log_impl(&dword_1AC149000, v12, OS_LOG_TYPE_ERROR, "Album Import Item=%{public}s has syncID=%lld and legacySyncID=%lld", buf, 0x20u);
      if (SHIBYTE(v488.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v488.__r_.__value_.__l.__data_);
    }

  }
  if (*a5)
  {
    v15 = *(void **)(a1 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v354);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v487 = v16;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v487, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "executeQuery:withParameters:", CFSTR("SELECT album_pid FROM item WHERE ROWID = ?"), v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = objc_msgSend(v18, "int64ValueForFirstRowAndColumn");
    if (*(_BYTE *)(*a5 + 16))
    {
      v20 = v19;
      v21 = (std::__shared_weak_count *)a5[1];
      v377[0] = *a5;
      v377[1] = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(a1, (uint64_t)v377, 0x1000009u);
      if (v21)
      {
        v25 = (unint64_t *)&v21->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v20)
        v27 = 0;
      else
        v27 = shouldPreserveTrackProperty;
      if (v27 == 1)
      {
        v28 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1AC149000, v28, OS_LOG_TYPE_DEFAULT, "Not updating/creating album as pid=0 AND persistentID is preserved by a higher source", buf, 2u);
        }

        ML3ImportSession::_getDefaultEmptyAlbum((ML3ImportSession *)&v375);
        v29 = v376;
        ML3ImportSession::_setAlbumInfoForTrackPersistentID(a1, v354, v375, (uint64_t)v376);
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }

        goto LABEL_573;
      }
      if (!*(_BYTE *)(*a5 + 17))
      {
        v77 = *a2;
        *(_QWORD *)(v77 + 8) = v20;
        *(_BYTE *)(v77 + 16) = 0;
        v78 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
        {
          v79 = *(_QWORD *)(*a5 + 8);
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v20;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v79;
          _os_log_impl(&dword_1AC149000, v78, OS_LOG_TYPE_DEFAULT, "Setting albumPID=%lld for trackPID=%lld", buf, 0x16u);
        }

        if (v20)
        {
          v80 = *(void **)(a1 + 16);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v20);
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          v486 = v81;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v486, 1);
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v80, "executeQuery:withParameters:", CFSTR("SELECT album, sort_album, feed_url, user_rating, liked_state, liked_state_changed_date, all_compilations, season_number, representative_item_pid, grouping_key, album_year, contains_classical_work, user_rating_is_derived, sync_id, store_id, cloud_library_id, classical_experience_available, album_artist_pid FROM album WHERE album_pid=?"), v82);
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          v84 = v83;
          v367[0] = MEMORY[0x1E0C809B0];
          v367[1] = 3321888768;
          v367[2] = ___ZN16ML3ImportSession9_addAlbumENSt3__110shared_ptrI13ML3ImportItemEEP26ML3AlbumGroupingIdentifierxS3__block_invoke;
          v367[3] = &unk_1E5B52678;
          v85 = *a2;
          v86 = (std::__shared_weak_count *)a2[1];
          v367[21] = a1;
          v367[22] = v85;
          v368 = v86;
          if (v86)
          {
            v87 = (unint64_t *)&v86->__shared_owners_;
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
          v367[4] = &v446;
          v367[5] = &v439;
          v367[6] = &v432;
          v367[7] = &v420;
          v367[8] = &v412;
          v367[9] = &v396;
          v367[10] = &v392;
          v367[11] = &v408;
          v367[12] = &v404;
          v367[13] = &v383;
          v367[14] = &v416;
          v367[15] = &v400;
          v367[16] = &v378;
          v367[17] = &v424;
          v367[18] = &v387;
          v367[19] = &v453;
          v374 = 16777225;
          v90 = *a5;
          v89 = (std::__shared_weak_count *)a5[1];
          v369 = a4;
          v370 = v90;
          v371 = v89;
          if (v89)
          {
            v91 = (unint64_t *)&v89->__shared_owners_;
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          v372 = v20;
          v367[20] = &v460;
          v373 = v354;
          objc_msgSend(v83, "enumerateRowsWithBlock:", v367);

          v93 = v371;
          if (v371)
          {
            v94 = (unint64_t *)&v371->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          v96 = v368;
          if (v368)
          {
            v97 = (unint64_t *)&v368->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
        }
        else
        {
          v224 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v224, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v354;
            _os_log_impl(&dword_1AC149000, v224, OS_LOG_TYPE_ERROR, "No existing album PID for update item %lli", buf, 0xCu);
          }

        }
      }
    }

  }
  v366 = 0;
  if (!v461[6])
  {
    if (*(_QWORD *)(*a2 + 8))
    {
LABEL_65:
      v32 = (void *)v454[5];
      if (*((char *)v425 + 71) < 0)
        std::string::__init_copy_ctor_external(&v365, (const std::string::value_type *)v425[6], v425[7]);
      else
        v365 = *(std::string *)((_BYTE *)v425 + 2);
      ML3ImportSession::_getAlbumImportItemForGroupingIdentifierAndPIDs(buf, a1, v32, (uint64_t *)&v365, *(_QWORD *)(*a2 + 8), v355, &v366);
      std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v461 + 6), (__int128 *)buf);
      v33 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v34 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v365.__r_.__value_.__l.__data_);
      goto LABEL_78;
    }
    if (*((char *)v425 + 71) < 0)
    {
      if (v425[7])
        goto LABEL_65;
    }
    else if (*((_BYTE *)v425 + 71))
    {
      goto LABEL_65;
    }
    objc_msgSend((id)v454[5], "groupingKey");
    v170 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v170, "length") || objc_msgSend((id)v454[5], "albumArtistPersistentID"))
    {

    }
    else
    {
      v229 = objc_msgSend((id)v454[5], "seasonNumber") == 0;

      if (v229)
        goto LABEL_78;
    }
    goto LABEL_65;
  }
LABEL_78:
  v36 = v461;
  v37 = (const void *)v461[6];
  if (!v37)
  {
    if (!*(_QWORD *)(*a2 + 8))
      goto LABEL_91;
    v43 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(buf);
      v44 = *(_QWORD *)(*a2 + 8);
      v45 = *(_BYTE **)buf;
      if (buf[23] >= 0)
        v45 = buf;
      LODWORD(v488.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v488.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
      WORD2(v488.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v488.__r_.__value_.__r.__words[1] + 6) = v44;
      _os_log_impl(&dword_1AC149000, v43, OS_LOG_TYPE_ERROR, "Import item %{public}s has valid PID=%lld, but cannot be located in the database", (uint8_t *)&v488, 0x16u);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }

    v36 = v461;
    v37 = (const void *)v461[6];
    if (!v37)
    {
LABEL_91:
      v46 = v355;
      if (!v355)
      {
        v127 = (std::__shared_weak_count *)a2[1];
        if (v127)
        {
          v128 = (unint64_t *)&v127->__shared_owners_;
          do
            v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
        }
        v46 = objc_msgSend(*(id *)(a1 + 128), "nextPersistentID");
        v130 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v46;
          _os_log_impl(&dword_1AC149000, v130, OS_LOG_TYPE_DEFAULT, "created new album pid %lld", buf, 0xCu);
        }

        if (v127)
        {
          v131 = (unint64_t *)&v127->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
      }
      objc_msgSend((id)v454[5], "groupingKey");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = v459;
      v459 = v47;

      v49 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a1, (uint64_t)&v440[2], (uint64_t)&v447[2]);
      v51 = v50;
      v52 = os_log_create("com.apple.amp.medialibrary", "Import_Oversize");
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        v53 = (std::string::__raw *)&v447[2];
        if (SHIBYTE(v447[2].__r_.__value_.__r.__words[2]) < 0)
          v53 = (std::string::__raw *)v53->__words[0];
        v54 = (std::string::__raw *)&v440[2];
        if (SHIBYTE(v440[2].__r_.__value_.__r.__words[2]) < 0)
          v54 = (std::string::__raw *)v54->__words[0];
        v55 = v401[3];
        v56 = v379[3];
        v57 = v425 + 6;
        if (*((char *)v425 + 71) < 0)
          v57 = (_QWORD *)*v57;
        v58 = v413[3];
        v59 = v454[5];
        *(_DWORD *)buf = 134220802;
        *(_QWORD *)&buf[4] = v46;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v53;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v54;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v55;
        v470 = 2048;
        v471 = v355;
        v472 = 2048;
        v473 = v56;
        v474 = 2082;
        v475 = v57;
        v476 = 2048;
        v477 = v58;
        v478 = 1024;
        v479 = v350;
        v480 = 2048;
        v481 = v51;
        v482 = 2048;
        v483 = v49;
        v484 = 2114;
        v485 = v59;
        _os_log_impl(&dword_1AC149000, v52, OS_LOG_TYPE_DEFAULT, "creating new album entry: pid=%lld, name='%{public}s', sortName='%{public}s', storeID=%lld, syncID=%lld, legacySyncID=%lld, cloudLibraryID=%{public}s, likedState=%lld, isMusicVideo=%{BOOL}u, order.section=%ld, order.sortOrder=%lld using albumGroupingIdentifier=%{public}@", buf, 0x76u);
      }
      v349 = v51;
      v353 = v49;

      v348 = v46;
      v60 = v447;
      v61 = v440;
      v62 = v421;
      v63 = v417;
      v64 = v413;
      v65 = v405;
      v344 = v379;
      v66 = v401;
      v67 = v425;
      v346 = v388;
      v347 = v393;
      v345 = v397;
      v68 = (std::__shared_weak_count *)operator new(0xB0uLL);
      v68->__shared_owners_ = 0;
      v68->__shared_weak_owners_ = 0;
      v68->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51298;
      if (SHIBYTE(v60[2].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, v60[2].__r_.__value_.__l.__data_, v60[2].__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)&v60[2].__r_.__value_.__l.__data_;
        *(_QWORD *)&buf[16] = *((_QWORD *)&v60[2].__r_.__value_.__l + 2);
      }
      if (SHIBYTE(v61[2].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v488, v61[2].__r_.__value_.__l.__data_, v61[2].__r_.__value_.__l.__size_);
      else
        v488 = v61[2];
      if (!v355)
        v355 = v344[3];
      v133 = v62[3];
      v134 = v64[3];
      v135 = v65[3];
      v136 = v63[3];
      v137 = v391;
      v138 = v66[3];
      if (*((char *)v67 + 71) < 0)
        std::string::__init_copy_ctor_external(&v468, (const std::string::value_type *)v67[6], v67[7]);
      else
        v468 = *(std::string *)((_BYTE *)v67 + 2);
      ML3AlbumData::ML3AlbumData((uint64_t)&v68[1], v348, (__int128 *)buf, (__int128 *)&v488, v133, v136 != 0, v134, v135, v353, v349, v137, v355, v138, (__int128 *)&v468, v347[24], *((_BYTE *)v346 + 24), v345[3]);
      if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v468.__r_.__value_.__l.__data_);
      if (SHIBYTE(v488.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v488.__r_.__value_.__l.__data_);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v360.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68[1];
      v360.__r_.__value_.__l.__size_ = (std::string::size_type)v68;
      v139 = v354;
      if (v350)
        v139 = 0;
      v488.__r_.__value_.__r.__words[0] = v139;
      std::allocate_shared[abi:ne180100]<ML3AlbumImportItem,std::allocator<ML3AlbumImportItem>,std::shared_ptr<ML3AlbumData> &,std::string &,BOOL &,NSData * {__strong}&,long long,long long &,long long &,BOOL &,void>(buf, (uint64_t)&v68[1], v68, v433 + 3, v393 + 24, &v459, (uint64_t *)&v488, &v382, v409 + 3, (char *)&v391);
      std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v461 + 6), (__int128 *)buf);
      v140 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v141 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      v143 = (void *)v454[5];
      if (v143)
      {
        objc_msgSend(v143, "keyValue");
        v144 = (void *)objc_claimAutoreleasedReturnValue();
        ML3CPPStringFromData((NSData *)&v488, v144);
        *(_OWORD *)buf = *(_OWORD *)&v488.__r_.__value_.__l.__data_;
        v145 = v488.__r_.__value_.__r.__words[2];
        memset(&v488, 0, sizeof(v488));
        *(_QWORD *)&buf[16] = v145;
        *(_OWORD *)&buf[24] = *(_OWORD *)&v360.__r_.__value_.__l.__data_;
        if (v360.__r_.__value_.__l.__size_)
        {
          v146 = (unint64_t *)(v360.__r_.__value_.__l.__size_ + 8);
          do
            v147 = __ldxr(v146);
          while (__stxr(v147 + 1, v146));
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>(a1 + 1248, buf, (uint64_t)buf);
        v148 = *(std::__shared_weak_count **)&buf[32];
        if (*(_QWORD *)&buf[32])
        {
          v149 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (SHIBYTE(v488.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v488.__r_.__value_.__l.__data_);

      }
      v152 = v461[6];
      v151 = v461[7];
      *(_QWORD *)buf = v348;
      *(_QWORD *)&buf[8] = v152;
      *(_QWORD *)&buf[16] = v151;
      if (v151)
      {
        v153 = (unint64_t *)(v151 + 8);
        do
          v154 = __ldxr(v153);
        while (__stxr(v154 + 1, v153));
      }
      std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>(a1 + 2248, v348, (uint64_t)buf);
      v155 = *(std::__shared_weak_count **)&buf[16];
      if (*(_QWORD *)&buf[16])
      {
        v156 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 - 1, v156));
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
      if (v360.__r_.__value_.__l.__size_)
      {
        v158 = (unint64_t *)(v360.__r_.__value_.__l.__size_ + 8);
        do
          v159 = __ldxr(v158);
        while (__stxr(v159 + 1, v158));
      }
      ML3ImportSession::_setAlbumInfoForTrackPersistentID(a1, v354, (uint64_t)v360.__r_.__value_.__l.__data_, v360.__r_.__value_.__l.__size_);
      if (v360.__r_.__value_.__l.__size_)
      {
        v160 = (unint64_t *)(v360.__r_.__value_.__l.__size_ + 8);
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          (*(void (**)(std::string::size_type))(*(_QWORD *)v360.__r_.__value_.__l.__size_ + 16))(v360.__r_.__value_.__l.__size_);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v360.__r_.__value_.__l.__size_);
        }
      }
      if (*((char *)v425 + 71) < 0)
      {
        if (v425[7])
        {
          std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v425[6], v425[7]);
          goto LABEL_265;
        }
      }
      else if (*((_BYTE *)v425 + 71))
      {
        *(_OWORD *)buf = *((_OWORD *)v425 + 3);
        *(_QWORD *)&buf[16] = v425[8];
LABEL_265:
        *(_OWORD *)&buf[24] = *(_OWORD *)&v360.__r_.__value_.__l.__data_;
        if (v360.__r_.__value_.__l.__size_)
        {
          v162 = (unint64_t *)(v360.__r_.__value_.__l.__size_ + 8);
          do
            v163 = __ldxr(v162);
          while (__stxr(v163 + 1, v162));
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>(a1 + 1328, buf, (uint64_t)buf);
        v164 = *(std::__shared_weak_count **)&buf[32];
        if (*(_QWORD *)&buf[32])
        {
          v165 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
        }
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      *(_QWORD *)(*a2 + 8) = v348;
      size = (std::__shared_weak_count *)v360.__r_.__value_.__l.__size_;
      if (!v360.__r_.__value_.__l.__size_)
        goto LABEL_573;
      v168 = (unint64_t *)(v360.__r_.__value_.__l.__size_ + 8);
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      goto LABEL_571;
    }
  }
  v39 = v38;
  if (v38)
  {
    v40 = (std::__shared_weak_count *)v36[7];
    v363 = v38;
    v364 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
  }
  else
  {
    v363 = 0;
    v364 = 0;
  }
  v69 = v38[1];
  if (!v366)
    v366 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 2248), v69) != 0;
  v70 = *a2;
  *(_QWORD *)(v70 + 8) = v69;
  *(_BYTE *)(v70 + 16) = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(*v39 + 24))(buf, v39, 285212673);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v488, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v488 = *(std::string *)&buf[16];
  }
  v71 = HIBYTE(v447[2].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v447[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v447[2].__r_.__value_.__l.__size_)
      goto LABEL_155;
  }
  else if (!*((_BYTE *)&v447[2].__r_.__value_.__s + 23))
  {
    goto LABEL_155;
  }
  v72 = v447 + 2;
  if ((v71 & 0x80u) == 0)
    v73 = HIBYTE(v447[2].__r_.__value_.__r.__words[2]);
  else
    v73 = v447[2].__r_.__value_.__l.__size_;
  v74 = HIBYTE(v488.__r_.__value_.__r.__words[2]);
  if ((v488.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v74 = v488.__r_.__value_.__l.__size_;
  if (v73 == v74)
  {
    if ((v488.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v75 = &v488;
    else
      v75 = (std::string *)v488.__r_.__value_.__r.__words[0];
    if ((v71 & 0x80) != 0)
    {
      if (!memcmp(v72->__r_.__value_.__l.__data_, v75, v447[2].__r_.__value_.__l.__size_))
        goto LABEL_155;
    }
    else
    {
      if (!*((_BYTE *)&v447[2].__r_.__value_.__s + 23))
        goto LABEL_155;
      v76 = v447 + 2;
      while (v76->__r_.__value_.__s.__data_[0] == v75->__r_.__value_.__s.__data_[0])
      {
        v76 = (const std::string *)((char *)v76 + 1);
        v75 = (std::string *)((char *)v75 + 1);
        if (!--v71)
          goto LABEL_155;
      }
    }
  }
  std::string::operator=((std::string *)(v39[8] + 8), v72);
  v99 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
  {
    v100 = (std::string::__raw *)&v447[2];
    if (SHIBYTE(v447[2].__r_.__value_.__r.__words[2]) < 0)
      v100 = (std::string::__raw *)v100->__words[0];
    v101 = &v488;
    if ((v488.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v101 = (std::string *)v488.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v100;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v101;
    _os_log_impl(&dword_1AC149000, v99, OS_LOG_TYPE_DEFAULT, "Setting albumName=%{public}s (oldValue=%{public}s)", buf, 0x16u);
  }

LABEL_155:
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(*v39 + 24))(buf, v39, 285212674);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v468, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v468 = *(std::string *)&buf[16];
  }
  if (*a2 && !*a5)
  {
    v112 = *(int *)(a1 + 32);
    PropertyIndex = ML3TrackRulesGetPropertyIndex(17, 285212674);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    v114 = *(_DWORD *)(__albumRules + 56 * PropertyIndex + 4 * v112) == -1;
    shouldPreserveAlbumProperty = ML3ImportSession::_shouldPreserveAlbumProperty((id *)a1, v69, 0x12000002u);
    if (v114)
      goto LABEL_295;
  }
  else
  {
    v102 = *(int *)(a1 + 32);
    v103 = ML3TrackRulesGetPropertyIndex(10, 167772170);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    v104 = *(_DWORD *)(__specialRules + 56 * v103 + 4 * v102);
    v105 = (std::__shared_weak_count *)a5[1];
    v361 = *a5;
    v362 = v105;
    if (v105)
    {
      v106 = (unint64_t *)&v105->__shared_owners_;
      do
        v107 = __ldxr(v106);
      while (__stxr(v107 + 1, v106));
    }
    shouldPreserveAlbumProperty = ML3ImportSession::_shouldPreserveTrackProperty(a1, (uint64_t)&v361, 0xA000009u);
    v109 = v362;
    if (!v362)
      goto LABEL_170;
    v110 = (unint64_t *)&v362->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
      if (v104 == -1)
        goto LABEL_295;
    }
    else
    {
LABEL_170:
      if (v104 == -1)
        goto LABEL_295;
    }
  }
  v115 = HIBYTE(v440[2].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v440[2].__r_.__value_.__r.__words[2]) < 0)
    v116 = v440[2].__r_.__value_.__l.__size_;
  else
    v116 = HIBYTE(v440[2].__r_.__value_.__r.__words[2]);
  p_data = (const void **)&v440[2].__r_.__value_.__l.__data_;
  if (!v116)
  {
LABEL_196:
    if ((v115 & 0x80) != 0)
      v115 = v440[2].__r_.__value_.__l.__size_;
    goto LABEL_286;
  }
  v118 = v440[2].__r_.__value_.__l.__size_;
  if ((v115 & 0x80u) == 0)
    v119 = HIBYTE(v440[2].__r_.__value_.__r.__words[2]);
  else
    v119 = v440[2].__r_.__value_.__l.__size_;
  v120 = HIBYTE(v468.__r_.__value_.__r.__words[2]);
  v121 = HIBYTE(v468.__r_.__value_.__r.__words[2]);
  v122 = v468.__r_.__value_.__l.__size_;
  if ((v468.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v123 = HIBYTE(v468.__r_.__value_.__r.__words[2]);
  else
    v123 = v468.__r_.__value_.__l.__size_;
  if (v119 != v123)
    goto LABEL_284;
  if ((v468.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v124 = &v468;
  else
    v124 = (std::string *)v468.__r_.__value_.__r.__words[0];
  if ((v115 & 0x80) != 0)
  {
    v171 = memcmp(*p_data, v124, v440[2].__r_.__value_.__l.__size_);
    v115 = v118;
    if (v171)
      goto LABEL_284;
LABEL_286:
    if (!v115)
    {
      v120 = HIBYTE(v468.__r_.__value_.__r.__words[2]);
      v122 = v468.__r_.__value_.__l.__size_;
      v121 = HIBYTE(v468.__r_.__value_.__r.__words[2]);
LABEL_288:
      if (v121 >= 0)
        v172 = v120;
      else
        v172 = v122;
      if (v172)
        v173 = shouldPreserveAlbumProperty;
      else
        v173 = 1;
      if ((v173 & 1) != 0)
        goto LABEL_295;
      goto LABEL_342;
    }
LABEL_295:
    v174 = 0;
    goto LABEL_296;
  }
  if (!*((_BYTE *)&v440[2].__r_.__value_.__s + 23))
    goto LABEL_288;
  v125 = v440 + 2;
  v126 = HIBYTE(v440[2].__r_.__value_.__r.__words[2]);
  while (v125->__r_.__value_.__s.__data_[0] == v124->__r_.__value_.__s.__data_[0])
  {
    v125 = (const std::string *)((char *)v125 + 1);
    v124 = (std::string *)((char *)v124 + 1);
    if (!--v126)
      goto LABEL_196;
  }
LABEL_284:
  if ((shouldPreserveAlbumProperty & 1) != 0)
    goto LABEL_295;
LABEL_342:
  v198 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a1, (uint64_t)p_data, (uint64_t)&v447[2]);
  v200 = v199;
  v201 = v363;
  std::string::operator=((std::string *)(v363[8] + 32), v440 + 2);
  v202 = v201[8];
  *(_QWORD *)(v202 + 72) = v198;
  *(_QWORD *)(v202 + 80) = v200;
  v203 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
  {
    v204 = (std::string::__raw *)&v440[2];
    if (SHIBYTE(v440[2].__r_.__value_.__r.__words[2]) < 0)
      v204 = (std::string::__raw *)v204->__words[0];
    v205 = &v468;
    if ((v468.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v205 = (std::string *)v468.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = v204;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v198;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v200;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = v205;
    _os_log_impl(&dword_1AC149000, v203, OS_LOG_TYPE_DEFAULT, "Setting albumSortName=%{public}s, order=%lld, section=%d (oldValue=%{public}s)", buf, 0x26u);
  }

  v206 = v201[1];
  v207 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 2168), v206);
  if (!v207)
    goto LABEL_358;
  v208 = v207[3];
  v209 = v207[4];
  if (v209 != v200 || v208 != v198)
  {
    *(_QWORD *)buf = v206;
    v211 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>(a1 + 2208, v206, (uint64_t *)buf);
    v211[3] = v198;
    v211[4] = v200;
    *(_QWORD *)buf = v201[1];
    v212 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>(a1 + 2168, *(unint64_t *)buf, (uint64_t *)buf);
    v212[3] = v198;
    v212[4] = v200;
    v213 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT))
    {
      v214 = v201[1];
      v215 = (std::string::__raw *)&v440[2];
      if (SHIBYTE(v440[2].__r_.__value_.__r.__words[2]) < 0)
        v215 = (std::string::__raw *)v215->__words[0];
      *(_DWORD *)buf = 134219266;
      *(_QWORD *)&buf[4] = v214;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v215;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v200;
      *(_WORD *)&buf[32] = 2048;
      *(_QWORD *)&buf[34] = v198;
      v470 = 2048;
      v471 = v209;
      v472 = 2048;
      v473 = v208;
      _os_log_impl(&dword_1AC149000, v213, OS_LOG_TYPE_DEFAULT, "Will update sort order for tracks with albumPID=%lld with sortName=%{public}s, order.section=%ld, order.sortOrder=%lld (oldValue section=%ld, sortOrder=%lld)", buf, 0x3Eu);
    }

LABEL_358:
    v174 = 1;
    goto LABEL_296;
  }
  v174 = 1;
LABEL_296:
  v175 = v363;
  v176 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v363 + 32))(v363, 285212691);
  v177 = v176;
  v178 = v379[3];
  if (v178)
    v179 = v178 == v176;
  else
    v179 = 1;
  if (!v179)
  {
    *(_QWORD *)(v175[8] + 96) = v178;
    v180 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
    {
      v181 = v379[3];
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v181;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v177;
      _os_log_impl(&dword_1AC149000, v180, OS_LOG_TYPE_DEFAULT, "Setting albumSyncId=%lld (oldValue=%lld) using property MLImportPropertyKeyAlbumSyncID", buf, 0x16u);
    }

    v174 = 1;
  }
  v182 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v175 + 32))(v175, 285212691);
  if (v355)
  {
    v183 = v182;
    if (v355 != v182)
    {
      *(_QWORD *)(v175[8] + 96) = v355;
      v184 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v355;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v183;
        _os_log_impl(&dword_1AC149000, v184, OS_LOG_TYPE_DEFAULT, "Setting albumSyncId=%lld (oldValue=%lld) using property MLImportPropertyKeyAlbumSyncId", buf, 0x16u);
      }

      v174 = 1;
    }
  }
  v185 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v175 + 32))(v175, 285212696);
  v186 = v401[3];
  if (v186)
  {
    v187 = v185;
    if (v186 != v185)
    {
      *(_QWORD *)(v175[8] + 104) = v186;
      v188 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v188, OS_LOG_TYPE_DEFAULT))
      {
        v189 = v401[3];
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v189;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v187;
        _os_log_impl(&dword_1AC149000, v188, OS_LOG_TYPE_DEFAULT, "Setting albumStoreID=%lld (oldValue=%lld)", buf, 0x16u);
      }

      v174 = 1;
    }
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t *, uint64_t))(*v175 + 24))(buf, v175, 285212697);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v360, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v360 = *(std::string *)&buf[16];
  }
  if (MSVDeviceIsWatch() && *(_DWORD *)(a1 + 32) == 1)
  {
    v190 = (const std::string *)(v425 + 6);
    v191 = *((unsigned __int8 *)v425 + 71);
    if ((v191 & 0x80u) == 0)
      v192 = *((unsigned __int8 *)v425 + 71);
    else
      v192 = v425[7];
    v193 = HIBYTE(v360.__r_.__value_.__r.__words[2]);
    if ((v360.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v193 = v360.__r_.__value_.__l.__size_;
    if (v192 != v193)
      goto LABEL_367;
    if ((v360.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v194 = &v360;
    else
      v194 = (std::string *)v360.__r_.__value_.__r.__words[0];
    if ((v191 & 0x80) != 0)
    {
      if (memcmp(v190->__r_.__value_.__l.__data_, v194, v425[7]))
        goto LABEL_367;
    }
    else if (*((_BYTE *)v425 + 71))
    {
      v195 = (unsigned __int8 *)(v425 + 6);
      while (*v195 == v194->__r_.__value_.__s.__data_[0])
      {
        ++v195;
        v194 = (std::string *)((char *)v194 + 1);
        if (!--v191)
          goto LABEL_341;
      }
LABEL_367:
      std::string::operator=((std::string *)(v175[8] + 112), v190);
      if (*((char *)v425 + 71) < 0)
      {
        if (v425[7])
          goto LABEL_404;
      }
      else if (*((_BYTE *)v425 + 71))
      {
        goto LABEL_404;
      }
      v219 = (_QWORD *)(a1 + 1328);
      v220 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a1 + 1328), (unsigned __int8 *)&v360);
      if (v220)
      {
        v221 = *(int8x8_t *)(a1 + 1336);
        v222 = *((_QWORD *)v220 + 1);
        v223 = (uint8x8_t)vcnt_s8(v221);
        v223.i16[0] = vaddlv_u8(v223);
        if (v223.u32[0] > 1uLL)
        {
          if (v222 >= *(_QWORD *)&v221)
            v222 %= *(_QWORD *)&v221;
        }
        else
        {
          v222 &= *(_QWORD *)&v221 - 1;
        }
        v225 = *(unsigned __int8 **)(*v219 + 8 * v222);
        do
        {
          v226 = v225;
          v225 = *(unsigned __int8 **)v225;
        }
        while (v225 != v220);
        if (v226 == (unsigned __int8 *)(a1 + 1344))
          goto LABEL_394;
        v227 = *((_QWORD *)v226 + 1);
        if (v223.u32[0] > 1uLL)
        {
          if (v227 >= *(_QWORD *)&v221)
            v227 %= *(_QWORD *)&v221;
        }
        else
        {
          v227 &= *(_QWORD *)&v221 - 1;
        }
        if (v227 != v222)
        {
LABEL_394:
          if (!*(_QWORD *)v220)
            goto LABEL_395;
          v228 = *(_QWORD *)(*(_QWORD *)v220 + 8);
          if (v223.u32[0] > 1uLL)
          {
            if (v228 >= *(_QWORD *)&v221)
              v228 %= *(_QWORD *)&v221;
          }
          else
          {
            v228 &= *(_QWORD *)&v221 - 1;
          }
          if (v228 != v222)
LABEL_395:
            *(_QWORD *)(*v219 + 8 * v222) = 0;
        }
        v230 = *(_QWORD *)v220;
        if (*(_QWORD *)v220)
        {
          v231 = *(_QWORD *)(v230 + 8);
          if (v223.u32[0] > 1uLL)
          {
            if (v231 >= *(_QWORD *)&v221)
              v231 %= *(_QWORD *)&v221;
          }
          else
          {
            v231 &= *(_QWORD *)&v221 - 1;
          }
          if (v231 != v222)
          {
            *(_QWORD *)(*v219 + 8 * v231) = v226;
            v230 = *(_QWORD *)v220;
          }
        }
        *(_QWORD *)v226 = v230;
        *(_QWORD *)v220 = 0;
        --*(_QWORD *)(a1 + 1352);
        *(_QWORD *)buf = v220;
        *(_QWORD *)&buf[8] = a1 + 1344;
        buf[16] = 1;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
      }
LABEL_404:
      v216 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v216, OS_LOG_TYPE_DEFAULT))
      {
        v217 = v425 + 6;
        if (*((char *)v425 + 71) < 0)
          v217 = (_QWORD *)*v217;
        v218 = &v360;
        if ((v360.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v218 = (std::string *)v360.__r_.__value_.__r.__words[0];
LABEL_409:
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v217;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v218;
        _os_log_impl(&dword_1AC149000, v216, OS_LOG_TYPE_DEFAULT, "Setting albumCloudLibraryID=%{public}s (oldValue=%{public}s)", buf, 0x16u);
        goto LABEL_410;
      }
      goto LABEL_410;
    }
  }
  else
  {
    if (*((char *)v425 + 71) < 0)
    {
      if (!v425[7])
        goto LABEL_341;
    }
    else if (!*((_BYTE *)v425 + 71))
    {
      goto LABEL_341;
    }
    v196 = HIBYTE(v360.__r_.__value_.__r.__words[2]);
    if ((v360.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v196 = v360.__r_.__value_.__l.__size_;
    if (!v196)
    {
      std::string::operator=((std::string *)(v175[8] + 112), (const std::string *)v425 + 2);
      v216 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v216, OS_LOG_TYPE_DEFAULT))
      {
        v217 = v425 + 6;
        if (*((char *)v425 + 71) < 0)
          v217 = (_QWORD *)*v217;
        v218 = &v360;
        if ((v360.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v218 = (std::string *)v360.__r_.__value_.__r.__words[0];
        goto LABEL_409;
      }
LABEL_410:

      v197 = 1;
      v174 = 1;
      goto LABEL_411;
    }
  }
LABEL_341:
  v197 = 0;
LABEL_411:
  v232 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v175 + 32))(v175, 285212679);
  if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, 285212679))
  {
    v233 = v421[3];
    if (v233 != v232)
    {
      *(_DWORD *)(v175[8] + 56) = v233;
      v234 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
      {
        v235 = v421[3];
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v235;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v232;
        _os_log_impl(&dword_1AC149000, v234, OS_LOG_TYPE_DEFAULT, "Setting albumUserRating=%lld (oldValue=%lld)", buf, 0x16u);
      }

      v174 = 1;
    }
  }
  v236 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v175 + 32))(v175, 285212690);
  if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, 285212690))
  {
    v237 = v417[3];
    if (v237 != v236)
    {
      *(_BYTE *)(v175[8] + 60) = v237 != 0;
      v238 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v238, OS_LOG_TYPE_DEFAULT))
      {
        v239 = v417[3];
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v239;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v236;
        _os_log_impl(&dword_1AC149000, v238, OS_LOG_TYPE_DEFAULT, "Setting albumUserRatingIsDerived=%lld (oldValue=%lld)", buf, 0x16u);
      }

      v174 = 1;
    }
  }
  v240 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v175 + 32))(v175, 285212680);
  v241 = v413[3];
  if (v241)
  {
    v242 = v240;
    if (v241 != v240)
    {
      *(_DWORD *)(v175[8] + 64) = v241;
      v243 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT))
      {
        v244 = v413[3];
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v244;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v242;
        _os_log_impl(&dword_1AC149000, v243, OS_LOG_TYPE_DEFAULT, "Setting albumLikedState=%lld (oldValue=%lld)", buf, 0x16u);
      }

      v174 = 1;
    }
  }
  v245 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v175 + 32))(v175, 285212695);
  v246 = v397[3];
  if (v246)
  {
    v247 = v245;
    if (v246 != v245)
    {
      *(_QWORD *)(v175[8] + 144) = v246;
      v248 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v248, OS_LOG_TYPE_DEFAULT))
      {
        v249 = v397[3];
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v249;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v247;
        _os_log_impl(&dword_1AC149000, v248, OS_LOG_TYPE_DEFAULT, "Setting albumLikedStateChangedDate=%lld (oldValue=%lld)", buf, 0x16u);
      }

      v174 = 1;
    }
  }
  v250 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v175 + 32))(v175, 285212684);
  v251 = *(int *)(a1 + 32);
  v252 = ML3TrackRulesGetPropertyIndex(17, 285212684);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__albumRules + 56 * v252 + 4 * v251) != -1
    && (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, 285212684)
    && v405[3] != v250
    && (ML3ImportSession::_shouldPreserveAlbumProperty((id *)a1, v175[1], 0x1100000Cu) & 1) == 0)
  {
    v253 = v175[1];
    v255 = *(char **)(a1 + 464);
    v254 = *(_QWORD *)(a1 + 472);
    if ((unint64_t)v255 >= v254)
    {
      v257 = *(char **)(a1 + 456);
      v258 = (v255 - v257) >> 3;
      v259 = v258 + 1;
      if ((unint64_t)(v258 + 1) >> 61)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v260 = v254 - (_QWORD)v257;
      if (v260 >> 2 > v259)
        v259 = v260 >> 2;
      v261 = (unint64_t)v260 >= 0x7FFFFFFFFFFFFFF8;
      v262 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v261)
        v262 = v259;
      if (v262)
      {
        v262 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v262);
        v257 = *(char **)(a1 + 456);
        v255 = *(char **)(a1 + 464);
      }
      else
      {
        v263 = 0;
      }
      v264 = (uint64_t *)(v262 + 8 * v258);
      v265 = v262 + 8 * v263;
      *v264 = v253;
      v256 = v264 + 1;
      while (v255 != v257)
      {
        v266 = *((_QWORD *)v255 - 1);
        v255 -= 8;
        *--v264 = v266;
      }
      *(_QWORD *)(a1 + 456) = v264;
      *(_QWORD *)(a1 + 464) = v256;
      *(_QWORD *)(a1 + 472) = v265;
      if (v257)
        operator delete(v257);
    }
    else
    {
      *(_QWORD *)v255 = v253;
      v256 = v255 + 8;
    }
    *(_QWORD *)(a1 + 464) = v256;
    *(_DWORD *)(v175[8] + 68) = v405[3];
    v267 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
    {
      v268 = v405[3];
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v268;
      _os_log_impl(&dword_1AC149000, v267, OS_LOG_TYPE_DEFAULT, "Setting albumYear=%lld", buf, 0xCu);
    }

    v174 = 1;
  }
  v269 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v175 + 32))(v175, 285212688);
  if (*((_BYTE *)v384 + 24) || !*(_BYTE *)(*a2 + 16) || *(_BYTE *)(*a2 + 17))
  {
    v270 = v391;
    if (v391 != (v269 != 0))
    {
      v271 = *(int *)(a1 + 32);
      v272 = ML3TrackRulesGetPropertyIndex(17, 285212688);
      if (_ML3InitializeTrackRulesIfNeeded___once != -1)
        dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
      if (*(_DWORD *)(__albumRules + 56 * v272 + 4 * v271) != -1
        && (ML3ImportSession::_shouldPreserveAlbumProperty((id *)a1, v175[1], 0x11000010u) & 1) == 0)
      {
        v273 = v175[1];
        v275 = *(char **)(a1 + 488);
        v274 = *(_QWORD *)(a1 + 496);
        if ((unint64_t)v275 >= v274)
        {
          v277 = *(char **)(a1 + 480);
          v278 = (v275 - v277) >> 3;
          v279 = v278 + 1;
          if ((unint64_t)(v278 + 1) >> 61)
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          v280 = v274 - (_QWORD)v277;
          if (v280 >> 2 > v279)
            v279 = v280 >> 2;
          v261 = (unint64_t)v280 >= 0x7FFFFFFFFFFFFFF8;
          v281 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v261)
            v281 = v279;
          if (v281)
          {
            v281 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v281);
            v277 = *(char **)(a1 + 480);
            v275 = *(char **)(a1 + 488);
          }
          else
          {
            v282 = 0;
          }
          v283 = (uint64_t *)(v281 + 8 * v278);
          v284 = v281 + 8 * v282;
          *v283 = v273;
          v276 = v283 + 1;
          while (v275 != v277)
          {
            v285 = *((_QWORD *)v275 - 1);
            v275 -= 8;
            *--v283 = v285;
          }
          *(_QWORD *)(a1 + 480) = v283;
          *(_QWORD *)(a1 + 488) = v276;
          *(_QWORD *)(a1 + 496) = v284;
          if (v277)
            operator delete(v277);
        }
        else
        {
          *(_QWORD *)v275 = v273;
          v276 = v275 + 8;
        }
        *(_QWORD *)(a1 + 488) = v276;
        v286 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v286, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v270;
          _os_log_impl(&dword_1AC149000, v286, OS_LOG_TYPE_DEFAULT, "Setting albumContainsClassicalWork=%d", buf, 8u);
        }

        v174 = 1;
      }
    }
  }
  v287 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v175 + 32))(v175, 285212693) != 0;
  v288 = *((unsigned __int8 *)v388 + 24);
  if (v288 != v287)
  {
    *(_BYTE *)(v175[8] + 137) = v288;
    v289 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v289, OS_LOG_TYPE_DEFAULT))
    {
      v290 = *((unsigned __int8 *)v388 + 24);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v290;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v287;
      _os_log_impl(&dword_1AC149000, v289, OS_LOG_TYPE_DEFAULT, "Setting albumContainsClassicalExperienceAvailable=%{BOOL}u (oldValue=%{BOOL}u)", buf, 0xEu);
    }

    v174 = 1;
  }
  v291 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v175 + 32))(v175, 285212681);
  v292 = *(int *)(a1 + 32);
  v293 = ML3TrackRulesGetPropertyIndex(17, 285212681);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__albumRules + 56 * v293 + 4 * v292) == -1
    || !(*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, 285212681))
  {
    goto LABEL_510;
  }
  v294 = v291 != 0;
  v295 = a1;
  if (v393[24] != v294)
  {
    v295 = a1;
    if ((ML3ImportSession::_shouldPreserveAlbumProperty((id *)a1, v175[1], 0x11000009u) & 1) == 0)
    {
      *(_BYTE *)(v175[8] + 136) = v393[24];
      v296 = v175[1];
      v297 = *(char **)(a1 + 512);
      v298 = *(_QWORD *)(a1 + 520);
      if ((unint64_t)v297 >= v298)
      {
        v300 = *(char **)(a1 + 504);
        v301 = (v297 - v300) >> 3;
        v302 = v301 + 1;
        if ((unint64_t)(v301 + 1) >> 61)
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        v303 = v298 - (_QWORD)v300;
        if (v303 >> 2 > v302)
          v302 = v303 >> 2;
        v261 = (unint64_t)v303 >= 0x7FFFFFFFFFFFFFF8;
        v304 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v261)
          v304 = v302;
        if (v304)
        {
          v304 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v304);
          v300 = *(char **)(a1 + 504);
          v297 = *(char **)(a1 + 512);
        }
        else
        {
          v305 = 0;
        }
        v306 = (uint64_t *)(v304 + 8 * v301);
        v307 = v304 + 8 * v305;
        *v306 = v296;
        v299 = v306 + 1;
        while (v297 != v300)
        {
          v308 = *((_QWORD *)v297 - 1);
          v297 -= 8;
          *--v306 = v308;
        }
        *(_QWORD *)(a1 + 504) = v306;
        *(_QWORD *)(a1 + 512) = v299;
        *(_QWORD *)(a1 + 520) = v307;
        if (v300)
          operator delete(v300);
      }
      else
      {
        *(_QWORD *)v297 = v296;
        v299 = v297 + 8;
      }
      *(_QWORD *)(a1 + 512) = v299;
      v309 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v309, OS_LOG_TYPE_DEFAULT))
      {
        v310 = v393[24];
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v310;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v294;
        _os_log_impl(&dword_1AC149000, v309, OS_LOG_TYPE_DEFAULT, "Setting albumAllCompilations=%{BOOL}u (oldValue=%{BOOL}u", buf, 0xEu);
      }

      v174 = 1;
LABEL_510:
      v295 = a1;
    }
  }
  if (!v197)
    goto LABEL_539;
  v311 = v425;
  v312 = *((char *)v425 + 71);
  if (v312 < 0)
  {
    if (!v425[7])
      goto LABEL_539;
  }
  else if (!*((_BYTE *)v425 + 71))
  {
    goto LABEL_539;
  }
  v313 = v175[8];
  v314 = (std::__shared_weak_count *)v175[9];
  v358 = v313;
  v359 = v314;
  if (v314)
  {
    v315 = (unint64_t *)&v314->__shared_owners_;
    do
      v316 = __ldxr(v315);
    while (__stxr(v316 + 1, v315));
    LOBYTE(v312) = *((_BYTE *)v311 + 71);
  }
  if ((v312 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v311[6], v311[7]);
    v313 = v358;
  }
  else
  {
    *(_OWORD *)buf = *((_OWORD *)v311 + 3);
    *(_QWORD *)&buf[16] = v311[8];
  }
  *(_QWORD *)&buf[24] = v313;
  *(_QWORD *)&buf[32] = v359;
  if (v359)
  {
    v317 = (unint64_t *)&v359->__shared_owners_;
    do
      v318 = __ldxr(v317);
    while (__stxr(v318 + 1, v317));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>(v295 + 1328, buf, (uint64_t)buf);
  v319 = *(std::__shared_weak_count **)&buf[32];
  if (*(_QWORD *)&buf[32])
  {
    v320 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
    do
      v321 = __ldaxr(v320);
    while (__stlxr(v321 - 1, v320));
    if (!v321)
    {
      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
      std::__shared_weak_count::__release_weak(v319);
    }
  }
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v359)
  {
    v322 = (unint64_t *)&v359->__shared_owners_;
    do
      v323 = __ldaxr(v322);
    while (__stlxr(v323 - 1, v322));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
      std::__shared_weak_count::__release_weak(v359);
    }
  }
  v175 = v363;
LABEL_539:
  if (v366)
    v324 = 0;
  else
    v324 = v174;
  if (v324 == 1)
  {
    v325 = v175[1];
    v327 = v461[6];
    v326 = v461[7];
    *(_QWORD *)buf = v325;
    *(_QWORD *)&buf[8] = v327;
    *(_QWORD *)&buf[16] = v326;
    if (v326)
    {
      v328 = (unint64_t *)(v326 + 8);
      do
        v329 = __ldxr(v328);
      while (__stxr(v329 + 1, v328));
    }
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>(v295 + 2248, v325, (uint64_t)buf);
    v330 = *(std::__shared_weak_count **)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v331 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
      do
        v332 = __ldaxr(v331);
      while (__stlxr(v332 - 1, v331));
      if (!v332)
      {
        ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
        std::__shared_weak_count::__release_weak(v330);
      }
    }
    v175 = v363;
  }
  v333 = v175[8];
  v334 = (std::__shared_weak_count *)v175[9];
  v357 = v334;
  if (v334)
  {
    v335 = (unint64_t *)&v334->__shared_owners_;
    do
      v336 = __ldxr(v335);
    while (__stxr(v336 + 1, v335));
    v337 = (uint64_t)v357;
  }
  else
  {
    v337 = 0;
  }
  ML3ImportSession::_setAlbumInfoForTrackPersistentID(v295, v354, v333, v337);
  if (v357)
  {
    v338 = (unint64_t *)&v357->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v360.__r_.__value_.__l.__data_);
  if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v468.__r_.__value_.__l.__data_);
  if (SHIBYTE(v488.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v488.__r_.__value_.__l.__data_);
  size = v364;
  if (v364)
  {
    v340 = (unint64_t *)&v364->__shared_owners_;
    do
      v169 = __ldaxr(v340);
    while (__stlxr(v169 - 1, v340));
LABEL_571:
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_573:
  _Block_object_dispose(&v378, 8);
  _Block_object_dispose(&v383, 8);
  _Block_object_dispose(&v387, 8);
  _Block_object_dispose(&v392, 8);
  _Block_object_dispose(&v396, 8);
  _Block_object_dispose(&v400, 8);
  _Block_object_dispose(&v404, 8);
  _Block_object_dispose(&v408, 8);
  _Block_object_dispose(&v412, 8);
  _Block_object_dispose(&v416, 8);
  _Block_object_dispose(&v420, 8);
  _Block_object_dispose(&v424, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v431.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v432, 8);
  if (SHIBYTE(v438.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v438.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v439, 8);
  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v445.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v446, 8);
  if (SHIBYTE(v452.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v452.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v453, 8);

  _Block_object_dispose(&v460, 8);
  v341 = v467;
  if (v467)
  {
    v342 = (unint64_t *)&v467->__shared_owners_;
    do
      v343 = __ldaxr(v342);
    while (__stlxr(v343 - 1, v342));
    if (!v343)
    {
      ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
      std::__shared_weak_count::__release_weak(v341);
    }
  }

}

void sub_1AC344CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  if (SLOBYTE(STACK[0x5A7]) < 0)
    operator delete((void *)STACK[0x590]);
  if (*(char *)(v45 - 121) < 0)
    operator delete(*(void **)(v45 - 144));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a45);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose(&STACK[0x290], 8);
  _Block_object_dispose(&STACK[0x2B0], 8);
  _Block_object_dispose(&STACK[0x2D8], 8);
  _Block_object_dispose(&STACK[0x2F8], 8);
  _Block_object_dispose(&STACK[0x318], 8);
  _Block_object_dispose(&STACK[0x338], 8);
  _Block_object_dispose(&STACK[0x358], 8);
  _Block_object_dispose(&STACK[0x378], 8);
  _Block_object_dispose(&STACK[0x398], 8);
  _Block_object_dispose(&STACK[0x3B8], 8);
  _Block_object_dispose(&STACK[0x3D8], 8);
  if (SLOBYTE(STACK[0x41F]) < 0)
    operator delete((void *)STACK[0x408]);
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete((void *)STACK[0x420]);
  _Block_object_dispose(&STACK[0x440], 8);
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  _Block_object_dispose(&STACK[0x488], 8);
  if (SLOBYTE(STACK[0x4CF]) < 0)
    operator delete((void *)STACK[0x4B8]);
  _Block_object_dispose(&STACK[0x4D0], 8);
  if (SLOBYTE(STACK[0x517]) < 0)
    operator delete((void *)STACK[0x500]);
  _Block_object_dispose(&STACK[0x518], 8);

  _Block_object_dispose(&STACK[0x550], 8);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x580]);

  _Unwind_Resume(a1);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>(_QWORD *a1, unint64_t a2)
{
  _QWORD *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = v3[1];
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(_QWORD **)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = (_QWORD *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2)
      goto LABEL_20;
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*v3)
        goto LABEL_21;
      v10 = *(_QWORD *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_21:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *v3;
    if (*v3)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *v3;
      }
    }
    *v8 = v11;
    *v3 = 0;
    --a1[3];
    operator delete(v3);
  }
}

__n128 __Block_byref_object_copy__337(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__338(uint64_t a1)
{
  return std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 48);
}

uint64_t __Block_byref_object_copy__212(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__213(uint64_t a1)
{

}

__n128 __Block_byref_object_copy__214(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__215(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

uint64_t ML3ImportSession::_shouldPreserveTrackProperty(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  uint64_t PropertyIndex;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _QWORD v16[6];
  _QWORD v17[4];
  _OWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x2020000000;
  v17[3] = v18;
  v5 = HIBYTE(a3);
  PropertyIndex = ML3TrackRulesGetPropertyIndex(HIBYTE(a3), a3);
  v7 = *(unsigned int *)(a1 + 32);
  if ((int)v7 < 1)
  {
LABEL_8:
    v9 = 0;
  }
  else
  {
    v8 = PropertyIndex;
    LOBYTE(v9) = 0;
    v10 = (int)v7 - 1;
    v11 = v7 + 1;
    while (1)
    {
      if (*(_DWORD *)(ML3TrackRulesGetRule(v5, v8) + 4 * v10) == 1)
      {
        if ((v9 & 1) == 0)
        {
          v12 = *(_QWORD *)(*(_QWORD *)a2 + 8);
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT sync_id, store_saga_id, purchase_history_id, is_ota_purchased FROM item_store WHERE item_pid = %lld"), v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 64), "executeQuery:", v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v16[0] = MEMORY[0x1E0C809B0];
          v16[1] = 3221225472;
          v16[2] = ___ZN16ML3ImportSession28_shouldPreserveTrackPropertyENSt3__110shared_ptrI13ML3ImportItemEEj_block_invoke;
          v16[3] = &unk_1E5B65228;
          v16[4] = v17;
          v16[5] = v12;
          objc_msgSend(v14, "enumerateRowsWithBlock:", v16);

        }
        v9 = 1;
        if (*((_QWORD *)v18 + v10))
          break;
      }
      --v10;
      if (--v11 <= 1)
        goto LABEL_8;
    }
  }
  _Block_object_dispose(v17, 8);
  return v9;
}

void sub_1AC345668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_getDefaultEmptyAlbum(ML3ImportSession *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if ((v2 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ML3AlbumData>::~shared_ptr[abi:ne180100], &ML3ImportSession::_getDefaultEmptyAlbum(void)::__emptyAlbumData, &dword_1AC149000);
  }
  if (ML3ImportSession::_getDefaultEmptyAlbum(void)::onceToken != -1)
    dispatch_once(&ML3ImportSession::_getDefaultEmptyAlbum(void)::onceToken, &__block_literal_global_443);
  v3 = unk_1EEC7D360;
  *(_QWORD *)this = ML3ImportSession::_getDefaultEmptyAlbum(void)::__emptyAlbumData;
  *((_QWORD *)this + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void ML3ImportSession::_setAlbumInfoForTrackPersistentID(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;

  v22 = a2;
  if (a2)
  {
    v7 = a1 + 336;
    v8 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 336), a2);
    if (v8)
    {
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v8 + 7, a3, a4);
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](&v19, a3, a4);
      v9 = std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v7, a2, &v22);
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 3, 0, 0);
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 5, 0, 0);
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 7, v19, *((uint64_t *)&v19 + 1));
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 9, v20, *((uint64_t *)&v20 + 1));
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 11, v21, *((uint64_t *)&v21 + 1));
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
}

void sub_1AC345958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ML3CollectionInfoSet::~ML3CollectionInfoSet((ML3CollectionInfoSet *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession9_addAlbumENSt3__110shared_ptrI13ML3ImportItemEEP26ML3AlbumGroupingIdentifierxS3__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  char v10;
  char v11;
  char v12;
  char v13;
  ML3AlbumGroupingIdentifier *v14;
  void *v15;
  ML3AlbumGroupingIdentifier *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t PropertyIndex;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  int shouldPreserveTrackProperty;
  char v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  std::string::size_type v45;
  __int128 *v46;
  std::string::size_type v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *size;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  NSObject *v58;
  std::string::size_type v59;
  std::string::size_type v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  ML3AlbumGroupingIdentifier *v71;
  int v72;
  uint64_t v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  void *__p[2];
  uint64_t v79;
  std::string v80;
  std::string v81;
  std::string v82;
  _QWORD v83[2];
  std::string v84;
  std::string v85;
  void *v86;
  std::string v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 168);
  objc_msgSend(v3, "stringForColumnIndex:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringForColumnIndex:", 1);
  v75 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringForColumnIndex:", 2);
  v77 = (id)objc_claimAutoreleasedReturnValue();
  v70 = objc_msgSend(v3, "intForColumnIndex:", 3);
  v69 = objc_msgSend(v3, "intForColumnIndex:", 4);
  v68 = objc_msgSend(v3, "int64ForColumnIndex:", 5);
  v67 = objc_msgSend(v3, "intForColumnIndex:", 6);
  v6 = objc_msgSend(v3, "intForColumnIndex:", 7);
  v7 = objc_msgSend(v3, "int64ForColumnIndex:", 8);
  objc_msgSend(v3, "dataForColumnIndex:", 9);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v66 = objc_msgSend(v3, "int64ForColumnIndex:", 10);
  v62 = v7;
  LODWORD(v7) = objc_msgSend(v3, "intForColumnIndex:", 11);
  v8 = (_DWORD)v7 != 0;
  v65 = objc_msgSend(v3, "intForColumnIndex:", 12);
  v64 = objc_msgSend(v3, "int64ForColumnIndex:", 13);
  v63 = objc_msgSend(v3, "int64ForColumnIndex:", 14);
  objc_msgSend(v3, "stringForColumnIndex:", 15);
  v74 = (id)objc_claimAutoreleasedReturnValue();
  v72 = v7;
  v9 = objc_msgSend(v3, "intForColumnIndex:", 16) != 0;
  v73 = objc_msgSend(v3, "int64ForColumnIndex:", 17);
  v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212673);
  if (v5)
    v11 = v10;
  else
    v11 = 1;
  if ((v11 & 1) == 0)
    MEMORY[0x1AF43C540](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212674) & 1) == 0&& objc_msgSend(v75, "length"))
  {
    MEMORY[0x1AF43C540](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, objc_msgSend(objc_retainAutorelease(v75), "UTF8String"));
  }
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212682);
  if (v77)
    v13 = v12;
  else
    v13 = 1;
  if ((v13 & 1) == 0)
    MEMORY[0x1AF43C540](*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48, objc_msgSend(objc_retainAutorelease(v77), "UTF8String"));
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212679) & 1) == 0)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v70;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212680) & 1) == 0)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v69;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212695) & 1) == 0)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v68;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212681) & 1) == 0)*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v67 != 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212683) & 1) == 0)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = v6;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212684) & 1) == 0)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = v66;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212688) & 1) == 0)*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = v8;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212690) & 1) == 0)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = v65;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212696) & 1) == 0)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24) = v63;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212691) & 1) == 0)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24) = v64;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212697) & 1) == 0)MEMORY[0x1AF43C540](*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 48, objc_msgSend(objc_retainAutorelease(v74), "UTF8String"));
  v61 = v6;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), 285212693) & 1) == 0)*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24) = v9;
  v14 = [ML3AlbumGroupingIdentifier alloc];
  ML3CPPBridgeString((const UInt8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48), 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = -[ML3AlbumGroupingIdentifier initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:](v14, "initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:", v73, v76, v15, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24));

  v16 = [ML3AlbumGroupingIdentifier alloc];
  v17 = *(_QWORD *)(a1 + 192);
  v18 = *(void **)(v4 + 8);
  ML3CPPBridgeString((const UInt8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "groupingKeyForString:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  ML3CPPBridgeString((const UInt8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48), 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = -[ML3AlbumGroupingIdentifier initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:](v16, "initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:", v17, v20, v21, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24));
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8);
  v24 = *(void **)(v23 + 40);
  *(_QWORD *)(v23 + 40) = v22;

  v25 = *(_DWORD *)(a1 + 232);
  v26 = *(int *)(v4 + 32);
  LODWORD(v20) = HIBYTE(v25);
  PropertyIndex = ML3TrackRulesGetPropertyIndex(HIBYTE(v25), v25);
  if (*(_DWORD *)(ML3TrackRulesGetRule((int)v20, PropertyIndex) + 4 * v26) == -1
    || (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) + 40), "isEqual:", v71) & 1) != 0)
  {
    goto LABEL_48;
  }
  v28 = *(std::__shared_weak_count **)(a1 + 208);
  v83[0] = *(_QWORD *)(a1 + 200);
  v83[1] = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(v4, (uint64_t)v83, *(_DWORD *)(a1 + 232));
  v32 = shouldPreserveTrackProperty;
  if (!v28)
    goto LABEL_47;
  v33 = (unint64_t *)&v28->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if ((v32 & 1) != 0)
      goto LABEL_48;
  }
  else
  {
LABEL_47:
    if (shouldPreserveTrackProperty)
    {
LABEL_48:
      if (v5)
        std::string::basic_string[abi:ne180100]<0>(&v82, (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
      else
        memset(&v82, 0, sizeof(v82));
      if (v75)
        std::string::basic_string[abi:ne180100]<0>(&v81, (char *)objc_msgSend(objc_retainAutorelease(v75), "UTF8String"));
      else
        memset(&v81, 0, sizeof(v81));
      if (v74)
        std::string::basic_string[abi:ne180100]<0>(&v80, (char *)objc_msgSend(objc_retainAutorelease(v74), "UTF8String"));
      else
        memset(&v80, 0, sizeof(v80));
      if (v77)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v77), "UTF8String"));
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        v79 = 0;
      }
      v35 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v4, (uint64_t)&v81, (uint64_t)&v82);
      v37 = v36;
      v38 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8);
      v39 = (std::__shared_weak_count *)operator new(0xB0uLL);
      v39->__shared_owners_ = 0;
      v40 = (unint64_t *)&v39->__shared_owners_;
      v39->__shared_weak_owners_ = 0;
      v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51298;
      v41 = *(_QWORD *)(a1 + 216);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v87, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
      else
        v87 = v82;
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v85, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
      else
        v85 = v81;
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v84, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
      else
        v84 = v80;
      ML3AlbumData::ML3AlbumData((uint64_t)&v39[1], v41, (__int128 *)&v87, (__int128 *)&v85, v70, v65 != 0, v69, v66, v35, v37, v72 != 0, v64, v63, (__int128 *)&v84, v67 != 0, *(_BYTE *)(v38 + 24), v68);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      v42 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v43 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v44 = operator new(0xB0uLL);
      v45 = (std::string::size_type)v44;
      v44[1] = 0;
      v44[2] = 0;
      v46 = (__int128 *)(v42 + 48);
      *v44 = &off_1E5B513B0;
      v47 = (std::string::size_type)(v44 + 3);
      v87.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39[1];
      v87.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
      do
        v48 = __ldxr(v40);
      while (__stxr(v48 + 1, v40));
      ML3AlbumImportItem::ML3AlbumImportItem((uint64_t)(v44 + 3), &v87, v46, *(unsigned __int8 *)(v43 + 24), v76, v62, v73, v61, v72 != 0);
      do
        v49 = __ldaxr(v40);
      while (__stlxr(v49 - 1, v40));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
      v85.__r_.__value_.__r.__words[0] = v47;
      v85.__r_.__value_.__l.__size_ = v45;
      std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8) + 48, (__int128 *)&v85);
      size = (std::__shared_weak_count *)v85.__r_.__value_.__l.__size_;
      if (v85.__r_.__value_.__l.__size_)
      {
        v51 = (unint64_t *)(v85.__r_.__value_.__l.__size_ + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (v39)
      {
        v53 = (unint64_t *)&v39->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (SHIBYTE(v79) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      goto LABEL_105;
    }
  }
  if (v62 == *(_QWORD *)(a1 + 224))
  {
    v55 = *(void **)(v4 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 216));
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v86 = v56;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v86, 1);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "executeUpdate:withParameters:error:", CFSTR("UPDATE album SET representative_item_pid=0 WHERE album_pid=?"), v57, 0);

  }
  *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) = 0;
  v58 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    v60 = *(_QWORD *)(a1 + 216);
    v59 = *(_QWORD *)(a1 + 224);
    LODWORD(v87.__r_.__value_.__l.__data_) = 134218240;
    *(std::string::size_type *)((char *)v87.__r_.__value_.__r.__words + 4) = v59;
    WORD2(v87.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v87.__r_.__value_.__r.__words[1] + 6) = v60;
    _os_log_impl(&dword_1AC149000, v58, OS_LOG_TYPE_DEFAULT, "Removing trackPersistentID=%lld as the representative item for albumPersistentID=%lld as the groupingKey has changed/can no longer be applied", (uint8_t *)&v87, 0x16u);
  }

LABEL_105:
}

void sub_1AC346478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,void *a32,void *a33,void *a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;
  void *v49;
  void *v50;
  void *v51;

  _Unwind_Resume(a1);
}

void ML3ImportSession::_getAlbumImportItemForGroupingIdentifierAndPIDs(_QWORD *a1, uint64_t a2, void *a3, uint64_t *a4, unint64_t a5, unint64_t a6, _BYTE *a7)
{
  id v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  unsigned __int8 *v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t *v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  unsigned __int8 *v44;
  uint64_t *v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  __CFString *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  _QWORD v74[4];
  id v75;
  uint8_t *v76;
  uint64_t v77;
  unint64_t v78;
  std::string v79;
  void *__p[2];
  char v81;
  uint8_t buf[8];
  uint8_t *v83;
  uint64_t v84;
  __n128 (*v85)(__n128 *, __n128 *);
  uint64_t (*v86)(uint64_t);
  const char *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  _QWORD v90[2];
  _QWORD v91[2];
  _QWORD v92[2];
  _QWORD v93[2];
  void *v94;
  _QWORD v95[4];

  v95[2] = *MEMORY[0x1E0C80C00];
  v13 = a3;
  *a7 = 0;
  v73 = v13;
  if (v13 || (*((char *)a4 + 23) < 0 ? (v14 = a4[1]) : (v14 = *((unsigned __int8 *)a4 + 23)), v14 | a5 | a6))
  {
    *(_QWORD *)buf = 0;
    v83 = buf;
    v84 = 0x4012000000;
    v85 = __Block_byref_object_copy__337;
    v86 = __Block_byref_object_dispose__338;
    v88 = 0;
    v89 = 0;
    v87 = "";
    if (a5)
    {
      v15 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a2 + 2248), a5);
      if (v15)
      {
        *a7 = 1;
        std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](&v88, v15[3], v15[4]);
        v16 = *((_QWORD *)v83 + 7);
        *a1 = *((_QWORD *)v83 + 6);
        a1[1] = v16;
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
LABEL_93:
        _Block_object_dispose(buf, 8);
        v68 = v89;
        v23 = v73;
        if (v89)
        {
          p_shared_owners = (unint64_t *)&v89->__shared_owners_;
          do
            v70 = __ldaxr(p_shared_owners);
          while (__stlxr(v70 - 1, p_shared_owners));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        goto LABEL_98;
      }
      v20 = (char *)a4 + 23;
      if (*((char *)a4 + 23) < 0)
        v21 = a4[1];
      else
        v21 = *((unsigned __int8 *)a4 + 23);
      if (!v21)
      {
        objc_msgSend(CFSTR("SELECT album, sort_album, feed_url, rowid, grouping_key, album_artist_pid, season_number, all_compilations, user_rating, liked_state, album_year, (CASE WHEN season_number > 0 THEN season_number ELSE IFNULL(sort_album, album) END), contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available, store_id, liked_state_changed_date, cloud_library_id, representative_item_pid FROM album WHERE "), "stringByAppendingString:", CFSTR("ROWID=?"));
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a5);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v94 = v35;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v94, 1);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_83:

        goto LABEL_84;
      }
      objc_msgSend(CFSTR("SELECT album, sort_album, feed_url, rowid, grouping_key, album_artist_pid, season_number, all_compilations, user_rating, liked_state, album_year, (CASE WHEN season_number > 0 THEN season_number ELSE IFNULL(sort_album, album) END), contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available, store_id, liked_state_changed_date, cloud_library_id, representative_item_pid FROM album WHERE "), "stringByAppendingString:", CFSTR("(ROWID=? OR cloud_library_id=?)"));
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a5);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v95[0] = v35;
      v36 = a4;
      if (*v20 < 0)
        v36 = (uint64_t *)*a4;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v36);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v95[1] = v37;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v95, 2);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_82:

      goto LABEL_83;
    }
    if (*((char *)a4 + 23) < 0)
      v19 = a4[1];
    else
      v19 = *((unsigned __int8 *)a4 + 23);
    if (v19)
    {
      v24 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a2 + 1328), (unsigned __int8 *)a4);
      if (!v24)
        goto LABEL_59;
      v25 = (uint64_t *)*((_QWORD *)v24 + 5);
      v26 = (std::__shared_weak_count *)*((_QWORD *)v24 + 6);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        v29 = *v25;
        do
          v30 = __ldaxr(v27);
        while (__stlxr(v30 - 1, v27));
        goto LABEL_35;
      }
    }
    else
    {
      if (!a6)
      {
        if (!v13)
          goto LABEL_59;
        objc_msgSend(v13, "keyValue");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        ML3CPPStringFromData((NSData *)__p, v43);
        v44 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a2 + 1248), (unsigned __int8 *)__p);
        if (v81 < 0)
          operator delete(__p[0]);

        if (!v44)
          goto LABEL_59;
        v45 = (uint64_t *)*((_QWORD *)v44 + 5);
        v46 = (unint64_t *)*((_QWORD *)v44 + 6);
        __p[0] = v45;
        __p[1] = v46;
        if (v46)
        {
          v47 = v46 + 1;
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
        v49 = *v45;
        std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        if (!v49)
          goto LABEL_59;
        goto LABEL_46;
      }
      v31 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a2 + 1008), a6);
      if (!v31)
        goto LABEL_59;
      v25 = (uint64_t *)v31[3];
      v26 = (std::__shared_weak_count *)v31[4];
      if (v26)
      {
        v32 = (unint64_t *)&v26->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        v29 = *v25;
        do
          v30 = __ldaxr(v32);
        while (__stlxr(v30 - 1, v32));
LABEL_35:
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          if (!v29)
            goto LABEL_59;
          goto LABEL_46;
        }
LABEL_45:
        if (!v29)
          goto LABEL_59;
LABEL_46:
        v39 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a2 + 2248), 0);
        if (v39)
        {
          *a7 = 1;
          std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)v83 + 6, v39[3], v39[4]);
          v40 = *((_QWORD *)v83 + 7);
          *a1 = *((_QWORD *)v83 + 6);
          a1[1] = v40;
          if (v40)
          {
            v41 = (unint64_t *)(v40 + 8);
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          goto LABEL_93;
        }
LABEL_59:
        v20 = (char *)a4 + 23;
        if (*((char *)a4 + 23) < 0)
          v50 = a4[1];
        else
          v50 = *((unsigned __int8 *)a4 + 23);
        if (v50)
        {
          objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(CFSTR("SELECT album, sort_album, feed_url, rowid, grouping_key, album_artist_pid, season_number, all_compilations, user_rating, liked_state, album_year, (CASE WHEN season_number > 0 THEN season_number ELSE IFNULL(sort_album, album) END), contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available, store_id, liked_state_changed_date, cloud_library_id, representative_item_pid FROM album WHERE "), "stringByAppendingString:", CFSTR("cloud_library_id=?"));
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          v52 = a4;
          if (*v20 < 0)
            v52 = (uint64_t *)*a4;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v52);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "addObject:", v53);

          if (a6)
          {
            objc_msgSend(v51, "stringByAppendingString:", CFSTR(" OR (cloud_library_id='' AND (ROWID=? OR sync_id=?))"));
            v54 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a6);
            v55 = (void *)objc_claimAutoreleasedReturnValue();
            v93[0] = v55;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a6);
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            v93[1] = v56;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v93, 2);
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "addObjectsFromArray:", v57);

          }
          else
          {
            v54 = v51;
          }
          if (!v73)
          {
            v34 = v54;
LABEL_84:
            objc_msgSend(*(id *)(a2 + 16), "executeQuery:withParameters:", v34, v38);
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            v74[0] = MEMORY[0x1E0C809B0];
            v74[1] = 3321888768;
            v74[2] = ___ZN16ML3ImportSession47_getAlbumImportItemForGroupingIdentifierAndPIDsEP26ML3AlbumGroupingIdentifierNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEExxRb_block_invoke;
            v74[3] = &unk_1E5B4BDD8;
            v76 = buf;
            v77 = a2;
            v75 = v73;
            v78 = a6;
            if (*v20 < 0)
              std::string::__init_copy_ctor_external(&v79, (const std::string::value_type *)*a4, a4[1]);
            else
              v79 = *(std::string *)a4;
            objc_msgSend(v64, "enumerateRowsWithBlock:", v74);
            v65 = *((_QWORD *)v83 + 7);
            *a1 = *((_QWORD *)v83 + 6);
            a1[1] = v65;
            if (v65)
            {
              v66 = (unint64_t *)(v65 + 8);
              do
                v67 = __ldxr(v66);
              while (__stxr(v67 + 1, v66));
            }
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v79.__r_.__value_.__l.__data_);

            goto LABEL_93;
          }
          objc_msgSend(v73, "groupingKey");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v58 = objc_msgSend(v73, "albumArtistPersistentID");
          if (!objc_msgSend(v35, "length"))
          {
            objc_msgSend(v54, "stringByAppendingString:", CFSTR(" OR (cloud_library_id='' AND grouping_key IS NULL AND album_artist_pid=?)"));
            v34 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v58);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "addObject:", v37);
            goto LABEL_82;
          }
          objc_msgSend(v54, "stringByAppendingString:", CFSTR(" OR (cloud_library_id='' AND grouping_key IN (?) AND album_artist_pid=?)"));
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          v92[0] = v35;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v58);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v92[1] = v37;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v92, 2);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "addObjectsFromArray:", v59);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          if (v73)
          {
            objc_msgSend(v73, "groupingKey");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            v72 = objc_msgSend(v73, "albumArtistPersistentID");
          }
          else
          {
            v35 = 0;
            v72 = 0;
          }
          v60 = CFSTR("SELECT album, sort_album, feed_url, rowid, grouping_key, album_artist_pid, season_number, all_compilations, user_rating, liked_state, album_year, (CASE WHEN season_number > 0 THEN season_number ELSE IFNULL(sort_album, album) END), contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available, store_id, liked_state_changed_date, cloud_library_id, representative_item_pid FROM album WHERE ");
          if (a6)
          {
            objc_msgSend(CFSTR("SELECT album, sort_album, feed_url, rowid, grouping_key, album_artist_pid, season_number, all_compilations, user_rating, liked_state, album_year, (CASE WHEN season_number > 0 THEN season_number ELSE IFNULL(sort_album, album) END), contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available, store_id, liked_state_changed_date, cloud_library_id, representative_item_pid FROM album WHERE "), "stringByAppendingString:", CFSTR("(ROWID=? OR sync_id=?) OR"));
            v61 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a6);
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            v91[0] = v71;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a6);
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            v91[1] = v62;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v91, 2);
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "addObjectsFromArray:", v63);

            v60 = (__CFString *)v61;
          }
          if (!objc_msgSend(v35, "length"))
          {
            -[__CFString stringByAppendingString:](v60, "stringByAppendingString:", CFSTR(" grouping_key IS NULL AND album_artist_pid=?"));
            v34 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v72);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "addObject:", v37);
            goto LABEL_82;
          }
          -[__CFString stringByAppendingString:](v60, "stringByAppendingString:", CFSTR(" grouping_key IN (?) AND album_artist_pid=?"));
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          v90[0] = v35;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v72);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v90[1] = v37;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v90, 2);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "addObjectsFromArray:", v59);
        }

        goto LABEL_82;
      }
    }
    v29 = *v25;
    goto LABEL_45;
  }
  v22 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AC149000, v22, OS_LOG_TYPE_DEFAULT, "Invalid parameters to find album", buf, 2u);
  }

  *a1 = 0;
  a1[1] = 0;
  v23 = 0;
LABEL_98:

}

void sub_1AC346F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;

  _Block_object_dispose(&a30, 8);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a11);

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_shouldPreserveAlbumProperty(id *this, uint64_t a2, unsigned int a3)
{
  int v5;
  uint64_t PropertyIndex;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD v15[6];
  _QWORD v16[4];
  _OWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2020000000;
  v16[3] = v17;
  v5 = HIBYTE(a3);
  PropertyIndex = ML3TrackRulesGetPropertyIndex(HIBYTE(a3), a3);
  v7 = *((unsigned int *)this + 8);
  if ((int)v7 < 1)
  {
LABEL_8:
    v9 = 0;
  }
  else
  {
    v8 = PropertyIndex;
    LOBYTE(v9) = 0;
    v10 = (int)v7 - 1;
    v11 = v7 + 1;
    while (1)
    {
      if (*(_DWORD *)(ML3TrackRulesGetRule(v5, v8) + 4 * v10) == 1)
      {
        if ((v9 & 1) == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT cloud_library_id, sync_id, store_id FROM album WHERE album_pid = %lld"), a2);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(this[8], "executeQuery:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v15[0] = MEMORY[0x1E0C809B0];
          v15[1] = 3221225472;
          v15[2] = ___ZN16ML3ImportSession28_shouldPreserveAlbumPropertyExj_block_invoke;
          v15[3] = &unk_1E5B65228;
          v15[4] = v16;
          v15[5] = a2;
          objc_msgSend(v13, "enumerateRowsWithBlock:", v15);

        }
        v9 = 1;
        if (*((_QWORD *)v17 + v10))
          break;
      }
      --v10;
      if (--v11 <= 1)
        goto LABEL_8;
    }
  }
  _Block_object_dispose(v16, 8);
  return v9;
}

void sub_1AC3472EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(void **)(a1 + 24);
    ML3CPPBridgeString((const UInt8 *)a2, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKeyedSubscript:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "ML3NameOrderValue");
  }
  else
  {
    v11 = *(unsigned __int8 *)(a3 + 23);
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(a3 + 8);
    if (!v11)
      return 0;
    ML3CPPBridgeString((const UInt8 *)a3, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "MLSortString");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v13)
    {
      v15 = v13;
    }
    else
    {
      ML3CPPBridgeString((const UInt8 *)a3, 1);
      v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v6 = v15;

    objc_msgSend(*(id *)(a1 + 24), "objectForKeyedSubscript:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "ML3NameOrderValue");
  }
  v16 = v8;
  v17 = v9;

  if (v17 == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  return v16;
}

void sub_1AC34744C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = a2;
  v12 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v12;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AC34767C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  _QWORD v39[2];
  char v40;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x38uLL);
  v39[0] = v16;
  v39[1] = a1 + 16;
  v40 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v40 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(void **)a1;
          *(_QWORD *)a1 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v15;
          if (*v15)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v15;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v27;
                    goto LABEL_58;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_58:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v38 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v38)
          operator delete(v38);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v36 = v39[0];
  if (v35)
  {
    *(_QWORD *)v39[0] = *v35;
LABEL_75:
    *v35 = v36;
    goto LABEL_76;
  }
  *(_QWORD *)v39[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v36;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)v36)
  {
    v37 = *(_QWORD *)(*(_QWORD *)v36 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  v39[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
}

void sub_1AC347AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::shared_ptr<ML3AlbumData>>::~pair(uint64_t a1)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  _QWORD v35[2];
  char v36;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x28uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = a2;
  *((_QWORD *)v13 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(void **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v12;
          if (*v12)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v32 = v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = v32;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v32;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
  if (*(_QWORD *)v32)
  {
    v33 = *(_QWORD *)(*(_QWORD *)v32 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7)
        v33 %= v7;
    }
    else
    {
      v33 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
}

void sub_1AC347F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<ML3AlbumImportItem,std::allocator<ML3AlbumImportItem>,std::shared_ptr<ML3AlbumData> &,std::string &,BOOL &,NSData * {__strong}&,long long,long long &,long long &,BOOL &,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, __int128 *a4, unsigned __int8 *a5, void **a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, char *a10)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v25[2];

  v16 = operator new(0xB0uLL);
  v17 = v16;
  v16[1] = 0;
  v16[2] = 0;
  *v16 = &off_1E5B513B0;
  v18 = v16 + 3;
  v25[0] = a2;
  v25[1] = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  ML3AlbumImportItem::ML3AlbumImportItem((uint64_t)(v16 + 3), v25, a4, *a5, *a6, *a7, *a8, *a9, *a10);
  if (a3)
  {
    v21 = (unint64_t *)&a3->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *a1 = v18;
  a1[1] = v17;
}

void sub_1AC348034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  void *v7;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::~__shared_weak_count(v5);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ML3AlbumImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B513B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3AlbumImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B513B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_emplace<ML3AlbumImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ML3AlbumData::ML3AlbumData(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, int a5, char a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, __int128 *a14, char a15, char a16, uint64_t a17)
{
  __int128 v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;

  *(_QWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v23 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v23;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v24 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v24;
  }
  *(_DWORD *)(a1 + 56) = a5;
  *(_BYTE *)(a1 + 60) = a6;
  *(_DWORD *)(a1 + 64) = a7;
  *(_DWORD *)(a1 + 68) = a8;
  *(_QWORD *)(a1 + 72) = a9;
  *(_QWORD *)(a1 + 80) = a10;
  *(_DWORD *)(a1 + 88) = a11;
  *(_QWORD *)(a1 + 96) = a12;
  *(_QWORD *)(a1 + 104) = a13;
  v25 = (std::string *)(a1 + 112);
  if (*((char *)a14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)a14, *((_QWORD *)a14 + 1));
  }
  else
  {
    v26 = *a14;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a14 + 2);
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
  }
  *(_BYTE *)(a1 + 136) = a15;
  *(_BYTE *)(a1 + 137) = a16;
  *(_QWORD *)(a1 + 144) = a17;
  return a1;
}

void sub_1AC3481B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<ML3AlbumData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3AlbumData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51298;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

void std::__shared_ptr_emplace<ML3AlbumData>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<ML3ComposerData>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void ___ZN16ML3ImportSession28_shouldPreserveAlbumPropertyExj_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  objc_msgSend(v8, "stringForColumnIndex:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v8, "int64ForColumnIndex:", 1);
  v5 = objc_msgSend(v8, "int64ForColumnIndex:", 2);
  **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a1 + 40);
  v6 = objc_msgSend(v3, "length");
  if (v6)
    v6 = objc_msgSend(v3, "hash");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 16) = v6;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 24) = v4;
  if (MSVDeviceIsWatch())
    v7 = v4;
  else
    v7 = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) = v7;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 40) = v5;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 32) = v5;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 48) = v5;

}

void sub_1AC348404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession47_getAlbumImportItemForGroupingIdentifierAndPIDsEP26ML3AlbumGroupingIdentifierNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEExxRb_block_invoke(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v6;
  id v7;
  ML3ImportSession *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  ML3ImportSession *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  BOOL v27;
  int v28;
  NSString *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  objc_class *v34;
  objc_class *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *size;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *isa;
  unint64_t *v42;
  unint64_t v43;
  ML3AlbumGroupingIdentifier *v44;
  void *v45;
  ML3AlbumGroupingIdentifier *v46;
  void *v47;
  std::string::size_type v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::string::size_type v60;
  void *v61;
  unint64_t v62;
  const void **v63;
  void **v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t i;
  void *v77;
  id v78;
  void *v79;
  NSData v80[2];
  std::string::size_type v81;
  std::string __p;
  __int128 v83;
  __int128 v84;
  void *v85[2];
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  int v91;
  int v92;
  __int128 v93;
  int v94;
  int v95;
  int v96;
  int v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101[2];
  __int128 v102;
  _QWORD v103[4];

  v103[1] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = a3;
  v8 = *(ML3ImportSession **)(a1 + 48);
  v103[0] = 0;
  v102 = 0u;
  memset(v101, 0, sizeof(v101));
  v78 = v7;
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v6, (uint64_t)v101, 3uLL);
  if (SHIBYTE(v101[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v100, v101[0].__r_.__value_.__l.__data_, v101[0].__r_.__value_.__l.__size_);
  else
    v100 = v101[0];
  if (SHIBYTE(v101[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v99, v101[1].__r_.__value_.__l.__data_, v101[1].__r_.__value_.__l.__size_);
  else
    v99 = v101[1];
  if (SHIBYTE(v103[0]) < 0)
  {
    std::string::__init_copy_ctor_external(&v98, (const std::string::value_type *)v102, *((std::string::size_type *)&v102 + 1));
  }
  else
  {
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v102;
    v98.__r_.__value_.__r.__words[2] = v103[0];
  }
  v9 = objc_msgSend(v6, "int64ForColumnIndex:", 3);
  objc_msgSend(v6, "objectAtIndexedSubscript:", 4);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v6, "int64ForColumnIndex:", 5);
  v11 = objc_msgSend(v6, "intForColumnIndex:", 6);
  v12 = objc_msgSend(v6, "intForColumnIndex:", 7);
  v97 = v12;
  v96 = objc_msgSend(v6, "intForColumnIndex:", 8);
  v95 = objc_msgSend(v6, "intForColumnIndex:", 9);
  v94 = objc_msgSend(v6, "intForColumnIndex:", 10);
  objc_msgSend(v6, "objectAtIndexedSubscript:", 11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v14 = v6;
    v15 = a1;
    v16 = v12;
    v17 = v10;
    v18 = v9;
    v19 = v11;
    v20 = v8;
    v21 = (void *)*((_QWORD *)v8 + 3);
    v77 = v14;
    objc_msgSend(v14, "objectAtIndexedSubscript:", 11);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "objectForKeyedSubscript:", v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "ML3NameOrderValue");
    *(_QWORD *)&v93 = v24;
    *((_QWORD *)&v93 + 1) = v25;

    v8 = v20;
    v11 = v19;
    v9 = v18;
    v10 = v17;
    v12 = v16;
    a1 = v15;
    v6 = v77;

  }
  else
  {
    v24 = 0;
    v93 = *(_OWORD *)"";
  }

  objc_msgSend(v6, "objectAtIndexedSubscript:", 11);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  if (v26)
    v27 = v24 == 0;
  else
    v27 = 0;
  v28 = v27;

  if (v28)
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", 11);
    v29 = (NSString *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v93 = ML3ImportSession::_getNameOrderForString(v8, v29);
    *((_QWORD *)&v93 + 1) = v30;

  }
  v31 = objc_msgSend(v6, "intForColumnIndex:", 12);
  v92 = v31;
  v91 = objc_msgSend(v6, "intForColumnIndex:", 13);
  v90 = objc_msgSend(v6, "int64ForColumnIndex:", 14);
  v89 = objc_msgSend(v6, "intForColumnIndex:", 15) != 0;
  v88 = objc_msgSend(v6, "int64ForColumnIndex:", 16);
  v87 = objc_msgSend(v6, "int64ForColumnIndex:", 17);
  std::string::basic_string[abi:ne180100]<0>(v85, (char *)objc_msgSend(v6, "cStringForColumnIndex:", 18));
  v32 = objc_msgSend(v6, "int64ForColumnIndex:", 19);
  std::allocate_shared[abi:ne180100]<ML3AlbumData,std::allocator<ML3AlbumData>,long long &,std::string &,std::string &,int &,int &,int &,int &,ML3NameOrder &,int &,long long &,long long &,std::string &,int &,BOOL &,long long &,void>(&v84, v9, (uint64_t)&v100, (uint64_t)&v99, &v96, &v91, &v95, &v94, (uint64_t *)&v93, &v92, &v90, &v88, (uint64_t)v85, &v97, (char *)&v89, &v87);
  v33 = operator new(0xB0uLL);
  v34 = (objc_class *)v33;
  v33[1] = 0;
  v33[2] = 0;
  *v33 = &off_1E5B513B0;
  v35 = (objc_class *)(v33 + 3);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v84;
  if (*((_QWORD *)&v84 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  ML3AlbumImportItem::ML3AlbumImportItem((uint64_t)(v33 + 3), &__p, (__int128 *)&v98, v12, v79, v32, v10, v11, v31 != 0);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v39 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v80[0].super.isa = v35;
  v80[1].super.isa = v34;
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, (__int128 *)v80);
  isa = (std::__shared_weak_count *)v80[1].super.isa;
  if (v80[1].super.isa)
  {
    v42 = (unint64_t *)((char *)v80[1].super.isa + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))isa->__on_zero_shared)(isa);
      std::__shared_weak_count::__release_weak(isa);
    }
  }
  v44 = [ML3AlbumGroupingIdentifier alloc];
  ML3CPPBridgeString((const UInt8 *)&v98, 1);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = -[ML3AlbumGroupingIdentifier initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:](v44, "initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:", v10, v79, v45, v11, v97 != 0);

  if (*(_QWORD *)(a1 + 32) && v46 && -[ML3AlbumGroupingIdentifier isEqual:](v46, "isEqual:"))
  {
    *a4 = 1;
    -[ML3AlbumGroupingIdentifier keyValue](v46, "keyValue");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    ML3CPPStringFromData(v80, v47);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v80[0].super.isa;
    v48 = v81;
    v80[1].super.isa = 0;
    v81 = 0;
    v80[0].super.isa = 0;
    __p.__r_.__value_.__r.__words[2] = v48;
    v83 = v84;
    if (*((_QWORD *)&v84 + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>((uint64_t)v8 + 1248, (unsigned __int8 *)&__p, (uint64_t)&__p);
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v81) < 0)
      operator delete(v80[0].super.isa);

  }
  v54 = *(_QWORD *)(a1 + 56);
  if (v54)
  {
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 56);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v84;
    if (*((_QWORD *)&v84 + 1))
    {
      v55 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3AlbumData>>>((uint64_t)v8 + 1008, v54, (uint64_t)&__p);
    v57 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v58 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(_QWORD *)(a1 + 72))
      goto LABEL_91;
  }
  else if (!*(_BYTE *)(a1 + 87))
  {
    goto LABEL_91;
  }
  v60 = *(_QWORD *)(a1 + 72);
  if (*(char *)(a1 + 87) >= 0)
    v61 = (void *)*(unsigned __int8 *)(a1 + 87);
  else
    v61 = *(void **)(a1 + 72);
  v62 = v86;
  if ((v86 & 0x80u) != 0)
    v62 = (unint64_t)v85[1];
  if (v61 == (void *)v62)
  {
    v63 = (const void **)(a1 + 64);
    if ((v86 & 0x80u) == 0)
      v64 = v85;
    else
      v64 = (void **)v85[0];
    if ((*(_BYTE *)(a1 + 87) & 0x80) != 0)
    {
      if (memcmp(*v63, v64, *(_QWORD *)(a1 + 72)))
        goto LABEL_91;
LABEL_80:
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v63, v60);
    }
    else
    {
      if (*(_BYTE *)(a1 + 87))
      {
        v65 = (unsigned __int8 *)(a1 + 64);
        v66 = *(unsigned __int8 *)(a1 + 87);
        while (*v65 == *(unsigned __int8 *)v64)
        {
          ++v65;
          v64 = (void **)((char *)v64 + 1);
          if (!--v66)
          {
            if ((*(_BYTE *)(a1 + 87) & 0x80) != 0)
              goto LABEL_80;
            goto LABEL_78;
          }
        }
        goto LABEL_91;
      }
LABEL_78:
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v63;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 80);
    }
    v83 = v84;
    if (*((_QWORD *)&v84 + 1))
    {
      v67 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>((uint64_t)v8 + 1328, (unsigned __int8 *)&__p, (uint64_t)&__p);
    v69 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v70 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_91:

  v72 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if ((char)v86 < 0)
    operator delete(v85[0]);

  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v103[i]) < 0)
      operator delete((void *)v103[i - 2]);
  }

}

void sub_1AC348C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  if (a41 < 0)
    operator delete(__p);

  if (a56 < 0)
    operator delete(a51);
  if (*(char *)(v58 - 217) < 0)
    operator delete(*(void **)(v58 - 240));
  if (*(char *)(v58 - 185) < 0)
    operator delete(*(void **)(v58 - 208));
  v60 = 0;
  v61 = v58 - 176;
  while (1)
  {
    if (*(char *)(v61 + v60 + 71) < 0)
      operator delete(*(void **)(v61 + v60 + 48));
    v60 -= 24;
    if (v60 == -72)
    {

      _Unwind_Resume(a1);
    }
  }
}

void __copy_helper_block_ea8_64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 64);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
}

const unsigned __int8 *ML3DatabaseRowGetHomogeneousColumns<std::string>(void *a1, uint64_t a2, unint64_t a3)
{
  void *v5;
  void *v6;
  sqlite3_stmt *v7;
  unint64_t v8;
  unsigned int v9;
  const unsigned __int8 *result;

  objc_msgSend(a1, "parentResult");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_statement");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (sqlite3_stmt *)objc_msgSend(v6, "sqliteStatement");

  v8 = 0;
  v9 = 1;
  do
  {
    result = sqlite3_column_text(v7, v9 - 1);
    if (result)
      result = (const unsigned __int8 *)MEMORY[0x1AF43C540](a2 + 24 * v8, result);
    v8 = v9++;
  }
  while (v8 < a3);
  return result;
}

void sub_1AC348F1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_getNameOrderForString(ML3ImportSession *this, NSString *a2)
{
  NSString *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[6];
  _QWORD v10[4];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  v10[3] = 0;
  v4 = (void *)*((_QWORD *)this + 2);
  v15[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "executeQuery:withParameters:", CFSTR("SELECT name_order, name_section FROM sort_map WHERE name = ?"), v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___ZN16ML3ImportSession22_getNameOrderForStringEP8NSString_block_invoke;
  v9[3] = &unk_1E5B65040;
  v9[4] = &v11;
  v9[5] = v10;
  objc_msgSend(v6, "enumerateRowsWithBlock:", v9);

  v7 = v12[3];
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(&v11, 8);

  return v7;
}

void sub_1AC34907C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v10 = v9;

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<ML3AlbumData,std::allocator<ML3AlbumData>,long long &,std::string &,std::string &,int &,int &,int &,int &,ML3NameOrder &,int &,long long &,long long &,std::string &,int &,BOOL &,long long &,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, int *a6, int *a7, int *a8, uint64_t *a9, int *a10, uint64_t *a11, uint64_t *a12, uint64_t a13, _DWORD *a14, char *a15, uint64_t *a16)
{
  _QWORD *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  std::string v37;
  std::string v38;
  std::string v39;

  v24 = operator new(0xB0uLL);
  v24[1] = 0;
  v24[2] = 0;
  *v24 = &off_1E5B51298;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v39 = *(std::string *)a3;
  v35 = a1;
  v36 = a2;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v38 = *(std::string *)a4;
  v25 = *a5;
  v26 = *a6;
  v27 = *a7;
  v28 = *a8;
  v29 = *a9;
  v30 = a9[1];
  v31 = *a10;
  v32 = *a11;
  v33 = *a12;
  if (*(char *)(a13 + 23) < 0)
  {
    v34 = v25;
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a13, *(_QWORD *)(a13 + 8));
    v25 = v34;
  }
  else
  {
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)a13;
    v37.__r_.__value_.__r.__words[2] = *(_QWORD *)(a13 + 16);
  }
  ML3AlbumData::ML3AlbumData((uint64_t)(v24 + 3), v36, (__int128 *)&v39, (__int128 *)&v38, v25, v26 != 0, v27, v28, v29, v30, v31, v32, v33, (__int128 *)&v37, *a14 != 0, *a15, *a16);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  *v35 = v24 + 3;
  v35[1] = v24;
}

void sub_1AC349290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count *v31;
  uint64_t v32;
  void *v34;

  if (a31 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 89) < 0)
    operator delete(*(void **)(v32 - 112));
  std::__shared_weak_count::~__shared_weak_count(v31);
  operator delete(v34);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3AlbumData>>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  _QWORD v35[2];
  char v36;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x28uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = a2;
  *((_QWORD *)v13 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(void **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v12;
          if (*v12)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v32 = v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = v32;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v32;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
  if (*(_QWORD *)v32)
  {
    v33 = *(_QWORD *)(*(_QWORD *)v32 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7)
        v33 %= v7;
    }
    else
    {
      v33 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
}

void sub_1AC3496EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession22_getNameOrderForStringEP8NSString_block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  objc_msgSend(v8, "objectAtIndexedSubscript:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v6, "longLongValue");

  objc_msgSend(v8, "objectAtIndexedSubscript:", 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v7, "integerValue");

  *a4 = 1;
}

void sub_1AC349790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_176c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE200c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[23];
  result[22] = a2[22];
  result[23] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[26];
  result[25] = a2[25];
  result[26] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_176c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE200c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 176;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 200);
  return std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x68uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v5;
  *((_QWORD *)v13 + 2) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = (int8x8_t)v18;
  else
    prime = (int8x8_t)v17;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = operator new(8 * *(_QWORD *)&prime);
  v21 = *(void **)a1;
  *(_QWORD *)a1 = v20;
  if (v21)
    operator delete(v21);
  v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
  while (*(_QWORD *)&prime != v22);
  v23 = (_QWORD *)*v12;
  if (*v12)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&prime)
        v24 %= *(_QWORD *)&prime;
    }
    else
    {
      v24 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
    v29 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *v23 = *v29;
          *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
          v29 = v23;
        }
        v30 = v24;
LABEL_56:
        v23 = v29;
        v29 = (_QWORD *)*v29;
        v24 = v30;
      }
      while (v29);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  i = (_QWORD *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,ML3CollectionInfoSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,ML3CollectionInfoSet>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_1AC349C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,ML3CollectionInfoSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,ML3CollectionInfoSet>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ML3CollectionInfoSet::~ML3CollectionInfoSet(ML3CollectionInfoSet *this)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,ML3CollectionInfoSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,ML3CollectionInfoSet>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<long long const,ML3CollectionInfoSet>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void ___ZN16ML3ImportSession21_getDefaultEmptyAlbumEv_block_invoke()
{
  char *v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  __int128 v4;

  v0 = (char *)operator new(0xB0uLL);
  *((_QWORD *)v0 + 1) = 0;
  *((_QWORD *)v0 + 2) = 0;
  *(_QWORD *)v0 = &off_1E5B51298;
  *((_QWORD *)v0 + 11) = 0;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 69) = 0u;
  *((_OWORD *)v0 + 6) = *(_OWORD *)"";
  *((_DWORD *)v0 + 28) = 0;
  *((_QWORD *)v0 + 21) = 0;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 146) = 0u;
  *((_QWORD *)&v4 + 1) = v0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_QWORD *)&v4 = v0 + 24;
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)&ML3ImportSession::_getDefaultEmptyAlbum(void)::__emptyAlbumData, &v4);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN16ML3ImportSession28_shouldPreserveTrackPropertyENSt3__110shared_ptrI13ML3ImportItemEEj_block_invoke(uint64_t a1, void *a2)
{
  int IsWatch;
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a2;
  **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a1 + 40);
  IsWatch = MSVDeviceIsWatch();
  v4 = v6;
  if (IsWatch)
  {
    v5 = objc_msgSend(v6, "int64ForColumnIndex:", 0);
    v4 = v6;
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) = v5;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 24) = objc_msgSend(v4, "int64ForColumnIndex:", 0);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 16) = objc_msgSend(v6, "int64ForColumnIndex:", 1);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 32) = objc_msgSend(v6, "int64ForColumnIndex:", 2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 40) = objc_msgSend(v6, "int64ForColumnIndex:", 3);

}

void sub_1AC349E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AC349F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(uint64_t result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;
  std::string *v7;
  std::string *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[3];
  char v12;
  std::string *v13;
  std::string *v14;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[v9];
    v14 = v7;
    v13 = v7;
    v11[0] = v6 + 2;
    v11[1] = &v13;
    v11[2] = &v14;
    v12 = 0;
    if (a2 != a3)
    {
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
          v7 = v14;
        }
        else
        {
          v10 = *a2;
          v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
          *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v10;
        }
        a2 = (__int128 *)((char *)a2 + 24);
        v14 = ++v7;
      }
      while (a2 != a3);
      v8 = v7;
    }
    v12 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
    v6[1] = v8;
  }
  return result;
}

void sub_1AC34A0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_processSortableNames(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      if (!*(_QWORD *)(v5 + 8))
        goto LABEL_8;
LABEL_7:
      ML3CPPBridgeString((const UInt8 *)v5, 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v7);

      goto LABEL_8;
    }
    if (*(_BYTE *)(v5 + 23))
      goto LABEL_7;
LABEL_8:
    v5 += 24;
  }
  if ((objc_msgSend(*(id *)(a1 + 56), "attemptInsertStringsIntoSortMap:", v4) & 1) != 0)
    goto LABEL_11;
  ML3ImportSession::flush((ML3ImportSession *)a1, 1);
  v8 = objc_msgSend(*(id *)(a1 + 56), "commitFailedInsertedStrings:", v4);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1088);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1248);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1208);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear(a1 + 888);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear(a1 + 928);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear(a1 + 968);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear(a1 + 1008);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear(a1 + 1048);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1288);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(a1 + 1328);
  if (v8)
  {
LABEL_11:
    objc_msgSend(*(id *)(a1 + 56), "nameOrders");
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;

    v11 = 1;
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_1AC34A258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

void ___ZN16ML3ImportSession27_matchAlbumToImportedEntityENSt3__110shared_ptrI13ML3ImportItemEEx_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if (!*(_BYTE *)(a1 + 48))
  {
    objc_msgSend(v7, "stringForColumnIndex:", 0);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    MEMORY[0x1AF43C540](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, objc_msgSend(v6, "UTF8String"));

  }
  if (!*(_BYTE *)(a1 + 49))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v7, "int64ForColumnIndex:", 1);

}

void sub_1AC34A410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::updateAlbum(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _BOOL4 v10;
  NSObject *v11;
  void **v12;
  const char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  int v22;
  _BYTE *v23;
  _BYTE *v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int matched;
  char v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t AlbumPersistentID;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  BOOL v53;
  NSObject *v54;
  _BOOL4 v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  NSObject *v74;
  _QWORD v76[2];
  _QWORD v77[2];
  uint64_t v78;
  std::__shared_weak_count *v79;
  _QWORD v80[2];
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  _QWORD v85[2];
  uint64_t v86[2];
  void *__p[2];
  char v88;
  _BYTE buf[12];
  __int16 v90;
  const char *v91;
  __int16 v92;
  int v93;
  __int16 v94;
  NSObject *v95;
  _BYTE v96[12];
  __int16 v97;
  void **v98;
  char v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(*(id *)(a1 + 1576), "count"))
    v10 = 1;
  else
    v10 = *(_QWORD *)(a1 + 1536) != *(_QWORD *)(a1 + 1528);
  v11 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = __p;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 88))(__p);
    if (v88 < 0)
      v12 = (void **)__p[0];
    if (*a3)
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a3 + 88))(v96);
      if (v99 >= 0)
        v13 = v96;
      else
        v13 = *(const char **)v96;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v12;
      v90 = 2082;
      v91 = v13;
      v92 = 1024;
      v93 = a5;
      v94 = 1024;
      LODWORD(v95) = v10;
      _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_DEFAULT, "updating album=%{public}s with track=%{public}s ignoreNonExistingAlbum=%{BOOL}u, havePendingTrackModifications=%{BOOL}u", buf, 0x22u);
      if (v99 < 0)
        operator delete(*(void **)v96);
    }
    else
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v12;
      v90 = 2082;
      v91 = "";
      v92 = 1024;
      v93 = a5;
      v94 = 1024;
      LODWORD(v95) = v10;
      _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_DEFAULT, "updating album=%{public}s with track=%{public}s ignoreNonExistingAlbum=%{BOOL}u, havePendingTrackModifications=%{BOOL}u", buf, 0x22u);
    }
    if (v88 < 0)
      operator delete(__p[0]);
  }

  if (v10 && !ML3ImportSession::flush((ML3ImportSession *)a1, 1))
    return 0;
  if (!*a3)
    goto LABEL_49;
  v14 = (std::__shared_weak_count *)a3[1];
  v86[0] = *a3;
  v86[1] = (uint64_t)v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = ML3ImportSession::_prepareTrackForImport(a1, v86, a5, 1);
  v18 = v17;
  if (!v14)
    goto LABEL_26;
  v19 = (unint64_t *)&v14->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_26:
    if (v17)
      goto LABEL_27;
LABEL_40:
    if (*a3)
    {
      v26 = (std::__shared_weak_count *)a3[1];
      v85[0] = *a3;
      v85[1] = v26;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      matched = ML3ImportSession::_matchAlbumToImportedEntity(a1, v85, a4);
      v30 = matched;
      if (!v26)
        goto LABEL_48;
      v31 = (unint64_t *)&v26->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        if ((v30 & 1) != 0)
          goto LABEL_49;
      }
      else
      {
LABEL_48:
        if (matched)
          goto LABEL_49;
      }
      v51 = 0;
      v21 = 0;
      AlbumPersistentID = 0;
LABEL_74:
      v52 = *a3;
      if (*a3)
        v53 = (_DWORD)a5 == 0;
      else
        v53 = 1;
      if (v53 || *(_QWORD *)(v52 + 8))
      {
        v54 = os_log_create("com.apple.amp.medialibrary", "Import");
        v55 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
        if (v52 || !(_DWORD)a5 || AlbumPersistentID)
        {
          if (v55)
          {
            v56 = *a3;
            if (*a3)
              v56 = *(_QWORD *)(v56 + 8);
            *(_DWORD *)buf = 134218752;
            *(_QWORD *)&buf[4] = v56;
            v90 = 2048;
            v91 = (const char *)AlbumPersistentID;
            v92 = 1024;
            v93 = v51;
            v94 = 2048;
            v95 = v21;
            _os_log_impl(&dword_1AC149000, v54, OS_LOG_TYPE_DEFAULT, "updating album with trackPID=%lld, albumPID=%lld, matchAlbumToImportedEntity=%{BOOL}u, albumGroupingIdentifier=%p", buf, 0x26u);
          }

          v57 = (std::__shared_weak_count *)a2[1];
          v78 = *a2;
          v79 = v57;
          if (v57)
          {
            v58 = (unint64_t *)&v57->__shared_owners_;
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          if (v21)
            a4 = -[NSObject albumArtistPersistentID](v21, "albumArtistPersistentID");
          v60 = (std::__shared_weak_count *)a3[1];
          v77[0] = *a3;
          v77[1] = v60;
          if (v60)
          {
            v61 = (unint64_t *)&v60->__shared_owners_;
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
          }
          ML3ImportSession::_addAlbum(a1, &v78, v21, a4, v77);
          if (v60)
          {
            v63 = (unint64_t *)&v60->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          v65 = v79;
          if (v79)
          {
            v66 = (unint64_t *)&v79->__shared_owners_;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          v68 = *a2;
          v69 = (std::__shared_weak_count *)a2[1];
          v76[0] = v68;
          v76[1] = v69;
          if (v69)
          {
            v70 = (unint64_t *)&v69->__shared_owners_;
            do
              v71 = __ldxr(v70);
            while (__stxr(v71 + 1, v70));
          }
          ML3ImportSession::_addAlbumDataToSourceMaps(a1, v76);
          if (v69)
          {
            v72 = (unint64_t *)&v69->__shared_owners_;
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
        }
        else
        {
          if (v55)
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1AC149000, v54, OS_LOG_TYPE_DEFAULT, "Ignoring album update as the album does not exist", buf, 2u);
          }

        }
      }
      else
      {
        v74 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1AC149000, v74, OS_LOG_TYPE_DEFAULT, "Ignoring album update as the track does not exist", buf, 2u);
        }

      }
      a5 = 1;
      goto LABEL_119;
    }
LABEL_49:
    v33 = (std::__shared_weak_count *)a2[1];
    v83 = *a2;
    v84 = v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = (std::__shared_weak_count *)a3[1];
    v81 = *a3;
    v82 = v36;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    ML3ImportSession::_getAlbumGroupingIdentifierForImportItem(a1, &v83, &v81, a4);
    v21 = objc_claimAutoreleasedReturnValue();
    v39 = v82;
    if (v82)
    {
      v40 = (unint64_t *)&v82->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = v84;
    if (v84)
    {
      v43 = (unint64_t *)&v84->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = (std::__shared_weak_count *)a2[1];
    v80[0] = *a2;
    v80[1] = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    AlbumPersistentID = ML3ImportSession::_getAlbumPersistentID(a1, v80, v21);
    if (v45)
    {
      v49 = (unint64_t *)&v45->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v51 = 1;
    goto LABEL_74;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v18)
    goto LABEL_40;
LABEL_27:
  if (v18 != 1)
  {
    v21 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(buf);
      v22 = SHIBYTE(v92);
      v23 = *(_BYTE **)buf;
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 88))(__p);
      v24 = buf;
      if (v22 < 0)
        v24 = v23;
      if (v88 >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      *(_DWORD *)v96 = 136446466;
      *(_QWORD *)&v96[4] = v24;
      v97 = 2082;
      v98 = v25;
      _os_log_impl(&dword_1AC149000, v21, OS_LOG_TYPE_ERROR, "Error updating album=%{public}s. Could not prepare track data for import=%{public}s", v96, 0x16u);
      if (v88 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v92) < 0)
        operator delete(*(void **)buf);
    }
LABEL_119:

    return a5;
  }
  return 0;
}

void sub_1AC34ABDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;

  if (a37 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::addAlbumArtist(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  _BOOL4 v6;
  _BOOL4 v7;
  NSObject *v8;
  void **v9;
  const char *v10;
  int v11;
  int v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  int v22;
  _BYTE *v23;
  _BYTE *v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t AlbumArtistPersistentID;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD v75[2];
  _QWORD v76[2];
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79[2];
  uint64_t v80[2];
  _QWORD v81[4];
  uint64_t v82[2];
  void *v83[2];
  char v84;
  _BYTE __p[12];
  __int16 v86;
  void **v87;
  char v88;
  _BYTE buf[12];
  __int16 v90;
  const char *v91;
  __int16 v92;
  _QWORD v93[3];

  v93[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 2064) >= 0x3E8uLL
    && *(_QWORD *)(a1 + 1536) == *(_QWORD *)(a1 + 1528)
    && !objc_msgSend(*(id *)(a1 + 1584), "count")
    && objc_msgSend(*(id *)(a1 + 1576), "count") == 0;
  if (*a3)
  {
    if (objc_msgSend(*(id *)(a1 + 1576), "count"))
      v7 = 1;
    else
      v7 = *(_QWORD *)(a1 + 1560) != *(_QWORD *)(a1 + 1552);
  }
  else
  {
    v7 = 0;
  }
  v8 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = v83;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 88))(v83);
    if (v84 < 0)
      v9 = (void **)v83[0];
    if (*a3)
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a3 + 88))(__p);
      if (v88 >= 0)
        v10 = __p;
      else
        v10 = *(const char **)__p;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v9;
      v90 = 2082;
      v91 = v10;
      v92 = 1024;
      LODWORD(v93[0]) = v6;
      WORD2(v93[0]) = 1024;
      *(_DWORD *)((char *)v93 + 6) = v7;
      _os_log_impl(&dword_1AC149000, v8, OS_LOG_TYPE_DEFAULT, "adding albumArtist=%{public}s trackImportItem=%{public}s, addedArtistsOverThreshold=%{BOOL}u, updateOrDeleteTracks=%{BOOL}u", buf, 0x22u);
      if (v88 < 0)
        operator delete(*(void **)__p);
    }
    else
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v9;
      v90 = 2082;
      v91 = "<nil>";
      v92 = 1024;
      LODWORD(v93[0]) = v6;
      WORD2(v93[0]) = 1024;
      *(_DWORD *)((char *)v93 + 6) = v7;
      _os_log_impl(&dword_1AC149000, v8, OS_LOG_TYPE_DEFAULT, "adding albumArtist=%{public}s trackImportItem=%{public}s, addedArtistsOverThreshold=%{BOOL}u, updateOrDeleteTracks=%{BOOL}u", buf, 0x22u);
    }
    if (v84 < 0)
      operator delete(v83[0]);
  }

  if (objc_msgSend(*(id *)(a1 + 2080), "count"))
    v11 = 1;
  else
    v11 = v6;
  if ((v11 | v7) != 1)
    goto LABEL_134;
  v12 = ML3ImportSession::flush((ML3ImportSession *)a1, 1);
  v13 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v12;
    _os_log_impl(&dword_1AC149000, v13, OS_LOG_TYPE_DEFAULT, "flushing entities as we have pending album artist deletes OR accumulated enough adds OR track modifications finished with status=%{BOOL}u", buf, 8u);
  }

  if (v12)
  {
LABEL_134:
    if (*a3)
    {
      v14 = (std::__shared_weak_count *)a3[1];
      v82[0] = *a3;
      v82[1] = (uint64_t)v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = ML3ImportSession::_prepareTrackForImport(a1, v82, 0, 0);
      v18 = v17;
      if (!v14)
        goto LABEL_37;
      v19 = (unint64_t *)&v14->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (v18)
          goto LABEL_38;
      }
      else
      {
LABEL_37:
        if (v17)
        {
LABEL_38:
          v21 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(buf);
            v22 = SHIBYTE(v92);
            v23 = *(_BYTE **)buf;
            (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 88))(v83);
            v24 = buf;
            if (v22 < 0)
              v24 = v23;
            if (v84 >= 0)
              v25 = v83;
            else
              v25 = (void **)v83[0];
            *(_DWORD *)__p = 136446466;
            *(_QWORD *)&__p[4] = v24;
            v86 = 2082;
            v87 = v25;
            _os_log_impl(&dword_1AC149000, v21, OS_LOG_TYPE_ERROR, "Error adding album artist=%{public}s. Could not prepare track data for import=%{public}s", __p, 0x16u);
            if (v84 < 0)
              operator delete(v83[0]);
            if (SHIBYTE(v92) < 0)
              operator delete(*(void **)buf);
          }
          v26 = 0;
LABEL_130:

          return v26;
        }
      }
    }
    v27 = *a2;
    v28 = (std::__shared_weak_count *)a2[1];
    v81[2] = *a2;
    v81[3] = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    ML3ImportSession::_getGroupingKeyForAlbumArtistImportItem(a1, v27);
    v21 = objc_claimAutoreleasedReturnValue();
    if (v28)
    {
      v31 = (unint64_t *)&v28->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (*a3)
      v33 = *(_QWORD *)(*a3 + 8);
    else
      v33 = 0;
    v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 301989898);
    v35 = *a3;
    if (*a3
      && ((v36 = *(unsigned __int8 *)(v35 + 16), v37 = *(unsigned __int8 *)(v35 + 17), v36)
        ? (v38 = v37 == 0)
        : (v38 = 0),
          v38))
    {
      AlbumArtistPersistentID = 0;
    }
    else
    {
      v39 = (std::__shared_weak_count *)a2[1];
      v81[0] = *a2;
      v81[1] = v39;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      AlbumArtistPersistentID = ML3ImportSession::_getAlbumArtistPersistentID(a1, v81, v21);
      if (v39)
      {
        v43 = (unint64_t *)&v39->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (*(_DWORD *)(a1 + 32) != 2)
      {
        if (!AlbumArtistPersistentID)
          goto LABEL_83;
        goto LABEL_79;
      }
      if (AlbumArtistPersistentID)
      {
        ++*(_DWORD *)(a1 + 228);
LABEL_79:
        v45 = *a2;
        *(_BYTE *)(v45 + 16) = 1;
        *(_QWORD *)(v45 + 8) = AlbumArtistPersistentID;
        goto LABEL_83;
      }
      ++*(_DWORD *)(a1 + 224);
    }
LABEL_83:
    v46 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = AlbumArtistPersistentID;
      v90 = 2048;
      v91 = (const char *)v34;
      v92 = 2048;
      v93[0] = v33;
      _os_log_impl(&dword_1AC149000, v46, OS_LOG_TYPE_DEFAULT, "importing albumArtistPID=%lld, albumArtistSync=%lld, trackPID=%lld", buf, 0x20u);
    }

    if (*a3)
    {
      v47 = (std::__shared_weak_count *)a3[1];
      v80[0] = *a3;
      v80[1] = (uint64_t)v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = ML3ImportSession::_prepareTrackSortData(a1, v80);
      if (!v47)
        goto LABEL_100;
      v51 = (unint64_t *)&v47->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
    }
    else
    {
      v47 = (std::__shared_weak_count *)a2[1];
      v79[0] = *a2;
      v79[1] = (uint64_t)v47;
      if (v47)
      {
        v53 = (unint64_t *)&v47->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v50 = ML3ImportSession::_prepareAlbumArtistSortData(a1, v79);
      if (!v47)
        goto LABEL_100;
      v55 = (unint64_t *)&v47->__shared_owners_;
      do
        v52 = __ldaxr(v55);
      while (__stlxr(v52 - 1, v55));
    }
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      if ((v50 & 1) != 0)
        goto LABEL_101;
      goto LABEL_127;
    }
LABEL_100:
    if (v50)
    {
LABEL_101:
      v56 = (std::__shared_weak_count *)a2[1];
      v77 = *a2;
      v78 = v56;
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = *a3;
      v60 = (std::__shared_weak_count *)a3[1];
      v76[0] = v59;
      v76[1] = v60;
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      ML3ImportSession::_addAlbumArtist(a1, &v77, v21, v76);
      if (v60)
      {
        v63 = (unint64_t *)&v60->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v65 = v78;
      if (v78)
      {
        v66 = (unint64_t *)&v78->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = *a2;
      v69 = (std::__shared_weak_count *)a2[1];
      v75[0] = v68;
      v75[1] = v69;
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      ML3ImportSession::_addAlbumArtistDataToSourceMaps(a1, v75);
      if (v69)
      {
        v72 = (unint64_t *)&v69->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v26 = 1;
      goto LABEL_128;
    }
LABEL_127:
    v26 = 0;
LABEL_128:
    if (*(_BYTE *)(a1 + 1512))
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>((_QWORD *)(a1 + 808), AlbumArtistPersistentID);
    goto LABEL_130;
  }
  return 0;
}

void sub_1AC34B4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  uint64_t v32;

  if (*(char *)(v32 - 105) < 0)
    operator delete(*(void **)(v32 - 128));

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_prepareTrackSortData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  void *v23;
  void *v24;
  uint64_t v25[3];
  uint64_t (**v26)();
  std::string __p;
  uint64_t (**v28)();
  std::string v29;
  uint64_t (**v30)();
  std::string v31;
  uint64_t (**v32)();
  std::string v33;
  uint64_t (**v34)();
  std::string v35;
  uint64_t (**v36)();
  std::string v37;
  uint64_t (**v38)();
  std::string v39;
  uint64_t (**v40)();
  std::string v41;
  uint64_t (**v42)();
  std::string v43;
  uint64_t (**v44)();
  std::string v45;
  uint64_t (**v46)();
  std::string v47;
  uint64_t (**v48)();
  std::string v49;
  uint64_t (**v50)();
  std::string v51;
  uint64_t (**v52)();
  std::string __s;
  void *v54;
  char *v55;
  _QWORD v56[2];
  char v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  __int128 v72;

  *((_QWORD *)&v72 + 1) = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (!*(_QWORD *)(v4 + 8))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL ML3ImportSession::_prepareTrackSortData(ML3ImportItemRef)");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "handleFailureInFunction:file:lineNumber:description:", v24, CFSTR("ML3ImportSession.mm"), 3285, CFSTR("invalid track pid"));

    v4 = *a2;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v52, v4, 33554433);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v58, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v58 = __s;
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v50, *a2, 167772161);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v59, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  else
    v59 = v51;
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v48, *a2, 167772162);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v60, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v60 = v49;
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v46, *a2, 167772164);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v61, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  else
    v61 = v47;
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v44, *a2, 167772165);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v62, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    v62 = v45;
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v42, *a2, 167772166);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v63, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v63 = v43;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)*a2 + 152))(&v40, *a2, 1);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v64, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  else
    v64 = v41;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)*a2 + 160))(&v38, *a2, 1);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v65, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
  else
    v65 = v39;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a2 + 144))(&v36, *a2, 33554433, 1);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v66, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    v66 = v37;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a2 + 144))(&v34, *a2, 167772161, 1);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v67, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  else
    v67 = v35;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a2 + 144))(&v32, *a2, 167772163, 1);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v68, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    v68 = v33;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a2 + 144))(&v30, *a2, 167772162, 1);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v69, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  else
    v69 = v31;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a2 + 144))(&v28, *a2, 167772164, 1);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v70, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    v70 = v29;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a2 + 144))(&v26, *a2, 167772165, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v71, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v71 = __p;
  v55 = 0;
  v54 = 0;
  v56[0] = 0;
  v56[1] = &v54;
  v57 = 0;
  v54 = operator new(0x150uLL);
  v55 = (char *)v54;
  v56[0] = (char *)v54 + 336;
  v55 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v56, (__int128 *)&v58, &v72, (std::string *)v54);
  v5 = 42;
  do
  {
    if (v58.__r_.__value_.__s.__data_[v5 * 8 - 1] < 0)
      operator delete((void *)v56[v5]);
    v5 -= 3;
  }
  while (v5 * 8);
  v26 = off_1E5B4D010;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v28 = off_1E5B4D010;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v30 = off_1E5B4D010;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  v32 = off_1E5B4D010;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v34 = off_1E5B4D010;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v36 = off_1E5B4D010;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v38 = off_1E5B4D010;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v40 = off_1E5B4D010;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  v42 = off_1E5B4D010;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v44 = off_1E5B4D010;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v46 = off_1E5B4D010;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  v48 = off_1E5B4D010;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  v50 = off_1E5B4D010;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  v52 = off_1E5B4D010;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 117440516);
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lld"), v6);
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&v58, (char *)objc_msgSend(v7, "UTF8String"));
    v8 = v55;
    if ((unint64_t)v55 >= v56[0])
    {
      v10 = 0xAAAAAAAAAAAAAAABLL * ((v55 - (_BYTE *)v54) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v56[0] - (_QWORD)v54) >> 3) > v11)
        v11 = 0x5555555555555556 * ((uint64_t)(v56[0] - (_QWORD)v54) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56[0] - (_QWORD)v54) >> 3) >= 0x555555555555555)
        v12 = 0xAAAAAAAAAAAAAAALL;
      else
        v12 = v11;
      if (v12)
        v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v12);
      else
        v13 = 0;
      v14 = (char *)(v12 + 24 * v10);
      v15 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
      *((_QWORD *)v14 + 2) = *((_QWORD *)&v58.__r_.__value_.__l + 2);
      *(_OWORD *)v14 = v15;
      memset(&v58, 0, sizeof(v58));
      v16 = (__int128 *)(v14 + 24);
      v17 = (__int128 *)v55;
      v18 = (__int128 *)v54;
      if (v55 == v54)
      {
        v54 = v14;
        v55 = v14 + 24;
        v56[0] = v12 + 24 * v13;
      }
      else
      {
        do
        {
          v19 = *(__int128 *)((char *)v17 - 24);
          *((_QWORD *)v14 - 1) = *((_QWORD *)v17 - 1);
          *(_OWORD *)(v14 - 24) = v19;
          v14 -= 24;
          *((_QWORD *)v17 - 2) = 0;
          *((_QWORD *)v17 - 1) = 0;
          *((_QWORD *)v17 - 3) = 0;
          v17 = (__int128 *)((char *)v17 - 24);
        }
        while (v17 != v18);
        v17 = (__int128 *)v54;
        v20 = v55;
        v54 = v14;
        v55 = (char *)v16;
        v56[0] = v12 + 24 * v13;
        while (v20 != (char *)v17)
        {
          if (*(v20 - 1) < 0)
            operator delete(*((void **)v20 - 3));
          v20 -= 24;
        }
      }
      if (v17)
        operator delete(v17);
      v55 = (char *)v16;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
    }
    else
    {
      v9 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
      *((_QWORD *)v55 + 2) = *((_QWORD *)&v58.__r_.__value_.__l + 2);
      *(_OWORD *)v8 = v9;
      memset(&v58, 0, sizeof(v58));
      v55 = v8 + 24;
    }

  }
  memset(v25, 0, sizeof(v25));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v25, (__int128 *)v54, (__int128 *)v55, 0xAAAAAAAAAAAAAAABLL * ((v55 - (_BYTE *)v54) >> 3));
  v21 = ML3ImportSession::_processSortableNames(a1, v25);
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  return v21;
}

void sub_1AC34BE78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_prepareAlbumArtistSortData(uint64_t a1, uint64_t *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t (**v10)();
  std::string __p;
  uint64_t (**v12)();
  std::string v13;
  uint64_t (**v14)();
  std::string v15;
  uint64_t (**v16)();
  std::string v17;
  uint64_t (**v18)();
  __int128 v19;
  uint64_t v20;
  uint64_t (**v21)();
  __int128 v22;
  std::string::size_type v23;
  __int128 *v24;
  __int128 *v25;
  char *v26;
  std::string v27;
  std::string v28;
  __int128 **v29;
  char v30;
  __int128 v31;
  std::string v32;
  uint64_t v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 v39;

  *(_QWORD *)&v39 = *MEMORY[0x1E0C80C00];
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*a2 + 152))(&v31, *a2, 0);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
    *(_QWORD *)&v31 = off_1E5B4D010;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
  }
  else
  {
    v28 = v32;
  }
  ML3CPPBridgeString((const UInt8 *)&v28, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "MLSortString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    std::string::basic_string[abi:ne180100]<0>(&v27, (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
  else
    std::string::basic_string[abi:ne180100]<0>(&v27, "");
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, *a2, 301989889);
  if (SHIBYTE(v23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v31, (const std::string::value_type *)v22, *((std::string::size_type *)&v22 + 1));
  }
  else
  {
    v31 = v22;
    v32.__r_.__value_.__r.__words[0] = v23;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, *a2, 301989890);
  if (SHIBYTE(v20) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v32.__r_.__value_.__r.__words[1], (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
  }
  else
  {
    *(_OWORD *)&v32.__r_.__value_.__r.__words[1] = v19;
    v33 = v20;
  }
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, _QWORD))(*(_QWORD *)*a2 + 152))(&v16, *a2, 0);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v34, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  else
    v34 = v17;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)*a2 + 152))(&v14, *a2, 1);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v35 = v15;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)*a2 + 160))(&v12, *a2, 1);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v36, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  else
    v36 = v13;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, _QWORD))(*(_QWORD *)*a2 + 160))(&v10, *a2, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v37, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v37 = __p;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v38, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  else
    v38 = v27;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v29 = &v24;
  v30 = 0;
  v24 = (__int128 *)operator new(0xA8uLL);
  v25 = v24;
  v26 = (char *)v24 + 168;
  v6 = 0;
  v25 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v26, &v31, &v39, (std::string *)v24);
  do
  {
    if (SHIBYTE(v38.__r_.__value_.__r.__words[v6 + 2]) < 0)
      operator delete(*(void **)((char *)&v38.__r_.__value_.__l.__data_ + v6 * 8));
    v6 -= 3;
  }
  while (v6 != -21);
  v10 = off_1E5B4D010;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = off_1E5B4D010;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = off_1E5B4D010;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v16 = off_1E5B4D010;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v18 = off_1E5B4D010;
  if (SHIBYTE(v20) < 0)
    operator delete((void *)v19);
  v21 = off_1E5B4D010;
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
  memset(v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v9, v24, v25, 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v24) >> 3));
  v7 = ML3ImportSession::_processSortableNames(a1, v9);
  *(_QWORD *)&v31 = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  *(_QWORD *)&v31 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);

  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1AC34C5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *v72;
  uint64_t v73;
  uint64_t v74;

  if (a25 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a41 < 0)
    operator delete(a36);
  if (a49 < 0)
    operator delete(a44);
  if (a57 < 0)
    operator delete(a52);
  for (; v73 != v74 - 224; v73 -= 24)
  {
    if (*(char *)(v73 - 1) < 0)
      operator delete(*(void **)(v73 - 24));
  }
  if (a66 < 0)
    operator delete(a61);

  if (a72 < 0)
    operator delete(a67);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_addAlbumArtist(uint64_t a1, _QWORD *a2, void *a3, _QWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  std::string *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  int shouldPreserveTrackProperty;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  const void *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  std::string::size_type v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  unint64_t v49;
  uint64_t v50;
  std::string::__raw *v51;
  std::string::__raw *v52;
  uint64_t v53;
  _QWORD *v54;
  const std::string *v55;
  const std::string *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::string::size_type size;
  const void **v70;
  std::string *v71;
  int v72;
  std::string::size_type v73;
  NSObject *v74;
  _QWORD *v75;
  std::string *v76;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  NSObject *v99;
  _BYTE *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  NSObject *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  std::string::size_type v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::string::size_type v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  int v138;
  _QWORD *v139;
  unsigned __int8 *v140;
  int8x8_t v141;
  unint64_t v142;
  uint8x8_t v143;
  NSObject *v144;
  NSObject *v145;
  _BYTE *v146;
  std::string *v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  NSObject *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  BOOL v163;
  NSObject *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  uint64_t v169;
  std::string::size_type v170;
  std::string::size_type v171;
  const void **p_data;
  std::string *v173;
  NSObject *v174;
  std::string::__raw *v175;
  std::string *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  char v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t PropertyIndex;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t i;
  void *v195;
  void *v196;
  std::string::size_type v197;
  std::string::size_type v198;
  const void **v199;
  std::string::size_type v200;
  std::string::size_type v201;
  std::string::size_type v202;
  char v203;
  std::string::size_type v204;
  std::string::size_type v205;
  std::string *v206;
  const std::string *v207;
  uint64_t v208;
  int v209;
  std::string::size_type v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v222;
  _QWORD *v223;
  NSObject *v224;
  std::string::__raw *v225;
  std::string *v226;
  _QWORD *v227;
  int v228;
  NSObject *v229;
  int v230;
  int v231;
  int v232;
  int v233;
  BOOL v234;
  NSObject *v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  NSObject *v240;
  uint64_t v241;
  uint64_t *v242;
  int v243;
  std::string::size_type v244;
  std::string::size_type v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  int v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t *v275;
  uint64_t *v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  unsigned int v281;
  int v282;
  id v283;
  id v284;
  unint64_t v285;
  uint64_t v287;
  std::__shared_weak_count *v288;
  __int128 v289;
  uint64_t v290;
  std::__shared_weak_count *v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  _QWORD v294[2];
  std::string v295;
  unint64_t v296;
  _QWORD *v297;
  std::__shared_weak_count *v298;
  std::string v299;
  BOOL v300;
  uint64_t v301;
  std::__shared_weak_count *v302;
  _QWORD v303[16];
  std::__shared_weak_count *v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  uint64_t v307;
  unint64_t v308;
  int v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  _QWORD v312[2];
  uint64_t v313;
  void **v314;
  uint64_t v315;
  uint64_t (*v316)(uint64_t, uint64_t);
  void (*v317)(uint64_t);
  id v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  BOOL v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  const std::string *v340;
  uint64_t v341;
  __n128 (*v342)(__n128 *, __n128 *);
  void (*v343)(uint64_t);
  uint64_t v344;
  std::string __p;
  uint64_t v346;
  const std::string *v347;
  uint64_t v348;
  __n128 (*v349)(__n128 *, __n128 *);
  void (*v350)(uint64_t);
  uint64_t v351;
  std::string v352;
  uint64_t v353;
  uint64_t *v354;
  uint64_t v355;
  __n128 (*v356)(__n128 *, __n128 *);
  void (*v357)(uint64_t);
  uint64_t v358;
  std::string v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  __n128 (*v363)(__n128 *, __n128 *);
  uint64_t (*v364)(uint64_t);
  const char *v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  std::string v368;
  std::string v369;
  _BYTE buf[62];
  __int16 v371;
  _QWORD *v372;
  __int16 v373;
  uint64_t v374;
  __int16 v375;
  uint64_t v376;
  void *v377;
  void *v378;
  std::string v379;
  void *v380;
  uint8_t *v381;
  unint64_t v382;
  uint8_t v383[24];
  _BYTE *v384;
  uint64_t v385;

  v385 = *MEMORY[0x1E0C80C00];
  v284 = a3;
  v6 = (_QWORD *)*a4;
  if (*a4)
  {
    v285 = v6[1];
    v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v6 + 32))(v6, 16777217);
    v281 = (MLMediaTypeByStandardizingMediaType(v7) >> 10) & 1;
  }
  else
  {
    v285 = 0;
    v281 = 0;
  }
  v8 = *a2;
  v360 = 0;
  v361 = &v360;
  v362 = 0x4012000000;
  v363 = __Block_byref_object_copy__337;
  v364 = __Block_byref_object_dispose__338;
  v367 = 0;
  v365 = "";
  v366 = 0;
  v353 = 0;
  v354 = &v353;
  v355 = 0x4812000000;
  v356 = __Block_byref_object_copy__214;
  v357 = __Block_byref_object_dispose__215;
  v358 = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(buf, v8, 301989899);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v359, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v359 = *(std::string *)&buf[16];
  }
  v346 = 0;
  v347 = (const std::string *)&v346;
  v348 = 0x4812000000;
  v349 = __Block_byref_object_copy__214;
  v350 = __Block_byref_object_dispose__215;
  v351 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a2 + 152))(buf, *a2, 0);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v352, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v352 = *(std::string *)&buf[16];
  }
  v339 = 0;
  v340 = (const std::string *)&v339;
  v341 = 0x4812000000;
  v342 = __Block_byref_object_copy__214;
  v343 = __Block_byref_object_dispose__215;
  v344 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a2 + 160))(buf, *a2, 0);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    __p = *(std::string *)&buf[16];
  }
  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 167772177);
  v335 = 0;
  v336 = &v335;
  v337 = 0x2020000000;
  v338 = 0;
  v338 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 301989898);
  v331 = 0;
  v332 = &v331;
  v333 = 0x2020000000;
  v334 = 0;
  v334 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 301989904);
  v327 = 0;
  v328 = &v327;
  v329 = 0x2020000000;
  v330 = 0;
  v330 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 301989893);
  v323 = 0;
  v324 = &v323;
  v325 = 0x2020000000;
  v326 = 0;
  v326 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 301989901) != 0;
  v319 = 0;
  v320 = &v319;
  v321 = 0x2020000000;
  v322 = 0;
  v322 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 301989903);
  if (v9 && v336[3])
  {
    *(_BYTE *)(a1 + 1521) = 1;
    v10 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a2 + 88))(&v379);
      v11 = (v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v379
          : (std::string *)v379.__r_.__value_.__r.__words[0];
      v12 = v336[3];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v12;
      _os_log_impl(&dword_1AC149000, v10, OS_LOG_TYPE_ERROR, "Artist Import Item=%{public}s has syncID=%lld and legacySyncID=%lld", buf, 0x20u);
      if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v379.__r_.__value_.__l.__data_);
    }

  }
  v313 = 0;
  v314 = (void **)&v313;
  v315 = 0x3032000000;
  v316 = __Block_byref_object_copy__212;
  v317 = __Block_byref_object_dispose__213;
  v283 = v284;
  v318 = v283;
  if (*a4)
  {
    v13 = *(void **)(a1 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v285);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v378 = v14;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v378, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "executeQuery:withParameters:", CFSTR("SELECT album_artist_pid FROM item WHERE ROWID = ?"), v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = objc_msgSend(v16, "int64ValueForFirstRowAndColumn");
    if (*(_BYTE *)(*a4 + 16))
    {
      v18 = v17;
      v19 = (std::__shared_weak_count *)a4[1];
      v312[0] = *a4;
      v312[1] = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(a1, (uint64_t)v312, 0x100000Cu);
      if (v19)
      {
        v23 = (unint64_t *)&v19->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v18)
        v25 = 0;
      else
        v25 = shouldPreserveTrackProperty;
      if (v25 == 1)
      {
        v26 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1AC149000, v26, OS_LOG_TYPE_DEFAULT, "Not updating/creating album artist as pid=0 AND persistentID is preserved by a higher source", buf, 2u);
        }

        ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)&v310);
        v27 = v311;
        ML3ImportSession::_setAlbumArtistInfoForTrackPersistentID(a1, v285, v310, (uint64_t)v311);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }

        goto LABEL_491;
      }
      if (!*(_BYTE *)(*a4 + 17))
      {
        v77 = *a2;
        *(_QWORD *)(v77 + 8) = v18;
        *(_BYTE *)(v77 + 16) = 1;
        v78 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
        {
          v79 = *(_QWORD *)(*a4 + 8);
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v18;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v79;
          _os_log_impl(&dword_1AC149000, v78, OS_LOG_TYPE_DEFAULT, "Setting albumArtistPID=%lld for trackPID=%lld", buf, 0x16u);
        }

        if (v18)
        {
          v80 = *(void **)(a1 + 16);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v18);
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          v377 = v81;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v377, 1);
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v80, "executeQuery:withParameters:", CFSTR("SELECT album_artist, sort_album_artist, representative_item_pid, store_id, grouping_key, sync_id, classical_experience_available, cloud_universal_library_id, liked_state, liked_state_changed_date FROM album_artist WHERE album_artist_pid=?"), v82);
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          v84 = v83;
          v303[0] = MEMORY[0x1E0C809B0];
          v303[1] = 3321888768;
          v303[2] = ___ZN16ML3ImportSession15_addAlbumArtistENSt3__110shared_ptrI13ML3ImportItemEEP6NSDataS3__block_invoke;
          v303[3] = &unk_1E5B525D0;
          v85 = *a2;
          v86 = (std::__shared_weak_count *)a2[1];
          v303[14] = a1;
          v303[15] = v85;
          v304 = v86;
          if (v86)
          {
            v87 = (unint64_t *)&v86->__shared_owners_;
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
          v303[4] = &v346;
          v303[5] = &v339;
          v303[6] = &v353;
          v303[7] = &v331;
          v303[8] = &v319;
          v303[9] = &v323;
          v303[10] = &v327;
          v303[11] = &v335;
          v309 = 16777228;
          v90 = *a4;
          v89 = (std::__shared_weak_count *)a4[1];
          v303[12] = &v313;
          v305 = v90;
          v306 = v89;
          if (v89)
          {
            v91 = (unint64_t *)&v89->__shared_owners_;
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          v303[13] = &v360;
          v307 = v18;
          v308 = v285;
          objc_msgSend(v83, "enumerateRowsWithBlock:", v303);

          v93 = v306;
          if (v306)
          {
            v94 = (unint64_t *)&v306->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          v96 = v304;
          if (v304)
          {
            v97 = (unint64_t *)&v304->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
        }
        else
        {
          v144 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v285;
            _os_log_impl(&dword_1AC149000, v144, OS_LOG_TYPE_ERROR, "No existing albumArtist PID for trackPersistentID=%lld", buf, 0xCu);
          }

        }
      }
    }

  }
  if (!v361[6] && !(objc_msgSend(v314[5], "length") | v9) && !*(_QWORD *)(*a2 + 8))
  {
    if (*((char *)v354 + 71) < 0)
    {
      if (v354[7])
        goto LABEL_52;
    }
    else if (*((_BYTE *)v354 + 71))
    {
      goto LABEL_52;
    }
    v145 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
    {
      v146 = buf;
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(buf);
      if (buf[23] < 0)
        v146 = *(_BYTE **)buf;
      if (*a4)
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a4 + 88))(&v379);
        if ((v379.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v147 = &v379;
        else
          v147 = (std::string *)v379.__r_.__value_.__r.__words[0];
        *(_DWORD *)v383 = 136446466;
        *(_QWORD *)&v383[4] = v146;
        *(_WORD *)&v383[12] = 2082;
        *(_QWORD *)&v383[14] = v147;
        _os_log_impl(&dword_1AC149000, v145, OS_LOG_TYPE_ERROR, "Album artist=%{public}s has an empty grouping key and no valid identifiers. Creating a default album artist import item for track=%{public}s", v383, 0x16u);
        if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v379.__r_.__value_.__l.__data_);
      }
      else
      {
        *(_DWORD *)v383 = 136446466;
        *(_QWORD *)&v383[4] = v146;
        *(_WORD *)&v383[12] = 2082;
        *(_QWORD *)&v383[14] = "<empty>";
        _os_log_impl(&dword_1AC149000, v145, OS_LOG_TYPE_ERROR, "Album artist=%{public}s has an empty grouping key and no valid identifiers. Creating a default album artist import item for track=%{public}s", v383, 0x16u);
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }

    ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)&v301);
    v101 = v302;
    ML3ImportSession::_setAlbumArtistInfoForTrackPersistentID(a1, v285, v301, (uint64_t)v302);
    if (!v101)
      goto LABEL_491;
    v275 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldaxr(v275);
    while (__stlxr(v103 - 1, v275));
LABEL_489:
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
    goto LABEL_491;
  }
LABEL_52:
  v300 = 0;
  v30 = v314[5];
  if (*((char *)v354 + 71) < 0)
    std::string::__init_copy_ctor_external(&v299, (const std::string::value_type *)v354[6], v354[7]);
  else
    v299 = *(std::string *)((_BYTE *)v354 + 2);
  ML3ImportSession::_getAlbumArtistImportItemForGroupingIdentifierAndPIDs(buf, a1, v30, (uint64_t)&v299, *(_QWORD *)(*a2 + 8), v9, &v300);
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v361 + 6), (__int128 *)buf);
  v31 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v32 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v299.__r_.__value_.__l.__data_);
  v34 = v361;
  v35 = (const void *)v361[6];
  if (v35)
    goto LABEL_63;
  if (*(_QWORD *)(*a2 + 8))
  {
    v41 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(buf);
      v42 = *(_QWORD *)(*a2 + 8);
      v43 = *(_BYTE **)buf;
      if (buf[23] >= 0)
        v43 = buf;
      LODWORD(v379.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v379.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
      WORD2(v379.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v379.__r_.__value_.__r.__words[1] + 6) = v42;
      _os_log_impl(&dword_1AC149000, v41, OS_LOG_TYPE_ERROR, "Import item %{public}s has valid PID=%lld, but cannot be located in the database", (uint8_t *)&v379, 0x16u);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }

    v34 = v361;
    v35 = (const void *)v361[6];
    if (v35)
    {
LABEL_63:
      v37 = v36;
      if (v36)
      {
        v38 = (std::__shared_weak_count *)v34[7];
        v297 = v36;
        v298 = v38;
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
      }
      else
      {
        v297 = 0;
        v298 = 0;
      }
      v64 = v36[1];
      v296 = v64;
      if (!v300)
        v300 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 2040), v64) != 0;
      v65 = *a2;
      *(_QWORD *)(v65 + 8) = v64;
      *(_BYTE *)(v65 + 16) = 1;
      (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(*v37 + 24))(buf, v37, 301989899);
      if ((buf[39] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(&v369, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
        *(_QWORD *)buf = off_1E5B4D010;
        if ((buf[39] & 0x80000000) != 0)
          operator delete(*(void **)&buf[16]);
      }
      else
      {
        v369 = *(std::string *)&buf[16];
      }
      if (MSVDeviceIsWatch() && *(_DWORD *)(a1 + 32) == 1)
      {
        v66 = *((unsigned __int8 *)v354 + 71);
        v67 = v354[7];
        if ((v66 & 0x80u) == 0)
          v68 = *((unsigned __int8 *)v354 + 71);
        else
          v68 = v354[7];
        size = HIBYTE(v369.__r_.__value_.__r.__words[2]);
        if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v369.__r_.__value_.__l.__size_;
        if (v68 == size)
        {
          v70 = (const void **)(v354 + 6);
          if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &v369;
          else
            v71 = (std::string *)v369.__r_.__value_.__r.__words[0];
          if ((v66 & 0x80) == 0)
          {
            if (*((_BYTE *)v354 + 71))
            {
              while (*(unsigned __int8 *)v70 == v71->__r_.__value_.__s.__data_[0])
              {
                v72 = 0;
                v70 = (const void **)((char *)v70 + 1);
                v71 = (std::string *)((char *)v71 + 1);
                if (!--v66)
                  goto LABEL_289;
              }
              goto LABEL_240;
            }
            goto LABEL_121;
          }
          v138 = memcmp(*v70, v71, v354[7]);
          v68 = v67;
          if (!v138)
            goto LABEL_121;
        }
LABEL_240:
        if (!v68)
        {
          v139 = (_QWORD *)(a1 + 1288);
          v140 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a1 + 1288), (unsigned __int8 *)&v369);
          if (v140)
          {
            v141 = *(int8x8_t *)(a1 + 1296);
            v142 = *((_QWORD *)v140 + 1);
            v143 = (uint8x8_t)vcnt_s8(v141);
            v143.i16[0] = vaddlv_u8(v143);
            if (v143.u32[0] > 1uLL)
            {
              if (v142 >= *(_QWORD *)&v141)
                v142 %= *(_QWORD *)&v141;
            }
            else
            {
              v142 &= *(_QWORD *)&v141 - 1;
            }
            v148 = *(unsigned __int8 **)(*v139 + 8 * v142);
            do
            {
              v149 = v148;
              v148 = *(unsigned __int8 **)v148;
            }
            while (v148 != v140);
            if (v149 == (unsigned __int8 *)(a1 + 1304))
              goto LABEL_272;
            v150 = *((_QWORD *)v149 + 1);
            if (v143.u32[0] > 1uLL)
            {
              if (v150 >= *(_QWORD *)&v141)
                v150 %= *(_QWORD *)&v141;
            }
            else
            {
              v150 &= *(_QWORD *)&v141 - 1;
            }
            if (v150 != v142)
            {
LABEL_272:
              if (!*(_QWORD *)v140)
                goto LABEL_273;
              v151 = *(_QWORD *)(*(_QWORD *)v140 + 8);
              if (v143.u32[0] > 1uLL)
              {
                if (v151 >= *(_QWORD *)&v141)
                  v151 %= *(_QWORD *)&v141;
              }
              else
              {
                v151 &= *(_QWORD *)&v141 - 1;
              }
              if (v151 != v142)
LABEL_273:
                *(_QWORD *)(*v139 + 8 * v142) = 0;
            }
            v152 = *(_QWORD *)v140;
            if (*(_QWORD *)v140)
            {
              v153 = *(_QWORD *)(v152 + 8);
              if (v143.u32[0] > 1uLL)
              {
                if (v153 >= *(_QWORD *)&v141)
                  v153 %= *(_QWORD *)&v141;
              }
              else
              {
                v153 &= *(_QWORD *)&v141 - 1;
              }
              if (v153 != v142)
              {
                *(_QWORD *)(*v139 + 8 * v153) = v149;
                v152 = *(_QWORD *)v140;
              }
            }
            *(_QWORD *)v149 = v152;
            *(_QWORD *)v140 = 0;
            --*(_QWORD *)(a1 + 1312);
            *(_QWORD *)buf = v140;
            *(_QWORD *)&buf[8] = a1 + 1304;
            buf[16] = 1;
            std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
          }
        }
        v74 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (!os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          goto LABEL_288;
        v75 = v354 + 6;
        if (*((char *)v354 + 71) < 0)
          v75 = (_QWORD *)*v75;
        v76 = &v369;
        if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v76 = (std::string *)v369.__r_.__value_.__r.__words[0];
        goto LABEL_287;
      }
      if (*((char *)v354 + 71) < 0)
      {
        if (!v354[7])
          goto LABEL_121;
      }
      else if (!*((_BYTE *)v354 + 71))
      {
        goto LABEL_121;
      }
      v73 = HIBYTE(v369.__r_.__value_.__r.__words[2]);
      if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v73 = v369.__r_.__value_.__l.__size_;
      if (!v73)
      {
        v74 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (!os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
LABEL_288:

          std::string::operator=((std::string *)(v37[8] + 152), (const std::string *)v354 + 2);
          v72 = 1;
LABEL_289:
          v154 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v37 + 32))(v37, 301989893);
          v155 = v154;
          v156 = v328[3];
          if (v156)
            v157 = v156 == v154;
          else
            v157 = 1;
          v282 = v72;
          if (!v157)
          {
            v158 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
            {
              v159 = v328[3];
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = v159;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v155;
              _os_log_impl(&dword_1AC149000, v158, OS_LOG_TYPE_DEFAULT, "Setting albumArtistStoreID=%lld (oldValue = %lld)", buf, 0x16u);
            }

            *(_QWORD *)(v37[8] + 104) = v328[3];
            v72 = 1;
          }
          v160 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v37 + 32))(v37, 301989898);
          v161 = v160;
          v162 = v336[3];
          if (v162)
            v163 = v162 == v160;
          else
            v163 = 1;
          if (!v163)
          {
            v164 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
            {
              v165 = v336[3];
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = v165;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v161;
              _os_log_impl(&dword_1AC149000, v164, OS_LOG_TYPE_DEFAULT, "Setting albumArtistSyncID=%lld (oldValue = %lld) using property MLImportPropertyKeyAlbumArtistSyncID", buf, 0x16u);
            }

            *(_QWORD *)(v37[8] + 144) = v336[3];
            v72 = 1;
          }
          v166 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v37 + 32))(v37, 167772177);
          if (v9)
          {
            v167 = v166;
            if (v9 != v166)
            {
              v168 = os_log_create("com.apple.amp.medialibrary", "Import");
              if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134218240;
                *(_QWORD *)&buf[4] = v9;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v167;
                _os_log_impl(&dword_1AC149000, v168, OS_LOG_TYPE_DEFAULT, "Setting albumArtistSyncID=%lld (oldValue = %lld) using property MLImportPropertyKeyAlbumArtistSyncId", buf, 0x16u);
              }

              *(_QWORD *)(v37[8] + 144) = v9;
              v72 = 1;
            }
          }
          (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(*v37 + 24))(buf, v37, 301989889);
          if ((buf[39] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(&v368, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
            *(_QWORD *)buf = off_1E5B4D010;
            if ((buf[39] & 0x80000000) != 0)
              operator delete(*(void **)&buf[16]);
          }
          else
          {
            v368 = *(std::string *)&buf[16];
          }
          v169 = HIBYTE(v347[2].__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v347[2].__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v347[2].__r_.__value_.__l.__size_)
              goto LABEL_338;
          }
          else if (!*((_BYTE *)&v347[2].__r_.__value_.__s + 23))
          {
            goto LABEL_338;
          }
          if ((v169 & 0x80u) == 0)
            v170 = HIBYTE(v347[2].__r_.__value_.__r.__words[2]);
          else
            v170 = v347[2].__r_.__value_.__l.__size_;
          v171 = HIBYTE(v368.__r_.__value_.__r.__words[2]);
          if ((v368.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v171 = v368.__r_.__value_.__l.__size_;
          if (v170 == v171)
          {
            p_data = (const void **)&v347[2].__r_.__value_.__l.__data_;
            if ((v368.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v173 = &v368;
            else
              v173 = (std::string *)v368.__r_.__value_.__r.__words[0];
            if ((v169 & 0x80) != 0)
            {
              if (!memcmp(*p_data, v173, v347[2].__r_.__value_.__l.__size_))
                goto LABEL_338;
            }
            else
            {
              if (!*((_BYTE *)&v347[2].__r_.__value_.__s + 23))
                goto LABEL_338;
              while (*(unsigned __int8 *)p_data == v173->__r_.__value_.__s.__data_[0])
              {
                p_data = (const void **)((char *)p_data + 1);
                v173 = (std::string *)((char *)v173 + 1);
                if (!--v169)
                  goto LABEL_338;
              }
            }
          }
          v174 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
          {
            v175 = (std::string::__raw *)&v347[2];
            if (SHIBYTE(v347[2].__r_.__value_.__r.__words[2]) < 0)
              v175 = (std::string::__raw *)v175->__words[0];
            v176 = &v368;
            if ((v368.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v176 = (std::string *)v368.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v175;
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v176;
            _os_log_impl(&dword_1AC149000, v174, OS_LOG_TYPE_DEFAULT, "Setting albumArtistName=%{public}s (oldValue = %{public}s)", buf, 0x16u);
          }

          std::string::operator=((std::string *)(v37[8] + 8), v347 + 2);
          v72 = 1;
LABEL_338:
          (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(*v37 + 24))(buf, v37, 301989890);
          if ((buf[39] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(&v295, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
            *(_QWORD *)buf = off_1E5B4D010;
            if ((buf[39] & 0x80000000) != 0)
              operator delete(*(void **)&buf[16]);
          }
          else
          {
            v295 = *(std::string *)&buf[16];
          }
          if (*a2 && !*a4)
          {
            v186 = *(int *)(a1 + 32);
            PropertyIndex = ML3TrackRulesGetPropertyIndex(18, 301989890);
            if (_ML3InitializeTrackRulesIfNeeded___once != -1)
              dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
            v188 = *(_DWORD *)(__albumArtistRules + 56 * PropertyIndex + 4 * v186);
            memset(buf, 0, 56);
            *(_QWORD *)v383 = 0;
            *(_QWORD *)&v383[8] = v383;
            *(_QWORD *)&v383[16] = 0x2020000000;
            v384 = buf;
            v189 = ML3TrackRulesGetPropertyIndex(18, 301989890);
            v280 = v188;
            v190 = *(unsigned int *)(a1 + 32);
            if ((int)v190 >= 1)
            {
              v183 = 0;
              v191 = _ML3InitializeTrackRulesIfNeeded___once;
              v192 = (int)v190 - 1;
              v193 = 56 * v189;
              for (i = v190 + 1; i > 1; --i)
              {
                if (v191 != -1)
                  dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
                if (*(_DWORD *)(__albumArtistRules + v193 + 4 * v192) == 1)
                {
                  if ((v183 & 1) != 0)
                  {
                    v191 = -1;
                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT cloud_universal_library_id, sync_id, store_id FROM album_artist WHERE album_artist_pid = %lld"), v64);
                    v195 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(*(id *)(a1 + 64), "executeQuery:", v195);
                    v196 = (void *)objc_claimAutoreleasedReturnValue();
                    v379.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
                    v379.__r_.__value_.__l.__size_ = 3221225472;
                    v379.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN16ML3ImportSession34_shouldPreserveAlbumArtistPropertyExj_block_invoke;
                    v380 = &unk_1E5B65228;
                    v381 = v383;
                    v382 = v64;
                    objc_msgSend(v196, "enumerateRowsWithBlock:", &v379);

                    v191 = _ML3InitializeTrackRulesIfNeeded___once;
                  }
                  v183 = 1;
                  if (*(_QWORD *)&buf[8 * v192])
                    goto LABEL_370;
                }
                else
                {
                  v191 = -1;
                }
                --v192;
              }
            }
            v183 = 0;
LABEL_370:
            _Block_object_dispose(v383, 8);
            if (v280 == -1)
            {
LABEL_417:
              v227 = v297;
              v228 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v297 + 32))(v297, 301989901) != 0;
              if (*((unsigned __int8 *)v324 + 24) != v228)
              {
                v229 = os_log_create("com.apple.amp.medialibrary", "Import");
                if (os_log_type_enabled(v229, OS_LOG_TYPE_DEFAULT))
                {
                  v230 = *((unsigned __int8 *)v324 + 24);
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&buf[4] = v230;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v228;
                  _os_log_impl(&dword_1AC149000, v229, OS_LOG_TYPE_DEFAULT, "Setting albumArtistClassicalExperienceAvailable=%{BOOL}u (oldValue=%{BOOL}u)", buf, 0xEu);
                }

                *(_BYTE *)(v227[8] + 176) = *((_BYTE *)v324 + 24);
                v72 = 1;
              }
              v231 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v227 + 32))(v227, 301989903);
              v232 = v231;
              v233 = *((_DWORD *)v320 + 6);
              if (v233)
                v234 = v233 == v231;
              else
                v234 = 1;
              if (!v234)
              {
                v235 = os_log_create("com.apple.amp.medialibrary", "Import");
                if (os_log_type_enabled(v235, OS_LOG_TYPE_DEFAULT))
                {
                  v236 = *((_DWORD *)v320 + 6);
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&buf[4] = v236;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v232;
                  _os_log_impl(&dword_1AC149000, v235, OS_LOG_TYPE_DEFAULT, "Setting albumArtistLikedState=%d (oldValue=%d)", buf, 0xEu);
                }

                *(_DWORD *)(v227[8] + 180) = *((_DWORD *)v320 + 6);
                v72 = 1;
              }
              v237 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v227 + 32))(v227, 301989904);
              v238 = v332[3];
              if (v238)
              {
                v239 = v237;
                if (v238 != v237)
                {
                  v240 = os_log_create("com.apple.amp.medialibrary", "Import");
                  if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
                  {
                    v241 = v332[3];
                    *(_DWORD *)buf = 134218240;
                    *(_QWORD *)&buf[4] = v241;
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v239;
                    _os_log_impl(&dword_1AC149000, v240, OS_LOG_TYPE_DEFAULT, "Setting albumArtistLikedStateChangedDate=%lld (oldValue=%lld)", buf, 0x16u);
                  }

                  *(_QWORD *)(v227[8] + 184) = v332[3];
                  v72 = 1;
                }
              }
              if (v282)
              {
                v242 = v354;
                v243 = *((char *)v354 + 71);
                if (v243 < 0)
                {
                  if (!v354[7])
                    goto LABEL_460;
                }
                else if (!*((_BYTE *)v354 + 71))
                {
                  goto LABEL_460;
                }
                v245 = v227[8];
                v244 = v227[9];
                v379.__r_.__value_.__r.__words[0] = v245;
                v379.__r_.__value_.__l.__size_ = v244;
                if (v244)
                {
                  v246 = (unint64_t *)(v244 + 8);
                  do
                    v247 = __ldxr(v246);
                  while (__stxr(v247 + 1, v246));
                  LOBYTE(v243) = *((_BYTE *)v242 + 71);
                }
                if ((v243 & 0x80) != 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v242[6], v242[7]);
                }
                else
                {
                  *(_OWORD *)buf = *((_OWORD *)v242 + 3);
                  *(_QWORD *)&buf[16] = v242[8];
                }
                *(_QWORD *)&buf[24] = v245;
                *(_QWORD *)&buf[32] = v244;
                if (v244)
                {
                  v248 = (unint64_t *)(v244 + 8);
                  do
                    v249 = __ldxr(v248);
                  while (__stxr(v249 + 1, v248));
                }
                std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(a1 + 1288, buf, (uint64_t)buf);
                v250 = *(std::__shared_weak_count **)&buf[32];
                if (*(_QWORD *)&buf[32])
                {
                  v251 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
                  do
                    v252 = __ldaxr(v251);
                  while (__stlxr(v252 - 1, v251));
                  if (!v252)
                  {
                    ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                    std::__shared_weak_count::__release_weak(v250);
                  }
                }
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
                v253 = (std::__shared_weak_count *)v379.__r_.__value_.__l.__size_;
                if (v379.__r_.__value_.__l.__size_)
                {
                  v254 = (unint64_t *)(v379.__r_.__value_.__l.__size_ + 8);
                  do
                    v255 = __ldaxr(v254);
                  while (__stlxr(v255 - 1, v254));
                  if (!v255)
                  {
                    ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                    std::__shared_weak_count::__release_weak(v253);
                  }
                }
              }
LABEL_460:
              if (v300)
                v256 = 0;
              else
                v256 = v72;
              if (v256 == 1)
              {
                v257 = v296;
                v259 = v361[6];
                v258 = v361[7];
                *(_QWORD *)buf = v296;
                *(_QWORD *)&buf[8] = v259;
                *(_QWORD *)&buf[16] = v258;
                if (v258)
                {
                  v260 = (unint64_t *)(v258 + 8);
                  do
                    v261 = __ldxr(v260);
                  while (__stxr(v261 + 1, v260));
                }
                std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>(a1 + 2040, v257, (uint64_t)buf);
                v262 = *(std::__shared_weak_count **)&buf[16];
                if (*(_QWORD *)&buf[16])
                {
                  v263 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
                  do
                    v264 = __ldaxr(v263);
                  while (__stlxr(v264 - 1, v263));
                  if (!v264)
                  {
                    ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                    std::__shared_weak_count::__release_weak(v262);
                  }
                }
              }
              v265 = v297[8];
              v266 = (std::__shared_weak_count *)v297[9];
              v292 = v265;
              v293 = v266;
              if (v266)
              {
                v267 = (unint64_t *)&v266->__shared_owners_;
                do
                  v268 = __ldxr(v267);
                while (__stxr(v268 + 1, v267));
              }
              ML3ImportSession::_setAlbumArtistInfoForTrackPersistentID(a1, v285, v265, (uint64_t)v266);
              if (v266)
              {
                v269 = (unint64_t *)&v266->__shared_owners_;
                do
                  v270 = __ldaxr(v269);
                while (__stlxr(v270 - 1, v269));
                if (!v270)
                {
                  ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                  std::__shared_weak_count::__release_weak(v266);
                }
              }
              if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v295.__r_.__value_.__l.__data_);
              if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v368.__r_.__value_.__l.__data_);
              if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v369.__r_.__value_.__l.__data_);
              v101 = v298;
              if (v298)
              {
                v271 = (unint64_t *)&v298->__shared_owners_;
                do
                  v103 = __ldaxr(v271);
                while (__stlxr(v103 - 1, v271));
                goto LABEL_489;
              }
              goto LABEL_491;
            }
          }
          else
          {
            v177 = *(int *)(a1 + 32);
            v178 = ML3TrackRulesGetPropertyIndex(10, 167772169);
            if (_ML3InitializeTrackRulesIfNeeded___once != -1)
              dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
            v179 = *(_DWORD *)(__specialRules + 56 * v178 + 4 * v177);
            v180 = (std::__shared_weak_count *)a4[1];
            v294[0] = *a4;
            v294[1] = v180;
            if (v180)
            {
              v181 = (unint64_t *)&v180->__shared_owners_;
              do
                v182 = __ldxr(v181);
              while (__stxr(v182 + 1, v181));
            }
            v183 = ML3ImportSession::_shouldPreserveTrackProperty(a1, (uint64_t)v294, 0xA000009u);
            if (v180)
            {
              v184 = (unint64_t *)&v180->__shared_owners_;
              do
                v185 = __ldaxr(v184);
              while (__stlxr(v185 - 1, v184));
              if (!v185)
              {
                ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                std::__shared_weak_count::__release_weak(v180);
              }
            }
            if (v179 == -1)
              goto LABEL_417;
          }
          v197 = HIBYTE(v340[2].__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v340[2].__r_.__value_.__r.__words[2]) < 0)
            v198 = v340[2].__r_.__value_.__l.__size_;
          else
            v198 = HIBYTE(v340[2].__r_.__value_.__r.__words[2]);
          v199 = (const void **)&v340[2].__r_.__value_.__l.__data_;
          if (v198)
          {
            v200 = v340[2].__r_.__value_.__l.__size_;
            if ((v197 & 0x80u) == 0)
              v201 = HIBYTE(v340[2].__r_.__value_.__r.__words[2]);
            else
              v201 = v340[2].__r_.__value_.__l.__size_;
            v202 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
            v203 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
            v204 = v295.__r_.__value_.__l.__size_;
            if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v205 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
            else
              v205 = v295.__r_.__value_.__l.__size_;
            if (v201 != v205)
              goto LABEL_393;
            if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v206 = &v295;
            else
              v206 = (std::string *)v295.__r_.__value_.__r.__words[0];
            if ((v197 & 0x80) == 0)
            {
              if (*((_BYTE *)&v340[2].__r_.__value_.__s + 23))
              {
                v207 = v340 + 2;
                v208 = HIBYTE(v340[2].__r_.__value_.__r.__words[2]);
                while (v207->__r_.__value_.__s.__data_[0] == v206->__r_.__value_.__s.__data_[0])
                {
                  v207 = (const std::string *)((char *)v207 + 1);
                  v206 = (std::string *)((char *)v206 + 1);
                  if (!--v208)
                    goto LABEL_390;
                }
LABEL_393:
                if ((v183 & 1) != 0)
                  goto LABEL_417;
LABEL_404:
                v212 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a1, (uint64_t)v199, (uint64_t)&v347[2]);
                v214 = v213;
                v215 = v297;
                std::string::operator=((std::string *)(v297[8] + 32), v340 + 2);
                v216 = v215[8];
                *(_QWORD *)(v216 + 112) = v212;
                *(_QWORD *)(v216 + 120) = v214;
                v217 = v296;
                v218 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 1960), v296);
                if (v218)
                {
                  v219 = (_QWORD *)v218[3];
                  v220 = v218[4];
                  if (v220 != v214 || v219 != (_QWORD *)v212)
                  {
                    v222 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 2000, v217, (uint64_t *)&v296);
                    v222[3] = v212;
                    v222[4] = v214;
                    v223 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 1960, v217, (uint64_t *)&v296);
                    v223[3] = v212;
                    v223[4] = v214;
                    v224 = os_log_create("com.apple.amp.medialibrary", "Import");
                    if (os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
                    {
                      v225 = (std::string::__raw *)&v340[2];
                      if (SHIBYTE(v340[2].__r_.__value_.__r.__words[2]) < 0)
                        v225 = (std::string::__raw *)v225->__words[0];
                      v226 = &v295;
                      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v226 = (std::string *)v295.__r_.__value_.__r.__words[0];
                      *(_DWORD *)buf = 134219522;
                      *(_QWORD *)&buf[4] = v217;
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v225;
                      *(_WORD *)&buf[22] = 2082;
                      *(_QWORD *)&buf[24] = v226;
                      *(_WORD *)&buf[32] = 2048;
                      *(_QWORD *)&buf[34] = v214;
                      *(_WORD *)&buf[42] = 2048;
                      *(_QWORD *)&buf[44] = v212;
                      *(_WORD *)&buf[52] = 2048;
                      *(_QWORD *)&buf[54] = v220;
                      v371 = 2048;
                      v372 = v219;
                      _os_log_impl(&dword_1AC149000, v224, OS_LOG_TYPE_DEFAULT, "Will update sort order for tracks with album_artist_pid=%lld with sortName=%{public}s, (oldValue=%{public}s, order.section=%ld, order.sortOrder=%lld (oldValue section=%ld, sortOrder=%lld)", buf, 0x48u);
                    }

                  }
                }
                v72 = 1;
                goto LABEL_417;
              }
LABEL_397:
              if (v203 >= 0)
                v210 = v202;
              else
                v210 = v204;
              if (v210)
                v211 = v183;
              else
                v211 = 1;
              if ((v211 & 1) != 0)
                goto LABEL_417;
              goto LABEL_404;
            }
            v209 = memcmp(*v199, v206, v340[2].__r_.__value_.__l.__size_);
            v197 = v200;
            if (v209)
              goto LABEL_393;
          }
          else
          {
LABEL_390:
            if ((v197 & 0x80) != 0)
              v197 = v340[2].__r_.__value_.__l.__size_;
          }
          if (v197)
            goto LABEL_417;
          v202 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
          v204 = v295.__r_.__value_.__l.__size_;
          v203 = HIBYTE(v295.__r_.__value_.__r.__words[2]);
          goto LABEL_397;
        }
        v75 = v354 + 6;
        if (*((char *)v354 + 71) < 0)
          v75 = (_QWORD *)*v75;
        v76 = &v369;
        if ((v369.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v76 = (std::string *)v369.__r_.__value_.__r.__words[0];
LABEL_287:
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v75;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v76;
        _os_log_impl(&dword_1AC149000, v74, OS_LOG_TYPE_DEFAULT, "Setting albumArtistCloudLibraryID=%{public}s (oldValue = %{public}s)", buf, 0x16u);
        goto LABEL_288;
      }
LABEL_121:
      v72 = 0;
      goto LABEL_289;
    }
  }
  if (!objc_msgSend(v314[5], "length"))
  {
    v99 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(buf);
      v100 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      LODWORD(v379.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v379.__r_.__value_.__r.__words + 4) = (std::string::size_type)v100;
      _os_log_impl(&dword_1AC149000, v99, OS_LOG_TYPE_ERROR, "Album artist=%{public}s has an empty grouping key and no syncID. Creating a default album artist import item", (uint8_t *)&v379, 0xCu);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }

    ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)&v287);
    v101 = v288;
    ML3ImportSession::_setAlbumArtistInfoForTrackPersistentID(a1, v285, v287, (uint64_t)v288);
    if (!v101)
      goto LABEL_491;
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    goto LABEL_489;
  }
  v44 = v9;
  if (!v9)
  {
    v104 = (std::__shared_weak_count *)a2[1];
    v290 = *a2;
    v291 = v104;
    if (v104)
    {
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    v44 = objc_msgSend(*(id *)(a1 + 120), "nextPersistentID");
    v107 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v44;
      _os_log_impl(&dword_1AC149000, v107, OS_LOG_TYPE_DEFAULT, "created new album artist pid %lld", buf, 0xCu);
    }

    if (v104)
    {
      v108 = (unint64_t *)&v104->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
  }
  v45 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a1, (uint64_t)&v340[2], (uint64_t)&v347[2]);
  v47 = v46;
  v48 = os_log_create("com.apple.amp.medialibrary", "Import_Oversize");
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    v49 = v285;
    if (v281)
      v49 = 0;
    v50 = v9;
    if (!v9)
      v50 = v336[3];
    v51 = (std::string::__raw *)&v347[2];
    if (SHIBYTE(v347[2].__r_.__value_.__r.__words[2]) < 0)
      v51 = (std::string::__raw *)v51->__words[0];
    v52 = (std::string::__raw *)&v340[2];
    if (SHIBYTE(v340[2].__r_.__value_.__r.__words[2]) < 0)
      v52 = (std::string::__raw *)v52->__words[0];
    v53 = v328[3];
    v54 = v354 + 6;
    if (*((char *)v354 + 71) < 0)
      v54 = (_QWORD *)*v54;
    *(_DWORD *)buf = 134220034;
    *(_QWORD *)&buf[4] = v44;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v49;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v50;
    *(_WORD *)&buf[32] = 2082;
    *(_QWORD *)&buf[34] = v51;
    *(_WORD *)&buf[42] = 2082;
    *(_QWORD *)&buf[44] = v52;
    *(_WORD *)&buf[52] = 2048;
    *(_QWORD *)&buf[54] = v53;
    v371 = 2082;
    v372 = v54;
    v373 = 2048;
    v374 = v47;
    v375 = 2048;
    v376 = v45;
    _os_log_impl(&dword_1AC149000, v48, OS_LOG_TYPE_DEFAULT, "creating new album artist entry: pid=%lld, representative_item_pid=%lld, syncID=%lld, name='%{public}s', sortName='%{public}s', storeID=%lld, cloudLibraryID=%{public}s, order.section=%ld, order.sortOrder=%lld", buf, 0x5Cu);
  }
  v278 = v47;
  v279 = v45;

  v55 = v347;
  v56 = v340;
  v57 = v328;
  v276 = v336;
  v277 = v44;
  v58 = v354;
  v59 = v324;
  v60 = v320;
  v61 = v332;
  v63 = (std::__shared_weak_count *)operator new(0xD8uLL);
  v63->__shared_owners_ = 0;
  v63->__shared_weak_owners_ = 0;
  v63->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51308;
  if (SHIBYTE(v55[2].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)buf, v55[2].__r_.__value_.__l.__data_, v55[2].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)buf = *(_OWORD *)&v55[2].__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v55[2].__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v56[2].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v379, v56[2].__r_.__value_.__l.__data_, v56[2].__r_.__value_.__l.__size_);
  else
    v379 = v56[2];
  memset(v383, 0, sizeof(v383));
  memset(&v369, 0, sizeof(v369));
  if (!v9)
    v9 = v276[3];
  v110 = v57[3];
  if (*((char *)v58 + 71) < 0)
    std::string::__init_copy_ctor_external(&v368, (const std::string::value_type *)v58[6], v58[7]);
  else
    v368 = *(std::string *)((_BYTE *)v58 + 2);
  ML3ArtistData::ML3ArtistData((uint64_t)&v63[1], v277, (__int128 *)buf, (__int128 *)&v379, (__int128 *)v383, (__int128 *)&v369, v110, v62, v279, v278, 0, 0x7FFFFFFFFFFFFFFFLL, v9, (__int128 *)&v368, *((_BYTE *)v59 + 24), *((_DWORD *)v60 + 6), v61[3]);
  if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v368.__r_.__value_.__l.__data_);
  if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v379.__r_.__value_.__l.__data_);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v295.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63[1];
  v295.__r_.__value_.__l.__size_ = (std::string::size_type)v63;
  v111 = v285;
  if (v281)
    v111 = 0;
  v379.__r_.__value_.__r.__words[0] = v111;
  std::allocate_shared[abi:ne180100]<ML3AlbumArtistImportItem,std::allocator<ML3AlbumArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long,void>(buf, (uint64_t)&v63[1], v63, v314 + 5, (uint64_t *)&v379);
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v361 + 6), (__int128 *)buf);
  v112 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v113 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v116 = v361[6];
  v115 = v361[7];
  *(_QWORD *)buf = v277;
  *(_QWORD *)&buf[8] = v116;
  *(_QWORD *)&buf[16] = v115;
  if (v115)
  {
    v117 = (unint64_t *)(v115 + 8);
    do
      v118 = __ldxr(v117);
    while (__stxr(v118 + 1, v117));
  }
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>(a1 + 2040, v277, (uint64_t)buf);
  v119 = *(std::__shared_weak_count **)&buf[16];
  if (*(_QWORD *)&buf[16])
  {
    v120 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  ML3CPPStringFromData((NSData *)&v379, v314[5]);
  *(_OWORD *)buf = *(_OWORD *)&v379.__r_.__value_.__l.__data_;
  v122 = v379.__r_.__value_.__r.__words[2];
  memset(&v379, 0, sizeof(v379));
  *(_QWORD *)&buf[16] = v122;
  *(_OWORD *)&buf[24] = *(_OWORD *)&v295.__r_.__value_.__l.__data_;
  if (v295.__r_.__value_.__l.__size_)
  {
    v123 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(a1 + 1128, buf, (uint64_t)buf);
  v125 = *(std::__shared_weak_count **)&buf[32];
  if (*(_QWORD *)&buf[32])
  {
    v126 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v379.__r_.__value_.__l.__data_);
  if (*((char *)v354 + 71) < 0)
  {
    if (!v354[7])
      goto LABEL_227;
    std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v354[6], v354[7]);
  }
  else
  {
    if (!*((_BYTE *)v354 + 71))
      goto LABEL_227;
    *(_OWORD *)buf = *((_OWORD *)v354 + 3);
    *(_QWORD *)&buf[16] = v354[8];
  }
  *(_OWORD *)&buf[24] = *(_OWORD *)&v295.__r_.__value_.__l.__data_;
  if (v295.__r_.__value_.__l.__size_)
  {
    v128 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
    do
      v129 = __ldxr(v128);
    while (__stxr(v129 + 1, v128));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(a1 + 1288, buf, (uint64_t)buf);
  v130 = *(std::__shared_weak_count **)&buf[32];
  if (*(_QWORD *)&buf[32])
  {
    v131 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
LABEL_227:
  v289 = *(_OWORD *)&v295.__r_.__value_.__l.__data_;
  if (v295.__r_.__value_.__l.__size_)
  {
    v133 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
  }
  ML3ImportSession::_setAlbumArtistInfoForTrackPersistentID(a1, v285, (uint64_t)v295.__r_.__value_.__l.__data_, v295.__r_.__value_.__l.__size_);
  if (v295.__r_.__value_.__l.__size_)
  {
    v135 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v295.__r_.__value_.__l.__size_ + 16))(v295.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v295.__r_.__value_.__l.__size_);
    }
  }
  *(_QWORD *)(*a2 + 8) = v277;
  v101 = (std::__shared_weak_count *)v295.__r_.__value_.__l.__size_;
  if (v295.__r_.__value_.__l.__size_)
  {
    v137 = (unint64_t *)(v295.__r_.__value_.__l.__size_ + 8);
    do
      v103 = __ldaxr(v137);
    while (__stlxr(v103 - 1, v137));
    goto LABEL_489;
  }
LABEL_491:
  _Block_object_dispose(&v313, 8);

  _Block_object_dispose(&v319, 8);
  _Block_object_dispose(&v323, 8);
  _Block_object_dispose(&v327, 8);
  _Block_object_dispose(&v331, 8);
  _Block_object_dispose(&v335, 8);
  _Block_object_dispose(&v339, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v346, 8);
  if (SHIBYTE(v352.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v352.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v353, 8);
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v359.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v360, 8);
  v272 = v367;
  if (v367)
  {
    v273 = (unint64_t *)&v367->__shared_owners_;
    do
      v274 = __ldaxr(v273);
    while (__stlxr(v274 - 1, v273));
    if (!v274)
    {
      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
      std::__shared_weak_count::__release_weak(v272);
    }
  }

}

void sub_1AC34EEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;

  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);

  _Block_object_dispose(&STACK[0x218], 8);
  _Block_object_dispose(&STACK[0x248], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose(&STACK[0x288], 8);
  _Block_object_dispose(&STACK[0x2A8], 8);
  _Block_object_dispose(&STACK[0x2C8], 8);
  _Block_object_dispose(&STACK[0x2E8], 8);
  if (SLOBYTE(STACK[0x32F]) < 0)
    operator delete((void *)STACK[0x318]);
  _Block_object_dispose(&STACK[0x330], 8);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  _Block_object_dispose(&STACK[0x378], 8);
  if (SLOBYTE(STACK[0x3BF]) < 0)
    operator delete((void *)STACK[0x3A8]);
  _Block_object_dispose(&STACK[0x3C0], 8);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3F0]);

  _Unwind_Resume(a1);
}

void ML3ImportSession::_getDefaultEmptyArtist(ML3ImportSession *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if ((v2 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ML3ArtistData>::~shared_ptr[abi:ne180100], &ML3ImportSession::_getDefaultEmptyArtist(void)::__emptyArtistData, &dword_1AC149000);
  }
  if (ML3ImportSession::_getDefaultEmptyArtist(void)::onceToken != -1)
    dispatch_once(&ML3ImportSession::_getDefaultEmptyArtist(void)::onceToken, &__block_literal_global_441);
  v3 = unk_1EEC7D340;
  *(_QWORD *)this = ML3ImportSession::_getDefaultEmptyArtist(void)::__emptyArtistData;
  *((_QWORD *)this + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void ML3ImportSession::_setAlbumArtistInfoForTrackPersistentID(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;

  v26 = a2;
  if (a2)
  {
    v7 = a1 + 336;
    v8 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 336), a2);
    if (v8)
    {
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v8 + 5, a3, a4);
    }
    else
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](&v22, a3, a4);
      v9 = std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v7, a2, &v26);
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 3, 0, 0);
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 5, v22, *((uint64_t *)&v22 + 1));
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 7, v23, *((uint64_t *)&v23 + 1));
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 9, v24, *((uint64_t *)&v24 + 1));
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 11, v25, *((uint64_t *)&v25 + 1));
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      if (*((_QWORD *)&v23 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
      if (*((_QWORD *)&v22 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
}

void sub_1AC34F660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ML3CollectionInfoSet::~ML3CollectionInfoSet((ML3CollectionInfoSet *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession15_addAlbumArtistENSt3__110shared_ptrI13ML3ImportItemEEP6NSDataS3__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  char v9;
  char v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  char v15;
  char v16;
  uint64_t v17;
  void **v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t PropertyIndex;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  int shouldPreserveTrackProperty;
  char v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *size;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  std::__shared_weak_count *v57;
  std::string __p;
  std::string v59;
  std::string v60;
  _QWORD v61[2];
  void *v62;
  uint64_t v63;
  std::string v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  std::string v69;
  void *v70;
  std::string v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 112);
  objc_msgSend(v3, "stringForColumnIndex:", 0);
  v56 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringForColumnIndex:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = objc_msgSend(v3, "int64ForColumnIndex:", 2);
  v55 = objc_msgSend(v3, "int64ForColumnIndex:", 3);
  objc_msgSend(v3, "dataForColumnIndex:", 4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = v6;
  v54 = objc_msgSend(v3, "int64ForColumnIndex:", 5);
  v7 = objc_msgSend(v3, "intForColumnIndex:", 6);
  objc_msgSend(v3, "stringForColumnIndex:", 7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = objc_msgSend(v3, "intForColumnIndex:", 8);
  v52 = objc_msgSend(v3, "int64ForColumnIndex:", 9);
  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 56))(*(_QWORD *)(a1 + 120), 301989889);
  if (v56)
    v10 = v9;
  else
    v10 = 1;
  if ((v10 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v71, (char *)objc_msgSend(objc_retainAutorelease(v56), "UTF8String"));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v12 = (void **)(v11 + 48);
    if (*(char *)(v11 + 71) < 0)
      operator delete(*v12);
    *(std::string *)v12 = v71;
  }
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 56))(*(_QWORD *)(a1 + 120), 301989890) & 1) == 0&& objc_msgSend(v5, "length"))
  {
    std::string::basic_string[abi:ne180100]<0>(&v71, (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v14 = (void **)(v13 + 48);
    if (*(char *)(v13 + 71) < 0)
      operator delete(*v14);
    *(std::string *)v14 = v71;
  }
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 56))(*(_QWORD *)(a1 + 120), 301989899);
  if (v8)
    v16 = v15;
  else
    v16 = 1;
  if ((v16 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v71, (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v18 = (void **)(v17 + 48);
    if (*(char *)(v17 + 71) < 0)
      operator delete(*v18);
    *(std::string *)v18 = v71;
  }
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 56))(*(_QWORD *)(a1 + 120), 301989904) & 1) == 0)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v52;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 56))(*(_QWORD *)(a1 + 120), 301989903) & 1) == 0)*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v53;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 56))(*(_QWORD *)(a1 + 120), 301989901) & 1) == 0)*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v7 != 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 56))(*(_QWORD *)(a1 + 120), 301989893) & 1) == 0)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v55;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 56))(*(_QWORD *)(a1 + 120), 301989898) & 1) == 0)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = v54;
  v19 = *(void **)(v4 + 8);
  ML3CPPBridgeString((const UInt8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "groupingKeyForString:", v20);
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  v23 = *(void **)(v22 + 40);
  *(_QWORD *)(v22 + 40) = v21;

  v24 = *(_DWORD *)(a1 + 168);
  v25 = *(int *)(v4 + 32);
  LODWORD(v20) = HIBYTE(v24);
  PropertyIndex = ML3TrackRulesGetPropertyIndex(HIBYTE(v24), v24);
  if (*(_DWORD *)(ML3TrackRulesGetRule((int)v20, PropertyIndex) + 4 * v25) == -1
    || (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "isEqualToData:", v6) & 1) != 0)
  {
    goto LABEL_40;
  }
  v27 = *(std::__shared_weak_count **)(a1 + 144);
  v61[0] = *(_QWORD *)(a1 + 136);
  v61[1] = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(v4, (uint64_t)v61, *(_DWORD *)(a1 + 168));
  v31 = shouldPreserveTrackProperty;
  if (v27)
  {
    v32 = (unint64_t *)&v27->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if ((v31 & 1) == 0)
        goto LABEL_80;
LABEL_40:
      if (v56)
      {
        std::string::basic_string[abi:ne180100]<0>(&v60, (char *)objc_msgSend(objc_retainAutorelease(v56), "UTF8String"));
        if (v5)
          goto LABEL_42;
      }
      else
      {
        memset(&v60, 0, sizeof(v60));
        if (v5)
        {
LABEL_42:
          std::string::basic_string[abi:ne180100]<0>(&v59, (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
          if (v8)
          {
LABEL_43:
            std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
LABEL_47:
            v34 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v4, (uint64_t)&v59, (uint64_t)&v60);
            v36 = v35;
            v37 = v5;
            v39 = (std::__shared_weak_count *)operator new(0xD8uLL);
            v39->__shared_owners_ = 0;
            v39->__shared_weak_owners_ = 0;
            v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51308;
            v40 = *(_QWORD *)(a1 + 152);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v71, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
            else
              v71 = v60;
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v69, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
            else
              v69 = v59;
            v67 = 0uLL;
            v68 = 0;
            v66 = 0;
            v65 = 0uLL;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v64, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              v64 = __p;
            ML3ArtistData::ML3ArtistData((uint64_t)&v39[1], v40, (__int128 *)&v71, (__int128 *)&v69, &v67, &v65, v55, v38, v34, v36, 0, 0x7FFFFFFFFFFFFFFFLL, v54, (__int128 *)&v64, v7 != 0, v53, v52);
            v5 = v37;
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v64.__r_.__value_.__l.__data_);
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v69.__r_.__value_.__l.__data_);
            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v71.__r_.__value_.__l.__data_);
            v57 = v39;
            std::allocate_shared[abi:ne180100]<ML3AlbumArtistImportItem,std::allocator<ML3AlbumArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long,void>(&v71, (uint64_t)&v39[1], v39, &v62, &v63);
            std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 48, (__int128 *)&v71);
            size = (std::__shared_weak_count *)v71.__r_.__value_.__l.__size_;
            if (v71.__r_.__value_.__l.__size_)
            {
              v42 = (unint64_t *)(v71.__r_.__value_.__l.__size_ + 8);
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            if (v57)
            {
              v44 = (unint64_t *)&v57->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v59.__r_.__value_.__l.__data_);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v60.__r_.__value_.__l.__data_);
            goto LABEL_78;
          }
LABEL_46:
          memset(&__p, 0, sizeof(__p));
          goto LABEL_47;
        }
      }
      memset(&v59, 0, sizeof(v59));
      if (v8)
        goto LABEL_43;
      goto LABEL_46;
    }
  }
  if (shouldPreserveTrackProperty)
    goto LABEL_40;
LABEL_80:
  if (v63 == *(_QWORD *)(a1 + 160))
  {
    v46 = *(void **)(v4 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 152));
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = v47;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v70, 1);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "executeUpdate:withParameters:error:", CFSTR("UPDATE album_artist SET representative_item_pid=0 WHERE album_artist_pid=?"), v48, 0);

    *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) = 0;
    v49 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      v51 = *(_QWORD *)(a1 + 152);
      v50 = *(_QWORD *)(a1 + 160);
      LODWORD(v71.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)v71.__r_.__value_.__r.__words + 4) = v50;
      WORD2(v71.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v71.__r_.__value_.__r.__words[1] + 6) = v51;
      _os_log_impl(&dword_1AC149000, v49, OS_LOG_TYPE_DEFAULT, "Removing trackPersistentID=%lld as the representative item for albumArtistPersistentID=%lld as the groupingKey has changed/can no longer be applied", (uint8_t *)&v71, 0x16u);
    }

  }
LABEL_78:

}

void sub_1AC34FE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;

  _Unwind_Resume(a1);
}

void ML3ImportSession::_getAlbumArtistImportItemForGroupingIdentifierAndPIDs(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, unint64_t a6, _BYTE *a7)
{
  id v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  __CFString *v32;
  const std::string::value_type *v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  uint64_t *v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const std::string::value_type *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  _QWORD v63[4];
  id v64;
  uint8_t *v65;
  uint64_t v66;
  unint64_t v67;
  std::string v68;
  unint64_t v69;
  void *__p[2];
  char v71;
  uint8_t buf[8];
  uint8_t *v73;
  uint64_t v74;
  __n128 (*v75)(__n128 *, __n128 *);
  uint64_t (*v76)(uint64_t);
  const char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  id v80;
  _QWORD v81[2];
  _QWORD v82[3];
  id v83;
  _QWORD v84[2];
  _QWORD v85[3];
  void *v86;
  _QWORD v87[4];

  v87[2] = *MEMORY[0x1E0C80C00];
  v13 = a3;
  *a7 = 0;
  if (objc_msgSend(v13, "length")
    || (*(char *)(a4 + 23) < 0 ? (v14 = *(_QWORD *)(a4 + 8)) : (v14 = *(unsigned __int8 *)(a4 + 23)), v14 | a5 | a6))
  {
    *(_QWORD *)buf = 0;
    v73 = buf;
    v74 = 0x4012000000;
    v75 = __Block_byref_object_copy__337;
    v76 = __Block_byref_object_dispose__338;
    v78 = 0;
    v79 = 0;
    v77 = "";
    if (a5)
    {
      v15 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a2 + 2040), a5);
      if (v15)
      {
        *a7 = 1;
        std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](&v78, v15[3], v15[4]);
        v16 = *((_QWORD *)v73 + 7);
        *a1 = *((_QWORD *)v73 + 6);
        a1[1] = v16;
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
LABEL_86:
        _Block_object_dispose(buf, 8);
        v54 = v79;
        if (v79)
        {
          p_shared_owners = (unint64_t *)&v79->__shared_owners_;
          do
            v56 = __ldaxr(p_shared_owners);
          while (__stlxr(v56 - 1, p_shared_owners));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        goto LABEL_91;
      }
      v26 = (char *)(a4 + 23);
      if (*(char *)(a4 + 23) < 0)
        v27 = *(_QWORD *)(a4 + 8);
      else
        v27 = *(unsigned __int8 *)(a4 + 23);
      if (v27)
      {
        objc_msgSend(CFSTR("SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE "), "stringByAppendingString:", CFSTR("(ROWID=? OR cloud_universal_library_id=?)"));
        v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a5);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        v87[0] = v58;
        v33 = (const std::string::value_type *)a4;
        if (*v26 < 0)
          v33 = *(const std::string::value_type **)a4;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v87[1] = v34;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v87, 2);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_76;
      }
      objc_msgSend(CFSTR("SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE "), "stringByAppendingString:", CFSTR("ROWID=?"));
      v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a5);
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      v86 = v59;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v86, 1);
      v62 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_77:
      objc_msgSend(*(id *)(a2 + 16), "executeQuery:withParameters:", v32, v62);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v63[0] = MEMORY[0x1E0C809B0];
      v63[1] = 3321888768;
      v63[2] = ___ZN16ML3ImportSession53_getAlbumArtistImportItemForGroupingIdentifierAndPIDsEP6NSDataNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEExxRb_block_invoke;
      v63[3] = &unk_1E5B52718;
      v65 = buf;
      v66 = a2;
      v64 = v13;
      v67 = a5;
      if (*v26 < 0)
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
      else
        v68 = *(std::string *)a4;
      v69 = a6;
      objc_msgSend(v50, "enumerateRowsWithBlock:", v63);
      v51 = *((_QWORD *)v73 + 7);
      *a1 = *((_QWORD *)v73 + 6);
      a1[1] = v51;
      if (v51)
      {
        v52 = (unint64_t *)(v51 + 8);
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);

      goto LABEL_86;
    }
    if (*(char *)(a4 + 23) < 0)
    {
      if (*(_QWORD *)(a4 + 8))
      {
LABEL_14:
        v19 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a2 + 1288), (unsigned __int8 *)a4);
        if (!v19)
          goto LABEL_58;
        v20 = (uint64_t *)*((_QWORD *)v19 + 5);
        v21 = (std::__shared_weak_count *)*((_QWORD *)v19 + 6);
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = *v20;
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          goto LABEL_34;
        }
        goto LABEL_43;
      }
    }
    else if (*(_BYTE *)(a4 + 23))
    {
      goto LABEL_14;
    }
    if (!a6)
    {
      if (!objc_msgSend(v13, "length"))
        goto LABEL_58;
      ML3CPPStringFromData((NSData *)__p, v13);
      v39 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a2 + 1128), (unsigned __int8 *)__p);
      if (v71 < 0)
        operator delete(__p[0]);
      if (!v39)
        goto LABEL_58;
      v40 = (uint64_t *)*((_QWORD *)v39 + 5);
      v41 = (unint64_t *)*((_QWORD *)v39 + 6);
      __p[0] = v40;
      __p[1] = v41;
      if (v41)
      {
        v42 = v41 + 1;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v44 = *v40;
      std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      if (!v44)
        goto LABEL_58;
      goto LABEL_45;
    }
    v29 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a2 + 1048), a6);
    if (!v29)
      goto LABEL_58;
    v20 = (uint64_t *)v29[3];
    v21 = (std::__shared_weak_count *)v29[4];
    if (v21)
    {
      v30 = (unint64_t *)&v21->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v24 = *v20;
      do
        v25 = __ldaxr(v30);
      while (__stlxr(v25 - 1, v30));
LABEL_34:
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        if (!v24)
          goto LABEL_58;
        goto LABEL_45;
      }
LABEL_44:
      if (!v24)
        goto LABEL_58;
LABEL_45:
      v35 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a2 + 2040), 0);
      if (v35)
      {
        *a7 = 1;
        std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)v73 + 6, v35[3], v35[4]);
        v36 = *((_QWORD *)v73 + 7);
        *a1 = *((_QWORD *)v73 + 6);
        a1[1] = v36;
        if (v36)
        {
          v37 = (unint64_t *)(v36 + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        goto LABEL_86;
      }
LABEL_58:
      v26 = (char *)(a4 + 23);
      if (*(char *)(a4 + 23) < 0)
        v45 = *(_QWORD *)(a4 + 8);
      else
        v45 = *(unsigned __int8 *)(a4 + 23);
      if (v45)
      {
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(CFSTR("SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE "), "stringByAppendingString:", CFSTR("cloud_universal_library_id=?"));
        v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v46 = (const std::string::value_type *)a4;
        if (*v26 < 0)
          v46 = *(const std::string::value_type **)a4;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v46);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v62, "addObject:", v47);

        if (!a6)
        {
          if (objc_msgSend(v13, "length"))
          {
            -[__CFString stringByAppendingString:](v32, "stringByAppendingString:", CFSTR(" OR (cloud_universal_library_id='' AND grouping_key=?)"));
            v49 = objc_claimAutoreleasedReturnValue();

            v83 = v13;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v83, 1);
            v60 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v62, "addObjectsFromArray:");
            v32 = (__CFString *)v49;

          }
          goto LABEL_77;
        }
        if (objc_msgSend(v13, "length"))
        {
          -[__CFString stringByAppendingString:](v32, "stringByAppendingString:", CFSTR(" OR (cloud_universal_library_id='' AND (ROWID=? OR sync_id=?) OR grouping_key=?)"));
          v57 = objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a6);
          v85[0] = objc_claimAutoreleasedReturnValue();
          v58 = (void *)v85[0];
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a6);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v85[1] = v34;
          v85[2] = v13;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v85, 3);
        }
        else
        {
          -[__CFString stringByAppendingString:](v32, "stringByAppendingString:", CFSTR(" OR (cloud_universal_library_id='' AND (ROWID=? OR sync_id=?))"));
          v57 = objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a6);
          v84[0] = objc_claimAutoreleasedReturnValue();
          v58 = (void *)v84[0];
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a6);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v84[1] = v34;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v84, 2);
        }
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v62, "addObjectsFromArray:", v48);
        v32 = (__CFString *)v57;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        if (!a6)
        {
          if (objc_msgSend(v13, "length"))
          {
            objc_msgSend(CFSTR("SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE "), "stringByAppendingString:", CFSTR("grouping_key=?"));
            v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
            v80 = v13;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v80, 1);
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v62, "addObjectsFromArray:");

          }
          else
          {
            v32 = CFSTR("SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE ");
          }
          goto LABEL_77;
        }
        if (objc_msgSend(v13, "length"))
        {
          objc_msgSend(CFSTR("SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE "), "stringByAppendingString:", CFSTR("(ROWID=? OR sync_id=?) OR grouping_key=?"));
          v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a6);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v82[0] = v58;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a6);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v82[1] = v34;
          v82[2] = v13;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v82, 3);
        }
        else
        {
          objc_msgSend(CFSTR("SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, representative_item_pid, sort_order, sort_order_section, grouping_key FROM album_artist WHERE "), "stringByAppendingString:", CFSTR("(ROWID=? OR sync_id=?)"));
          v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a6);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v81[0] = v58;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a6);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          v81[1] = v34;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v81, 2);
        }
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v62, "addObjectsFromArray:", v48);
      }

LABEL_76:
      goto LABEL_77;
    }
LABEL_43:
    v24 = *v20;
    goto LABEL_44;
  }
  v28 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AC149000, v28, OS_LOG_TYPE_DEFAULT, "Invalid parameters to find album artist", buf, 2u);
  }

  *a1 = 0;
  a1[1] = 0;
LABEL_91:

}

void sub_1AC3508EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Block_object_dispose(&a32, 8);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a11);

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  _QWORD v39[2];
  char v40;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x38uLL);
  v39[0] = v16;
  v39[1] = a1 + 16;
  v40 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v40 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(void **)a1;
          *(_QWORD *)a1 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v15;
          if (*v15)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v15;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v27;
                    goto LABEL_58;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_58:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v38 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v38)
          operator delete(v38);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v36 = v39[0];
  if (v35)
  {
    *(_QWORD *)v39[0] = *v35;
LABEL_75:
    *v35 = v36;
    goto LABEL_76;
  }
  *(_QWORD *)v39[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v36;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)v36)
  {
    v37 = *(_QWORD *)(*(_QWORD *)v36 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  v39[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
}

void sub_1AC350EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<ML3AlbumArtistImportItem,std::allocator<ML3AlbumArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long,void>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, void **a4, uint64_t *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[2];

  v10 = operator new(0x78uLL);
  v11 = v10;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E5B51500;
  v12 = v10 + 3;
  v16[0] = a2;
  v16[1] = a3;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    ML3AlbumArtistImportItem::ML3AlbumArtistImportItem((uint64_t)(v10 + 3), v16, *a4, *a5);
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ML3AlbumArtistImportItem::ML3AlbumArtistImportItem((uint64_t)(v10 + 3), v16, *a4, *a5);
  }
  *a1 = v12;
  a1[1] = v11;
}

void std::__shared_ptr_emplace<ML3AlbumArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3AlbumArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_emplace<ML3AlbumArtistImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ML3ArtistData::ML3ArtistData(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int128 *a14, char a15, int a16, uint64_t a17)
{
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;

  *(_QWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v22 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v22;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v23 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v23;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v24 = *a5;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v24;
  }
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v25 = *a6;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a6 + 2);
    *(_OWORD *)(a1 + 80) = v25;
  }
  *(_QWORD *)(a1 + 104) = a7;
  *(_QWORD *)(a1 + 112) = a9;
  *(_QWORD *)(a1 + 120) = a10;
  *(_QWORD *)(a1 + 128) = a11;
  *(_QWORD *)(a1 + 136) = a12;
  *(_QWORD *)(a1 + 144) = a13;
  v26 = (std::string *)(a1 + 152);
  if (*((char *)a14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a14, *((_QWORD *)a14 + 1));
  }
  else
  {
    v27 = *a14;
    *(_QWORD *)(a1 + 168) = *((_QWORD *)a14 + 2);
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
  }
  *(_BYTE *)(a1 + 176) = a15;
  *(_DWORD *)(a1 + 180) = a16;
  *(_QWORD *)(a1 + 184) = a17;
  return a1;
}

void sub_1AC351198(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (v1[103] < 0)
    operator delete(*v5);
  if (v1[79] < 0)
    operator delete(*v4);
  if (v1[55] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<ML3ArtistData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3ArtistData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51308;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

void std::__shared_ptr_emplace<ML3ArtistData>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ___ZN16ML3ImportSession34_shouldPreserveAlbumArtistPropertyExj_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  objc_msgSend(v8, "stringForColumnIndex:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v8, "int64ForColumnIndex:", 1);
  v5 = objc_msgSend(v8, "int64ForColumnIndex:", 2);
  **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a1 + 40);
  v6 = objc_msgSend(v3, "length");
  if (v6)
    v6 = objc_msgSend(v3, "hash");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 16) = v6;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 24) = v4;
  if (MSVDeviceIsWatch())
    v7 = v4;
  else
    v7 = 0;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) = v7;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 40) = v5;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 32) = v5;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 48) = v5;

}

void sub_1AC3513B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession53_getAlbumArtistImportItemForGroupingIdentifierAndPIDsEP6NSDataNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEExxRb_block_invoke(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  ML3ImportSession *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  int v19;
  NSString *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  std::string::size_type v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::string::size_type v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  std::string::size_type v39;
  void *v40;
  unint64_t v41;
  const void **v42;
  void **v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unint64_t i;
  std::string v61;
  __int128 v62;
  void *__p[2];
  std::string::size_type v64;
  __int128 v65;
  uint64_t v66[2];
  void *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  BOOL v71;
  void *v72[2];
  unsigned __int8 v73;
  uint64_t v74;
  uint64_t v75[3];
  uint64_t v76;
  std::string v77;
  std::string v78;
  std::string v79[2];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = *(ML3ImportSession **)(a1 + 48);
  memset(v79, 0, sizeof(v79));
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v7, (uint64_t)v79, 2uLL);
  if (SHIBYTE(v79[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v78, v79[0].__r_.__value_.__l.__data_, v79[0].__r_.__value_.__l.__size_);
  else
    v78 = v79[0];
  if (SHIBYTE(v79[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v77, v79[1].__r_.__value_.__l.__data_, v79[1].__r_.__value_.__l.__size_);
  else
    v77 = v79[1];
  v10 = objc_msgSend(v7, "int64ForColumnIndex:", 2);
  v76 = objc_msgSend(v7, "int64ForColumnIndex:", 3);
  objc_msgSend(v7, "objectAtIndexedSubscript:", 4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12 = (void *)*((_QWORD *)v9 + 3);
    objc_msgSend(v7, "objectAtIndexedSubscript:", 4);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKeyedSubscript:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "ML3NameOrderValue");
    v75[0] = v15;
    v75[1] = v16;

  }
  else
  {
    v15 = 0;
    *(_OWORD *)v75 = *(_OWORD *)"";
  }

  objc_msgSend(v7, "objectAtIndexedSubscript:", 3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
    v18 = v15 == 0;
  else
    v18 = 0;
  v19 = v18;

  if (v19)
  {
    objc_msgSend(v7, "objectAtIndexedSubscript:", 4);
    v20 = (NSString *)objc_claimAutoreleasedReturnValue();
    v75[0] = ML3ImportSession::_getNameOrderForString(v9, v20);
    v75[1] = v21;

  }
  v74 = objc_msgSend(v7, "int64ForColumnIndex:", 5);
  std::string::basic_string[abi:ne180100]<0>(v72, (char *)objc_msgSend(v7, "cStringForColumnIndex:", 6));
  v71 = objc_msgSend(v7, "intForColumnIndex:", 7) != 0;
  v70 = objc_msgSend(v7, "intForColumnIndex:", 8);
  v69 = objc_msgSend(v7, "int64ForColumnIndex:", 9);
  v68 = objc_msgSend(v7, "int64ForColumnIndex:", 10);
  v22 = objc_msgSend(v7, "int64ForColumnIndex:", 11);
  v23 = objc_msgSend(v7, "intForColumnIndex:", 12);
  objc_msgSend(v7, "dataForColumnIndex:", 13);
  v66[1] = v23;
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v66[0] = v22;
  memset(&v61, 0, sizeof(v61));
  __p[0] = 0;
  __p[1] = 0;
  v64 = 0;
  std::allocate_shared[abi:ne180100]<ML3ArtistData,std::allocator<ML3ArtistData>,long long &,std::string &,std::string &,std::string,std::string,long long &,ML3NameOrder &,ML3NameOrder &,long long &,std::string &,BOOL &,int &,long long &,void>(&v65, v10, (uint64_t)&v78, (uint64_t)&v77, (uint64_t)&v61, (uint64_t)__p, &v76, v75, v66, &v74, (uint64_t)v72, (char *)&v71, &v70, &v69);
  if (SHIBYTE(v64) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  std::allocate_shared[abi:ne180100]<ML3AlbumArtistImportItem,std::allocator<ML3AlbumArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long,void>(&v61, v65, *((std::__shared_weak_count **)&v65 + 1), &v67, &v68);
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, (__int128 *)&v61);
  size = (std::__shared_weak_count *)v61.__r_.__value_.__l.__size_;
  if (v61.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v61.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v27 = objc_msgSend(*(id *)(a1 + 32), "length");
  v28 = v67;
  if (v27 && objc_msgSend(v67, "length") && objc_msgSend(*(id *)(a1 + 32), "isEqualToData:", v28))
  {
    ML3CPPStringFromData((NSData *)__p, *(void **)(a1 + 32));
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v29 = v64;
    __p[1] = 0;
    v64 = 0;
    v61.__r_.__value_.__r.__words[2] = v29;
    v62 = v65;
    __p[0] = 0;
    if (*((_QWORD *)&v65 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>((uint64_t)v9 + 1128, (unsigned __int8 *)&v61, (uint64_t)&v61);
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
    if (!*((_QWORD *)&v62 + 1))
      goto LABEL_47;
    v33 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    goto LABEL_45;
  }
  if (!objc_msgSend(v28, "length"))
    goto LABEL_51;
  if (!*(_QWORD *)(a1 + 56))
  {
    if (*(char *)(a1 + 87) < 0)
    {
      if (!*(_QWORD *)(a1 + 72))
        goto LABEL_51;
    }
    else if (!*(_BYTE *)(a1 + 87))
    {
      goto LABEL_51;
    }
  }
  ML3CPPStringFromData((NSData *)__p, v28);
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  v35 = v64;
  __p[1] = 0;
  v64 = 0;
  v61.__r_.__value_.__r.__words[2] = v35;
  v62 = v65;
  __p[0] = 0;
  if (*((_QWORD *)&v65 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>((uint64_t)v9 + 1128, (unsigned __int8 *)&v61, (uint64_t)&v61);
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v34 = __ldaxr(v38);
    while (__stlxr(v34 - 1, v38));
LABEL_45:
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
LABEL_47:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64) < 0)
    operator delete(__p[0]);
LABEL_51:
  if (*(char *)(a1 + 87) < 0)
  {
    if (!*(_QWORD *)(a1 + 72))
      goto LABEL_86;
  }
  else if (!*(_BYTE *)(a1 + 87))
  {
    goto LABEL_86;
  }
  v39 = *(_QWORD *)(a1 + 72);
  if (*(char *)(a1 + 87) >= 0)
    v40 = (void *)*(unsigned __int8 *)(a1 + 87);
  else
    v40 = *(void **)(a1 + 72);
  v41 = v73;
  if ((v73 & 0x80u) != 0)
    v41 = (unint64_t)v72[1];
  if (v40 == (void *)v41)
  {
    v42 = (const void **)(a1 + 64);
    if ((v73 & 0x80u) == 0)
      v43 = v72;
    else
      v43 = (void **)v72[0];
    if ((*(_BYTE *)(a1 + 87) & 0x80) != 0)
    {
      if (memcmp(*v42, v43, *(_QWORD *)(a1 + 72)))
        goto LABEL_86;
LABEL_75:
      std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)*v42, v39);
    }
    else
    {
      if (*(_BYTE *)(a1 + 87))
      {
        v44 = (unsigned __int8 *)(a1 + 64);
        v45 = *(unsigned __int8 *)(a1 + 87);
        while (*v44 == *(unsigned __int8 *)v43)
        {
          ++v44;
          v43 = (void **)((char *)v43 + 1);
          if (!--v45)
          {
            if ((*(_BYTE *)(a1 + 87) & 0x80) != 0)
              goto LABEL_75;
            goto LABEL_70;
          }
        }
        goto LABEL_86;
      }
LABEL_70:
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)v42;
      v61.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 80);
    }
    v62 = v65;
    if (*((_QWORD *)&v65 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>((uint64_t)v9 + 1288, (unsigned __int8 *)&v61, (uint64_t)&v61);
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
    if (*((_QWORD *)&v62 + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
  }
LABEL_86:
  v51 = *(_QWORD *)(a1 + 88);
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (v51)
  {
    v61.__r_.__value_.__r.__words[0] = v51;
    *(_OWORD *)&v61.__r_.__value_.__r.__words[1] = v65;
    if (*((_QWORD *)&v65 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ArtistData>>>((uint64_t)v9 + 1048, v51, (uint64_t)&v61);
    v55 = (std::__shared_weak_count *)v61.__r_.__value_.__r.__words[2];
    if (v61.__r_.__value_.__r.__words[2])
    {
      v56 = (unint64_t *)(v61.__r_.__value_.__r.__words[2] + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  }
  *a4 = 1;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }

  if ((char)v73 < 0)
    operator delete(v72[0]);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  for (i = 0; i != 0x1FFFFFFFFFFFFFFALL; i -= 3)
  {
    if (SHIBYTE(v79[1].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v79[i / 3 + 1].__r_.__value_.__l.__data_);
  }

}

void sub_1AC351B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a29);

  if (a42 < 0)
    operator delete(__p);
  if (*(char *)(v44 - 185) < 0)
    operator delete(*(void **)(v44 - 208));
  if (*(char *)(v44 - 153) < 0)
    operator delete(*(void **)(v44 - 176));
  v46 = 0;
  v47 = v44 - 144;
  while (1)
  {
    if (*(char *)(v47 + v46 + 47) < 0)
      operator delete(*(void **)(v47 + v46 + 24));
    v46 -= 24;
    if (v46 == -48)
    {

      _Unwind_Resume(a1);
    }
  }
}

void std::allocate_shared[abi:ne180100]<ML3ArtistData,std::allocator<ML3ArtistData>,long long &,std::string &,std::string &,std::string,std::string,long long &,ML3NameOrder &,ML3NameOrder &,long long &,std::string &,BOOL &,int &,long long &,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t a11, char *a12, int *a13, uint64_t *a14)
{
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string v30;
  void *__p[2];
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  std::string v35;
  std::string v36;

  v23 = operator new(0xD8uLL);
  v23[1] = 0;
  v23[2] = 0;
  *v23 = &off_1E5B51308;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v36 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v35 = *(std::string *)a4;
  *(_OWORD *)v33 = *(_OWORD *)a5;
  v34 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  *(_OWORD *)__p = *(_OWORD *)a6;
  v32 = *(_QWORD *)(a6 + 16);
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)a6 = 0;
  v24 = *a7;
  v25 = *a8;
  v26 = a8[1];
  v27 = *a9;
  v28 = a9[1];
  v29 = *a10;
  if (*(char *)(a11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a11, *(_QWORD *)(a11 + 8));
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)a11;
    v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(a11 + 16);
  }
  ML3ArtistData::ML3ArtistData((uint64_t)(v23 + 3), a2, (__int128 *)&v36, (__int128 *)&v35, (__int128 *)v33, (__int128 *)__p, v24, v22, v25, v26, v27, v28, v29, (__int128 *)&v30, *a12, *a13, *a14);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  *a1 = v23 + 3;
  a1[1] = v23;
}

void sub_1AC351E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::__shared_weak_count *v36;
  uint64_t v37;
  void *v39;

  if (a29 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (*(char *)(v37 - 121) < 0)
    operator delete(*(void **)(v37 - 144));
  if (*(char *)(v37 - 89) < 0)
    operator delete(*(void **)(v37 - 112));
  std::__shared_weak_count::~__shared_weak_count(v36);
  operator delete(v39);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ArtistData>>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  _QWORD v35[2];
  char v36;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x28uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = a2;
  *((_QWORD *)v13 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(void **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v12;
          if (*v12)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v32 = v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = v32;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v32;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
  if (*(_QWORD *)v32)
  {
    v33 = *(_QWORD *)(*(_QWORD *)v32 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7)
        v33 %= v7;
    }
    else
    {
      v33 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
}

void sub_1AC3522F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_120c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE136c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[16];
  result[15] = a2[15];
  result[16] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[18];
  result[17] = a2[17];
  result[18] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_120c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE136c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 120;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 136);
  return std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN16ML3ImportSession22_getDefaultEmptyArtistEv_block_invoke()
{
  char *v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  __int128 v4;

  v0 = (char *)operator new(0xD8uLL);
  *((_QWORD *)v0 + 1) = 0;
  *((_QWORD *)v0 + 2) = 0;
  *(_QWORD *)v0 = &off_1E5B51308;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = *(_OWORD *)"";
  *(_OWORD *)(v0 + 152) = *(_OWORD *)"";
  *((_DWORD *)v0 + 51) = 0;
  *((_QWORD *)v0 + 26) = 0;
  v0[200] = 0;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *((_QWORD *)&v4 + 1) = v0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_QWORD *)&v4 = v0 + 24;
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)&ML3ImportSession::_getDefaultEmptyArtist(void)::__emptyArtistData, &v4);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t ML3ImportSession::updateAlbumArtist(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  _BOOL4 v8;
  NSObject *v9;
  void **v10;
  const char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  void **v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t AlbumArtistPersistentID;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  NSObject *v39;
  _BOOL4 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  NSObject *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD v69[2];
  _QWORD v70[2];
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73[2];
  uint64_t v74[2];
  _QWORD v75[4];
  uint64_t v76[2];
  void *v77[2];
  char v78;
  _BYTE __p[12];
  __int16 v80;
  void **v81;
  char v82;
  _BYTE buf[12];
  __int16 v84;
  const char *v85;
  __int16 v86;
  int v87;
  __int16 v88;
  _BOOL4 v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(*(id *)(a1 + 1576), "count"))
    v8 = 1;
  else
    v8 = *(_QWORD *)(a1 + 1536) != *(_QWORD *)(a1 + 1528);
  v9 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = v77;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 88))(v77);
    if (v78 < 0)
      v10 = (void **)v77[0];
    if (*a3)
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a3 + 88))(__p);
      if (v82 >= 0)
        v11 = __p;
      else
        v11 = *(const char **)__p;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v10;
      v84 = 2082;
      v85 = v11;
      v86 = 1024;
      v87 = a4;
      v88 = 1024;
      v89 = v8;
      _os_log_impl(&dword_1AC149000, v9, OS_LOG_TYPE_DEFAULT, "updating albumArtist=%{public}s with track=%{public}s ignoreNonExistingAlbumArtist=%{BOOL}u, havePendingTrackModifications=%{BOOL}u", buf, 0x22u);
      if (v82 < 0)
        operator delete(*(void **)__p);
    }
    else
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v10;
      v84 = 2082;
      v85 = "";
      v86 = 1024;
      v87 = a4;
      v88 = 1024;
      v89 = v8;
      _os_log_impl(&dword_1AC149000, v9, OS_LOG_TYPE_DEFAULT, "updating albumArtist=%{public}s with track=%{public}s ignoreNonExistingAlbumArtist=%{BOOL}u, havePendingTrackModifications=%{BOOL}u", buf, 0x22u);
    }
    if (v78 < 0)
      operator delete(v77[0]);
  }

  if (v8 && !ML3ImportSession::flush((ML3ImportSession *)a1, 1))
    return 0;
  if (!*a3)
    goto LABEL_40;
  v12 = (std::__shared_weak_count *)a3[1];
  v76[0] = *a3;
  v76[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = ML3ImportSession::_prepareTrackForImport(a1, v76, a4, 1);
  v16 = v15;
  if (!v12)
    goto LABEL_26;
  v17 = (unint64_t *)&v12->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_26:
    if (v15)
      goto LABEL_27;
LABEL_40:
    v24 = *a2;
    v25 = (std::__shared_weak_count *)a2[1];
    v75[2] = *a2;
    v75[3] = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    ML3ImportSession::_getGroupingKeyForAlbumArtistImportItem(a1, v24);
    v19 = objc_claimAutoreleasedReturnValue();
    if (v25)
    {
      v28 = (unint64_t *)&v25->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (*a3)
      v30 = *(_QWORD *)(*a3 + 8);
    else
      v30 = 0;
    v31 = (std::__shared_weak_count *)a2[1];
    v75[0] = *a2;
    v75[1] = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    AlbumArtistPersistentID = ML3ImportSession::_getAlbumArtistPersistentID(a1, v75, v19);
    if (v31)
    {
      v35 = (unint64_t *)&v31->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v37 = *a3;
    if (*a3)
      v38 = (_DWORD)a4 == 0;
    else
      v38 = 1;
    if (!v38 && !*(_QWORD *)(v37 + 8))
    {
      v46 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v46, OS_LOG_TYPE_DEFAULT, "Ignoring album artist update as the track does not exist", buf, 2u);
      }

      goto LABEL_117;
    }
    v39 = os_log_create("com.apple.amp.medialibrary", "Import");
    v40 = os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
    if (!v37 && (_DWORD)a4 && !AlbumArtistPersistentID)
    {
      if (v40)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v39, OS_LOG_TYPE_DEFAULT, "Ignoring album artist update as the artist does not exist", buf, 2u);
      }

LABEL_117:
      a4 = 1;
LABEL_118:

      return a4;
    }
    if (v40)
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v30;
      v84 = 2048;
      v85 = (const char *)AlbumArtistPersistentID;
      _os_log_impl(&dword_1AC149000, v39, OS_LOG_TYPE_DEFAULT, "updating albumArtist with trackPID=%lld, albumArtistPID=%lld", buf, 0x16u);
    }

    if (*a3)
    {
      v41 = (std::__shared_weak_count *)a3[1];
      v74[0] = *a3;
      v74[1] = (uint64_t)v41;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      a4 = ML3ImportSession::_prepareTrackSortData(a1, v74);
      if (!v41)
        goto LABEL_90;
      v44 = (unint64_t *)&v41->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
    }
    else
    {
      v41 = (std::__shared_weak_count *)a2[1];
      v73[0] = *a2;
      v73[1] = (uint64_t)v41;
      if (v41)
      {
        v47 = (unint64_t *)&v41->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      a4 = ML3ImportSession::_prepareAlbumArtistSortData(a1, v73);
      if (!v41)
        goto LABEL_90;
      v49 = (unint64_t *)&v41->__shared_owners_;
      do
        v45 = __ldaxr(v49);
      while (__stlxr(v45 - 1, v49));
    }
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if ((a4 & 1) == 0)
      {
        a4 = 0;
        goto LABEL_118;
      }
      goto LABEL_93;
    }
LABEL_90:
    if (!(_DWORD)a4)
      goto LABEL_118;
LABEL_93:
    v50 = (std::__shared_weak_count *)a2[1];
    v71 = *a2;
    v72 = v50;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v53 = *a3;
    v54 = (std::__shared_weak_count *)a3[1];
    v70[0] = v53;
    v70[1] = v54;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    ML3ImportSession::_addAlbumArtist(a1, &v71, v19, v70);
    if (v54)
    {
      v57 = (unint64_t *)&v54->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v59 = v72;
    if (v72)
    {
      v60 = (unint64_t *)&v72->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = *a2;
    v63 = (std::__shared_weak_count *)a2[1];
    v69[0] = v62;
    v69[1] = v63;
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    ML3ImportSession::_addAlbumArtistDataToSourceMaps(a1, v69);
    if (v63)
    {
      v66 = (unint64_t *)&v63->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    goto LABEL_117;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!v16)
    goto LABEL_40;
LABEL_27:
  if (v16 != 1)
  {
    v19 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(buf);
      v20 = SHIBYTE(v86);
      v21 = *(_BYTE **)buf;
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 88))(v77);
      v22 = buf;
      if (v20 < 0)
        v22 = v21;
      if (v78 >= 0)
        v23 = v77;
      else
        v23 = (void **)v77[0];
      *(_DWORD *)__p = 136446466;
      *(_QWORD *)&__p[4] = v22;
      v80 = 2082;
      v81 = v23;
      _os_log_impl(&dword_1AC149000, v19, OS_LOG_TYPE_ERROR, "Error updating albumArtist=%{public}s. Could not prepare track data for import=%{public}s", __p, 0x16u);
      if (v78 < 0)
        operator delete(v77[0]);
      if (SHIBYTE(v86) < 0)
        operator delete(*(void **)buf);
    }
    goto LABEL_118;
  }
  return 0;
}

void sub_1AC352BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::removeAlbumArtist(uint64_t a1, uint64_t *a2)
{
  int v4;
  BOOL v5;
  NSObject *v6;
  _BYTE *v7;
  int v8;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t AlbumArtistPersistentID;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _BYTE __p[12];
  __int16 v25;
  uint64_t v26;
  char v27;
  uint8_t buf[4];
  _BYTE *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 32);
  if (MSVDeviceIsWatch())
    v5 = *(_DWORD *)(a1 + 32) == 1;
  else
    v5 = 0;
  if (v4 != 2 && !v5)
  {
    *(_BYTE *)(a1 + 1521) = 1;
    v6 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(__p);
      if (v27 >= 0)
        v7 = __p;
      else
        v7 = *(_BYTE **)__p;
      v8 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      v29 = v7;
      v30 = 1024;
      v31 = v8;
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, "not removing album artist=%{public}s as it's not supported for source=%d", buf, 0x12u);
      if (v27 < 0)
        operator delete(*(void **)__p);
    }

    return 1;
  }
  v10 = (std::__shared_weak_count *)a2[1];
  v22 = *a2;
  v23 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  AlbumArtistPersistentID = ML3ImportSession::_getAlbumArtistPersistentID(a1, &v22, 0);
  v14 = AlbumArtistPersistentID;
  if (!v10)
    goto LABEL_21;
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v14)
    {
LABEL_22:
      v17 = *(void **)(a1 + 2080);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v14, v22, v23);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "addObject:", v18);

      ++*(_DWORD *)(a1 + 232);
      v19 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v20 = objc_msgSend(*(id *)(a1 + 2080), "count");
        *(_DWORD *)__p = 134218240;
        *(_QWORD *)&__p[4] = v14;
        v25 = 2048;
        v26 = v20;
        _os_log_impl(&dword_1AC149000, v19, OS_LOG_TYPE_DEFAULT, "removing albumArtistPID=%lld, _deletedAlbumArtists count=%ld", __p, 0x16u);
      }
      goto LABEL_31;
    }
  }
  else
  {
LABEL_21:
    if (AlbumArtistPersistentID)
      goto LABEL_22;
  }
  v19 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(__p);
    v21 = v27 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    v29 = v21;
    _os_log_impl(&dword_1AC149000, v19, OS_LOG_TYPE_DEFAULT, "not removing albumArtist=%{public}s", buf, 0xCu);
    if (v27 < 0)
      operator delete(*(void **)__p);
  }
LABEL_31:

  if ((unint64_t)objc_msgSend(*(id *)(a1 + 2080), "count") <= 0x3E7 && !*(_QWORD *)(a1 + 2064))
    return 1;
  return ML3ImportSession::flush((ML3ImportSession *)a1, 1);
}

void sub_1AC352F74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ML3ImportSession::addItemArtist(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  NSObject *v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  void **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _BOOL4 v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  NSObject *v43;
  unsigned __int8 *v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  NSObject *v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  void *v57;
  NSObject *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  NSObject *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  std::__shared_weak_count *v86;
  NSObject *log;
  int v88;
  _QWORD v89[2];
  _QWORD v90[2];
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97[2];
  void *__p[2];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint8_t buf[4];
  _BYTE *v103;
  __int16 v104;
  void **v105;
  _BYTE v106[12];
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v6 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(v106);
    v7 = SHIBYTE(v109);
    v8 = *(_BYTE **)v106;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 88))(__p);
    v9 = v106;
    if (v7 < 0)
      v9 = v8;
    if ((SBYTE7(v99) & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v103 = v9;
    v104 = 2082;
    v105 = v10;
    _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_DEFAULT, "adding itemArtist=%{public}s with track=%{public}s", buf, 0x16u);
    if (SBYTE7(v99) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v109) < 0)
      operator delete(*(void **)v106);
  }

  v11 = (std::__shared_weak_count *)a3[1];
  v97[0] = *a3;
  v97[1] = (uint64_t)v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v88 = ML3ImportSession::_prepareTrackForImport(a1, v97, 0, 0);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v88)
  {
    log = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(v106);
      v16 = SHIBYTE(v109);
      v17 = *(_BYTE **)v106;
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 88))(__p);
      v18 = v106;
      if (v16 < 0)
        v18 = v17;
      if ((SBYTE7(v99) & 0x80u) == 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v103 = v18;
      v104 = 2082;
      v105 = v19;
      _os_log_impl(&dword_1AC149000, log, OS_LOG_TYPE_ERROR, "Error adding item artist=%{public}s. Could not prepare track data for import=%{public}s", buf, 0x16u);
      if (SBYTE7(v99) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v109) < 0)
        operator delete(*(void **)v106);
    }
    goto LABEL_128;
  }
  v20 = (std::__shared_weak_count *)a2[1];
  v95 = *a2;
  v96 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  ML3ImportSession::_getGroupingKeyForItemArtistImportItem(a1, &v95);
  log = objc_claimAutoreleasedReturnValue();
  v23 = v96;
  if (v96)
  {
    v24 = (unint64_t *)&v96->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 167772176);
  v27 = v26;
  v28 = *a3;
  if (!*a3)
  {
    v84 = 0;
    goto LABEL_46;
  }
  v29 = *(_QWORD *)(v28 + 8);
  v30 = *(unsigned __int8 *)(v28 + 16);
  v31 = *(unsigned __int8 *)(v28 + 17);
  if (v30)
    v32 = v31 == 0;
  else
    v32 = 0;
  v84 = v29;
  if (!v32)
  {
LABEL_46:
    v35 = *a2;
    v34 = (std::__shared_weak_count *)a2[1];
    v93 = *a2;
    v94 = v34;
    v86 = v34;
    if (v34)
    {
      v36 = (unint64_t *)&v34->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v83 = v26;
    v85 = log;
    v38 = *(_DWORD *)(a1 + 248) > 0x3E7u || *(_BYTE *)(a1 + 1512) != 0;
    v39 = *(_DWORD *)(a1 + 32);
    v40 = ML3ItemArtistRulesIdentityImportPropertyForSource(v39);
    if (!(_DWORD)v40)
      goto LABEL_65;
    v41 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 32))(v35, v40);
    if (!v41)
      goto LABEL_65;
    if (v38 && !*(_BYTE *)(a1 + 1517))
      ML3ImportSession::_populateExistingArtistIdentifiersForSource((ML3ImportSession *)a1, *(unsigned int *)(a1 + 32));
    v42 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 1640), v41);
    if (!v42)
      goto LABEL_65;
    v33 = v42[3];
    v43 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v106 = 134218240;
      *(_QWORD *)&v106[4] = v33;
      v107 = 1024;
      LODWORD(v108) = v40;
      _os_log_impl(&dword_1AC149000, v43, OS_LOG_TYPE_DEFAULT, "matched to cached item artist pid %lld based on identity property %d", v106, 0x12u);
    }

    if (!v33)
    {
LABEL_65:
      if (!v85 || v39 - 1 < 2)
        goto LABEL_78;
      ML3CPPStringFromData((NSData *)v106, v85);
      v44 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a1 + 1088), v106);
      if (SHIBYTE(v109) < 0)
        operator delete(*(void **)v106);
      if (!v44)
        goto LABEL_78;
      v45 = (uint64_t *)*((_QWORD *)v44 + 5);
      v46 = (std::__shared_weak_count *)*((_QWORD *)v44 + 6);
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v33 = *v45;
      v49 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v106 = 134217984;
        *(_QWORD *)&v106[4] = v33;
        _os_log_impl(&dword_1AC149000, v49, OS_LOG_TYPE_DEFAULT, "matched to cached item artist pid %lld based on grouping key", v106, 0xCu);
      }

      if (v46)
      {
        v50 = (unint64_t *)&v46->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (!v33)
      {
        v35 = v93;
LABEL_78:
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 112))(v35);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v82 = v52;
        if (v52)
        {
          v100 = 0u;
          v101 = 0u;
          *(_OWORD *)__p = 0u;
          v99 = 0u;
          v53 = v52;
          v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", __p, v106, 16);
          if (v54)
          {
            v55 = *(_QWORD *)v99;
            while (2)
            {
              for (i = 0; i != v54; ++i)
              {
                if (*(_QWORD *)v99 != v55)
                  objc_enumerationMutation(v53);
                +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3Artist, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", *(_QWORD *)(a1 + 8), *((_QWORD *)__p[1] + i), 0);
                v57 = (void *)objc_claimAutoreleasedReturnValue();
                v33 = objc_msgSend(v57, "anyEntityPersistentID");
                if (v33)
                {
                  v58 = os_log_create("com.apple.amp.medialibrary", "Import");
                  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 134218242;
                    v103 = (_BYTE *)v33;
                    v104 = 2114;
                    v105 = (void **)v57;
                    _os_log_impl(&dword_1AC149000, v58, OS_LOG_TYPE_DEFAULT, "matched to item artist pid %lld using query %{public}@", buf, 0x16u);
                  }

                  goto LABEL_91;
                }

              }
              v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", __p, v106, 16);
              if (v54)
                continue;
              break;
            }
          }
          v33 = 0;
LABEL_91:

        }
        else
        {
          v33 = 0;
        }

      }
    }

    if (v86)
    {
      v59 = (unint64_t *)&v86->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if (v33)
    {
      v61 = *a2;
      *(_BYTE *)(v61 + 16) = 1;
      *(_QWORD *)(v61 + 8) = v33;
    }
    v27 = v83;
    goto LABEL_102;
  }
  v33 = 0;
LABEL_102:
  v62 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v106 = 134218496;
    *(_QWORD *)&v106[4] = v33;
    v107 = 2048;
    v108 = v27;
    v109 = 2048;
    v110 = v84;
    _os_log_impl(&dword_1AC149000, v62, OS_LOG_TYPE_DEFAULT, "importing itemArtistPID=%lld, syncID=%lld, trackPersistentID=%lld", v106, 0x20u);
  }

  v63 = (std::__shared_weak_count *)a2[1];
  v91 = *a2;
  v92 = v63;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v66 = *a3;
  v67 = (std::__shared_weak_count *)a3[1];
  v90[0] = v66;
  v90[1] = v67;
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  ML3ImportSession::_addItemArtist(a1, &v91, log, v90);
  if (v67)
  {
    v70 = (unint64_t *)&v67->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v72 = v92;
  if (v92)
  {
    v73 = (unint64_t *)&v92->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *a2;
  v76 = (std::__shared_weak_count *)a2[1];
  v89[0] = v75;
  v89[1] = v76;
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  ML3ImportSession::_addItemArtistDataToSourceMaps(a1, v89);
  if (v76)
  {
    v79 = (unint64_t *)&v76->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
LABEL_128:

  return v88 == 0;
}

void sub_1AC3538BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

id ML3ImportSession::_getGroupingKeyForItemArtistImportItem(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  char v7;
  __CFString *v8;
  void *v9;
  _BYTE v11[32];
  std::string __p;
  std::string v13;

  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(&v11[24], *a2, 318767105);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    *(_QWORD *)&v11[24] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = __p;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(&v11[24], *a2, 318767107);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    *(_QWORD *)&v11[24] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)v11 = __p;
  }
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 16777217);
  v5 = *(void **)(a1 + 8);
  ML3CPPBridgeString((const UInt8 *)&v13, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MLMediaTypeByStandardizingMediaType(v4);
  if ((v7 & 8) != 0)
  {
    v8 = &stru_1E5B66908;
  }
  else
  {
    ML3CPPBridgeString(v11, 0);
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v5, "artistGroupingKeyForArtistName:seriesName:", v6, v8, *(_OWORD *)v11, *(_OWORD *)&v11[16]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v7 & 8) == 0)

  if ((v11[23] & 0x80000000) != 0)
    operator delete(*(void **)v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1AC353B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void ML3ImportSession::_addItemArtist(uint64_t a1, _QWORD *a2, void *a3, _QWORD *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int shouldPreserveTrackProperty;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  NSObject *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  _QWORD *v33;
  std::string::size_type v34;
  unint64_t *v35;
  unint64_t v36;
  _BOOL4 v37;
  NSObject *v38;
  _QWORD *v39;
  unint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __CFString *v67;
  void *v68;
  void *v69;
  unsigned __int8 *v70;
  unint64_t *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  NSObject *v77;
  NSObject *v78;
  _BYTE *v79;
  unint64_t v80;
  _QWORD *v81;
  NSObject *v82;
  _BYTE *v83;
  std::string::size_type v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  std::string::size_type v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *size;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t *v100;
  const void *v101;
  _QWORD *v102;
  _QWORD *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::string::size_type v109;
  std::string::size_type v110;
  uint64_t v111;
  std::string::size_type v112;
  std::string::size_type v113;
  NSObject *v114;
  std::string::__raw *v115;
  std::string::__raw *v116;
  std::string::__raw *v117;
  std::string::__raw *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::string::size_type v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  __int128 v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  int v151;
  NSObject *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  NSObject *v158;
  uint64_t v159;
  uint64_t v160;
  const std::string *v161;
  std::string::size_type v162;
  std::string::size_type v163;
  std::string *v164;
  const std::string *v165;
  NSObject *v166;
  _BYTE *v167;
  unint64_t v168;
  unint64_t *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  NSObject *v173;
  unint64_t *v174;
  unint64_t v175;
  NSObject *v176;
  std::string::__raw *v177;
  std::string *v178;
  uint64_t v179;
  const std::string *v180;
  std::string::size_type v181;
  std::string::size_type v182;
  std::string *v183;
  const std::string *v184;
  NSObject *v185;
  std::string::__raw *v186;
  std::string *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t PropertyIndex;
  std::string::size_type v191;
  std::string::size_type v192;
  std::string::size_type v193;
  std::string::size_type v194;
  char v195;
  std::string::size_type v196;
  std::string::size_type v197;
  const void **p_data;
  std::string *v199;
  uint64_t v200;
  int v201;
  std::string::size_type v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  char v206;
  char v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  NSObject *v215;
  std::string::__raw *v216;
  std::string *v217;
  unint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  NSObject *v224;
  std::string::__raw *v225;
  uint64_t v226;
  uint64_t v227;
  std::string::size_type v228;
  std::string::size_type v229;
  std::string::size_type v230;
  std::string::size_type v231;
  char v232;
  std::string::size_type v233;
  std::string::size_type v234;
  const void **v235;
  std::string *v236;
  uint64_t v237;
  int v238;
  std::string::size_type v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  char v243;
  char v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  NSObject *v252;
  std::string::__raw *v253;
  std::string *v254;
  unint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  NSObject *v261;
  std::string::__raw *v262;
  _QWORD *v263;
  int v264;
  int v265;
  int v266;
  NSObject *v267;
  int v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  id v288;
  uint64_t v290;
  std::__shared_weak_count *v291;
  __int128 v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  _QWORD v297[2];
  std::string v298;
  _QWORD v299[2];
  std::string v300;
  unint64_t v301;
  _QWORD *v302;
  std::__shared_weak_count *v303;
  uint64_t v304[2];
  _QWORD v305[15];
  std::__shared_weak_count *v306;
  uint64_t v307;
  std::__shared_weak_count *v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  BOOL v312;
  uint64_t v313;
  std::__shared_weak_count *v314;
  _QWORD v315[2];
  uint64_t v316;
  char *v317;
  uint64_t v318;
  BOOL v319;
  uint64_t v320;
  id *v321;
  uint64_t v322;
  uint64_t (*v323)(uint64_t, uint64_t);
  void (*v324)(uint64_t);
  id v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  const std::string *v335;
  uint64_t v336;
  __n128 (*v337)(__n128 *, __n128 *);
  void (*v338)(uint64_t);
  uint64_t v339;
  std::string __p;
  uint64_t v341;
  const std::string *v342;
  uint64_t v343;
  __n128 (*v344)(__n128 *, __n128 *);
  void (*v345)(uint64_t);
  uint64_t v346;
  std::string v347;
  uint64_t v348;
  const std::string *v349;
  uint64_t v350;
  __n128 (*v351)(__n128 *, __n128 *);
  void (*v352)(uint64_t);
  uint64_t v353;
  std::string v354;
  uint64_t v355;
  const std::string *v356;
  uint64_t v357;
  __n128 (*v358)(__n128 *, __n128 *);
  void (*v359)(uint64_t);
  uint64_t v360;
  std::string v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  __n128 (*v365)(__n128 *, __n128 *);
  uint64_t (*v366)(uint64_t);
  const char *v367;
  uint64_t v368;
  std::__shared_weak_count *v369;
  uint64_t v370;
  _BYTE buf[64];
  unint64_t v372;
  __int16 v373;
  std::string::size_type v374;
  __int16 v375;
  uint64_t v376;
  __int16 v377;
  std::string::size_type v378;
  __int16 v379;
  uint64_t v380;
  void *v381;
  void *v382;
  std::string v383;
  std::string v384;
  __n128 (*v385)(__n128 *, __n128 *);
  uint64_t (*v386)(uint64_t);
  const char *v387;
  uint64_t v388;
  std::__shared_weak_count *v389;
  uint64_t v390;

  v390 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = *a2;
  v8 = *(_QWORD *)(*a4 + 8);
  v370 = v8;
  v362 = 0;
  v363 = &v362;
  v364 = 0x4012000000;
  v365 = __Block_byref_object_copy__337;
  v366 = __Block_byref_object_dispose__338;
  v369 = 0;
  v367 = "";
  v368 = 0;
  v355 = 0;
  v356 = (const std::string *)&v355;
  v357 = 0x4812000000;
  v358 = __Block_byref_object_copy__214;
  v359 = __Block_byref_object_dispose__215;
  v360 = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(buf, v7, 318767105);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v361, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v361 = *(std::string *)&buf[16];
  }
  v348 = 0;
  v349 = (const std::string *)&v348;
  v350 = 0x4812000000;
  v351 = __Block_byref_object_copy__214;
  v352 = __Block_byref_object_dispose__215;
  v353 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 168))(buf, *a2, 1);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v354, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v354 = *(std::string *)&buf[16];
  }
  v341 = 0;
  v342 = (const std::string *)&v341;
  v343 = 0x4812000000;
  v344 = __Block_byref_object_copy__214;
  v345 = __Block_byref_object_dispose__215;
  v346 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(buf, *a2, 318767107);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v347, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v347 = *(std::string *)&buf[16];
  }
  v334 = 0;
  v335 = (const std::string *)&v334;
  v336 = 0x4812000000;
  v337 = __Block_byref_object_copy__214;
  v338 = __Block_byref_object_dispose__215;
  v339 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a2 + 176))(buf, *a2, 0);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    __p = *(std::string *)&buf[16];
  }
  v330 = 0;
  v331 = &v330;
  v332 = 0x2020000000;
  v333 = 0;
  v333 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 167772176);
  v326 = 0;
  v327 = &v326;
  v328 = 0x2020000000;
  v329 = 0;
  v329 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 318767111);
  v320 = 0;
  v321 = (id *)&v320;
  v322 = 0x3032000000;
  v323 = __Block_byref_object_copy__212;
  v324 = __Block_byref_object_dispose__213;
  v288 = v6;
  v325 = v288;
  v316 = 0;
  v317 = (char *)&v316;
  v318 = 0x2020000000;
  v319 = 0;
  v319 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 318767118) != 0;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 32))(*a4, 16777217);
  v10 = (MLMediaTypeByStandardizingMediaType(v9) & 8) == 0;
  if (*(_BYTE *)(*a4 + 16))
  {
    v11 = *(void **)(a1 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v8);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v382 = v12;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v382, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "executeQuery:withParameters:", CFSTR("SELECT item_artist_pid FROM item WHERE ROWID = ?"), v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = objc_msgSend(v14, "int64ValueForFirstRowAndColumn");
    v16 = (std::__shared_weak_count *)a4[1];
    v315[0] = *a4;
    v315[1] = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(a1, (uint64_t)v315, 0x1000004u);
    if (v16)
    {
      v20 = (unint64_t *)&v16->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v15)
      v22 = 0;
    else
      v22 = shouldPreserveTrackProperty;
    if (v22 == 1)
    {
      v23 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v23, OS_LOG_TYPE_DEFAULT, "Not updating/creating item artist as pid=0 AND persistentID is preserved by a higher source", buf, 2u);
      }

      v24 = v370;
      ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)&v313);
      v25 = v314;
      ML3ImportSession::_setArtistInfoForTrackPersistentID(a1, v24, v313, (uint64_t)v314);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }

      goto LABEL_462;
    }
    if (!*(_BYTE *)(*a4 + 17))
    {
      v46 = *a2;
      *(_QWORD *)(v46 + 8) = v15;
      *(_BYTE *)(v46 + 16) = 1;
      v47 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        v48 = *(_QWORD *)(*a4 + 8);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v48;
        _os_log_impl(&dword_1AC149000, v47, OS_LOG_TYPE_DEFAULT, "Setting itemArtistPID=%lld for trackPID=%lld", buf, 0x16u);
      }

      if (v15)
      {
        v49 = *(void **)(a1 + 16);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v15);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v381 = v50;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v381, 1);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "executeQuery:withParameters:", CFSTR("SELECT item_artist, sort_item_artist, series_name, sort_series_name, representative_item_pid, store_id, grouping_key, sync_id, classical_experience_available FROM item_artist WHERE item_artist_pid=?"), v51);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v53 = v52;
        v305[0] = MEMORY[0x1E0C809B0];
        v305[1] = 3321888768;
        v305[2] = ___ZN16ML3ImportSession14_addItemArtistENSt3__110shared_ptrI13ML3ImportItemEEP6NSDataS3__block_invoke;
        v305[3] = &unk_1E5B52598;
        v54 = *a2;
        v55 = (std::__shared_weak_count *)a2[1];
        v305[13] = a1;
        v305[14] = v54;
        v306 = v55;
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
        }
        v305[4] = &v355;
        v305[5] = &v348;
        v305[6] = &v341;
        v305[7] = &v334;
        v305[8] = &v316;
        v305[9] = &v326;
        v305[10] = &v330;
        v305[11] = &v320;
        v312 = v10;
        v311 = 16777220;
        v58 = (std::__shared_weak_count *)a4[1];
        v307 = *a4;
        v308 = v58;
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        v305[12] = &v362;
        v309 = v15;
        v310 = v370;
        objc_msgSend(v52, "enumerateRowsWithBlock:", v305);

        v61 = v308;
        if (v308)
        {
          v62 = (unint64_t *)&v308->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v64 = v306;
        if (v306)
        {
          v65 = (unint64_t *)&v306->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
      }
      else
      {
        v77 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v370;
          _os_log_impl(&dword_1AC149000, v77, OS_LOG_TYPE_ERROR, "itemArtist for trackPersistentID=%lld does not exist", buf, 0xCu);
        }

      }
    }

  }
  if (v363[6])
  {
    v28 = v331;
  }
  else
  {
    v29 = objc_msgSend(v321[5], "length");
    v28 = v331;
    if (!v29 && !v331[3] && !*(_QWORD *)(*a2 + 8))
    {
      _ML3LogCategoryImport();
      v78 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(buf);
        v79 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        LODWORD(v384.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v384.__r_.__value_.__r.__words + 4) = (std::string::size_type)v79;
        _os_log_impl(&dword_1AC149000, v78, OS_LOG_TYPE_ERROR, "Item artist=%{public}s has an empty grouping key and no syncID/PID. Creating a default item artist import item", (uint8_t *)&v384, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }

      v80 = v370;
      ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)v304);
      ML3ImportSession::_setArtistInfoForTrackPersistentID(a1, v80, v304[0], v304[1]);
      std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)v304);
      goto LABEL_462;
    }
  }
  v30 = *(_QWORD *)(*a2 + 8);
  v31 = v28[3];
  v32 = v321[5];
  if (objc_msgSend(v32, "length") | v30 | v31)
  {
    v384.__r_.__value_.__r.__words[0] = 0;
    v384.__r_.__value_.__l.__size_ = (std::string::size_type)&v384;
    v384.__r_.__value_.__r.__words[2] = 0x4012000000;
    v385 = __Block_byref_object_copy__337;
    v386 = __Block_byref_object_dispose__338;
    v388 = 0;
    v389 = 0;
    v387 = "";
    if (v30)
    {
      v33 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 1840), v30);
      if (v33)
      {
        std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](&v388, v33[3], v33[4]);
        v34 = *(_QWORD *)(v384.__r_.__value_.__l.__size_ + 56);
        v300.__r_.__value_.__r.__words[0] = *(_QWORD *)(v384.__r_.__value_.__l.__size_ + 48);
        v300.__r_.__value_.__l.__size_ = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
LABEL_51:
        v37 = 1;
LABEL_133:
        _Block_object_dispose(&v384, 8);
        v93 = v389;
        if (v389)
        {
          v94 = (unint64_t *)&v389->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        goto LABEL_138;
      }
      objc_msgSend(CFSTR("SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available, representative_item_pid, grouping_key FROM item_artist WHERE "), "stringByAppendingString:", CFSTR("(ROWID=?)"));
      v67 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v30);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      v383.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v383, 1);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_128;
    }
    if (v31)
    {
      v39 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 968), v31);
      if (!v39)
        goto LABEL_122;
      v40 = (unint64_t *)v39[3];
      v41 = (std::__shared_weak_count *)v39[4];
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        v44 = *v40;
        do
          v45 = __ldaxr(v42);
        while (__stlxr(v45 - 1, v42));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      else
      {
        v44 = *v40;
      }
    }
    else
    {
      if (!objc_msgSend(v32, "length"))
      {
        if (!v32)
          goto LABEL_478;
        goto LABEL_98;
      }
      ML3CPPStringFromData((NSData *)buf, v32);
      v70 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a1 + 1088), buf);
      if (v70)
      {
        v71 = (unint64_t *)*((_QWORD *)v70 + 5);
        v72 = (std::__shared_weak_count *)*((_QWORD *)v70 + 6);
        if (v72)
        {
          v73 = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
          v44 = *v71;
          v75 = (unint64_t *)&v72->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        else
        {
          v44 = *v71;
        }
      }
      else
      {
        v44 = 0;
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (v44)
    {
      v81 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 1840), v44);
      if (v81)
      {
        std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)(v384.__r_.__value_.__l.__size_ + 48), v81[3], v81[4]);
        v82 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v384.__r_.__value_.__l.__size_ + 48) + 88))(buf);
          v83 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
          LODWORD(v383.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v383.__r_.__value_.__r.__words + 4) = (std::string::size_type)v83;
          _os_log_impl(&dword_1AC149000, v82, OS_LOG_TYPE_DEFAULT, "Found artist=%{public}s in the grouping key cache", (uint8_t *)&v383, 0xCu);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }

        v84 = *(_QWORD *)(v384.__r_.__value_.__l.__size_ + 56);
        v300.__r_.__value_.__r.__words[0] = *(_QWORD *)(v384.__r_.__value_.__l.__size_ + 48);
        v300.__r_.__value_.__l.__size_ = v84;
        if (v84)
        {
          v85 = (unint64_t *)(v84 + 8);
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
        goto LABEL_51;
      }
    }
LABEL_122:
    if (v32 && v31)
    {
      objc_msgSend(CFSTR("SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available, representative_item_pid, grouping_key FROM item_artist WHERE "), "stringByAppendingString:", CFSTR("(ROWID=? OR sync_id=?) OR grouping_key=?"));
      v67 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v31);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      v383.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v31);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      v383.__r_.__value_.__l.__size_ = (std::string::size_type)v87;
      v383.__r_.__value_.__r.__words[2] = (std::string::size_type)v32;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v383, 3);
      v88 = objc_claimAutoreleasedReturnValue();
LABEL_127:
      v69 = (void *)v88;

LABEL_128:
      goto LABEL_129;
    }
    if (v31)
    {
      objc_msgSend(CFSTR("SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available, representative_item_pid, grouping_key FROM item_artist WHERE "), "stringByAppendingString:", CFSTR("(ROWID=? OR sync_id=?)"));
      v67 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v31);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      v383.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v31);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      v383.__r_.__value_.__l.__size_ = (std::string::size_type)v87;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v383, 2);
      v88 = objc_claimAutoreleasedReturnValue();
      goto LABEL_127;
    }
    if (!v32)
    {
LABEL_478:
      v69 = 0;
      v67 = CFSTR("SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available, representative_item_pid, grouping_key FROM item_artist WHERE ");
      goto LABEL_129;
    }
LABEL_98:
    objc_msgSend(CFSTR("SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available, representative_item_pid, grouping_key FROM item_artist WHERE "), "stringByAppendingString:", CFSTR("grouping_key=?"));
    v67 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v383.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v383, 1);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_129:
    objc_msgSend(*(id *)(a1 + 16), "executeQuery:withParameters:", v67, v69);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZN16ML3ImportSession41_getArtistImportItemForGroupingKeyAndPIDsEP6NSDataxxRb_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E5B650D0;
    *(_QWORD *)&buf[48] = a1;
    *(_QWORD *)&buf[40] = &v384;
    *(_QWORD *)&buf[32] = v32;
    *(_QWORD *)&buf[56] = v30;
    v372 = v31;
    objc_msgSend(v89, "enumerateRowsWithBlock:", buf);
    v90 = *(_QWORD *)(v384.__r_.__value_.__l.__size_ + 56);
    v300.__r_.__value_.__r.__words[0] = *(_QWORD *)(v384.__r_.__value_.__l.__size_ + 48);
    v300.__r_.__value_.__l.__size_ = v90;
    if (v90)
    {
      v91 = (unint64_t *)(v90 + 8);
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }

    v37 = 0;
    goto LABEL_133;
  }
  v38 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AC149000, v38, OS_LOG_TYPE_DEFAULT, "Invalid parameters to find artist", buf, 2u);
  }

  v37 = 0;
  *(_OWORD *)&v300.__r_.__value_.__l.__data_ = 0uLL;
LABEL_138:

  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v363 + 6), (__int128 *)&v300);
  size = (std::__shared_weak_count *)v300.__r_.__value_.__l.__size_;
  v97 = a1;
  if (v300.__r_.__value_.__l.__size_)
  {
    v98 = (unint64_t *)(v300.__r_.__value_.__l.__size_ + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v100 = v363;
  v101 = (const void *)v363[6];
  if (!v101)
  {
    if (objc_msgSend(v321[5], "length"))
    {
      v107 = v331[3];
      if (!v107)
      {
        v170 = (std::__shared_weak_count *)a2[1];
        v293 = *a2;
        v294 = v170;
        if (v170)
        {
          v171 = (unint64_t *)&v170->__shared_owners_;
          do
            v172 = __ldxr(v171);
          while (__stxr(v172 + 1, v171));
        }
        v107 = objc_msgSend(*(id *)(a1 + 112), "nextPersistentID");
        v173 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v107;
          _os_log_impl(&dword_1AC149000, v173, OS_LOG_TYPE_DEFAULT, "created new item artist pid %lld", buf, 0xCu);
        }

        if (v170)
        {
          v174 = (unint64_t *)&v170->__shared_owners_;
          v97 = a1;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
            std::__shared_weak_count::__release_weak(v170);
          }
        }
        else
        {
          v97 = a1;
        }
      }
      v108 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v97, (uint64_t)&v349[2], (uint64_t)&v356[2]);
      v110 = v109;
      v383.__r_.__value_.__r.__words[0] = v108;
      v383.__r_.__value_.__l.__size_ = v109;
      v111 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v97, (uint64_t)&v335[2], (uint64_t)&v342[2]);
      v113 = v112;
      v300.__r_.__value_.__r.__words[0] = v111;
      v300.__r_.__value_.__l.__size_ = v112;
      v114 = os_log_create("com.apple.amp.medialibrary", "Import_Oversize");
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
      {
        v115 = (std::string::__raw *)&v356[2];
        if (SHIBYTE(v356[2].__r_.__value_.__r.__words[2]) < 0)
          v115 = (std::string::__raw *)v115->__words[0];
        v116 = (std::string::__raw *)&v349[2];
        if (SHIBYTE(v349[2].__r_.__value_.__r.__words[2]) < 0)
          v116 = (std::string::__raw *)v116->__words[0];
        v117 = (std::string::__raw *)&v342[2];
        if (SHIBYTE(v342[2].__r_.__value_.__r.__words[2]) < 0)
          v117 = (std::string::__raw *)v117->__words[0];
        v118 = (std::string::__raw *)&v335[2];
        if (SHIBYTE(v335[2].__r_.__value_.__r.__words[2]) < 0)
          v118 = (std::string::__raw *)v118->__words[0];
        v119 = v327[3];
        *(_DWORD *)buf = 134220546;
        *(_QWORD *)&buf[4] = v107;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v370;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v115;
        *(_WORD *)&buf[32] = 2082;
        *(_QWORD *)&buf[34] = v116;
        *(_WORD *)&buf[42] = 2082;
        *(_QWORD *)&buf[44] = v117;
        *(_WORD *)&buf[52] = 2082;
        *(_QWORD *)&buf[54] = v118;
        *(_WORD *)&buf[62] = 2048;
        v372 = v119;
        v373 = 2048;
        v374 = v110;
        v375 = 2048;
        v376 = v108;
        v377 = 2048;
        v378 = v113;
        v379 = 2048;
        v380 = v111;
        _os_log_impl(&dword_1AC149000, v114, OS_LOG_TYPE_DEFAULT, "creating new item artist entry: pid=%lld, representative_item_pid=%lld, name='%{public}s', sortName='%{public}s', series='%{public}s', sortSeries='%{public}s', storeID=%lld, order.section=%ld, order.sortOrder=%lld, order.section=%ld, order.sortOrder=%lld ", buf, 0x70u);
      }

      memset(buf, 0, 24);
      LODWORD(v384.__r_.__value_.__l.__data_) = 0;
      LODWORD(v302) = 0;
      std::allocate_shared[abi:ne180100]<ML3ArtistData,std::allocator<ML3ArtistData>,long long &,std::string &,std::string &,std::string &,std::string &,long long &,ML3NameOrder &,ML3NameOrder &,long long &,std::string,BOOL &,int,int,void>(&v298, v107, (uint64_t)&v356[2], (uint64_t)&v349[2], (uint64_t)&v342[2], (uint64_t)&v335[2], v327 + 3, (uint64_t *)&v383, (uint64_t *)&v300, v331 + 3, (uint64_t)buf, v317 + 24, (int *)&v384, (int *)&v302);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      std::allocate_shared[abi:ne180100]<ML3ArtistImportItem,std::allocator<ML3ArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long &,void>(buf, v298.__r_.__value_.__l.__data_, (std::__shared_weak_count *)v298.__r_.__value_.__l.__size_, v321 + 5, &v370);
      std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v363 + 6), (__int128 *)buf);
      v120 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v121 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      v124 = v363[6];
      v123 = v363[7];
      *(_QWORD *)buf = v107;
      *(_QWORD *)&buf[8] = v124;
      *(_QWORD *)&buf[16] = v123;
      if (v123)
      {
        v125 = (unint64_t *)(v123 + 8);
        do
          v126 = __ldxr(v125);
        while (__stxr(v126 + 1, v125));
      }
      std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>(a1 + 1840, v107, (uint64_t)buf);
      v127 = *(std::__shared_weak_count **)&buf[16];
      if (*(_QWORD *)&buf[16])
      {
        v128 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      ML3CPPStringFromData((NSData *)&v384, v321[5]);
      *(_OWORD *)buf = *(_OWORD *)&v384.__r_.__value_.__l.__data_;
      v130 = v384.__r_.__value_.__r.__words[2];
      memset(&v384, 0, sizeof(v384));
      *(_QWORD *)&buf[16] = v130;
      *(_OWORD *)&buf[24] = *(_OWORD *)&v298.__r_.__value_.__l.__data_;
      if (v298.__r_.__value_.__l.__size_)
      {
        v131 = (unint64_t *)(v298.__r_.__value_.__l.__size_ + 8);
        do
          v132 = __ldxr(v131);
        while (__stxr(v132 + 1, v131));
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(a1 + 1088, buf, (uint64_t)buf);
      v133 = *(std::__shared_weak_count **)&buf[32];
      if (*(_QWORD *)&buf[32])
      {
        v134 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v384.__r_.__value_.__l.__data_);
      v136 = v370;
      v137 = *(_OWORD *)&v298.__r_.__value_.__l.__data_;
      v292 = *(_OWORD *)&v298.__r_.__value_.__l.__data_;
      if (v298.__r_.__value_.__l.__size_)
      {
        v138 = (unint64_t *)(v298.__r_.__value_.__l.__size_ + 8);
        do
          v139 = __ldxr(v138);
        while (__stxr(v139 + 1, v138));
      }
      ML3ImportSession::_setArtistInfoForTrackPersistentID(a1, v136, v137, *((uint64_t *)&v137 + 1));
      if (*((_QWORD *)&v137 + 1))
      {
        v140 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v137 + 1) + 16))(*((_QWORD *)&v137 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v137 + 1));
        }
      }
      *(_QWORD *)(*a2 + 8) = v107;
      v142 = (std::__shared_weak_count *)v298.__r_.__value_.__l.__size_;
      if (!v298.__r_.__value_.__l.__size_)
        goto LABEL_462;
      v143 = (unint64_t *)(v298.__r_.__value_.__l.__size_ + 8);
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
    }
    else
    {
      v166 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(buf);
        v167 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        LODWORD(v384.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v384.__r_.__value_.__r.__words + 4) = (std::string::size_type)v167;
        _os_log_impl(&dword_1AC149000, v166, OS_LOG_TYPE_ERROR, "Item artist=%{public}s has an empty grouping key and no syncID. Creating a default item artist import item", (uint8_t *)&v384, 0xCu);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }

      v168 = v370;
      ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)&v290);
      v142 = v291;
      ML3ImportSession::_setArtistInfoForTrackPersistentID(a1, v168, v290, (uint64_t)v291);
      if (!v142)
        goto LABEL_462;
      v169 = (unint64_t *)&v142->__shared_owners_;
      do
        v144 = __ldaxr(v169);
      while (__stlxr(v144 - 1, v169));
    }
LABEL_460:
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
    goto LABEL_462;
  }
  v103 = v102;
  if (v102)
  {
    v104 = (std::__shared_weak_count *)v100[7];
    v302 = v102;
    v303 = v104;
    if (v104)
    {
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
  }
  else
  {
    v302 = 0;
    v303 = 0;
  }
  v145 = v102[1];
  v301 = v145;
  if (!v37)
    v37 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 1840), v145) != 0;
  v146 = *a2;
  *(_QWORD *)(v146 + 8) = v145;
  *(_BYTE *)(v146 + 16) = 0;
  v147 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v103 + 32))(v103, 318767111);
  v148 = v147;
  v149 = v327[3];
  if (v149)
    v150 = v149 == v147;
  else
    v150 = 1;
  v151 = !v150;
  if (!v150)
  {
    *(_QWORD *)(v103[8] + 104) = v149;
    v152 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
    {
      v153 = v327[3];
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v153;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v148;
      _os_log_impl(&dword_1AC149000, v152, OS_LOG_TYPE_DEFAULT, "Setting artistStoreID=%lld (oldValue = %lld)", buf, 0x16u);
    }

  }
  v154 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v103 + 32))(v103, 167772176);
  v155 = v154;
  v156 = v331[3];
  if (v156)
    v157 = v156 == v154;
  else
    v157 = 1;
  if (!v157)
  {
    *(_QWORD *)(v103[8] + 144) = v156;
    v158 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
    {
      v159 = v331[3];
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v159;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v155;
      _os_log_impl(&dword_1AC149000, v158, OS_LOG_TYPE_DEFAULT, "Setting artistSyncID=%lld (oldValue = %lld)", buf, 0x16u);
    }

    v151 = 1;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(*v103 + 24))(buf, v103, 318767105);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v384, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v384 = *(std::string *)&buf[16];
  }
  v160 = HIBYTE(v356[2].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v356[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v356[2].__r_.__value_.__l.__size_)
      goto LABEL_271;
  }
  else if (!*((_BYTE *)&v356[2].__r_.__value_.__s + 23))
  {
    goto LABEL_271;
  }
  v161 = v356 + 2;
  if ((v160 & 0x80u) == 0)
    v162 = HIBYTE(v356[2].__r_.__value_.__r.__words[2]);
  else
    v162 = v356[2].__r_.__value_.__l.__size_;
  v163 = HIBYTE(v384.__r_.__value_.__r.__words[2]);
  if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v163 = v384.__r_.__value_.__l.__size_;
  if (v162 == v163)
  {
    if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v164 = &v384;
    else
      v164 = (std::string *)v384.__r_.__value_.__r.__words[0];
    if ((v160 & 0x80) != 0)
    {
      if (!memcmp(v161->__r_.__value_.__l.__data_, v164, v356[2].__r_.__value_.__l.__size_))
        goto LABEL_271;
    }
    else
    {
      if (!*((_BYTE *)&v356[2].__r_.__value_.__s + 23))
        goto LABEL_271;
      v165 = v356 + 2;
      while (v165->__r_.__value_.__s.__data_[0] == v164->__r_.__value_.__s.__data_[0])
      {
        v165 = (const std::string *)((char *)v165 + 1);
        v164 = (std::string *)((char *)v164 + 1);
        if (!--v160)
          goto LABEL_271;
      }
    }
  }
  std::string::operator=((std::string *)(v103[8] + 8), v161);
  v176 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
  {
    v177 = (std::string::__raw *)&v356[2];
    if (SHIBYTE(v356[2].__r_.__value_.__r.__words[2]) < 0)
      v177 = (std::string::__raw *)v177->__words[0];
    v178 = &v384;
    if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v178 = (std::string *)v384.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v177;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v178;
    _os_log_impl(&dword_1AC149000, v176, OS_LOG_TYPE_DEFAULT, "Setting artistName=%{public}s (oldValue=%{public}s)", buf, 0x16u);
  }

  v151 = 1;
LABEL_271:
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(*v103 + 24))(buf, v103, 318767107);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v383, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v383 = *(std::string *)&buf[16];
  }
  v179 = HIBYTE(v342[2].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v342[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v342[2].__r_.__value_.__l.__size_)
      goto LABEL_302;
  }
  else if (!*((_BYTE *)&v342[2].__r_.__value_.__s + 23))
  {
    goto LABEL_302;
  }
  v180 = v342 + 2;
  if ((v179 & 0x80u) == 0)
    v181 = HIBYTE(v342[2].__r_.__value_.__r.__words[2]);
  else
    v181 = v342[2].__r_.__value_.__l.__size_;
  v182 = HIBYTE(v383.__r_.__value_.__r.__words[2]);
  if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v182 = v383.__r_.__value_.__l.__size_;
  if (v181 == v182)
  {
    if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v183 = &v383;
    else
      v183 = (std::string *)v383.__r_.__value_.__r.__words[0];
    if ((v179 & 0x80) != 0)
    {
      if (!memcmp(v180->__r_.__value_.__l.__data_, v183, v342[2].__r_.__value_.__l.__size_))
        goto LABEL_302;
    }
    else
    {
      if (!*((_BYTE *)&v342[2].__r_.__value_.__s + 23))
        goto LABEL_302;
      v184 = v342 + 2;
      while (v184->__r_.__value_.__s.__data_[0] == v183->__r_.__value_.__s.__data_[0])
      {
        v184 = (const std::string *)((char *)v184 + 1);
        v183 = (std::string *)((char *)v183 + 1);
        if (!--v179)
          goto LABEL_302;
      }
    }
  }
  std::string::operator=((std::string *)(v103[8] + 56), v180);
  v185 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
  {
    v186 = (std::string::__raw *)&v342[2];
    if (SHIBYTE(v342[2].__r_.__value_.__r.__words[2]) < 0)
      v186 = (std::string::__raw *)v186->__words[0];
    v187 = &v383;
    if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v187 = (std::string *)v383.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v186;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v187;
    _os_log_impl(&dword_1AC149000, v185, OS_LOG_TYPE_DEFAULT, "Setting artistSeriesName=%{public}s (oldValue=%{public}s)", buf, 0x16u);
  }

  v151 = 1;
LABEL_302:
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(*v103 + 24))(buf, v103, 318767106);
  v188 = a1;
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v300, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v300 = *(std::string *)&buf[16];
  }
  v189 = *(int *)(a1 + 32);
  PropertyIndex = ML3TrackRulesGetPropertyIndex(10, 167772167);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__specialRules + 56 * PropertyIndex + 4 * v189) == -1)
    goto LABEL_360;
  v191 = HIBYTE(v349[2].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v349[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v349[2].__r_.__value_.__l.__size_)
      goto LABEL_328;
  }
  else if (!*((_BYTE *)&v349[2].__r_.__value_.__s + 23))
  {
LABEL_328:
    if ((v191 & 0x80) != 0)
      v191 = v349[2].__r_.__value_.__l.__size_;
    goto LABEL_331;
  }
  v192 = v349[2].__r_.__value_.__l.__size_;
  if ((v191 & 0x80u) == 0)
    v193 = HIBYTE(v349[2].__r_.__value_.__r.__words[2]);
  else
    v193 = v349[2].__r_.__value_.__l.__size_;
  v194 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
  v195 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
  v196 = v300.__r_.__value_.__l.__size_;
  if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v197 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
  else
    v197 = v300.__r_.__value_.__l.__size_;
  if (v193 == v197)
  {
    p_data = (const void **)&v349[2].__r_.__value_.__l.__data_;
    if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v199 = &v300;
    else
      v199 = (std::string *)v300.__r_.__value_.__r.__words[0];
    if ((v191 & 0x80) != 0)
    {
      v201 = memcmp(*p_data, v199, v349[2].__r_.__value_.__l.__size_);
      v191 = v192;
      if (!v201)
      {
LABEL_331:
        if (v191)
          goto LABEL_360;
        v194 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
        v196 = v300.__r_.__value_.__l.__size_;
        v195 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
LABEL_333:
        if (v195 >= 0)
          v202 = v194;
        else
          v202 = v196;
        if (!v202)
          goto LABEL_360;
      }
    }
    else
    {
      if (!*((_BYTE *)&v349[2].__r_.__value_.__s + 23))
        goto LABEL_333;
      v200 = HIBYTE(v349[2].__r_.__value_.__r.__words[2]);
      while (*(unsigned __int8 *)p_data == v199->__r_.__value_.__s.__data_[0])
      {
        p_data = (const void **)((char *)p_data + 1);
        v199 = (std::string *)((char *)v199 + 1);
        if (!--v200)
          goto LABEL_328;
      }
    }
  }
  v203 = (std::__shared_weak_count *)a4[1];
  v299[0] = *a4;
  v299[1] = v203;
  if (v203)
  {
    v204 = (unint64_t *)&v203->__shared_owners_;
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 1, v204));
  }
  v206 = ML3ImportSession::_shouldPreserveTrackProperty(a1, (uint64_t)v299, 0xA000007u);
  v207 = v206;
  if (!v203)
    goto LABEL_344;
  v208 = (unint64_t *)&v203->__shared_owners_;
  do
    v209 = __ldaxr(v208);
  while (__stlxr(v209 - 1, v208));
  if (!v209)
  {
    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
    std::__shared_weak_count::__release_weak(v203);
    if ((v207 & 1) != 0)
      goto LABEL_360;
  }
  else
  {
LABEL_344:
    if ((v206 & 1) != 0)
      goto LABEL_360;
  }
  v210 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a1, (uint64_t)&v349[2], (uint64_t)&v356[2]);
  v212 = v211;
  v213 = v302;
  std::string::operator=((std::string *)(v302[8] + 32), v349 + 2);
  v214 = v213[8];
  *(_QWORD *)(v214 + 112) = v210;
  *(_QWORD *)(v214 + 120) = v212;
  v215 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
  {
    v216 = (std::string::__raw *)&v349[2];
    if (SHIBYTE(v349[2].__r_.__value_.__r.__words[2]) < 0)
      v216 = (std::string::__raw *)v216->__words[0];
    v217 = &v300;
    if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v217 = (std::string *)v300.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = v216;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v210;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v212;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = v217;
    _os_log_impl(&dword_1AC149000, v215, OS_LOG_TYPE_DEFAULT, "Setting artistSortName=%{public}s, order=%lld, section=%d (oldValue=%{public}s)", buf, 0x26u);
  }

  v218 = v301;
  v219 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 1680), v301);
  if (v219)
  {
    v220 = v219[3];
    v221 = v219[4];
    if (v221 != v212 || v220 != v210)
    {
      v222 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 1720, v218, (uint64_t *)&v301);
      v222[3] = v210;
      v222[4] = v212;
      v223 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 1680, v218, (uint64_t *)&v301);
      v223[3] = v210;
      v223[4] = v212;
      v224 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
      {
        v225 = (std::string::__raw *)&v349[2];
        if (SHIBYTE(v349[2].__r_.__value_.__r.__words[2]) < 0)
          v225 = (std::string::__raw *)v225->__words[0];
        *(_DWORD *)buf = 134219266;
        *(_QWORD *)&buf[4] = v218;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v225;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v212;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v210;
        *(_WORD *)&buf[42] = 2048;
        *(_QWORD *)&buf[44] = v221;
        *(_WORD *)&buf[52] = 2048;
        *(_QWORD *)&buf[54] = v220;
        _os_log_impl(&dword_1AC149000, v224, OS_LOG_TYPE_DEFAULT, "Will update sort order for tracks with artist_pid=%lld with sortName=%{public}s, order.section=%ld, order.sortOrder=%lld (oldValue section=%ld, sortOrder=%lld)", buf, 0x3Eu);
      }

    }
  }
  v151 = 1;
  v188 = a1;
LABEL_360:
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t))(*v302 + 24))(buf, v302, 318767108);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v298, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v298 = *(std::string *)&buf[16];
  }
  v226 = *(int *)(v188 + 32);
  v227 = ML3TrackRulesGetPropertyIndex(10, 167772168);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__specialRules + 56 * v227 + 4 * v226) == -1)
    goto LABEL_423;
  v228 = HIBYTE(v335[2].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v335[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v335[2].__r_.__value_.__l.__size_)
      goto LABEL_386;
  }
  else if (!*((_BYTE *)&v335[2].__r_.__value_.__s + 23))
  {
LABEL_386:
    if ((v228 & 0x80) != 0)
      v228 = v335[2].__r_.__value_.__l.__size_;
    goto LABEL_391;
  }
  v229 = v335[2].__r_.__value_.__l.__size_;
  if ((v228 & 0x80u) == 0)
    v230 = HIBYTE(v335[2].__r_.__value_.__r.__words[2]);
  else
    v230 = v335[2].__r_.__value_.__l.__size_;
  v231 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
  v232 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
  v233 = v298.__r_.__value_.__l.__size_;
  if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v234 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
  else
    v234 = v298.__r_.__value_.__l.__size_;
  if (v230 == v234)
  {
    v235 = (const void **)&v335[2].__r_.__value_.__l.__data_;
    if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v236 = &v298;
    else
      v236 = (std::string *)v298.__r_.__value_.__r.__words[0];
    if ((v228 & 0x80) != 0)
    {
      v238 = memcmp(*v235, v236, v335[2].__r_.__value_.__l.__size_);
      v228 = v229;
      if (!v238)
      {
LABEL_391:
        if (v228)
          goto LABEL_423;
        v231 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
        v233 = v298.__r_.__value_.__l.__size_;
        v232 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
LABEL_393:
        if (v232 >= 0)
          v239 = v231;
        else
          v239 = v233;
        if (!v239)
          goto LABEL_423;
      }
    }
    else
    {
      if (!*((_BYTE *)&v335[2].__r_.__value_.__s + 23))
        goto LABEL_393;
      v237 = HIBYTE(v335[2].__r_.__value_.__r.__words[2]);
      while (*(unsigned __int8 *)v235 == v236->__r_.__value_.__s.__data_[0])
      {
        v235 = (const void **)((char *)v235 + 1);
        v236 = (std::string *)((char *)v236 + 1);
        if (!--v237)
          goto LABEL_386;
      }
    }
  }
  v240 = (std::__shared_weak_count *)a4[1];
  v297[0] = *a4;
  v297[1] = v240;
  if (v240)
  {
    v241 = (unint64_t *)&v240->__shared_owners_;
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
  }
  v243 = ML3ImportSession::_shouldPreserveTrackProperty(v188, (uint64_t)v297, 0xA000008u);
  v244 = v243;
  if (!v240)
    goto LABEL_404;
  v245 = (unint64_t *)&v240->__shared_owners_;
  do
    v246 = __ldaxr(v245);
  while (__stlxr(v246 - 1, v245));
  if (!v246)
  {
    ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
    std::__shared_weak_count::__release_weak(v240);
    if ((v244 & 1) != 0)
      goto LABEL_423;
  }
  else
  {
LABEL_404:
    if ((v243 & 1) != 0)
      goto LABEL_423;
  }
  v247 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v188, (uint64_t)&v335[2], (uint64_t)&v342[2]);
  v249 = v248;
  v250 = v302;
  std::string::operator=((std::string *)(v302[8] + 80), v335 + 2);
  v251 = v250[8];
  *(_QWORD *)(v251 + 128) = v247;
  *(_QWORD *)(v251 + 136) = v249;
  v252 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v252, OS_LOG_TYPE_DEFAULT))
  {
    v253 = (std::string::__raw *)&v335[2];
    if (SHIBYTE(v335[2].__r_.__value_.__r.__words[2]) < 0)
      v253 = (std::string::__raw *)v253->__words[0];
    v254 = &v298;
    if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v254 = (std::string *)v298.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = v253;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v247;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v249;
    *(_WORD *)&buf[28] = 2082;
    *(_QWORD *)&buf[30] = v254;
    _os_log_impl(&dword_1AC149000, v252, OS_LOG_TYPE_DEFAULT, "Setting artistSeriesSortName=%{public}s, order=%lld, section=%d (oldValue=%{public}s)", buf, 0x26u);
  }

  v188 = a1;
  v255 = v301;
  v256 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 1760), v301);
  if (v256)
  {
    v257 = v256[3];
    v258 = v256[4];
    if (v258 != v249 || v257 != v247)
    {
      v259 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 1800, v255, (uint64_t *)&v301);
      v259[3] = v247;
      v259[4] = v249;
      v260 = std::__hash_table<std::__hash_value_type<long long,ML3NameOrder>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3NameOrder>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3NameOrder>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3NameOrder>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 1800, v255, (uint64_t *)&v301);
      v260[3] = v247;
      v260[4] = v249;
      v261 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v261, OS_LOG_TYPE_DEFAULT))
      {
        v262 = (std::string::__raw *)&v349[2];
        if (SHIBYTE(v349[2].__r_.__value_.__r.__words[2]) < 0)
          v262 = (std::string::__raw *)v262->__words[0];
        *(_DWORD *)buf = 134219266;
        *(_QWORD *)&buf[4] = v255;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v262;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v249;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v247;
        *(_WORD *)&buf[42] = 2048;
        *(_QWORD *)&buf[44] = v258;
        *(_WORD *)&buf[52] = 2048;
        *(_QWORD *)&buf[54] = v257;
        _os_log_impl(&dword_1AC149000, v261, OS_LOG_TYPE_DEFAULT, "Will update series sort order for tracks with artist_pid=%lld with sortName=%{public}s, order.section=%ld, order.sortOrder=%lld (oldValue section=%ld, sortOrder=%lld)", buf, 0x3Eu);
      }

    }
    v151 = 1;
    v188 = a1;
  }
  else
  {
    v151 = 1;
  }
LABEL_423:
  v263 = v302;
  v264 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v302 + 32))(v302, 318767118) != 0;
  v265 = v317[24];
  if (v265 == v264)
  {
    if (v37)
      v266 = 0;
    else
      v266 = v151;
    if (v266 != 1)
      goto LABEL_441;
    goto LABEL_432;
  }
  *(_BYTE *)(v263[8] + 176) = v265;
  v267 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
  {
    v268 = v317[24];
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v268;
    _os_log_impl(&dword_1AC149000, v267, OS_LOG_TYPE_DEFAULT, "Setting artistClassicalExperienceAvailable=%{BOOL}u", buf, 8u);
  }

  v188 = a1;
  if (!v37)
  {
LABEL_432:
    v269 = v301;
    v271 = v363[6];
    v270 = v363[7];
    *(_QWORD *)buf = v301;
    *(_QWORD *)&buf[8] = v271;
    *(_QWORD *)&buf[16] = v270;
    if (v270)
    {
      v272 = (unint64_t *)(v270 + 8);
      do
        v273 = __ldxr(v272);
      while (__stxr(v273 + 1, v272));
    }
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>(v188 + 1840, v269, (uint64_t)buf);
    v274 = *(std::__shared_weak_count **)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v275 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
      do
        v276 = __ldaxr(v275);
      while (__stlxr(v276 - 1, v275));
      if (!v276)
      {
        ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
        std::__shared_weak_count::__release_weak(v274);
      }
    }
    v263 = v302;
  }
LABEL_441:
  v277 = v370;
  v278 = v263[8];
  v279 = (std::__shared_weak_count *)v263[9];
  v295 = v278;
  v296 = v279;
  if (v279)
  {
    v280 = (unint64_t *)&v279->__shared_owners_;
    do
      v281 = __ldxr(v280);
    while (__stxr(v281 + 1, v280));
  }
  ML3ImportSession::_setArtistInfoForTrackPersistentID(v188, v277, v278, (uint64_t)v279);
  if (v279)
  {
    v282 = (unint64_t *)&v279->__shared_owners_;
    do
      v283 = __ldaxr(v282);
    while (__stlxr(v283 - 1, v282));
    if (!v283)
    {
      ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
      std::__shared_weak_count::__release_weak(v279);
    }
  }
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v298.__r_.__value_.__l.__data_);
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v300.__r_.__value_.__l.__data_);
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v383.__r_.__value_.__l.__data_);
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v384.__r_.__value_.__l.__data_);
  v142 = v303;
  if (v303)
  {
    v284 = (unint64_t *)&v303->__shared_owners_;
    do
      v144 = __ldaxr(v284);
    while (__stlxr(v144 - 1, v284));
    goto LABEL_460;
  }
LABEL_462:
  _Block_object_dispose(&v316, 8);
  _Block_object_dispose(&v320, 8);

  _Block_object_dispose(&v326, 8);
  _Block_object_dispose(&v330, 8);
  _Block_object_dispose(&v334, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v341, 8);
  if (SHIBYTE(v347.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v347.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v348, 8);
  if (SHIBYTE(v354.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v354.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v355, 8);
  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v361.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v362, 8);
  v285 = v369;
  if (v369)
  {
    v286 = (unint64_t *)&v369->__shared_owners_;
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }

}

void sub_1AC356180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  char a72;
  void *v72;

  _Block_object_dispose(&a68, 8);
  _Block_object_dispose(&a72, 8);

  _Block_object_dispose(&STACK[0x228], 8);
  _Block_object_dispose(&STACK[0x248], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  if (SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  _Block_object_dispose(&STACK[0x2B0], 8);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  _Block_object_dispose(&STACK[0x2F8], 8);
  if (SLOBYTE(STACK[0x33F]) < 0)
    operator delete((void *)STACK[0x328]);
  _Block_object_dispose(&STACK[0x340], 8);
  if (SLOBYTE(STACK[0x387]) < 0)
    operator delete((void *)STACK[0x370]);
  _Block_object_dispose(&STACK[0x388], 8);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3B8]);

  _Unwind_Resume(a1);
}

void ML3ImportSession::_setArtistInfoForTrackPersistentID(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;

  v30 = a2;
  if (a2)
  {
    v7 = a1 + 336;
    v8 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 336), a2);
    if (v8)
    {
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v8 + 3, a3, a4);
    }
    else
    {
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v25 = 0u;
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](&v25, a3, a4);
      v9 = std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v7, a2, &v30);
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 3, v25, *((uint64_t *)&v25 + 1));
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 5, v26, *((uint64_t *)&v26 + 1));
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 7, v27, *((uint64_t *)&v27 + 1));
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 9, v28, *((uint64_t *)&v28 + 1));
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v9 + 11, v29, *((uint64_t *)&v29 + 1));
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
      if (*((_QWORD *)&v29 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
  }
}

void sub_1AC35684C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ML3CollectionInfoSet::~ML3CollectionInfoSet((ML3CollectionInfoSet *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession14_addItemArtistENSt3__110shared_ptrI13ML3ImportItemEEP6NSDataS3__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  BOOL v8;
  char v9;
  char v10;
  uint64_t v11;
  void **v12;
  char v13;
  char v14;
  uint64_t v15;
  void **v16;
  void *v17;
  void *v18;
  int v19;
  __CFString *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t PropertyIndex;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  int shouldPreserveTrackProperty;
  char v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *size;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  NSObject *v55;
  std::string::size_type v56;
  std::string::size_type v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  std::string __p;
  std::string v65;
  std::string v66;
  std::string v67;
  _QWORD v68[2];
  id v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  std::string v73;
  std::string v74;
  std::string v75;
  void *v76;
  std::string v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 104);
  objc_msgSend(v3, "stringForColumnIndex:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringForColumnIndex:", 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v61 = v6;
  objc_msgSend(v3, "stringForColumnIndex:", 2);
  v62 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringForColumnIndex:", 3);
  v63 = (id)objc_claimAutoreleasedReturnValue();
  v70 = objc_msgSend(v3, "int64ForColumnIndex:", 4);
  v60 = objc_msgSend(v3, "int64ForColumnIndex:", 5);
  objc_msgSend(v3, "dataForColumnIndex:", 6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v69 = v7;
  v59 = objc_msgSend(v3, "int64ForColumnIndex:", 7);
  v8 = objc_msgSend(v3, "intForColumnIndex:", 8) != 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 56))(*(_QWORD *)(a1 + 112), 318767105) & 1) == 0)MEMORY[0x1AF43C540](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 56))(*(_QWORD *)(a1 + 112), 318767106);
  if (v6)
    v10 = v9;
  else
    v10 = 1;
  if ((v10 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v77, (char *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String"));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = (void **)(v11 + 48);
    if (*(char *)(v11 + 71) < 0)
      operator delete(*v12);
    *(std::string *)v12 = v77;
  }
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 56))(*(_QWORD *)(a1 + 112), 318767107) & 1) == 0)MEMORY[0x1AF43C540](*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48, objc_msgSend(objc_retainAutorelease(v62), "UTF8String"));
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 56))(*(_QWORD *)(a1 + 112), 318767108);
  if (v63)
    v14 = v13;
  else
    v14 = 1;
  if ((v14 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v77, (char *)objc_msgSend(objc_retainAutorelease(v63), "UTF8String"));
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v16 = (void **)(v15 + 48);
    if (*(char *)(v15 + 71) < 0)
      operator delete(*v16);
    *(std::string *)v16 = v77;
  }
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 56))(*(_QWORD *)(a1 + 112), 318767118) & 1) == 0)*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v8;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 56))(*(_QWORD *)(a1 + 112), 318767111) & 1) == 0)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v60;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 56))(*(_QWORD *)(a1 + 112), 167772176) & 1) == 0)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v59;
  v17 = *(void **)(v4 + 8);
  ML3CPPBridgeString((const UInt8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = *(unsigned __int8 *)(a1 + 164);
  if (*(_BYTE *)(a1 + 164))
  {
    ML3CPPBridgeString((const UInt8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48), 0);
    v20 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v20 = &stru_1E5B66908;
  }
  objc_msgSend(v17, "artistGroupingKeyForArtistName:seriesName:", v18, v20);
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = v19 == 0;
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v24 = *(void **)(v23 + 40);
  *(_QWORD *)(v23 + 40) = v21;

  v25 = v61;
  if (!v22)

  v26 = *(_DWORD *)(a1 + 160);
  v27 = *(int *)(v4 + 32);
  v28 = HIBYTE(v26);
  PropertyIndex = ML3TrackRulesGetPropertyIndex(HIBYTE(v26), v26);
  if (*(_DWORD *)(ML3TrackRulesGetRule(v28, PropertyIndex) + 4 * v27) == -1
    || (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "isEqualToData:", v7) & 1) != 0)
  {
    goto LABEL_40;
  }
  v30 = *(std::__shared_weak_count **)(a1 + 136);
  v68[0] = *(_QWORD *)(a1 + 128);
  v68[1] = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
  }
  shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(v4, (uint64_t)v68, *(_DWORD *)(a1 + 160));
  v34 = shouldPreserveTrackProperty;
  if (!v30)
    goto LABEL_39;
  v35 = (unint64_t *)&v30->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    if ((v34 & 1) != 0)
      goto LABEL_40;
  }
  else
  {
LABEL_39:
    if (shouldPreserveTrackProperty)
    {
LABEL_40:
      v58 = v5;
      if (v5)
        std::string::basic_string[abi:ne180100]<0>(&v67, (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
      else
        std::string::basic_string[abi:ne180100]<0>(&v67, "");
      if (v61)
        std::string::basic_string[abi:ne180100]<0>(&v66, (char *)objc_msgSend(objc_retainAutorelease(v61), "UTF8String"));
      else
        std::string::basic_string[abi:ne180100]<0>(&v66, "");
      if (v62)
        std::string::basic_string[abi:ne180100]<0>(&v65, (char *)objc_msgSend(objc_retainAutorelease(v62), "UTF8String"));
      else
        std::string::basic_string[abi:ne180100]<0>(&v65, "");
      if (v63)
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(objc_retainAutorelease(v63), "UTF8String"));
      else
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
      v37 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v4, (uint64_t)&v66, (uint64_t)&v67);
      v39 = v38;
      v40 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v4, (uint64_t)&__p, (uint64_t)&v65);
      v42 = v41;
      v43 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v45 = (std::__shared_weak_count *)operator new(0xD8uLL);
      v45->__shared_owners_ = 0;
      v45->__shared_weak_owners_ = 0;
      v45->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51308;
      v46 = *(_QWORD *)(a1 + 144);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v77, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
      else
        v77 = v67;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v75, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
      else
        v75 = v66;
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v74, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
      else
        v74 = v65;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v73, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v73 = __p;
      v71 = 0uLL;
      v72 = 0;
      ML3ArtistData::ML3ArtistData((uint64_t)&v45[1], v46, (__int128 *)&v77, (__int128 *)&v75, (__int128 *)&v74, (__int128 *)&v73, v60, v44, v37, v39, v40, v42, v59, &v71, *(_BYTE *)(v43 + 24), 0, 0);
      v5 = v58;
      v25 = v61;
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      std::allocate_shared[abi:ne180100]<ML3ArtistImportItem,std::allocator<ML3ArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long &,void>(&v77, &v45[1].__vftable, v45, &v69, &v70);
      std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 48, (__int128 *)&v77);
      size = (std::__shared_weak_count *)v77.__r_.__value_.__l.__size_;
      if (v77.__r_.__value_.__l.__size_)
      {
        v48 = (unint64_t *)(v77.__r_.__value_.__l.__size_ + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (v45)
      {
        v50 = (unint64_t *)&v45->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      goto LABEL_90;
    }
  }
  if (v70 == *(_QWORD *)(a1 + 152))
  {
    v52 = *(void **)(v4 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 144));
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v76 = v53;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v76, 1);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "executeUpdate:withParameters:error:", CFSTR("UPDATE item_artist SET representative_item_pid=0 WHERE item_artist_pid=?"), v54, 0);

    *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) = 0;
    v55 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      v57 = *(_QWORD *)(a1 + 144);
      v56 = *(_QWORD *)(a1 + 152);
      LODWORD(v77.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)v77.__r_.__value_.__r.__words + 4) = v56;
      WORD2(v77.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v77.__r_.__value_.__r.__words[1] + 6) = v57;
      _os_log_impl(&dword_1AC149000, v55, OS_LOG_TYPE_DEFAULT, "Removing trackPersistentID=%lld as the representative item for itemArtistPersistentID=%lld as the groupingKey has changed/can no longer be applied", (uint8_t *)&v77, 0x16u);
    }

  }
LABEL_90:

}

void sub_1AC3570F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,void *a52)
{
  void *v52;
  void *v53;
  void *v54;
  void *v55;

  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<ML3ArtistData,std::allocator<ML3ArtistData>,long long &,std::string &,std::string &,std::string &,std::string &,long long &,ML3NameOrder &,ML3NameOrder &,long long &,std::string,BOOL &,int,int,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t a11, char *a12, int *a13, int *a14)
{
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;

  v23 = operator new(0xD8uLL);
  v23[1] = 0;
  v23[2] = 0;
  *v23 = &off_1E5B51308;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v35 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v34 = *(std::string *)a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v33 = *(std::string *)a5;
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v32 = *(std::string *)a6;
  v24 = *a7;
  v25 = *a8;
  v26 = a8[1];
  v28 = *a9;
  v27 = a9[1];
  v29 = *a10;
  *(_OWORD *)__p = *(_OWORD *)a11;
  v31 = *(_QWORD *)(a11 + 16);
  *(_QWORD *)(a11 + 8) = 0;
  *(_QWORD *)(a11 + 16) = 0;
  *(_QWORD *)a11 = 0;
  ML3ArtistData::ML3ArtistData((uint64_t)(v23 + 3), a2, (__int128 *)&v35, (__int128 *)&v34, (__int128 *)&v33, (__int128 *)&v32, v24, v22, v25, v26, v28, v27, v29, (__int128 *)__p, *a12, *a13, *a14);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  *a1 = v23 + 3;
  a1[1] = v23;
}

void sub_1AC357498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::__shared_weak_count *v36;
  uint64_t v37;
  void *v39;

  if (a36 < 0)
    operator delete(__p);
  if (*(char *)(v37 - 121) < 0)
    operator delete(*(void **)(v37 - 144));
  if (*(char *)(v37 - 89) < 0)
    operator delete(*(void **)(v37 - 112));
  std::__shared_weak_count::~__shared_weak_count(v36);
  operator delete(v39);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<ML3ArtistImportItem,std::allocator<ML3ArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long &,void>(_QWORD *a1, _QWORD *a2, std::__shared_weak_count *a3, id *a4, uint64_t *a5)
{
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  id v14;
  unint64_t *v15;
  unint64_t v16;
  id v17;
  unint64_t v18;
  id v19;

  v10 = operator new(0x78uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E5B51458;
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = *a5;
  v14 = *a4;
  *((_BYTE *)v10 + 42) = 1;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_DWORD *)v10 + 20) = 1065353216;
  v10[3] = &off_1E5B4D550;
  v10[11] = a2;
  v10[12] = a3;
  if (a3)
  {
    v15 = (unint64_t *)&a3->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = v14;
    v10[13] = v17;
    v10[14] = v13;
    *((_WORD *)v10 + 20) = 256;
    v10[4] = *a2;

    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    v19 = v14;
    v10[13] = v19;
    v10[14] = v13;
    *((_WORD *)v10 + 20) = 256;
    v10[4] = *a2;

  }
  *a1 = v10 + 3;
  a1[1] = v10;
}

void std::__shared_ptr_emplace<ML3ArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3ArtistImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_emplace<ML3ArtistImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZN16ML3ImportSession41_getArtistImportItemForGroupingKeyAndPIDsEP6NSDataxxRb_block_invoke(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  ML3ImportSession *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  int v17;
  NSString *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  BOOL v27;
  int v28;
  NSString *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  uint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  void *v45;
  std::__shared_weak_count *v46;
  uint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t i;
  NSData v55[2];
  std::__shared_weak_count *v56;
  void *__p[2];
  std::__shared_weak_count *v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  int v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  id v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75[2];
  __int128 v76;
  _QWORD v77[6];

  v77[5] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = (ML3ImportSession *)a1[6];
  memset(v77, 0, 32);
  v76 = 0u;
  memset(v75, 0, sizeof(v75));
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v6, (uint64_t)v75, 4uLL);
  if (SHIBYTE(v75[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v74, v75[0].__r_.__value_.__l.__data_, v75[0].__r_.__value_.__l.__size_);
  else
    v74 = v75[0];
  if (SHIBYTE(v75[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v73, v75[1].__r_.__value_.__l.__data_, v75[1].__r_.__value_.__l.__size_);
  else
    v73 = v75[1];
  if (SHIBYTE(v77[0]) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, (const std::string::value_type *)v76, *((std::string::size_type *)&v76 + 1));
  }
  else
  {
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v76;
    v72.__r_.__value_.__r.__words[2] = v77[0];
  }
  if (SHIBYTE(v77[3]) < 0)
    std::string::__init_copy_ctor_external(&v71, (const std::string::value_type *)v77[1], v77[2]);
  else
    v71 = *(std::string *)&v77[1];
  v8 = objc_msgSend(v6, "int64ForColumnIndex:", 4);
  v70 = objc_msgSend(v6, "int64ForColumnIndex:", 5);
  objc_msgSend(v6, "objectAtIndexedSubscript:", 6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = (void *)*((_QWORD *)v7 + 3);
    objc_msgSend(v6, "objectAtIndexedSubscript:", 6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKeyedSubscript:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "ML3NameOrderValue");
    *(_QWORD *)&v69 = v13;
    *((_QWORD *)&v69 + 1) = v14;

  }
  else
  {
    v13 = 0;
    v69 = *(_OWORD *)"";
  }

  objc_msgSend(v6, "objectAtIndexedSubscript:", 6);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
    v16 = v13 == 0;
  else
    v16 = 0;
  v17 = v16;

  if (v17)
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", 6);
    v18 = (NSString *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v69 = ML3ImportSession::_getNameOrderForString(v7, v18);
    *((_QWORD *)&v69 + 1) = v19;

  }
  objc_msgSend(v6, "objectAtIndexedSubscript:", 7);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    v21 = (void *)*((_QWORD *)v7 + 3);
    objc_msgSend(v6, "objectAtIndexedSubscript:", 7);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "objectForKeyedSubscript:", v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "ML3NameOrderValue");
    *(_QWORD *)&v68 = v24;
    *((_QWORD *)&v68 + 1) = v25;

  }
  else
  {
    v24 = 0;
    v68 = *(_OWORD *)"";
  }

  objc_msgSend(v6, "objectAtIndexedSubscript:", 7);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  if (v26)
    v27 = v24 == 0;
  else
    v27 = 0;
  v28 = v27;

  if (v28)
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", 7);
    v29 = (NSString *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v68 = ML3ImportSession::_getNameOrderForString(v7, v29);
    *((_QWORD *)&v68 + 1) = v30;

  }
  v67 = objc_msgSend(v6, "int64ForColumnIndex:", 8);
  v66 = objc_msgSend(v6, "intForColumnIndex:", 9) != 0;
  v65 = objc_msgSend(v6, "int64ForColumnIndex:", 10);
  objc_msgSend(v6, "dataForColumnIndex:", 11);
  v64 = (id)objc_claimAutoreleasedReturnValue();
  __p[0] = 0;
  __p[1] = 0;
  v58 = 0;
  LODWORD(v55[0].super.isa) = 0;
  v61 = 0;
  std::allocate_shared[abi:ne180100]<ML3ArtistData,std::allocator<ML3ArtistData>,long long &,std::string &,std::string &,std::string &,std::string &,long long &,ML3NameOrder &,ML3NameOrder &,long long &,std::string,BOOL &,int,int,void>(&v62, v8, (uint64_t)&v74, (uint64_t)&v73, (uint64_t)&v72, (uint64_t)&v71, &v70, (uint64_t *)&v69, (uint64_t *)&v68, &v67, (uint64_t)__p, (char *)&v66, (int *)v55, &v61);
  if (SHIBYTE(v58) < 0)
    operator delete(__p[0]);
  std::allocate_shared[abi:ne180100]<ML3ArtistImportItem,std::allocator<ML3ArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long &,void>(__p, v62, v63, &v64, &v65);
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*(_QWORD *)(a1[5] + 8) + 48, (__int128 *)__p);
  v31 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v32 = (unint64_t *)((char *)__p[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (void *)a1[4];
  if (v34)
  {
    ML3CPPStringFromData(v55, v34);
    *(_OWORD *)__p = *(_OWORD *)&v55[0].super.isa;
    v35 = v56;
    v55[1].super.isa = 0;
    v56 = 0;
    v55[0].super.isa = 0;
    v58 = v35;
    v59 = v62;
    v60 = v63;
    if (v63)
    {
      p_shared_owners = &v63->__shared_owners_;
      do
        v37 = __ldxr((unint64_t *)p_shared_owners);
      while (__stxr(v37 + 1, (unint64_t *)p_shared_owners));
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>((uint64_t)v7 + 1088, (unsigned __int8 *)__p, (uint64_t)__p);
    v38 = v60;
    if (!v60)
      goto LABEL_60;
    v39 = (unint64_t *)&v60->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    goto LABEL_49;
  }
  if (!v64 || !a1[7])
    goto LABEL_64;
  ML3CPPStringFromData(v55, v64);
  *(_OWORD *)__p = *(_OWORD *)&v55[0].super.isa;
  v41 = v56;
  v55[1].super.isa = 0;
  v56 = 0;
  v55[0].super.isa = 0;
  v58 = v41;
  v59 = v62;
  v60 = v63;
  if (v63)
  {
    v42 = &v63->__shared_owners_;
    do
      v43 = __ldxr((unint64_t *)v42);
    while (__stxr(v43 + 1, (unint64_t *)v42));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>((uint64_t)v7 + 1088, (unsigned __int8 *)__p, (uint64_t)__p);
  v38 = v60;
  if (v60)
  {
    v44 = (unint64_t *)&v60->__shared_owners_;
    do
      v40 = __ldaxr(v44);
    while (__stlxr(v40 - 1, v44));
LABEL_49:
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
LABEL_60:
  if (SHIBYTE(v58) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v56) < 0)
    operator delete(v55[0].super.isa);
LABEL_64:
  v45 = (void *)a1[8];
  v46 = v63;
  if (v45)
  {
    __p[0] = v45;
    __p[1] = v62;
    v58 = v63;
    if (v63)
    {
      v47 = &v63->__shared_owners_;
      do
        v48 = __ldxr((unint64_t *)v47);
      while (__stxr(v48 + 1, (unint64_t *)v47));
    }
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ArtistData>>>((uint64_t)v7 + 968, (unint64_t)v45, (uint64_t)__p);
    v49 = v58;
    if (v58)
    {
      v50 = (unint64_t *)&v58->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v46 = v63;
  }
  *a4 = 1;
  if (v46)
  {
    v52 = (unint64_t *)&v46->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }

  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v77[i + 3]) < 0)
      operator delete((void *)v77[i + 1]);
  }

}

void sub_1AC357D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;

  std::pair<std::string const,std::shared_ptr<ML3AlbumData>>::~pair((uint64_t)&a22);
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a31);

  if (a48 < 0)
    operator delete(a43);
  if (a55 < 0)
    operator delete(a50);
  if (*(char *)(v56 - 233) < 0)
    operator delete(*(void **)(v56 - 256));
  if (*(char *)(v56 - 201) < 0)
    operator delete(*(void **)(v56 - 224));
  v58 = 0;
  v59 = v56 - 192;
  while (1)
  {
    if (*(char *)(v59 + v58 + 95) < 0)
      operator delete(*(void **)(v59 + v58 + 72));
    v58 -= 24;
    if (v58 == -96)
    {

      _Unwind_Resume(a1);
    }
  }
}

_QWORD *__copy_helper_block_ea8_112c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE128c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[15];
  result[14] = a2[14];
  result[15] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[17];
  result[16] = a2[16];
  result[17] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_112c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE128c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 112;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 128);
  return std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v1);
}

uint64_t ML3ImportSession::updateItemArtist(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _BOOL4 v8;
  NSObject *v9;
  int v10;
  void **v11;
  void **v12;
  _BYTE *v13;
  int v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  void **v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD v55[2];
  _QWORD v56[2];
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61[2];
  void *v62[2];
  char v63;
  _BYTE __p[12];
  __int16 v65;
  void **v66;
  char v67;
  _BYTE buf[12];
  __int16 v69;
  _BYTE *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  _BOOL4 v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(*(id *)(a1 + 1576), "count"))
    v8 = 1;
  else
    v8 = *(_QWORD *)(a1 + 1536) != *(_QWORD *)(a1 + 1528);
  v9 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 88))(v62);
    v10 = v63;
    v11 = (void **)v62[0];
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a3 + 88))(__p);
    v12 = v62;
    if (v10 < 0)
      v12 = v11;
    if (v67 >= 0)
      v13 = __p;
    else
      v13 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = v12;
    v69 = 2082;
    v70 = v13;
    v71 = 1024;
    v72 = a4;
    v73 = 1024;
    v74 = v8;
    _os_log_impl(&dword_1AC149000, v9, OS_LOG_TYPE_DEFAULT, "updating itemArtist=%{public}s, track=%{public}s, ignoreNonExistingArtist=%{BOOL}u, havePendingTrackModifications=%{BOOL}u", buf, 0x22u);
    if (v67 < 0)
      operator delete(*(void **)__p);
    if (v63 < 0)
      operator delete(v62[0]);
  }

  if (v8)
  {
    v14 = ML3ImportSession::flush((ML3ImportSession *)a1, 1);
    v15 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v14;
      _os_log_impl(&dword_1AC149000, v15, OS_LOG_TYPE_DEFAULT, "flushing entities as we have pending track adds/deletes finished with status=%{BOOL}u", buf, 8u);
    }

    if (!v14)
      return 0;
  }
  v16 = (std::__shared_weak_count *)a3[1];
  v61[0] = *a3;
  v61[1] = (uint64_t)v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = ML3ImportSession::_prepareTrackForImport(a1, v61, a4, 1);
  v20 = v19;
  if (!v16)
    goto LABEL_25;
  v21 = (unint64_t *)&v16->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_25:
    if (v19)
      goto LABEL_26;
LABEL_39:
    if (*a3 && (_DWORD)a4 && !*(_QWORD *)(*a3 + 8))
    {
      v23 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v23, OS_LOG_TYPE_DEFAULT, "Ignoring item artist update as the track does not exist", buf, 2u);
      }
    }
    else
    {
      v28 = (std::__shared_weak_count *)a2[1];
      v59 = *a2;
      v60 = v28;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      ML3ImportSession::_getGroupingKeyForItemArtistImportItem(a1, &v59);
      v23 = objc_claimAutoreleasedReturnValue();
      v31 = v60;
      if (v60)
      {
        v32 = (unint64_t *)&v60->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = *(_QWORD *)(*a3 + 8);
      *(_BYTE *)(*a3 + 16) = 1;
      v35 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v34;
        _os_log_impl(&dword_1AC149000, v35, OS_LOG_TYPE_DEFAULT, "updating itemArtist with trackPID=%lld", buf, 0xCu);
      }

      v36 = (std::__shared_weak_count *)a2[1];
      v57 = *a2;
      v58 = v36;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = *a3;
      v40 = (std::__shared_weak_count *)a3[1];
      v56[0] = v39;
      v56[1] = v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      ML3ImportSession::_addItemArtist(a1, &v57, v23, v56);
      if (v40)
      {
        v43 = (unint64_t *)&v40->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v45 = v58;
      if (v58)
      {
        v46 = (unint64_t *)&v58->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = *a2;
      v49 = (std::__shared_weak_count *)a2[1];
      v55[0] = v48;
      v55[1] = v49;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      ML3ImportSession::_addItemArtistDataToSourceMaps(a1, v55);
      if (v49)
      {
        v52 = (unint64_t *)&v49->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
    a4 = 1;
    goto LABEL_79;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (!v20)
    goto LABEL_39;
LABEL_26:
  if (v20 != 1)
  {
    v23 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(buf);
      v24 = SHIBYTE(v71);
      v25 = *(_BYTE **)buf;
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*a3 + 88))(v62);
      v26 = buf;
      if (v24 < 0)
        v26 = v25;
      if (v63 >= 0)
        v27 = v62;
      else
        v27 = (void **)v62[0];
      *(_DWORD *)__p = 136446466;
      *(_QWORD *)&__p[4] = v26;
      v65 = 2082;
      v66 = v27;
      _os_log_impl(&dword_1AC149000, v23, OS_LOG_TYPE_ERROR, "Error updating itemArtist=%{public}s. Could not prepare track data for import=%{public}s", __p, 0x16u);
      if (v63 < 0)
        operator delete(v62[0]);
      if (SHIBYTE(v71) < 0)
        operator delete(*(void **)buf);
    }
LABEL_79:

    return a4;
  }
  return 0;
}

void sub_1AC3584D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;

  if (a35 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::addTrack(uint64_t a1, uint64_t *a2, int a3)
{
  NSObject *v6;
  void **v7;
  uint64_t result;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t TrackPersistentID;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char v40;
  char v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  void *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char *v65;
  __int128 v66;
  int64x2_t v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  _QWORD v77[2];
  uint64_t v78[4];
  _QWORD v79[2];
  _QWORD v80[2];
  uint64_t v81[2];
  void *__p;
  int64x2_t v83;
  uint64_t v84;
  uint64_t v85;
  uint8_t buf[4];
  void **v87;
  __int16 v88;
  int v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v6 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 88))(&__p);
    v7 = v83.i8[15] >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446466;
    v87 = v7;
    v88 = 1024;
    v89 = a3;
    _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_DEFAULT, "adding track %{public}s, processCollectionsAsStandaloneEntities=%{BOOL}u", buf, 0x12u);
    if (v83.i8[15] < 0)
      operator delete(__p);
  }

  if (objc_msgSend(*(id *)(a1 + 1576), "count"))
  {
    if ((a3 & 1) != 0)
      goto LABEL_14;
  }
  else if (*(_QWORD *)(a1 + 1560) == *(_QWORD *)(a1 + 1552) || (a3 & 1) != 0)
  {
    goto LABEL_13;
  }
  result = ML3ImportSession::flush((ML3ImportSession *)a1, 0);
  if (!(_DWORD)result)
    return result;
LABEL_13:
  if (a3)
  {
LABEL_14:
    v9 = (std::__shared_weak_count *)a2[1];
    v81[0] = *a2;
    v81[1] = (uint64_t)v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = ML3ImportSession::_prepareTrackForImport(a1, v81, 0, 0);
    v13 = v12;
    if (!v9)
      goto LABEL_21;
    v14 = (unint64_t *)&v9->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v13)
        return 0;
    }
    else
    {
LABEL_21:
      if (v12)
        return 0;
    }
    v16 = *a2;
    v17 = *(_QWORD *)(*a2 + 8);
    if (*(_BYTE *)(*a2 + 16))
      ++*(_DWORD *)(a1 + 156);
    else
      ++*(_DWORD *)(a1 + 152);
LABEL_62:
    if (*(_BYTE *)(a1 + 1512))
    {
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>((_QWORD *)(a1 + 728), v17);
      v16 = *a2;
    }
    v37 = (std::__shared_weak_count *)a2[1];
    v78[0] = v16;
    v78[1] = (uint64_t)v37;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    v40 = ML3ImportSession::_prepareTrackData(a1, v78, a3);
    v41 = v40;
    if (!v37)
      goto LABEL_71;
    v42 = (unint64_t *)&v37->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      if ((v41 & 1) != 0)
        goto LABEL_72;
    }
    else
    {
LABEL_71:
      if ((v40 & 1) != 0)
      {
LABEL_72:
        v44 = *(void **)(a1 + 1584);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v17);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "addObject:", v45);

        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 576, v17, v17);
        v46 = *(uint64_t **)(a1 + 1536);
        v47 = *(_QWORD *)(a1 + 1544);
        if ((unint64_t)v46 >= v47)
        {
          v52 = *(_QWORD *)(a1 + 1528);
          v53 = ((uint64_t)v46 - v52) >> 4;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 60)
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          v55 = v47 - v52;
          if (v55 >> 3 > v54)
            v54 = v55 >> 3;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
            v56 = 0xFFFFFFFFFFFFFFFLL;
          else
            v56 = v54;
          v85 = a1 + 1544;
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v56);
          v59 = &v57[16 * v53];
          v60 = *(_OWORD *)a2;
          *(_OWORD *)v59 = *(_OWORD *)a2;
          if (*((_QWORD *)&v60 + 1))
          {
            v61 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
          }
          v63 = *(_QWORD **)(a1 + 1536);
          v64 = *(_QWORD **)(a1 + 1528);
          if (v63 == v64)
          {
            v67 = vdupq_n_s64((unint64_t)v63);
            v65 = &v57[16 * v53];
          }
          else
          {
            v65 = &v57[16 * v53];
            do
            {
              v66 = *((_OWORD *)v63 - 1);
              v63 -= 2;
              *((_OWORD *)v65 - 1) = v66;
              v65 -= 16;
              *v63 = 0;
              v63[1] = 0;
            }
            while (v63 != v64);
            v67 = *(int64x2_t *)(a1 + 1528);
          }
          v51 = v59 + 16;
          *(_QWORD *)(a1 + 1528) = v65;
          *(_QWORD *)(a1 + 1536) = v59 + 16;
          v83 = v67;
          v69 = *(_QWORD *)(a1 + 1544);
          *(_QWORD *)(a1 + 1544) = &v57[16 * v58];
          v84 = v69;
          __p = (void *)v67.i64[0];
          std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          *v46 = *a2;
          v48 = a2[1];
          v46[1] = v48;
          if (v48)
          {
            v49 = (unint64_t *)(v48 + 8);
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
          }
          v51 = v46 + 2;
        }
        *(_QWORD *)(a1 + 1536) = v51;
        v70 = *a2;
        v71 = (std::__shared_weak_count *)a2[1];
        v77[0] = v70;
        v77[1] = v71;
        if (v71)
        {
          v72 = (unint64_t *)&v71->__shared_owners_;
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
        }
        ML3ImportSession::_addTrackDataToSourceMaps(a1, v77);
        if (v71)
        {
          v74 = (unint64_t *)&v71->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        if (*(_QWORD *)(a1 + 1536) - *(_QWORD *)(a1 + 1528) < 0x3E71uLL)
          return 1;
        v76 = _os_feature_enabled_impl();
        return ML3ImportSession::flush((ML3ImportSession *)a1, v76);
      }
    }
    v68 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1AC149000, v68, OS_LOG_TYPE_ERROR, "failed to prepare track data", (uint8_t *)&__p, 2u);
    }

    return 0;
  }
  v18 = (std::__shared_weak_count *)a2[1];
  v80[0] = *a2;
  v80[1] = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  TrackPersistentID = ML3ImportSession::_getTrackPersistentID(a1, v80);
  v17 = TrackPersistentID;
  if (!v18)
    goto LABEL_31;
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_31:
    if (TrackPersistentID)
      goto LABEL_32;
LABEL_50:
    v30 = 0;
LABEL_51:
    ++*(_DWORD *)(a1 + 152);
    v31 = *a2;
    v32 = (std::__shared_weak_count *)a2[1];
    v78[2] = *a2;
    v78[3] = (uint64_t)v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v17 = ML3ImportSession::_newTrackPersistentID(*(void **)(a1 + 72), v31, v32);
    if (v32)
    {
      v35 = (unint64_t *)&v32->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    goto LABEL_61;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!v17)
    goto LABEL_50;
LABEL_32:
  if (!std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 576), v17))
  {
    v30 = v17 != 0;
    goto LABEL_60;
  }
  v24 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_1AC149000, v24, OS_LOG_TYPE_ERROR, "pid collision detected - flushing", (uint8_t *)&__p, 2u);
  }

  result = ML3ImportSession::flush((ML3ImportSession *)a1, 0);
  if ((_DWORD)result)
  {
    v25 = (std::__shared_weak_count *)a2[1];
    v79[0] = *a2;
    v79[1] = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v17 = ML3ImportSession::_getTrackPersistentID(a1, v79);
    if (v25)
    {
      v28 = (unint64_t *)&v25->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v30 = v17 != 0;
    if (!v17)
      goto LABEL_51;
LABEL_60:
    ++*(_DWORD *)(a1 + 156);
LABEL_61:
    v16 = *a2;
    *(_QWORD *)(v16 + 8) = v17;
    *(_BYTE *)(v16 + 16) = v30;
    goto LABEL_62;
  }
  return result;
}

void sub_1AC358C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_prepareTrackData(uint64_t a1, uint64_t *a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char v9;
  char v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD **v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  __int128 v106;
  NSObject *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  NSObject *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *size;
  unint64_t *v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t *v179;
  __int128 v180;
  NSObject *v181;
  void *p_p;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  char v205;
  char v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  char v212;
  char v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  char v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  _QWORD *v223;
  unint64_t *v224;
  unint64_t v225;
  int v226;
  uint64_t v228;
  void *v229;
  uint64_t *v230;
  void *v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count_vtbl *v233;
  uint64_t shared_owners;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  unint64_t v243;
  const char *v244;
  NSObject *v245;
  std::string *v246;
  _QWORD *v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  char *v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  _QWORD *v263;
  _QWORD *v264;
  char *v265;
  __int128 v266;
  int64x2_t v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  _QWORD *i;
  uint64_t v273;
  NSObject *v274;
  char *v275;
  unint64_t v276;
  _QWORD *v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  NSObject *v289;
  NSObject *v290;
  NSObject *v291;
  std::__shared_weak_count *v292;
  void *v293;
  unint64_t v294;
  _QWORD v295[2];
  _QWORD v296[2];
  _QWORD v297[2];
  __int128 v298;
  uint64_t v299[2];
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  unint64_t v304;
  std::string v305;
  __int128 v306;
  uint64_t *v307;
  std::__shared_weak_count *v308;
  void *__p;
  uint64_t v310;
  void (*v311)(uint64_t, void *);
  void *v312;
  uint8_t *v313;
  uint64_t *v314;
  std::__shared_weak_count *v315;
  _BYTE v316[32];
  _BYTE v317[10];
  __int16 v318;
  uint64_t v319;
  __int16 v320;
  uint64_t v321;
  __int16 v322;
  uint64_t v323;
  __int128 v324;
  uint8_t buf[32];
  _OWORD v326[3];
  int v327;
  uint64_t v328;

  v328 = *MEMORY[0x1E0C80C00];
  v6 = (std::__shared_weak_count *)a2[1];
  v299[0] = *a2;
  v299[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = ML3ImportSession::_prepareTrackSortData(a1, v299);
  v10 = v9;
  if (!v6)
    goto LABEL_8;
  v11 = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_8:
    if ((v9 & 1) != 0)
      goto LABEL_9;
LABEL_17:
    v20 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v20, OS_LOG_TYPE_ERROR, "failed to prepare track sort data", buf, 2u);
    }

    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if ((v10 & 1) == 0)
    goto LABEL_17;
LABEL_9:
  v14 = (uint64_t *)*a2;
  v13 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v298 = *a2;
  *((_QWORD *)&v298 + 1) = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = v14[1];
    v304 = v17;
    if (!a3)
    {
      memset(v326, 0, sizeof(v326));
      memset(buf, 0, sizeof(buf));
      v18 = (unint64_t *)&v13->__shared_owners_;
      v314 = v14;
      v315 = v13;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      goto LABEL_28;
    }
  }
  else
  {
    v17 = v14[1];
    v304 = v17;
    if ((a3 & 1) == 0)
    {
      memset(v326, 0, sizeof(v326));
      memset(buf, 0, sizeof(buf));
      v314 = v14;
      v315 = 0;
LABEL_28:
      ML3ImportSession::_getArtistInfo(&__p, a1, &v314);
      v25 = __p;
      if (__p)
      {
        v26 = v310;
        __p = 0;
        v310 = 0;
      }
      else
      {
        ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)v316);
        v25 = *(void **)v316;
        v26 = *(_QWORD *)&v316[8];
      }
      *(_QWORD *)v316 = 0;
      *(_QWORD *)&v316[8] = 0;
      *(_QWORD *)buf = v25;
      *(_QWORD *)&buf[8] = v26;
      v31 = (std::__shared_weak_count *)v310;
      if (v310)
      {
        v32 = (unint64_t *)(v310 + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = v315;
      if (v315)
      {
        v35 = (unint64_t *)&v315->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v303 = v298;
      if (*((_QWORD *)&v298 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v298 + 1) + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      ML3ImportSession::_getAlbumArtistInfo(&__p, a1, &v303);
      v39 = __p;
      if (__p)
      {
        v40 = v310;
        __p = 0;
        v310 = 0;
      }
      else
      {
        ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)v316);
        v39 = *(void **)v316;
        v40 = *(_QWORD *)&v316[8];
      }
      *(_QWORD *)v316 = 0;
      *(_QWORD *)&v316[8] = 0;
      v41 = *(std::__shared_weak_count **)&buf[24];
      *(_QWORD *)&buf[16] = v39;
      *(_QWORD *)&buf[24] = v40;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = *(std::__shared_weak_count **)&v316[8];
      if (*(_QWORD *)&v316[8])
      {
        v45 = (unint64_t *)(*(_QWORD *)&v316[8] + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = (std::__shared_weak_count *)v310;
      if (v310)
      {
        v48 = (unint64_t *)(v310 + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
      if (*((_QWORD *)&v303 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v302 = v298;
      if (*((_QWORD *)&v298 + 1))
      {
        v53 = (unint64_t *)(*((_QWORD *)&v298 + 1) + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      ML3ImportSession::_getAlbumInfo(&__p, a1, &v302, **(_QWORD **)&buf[16]);
      v55 = __p;
      if (__p)
      {
        v56 = v310;
        __p = 0;
        v310 = 0;
      }
      else
      {
        ML3ImportSession::_getDefaultEmptyAlbum((ML3ImportSession *)v316);
        v55 = *(void **)v316;
        v56 = *(_QWORD *)&v316[8];
      }
      *(_QWORD *)v316 = 0;
      *(_QWORD *)&v316[8] = 0;
      v57 = (std::__shared_weak_count *)*((_QWORD *)&v326[0] + 1);
      *(_QWORD *)&v326[0] = v55;
      *((_QWORD *)&v326[0] + 1) = v56;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = *(std::__shared_weak_count **)&v316[8];
      if (*(_QWORD *)&v316[8])
      {
        v61 = (unint64_t *)(*(_QWORD *)&v316[8] + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = (std::__shared_weak_count *)v310;
      if (v310)
      {
        v64 = (unint64_t *)(v310 + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&v302 + 1);
      if (*((_QWORD *)&v302 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v301 = v298;
      if (*((_QWORD *)&v298 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v298 + 1) + 8);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      ML3ImportSession::_getComposerInfo(&__p, a1, &v301);
      v71 = __p;
      if (__p)
      {
        v72 = v310;
        __p = 0;
        v310 = 0;
      }
      else
      {
        ML3ImportSession::_getDefaultEmptyComposer((ML3ImportSession *)v316);
        v71 = *(void **)v316;
        v72 = *(_QWORD *)&v316[8];
      }
      *(_QWORD *)v316 = 0;
      *(_QWORD *)&v316[8] = 0;
      v73 = (std::__shared_weak_count *)*((_QWORD *)&v326[1] + 1);
      *(_QWORD *)&v326[1] = v71;
      *((_QWORD *)&v326[1] + 1) = v72;
      if (v73)
      {
        v74 = (unint64_t *)&v73->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v76 = *(std::__shared_weak_count **)&v316[8];
      if (*(_QWORD *)&v316[8])
      {
        v77 = (unint64_t *)(*(_QWORD *)&v316[8] + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = (std::__shared_weak_count *)v310;
      if (v310)
      {
        v80 = (unint64_t *)(v310 + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
      if (*((_QWORD *)&v301 + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      v300 = v298;
      if (*((_QWORD *)&v298 + 1))
      {
        v85 = (unint64_t *)(*((_QWORD *)&v298 + 1) + 8);
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      ML3ImportSession::_getGenreInfo((uint64_t)&__p, a1, (uint64_t **)&v300);
      v87 = __p;
      if (__p)
      {
        v88 = v310;
        __p = 0;
        v310 = 0;
      }
      else
      {
        ML3ImportSession::_getDefaultEmptyGenre((ML3ImportSession *)v316);
        v87 = *(void **)v316;
        v88 = *(_QWORD *)&v316[8];
      }
      *(_QWORD *)v316 = 0;
      *(_QWORD *)&v316[8] = 0;
      v89 = (std::__shared_weak_count *)*((_QWORD *)&v326[2] + 1);
      *(_QWORD *)&v326[2] = v87;
      *((_QWORD *)&v326[2] + 1) = v88;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      v92 = *(std::__shared_weak_count **)&v316[8];
      if (*(_QWORD *)&v316[8])
      {
        v93 = (unint64_t *)(*(_QWORD *)&v316[8] + 8);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      v95 = (std::__shared_weak_count *)v310;
      if (v310)
      {
        v96 = (unint64_t *)(v310 + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      v98 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
      if (*((_QWORD *)&v300 + 1))
      {
        v99 = (unint64_t *)(*((_QWORD *)&v300 + 1) + 8);
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v101 = std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 336, v304, &v304);
      v102 = *(uint64_t **)buf;
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v101 + 3, *(uint64_t *)buf, *(uint64_t *)&buf[8]);
      v103 = *(uint64_t **)&buf[16];
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v101 + 5, *(uint64_t *)&buf[16], *(uint64_t *)&buf[24]);
      v104 = *(uint64_t **)&v326[0];
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v101 + 7, *(uint64_t *)&v326[0], *((uint64_t *)&v326[0] + 1));
      v105 = *(uint64_t **)&v326[1];
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v101 + 9, *(uint64_t *)&v326[1], *((uint64_t *)&v326[1] + 1));
      v106 = v326[2];
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v101 + 11, *(uint64_t *)&v326[2], *((uint64_t *)&v326[2] + 1));
      v107 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
      {
        v108 = *v102;
        v109 = *v103;
        v110 = *v105;
        v111 = *(_QWORD *)v106;
        v112 = *v104;
        *(_DWORD *)v316 = 134219008;
        *(_QWORD *)&v316[4] = v108;
        *(_WORD *)&v316[12] = 2048;
        *(_QWORD *)&v316[14] = v109;
        *(_WORD *)&v316[22] = 2048;
        *(_QWORD *)&v316[24] = v110;
        *(_WORD *)v317 = 2048;
        *(_QWORD *)&v317[2] = v111;
        v318 = 2048;
        v319 = v112;
        _os_log_impl(&dword_1AC149000, v107, OS_LOG_TYPE_DEFAULT, "gathered collection pids: artistPID=%lld, albumArtistPID=%lld, composerPID=%lld, genrePID=%lld, albumPID=%lld", v316, 0x34u);
      }

      if (*((_QWORD *)&v106 + 1))
      {
        v113 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v106 + 1) + 16))(*((_QWORD *)&v106 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v106 + 1));
        }
      }
      v115 = (std::__shared_weak_count *)*((_QWORD *)&v326[1] + 1);
      if (*((_QWORD *)&v326[1] + 1))
      {
        v116 = (unint64_t *)(*((_QWORD *)&v326[1] + 1) + 8);
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      v118 = (std::__shared_weak_count *)*((_QWORD *)&v326[0] + 1);
      if (*((_QWORD *)&v326[0] + 1))
      {
        v119 = (unint64_t *)(*((_QWORD *)&v326[0] + 1) + 8);
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      v121 = *(std::__shared_weak_count **)&buf[24];
      if (*(_QWORD *)&buf[24])
      {
        v122 = (unint64_t *)(*(_QWORD *)&buf[24] + 8);
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      v124 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v125 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        goto LABEL_281;
      }
      goto LABEL_283;
    }
  }
  v21 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a1 + 336), v17);
  if (v21)
  {
    v22 = (_QWORD **)v21;
    *(_QWORD *)&v306 = v14;
    *((_QWORD *)&v306 + 1) = v13;
    if (v13)
    {
      v23 = (unint64_t *)&v13->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    ML3ImportSession::_getComposerInfo(v316, a1, &v306);
    if (*(_QWORD *)v316)
    {
      *(_QWORD *)buf = *(_QWORD *)v316;
      *(_QWORD *)&buf[8] = *(_QWORD *)&v316[8];
      *(_QWORD *)v316 = 0;
      *(_QWORD *)&v316[8] = 0;
    }
    else
    {
      ML3ImportSession::_getDefaultEmptyComposer((ML3ImportSession *)buf);
    }
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v22 + 9), (__int128 *)buf);
    v127 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v128 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v130 = *(std::__shared_weak_count **)&v316[8];
    if (*(_QWORD *)&v316[8])
    {
      v131 = (unint64_t *)(*(_QWORD *)&v316[8] + 8);
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    v133 = (std::__shared_weak_count *)*((_QWORD *)&v306 + 1);
    if (*((_QWORD *)&v306 + 1))
    {
      v134 = (unint64_t *)(*((_QWORD *)&v306 + 1) + 8);
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v324 = v298;
    if (*((_QWORD *)&v298 + 1))
    {
      v136 = (unint64_t *)(*((_QWORD *)&v298 + 1) + 8);
      do
        v137 = __ldxr(v136);
      while (__stxr(v137 + 1, v136));
    }
    ML3ImportSession::_getGenreInfo((uint64_t)v316, a1, (uint64_t **)&v324);
    if (*(_QWORD *)v316)
    {
      *(_QWORD *)buf = *(_QWORD *)v316;
      *(_QWORD *)&buf[8] = *(_QWORD *)&v316[8];
      *(_QWORD *)v316 = 0;
      *(_QWORD *)&v316[8] = 0;
    }
    else
    {
      ML3ImportSession::_getDefaultEmptyGenre((ML3ImportSession *)buf);
    }
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v22 + 11), (__int128 *)buf);
    v138 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v139 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
        std::__shared_weak_count::__release_weak(v138);
      }
    }
    v141 = *(std::__shared_weak_count **)&v316[8];
    if (*(_QWORD *)&v316[8])
    {
      v142 = (unint64_t *)(*(_QWORD *)&v316[8] + 8);
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
    }
    v144 = (std::__shared_weak_count *)*((_QWORD *)&v324 + 1);
    if (*((_QWORD *)&v324 + 1))
    {
      v145 = (unint64_t *)(*((_QWORD *)&v324 + 1) + 8);
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    v147 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
    {
      v148 = *v22[3];
      v149 = *v22[5];
      v150 = *v22[9];
      v151 = *v22[11];
      v152 = *v22[7];
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v148;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v149;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v150;
      LOWORD(v326[0]) = 2048;
      *(_QWORD *)((char *)v326 + 2) = v151;
      WORD5(v326[0]) = 2048;
      *(_QWORD *)((char *)v326 + 12) = v152;
      _os_log_impl(&dword_1AC149000, v147, OS_LOG_TYPE_DEFAULT, "gathered collection pids in the new importer code path: artistPID=%lld, albumArtistPID=%lld, composerPID=%lld, genrePID=%lld, albumPID=%lld", buf, 0x34u);
    }

  }
  else
  {
    *(_BYTE *)(a1 + 1521) = 1;
    *(_OWORD *)&buf[16] = 0u;
    memset(v326, 0, sizeof(v326));
    ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)v316);
    *(_OWORD *)buf = *(_OWORD *)v316;
    ML3ImportSession::_getDefaultEmptyArtist((ML3ImportSession *)v316);
    *(_OWORD *)&buf[16] = *(_OWORD *)v316;
    ML3ImportSession::_getDefaultEmptyAlbum((ML3ImportSession *)v316);
    v326[0] = *(_OWORD *)v316;
    v307 = v14;
    v308 = v13;
    if (v13)
    {
      v27 = (unint64_t *)&v13->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    ML3ImportSession::_getComposerInfo(&__p, a1, &v307);
    v29 = __p;
    if (__p)
    {
      v30 = v310;
      __p = 0;
      v310 = 0;
    }
    else
    {
      ML3ImportSession::_getDefaultEmptyComposer((ML3ImportSession *)v316);
      v29 = *(void **)v316;
      v30 = *(_QWORD *)&v316[8];
    }
    *(_QWORD *)v316 = 0;
    *(_QWORD *)&v316[8] = 0;
    *(_QWORD *)&v326[1] = v29;
    *((_QWORD *)&v326[1] + 1) = v30;
    v153 = (std::__shared_weak_count *)v310;
    if (v310)
    {
      v154 = (unint64_t *)(v310 + 8);
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    v156 = v308;
    if (v308)
    {
      v157 = (unint64_t *)&v308->__shared_owners_;
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
    *(_OWORD *)&v305.__r_.__value_.__l.__data_ = v298;
    if (*((_QWORD *)&v298 + 1))
    {
      v159 = (unint64_t *)(*((_QWORD *)&v298 + 1) + 8);
      do
        v160 = __ldxr(v159);
      while (__stxr(v160 + 1, v159));
    }
    ML3ImportSession::_getGenreInfo((uint64_t)&__p, a1, (uint64_t **)&v305);
    v161 = __p;
    if (__p)
    {
      v162 = v310;
      __p = 0;
      v310 = 0;
    }
    else
    {
      ML3ImportSession::_getDefaultEmptyGenre((ML3ImportSession *)v316);
      v161 = *(void **)v316;
      v162 = *(_QWORD *)&v316[8];
    }
    *(_QWORD *)v316 = 0;
    *(_QWORD *)&v316[8] = 0;
    v163 = (std::__shared_weak_count *)*((_QWORD *)&v326[2] + 1);
    *(_QWORD *)&v326[2] = v161;
    *((_QWORD *)&v326[2] + 1) = v162;
    if (v163)
    {
      v164 = (unint64_t *)&v163->__shared_owners_;
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
    v166 = *(std::__shared_weak_count **)&v316[8];
    if (*(_QWORD *)&v316[8])
    {
      v167 = (unint64_t *)(*(_QWORD *)&v316[8] + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    v169 = (std::__shared_weak_count *)v310;
    if (v310)
    {
      v170 = (unint64_t *)(v310 + 8);
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    size = (std::__shared_weak_count *)v305.__r_.__value_.__l.__size_;
    if (v305.__r_.__value_.__l.__size_)
    {
      v173 = (unint64_t *)(v305.__r_.__value_.__l.__size_ + 8);
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v294 = v304;
    v175 = std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 336, v304, &v304);
    v176 = *(uint64_t **)buf;
    std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v175 + 3, *(uint64_t *)buf, *(uint64_t *)&buf[8]);
    v177 = *(uint64_t **)&buf[16];
    std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v175 + 5, *(uint64_t *)&buf[16], *(uint64_t *)&buf[24]);
    v178 = *(uint64_t **)&v326[0];
    std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v175 + 7, *(uint64_t *)&v326[0], *((uint64_t *)&v326[0] + 1));
    v179 = *(uint64_t **)&v326[1];
    std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v175 + 9, *(uint64_t *)&v326[1], *((uint64_t *)&v326[1] + 1));
    v180 = v326[2];
    std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v175 + 11, *(uint64_t *)&v326[2], *((uint64_t *)&v326[2] + 1));
    v181 = os_log_create("com.apple.amp.medialibrary", "Import_Oversize");
    if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v298 + 88))(&__p);
      p_p = &__p;
      if (SHIBYTE(v311) < 0)
        p_p = __p;
      v183 = *v176;
      v184 = *v177;
      v185 = *v179;
      v186 = *(_QWORD *)v180;
      v187 = *v178;
      *(_DWORD *)v316 = 136447746;
      *(_QWORD *)&v316[4] = p_p;
      *(_WORD *)&v316[12] = 2048;
      *(_QWORD *)&v316[14] = v294;
      *(_WORD *)&v316[22] = 2048;
      *(_QWORD *)&v316[24] = v183;
      *(_WORD *)v317 = 2048;
      *(_QWORD *)&v317[2] = v184;
      v318 = 2048;
      v319 = v185;
      v320 = 2048;
      v321 = v186;
      v322 = 2048;
      v323 = v187;
      _os_log_impl(&dword_1AC149000, v181, OS_LOG_TYPE_DEFAULT, "Could not find collections for trackImportItem=%{public}s, trackPersistentID=%lld: artistPID=%lld, albumArtistPID=%lld, composerPID=%lld, genrePID=%lld, albumPID=%lld", v316, 0x48u);
      if (SHIBYTE(v311) < 0)
        operator delete(__p);
    }

    if (*((_QWORD *)&v180 + 1))
    {
      v188 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v180 + 1) + 16))(*((_QWORD *)&v180 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v180 + 1));
      }
    }
    v190 = (std::__shared_weak_count *)*((_QWORD *)&v326[1] + 1);
    if (*((_QWORD *)&v326[1] + 1))
    {
      v191 = (unint64_t *)(*((_QWORD *)&v326[1] + 1) + 8);
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
    v193 = (std::__shared_weak_count *)*((_QWORD *)&v326[0] + 1);
    if (*((_QWORD *)&v326[0] + 1))
    {
      v194 = (unint64_t *)(*((_QWORD *)&v326[0] + 1) + 8);
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
    v196 = *(std::__shared_weak_count **)&buf[24];
    if (*(_QWORD *)&buf[24])
    {
      v197 = (unint64_t *)(*(_QWORD *)&buf[24] + 8);
      do
        v198 = __ldaxr(v197);
      while (__stlxr(v198 - 1, v197));
      if (!v198)
      {
        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
        std::__shared_weak_count::__release_weak(v196);
      }
    }
    v124 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v199 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v126 = __ldaxr(v199);
      while (__stlxr(v126 - 1, v199));
LABEL_281:
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
  }
LABEL_283:
  if (v13)
  {
    v200 = (unint64_t *)&v13->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v202 = (std::__shared_weak_count *)a2[1];
  v297[0] = *a2;
  v297[1] = v202;
  if (v202)
  {
    v203 = (unint64_t *)&v202->__shared_owners_;
    do
      v204 = __ldxr(v203);
    while (__stxr(v204 + 1, v203));
  }
  v205 = ML3ImportSession::_prepareArtwork(a1, v297, 167772183, 1uLL);
  v206 = v205;
  if (!v202)
    goto LABEL_295;
  v207 = (unint64_t *)&v202->__shared_owners_;
  do
    v208 = __ldaxr(v207);
  while (__stlxr(v208 - 1, v207));
  if (v208)
  {
LABEL_295:
    if ((v205 & 1) != 0)
      goto LABEL_296;
LABEL_391:
    v289 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v289, OS_LOG_TYPE_ERROR, "failed to prepare item artwork", buf, 2u);
    }

    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
  std::__shared_weak_count::__release_weak(v202);
  if ((v206 & 1) == 0)
    goto LABEL_391;
LABEL_296:
  v209 = (std::__shared_weak_count *)a2[1];
  v296[0] = *a2;
  v296[1] = v209;
  if (v209)
  {
    v210 = (unint64_t *)&v209->__shared_owners_;
    do
      v211 = __ldxr(v210);
    while (__stxr(v211 + 1, v210));
  }
  v212 = ML3ImportSession::_prepareArtwork(a1, v296, 167772184, 2uLL);
  v213 = v212;
  if (!v209)
    goto LABEL_303;
  v214 = (unint64_t *)&v209->__shared_owners_;
  do
    v215 = __ldaxr(v214);
  while (__stlxr(v215 - 1, v214));
  if (v215)
  {
LABEL_303:
    if ((v212 & 1) != 0)
      goto LABEL_304;
LABEL_398:
    v291 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v291, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v291, OS_LOG_TYPE_ERROR, "failed to prepare item screenshot", buf, 2u);
    }

    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
  std::__shared_weak_count::__release_weak(v209);
  if ((v213 & 1) == 0)
    goto LABEL_398;
LABEL_304:
  v216 = (std::__shared_weak_count *)a2[1];
  v295[0] = *a2;
  v295[1] = v216;
  if (v216)
  {
    v217 = (unint64_t *)&v216->__shared_owners_;
    do
      v218 = __ldxr(v217);
    while (__stxr(v218 + 1, v217));
  }
  v219 = ML3ImportSession::_prepareArtworkFromSecondarySource(a1, v295, 167772187, 167772188, 1uLL);
  if (v216)
  {
    v220 = (unint64_t *)&v216->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  if ((v219 & 1) == 0)
  {
    v290 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v290, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v290, OS_LOG_TYPE_ERROR, "failed to prepare item secondary source artwork", buf, 2u);
    }

    return 0;
  }
  v223 = (_QWORD *)*a2;
  v222 = (std::__shared_weak_count *)a2[1];
  if (v222)
  {
    v224 = (unint64_t *)&v222->__shared_owners_;
    do
      v225 = __ldxr(v224);
    while (__stxr(v225 + 1, v224));
  }
  v292 = v222;
  v226 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v223 + 32))(v223, 16777217);
  if (v226 == 0x10000 || v226 == 2)
  {
    v228 = v223[1];
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x5812000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__198;
    *(_QWORD *)&v326[0] = __Block_byref_object_dispose__199;
    memset((char *)v326 + 8, 0, 40);
    v327 = 1065353216;
    v229 = *(void **)(a1 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v228);
    v230 = (uint64_t *)objc_claimAutoreleasedReturnValue();
    v314 = v230;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v314, 1);
    v231 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v229, "executeQuery:withParameters:", CFSTR("SELECT booklet_pid FROM booklet WHERE item_pid = ?"), v231);
    v293 = (void *)objc_claimAutoreleasedReturnValue();

    __p = (void *)MEMORY[0x1E0C809B0];
    v310 = 3221225472;
    v311 = ___ZN16ML3ImportSession21_prepareTrackBookletsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke;
    v312 = &unk_1E5B65200;
    v313 = buf;
    objc_msgSend(v293, "enumerateRowsWithBlock:", &__p);
    (*(void (**)(uint64_t **__return_ptr, _QWORD *, uint64_t))(*v223 + 80))(&v307, v223, 385875969);
    v232 = (std::__shared_weak_count *)v307;
    if (v307 != (uint64_t *)v308)
    {
      do
      {
        v233 = v232->__vftable;
        shared_owners = v232->__shared_owners_;
        *(_QWORD *)&v306 = v232->__vftable;
        *((_QWORD *)&v306 + 1) = shared_owners;
        if (shared_owners)
        {
          v235 = (unint64_t *)(shared_owners + 8);
          do
            v236 = __ldxr(v235);
          while (__stxr(v236 + 1, v235));
        }
        (*((void (**)(_BYTE *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v233->~__shared_weak_count
         + 3))(v316, v233, 385875970);
        if ((v317[7] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(&v305, *(const std::string::value_type **)&v316[16], *(std::string::size_type *)&v316[24]);
          *(_QWORD *)v316 = off_1E5B4D010;
          if ((v317[7] & 0x80000000) != 0)
            operator delete(*(void **)&v316[16]);
        }
        else
        {
          *(_OWORD *)&v305.__r_.__value_.__l.__data_ = *(_OWORD *)&v316[16];
          v305.__r_.__value_.__r.__words[2] = *(_QWORD *)v317;
        }
        v237 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *, uint64_t))v233->~__shared_weak_count + 4))(v233, 385875971);
        +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_item_id"), v237);
        v238 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v324 = v238;
        +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_pid"), v228);
        v239 = (void *)objc_claimAutoreleasedReturnValue();
        *((_QWORD *)&v324 + 1) = v239;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v324, 2);
        v240 = (void *)objc_claimAutoreleasedReturnValue();
        +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v240);
        v241 = (void *)objc_claimAutoreleasedReturnValue();

        +[ML3Entity unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:](ML3Booklet, "unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:", *(_QWORD *)(a1 + 8), v241, 0);
        v242 = (void *)objc_claimAutoreleasedReturnValue();
        v243 = objc_msgSend(v242, "anyEntityPersistentID");
        v244 = "matched";
        if (!v243)
        {
          v243 = objc_msgSend(*(id *)(a1 + 104), "nextPersistentID");
          v244 = "new";
        }
        v233->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v243;
        v245 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v245, OS_LOG_TYPE_DEFAULT))
        {
          v246 = &v305;
          if ((v305.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v246 = (std::string *)v305.__r_.__value_.__r.__words[0];
          *(_DWORD *)v316 = 134219010;
          *(_QWORD *)&v316[4] = v243;
          *(_WORD *)&v316[12] = 2082;
          *(_QWORD *)&v316[14] = v244;
          *(_WORD *)&v316[22] = 2048;
          *(_QWORD *)&v316[24] = v228;
          *(_WORD *)v317 = 2082;
          *(_QWORD *)&v317[2] = v246;
          v318 = 2048;
          v319 = v237;
          _os_log_impl(&dword_1AC149000, v245, OS_LOG_TYPE_DEFAULT, "insert/replace booklet: pid=%lld (%{public}s) item_pid=%lld, name=%{public}s, store_item_id=%lld", v316, 0x34u);
        }

        v247 = *(_QWORD **)(a1 + 2680);
        v248 = *(_QWORD *)(a1 + 2688);
        if ((unint64_t)v247 >= v248)
        {
          v252 = *(_QWORD *)(a1 + 2672);
          v253 = ((uint64_t)v247 - v252) >> 4;
          v254 = v253 + 1;
          if ((unint64_t)(v253 + 1) >> 60)
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          v255 = v248 - v252;
          if (v255 >> 3 > v254)
            v254 = v255 >> 3;
          if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFF0)
            v256 = 0xFFFFFFFFFFFFFFFLL;
          else
            v256 = v254;
          *(_QWORD *)v317 = a1 + 2688;
          v257 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v256);
          v259 = &v257[16 * v253];
          v260 = *((_QWORD *)&v306 + 1);
          *(_OWORD *)v259 = v306;
          if (v260)
          {
            v261 = (unint64_t *)(v260 + 8);
            do
              v262 = __ldxr(v261);
            while (__stxr(v262 + 1, v261));
          }
          v263 = *(_QWORD **)(a1 + 2680);
          v264 = *(_QWORD **)(a1 + 2672);
          if (v263 == v264)
          {
            v267 = vdupq_n_s64((unint64_t)v263);
            v265 = &v257[16 * v253];
          }
          else
          {
            v265 = &v257[16 * v253];
            do
            {
              v266 = *((_OWORD *)v263 - 1);
              v263 -= 2;
              *((_OWORD *)v265 - 1) = v266;
              v265 -= 16;
              *v263 = 0;
              v263[1] = 0;
            }
            while (v263 != v264);
            v267 = *(int64x2_t *)(a1 + 2672);
          }
          v251 = v259 + 16;
          *(_QWORD *)(a1 + 2672) = v265;
          *(_QWORD *)(a1 + 2680) = v259 + 16;
          *(int64x2_t *)&v316[8] = v267;
          v268 = *(_QWORD *)(a1 + 2688);
          *(_QWORD *)(a1 + 2688) = &v257[16 * v258];
          *(_QWORD *)&v316[24] = v268;
          *(_QWORD *)v316 = v267.i64[0];
          std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)v316);
        }
        else
        {
          *v247 = v306;
          v247[1] = shared_owners;
          if (shared_owners)
          {
            v249 = (unint64_t *)(shared_owners + 8);
            do
              v250 = __ldxr(v249);
            while (__stxr(v250 + 1, v249));
          }
          v251 = v247 + 2;
        }
        *(_QWORD *)(a1 + 2680) = v251;
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>((_QWORD *)(*(_QWORD *)&buf[8] + 48), v243);

        if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v305.__r_.__value_.__l.__data_);
        v269 = (std::__shared_weak_count *)*((_QWORD *)&v306 + 1);
        if (*((_QWORD *)&v306 + 1))
        {
          v270 = (unint64_t *)(*((_QWORD *)&v306 + 1) + 8);
          do
            v271 = __ldaxr(v270);
          while (__stlxr(v271 - 1, v270));
          if (!v271)
          {
            ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
            std::__shared_weak_count::__release_weak(v269);
          }
        }
        v232 = (std::__shared_weak_count *)((char *)v232 + 16);
      }
      while (v232 != v308);
    }
    for (i = *(_QWORD **)(*(_QWORD *)&buf[8] + 64); i; i = (_QWORD *)*i)
    {
      v273 = i[2];
      v274 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v274, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v316 = 134218240;
        *(_QWORD *)&v316[4] = v273;
        *(_WORD *)&v316[12] = 2048;
        *(_QWORD *)&v316[14] = v228;
        _os_log_impl(&dword_1AC149000, v274, OS_LOG_TYPE_DEFAULT, "delete booklet: pid=%lld, item_pid=%lld", v316, 0x16u);
      }

      v275 = *(char **)(a1 + 2704);
      v276 = *(_QWORD *)(a1 + 2712);
      if ((unint64_t)v275 >= v276)
      {
        v278 = *(char **)(a1 + 2696);
        v279 = (v275 - v278) >> 3;
        v280 = v279 + 1;
        if ((unint64_t)(v279 + 1) >> 61)
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        v281 = v276 - (_QWORD)v278;
        if (v281 >> 2 > v280)
          v280 = v281 >> 2;
        if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFF8)
          v282 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v282 = v280;
        if (v282)
        {
          v282 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v282);
          v275 = *(char **)(a1 + 2704);
          v278 = *(char **)(a1 + 2696);
        }
        else
        {
          v283 = 0;
        }
        v284 = (_QWORD *)(v282 + 8 * v279);
        *v284 = v273;
        v277 = v284 + 1;
        while (v275 != v278)
        {
          v285 = *((_QWORD *)v275 - 1);
          v275 -= 8;
          *--v284 = v285;
        }
        *(_QWORD *)(a1 + 2696) = v284;
        *(_QWORD *)(a1 + 2704) = v277;
        *(_QWORD *)(a1 + 2712) = v282 + 8 * v283;
        if (v278)
          operator delete(v278);
      }
      else
      {
        *(_QWORD *)v275 = v273;
        v277 = v275 + 8;
      }
      *(_QWORD *)(a1 + 2704) = v277;
    }
    *(_QWORD *)v316 = &v307;
    std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)v316);

    _Block_object_dispose(buf, 8);
    std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v326[1]);
  }
  if (v292)
  {
    v286 = (unint64_t *)&v292->__shared_owners_;
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
      std::__shared_weak_count::__release_weak(v292);
    }
  }
  return 1;
}

void sub_1AC35A6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);

  _Block_object_dispose((const void *)(v10 - 192), 8);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a2);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_prepareArtwork(uint64_t a1, _QWORD *a2, uint64_t a3, std::string::size_type a4)
{
  uint64_t v7;
  std::string::size_type v8;
  uint64_t inserted;
  uint64_t (**v11)();
  char v12;
  std::string __p;
  uint64_t (**v14)();
  char v15;
  std::string v16;

  (*(void (**)(uint64_t (***__return_ptr)(), _QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(&v14, *a2, a3);
  if (v15)
  {
    v7 = +[ML3MusicLibrary artworkSourceTypeForTrackSource:](ML3MusicLibrary, "artworkSourceTypeForTrackSource:", *(unsigned int *)(a1 + 32));
    v8 = *(_QWORD *)(*a2 + 8);
    v11 = off_1E5B4D010;
    v12 = v15;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
    else
      __p = v16;
    inserted = ML3ImportSession::_insertIntoArtworkTokenTable(a1, v8, (uint64_t)&v11, v7, a4 == 5, a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    inserted = 1;
  }
  v14 = off_1E5B4D010;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return inserted;
}

void sub_1AC35A9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportSession::_prepareArtworkFromSecondarySource(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, std::string::size_type a5)
{
  uint64_t v9;
  std::string::size_type v10;
  uint64_t inserted;
  uint64_t (**v13)();
  char v14;
  std::string __p;
  uint64_t (**v16)();
  char v17;
  std::string v18;

  (*(void (**)(uint64_t (***__return_ptr)(), _QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(&v16, *a2, a3);
  if (v17 && (v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, a4)) != 0)
  {
    v10 = *(_QWORD *)(*a2 + 8);
    v13 = off_1E5B4D010;
    v14 = v17;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    else
      __p = v18;
    inserted = ML3ImportSession::_insertIntoArtworkTokenTable(a1, v10, (uint64_t)&v13, v9, a5 == 5, a5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    inserted = 1;
  }
  v16 = off_1E5B4D010;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return inserted;
}

void sub_1AC35AB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__198(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__199(uint64_t a1)
{
  return std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 48);
}

void ___ZN16ML3ImportSession21_prepareTrackBookletsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = objc_msgSend(v4, "int64ForColumnIndex:", 0);
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, v3, v3);

}

void sub_1AC35AC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_insertIntoArtworkTokenTable(uint64_t a1, std::string::size_type a2, uint64_t a3, uint64_t a4, uint64_t a5, std::string::size_type a6)
{
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string::size_type size;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  void **v24;
  int v25;
  size_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  std::string *v35;
  void *v36;
  NSObject *v37;
  char v38;
  std::string::size_type *v39;
  unint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  std::string::size_type *v48;
  uint64_t v49;
  uint64_t v50;
  id v53;
  char *v54;
  uint64_t v55;
  char *v56;
  std::string v57;
  std::string v58;
  void *__p[2];
  unsigned __int8 v60;
  void **v61;
  char v62;
  _QWORD v63[4];
  std::string v64;
  _BYTE v65[6];
  __int16 v66;
  void *v67;
  uint64_t v68;
  int v69;
  char v70;
  std::string::size_type v71;
  int v72;
  char v73;
  std::string::size_type v74;
  int v75;
  char v76;
  _QWORD v77[3];
  int v78;
  _BYTE v79[8];
  uint64_t v80[3];

  v80[0] = *MEMORY[0x1E0C80C00];
  v10 = (std::string *)(a3 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 32);
  }
  if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v64.__r_.__value_.__s + 23))
      goto LABEL_6;
LABEL_9:
    v14 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v64.__r_.__value_.__l.__data_) = 134218752;
      *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = a2;
      WORD2(v64.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v64.__r_.__value_.__r.__words[1] + 6) = a5;
      WORD1(v64.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v64.__r_.__value_.__r.__words[2]) = a4;
      *(_WORD *)v65 = 1024;
      *(_DWORD *)&v65[2] = a6;
      _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_DEFAULT, "Delete artwork_token: pid=%lld entity_type=%d source=%d type=%d", (uint8_t *)&v64, 0x1Eu);
    }

    v15 = *(void **)(a1 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v63[0] = v16;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a6);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v63[1] = v17;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a2);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v63[2] = v18;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a5);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v63[3] = v19;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v63, 4);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = 0;
    LODWORD(v15) = objc_msgSend(v15, "executeUpdate:withParameters:error:", CFSTR("DELETE FROM artwork_token WHERE artwork_source_type = ? AND artwork_type = ? AND entity_pid = ? AND entity_type = ?"), v20, &v53);
    v21 = v53;

    if ((_DWORD)v15)
      goto LABEL_68;
    goto LABEL_12;
  }
  size = v64.__r_.__value_.__l.__size_;
  operator delete(v64.__r_.__value_.__l.__data_);
  if (!size)
    goto LABEL_9;
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, "INSERT OR REPLACE INTO artwork_token (artwork_token,artwork_source_type,artwork_type,entity_pid,entity_type)");
  v11 = *(char *)(a1 + 1511);
  if (v11 < 0)
    v12 = *(_QWORD *)(a1 + 1496);
  else
    v12 = *(unsigned __int8 *)(a1 + 1511);
  v24 = (void **)(a1 + 1488);
  if (!v12)
  {
    v50 = a4;
    v25 = (char)v60;
    if ((v60 & 0x80u) == 0)
      v26 = v60;
    else
      v26 = (size_t)__p[1];
    v27 = v26 + 9;
    if (v26 + 9 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v27 >= 0x17)
    {
      v49 = a5;
      v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17)
        v29 = v27 | 7;
      v30 = v29 + 1;
      v28 = operator new(v29 + 1);
      v57.__r_.__value_.__l.__size_ = v26 + 9;
      v57.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      a5 = v49;
    }
    else
    {
      memset(&v57, 0, sizeof(v57));
      *((_BYTE *)&v57.__r_.__value_.__s + 23) = v26 + 9;
      if ((v27 & 0x80u) == 0)
        v28 = &v57;
      else
        v28 = 0;
      if (!v26)
        goto LABEL_36;
    }
    if (v25 >= 0)
      v31 = __p;
    else
      v31 = (void **)__p[0];
    memmove(v28, v31, v26);
LABEL_36:
    v32 = 0;
    strcpy((char *)v28 + v26, " VALUES (");
    a4 = v50;
    do
    {
      std::string::push_back(&v57, 63);
      if (v32 <= 3)
        std::string::push_back(&v57, 44);
      ++v32;
    }
    while (v32 != 5);
    std::string::push_back(&v57, 41);
    if (*(char *)(a1 + 1511) < 0)
      operator delete(*v24);
    *(_QWORD *)(a1 + 1504) = *((_QWORD *)&v57.__r_.__value_.__l + 2);
    *(_OWORD *)v24 = *(_OWORD *)&v57.__r_.__value_.__l.__data_;
    *((_BYTE *)&v57.__r_.__value_.__s + 23) = 0;
    v57.__r_.__value_.__s.__data_[0] = 0;
    if ((*(_BYTE *)(a1 + 1511) & 0x80) == 0)
      goto LABEL_18;
LABEL_43:
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(a1 + 1488), *(_QWORD *)(a1 + 1496));
    goto LABEL_44;
  }
  if ((v11 & 0x80) != 0)
    goto LABEL_43;
LABEL_18:
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)v24;
  v58.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1504);
LABEL_44:
  if (!v12 && SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 39) < 0)
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  else
    v64 = *v10;
  *(_DWORD *)v65 = 3;
  LOBYTE(v67) = 1;
  v68 = a4;
  v69 = 0;
  v70 = 1;
  v71 = a6;
  v72 = 0;
  v73 = 1;
  v74 = a2;
  v75 = 0;
  v76 = 1;
  v77[0] = a5;
  v78 = 0;
  v79[0] = 1;
  v55 = 0;
  v56 = 0;
  v54 = 0;
  v61 = (void **)&v54;
  v62 = 0;
  v54 = (char *)operator new(0xC8uLL);
  v55 = (uint64_t)v54;
  v56 = v54 + 200;
  v33 = 0;
  v55 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)&v56, (uint64_t)&v64, (uint64_t)v80, (uint64_t)v54);
  do
  {
    if (v79[v33 * 8])
      std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v77[v33]);
    v33 -= 5;
  }
  while (v33 != -25);
  v34 = (void *)MEMORY[0x1E0CB3940];
  if (*(char *)(a3 + 39) < 0)
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  else
    v64 = *v10;
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v64;
  else
    v35 = (std::string *)v64.__r_.__value_.__r.__words[0];
  objc_msgSend(v34, "stringWithUTF8String:", v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  v37 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v64.__r_.__value_.__l.__data_) = 134219010;
    *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = a2;
    WORD2(v64.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v64.__r_.__value_.__r.__words[1] + 6) = a5;
    WORD1(v64.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(v64.__r_.__value_.__r.__words[2]) = a4;
    *(_WORD *)v65 = 1024;
    *(_DWORD *)&v65[2] = a6;
    v66 = 2114;
    v67 = v36;
    _os_log_impl(&dword_1AC149000, v37, OS_LOG_TYPE_DEFAULT, "Insert/replace artwork_token: pid=%lld entity_type=%d source=%d type=%d token=%{public}@", (uint8_t *)&v64, 0x28u);
  }

  v38 = ML3ImportExecuteVariadicStatement(*(void **)(a1 + 16), (const UInt8 *)&v58, (uint64_t *)&v54);
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if ((char)v60 < 0)
  {
    operator delete(__p[0]);
    if ((v38 & 1) != 0)
      goto LABEL_68;
  }
  else if ((v38 & 1) != 0)
  {
LABEL_68:
    v39 = *(std::string::size_type **)(a1 + 704);
    v40 = *(_QWORD *)(a1 + 712);
    if ((unint64_t)v39 >= v40)
    {
      v42 = *(char **)(a1 + 696);
      v43 = ((char *)v39 - v42) >> 4;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v45 = v40 - (_QWORD)v42;
      if (v45 >> 3 > v44)
        v44 = v45 >> 3;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
        v46 = 0xFFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      if (v46)
      {
        if (v46 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v47 = (char *)operator new(16 * v46);
      }
      else
      {
        v47 = 0;
      }
      v48 = (std::string::size_type *)&v47[16 * v43];
      *v48 = a2;
      v48[1] = a6;
      v41 = v48 + 2;
      if (v39 != (std::string::size_type *)v42)
      {
        do
        {
          *((_OWORD *)v48 - 1) = *((_OWORD *)v39 - 1);
          v48 -= 2;
          v39 -= 2;
        }
        while (v39 != (std::string::size_type *)v42);
        v39 = *(std::string::size_type **)(a1 + 696);
      }
      *(_QWORD *)(a1 + 696) = v48;
      *(_QWORD *)(a1 + 704) = v41;
      *(_QWORD *)(a1 + 712) = &v47[16 * v46];
      if (v39)
        operator delete(v39);
    }
    else
    {
      *v39 = a2;
      v39[1] = a6;
      v41 = v39 + 2;
    }
    *(_QWORD *)(a1 + 704) = v41;
    return 1;
  }
LABEL_12:
  v22 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v64.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = a2;
    _os_log_impl(&dword_1AC149000, v22, OS_LOG_TYPE_ERROR, "failed to update artwork_token entry for track. track_pid=%lld", (uint8_t *)&v64, 0xCu);
  }

  return 0;
}

void sub_1AC35B368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a23 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

void ML3ImportSession::_getComposerInfo(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  char v17;
  void *v18;
  void *v19;
  void *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t PropertyIndex;
  std::string::size_type size;
  _BYTE *v31;
  id v32;
  void *v33;
  int8x8_t v34;
  uint8x8_t v35;
  unint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t IntegerUUID;
  NSObject *v40;
  _QWORD *v41;
  std::string::__raw *v42;
  const UInt8 *v43;
  const std::string *v44;
  std::string *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::string::size_type v52;
  std::string::size_type v53;
  uint64_t v54;
  int v55;
  const void **p_data;
  unsigned __int8 *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::string::size_type v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  const UInt8 *v72;
  uint64_t *v73;
  char *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  id v79;
  unint64_t *v80;
  unint64_t v81;
  std::string *v82;
  __int128 v83;
  id v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  __int128 *v88;
  unint64_t v89;
  _OWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  __int128 *v98;
  _QWORD *v99;
  _QWORD *v100;
  char *v101;
  __int128 v102;
  int64x2_t v103;
  _QWORD *v104;
  _QWORD *i;
  unint64_t v106;
  unint64_t v107;
  int8x8_t v108;
  unint64_t v109;
  uint8x8_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  char shouldPreserveTrackProperty;
  char v119;
  unint64_t *v120;
  unint64_t v121;
  std::string::size_type v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  char v140;
  unint64_t *v141;
  unint64_t v142;
  void *v143;
  uint64_t k;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unsigned __int8 **v151;
  unsigned __int8 *j;
  unint64_t v153;
  uint64_t v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  __int16 v170;
  unint64_t v172;
  __int128 v173;
  _QWORD v174[2];
  _QWORD v175[2];
  _QWORD v176[4];
  id v177;
  uint64_t *v178;
  uint64_t *v179;
  _BYTE *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  char v187;
  char v188;
  uint64_t v189;
  const std::string *v190;
  uint64_t v191;
  __n128 (*v192)(__n128 *, __n128 *);
  void (*v193)(uint64_t);
  uint64_t v194;
  std::string __p;
  uint64_t v196;
  const UInt8 *v197;
  uint64_t v198;
  __n128 (*v199)(__n128 *, __n128 *);
  void (*v200)(uint64_t);
  uint64_t v201;
  std::string v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t (*v206)(uint64_t, uint64_t);
  void (*v207)(uint64_t);
  id v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  __n128 (*v212)(__n128 *, __n128 *);
  uint64_t (*v213)(uint64_t);
  const char *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  __int128 v217;
  std::string v218;
  void *v219;
  id v220;
  _BYTE *v221;
  uint64_t v222;
  unint64_t v223;
  _BYTE buf[40];
  const char *v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  int v228;
  _BYTE v229[8];
  uint64_t v230;
  _QWORD v231[3];
  _QWORD v232[2];
  void *v233;
  void *v234;
  __int128 v235;
  _QWORD v236[4];

  v236[1] = *MEMORY[0x1E0C80C00];
  v209 = 0;
  v210 = &v209;
  v211 = 0x4012000000;
  v212 = __Block_byref_object_copy__278;
  v213 = __Block_byref_object_dispose__279;
  v215 = 0;
  v216 = 0;
  v214 = "";
  v203 = 0;
  v204 = &v203;
  v205 = 0x3032000000;
  v206 = __Block_byref_object_copy__212;
  v207 = __Block_byref_object_dispose__213;
  v208 = 0;
  v196 = 0;
  v197 = (const UInt8 *)&v196;
  v198 = 0x4812000000;
  v199 = __Block_byref_object_copy__214;
  v200 = __Block_byref_object_dispose__215;
  v201 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a3 + 24))(buf, *a3, 167772165);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v202, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    v202 = *(std::string *)&buf[16];
  }
  v189 = 0;
  v190 = (const std::string *)&v189;
  v191 = 0x4812000000;
  v192 = __Block_byref_object_copy__214;
  v193 = __Block_byref_object_dispose__215;
  v194 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a3 + 24))(buf, *a3, 167772171);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    __p = *(std::string *)&buf[16];
  }
  v172 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 167772178);
  v5 = *a3;
  if (*(_BYTE *)(*a3 + 16) && !*(_BYTE *)(v5 + 17))
  {
    v10 = *(_QWORD *)(v5 + 8);
    v11 = *(void **)(a2 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v234 = v12;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v234, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "executeQuery:withParameters:", CFSTR("SELECT composer_pid FROM item WHERE ROWID = ?"), v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "objectForFirstRowAndColumn");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v15, "longLongValue"))
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      *(_QWORD *)&buf[24] = 0;
      v16 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 167772165);
      v17 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 167772171);
      v18 = *(void **)(a2 + 16);
      v233 = v15;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v233, 1);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "executeQuery:withParameters:", CFSTR("SELECT composer, sort_composer, representative_item_pid, grouping_key, sync_id FROM composer WHERE composer_pid=?"), v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v176[0] = MEMORY[0x1E0C809B0];
      v176[1] = 3321888768;
      v176[2] = ___ZN16ML3ImportSession16_getComposerInfoENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke;
      v176[3] = &unk_1E5B52528;
      v187 = v16;
      v188 = v17;
      v178 = &v196;
      v179 = &v189;
      v180 = buf;
      v181 = &v203;
      v22 = *a3;
      v21 = (std::__shared_weak_count *)a3[1];
      v183 = a2;
      v184 = v22;
      v185 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
      }
      v182 = &v209;
      v177 = v15;
      v186 = v10;
      objc_msgSend(v20, "enumerateRowsWithBlock:", v176);

      v25 = v185;
      if (v185)
      {
        v26 = (unint64_t *)&v185->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      _Block_object_dispose(buf, 8);
    }

  }
  else
  {
    v6 = *(void **)(a2 + 8);
    ML3CPPBridgeString(v197 + 48, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "groupingKeyForString:", v7);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v204[5];
    v204[5] = v8;

    if (!objc_msgSend((id)v204[5], "length"))
    {
      *a1 = 0;
      a1[1] = 0;
      goto LABEL_190;
    }
  }
  if (!v210[6] && objc_msgSend((id)v204[5], "length"))
  {
    v31 = buf;
    v32 = (id)v204[5];
    v33 = v32;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4012000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__278;
    *(_QWORD *)&buf[32] = __Block_byref_object_dispose__279;
    v227 = 0;
    v225 = "";
    v226 = 0;
    v34 = (int8x8_t)v172;
    if (v172)
    {
      v34 = *(int8x8_t *)(a2 + 936);
      if (v34)
      {
        v35 = (uint8x8_t)vcnt_s8(v34);
        v35.i16[0] = vaddlv_u8(v35);
        if (v35.u32[0] > 1uLL)
        {
          v36 = v172;
          if (v172 >= *(_QWORD *)&v34)
            v36 = v172 % *(_QWORD *)&v34;
        }
        else
        {
          v36 = (*(_QWORD *)&v34 - 1) & v172;
        }
        v104 = *(_QWORD **)(*(_QWORD *)(a2 + 928) + 8 * v36);
        if (v104)
        {
          for (i = (_QWORD *)*v104; i; i = (_QWORD *)*i)
          {
            v106 = i[1];
            if (v106 == v172)
            {
              if (i[2] == v172)
              {
                std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](&v226, i[3], i[4]);
                v31 = *(_BYTE **)&buf[8];
                v34 = *(int8x8_t *)(*(_QWORD *)&buf[8] + 48);
                if (!v33)
                  goto LABEL_219;
                goto LABEL_135;
              }
            }
            else
            {
              if (v35.u32[0] > 1uLL)
              {
                if (v106 >= *(_QWORD *)&v34)
                  v106 %= *(_QWORD *)&v34;
              }
              else
              {
                v106 &= *(_QWORD *)&v34 - 1;
              }
              if (v106 != v36)
                break;
            }
          }
        }
        v34 = 0;
      }
      v31 = buf;
    }
    if (!v32)
      goto LABEL_219;
LABEL_135:
    if (!*(_QWORD *)&v34)
    {
      ML3CPPStringFromData((NSData *)&v218, v33);
      v107 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v218);
      v108 = *(int8x8_t *)(a2 + 1176);
      if (!*(_QWORD *)&v108)
        goto LABEL_214;
      v109 = v107;
      v110 = (uint8x8_t)vcnt_s8(v108);
      v110.i16[0] = vaddlv_u8(v110);
      v111 = v110.u32[0];
      if (v110.u32[0] > 1uLL)
      {
        v112 = v107;
        if (v107 >= *(_QWORD *)&v108)
          v112 = v107 % *(_QWORD *)&v108;
      }
      else
      {
        v112 = (*(_QWORD *)&v108 - 1) & v107;
      }
      v151 = *(unsigned __int8 ***)(*(_QWORD *)(a2 + 1168) + 8 * v112);
      if (v151)
      {
        for (j = *v151; j; j = *(unsigned __int8 **)j)
        {
          v153 = *((_QWORD *)j + 1);
          if (v153 == v109)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100](j + 16, (unsigned __int8 *)&v218))
              break;
          }
          else
          {
            if (v111 > 1)
            {
              if (v153 >= *(_QWORD *)&v108)
                v153 %= *(_QWORD *)&v108;
            }
            else
            {
              v153 &= *(_QWORD *)&v108 - 1;
            }
            if (v153 != v112)
              goto LABEL_214;
          }
        }
      }
      else
      {
LABEL_214:
        j = 0;
      }
      if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v218.__r_.__value_.__l.__data_);
      v31 = *(_BYTE **)&buf[8];
      if (j)
      {
        std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)&buf[8] + 48), *((_QWORD *)j + 5), *((_QWORD *)j + 6));
        v31 = *(_BYTE **)&buf[8];
      }
    }
LABEL_219:
    v154 = *((_QWORD *)v31 + 6);
    if (v154)
      goto LABEL_230;
    v155 = *(void **)(a2 + 16);
    if (v33 && v172)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v172);
      v156 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)&v235 = v156;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v172);
      v157 = (void *)objc_claimAutoreleasedReturnValue();
      *((_QWORD *)&v235 + 1) = v157;
      v236[0] = v33;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v235, 3);
      v158 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v155, "executeQuery:withParameters:", CFSTR("SELECT composer, sort_composer, ROWID, IFNULL(sort_composer, ML3SortString(composer)), sync_id FROM composer WHERE (ROWID = ? OR sync_id = ?) OR grouping_key = ?"), v158);
      v159 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (v33)
      {
        *(_QWORD *)&v235 = v33;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v235, 1);
        v156 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v155, "executeQuery:withParameters:", CFSTR("SELECT composer, sort_composer, ROWID, IFNULL(sort_composer, ML3SortString(composer)), sync_id FROM composer WHERE grouping_key = (?)"), v156);
        v160 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_227:

        if (v160)
        {
          v218.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
          v218.__r_.__value_.__l.__size_ = 3221225472;
          v218.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN16ML3ImportSession24_getExistingComposerInfoEP6NSDatax_block_invoke;
          v219 = &unk_1E5B65088;
          v221 = buf;
          v222 = a2;
          v220 = v33;
          v223 = v172;
          objc_msgSend(v160, "enumerateRowsWithBlock:", &v218);

        }
        v31 = *(_BYTE **)&buf[8];
        v154 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
LABEL_230:
        v161 = *((_QWORD *)v31 + 7);
        *(_QWORD *)&v217 = v154;
        *((_QWORD *)&v217 + 1) = v161;
        if (v161)
        {
          v162 = (unint64_t *)(v161 + 8);
          do
            v163 = __ldxr(v162);
          while (__stxr(v163 + 1, v162));
        }
        _Block_object_dispose(buf, 8);
        v164 = v227;
        if (v227)
        {
          v165 = (unint64_t *)&v227->__shared_owners_;
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
        }

        std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v210 + 6), &v217);
        v167 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
        if (*((_QWORD *)&v217 + 1))
        {
          v168 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
          do
            v169 = __ldaxr(v168);
          while (__stlxr(v169 - 1, v168));
          if (!v169)
          {
            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
            std::__shared_weak_count::__release_weak(v167);
          }
        }
        goto LABEL_25;
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v172);
      v156 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)&v235 = v156;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v172);
      v157 = (void *)objc_claimAutoreleasedReturnValue();
      *((_QWORD *)&v235 + 1) = v157;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v235, 2);
      v158 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v155, "executeQuery:withParameters:", CFSTR("SELECT composer, sort_composer, ROWID, IFNULL(sort_composer, ML3SortString(composer)), sync_id FROM composer WHERE (ROWID = ? OR sync_id = ?)"), v158);
      v159 = objc_claimAutoreleasedReturnValue();
    }
    v160 = (void *)v159;

    goto LABEL_227;
  }
LABEL_25:
  if (v210[6])
  {
    v28 = *(int *)(a2 + 32);
    PropertyIndex = ML3TrackRulesGetPropertyIndex(10, 167772171);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    if (*(_DWORD *)(__specialRules + 56 * PropertyIndex + 4 * v28) == -1)
      goto LABEL_166;
    size = HIBYTE(v190[2].__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v190[2].__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v190[2].__r_.__value_.__l.__size_)
        goto LABEL_63;
    }
    else if (!*((_BYTE *)&v190[2].__r_.__value_.__s + 23))
    {
LABEL_63:
      if ((size & 0x80) != 0)
        size = v190[2].__r_.__value_.__l.__size_;
      goto LABEL_140;
    }
    v51 = v210[6];
    v52 = v190[2].__r_.__value_.__l.__size_;
    if ((size & 0x80u) == 0)
      v53 = HIBYTE(v190[2].__r_.__value_.__r.__words[2]);
    else
      v53 = v190[2].__r_.__value_.__l.__size_;
    v54 = *(unsigned __int8 *)(v51 + 55);
    v55 = (char)v54;
    if ((v54 & 0x80u) != 0)
      v54 = *(_QWORD *)(v51 + 40);
    if (v53 == v54)
    {
      p_data = (const void **)&v190[2].__r_.__value_.__l.__data_;
      if (v55 >= 0)
        v57 = (unsigned __int8 *)(v51 + 32);
      else
        v57 = *(unsigned __int8 **)(v51 + 32);
      if ((size & 0x80) != 0)
      {
        v113 = memcmp(*p_data, v57, v190[2].__r_.__value_.__l.__size_);
        size = v52;
        if (!v113)
        {
LABEL_140:
          if (size)
            goto LABEL_166;
          v51 = v210[6];
          LOBYTE(v55) = *(_BYTE *)(v51 + 55);
          goto LABEL_142;
        }
      }
      else
      {
        if (!*((_BYTE *)&v190[2].__r_.__value_.__s + 23))
        {
LABEL_142:
          if ((v55 & 0x80) != 0)
          {
            if (!*(_QWORD *)(v51 + 40))
              goto LABEL_166;
          }
          else if (!(_BYTE)v55)
          {
            goto LABEL_166;
          }
          goto LABEL_149;
        }
        v58 = HIBYTE(v190[2].__r_.__value_.__r.__words[2]);
        while (*(unsigned __int8 *)p_data == *v57)
        {
          p_data = (const void **)((char *)p_data + 1);
          ++v57;
          if (!--v58)
            goto LABEL_63;
        }
      }
    }
LABEL_149:
    v115 = (std::__shared_weak_count *)a3[1];
    v175[0] = *a3;
    v175[1] = v115;
    if (v115)
    {
      v116 = (unint64_t *)&v115->__shared_owners_;
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
    }
    shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v175, 0xA00000Bu);
    v119 = shouldPreserveTrackProperty;
    if (!v115)
      goto LABEL_156;
    v120 = (unint64_t *)&v115->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
      if ((v119 & 1) != 0)
        goto LABEL_166;
    }
    else
    {
LABEL_156:
      if ((shouldPreserveTrackProperty & 1) != 0)
        goto LABEL_166;
    }
    if (SHIBYTE(v190[2].__r_.__value_.__r.__words[2]) < 0)
      v122 = v190[2].__r_.__value_.__l.__size_;
    else
      v122 = HIBYTE(v190[2].__r_.__value_.__r.__words[2]);
    v123 = *(void **)(a2 + 16);
    if (v122)
      ML3CPPBridgeString((const UInt8 *)&v190[2], 1);
    else
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v124 = (void *)objc_claimAutoreleasedReturnValue();
    v232[0] = v124;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v210[6]);
    v125 = (void *)objc_claimAutoreleasedReturnValue();
    v232[1] = v125;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v232, 2);
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v123, "executeUpdate:withParameters:error:", CFSTR("UPDATE composer SET sort_composer = ? WHERE ROWID = ?"), v126, 0);

    std::string::operator=((std::string *)(v210[6] + 32), v190 + 2);
    v127 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a2, (uint64_t)&v190[2], (uint64_t)(v197 + 48));
    v128 = v210[6];
    *(_QWORD *)(v128 + 56) = v127;
    *(_QWORD *)(v128 + 64) = v129;
    v130 = *(void **)(a2 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v127);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    v231[0] = v131;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(v210[6] + 64));
    v132 = (void *)objc_claimAutoreleasedReturnValue();
    v231[1] = v132;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v210[6]);
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    v231[2] = v133;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v231, 3);
    v134 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v130, "executeUpdate:withParameters:error:", CFSTR("UPDATE item SET composer_order=?, composer_order_section=? WHERE composer_pid=?"), v134, 0);

LABEL_166:
    if (v172 && v172 != *(_QWORD *)(v210[6] + 72))
    {
      v135 = *(int *)(a2 + 32);
      v136 = ML3TrackRulesGetPropertyIndex(20, 335544328);
      if (_ML3InitializeTrackRulesIfNeeded___once != -1)
        dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
      if (*(_DWORD *)(__composerRules + 56 * v136 + 4 * v135) != -1)
      {
        v137 = (std::__shared_weak_count *)a3[1];
        v174[0] = *a3;
        v174[1] = v137;
        if (v137)
        {
          v138 = (unint64_t *)&v137->__shared_owners_;
          do
            v139 = __ldxr(v138);
          while (__stxr(v139 + 1, v138));
        }
        v140 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v174, 0x14000008u);
        if (v137)
        {
          v141 = (unint64_t *)&v137->__shared_owners_;
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
        if ((v140 & 1) == 0)
        {
          v143 = *(void **)(a2 + 16);
          std::string::basic_string[abi:ne180100]<0>(&v218, "UPDATE composer SET sync_id = ? WHERE ROWID = ?");
          *(_QWORD *)buf = v172;
          *(_DWORD *)&buf[24] = 0;
          buf[32] = 1;
          v225 = *(const char **)v210[6];
          v228 = 0;
          v229[0] = 1;
          v236[0] = 0;
          v235 = 0uLL;
          *(_QWORD *)&v217 = &v235;
          BYTE8(v217) = 0;
          *(_QWORD *)&v235 = operator new(0x50uLL);
          *((_QWORD *)&v235 + 1) = v235;
          v236[0] = v235 + 80;
          *((_QWORD *)&v235 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)v236, (uint64_t)buf, (uint64_t)&v230, v235);
          ML3ImportExecuteVariadicStatement(v143, (const UInt8 *)&v218, (uint64_t *)&v235);
          *(_QWORD *)&v217 = &v235;
          std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
          for (k = 0; k != -10; k -= 5)
          {
            if (v229[k * 8])
              std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&(&v225)[k]);
          }
          if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v218.__r_.__value_.__l.__data_);
          *(_QWORD *)(v210[6] + 72) = v172;
        }
      }
    }
    goto LABEL_187;
  }
  if (objc_msgSend((id)v204[5], "length"))
  {
    v37 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 16777217);
    v38 = MLMediaTypeByStandardizingMediaType(v37);
    IntegerUUID = v172;
    if (!v172)
      IntegerUUID = ML3CreateIntegerUUID();
    v170 = v38;
    v40 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      v41 = v197 + 48;
      if ((char)v197[71] < 0)
        v41 = (_QWORD *)*v41;
      v42 = (std::string::__raw *)&v190[2];
      if (SHIBYTE(v190[2].__r_.__value_.__r.__words[2]) < 0)
        v42 = (std::string::__raw *)v42->__words[0];
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = IntegerUUID;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v41;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = v42;
      _os_log_impl(&dword_1AC149000, v40, OS_LOG_TYPE_DEFAULT, "creating new composer entry: pid=%lld, name='%{public}s', sortName='%{public}s'", buf, 0x20u);
    }

    v43 = v197;
    v44 = v190;
    v45 = (std::string *)&v190[2];
    v46 = v197 + 48;
    v47 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a2, (uint64_t)&v190[2], (uint64_t)(v197 + 48));
    v49 = v48;
    v50 = operator new(0x68uLL);
    v50[1] = 0;
    v50[2] = 0;
    *v50 = &off_1E5B51340;
    if ((char)v43[71] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)buf, *((const std::string::value_type **)v43 + 6), *((_QWORD *)v43 + 7));
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)v46;
      *(_QWORD *)&buf[16] = v46[2];
    }
    if (SHIBYTE(v44[2].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v218, v44[2].__r_.__value_.__l.__data_, v44[2].__r_.__value_.__l.__size_);
    else
      v218 = *v45;
    ML3ComposerData::ML3ComposerData((uint64_t)(v50 + 3), IntegerUUID, (__int128 *)buf, (__int128 *)&v218, v47, v49, v172);
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v218.__r_.__value_.__l.__data_);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    *(_QWORD *)&v235 = v50 + 3;
    *((_QWORD *)&v235 + 1) = v50;
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v210 + 6), &v235);
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
    if (*((_QWORD *)&v235 + 1))
    {
      v60 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    ML3CPPStringFromData((NSData *)&v218, (void *)v204[5]);
    *(_OWORD *)buf = *(_OWORD *)&v218.__r_.__value_.__l.__data_;
    v62 = v218.__r_.__value_.__r.__words[2];
    memset(&v218, 0, sizeof(v218));
    v64 = v210[6];
    v63 = v210[7];
    *(_QWORD *)&buf[16] = v62;
    *(_QWORD *)&buf[24] = v64;
    *(_QWORD *)&buf[32] = v63;
    if (v63)
    {
      v65 = (unint64_t *)(v63 + 8);
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ComposerData>>>(a2 + 1168, buf, (uint64_t)buf);
    v67 = *(std::__shared_weak_count **)&buf[32];
    if (*(_QWORD *)&buf[32])
    {
      v68 = (unint64_t *)(*(_QWORD *)&buf[32] + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v218.__r_.__value_.__l.__data_);
      if ((v170 & 0x400) == 0)
        goto LABEL_90;
    }
    else if ((v170 & 0x400) == 0)
    {
LABEL_90:
      v70 = *(_QWORD *)(*a3 + 8);
LABEL_93:
      v71 = v210;
      v72 = v197;
      v73 = v204;
      v74 = (char *)operator new(0x90uLL);
      *((_QWORD *)v74 + 1) = 0;
      *((_QWORD *)v74 + 2) = 0;
      *(_QWORD *)v74 = &off_1E5B51490;
      v76 = v71[6];
      v75 = (std::__shared_weak_count *)v71[7];
      *(_QWORD *)buf = v76;
      *(_QWORD *)&buf[8] = v75;
      if (v75)
      {
        v77 = (unint64_t *)&v75->__shared_owners_;
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v79 = (id)v73[5];
      *((_QWORD *)v74 + 11) = v76;
      *((_WORD *)v74 + 20) = 256;
      v74[42] = 1;
      *((_OWORD *)v74 + 3) = 0u;
      *((_OWORD *)v74 + 4) = 0u;
      *((_DWORD *)v74 + 20) = 1065353216;
      *((_QWORD *)v74 + 3) = &off_1E5B4D6A0;
      *((_QWORD *)v74 + 4) = 0;
      *((_QWORD *)v74 + 12) = v75;
      if (v75)
      {
        v80 = (unint64_t *)&v75->__shared_owners_;
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
      }
      v82 = (std::string *)(v74 + 104);
      if ((char)v72[71] < 0)
      {
        std::string::__init_copy_ctor_external(v82, *((const std::string::value_type **)v72 + 6), *((_QWORD *)v72 + 7));
      }
      else
      {
        v83 = *((_OWORD *)v72 + 3);
        *((_QWORD *)v74 + 15) = *((_QWORD *)v72 + 8);
        *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v83;
      }
      v84 = v79;
      *((_QWORD *)v74 + 16) = v84;
      *((_QWORD *)v74 + 17) = v70;
      *((_WORD *)v74 + 20) = 256;
      *((_QWORD *)v74 + 4) = **((_QWORD **)v74 + 11);

      if (v75)
      {
        v85 = (unint64_t *)&v75->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      *(_QWORD *)&v235 = v74 + 24;
      *((_QWORD *)&v235 + 1) = v74;
      v87 = v235;
      *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v235;
      v235 = 0uLL;
      v88 = *(__int128 **)(a2 + 1600);
      v89 = *(_QWORD *)(a2 + 1608);
      if ((unint64_t)v88 >= v89)
      {
        v173 = v87;
        v91 = *(_QWORD *)(a2 + 1592);
        v92 = ((uint64_t)v88 - v91) >> 4;
        if ((unint64_t)(v92 + 1) >> 60)
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        v93 = v89 - v91;
        v94 = v93 >> 3;
        if (v93 >> 3 <= (unint64_t)(v92 + 1))
          v94 = v92 + 1;
        if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0)
          v95 = 0xFFFFFFFFFFFFFFFLL;
        else
          v95 = v94;
        *(_QWORD *)&buf[32] = a2 + 1608;
        v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v95);
        v98 = (__int128 *)&v96[16 * v92];
        *v98 = v173;
        *(_OWORD *)&v218.__r_.__value_.__l.__data_ = 0uLL;
        v99 = *(_QWORD **)(a2 + 1600);
        v100 = *(_QWORD **)(a2 + 1592);
        if (v99 == v100)
        {
          v103 = vdupq_n_s64((unint64_t)v99);
          v101 = &v96[16 * v92];
        }
        else
        {
          v101 = &v96[16 * v92];
          do
          {
            v102 = *((_OWORD *)v99 - 1);
            v99 -= 2;
            *((_OWORD *)v101 - 1) = v102;
            v101 -= 16;
            *v99 = 0;
            v99[1] = 0;
          }
          while (v99 != v100);
          v103 = *(int64x2_t *)(a2 + 1592);
        }
        v90 = v98 + 1;
        *(_QWORD *)(a2 + 1592) = v101;
        *(_QWORD *)(a2 + 1600) = v98 + 1;
        *(int64x2_t *)&buf[8] = v103;
        v114 = *(_QWORD *)(a2 + 1608);
        *(_QWORD *)(a2 + 1608) = &v96[16 * v97];
        *(_QWORD *)&buf[24] = v114;
        *(_QWORD *)buf = v103.i64[0];
        std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *v88 = v87;
        v90 = v88 + 1;
        *(_OWORD *)&v218.__r_.__value_.__l.__data_ = 0uLL;
      }
      *(_QWORD *)(a2 + 1600) = v90;
      goto LABEL_187;
    }
    v70 = 0;
    goto LABEL_93;
  }
LABEL_187:
  v145 = v210[7];
  *a1 = v210[6];
  a1[1] = v145;
  if (v145)
  {
    v146 = (unint64_t *)(v145 + 8);
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
  }
LABEL_190:
  _Block_object_dispose(&v189, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v196, 8);
  if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v202.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v203, 8);

  _Block_object_dispose(&v209, 8);
  v148 = v216;
  if (v216)
  {
    v149 = (unint64_t *)&v216->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
}

void sub_1AC35C8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t a69;
  void *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;

  _Block_object_dispose(&STACK[0x210], 8);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v70);

  _Block_object_dispose(&a33, 8);
  if (a44 < 0)
    operator delete(__p);
  _Block_object_dispose(&a45, 8);
  if (a56 < 0)
    operator delete(a51);
  _Block_object_dispose(&a57, 8);

  _Block_object_dispose(&a63, 8);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_getDefaultEmptyComposer(ML3ImportSession *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if ((v2 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ML3ComposerData>::~shared_ptr[abi:ne180100], &ML3ImportSession::_getDefaultEmptyComposer(void)::__emptyComposerData, &dword_1AC149000);
  }
  if (ML3ImportSession::_getDefaultEmptyComposer(void)::onceToken != -1)
    dispatch_once(&ML3ImportSession::_getDefaultEmptyComposer(void)::onceToken, &__block_literal_global_18277);
  v3 = unk_1EEC7D300;
  *(_QWORD *)this = ML3ImportSession::_getDefaultEmptyComposer(void)::__emptyComposerData;
  *((_QWORD *)this + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void ML3ImportSession::_getGenreInfo(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  _BYTE *v9;
  id v10;
  void *v11;
  int8x8_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  objc_class *v29;
  objc_class *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t PropertyIndex;
  _QWORD *v46;
  uint64_t v47;
  std::string::size_type size;
  uint64_t v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  std::string *p_str;
  uint64_t IntegerUUID;
  NSObject *v57;
  std::string *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  std::string *v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  const char **v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  id v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::string *v82;
  id v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  _OWORD *v87;
  unint64_t v88;
  _OWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  _QWORD *v98;
  _QWORD *v99;
  char *v100;
  __int128 v101;
  int64x2_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  char shouldPreserveTrackProperty;
  char v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  char v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  uint64_t i;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  const char **v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint8x8_t v137;
  unint64_t v138;
  unsigned __int8 **v139;
  unsigned __int8 *v140;
  unint64_t v141;
  char *v142;
  _QWORD *v143;
  std::string *v144;
  void *v145;
  float v146;
  float v147;
  _BOOL8 v148;
  unint64_t v149;
  unint64_t v150;
  size_t v151;
  uint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  __int128 v157;
  void *v158;
  void *v159;
  _QWORD v161[2];
  _QWORD v162[2];
  std::string __str;
  __int128 v164;
  std::string v165;
  void *v166;
  id v167;
  _BYTE *v168;
  uint64_t v169;
  unint64_t v170;
  _BYTE buf[40];
  const char *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  int v175;
  _BYTE v176[8];
  _QWORD v177[2];
  NSData v178[2];
  _QWORD v179[4];

  v179[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t *, uint64_t))(**a3 + 24))(buf, *a3, 167772166);
  if ((buf[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((buf[39] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    __str = *(std::string *)&buf[16];
  }
  v5 = *(void **)(a2 + 8);
  ML3CPPBridgeString((const UInt8 *)&__str, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "groupingKeyForString:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v159 = v7;
  v8 = (*(uint64_t (**)(uint64_t *, uint64_t))(**a3 + 32))(*a3, 167772179);
  if (!objc_msgSend(v7, "length"))
    goto LABEL_234;
  v9 = buf;
  v10 = v7;
  v11 = v10;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x4012000000;
  *(_QWORD *)&buf[24] = __Block_byref_object_copy__292;
  *(_QWORD *)&buf[32] = __Block_byref_object_dispose__293;
  v173 = 0;
  v174 = 0;
  v172 = "";
  if (!v8)
  {
    v12 = 0;
    if (!v10)
      goto LABEL_53;
    goto LABEL_27;
  }
  v12 = *(int8x8_t *)(a2 + 896);
  if (!*(_QWORD *)&v12)
  {
LABEL_26:
    v9 = buf;
    if (!v10)
      goto LABEL_53;
    goto LABEL_27;
  }
  v13 = (uint8x8_t)vcnt_s8(v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = v8;
    if (v8 >= *(_QWORD *)&v12)
      v14 = v8 % *(_QWORD *)&v12;
  }
  else
  {
    v14 = (*(_QWORD *)&v12 - 1) & v8;
  }
  v15 = *(_QWORD **)(*(_QWORD *)(a2 + 888) + 8 * v14);
  if (!v15 || (v16 = (_QWORD *)*v15) == 0)
  {
LABEL_25:
    v12 = 0;
    goto LABEL_26;
  }
  while (1)
  {
    v17 = v16[1];
    if (v17 == v8)
      break;
    if (v13.u32[0] > 1uLL)
    {
      if (v17 >= *(_QWORD *)&v12)
        v17 %= *(_QWORD *)&v12;
    }
    else
    {
      v17 &= *(_QWORD *)&v12 - 1;
    }
    if (v17 != v14)
      goto LABEL_25;
LABEL_24:
    v16 = (_QWORD *)*v16;
    if (!v16)
      goto LABEL_25;
  }
  if (v16[2] != v8)
    goto LABEL_24;
  std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](&v173, v16[3], v16[4]);
  v9 = *(_BYTE **)&buf[8];
  v12 = *(int8x8_t *)(*(_QWORD *)&buf[8] + 48);
  if (!v11)
    goto LABEL_53;
LABEL_27:
  if (v12)
    goto LABEL_53;
  ML3CPPStringFromData((NSData *)&v165, v11);
  v18 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v165);
  v19 = *(int8x8_t *)(a2 + 1216);
  if (!*(_QWORD *)&v19)
    goto LABEL_45;
  v20 = v18;
  v21 = (uint8x8_t)vcnt_s8(v19);
  v21.i16[0] = vaddlv_u8(v21);
  v22 = v21.u32[0];
  if (v21.u32[0] > 1uLL)
  {
    v23 = v18;
    if (v18 >= *(_QWORD *)&v19)
      v23 = v18 % *(_QWORD *)&v19;
  }
  else
  {
    v23 = (*(_QWORD *)&v19 - 1) & v18;
  }
  v24 = *(unsigned __int8 ***)(*(_QWORD *)(a2 + 1208) + 8 * v23);
  if (!v24)
  {
LABEL_45:
    v25 = 0;
    goto LABEL_49;
  }
  v25 = *v24;
  if (!*v24)
    goto LABEL_49;
  while (2)
  {
    v26 = *((_QWORD *)v25 + 1);
    if (v26 == v20)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](v25 + 16, (unsigned __int8 *)&v165))
        goto LABEL_49;
LABEL_43:
      v25 = *(unsigned __int8 **)v25;
      if (!v25)
        goto LABEL_49;
      continue;
    }
    break;
  }
  if (v22 > 1)
  {
    if (v26 >= *(_QWORD *)&v19)
      v26 %= *(_QWORD *)&v19;
  }
  else
  {
    v26 &= *(_QWORD *)&v19 - 1;
  }
  if (v26 == v23)
    goto LABEL_43;
  v25 = 0;
LABEL_49:
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  v9 = *(_BYTE **)&buf[8];
  if (v25)
  {
    std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)&buf[8] + 48), *((_QWORD *)v25 + 5), *((_QWORD *)v25 + 6));
    v9 = *(_BYTE **)&buf[8];
  }
LABEL_53:
  v27 = *((_QWORD *)v9 + 6);
  if (!v27)
  {
    if (v11 && v8)
    {
      v28 = *(void **)(a2 + 16);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v8);
      v29 = (objc_class *)objc_claimAutoreleasedReturnValue();
      v178[0].super.isa = v29;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v8);
      v30 = (objc_class *)objc_claimAutoreleasedReturnValue();
      v178[1].super.isa = v30;
      v179[0] = v11;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v178, 3);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "executeQuery:withParameters:", CFSTR("SELECT genre, ROWID, sync_id FROM genre WHERE (ROWID=? OR sync_id=?) OR grouping_key = (?)"), v31);
      v32 = objc_claimAutoreleasedReturnValue();
      goto LABEL_57;
    }
    if (v11)
    {
      v34 = *(void **)(a2 + 16);
      v178[0].super.isa = (Class)v11;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v178, 1);
      v29 = (objc_class *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "executeQuery:withParameters:", CFSTR("SELECT genre, ROWID, sync_id FROM genre WHERE grouping_key = (?)"), v29);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_60;
    }
    if (v8)
    {
      v126 = *(void **)(a2 + 16);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v8);
      v29 = (objc_class *)objc_claimAutoreleasedReturnValue();
      v178[0].super.isa = v29;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v8);
      v30 = (objc_class *)objc_claimAutoreleasedReturnValue();
      v178[1].super.isa = v30;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v178, 2);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v126, "executeQuery:withParameters:", CFSTR("SELECT genre, ROWID, sync_id FROM genre WHERE (ROWID=? OR sync_id=?)"), v31);
      v32 = objc_claimAutoreleasedReturnValue();
LABEL_57:
      v33 = (void *)v32;

LABEL_60:
      if (v33)
      {
        v165.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
        v165.__r_.__value_.__l.__size_ = 3221225472;
        v165.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN16ML3ImportSession21_getExistingGenreInfoEP6NSDatax_block_invoke;
        v166 = &unk_1E5B65088;
        v168 = buf;
        v169 = a2;
        v167 = v11;
        v170 = v8;
        objc_msgSend(v33, "enumerateRowsWithBlock:", &v165);

      }
    }
    v9 = *(_BYTE **)&buf[8];
    v27 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
  }
  v35 = *((_QWORD *)v9 + 7);
  *(_QWORD *)&v164 = v27;
  *((_QWORD *)&v164 + 1) = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  _Block_object_dispose(buf, 8);
  v38 = v174;
  if (v174)
  {
    p_shared_owners = (unint64_t *)&v174->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }

  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](a1, &v164);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (*(_QWORD *)a1)
  {
    v44 = *(int *)(a2 + 32);
    PropertyIndex = ML3TrackRulesGetPropertyIndex(10, 167772166);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    if (*(_DWORD *)(__specialRules + 56 * PropertyIndex + 4 * v44) != -1)
    {
      v46 = *(_QWORD **)a1;
      v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      v49 = *((unsigned __int8 *)v46 + 31);
      v50 = (char)v49;
      if ((v49 & 0x80u) != 0)
        v49 = v46[2];
      if (size != v49)
        goto LABEL_148;
      v53 = (unsigned __int8 *)v46[1];
      v51 = (unsigned __int8 *)(v46 + 1);
      v52 = v53;
      if (v50 >= 0)
        v54 = v51;
      else
        v54 = v52;
      if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(__str.__r_.__value_.__l.__data_, v54, __str.__r_.__value_.__l.__size_))
          goto LABEL_148;
      }
      else if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
      {
        p_str = &__str;
        while (p_str->__r_.__value_.__s.__data_[0] == *v54)
        {
          p_str = (std::string *)((char *)p_str + 1);
          ++v54;
          if (!--v47)
            goto LABEL_157;
        }
LABEL_148:
        v103 = (std::__shared_weak_count *)a3[1];
        v162[0] = *a3;
        v162[1] = v103;
        if (v103)
        {
          v104 = (unint64_t *)&v103->__shared_owners_;
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
        }
        shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v162, 0xA000006u);
        v107 = shouldPreserveTrackProperty;
        if (!v103)
          goto LABEL_155;
        v108 = (unint64_t *)&v103->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
          if ((v107 & 1) == 0)
          {
LABEL_156:
            v110 = *(void **)(a2 + 16);
            ML3CPPBridgeString((const UInt8 *)&__str, 1);
            v111 = (void *)objc_claimAutoreleasedReturnValue();
            v177[0] = v111;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", **(_QWORD **)a1);
            v112 = (void *)objc_claimAutoreleasedReturnValue();
            v177[1] = v112;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v177, 2);
            v113 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v110, "executeUpdate:withParameters:error:", CFSTR("UPDATE genre SET genre = ? WHERE ROWID = ?"), v113, 0);

            std::string::operator=((std::string *)(*(_QWORD *)a1 + 8), &__str);
          }
        }
        else
        {
LABEL_155:
          if ((shouldPreserveTrackProperty & 1) == 0)
            goto LABEL_156;
        }
      }
    }
LABEL_157:
    v7 = v159;
    if (v8 && v8 != *(_QWORD *)(*(_QWORD *)a1 + 48))
    {
      v114 = *(int *)(a2 + 32);
      v115 = ML3TrackRulesGetPropertyIndex(21, 352321543);
      if (_ML3InitializeTrackRulesIfNeeded___once != -1)
        dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
      v116 = *(_DWORD *)(__genreRules + 56 * v115 + 4 * v114);
      v7 = v159;
      if (v116 != -1)
      {
        v117 = *a3;
        v118 = (std::__shared_weak_count *)a3[1];
        v161[0] = v117;
        v161[1] = v118;
        if (v118)
        {
          v119 = (unint64_t *)&v118->__shared_owners_;
          do
            v120 = __ldxr(v119);
          while (__stxr(v120 + 1, v119));
        }
        v121 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v161, 0x15000007u);
        if (v118)
        {
          v122 = (unint64_t *)&v118->__shared_owners_;
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        if ((v121 & 1) == 0)
        {
          v124 = *(void **)(a2 + 16);
          std::string::basic_string[abi:ne180100]<0>(&v165, "UPDATE genre SET sync_id = ? WHERE ROWID = ?");
          *(_QWORD *)buf = v8;
          *(_DWORD *)&buf[24] = 0;
          buf[32] = 1;
          v172 = **(const char ***)a1;
          v175 = 0;
          v176[0] = 1;
          v178[1].super.isa = 0;
          v179[0] = 0;
          v178[0].super.isa = 0;
          *(_QWORD *)&v164 = v178;
          BYTE8(v164) = 0;
          v178[0].super.isa = (Class)operator new(0x50uLL);
          v178[1] = v178[0];
          v179[0] = (char *)v178[0].super.isa + 80;
          v178[1].super.isa = (Class)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)v179, (uint64_t)buf, (uint64_t)v177, (uint64_t)v178[0].super.isa);
          ML3ImportExecuteVariadicStatement(v124, (const UInt8 *)&v165, (uint64_t *)v178);
          *(_QWORD *)&v164 = v178;
          std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v164);
          for (i = 0; i != -80; i -= 40)
          {
            if (v176[i])
              std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&buf[i + 40]);
          }
          if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v165.__r_.__value_.__l.__data_);
          v7 = v159;
          *(_QWORD *)(*(_QWORD *)a1 + 48) = v8;
        }
      }
    }
    goto LABEL_234;
  }
  IntegerUUID = v8;
  if (!v8)
    IntegerUUID = ML3CreateIntegerUUID();
  v57 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
  {
    v58 = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v58 = (std::string *)__str.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = IntegerUUID;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v58;
    _os_log_impl(&dword_1AC149000, v57, OS_LOG_TYPE_DEFAULT, "creating new genre entry: pid=%lld, name='%{public}s'", buf, 0x16u);
  }

  v59 = *a3;
  v60 = **a3;
  v61 = (*a3)[1];
  (*(void (**)(_BYTE *__return_ptr, uint64_t *, uint64_t, _QWORD))(v60 + 144))(buf, v59, 167772166, 0);
  if ((buf[39] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
  else
    v165 = *(std::string *)&buf[16];
  ML3CPPBridgeString((const UInt8 *)&v165, 1);
  v62 = objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  *(_QWORD *)buf = off_1E5B4D010;
  if ((buf[39] & 0x80000000) != 0)
    operator delete(*(void **)&buf[16]);
  v158 = (void *)v62;
  objc_msgSend(*(id *)(a2 + 24), "objectForKeyedSubscript:", v62);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = objc_msgSend(v63, "ML3NameOrderValue");
  v66 = v65;

  if (v66 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v64 = 0;
    v66 = *(unsigned __int8 *)(a2 + 252);
  }
  v67 = operator new(0x50uLL);
  v67[1] = 0;
  v67[2] = 0;
  *v67 = &off_1E5B512D0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)buf, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    *(std::string *)buf = __str;
  v67[3] = IntegerUUID;
  v68 = (std::string *)(v67 + 4);
  if ((buf[23] & 0x80000000) != 0)
  {
    v69 = *(void **)buf;
    std::string::__init_copy_ctor_external(v68, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    v67[7] = v64;
    v67[8] = v66;
    v67[9] = v8;
    operator delete(v69);
  }
  else
  {
    *(_OWORD *)&v68->__r_.__value_.__l.__data_ = *(_OWORD *)buf;
    v67[6] = *(_QWORD *)&buf[16];
    v67[7] = v64;
    v67[8] = v66;
    v67[9] = v8;
  }
  v165.__r_.__value_.__r.__words[0] = (std::string::size_type)(v67 + 3);
  v165.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](a1, (__int128 *)&v165);
  v70 = (std::__shared_weak_count *)v165.__r_.__value_.__l.__size_;
  if (v165.__r_.__value_.__l.__size_)
  {
    v71 = (unint64_t *)(v165.__r_.__value_.__l.__size_ + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (char *)operator new(0x90uLL);
  *((_QWORD *)v73 + 1) = 0;
  *((_QWORD *)v73 + 2) = 0;
  *(_QWORD *)v73 = &off_1E5B513E8;
  v74 = *(const char ***)a1;
  v75 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)buf = *(_QWORD *)a1;
  *(_QWORD *)&buf[8] = v75;
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  v78 = v11;
  *((_QWORD *)v73 + 11) = v74;
  v79 = (unint64_t)(v73 + 88);
  *((_WORD *)v73 + 20) = 256;
  v73[42] = 1;
  *((_OWORD *)v73 + 3) = 0u;
  *((_OWORD *)v73 + 4) = 0u;
  *((_DWORD *)v73 + 20) = 1065353216;
  *((_QWORD *)v73 + 3) = &off_1E5B4D290;
  *((_QWORD *)v73 + 4) = 0;
  *((_QWORD *)v73 + 12) = v75;
  if (v75)
  {
    v80 = (unint64_t *)&v75->__shared_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v82 = (std::string *)(v73 + 104);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v82, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v82->__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *((_QWORD *)v73 + 15) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  }
  v83 = v78;
  *((_QWORD *)v73 + 16) = v83;
  *((_QWORD *)v73 + 17) = v61;
  *((_WORD *)v73 + 20) = 256;
  *((_QWORD *)v73 + 4) = **((_QWORD **)v73 + 11);

  if (v75)
  {
    v84 = (unint64_t *)&v75->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v178[0].super.isa = (Class)(v73 + 24);
  v178[1].super.isa = (Class)v73;
  v86 = *(_OWORD *)&v178[0].super.isa;
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = *(_OWORD *)&v178[0].super.isa;
  v178[0].super.isa = 0;
  v178[1].super.isa = 0;
  v87 = *(_OWORD **)(a2 + 1624);
  v88 = *(_QWORD *)(a2 + 1632);
  if ((unint64_t)v87 >= v88)
  {
    v157 = v86;
    v90 = *(_QWORD *)(a2 + 1616);
    v91 = ((uint64_t)v87 - v90) >> 4;
    if ((unint64_t)(v91 + 1) >> 60)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v92 = v88 - v90;
    v93 = v92 >> 3;
    if (v92 >> 3 <= (unint64_t)(v91 + 1))
      v93 = v91 + 1;
    if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF0)
      v94 = 0xFFFFFFFFFFFFFFFLL;
    else
      v94 = v93;
    *(_QWORD *)&buf[32] = a2 + 1632;
    v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v94);
    v97 = &v95[16 * v91];
    *(_OWORD *)v97 = v157;
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = 0uLL;
    v98 = *(_QWORD **)(a2 + 1624);
    v99 = *(_QWORD **)(a2 + 1616);
    if (v98 == v99)
    {
      v102 = vdupq_n_s64((unint64_t)v98);
      v100 = &v95[16 * v91];
    }
    else
    {
      v100 = &v95[16 * v91];
      do
      {
        v101 = *((_OWORD *)v98 - 1);
        v98 -= 2;
        *((_OWORD *)v100 - 1) = v101;
        v100 -= 16;
        *v98 = 0;
        v98[1] = 0;
      }
      while (v98 != v99);
      v102 = *(int64x2_t *)(a2 + 1616);
    }
    v89 = v97 + 16;
    *(_QWORD *)(a2 + 1616) = v100;
    *(_QWORD *)(a2 + 1624) = v97 + 16;
    *(int64x2_t *)&buf[8] = v102;
    v127 = *(_QWORD *)(a2 + 1632);
    *(_QWORD *)(a2 + 1632) = &v95[16 * v96];
    *(_QWORD *)&buf[24] = v127;
    *(_QWORD *)buf = v102.i64[0];
    std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    *v87 = v86;
    v89 = v87 + 1;
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = 0uLL;
  }
  *(_QWORD *)(a2 + 1624) = v89;
  ML3CPPStringFromData(v178, v83);
  *(_OWORD *)buf = *(_OWORD *)&v178[0].super.isa;
  v128 = v179[0];
  v178[1].super.isa = 0;
  v179[0] = 0;
  v178[0].super.isa = 0;
  v129 = *(const char ***)a1;
  v130 = *(std::__shared_weak_count **)(a1 + 8);
  *(_QWORD *)&buf[16] = v128;
  *(_QWORD *)&buf[24] = v129;
  *(_QWORD *)&buf[32] = v130;
  if (v130)
  {
    v131 = (unint64_t *)&v130->__shared_owners_;
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
  }
  v133 = (uint64_t *)(a2 + 1208);
  v134 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)buf);
  v135 = v134;
  v136 = *(_QWORD *)(a2 + 1216);
  if (!v136)
    goto LABEL_202;
  v137 = (uint8x8_t)vcnt_s8((int8x8_t)v136);
  v137.i16[0] = vaddlv_u8(v137);
  v138 = v137.u32[0];
  if (v137.u32[0] > 1uLL)
  {
    v79 = v134;
    if (v134 >= v136)
      v79 = v134 % v136;
  }
  else
  {
    v79 = (v136 - 1) & v134;
  }
  v139 = *(unsigned __int8 ***)(*v133 + 8 * v79);
  if (!v139 || (v140 = *v139) == 0)
  {
LABEL_202:
    v142 = (char *)operator new(0x38uLL);
    v143 = (_QWORD *)(a2 + 1224);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
    v165.__r_.__value_.__l.__size_ = a2 + 1224;
    v165.__r_.__value_.__s.__data_[16] = 0;
    *(_QWORD *)v142 = 0;
    *((_QWORD *)v142 + 1) = v135;
    v144 = (std::string *)(v142 + 16);
    if ((buf[23] & 0x80000000) != 0)
    {
      v145 = v158;
      v7 = v159;
      std::string::__init_copy_ctor_external(v144, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    }
    else
    {
      *(_OWORD *)&v144->__r_.__value_.__l.__data_ = *(_OWORD *)buf;
      *((_QWORD *)v142 + 4) = *(_QWORD *)&buf[16];
      v145 = v158;
      v7 = v159;
    }
    *(_OWORD *)(v142 + 40) = *(_OWORD *)&buf[24];
    *(_QWORD *)&buf[24] = 0;
    *(_QWORD *)&buf[32] = 0;
    v165.__r_.__value_.__s.__data_[16] = 1;
    v146 = (float)(unint64_t)(*(_QWORD *)(a2 + 1232) + 1);
    v147 = *(float *)(a2 + 1240);
    if (!v136 || (float)(v147 * (float)v136) < v146)
    {
      v148 = 1;
      if (v136 >= 3)
        v148 = (v136 & (v136 - 1)) != 0;
      v149 = v148 | (2 * v136);
      v150 = vcvtps_u32_f32(v146 / v147);
      if (v149 <= v150)
        v151 = v150;
      else
        v151 = v149;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a2 + 1208, v151);
      v136 = *(_QWORD *)(a2 + 1216);
      if ((v136 & (v136 - 1)) != 0)
      {
        if (v135 >= v136)
          v79 = v135 % v136;
        else
          v79 = v135;
      }
      else
      {
        v79 = (v136 - 1) & v135;
      }
    }
    v152 = *v133;
    v153 = *(_QWORD **)(*v133 + 8 * v79);
    if (v153)
    {
      *(_QWORD *)v142 = *v153;
    }
    else
    {
      *(_QWORD *)v142 = *v143;
      *v143 = v142;
      *(_QWORD *)(v152 + 8 * v79) = v143;
      if (!*(_QWORD *)v142)
      {
LABEL_228:
        v165.__r_.__value_.__r.__words[0] = 0;
        ++*(_QWORD *)(a2 + 1232);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v165);
        goto LABEL_229;
      }
      v154 = *(_QWORD *)(*(_QWORD *)v142 + 8);
      if ((v136 & (v136 - 1)) != 0)
      {
        if (v154 >= v136)
          v154 %= v136;
      }
      else
      {
        v154 &= v136 - 1;
      }
      v153 = (_QWORD *)(*v133 + 8 * v154);
    }
    *v153 = v142;
    goto LABEL_228;
  }
  while (2)
  {
    v141 = *((_QWORD *)v140 + 1);
    if (v141 != v135)
    {
      if (v138 > 1)
      {
        if (v141 >= v136)
          v141 %= v136;
      }
      else
      {
        v141 &= v136 - 1;
      }
      if (v141 != v79)
        goto LABEL_202;
      goto LABEL_201;
    }
    if (!std::equal_to<std::string>::operator()[abi:ne180100](v140 + 16, buf))
    {
LABEL_201:
      v140 = *(unsigned __int8 **)v140;
      if (!v140)
        goto LABEL_202;
      continue;
    }
    break;
  }
  v145 = v158;
  v7 = v159;
  if (v130)
  {
    v155 = (unint64_t *)&v130->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
LABEL_229:
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v179[0]) < 0)
    operator delete(v178[0].super.isa);

LABEL_234:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1AC35DDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;

  _Block_object_dispose(&a39, 8);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v46);

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a14);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_getDefaultEmptyGenre(ML3ImportSession *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if ((v2 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ML3GenreData>::~shared_ptr[abi:ne180100], &ML3ImportSession::_getDefaultEmptyGenre(void)::__emptyGenreData, &dword_1AC149000);
  }
  if (ML3ImportSession::_getDefaultEmptyGenre(void)::onceToken != -1)
    dispatch_once(&ML3ImportSession::_getDefaultEmptyGenre(void)::onceToken, &__block_literal_global_301);
  v3 = unk_1EEC7D320;
  *(_QWORD *)this = ML3ImportSession::_getDefaultEmptyGenre(void)::__emptyGenreData;
  *((_QWORD *)this + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void ML3ImportSession::_getArtistInfo(_QWORD *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __CFString *v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  char v23;
  char v24;
  char v25;
  char v26;
  void *v27;
  void *v28;
  void *v29;
  std::__shared_weak_count *v30;
  uint64_t *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t PropertyIndex;
  uint64_t v40;
  uint64_t v41;
  std::string::size_type v42;
  uint64_t v43;
  int v44;
  const void **p_data;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  _BYTE *v50;
  id v51;
  _QWORD *v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t IntegerUUID;
  NSObject *v56;
  std::string::__raw *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  const std::string *v61;
  std::string::__raw *v62;
  uint64_t (***v63)();
  std::string *v64;
  uint64_t (***v65)();
  uint64_t (***v66)();
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unsigned __int8 *v74;
  NSObject *v75;
  std::string::size_type v76;
  __CFString *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::string::size_type v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  char shouldPreserveTrackProperty;
  char v102;
  unint64_t *v103;
  unint64_t v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (**v111)();
  uint64_t v112;
  uint64_t (**v113)();
  uint64_t (**v114)();
  uint64_t (**v115)();
  int v116;
  const void **v117;
  unsigned __int8 *v118;
  uint64_t v119;
  int v120;
  void *v121;
  void *v122;
  std::string::size_type v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *size;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  char v135;
  char v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t (**v139)();
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t (**v156)();
  uint64_t (**v157)();
  int v158;
  const void **v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  char v167;
  char v168;
  unint64_t *v169;
  unint64_t v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t (**v177)();
  uint64_t v178;
  uint64_t (**v179)();
  uint64_t (**v180)();
  uint64_t (**v181)();
  int v182;
  const void **v183;
  unsigned __int8 *v184;
  uint64_t v185;
  int v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  char v190;
  char v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t (**v194)();
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  uint64_t v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  char v217;
  unint64_t *v218;
  unint64_t v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  char v229;
  unint64_t *v230;
  unint64_t v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  uint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v247;
  uint64_t v248;
  __int128 v250;
  _QWORD v251[2];
  _QWORD v252[2];
  _QWORD v253[2];
  _QWORD v254[2];
  _QWORD v255[2];
  _QWORD v256[2];
  _QWORD v257[4];
  id v258;
  uint64_t *v259;
  uint64_t (***v260)();
  uint64_t (***v261)();
  uint64_t (***v262)();
  _BYTE *v263;
  uint64_t *v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t *v267;
  std::__shared_weak_count *v268;
  uint64_t v269;
  char v270;
  char v271;
  char v272;
  char v273;
  BOOL v274;
  uint64_t v275;
  uint64_t (**v276)();
  uint64_t (***v277)();
  std::string v278;
  uint64_t v279;
  std::string v280;
  uint64_t (**v281)();
  uint64_t (***v282)();
  std::string __p;
  uint64_t v284;
  std::string v285;
  uint64_t (**v286)();
  uint64_t (***v287)();
  std::string __s;
  uint64_t v289;
  std::string v290;
  uint64_t v291;
  const std::string *v292;
  uint64_t v293;
  __n128 (*v294)(__n128 *, __n128 *);
  void (*v295)(uint64_t);
  uint64_t v296;
  std::string v297;
  uint64_t v298;
  id *v299;
  uint64_t v300;
  uint64_t (*v301)(uint64_t, uint64_t);
  void (*v302)(uint64_t);
  id v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  __n128 (*v307)(__n128 *, __n128 *);
  uint64_t (*v308)(uint64_t);
  const char *v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  __int128 v312;
  uint64_t v313;
  std::string v314;
  _QWORD v315[2];
  _QWORD v316[2];
  _QWORD v317[2];
  _QWORD v318[3];
  _QWORD v319[2];
  _QWORD v320[2];
  _QWORD v321[3];
  _QWORD v322[2];
  _QWORD v323[2];
  void *v324;
  void *v325;
  std::string v326;
  void *v327;
  id v328;
  _BYTE *v329;
  uint64_t v330;
  uint64_t v331;
  _BYTE buf[32];
  _BYTE v333[24];
  std::__shared_weak_count *v334;
  std::string v335;
  uint64_t v336;

  v336 = *MEMORY[0x1E0C80C00];
  v304 = 0;
  v305 = &v304;
  v306 = 0x4012000000;
  v307 = __Block_byref_object_copy__209;
  v308 = __Block_byref_object_dispose__210;
  v311 = 0;
  v309 = "";
  v310 = 0;
  v298 = 0;
  v299 = (id *)&v298;
  v300 = 0x3032000000;
  v301 = __Block_byref_object_copy__212;
  v302 = __Block_byref_object_dispose__213;
  v303 = 0;
  v4 = (*(uint64_t (**)(uint64_t *, uint64_t))(**a3 + 32))(*a3, 167772180);
  v291 = 0;
  v292 = (const std::string *)&v291;
  v293 = 0x4812000000;
  v294 = __Block_byref_object_copy__214;
  v295 = __Block_byref_object_dispose__215;
  v296 = 0;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t *, uint64_t))(**a3 + 24))(&v286, *a3, 167772161);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v297, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    v286 = off_1E5B4D010;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
  }
  else
  {
    v297 = __s;
  }
  v286 = 0;
  v287 = &v286;
  __s.__r_.__value_.__r.__words[0] = 0x4812000000;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)__Block_byref_object_copy__214;
  __s.__r_.__value_.__r.__words[2] = (std::string::size_type)__Block_byref_object_dispose__215;
  v289 = 0;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t *, uint64_t))(**a3 + 168))(&v281, *a3, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v290, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v281 = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v290 = __p;
  }
  v281 = 0;
  v282 = &v281;
  __p.__r_.__value_.__r.__words[0] = 0x4812000000;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)__Block_byref_object_copy__214;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)__Block_byref_object_dispose__215;
  v284 = 0;
  (*(void (**)(uint64_t (***__return_ptr)(), uint64_t *, uint64_t))(**a3 + 24))(&v276, *a3, 167772162);
  if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v285, v278.__r_.__value_.__l.__data_, v278.__r_.__value_.__l.__size_);
    v276 = off_1E5B4D010;
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
  }
  else
  {
    v285 = v278;
  }
  v276 = 0;
  v277 = &v276;
  v278.__r_.__value_.__r.__words[0] = 0x4812000000;
  v278.__r_.__value_.__l.__size_ = (std::string::size_type)__Block_byref_object_copy__214;
  v278.__r_.__value_.__r.__words[2] = (std::string::size_type)__Block_byref_object_dispose__215;
  v279 = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t *, uint64_t))(**a3 + 176))(buf, *a3, 1);
  if ((v333[7] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v280, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if ((v333[7] & 0x80000000) != 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    *(_OWORD *)&v280.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[16];
    v280.__r_.__value_.__r.__words[2] = *(_QWORD *)v333;
  }
  v5 = (*(uint64_t (**)(uint64_t *, uint64_t))(**a3 + 32))(*a3, 16777217);
  v245 = v4;
  v6 = MLMediaTypeByStandardizingMediaType(v5);
  v7 = (v6 & 8) == 0;
  v8 = (*(uint64_t (**)(uint64_t *, uint64_t))(**a3 + 32))(*a3, 167772176);
  v9 = *a3;
  v10 = **a3;
  v11 = (*a3)[1];
  v275 = v11;
  v247 = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 32))(v9, 318767118);
  v248 = v8;
  if (*((_BYTE *)*a3 + 16) && !*((_BYTE *)*a3 + 17))
  {
    v18 = *(void **)(a2 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v11);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v325 = v19;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v325, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "executeQuery:withParameters:", CFSTR("SELECT item_artist_pid FROM item WHERE ROWID = ?"), v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v21, "objectForFirstRowAndColumn");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v22, "longLongValue"))
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      *(_QWORD *)&buf[24] = 0;
      v242 = v21;
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t))(**a3 + 56))(*a3, 167772161);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t))(**a3 + 56))(*a3, 167772167);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t))(**a3 + 56))(*a3, 167772162);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t))(**a3 + 56))(*a3, 167772168);
      v27 = *(void **)(a2 + 16);
      v324 = v22;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v324, 1);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "executeQuery:withParameters:", CFSTR("SELECT item_artist, sort_item_artist, series_name, sort_series_name, representative_item_pid, store_id, grouping_key, sync_id, classical_experience_available FROM item_artist WHERE item_artist_pid=?"), v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v257[0] = MEMORY[0x1E0C809B0];
      v257[1] = 3321888768;
      v257[2] = ___ZN16ML3ImportSession14_getArtistInfoENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke;
      v257[3] = &unk_1E5B52560;
      v270 = v23;
      v271 = v24;
      v259 = &v291;
      v260 = &v286;
      v272 = v25;
      v273 = v26;
      v261 = &v281;
      v262 = &v276;
      v263 = buf;
      v264 = &v298;
      v274 = v7;
      v31 = *a3;
      v30 = (std::__shared_weak_count *)a3[1];
      v266 = a2;
      v267 = v31;
      v268 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
      }
      v265 = &v304;
      v258 = v22;
      v269 = v11;
      v21 = v242;
      objc_msgSend(v29, "enumerateRowsWithBlock:", v257);

      v34 = v268;
      if (v268)
      {
        v35 = (unint64_t *)&v268->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      _Block_object_dispose(buf, 8);
    }
    else
    {
      v37 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl(&dword_1AC149000, v37, OS_LOG_TYPE_ERROR, "No existing artist PID for update item %lli", buf, 0xCu);
      }

    }
    v17 = v248;
  }
  else
  {
    v12 = *(void **)(a2 + 8);
    ML3CPPBridgeString((const UInt8 *)&v292[2], 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if ((v6 & 8) != 0)
    {
      v14 = &stru_1E5B66908;
    }
    else
    {
      ML3CPPBridgeString((const UInt8 *)v282 + 48, 0);
      v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v12, "artistGroupingKeyForArtistName:seriesName:", v13, v14);
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = v299[5];
    v299[5] = (id)v15;

    if ((v6 & 8) == 0)
    v17 = v248;
    if (!(objc_msgSend(v299[5], "length") | v248))
    {
      *a1 = 0;
      a1[1] = 0;
      goto LABEL_325;
    }
  }
  if (!v305[6] && objc_msgSend(v299[5], "length"))
  {
    v50 = buf;
    v51 = v299[5];
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4012000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__209;
    *(_QWORD *)v333 = __Block_byref_object_dispose__210;
    *(_QWORD *)&v333[16] = 0;
    v334 = 0;
    *(_QWORD *)&v333[8] = "";
    if (v17
      && (v52 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a2 + 968), v17)) != 0)
    {
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](&v333[16], v52[3], v52[4]);
      v53 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v326.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)v326.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
        WORD2(v326.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v326.__r_.__value_.__r.__words[1] + 6) = v248;
        _os_log_impl(&dword_1AC149000, v53, OS_LOG_TYPE_DEFAULT, "Found artist with grouping key=%p, sourceID=%lld", (uint8_t *)&v326, 0x16u);
      }

      v50 = *(_BYTE **)&buf[8];
      v54 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
      if (!v51)
      {
LABEL_89:
        v76 = *((_QWORD *)v50 + 6);
        if (v76)
        {
LABEL_183:
          v123 = *((_QWORD *)v50 + 7);
          v314.__r_.__value_.__r.__words[0] = v76;
          v314.__r_.__value_.__l.__size_ = v123;
          if (v123)
          {
            v124 = (unint64_t *)(v123 + 8);
            do
              v125 = __ldxr(v124);
            while (__stxr(v125 + 1, v124));
          }
          _Block_object_dispose(buf, 8);
          v126 = v334;
          if (v334)
          {
            v127 = (unint64_t *)&v334->__shared_owners_;
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }

          std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v305 + 6), (__int128 *)&v314);
          size = (std::__shared_weak_count *)v314.__r_.__value_.__l.__size_;
          if (v314.__r_.__value_.__l.__size_)
          {
            v130 = (unint64_t *)(v314.__r_.__value_.__l.__size_ + 8);
            do
              v131 = __ldaxr(v130);
            while (__stlxr(v131 - 1, v130));
            if (!v131)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          goto LABEL_41;
        }
        if (v51 && v248)
        {
          objc_msgSend(CFSTR("SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available FROM item_artist "), "stringByAppendingString:", CFSTR("WHERE (ROWID = ? OR sync_id = ?) OR grouping_key = ?"));
          v77 = (__CFString *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v248);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          v335.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v248);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          v335.__r_.__value_.__l.__size_ = (std::string::size_type)v79;
          v335.__r_.__value_.__r.__words[2] = (std::string::size_type)v51;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v335, 3);
          v80 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          if (!v248)
          {
            if (v51)
            {
              objc_msgSend(CFSTR("SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available FROM item_artist "), "stringByAppendingString:", CFSTR("WHERE grouping_key = ?"));
              v77 = (__CFString *)objc_claimAutoreleasedReturnValue();
              v335.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v335, 1);
              v121 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v121 = 0;
              v77 = CFSTR("SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available FROM item_artist ");
            }
            goto LABEL_182;
          }
          objc_msgSend(CFSTR("SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available FROM item_artist "), "stringByAppendingString:", CFSTR("WHERE(ROWID = ? OR sync_id = ?)"));
          v77 = (__CFString *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v248);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          v335.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v248);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          v335.__r_.__value_.__l.__size_ = (std::string::size_type)v79;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v335, 2);
          v80 = objc_claimAutoreleasedReturnValue();
        }
        v121 = (void *)v80;

LABEL_182:
        objc_msgSend(*(id *)(a2 + 16), "executeQuery:withParameters:", v77, v121);
        v122 = (void *)objc_claimAutoreleasedReturnValue();
        v326.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
        v326.__r_.__value_.__l.__size_ = 3221225472;
        v326.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN16ML3ImportSession22_getExistingArtistInfoEP6NSDatax_block_invoke;
        v327 = &unk_1E5B65088;
        v330 = a2;
        v329 = buf;
        v328 = v51;
        v331 = v248;
        objc_msgSend(v122, "enumerateRowsWithBlock:", &v326);

        v50 = *(_BYTE **)&buf[8];
        v76 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
        goto LABEL_183;
      }
    }
    else
    {
      v54 = 0;
      if (!v51)
        goto LABEL_89;
    }
    if (!v54)
    {
      ML3CPPStringFromData((NSData *)&v326, v51);
      v74 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a2 + 1088), (unsigned __int8 *)&v326);
      if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v326.__r_.__value_.__l.__data_);
      v50 = *(_BYTE **)&buf[8];
      if (v74)
      {
        std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)&buf[8] + 48), *((_QWORD *)v74 + 5), *((_QWORD *)v74 + 6));
        v75 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v326.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)v326.__r_.__value_.__r.__words + 4) = (std::string::size_type)v51;
          _os_log_impl(&dword_1AC149000, v75, OS_LOG_TYPE_DEFAULT, "Found artist with grouping key=%p", (uint8_t *)&v326, 0xCu);
        }

        v50 = *(_BYTE **)&buf[8];
      }
    }
    goto LABEL_89;
  }
LABEL_41:
  if (!v305[6])
  {
    if (objc_msgSend(v299[5], "length"))
    {
      IntegerUUID = v248;
      if (!v248)
        IntegerUUID = ML3CreateIntegerUUID();
      v56 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        v57 = (std::string::__raw *)&v292[2];
        if (SHIBYTE(v292[2].__r_.__value_.__r.__words[2]) < 0)
          v57 = (std::string::__raw *)v57->__words[0];
        v58 = v287 + 6;
        if (*((char *)v287 + 71) < 0)
          v58 = (_QWORD *)*v58;
        v59 = v282 + 6;
        if (*((char *)v282 + 71) < 0)
          v59 = (_QWORD *)*v59;
        v60 = v277 + 6;
        if (*((char *)v277 + 71) < 0)
          v60 = (_QWORD *)*v60;
        *(_DWORD *)buf = 134219010;
        *(_QWORD *)&buf[4] = IntegerUUID;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v57;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v58;
        *(_WORD *)v333 = 2082;
        *(_QWORD *)&v333[2] = v59;
        *(_WORD *)&v333[10] = 2082;
        *(_QWORD *)&v333[12] = v60;
        _os_log_impl(&dword_1AC149000, v56, OS_LOG_TYPE_DEFAULT, "creating new artist entry: pid=%lld, name='%{public}s', sortName='%{public}s', series='%{public}s', sortSeries='%{public}s'", buf, 0x34u);
      }

      v61 = v292;
      v62 = (std::string::__raw *)&v292[2];
      v63 = v287;
      v64 = (std::string *)(v287 + 6);
      v65 = v282;
      v66 = v277;
      v67 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a2, (uint64_t)(v287 + 6), (uint64_t)&v292[2]);
      v243 = v68;
      v244 = v67;
      v69 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a2, (uint64_t)(v277 + 6), (uint64_t)(v282 + 6));
      v71 = v70;
      v73 = operator new(0xD8uLL);
      v73[1] = 0;
      v73[2] = 0;
      *v73 = &off_1E5B51308;
      if (SHIBYTE(v61[2].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, v61[2].__r_.__value_.__l.__data_, v61[2].__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)v62->__words;
        *(_QWORD *)&buf[16] = v62->__words[2];
      }
      if (*((char *)v63 + 71) < 0)
        std::string::__init_copy_ctor_external(&v326, (const std::string::value_type *)v63[6], (std::string::size_type)v63[7]);
      else
        v326 = *v64;
      if (*((char *)v65 + 71) < 0)
        std::string::__init_copy_ctor_external(&v335, (const std::string::value_type *)v65[6], (std::string::size_type)v65[7]);
      else
        v335 = *(std::string *)((_BYTE *)v65 + 2);
      if (*((char *)v66 + 71) < 0)
        std::string::__init_copy_ctor_external(&v314, (const std::string::value_type *)v66[6], (std::string::size_type)v66[7]);
      else
        v314 = *(std::string *)((_BYTE *)v66 + 2);
      v312 = 0uLL;
      v313 = 0;
      ML3ArtistData::ML3ArtistData((uint64_t)(v73 + 3), IntegerUUID, (__int128 *)buf, (__int128 *)&v326, (__int128 *)&v335, (__int128 *)&v314, v245, v72, v244, v243, v69, v71, v248, &v312, v247 != 0, 0, 0);
      if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v314.__r_.__value_.__l.__data_);
      if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v335.__r_.__value_.__l.__data_);
      if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v326.__r_.__value_.__l.__data_);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      *(_QWORD *)&v250 = v73 + 3;
      *((_QWORD *)&v250 + 1) = v73;
      std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v305 + 6), &v250);
      v81 = (std::__shared_weak_count *)*((_QWORD *)&v250 + 1);
      if (*((_QWORD *)&v250 + 1))
      {
        v82 = (unint64_t *)(*((_QWORD *)&v250 + 1) + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      std::allocate_shared[abi:ne180100]<ML3ArtistImportItem,std::allocator<ML3ArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long &,void>(&v326, (_QWORD *)v305[6], (std::__shared_weak_count *)v305[7], v299 + 5, &v275);
      *(_QWORD *)buf = IntegerUUID;
      *(_OWORD *)&buf[8] = *(_OWORD *)&v326.__r_.__value_.__l.__data_;
      *(_OWORD *)&v326.__r_.__value_.__l.__data_ = 0uLL;
      std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>(a2 + 1840, IntegerUUID, (uint64_t)buf);
      v84 = *(std::__shared_weak_count **)&buf[16];
      if (*(_QWORD *)&buf[16])
      {
        v85 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = (std::__shared_weak_count *)v326.__r_.__value_.__l.__size_;
      if (v326.__r_.__value_.__l.__size_)
      {
        v88 = (unint64_t *)(v326.__r_.__value_.__l.__size_ + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      ML3CPPStringFromData((NSData *)&v326, v299[5]);
      *(_OWORD *)buf = *(_OWORD *)&v326.__r_.__value_.__l.__data_;
      v90 = v326.__r_.__value_.__r.__words[2];
      memset(&v326, 0, sizeof(v326));
      v92 = v305[6];
      v91 = v305[7];
      *(_QWORD *)&buf[16] = v90;
      *(_QWORD *)&buf[24] = v92;
      *(_QWORD *)v333 = v91;
      if (v91)
      {
        v93 = (unint64_t *)(v91 + 8);
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(a2 + 1088, buf, (uint64_t)buf);
      v95 = *(std::__shared_weak_count **)v333;
      if (*(_QWORD *)v333)
      {
        v96 = (unint64_t *)(*(_QWORD *)v333 + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v326.__r_.__value_.__l.__data_);
    }
    goto LABEL_322;
  }
  v38 = *(int *)(a2 + 32);
  PropertyIndex = ML3TrackRulesGetPropertyIndex(10, 167772161);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__specialRules + 56 * PropertyIndex + 4 * v38) != -1)
  {
    v40 = v305[6];
    v41 = HIBYTE(v292[2].__r_.__value_.__r.__words[2]);
    if ((v41 & 0x80u) == 0)
      v42 = HIBYTE(v292[2].__r_.__value_.__r.__words[2]);
    else
      v42 = v292[2].__r_.__value_.__l.__size_;
    v43 = *(unsigned __int8 *)(v40 + 31);
    v44 = (char)v43;
    if ((v43 & 0x80u) != 0)
      v43 = *(_QWORD *)(v40 + 16);
    if (v42 == v43)
    {
      p_data = (const void **)&v292[2].__r_.__value_.__l.__data_;
      v48 = *(unsigned __int8 **)(v40 + 8);
      v46 = (unsigned __int8 *)(v40 + 8);
      v47 = v48;
      if (v44 >= 0)
        v49 = v46;
      else
        v49 = v47;
      if ((v41 & 0x80) != 0)
      {
        if (!memcmp(*p_data, v49, v292[2].__r_.__value_.__l.__size_))
          goto LABEL_148;
      }
      else
      {
        if (!*((_BYTE *)&v292[2].__r_.__value_.__s + 23))
          goto LABEL_148;
        while (*(unsigned __int8 *)p_data == *v49)
        {
          p_data = (const void **)((char *)p_data + 1);
          ++v49;
          if (!--v41)
            goto LABEL_148;
        }
      }
    }
    v98 = (std::__shared_weak_count *)a3[1];
    v256[0] = *a3;
    v256[1] = v98;
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v256, 0xA000001u);
    v102 = shouldPreserveTrackProperty;
    if (!v98)
      goto LABEL_146;
    v103 = (unint64_t *)&v98->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (v104)
    {
LABEL_146:
      if ((shouldPreserveTrackProperty & 1) != 0)
        goto LABEL_148;
      goto LABEL_147;
    }
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
    if ((v102 & 1) == 0)
    {
LABEL_147:
      v105 = *(void **)(a2 + 16);
      ML3CPPBridgeString((const UInt8 *)&v292[2], 1);
      v106 = (void *)objc_claimAutoreleasedReturnValue();
      v323[0] = v106;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v305[6]);
      v107 = (void *)objc_claimAutoreleasedReturnValue();
      v323[1] = v107;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v323, 2);
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v105, "executeUpdate:withParameters:error:", CFSTR("UPDATE item_artist SET item_artist = ? WHERE ROWID = ?"), v108, 0);

      std::string::operator=((std::string *)(v305[6] + 8), v292 + 2);
    }
  }
LABEL_148:
  v109 = *(int *)(a2 + 32);
  v110 = ML3TrackRulesGetPropertyIndex(10, 167772167);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__specialRules + 56 * v110 + 4 * v109) == -1)
    goto LABEL_214;
  v111 = (uint64_t (**)())*((unsigned __int8 *)v287 + 71);
  if (*((char *)v287 + 71) < 0)
  {
    if (!v287[7])
      goto LABEL_169;
  }
  else if (!*((_BYTE *)v287 + 71))
  {
LABEL_169:
    if ((v111 & 0x80) != 0)
      v111 = v287[7];
    goto LABEL_174;
  }
  v112 = v305[6];
  v113 = v287[7];
  if ((char)v111 >= 0)
    v114 = (uint64_t (**)())*((unsigned __int8 *)v287 + 71);
  else
    v114 = v287[7];
  v115 = (uint64_t (**)())*(unsigned __int8 *)(v112 + 55);
  v116 = (char)v115;
  if ((char)v115 < 0)
    v115 = *(uint64_t (***)())(v112 + 40);
  if (v114 == v115)
  {
    v117 = (const void **)(v287 + 6);
    if (v116 >= 0)
      v118 = (unsigned __int8 *)(v112 + 32);
    else
      v118 = *(unsigned __int8 **)(v112 + 32);
    if ((v111 & 0x80) != 0)
    {
      v120 = memcmp(*v117, v118, (size_t)v287[7]);
      v111 = v113;
      if (!v120)
      {
LABEL_174:
        if (v111)
          goto LABEL_214;
        v112 = v305[6];
        LOBYTE(v116) = *(_BYTE *)(v112 + 55);
LABEL_176:
        if ((v116 & 0x80) != 0)
        {
          if (!*(_QWORD *)(v112 + 40))
            goto LABEL_214;
        }
        else if (!(_BYTE)v116)
        {
          goto LABEL_214;
        }
      }
    }
    else
    {
      if (!*((_BYTE *)v287 + 71))
        goto LABEL_176;
      v119 = *((unsigned __int8 *)v287 + 71);
      while (*(unsigned __int8 *)v117 == *v118)
      {
        v117 = (const void **)((char *)v117 + 1);
        ++v118;
        if (!--v119)
          goto LABEL_169;
      }
    }
  }
  v132 = (std::__shared_weak_count *)a3[1];
  v255[0] = *a3;
  v255[1] = v132;
  if (v132)
  {
    v133 = (unint64_t *)&v132->__shared_owners_;
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
  }
  v135 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v255, 0xA000007u);
  v136 = v135;
  if (!v132)
    goto LABEL_204;
  v137 = (unint64_t *)&v132->__shared_owners_;
  do
    v138 = __ldaxr(v137);
  while (__stlxr(v138 - 1, v137));
  if (!v138)
  {
    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
    std::__shared_weak_count::__release_weak(v132);
    if ((v136 & 1) != 0)
      goto LABEL_214;
  }
  else
  {
LABEL_204:
    if ((v135 & 1) != 0)
      goto LABEL_214;
  }
  if (*((char *)v287 + 71) < 0)
    v139 = v287[7];
  else
    v139 = (uint64_t (**)())*((unsigned __int8 *)v287 + 71);
  v140 = *(void **)(a2 + 16);
  if (v139)
    ML3CPPBridgeString((const UInt8 *)v287 + 48, 1);
  else
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  v322[0] = v141;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v305[6]);
  v142 = (void *)objc_claimAutoreleasedReturnValue();
  v322[1] = v142;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v322, 2);
  v143 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v140, "executeUpdate:withParameters:error:", CFSTR("UPDATE item_artist SET sort_item_artist = ? WHERE ROWID = ?"), v143, 0);

  std::string::operator=((std::string *)(v305[6] + 32), (const std::string *)v287 + 2);
  v144 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a2, (uint64_t)(v287 + 6), (uint64_t)&v292[2]);
  v145 = v305[6];
  *(_QWORD *)(v145 + 112) = v144;
  *(_QWORD *)(v145 + 120) = v146;
  v147 = *(void **)(a2 + 16);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v144);
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  v321[0] = v148;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(v305[6] + 120));
  v149 = (void *)objc_claimAutoreleasedReturnValue();
  v321[1] = v149;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v305[6]);
  v150 = (void *)objc_claimAutoreleasedReturnValue();
  v321[2] = v150;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v321, 3);
  v151 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v147, "executeUpdate:withParameters:error:", CFSTR("UPDATE item SET item_artist_order=?, item_artist_order_section=? WHERE item_artist_pid=?"), v151, 0);

LABEL_214:
  v152 = *(int *)(a2 + 32);
  v153 = ML3TrackRulesGetPropertyIndex(10, 167772162);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__specialRules + 56 * v153 + 4 * v152) != -1)
  {
    v154 = v305[6];
    v155 = *((unsigned __int8 *)v282 + 71);
    if ((v155 & 0x80u) == 0)
      v156 = (uint64_t (**)())*((unsigned __int8 *)v282 + 71);
    else
      v156 = v282[7];
    v157 = (uint64_t (**)())*(unsigned __int8 *)(v154 + 79);
    v158 = (char)v157;
    if ((char)v157 < 0)
      v157 = *(uint64_t (***)())(v154 + 64);
    if (v156 == v157)
    {
      v159 = (const void **)(v282 + 6);
      v162 = *(unsigned __int8 **)(v154 + 56);
      v160 = (unsigned __int8 *)(v154 + 56);
      v161 = v162;
      if (v158 >= 0)
        v163 = v160;
      else
        v163 = v161;
      if ((v155 & 0x80) != 0)
      {
        if (!memcmp(*v159, v163, (size_t)v282[7]))
          goto LABEL_241;
      }
      else
      {
        if (!*((_BYTE *)v282 + 71))
          goto LABEL_241;
        while (*(unsigned __int8 *)v159 == *v163)
        {
          v159 = (const void **)((char *)v159 + 1);
          ++v163;
          if (!--v155)
            goto LABEL_241;
        }
      }
    }
    v164 = (std::__shared_weak_count *)a3[1];
    v254[0] = *a3;
    v254[1] = v164;
    if (v164)
    {
      v165 = (unint64_t *)&v164->__shared_owners_;
      do
        v166 = __ldxr(v165);
      while (__stxr(v166 + 1, v165));
    }
    v167 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v254, 0xA000002u);
    v168 = v167;
    if (!v164)
      goto LABEL_239;
    v169 = (unint64_t *)&v164->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (v170)
    {
LABEL_239:
      if ((v167 & 1) != 0)
        goto LABEL_241;
      goto LABEL_240;
    }
    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
    std::__shared_weak_count::__release_weak(v164);
    if ((v168 & 1) == 0)
    {
LABEL_240:
      v171 = *(void **)(a2 + 16);
      ML3CPPBridgeString((const UInt8 *)v282 + 48, 1);
      v172 = (void *)objc_claimAutoreleasedReturnValue();
      v320[0] = v172;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v305[6]);
      v173 = (void *)objc_claimAutoreleasedReturnValue();
      v320[1] = v173;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v320, 2);
      v174 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v171, "executeUpdate:withParameters:error:", CFSTR("UPDATE item_artist SET series_name = ? WHERE ROWID = ?"), v174, 0);

      std::string::operator=((std::string *)(v305[6] + 56), (const std::string *)v282 + 2);
    }
  }
LABEL_241:
  v175 = *(int *)(a2 + 32);
  v176 = ML3TrackRulesGetPropertyIndex(10, 167772168);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__specialRules + 56 * v176 + 4 * v175) == -1)
    goto LABEL_290;
  v177 = (uint64_t (**)())*((unsigned __int8 *)v277 + 71);
  if (*((char *)v277 + 71) < 0)
  {
    if (!v277[7])
      goto LABEL_262;
  }
  else if (!*((_BYTE *)v277 + 71))
  {
LABEL_262:
    if ((v177 & 0x80) != 0)
      v177 = v277[7];
LABEL_267:
    if (v177)
      goto LABEL_290;
    v178 = v305[6];
    LOBYTE(v182) = *(_BYTE *)(v178 + 103);
    goto LABEL_269;
  }
  v178 = v305[6];
  v179 = v277[7];
  if ((char)v177 >= 0)
    v180 = (uint64_t (**)())*((unsigned __int8 *)v277 + 71);
  else
    v180 = v277[7];
  v181 = (uint64_t (**)())*(unsigned __int8 *)(v178 + 103);
  v182 = (char)v181;
  if ((char)v181 < 0)
    v181 = *(uint64_t (***)())(v178 + 88);
  if (v180 != v181)
    goto LABEL_273;
  v183 = (const void **)(v277 + 6);
  if (v182 >= 0)
    v184 = (unsigned __int8 *)(v178 + 80);
  else
    v184 = *(unsigned __int8 **)(v178 + 80);
  if ((v177 & 0x80) != 0)
  {
    v186 = memcmp(*v183, v184, (size_t)v277[7]);
    v177 = v179;
    if (v186)
      goto LABEL_273;
    goto LABEL_267;
  }
  if (*((_BYTE *)v277 + 71))
  {
    v185 = *((unsigned __int8 *)v277 + 71);
    while (*(unsigned __int8 *)v183 == *v184)
    {
      v183 = (const void **)((char *)v183 + 1);
      ++v184;
      if (!--v185)
        goto LABEL_262;
    }
    goto LABEL_273;
  }
LABEL_269:
  if ((v182 & 0x80) != 0)
  {
    if (!*(_QWORD *)(v178 + 88))
      goto LABEL_290;
  }
  else if (!(_BYTE)v182)
  {
    goto LABEL_290;
  }
LABEL_273:
  v187 = (std::__shared_weak_count *)a3[1];
  v253[0] = *a3;
  v253[1] = v187;
  if (v187)
  {
    v188 = (unint64_t *)&v187->__shared_owners_;
    do
      v189 = __ldxr(v188);
    while (__stxr(v189 + 1, v188));
  }
  v190 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v253, 0xA000008u);
  v191 = v190;
  if (!v187)
    goto LABEL_280;
  v192 = (unint64_t *)&v187->__shared_owners_;
  do
    v193 = __ldaxr(v192);
  while (__stlxr(v193 - 1, v192));
  if (v193)
  {
LABEL_280:
    if ((v190 & 1) != 0)
      goto LABEL_290;
LABEL_281:
    if (*((char *)v277 + 71) < 0)
      v194 = v277[7];
    else
      v194 = (uint64_t (**)())*((unsigned __int8 *)v277 + 71);
    v195 = *(void **)(a2 + 16);
    if (v194)
      ML3CPPBridgeString((const UInt8 *)v277 + 48, 1);
    else
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v196 = (void *)objc_claimAutoreleasedReturnValue();
    v319[0] = v196;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v305[6]);
    v197 = (void *)objc_claimAutoreleasedReturnValue();
    v319[1] = v197;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v319, 2);
    v198 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v195, "executeUpdate:withParameters:error:", CFSTR("UPDATE item_artist SET sort_series_name = ? WHERE ROWID = ?"), v198, 0);

    std::string::operator=((std::string *)(v305[6] + 80), (const std::string *)v277 + 2);
    v199 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a2, (uint64_t)(v277 + 6), (uint64_t)(v282 + 6));
    v200 = v305[6];
    *(_QWORD *)(v200 + 128) = v199;
    *(_QWORD *)(v200 + 136) = v201;
    v202 = *(void **)(a2 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v199);
    v203 = (void *)objc_claimAutoreleasedReturnValue();
    v318[0] = v203;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(v305[6] + 136));
    v204 = (void *)objc_claimAutoreleasedReturnValue();
    v318[1] = v204;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v305[6]);
    v205 = (void *)objc_claimAutoreleasedReturnValue();
    v318[2] = v205;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v318, 3);
    v206 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v202, "executeUpdate:withParameters:error:", CFSTR("UPDATE item SET series_name_order=?, series_name_order_section=? WHERE item_artist_pid=?"), v206, 0);

    goto LABEL_290;
  }
  ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
  std::__shared_weak_count::__release_weak(v187);
  if ((v191 & 1) == 0)
    goto LABEL_281;
LABEL_290:
  if (v245)
  {
    v207 = v305[6];
    if (v245 != *(_QWORD *)(v207 + 104))
    {
      *(_QWORD *)(v207 + 104) = v245;
      v208 = *(void **)(a2 + 16);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:");
      v209 = (void *)objc_claimAutoreleasedReturnValue();
      v317[0] = v209;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v305[6]);
      v210 = (void *)objc_claimAutoreleasedReturnValue();
      v317[1] = v210;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v317, 2);
      v211 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v208, "executeUpdate:withParameters:error:", CFSTR("UPDATE item_artist SET store_id = ? WHERE ROWID = ?"), v211, 0);

    }
  }
  if (v248 && v248 != *(_QWORD *)(v305[6] + 144))
  {
    v212 = *(int *)(a2 + 32);
    v213 = ML3TrackRulesGetPropertyIndex(10, 167772176);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    if (*(_DWORD *)(__specialRules + 56 * v213 + 4 * v212) != -1)
    {
      v214 = (std::__shared_weak_count *)a3[1];
      v252[0] = *a3;
      v252[1] = v214;
      if (v214)
      {
        v215 = (unint64_t *)&v214->__shared_owners_;
        do
          v216 = __ldxr(v215);
        while (__stxr(v216 + 1, v215));
      }
      v217 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v252, 0xA000010u);
      if (v214)
      {
        v218 = (unint64_t *)&v214->__shared_owners_;
        do
          v219 = __ldaxr(v218);
        while (__stlxr(v219 - 1, v218));
        if (!v219)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
        }
      }
      if ((v217 & 1) == 0)
      {
        v220 = *(void **)(a2 + 16);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v248);
        v221 = (void *)objc_claimAutoreleasedReturnValue();
        v316[0] = v221;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v305[6]);
        v222 = (void *)objc_claimAutoreleasedReturnValue();
        v316[1] = v222;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v316, 2);
        v223 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v220, "executeUpdate:withParameters:error:", CFSTR("UPDATE item_artist SET sync_id = ? WHERE ROWID = ?"), v223, 0);

        *(_QWORD *)(v305[6] + 144) = v248;
      }
    }
  }
  if (*(_BYTE *)(v305[6] + 176) != (v247 != 0))
  {
    v224 = *(int *)(a2 + 32);
    v225 = ML3TrackRulesGetPropertyIndex(19, 318767118);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    if (*(_DWORD *)(__artistRules + 56 * v225 + 4 * v224) != -1)
    {
      v226 = (std::__shared_weak_count *)a3[1];
      v251[0] = *a3;
      v251[1] = v226;
      if (v226)
      {
        v227 = (unint64_t *)&v226->__shared_owners_;
        do
          v228 = __ldxr(v227);
        while (__stxr(v228 + 1, v227));
      }
      v229 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v251, 0x1300000Eu);
      if (v226)
      {
        v230 = (unint64_t *)&v226->__shared_owners_;
        do
          v231 = __ldaxr(v230);
        while (__stlxr(v231 - 1, v230));
        if (!v231)
        {
          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
          std::__shared_weak_count::__release_weak(v226);
        }
      }
      if ((v229 & 1) == 0)
      {
        v232 = *(void **)(a2 + 16);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v247 != 0);
        v233 = (void *)objc_claimAutoreleasedReturnValue();
        v315[0] = v233;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v305[6]);
        v234 = (void *)objc_claimAutoreleasedReturnValue();
        v315[1] = v234;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v315, 2);
        v235 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v232, "executeUpdate:withParameters:error:", CFSTR("UPDATE item_artist SET classical_experience_available = ? WHERE ROWID = ?"), v235, 0);

        *(_QWORD *)(v305[6] + 144) = v248;
      }
    }
  }
LABEL_322:
  v236 = v305[7];
  *a1 = v305[6];
  a1[1] = v236;
  if (v236)
  {
    v237 = (unint64_t *)(v236 + 8);
    do
      v238 = __ldxr(v237);
    while (__stxr(v238 + 1, v237));
  }
LABEL_325:
  _Block_object_dispose(&v276, 8);
  if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v280.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v281, 8);
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v286, 8);
  if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v290.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v291, 8);
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v297.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v298, 8);

  _Block_object_dispose(&v304, 8);
  v239 = v311;
  if (v311)
  {
    v240 = (unint64_t *)&v311->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
}

void sub_1AC360060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;
  uint64_t a68;
  void *a72;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;

  _Block_object_dispose((const void *)(v77 - 208), 8);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v74);

  _Block_object_dispose(&a56, 8);
  if (a67 < 0)
    operator delete(__p);
  _Block_object_dispose(&a68, 8);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a72);
  _Block_object_dispose(&STACK[0x208], 8);
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  _Block_object_dispose(&STACK[0x250], 8);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  _Block_object_dispose(&STACK[0x298], 8);

  _Block_object_dispose(&STACK[0x2C8], 8);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F8]);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_getAlbumArtistInfo(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  char v15;
  void *v16;
  void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t PropertyIndex;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type v31;
  uint64_t v32;
  int v33;
  const void **p_data;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  id v40;
  std::string::size_type v41;
  _QWORD *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t IntegerUUID;
  NSObject *v48;
  std::string::__raw *v49;
  _QWORD *v50;
  std::string *p_str;
  const std::string *v52;
  uint64_t (***v53)();
  std::string *v54;
  std::string::__raw *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned __int8 *v61;
  NSObject *v62;
  uint64_t v63;
  __CFString *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *size;
  unint64_t *v78;
  unint64_t v79;
  std::string::size_type v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  char shouldPreserveTrackProperty;
  char v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  std::string::size_type v101;
  uint64_t (**v102)();
  uint64_t v103;
  uint64_t (**v104)();
  uint64_t (**v105)();
  uint64_t (**v106)();
  int v107;
  const void **v108;
  unsigned __int8 *v109;
  uint64_t v110;
  int v111;
  void *v112;
  void *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  char v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t (**v129)();
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  uint64_t v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  char v152;
  unint64_t *v153;
  unint64_t v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  std::string::size_type v163;
  uint64_t v164;
  int v165;
  unsigned __int8 *v166;
  unsigned __int8 *v167;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  std::string *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  char v174;
  char v175;
  unint64_t *v176;
  unint64_t v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  char v187;
  unint64_t *v188;
  unint64_t v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v204;
  std::string::size_type v205;
  __int128 v206;
  _QWORD v207[2];
  _QWORD v208[2];
  _QWORD v209[2];
  _QWORD v210[2];
  _QWORD v211[2];
  _QWORD v212[4];
  id v213;
  uint64_t *v214;
  uint64_t (***v215)();
  _BYTE *v216;
  uint64_t *v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  uint64_t v222;
  char v223;
  char v224;
  std::string __str;
  uint64_t (**v226)();
  uint64_t (***v227)();
  std::string __p;
  uint64_t v229;
  std::string v230;
  uint64_t v231;
  const std::string *v232;
  uint64_t v233;
  __n128 (*v234)(__n128 *, __n128 *);
  void (*v235)(uint64_t);
  uint64_t v236;
  std::string v237;
  uint64_t v238;
  void **v239;
  uint64_t v240;
  uint64_t (*v241)(uint64_t, uint64_t);
  void (*v242)(uint64_t);
  id v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  __n128 (*v247)(__n128 *, __n128 *);
  uint64_t (*v248)(uint64_t);
  const char *v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  std::string v252;
  __int128 v253;
  uint64_t v254;
  _QWORD v255[2];
  _QWORD v256[2];
  _QWORD v257[2];
  _QWORD v258[2];
  _QWORD v259[3];
  _QWORD v260[2];
  _QWORD v261[2];
  void *v262;
  void *v263;
  std::string v264;
  void *v265;
  id v266;
  _BYTE *v267;
  uint64_t v268;
  std::string::size_type v269;
  _BYTE buf[32];
  __int128 v271;
  uint64_t v272;
  std::__shared_weak_count *v273;
  __int128 v274;
  id v275;
  uint64_t v276;

  v276 = *MEMORY[0x1E0C80C00];
  v244 = 0;
  v245 = &v244;
  v246 = 0x4012000000;
  v247 = __Block_byref_object_copy__209;
  v248 = __Block_byref_object_dispose__210;
  v251 = 0;
  v249 = "";
  v250 = 0;
  v238 = 0;
  v239 = (void **)&v238;
  v240 = 0x3032000000;
  v241 = __Block_byref_object_copy__212;
  v242 = __Block_byref_object_dispose__213;
  v243 = 0;
  v201 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 167772181);
  v231 = 0;
  v232 = (const std::string *)&v231;
  v233 = 0x4812000000;
  v234 = __Block_byref_object_copy__214;
  v235 = __Block_byref_object_dispose__215;
  v236 = 0;
  (*(void (**)(uint64_t (***__return_ptr)(), _QWORD, _QWORD))(*(_QWORD *)*a3 + 152))(&v226, *a3, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v237, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v226 = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v237 = __p;
  }
  v226 = 0;
  v227 = &v226;
  __p.__r_.__value_.__r.__words[0] = 0x4812000000;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)__Block_byref_object_copy__214;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)__Block_byref_object_dispose__215;
  v229 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a3 + 160))(buf, *a3, 0);
  if (SBYTE7(v271) < 0)
  {
    std::string::__init_copy_ctor_external(&v230, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if (SBYTE7(v271) < 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    *(_OWORD *)&v230.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[16];
    v230.__r_.__value_.__r.__words[2] = v271;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a3 + 24))(buf, *a3, 301989899);
  if (SBYTE7(v271) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if (SBYTE7(v271) < 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[16];
    __str.__r_.__value_.__r.__words[2] = v271;
  }
  v205 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 167772177);
  v202 = *(_QWORD *)(*a3 + 8);
  v204 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 301989901);
  v200 = v204 != 0;
  if (*(_BYTE *)(*a3 + 16) && !*(_BYTE *)(*a3 + 17))
  {
    v9 = *(void **)(a2 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v202);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v263 = v10;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v263, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "executeQuery:withParameters:", CFSTR("SELECT album_artist_pid FROM item WHERE ROWID = ?"), v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v12, "objectForFirstRowAndColumn");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v13, "longLongValue"))
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      *(_QWORD *)&buf[24] = 0;
      v14 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 167772163);
      v15 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 167772169);
      v16 = *(void **)(a2 + 16);
      v262 = v13;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v262, 1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "executeQuery:withParameters:", CFSTR("SELECT album_artist, sort_album_artist, representative_item_pid, store_id, grouping_key, sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date FROM album_artist WHERE album_artist_pid=?"), v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v212[0] = MEMORY[0x1E0C809B0];
      v212[1] = 3321888768;
      v212[2] = ___ZN16ML3ImportSession19_getAlbumArtistInfoENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke;
      v212[3] = &unk_1E5B52528;
      v223 = v14;
      v224 = v15;
      v214 = &v231;
      v215 = &v226;
      v216 = buf;
      v217 = &v238;
      v20 = *a3;
      v19 = (std::__shared_weak_count *)a3[1];
      v219 = a2;
      v220 = v20;
      v221 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      v218 = &v244;
      v213 = v13;
      v222 = v202;
      objc_msgSend(v18, "enumerateRowsWithBlock:", v212);

      v23 = v221;
      if (v221)
      {
        v24 = (unint64_t *)&v221->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      _Block_object_dispose(buf, 8);
    }
    else
    {
      v26 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v202;
        _os_log_impl(&dword_1AC149000, v26, OS_LOG_TYPE_ERROR, "No existing albumArtist PID for update item %lli", buf, 0xCu);
      }

    }
  }
  else
  {
    v5 = *(void **)(a2 + 8);
    ML3CPPBridgeString((const UInt8 *)&v232[2], 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "groupingKeyForString:", v6);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = v239[5];
    v239[5] = (void *)v7;

    if (SHIBYTE(v232[2].__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v232[2].__r_.__value_.__l.__size_)
      {
LABEL_20:
        *a1 = 0;
        a1[1] = 0;
        goto LABEL_266;
      }
    }
    else if (!*((_BYTE *)&v232[2].__r_.__value_.__s + 23))
    {
      goto LABEL_20;
    }
    if (!v239[5])
      goto LABEL_20;
  }
  if (!v245[6] && objc_msgSend(v239[5], "length"))
  {
    v39 = buf;
    v40 = v239[5];
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4012000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__209;
    *(_QWORD *)&v271 = __Block_byref_object_dispose__210;
    v272 = 0;
    v273 = 0;
    *((_QWORD *)&v271 + 1) = "";
    v41 = v205;
    if (v205
      && (v42 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a2 + 1048), v205)) != 0)
    {
      std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](&v272, v42[3], v42[4]);
      v43 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v264.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)v264.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
        WORD2(v264.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v264.__r_.__value_.__r.__words[1] + 6) = v205;
        _os_log_impl(&dword_1AC149000, v43, OS_LOG_TYPE_DEFAULT, "Found album artist with grouping key=%p, sourceID=%lld", (uint8_t *)&v264, 0x16u);
      }

      v39 = *(_BYTE **)&buf[8];
      v44 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
      v41 = v205;
      if (!v40)
      {
LABEL_82:
        v63 = *((_QWORD *)v39 + 6);
        if (v63)
        {
LABEL_173:
          v114 = *((_QWORD *)v39 + 7);
          *(_QWORD *)&v253 = v63;
          *((_QWORD *)&v253 + 1) = v114;
          if (v114)
          {
            v115 = (unint64_t *)(v114 + 8);
            do
              v116 = __ldxr(v115);
            while (__stxr(v116 + 1, v115));
          }
          _Block_object_dispose(buf, 8);
          v117 = v273;
          if (v273)
          {
            v118 = (unint64_t *)&v273->__shared_owners_;
            do
              v119 = __ldaxr(v118);
            while (__stlxr(v119 - 1, v118));
            if (!v119)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
          }

          std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v245 + 6), &v253);
          v120 = (std::__shared_weak_count *)*((_QWORD *)&v253 + 1);
          if (*((_QWORD *)&v253 + 1))
          {
            v121 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          goto LABEL_36;
        }
        if (v40 && v41)
        {
          objc_msgSend(CFSTR("SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, sort_order, sort_order_section FROM album_artist "), "stringByAppendingString:", CFSTR("WHERE (ROWID = ? OR sync_id = ?) OR grouping_key = ?"));
          v64 = (__CFString *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v41);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)&v274 = v65;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v41);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          *((_QWORD *)&v274 + 1) = v66;
          v275 = v40;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v274, 3);
          v67 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          if (!v41)
          {
            if (v40)
            {
              objc_msgSend(CFSTR("SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, sort_order, sort_order_section FROM album_artist "), "stringByAppendingString:", CFSTR("WHERE grouping_key = ?"));
              v64 = (__CFString *)objc_claimAutoreleasedReturnValue();
              *(_QWORD *)&v274 = v40;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v274, 1);
              v112 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v112 = 0;
              v64 = CFSTR("SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, sort_order, sort_order_section FROM album_artist ");
            }
            goto LABEL_172;
          }
          objc_msgSend(CFSTR("SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available, liked_state, liked_state_changed_date, sort_order, sort_order_section FROM album_artist "), "stringByAppendingString:", CFSTR("WHERE (ROWID = ? OR sync_id = ?)"));
          v64 = (__CFString *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v41);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)&v274 = v65;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v41);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          *((_QWORD *)&v274 + 1) = v66;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v274, 2);
          v67 = objc_claimAutoreleasedReturnValue();
        }
        v112 = (void *)v67;

        v41 = v205;
LABEL_172:
        objc_msgSend(*(id *)(a2 + 16), "executeQuery:withParameters:", v64, v112);
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        v264.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
        v264.__r_.__value_.__l.__size_ = 3221225472;
        v264.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN16ML3ImportSession27_getExistingAlbumArtistInfoEP6NSDatax_block_invoke;
        v265 = &unk_1E5B65088;
        v268 = a2;
        v267 = buf;
        v266 = v40;
        v269 = v41;
        objc_msgSend(v113, "enumerateRowsWithBlock:", &v264);

        v39 = *(_BYTE **)&buf[8];
        v63 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
        goto LABEL_173;
      }
    }
    else
    {
      v44 = 0;
      if (!v40)
        goto LABEL_82;
    }
    if (!v44)
    {
      ML3CPPStringFromData((NSData *)&v264, v40);
      v61 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a2 + 1128), (unsigned __int8 *)&v264);
      if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v264.__r_.__value_.__l.__data_);
      v39 = *(_BYTE **)&buf[8];
      if (v61)
      {
        std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)&buf[8] + 48), *((_QWORD *)v61 + 5), *((_QWORD *)v61 + 6));
        v62 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v264.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)v264.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
          _os_log_impl(&dword_1AC149000, v62, OS_LOG_TYPE_DEFAULT, "Found album artist with grouping key=%p", (uint8_t *)&v264, 0xCu);
        }

        v39 = *(_BYTE **)&buf[8];
        v41 = v205;
      }
    }
    goto LABEL_82;
  }
LABEL_36:
  if (!v245[6])
  {
    if (objc_msgSend(v239[5], "length"))
    {
      v45 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 16777217);
      v46 = MLMediaTypeByStandardizingMediaType(v45);
      IntegerUUID = v205;
      if (!v205)
        IntegerUUID = ML3CreateIntegerUUID();
      v48 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        v49 = (std::string::__raw *)&v232[2];
        if (SHIBYTE(v232[2].__r_.__value_.__r.__words[2]) < 0)
          v49 = (std::string::__raw *)v49->__words[0];
        v50 = v227 + 6;
        if (*((char *)v227 + 71) < 0)
          v50 = (_QWORD *)*v50;
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 134218754;
        *(_QWORD *)&buf[4] = IntegerUUID;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v49;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v50;
        LOWORD(v271) = 2082;
        *(_QWORD *)((char *)&v271 + 2) = p_str;
        _os_log_impl(&dword_1AC149000, v48, OS_LOG_TYPE_DEFAULT, "creating new album_artist entry: pid=%lld, name='%{public}s', sortName='%{public}s', ulid='%{public}s'", buf, 0x2Au);
      }

      v52 = v232;
      v53 = v227;
      v54 = (std::string *)(v227 + 6);
      v55 = (std::string::__raw *)&v232[2];
      v56 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a2, (uint64_t)(v227 + 6), (uint64_t)&v232[2]);
      v58 = v57;
      v60 = operator new(0xD8uLL);
      v60[1] = 0;
      v60[2] = 0;
      *v60 = &off_1E5B51308;
      if (SHIBYTE(v52[2].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, v52[2].__r_.__value_.__l.__data_, v52[2].__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)v55->__words;
        *(_QWORD *)&buf[16] = v55->__words[2];
      }
      if (*((char *)v53 + 71) < 0)
        std::string::__init_copy_ctor_external(&v264, (const std::string::value_type *)v53[6], (std::string::size_type)v53[7]);
      else
        v264 = *v54;
      v274 = 0uLL;
      v275 = 0;
      v254 = 0;
      v253 = 0uLL;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v252, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v252 = __str;
      ML3ArtistData::ML3ArtistData((uint64_t)(v60 + 3), IntegerUUID, (__int128 *)buf, (__int128 *)&v264, &v274, &v253, v201, v59, v56, v58, 0, 0x7FFFFFFFFFFFFFFFLL, v205, (__int128 *)&v252, v204 != 0, 1, 0);
      if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v252.__r_.__value_.__l.__data_);
      if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v264.__r_.__value_.__l.__data_);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      *(_QWORD *)&v206 = v60 + 3;
      *((_QWORD *)&v206 + 1) = v60;
      std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v245 + 6), &v206);
      v68 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
      if (*((_QWORD *)&v206 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = v245[6];
      v72 = (std::__shared_weak_count *)v245[7];
      v73 = v202;
      if ((v46 & 0x400) != 0)
        v73 = 0;
      *(_QWORD *)&v274 = v73;
      std::allocate_shared[abi:ne180100]<ML3AlbumArtistImportItem,std::allocator<ML3AlbumArtistImportItem>,std::shared_ptr<ML3ArtistData> &,NSData * {__strong}&,long long,void>(&v264, v71, v72, v239 + 5, (uint64_t *)&v274);
      *(_QWORD *)buf = IntegerUUID;
      *(_OWORD *)&buf[8] = *(_OWORD *)&v264.__r_.__value_.__l.__data_;
      *(_OWORD *)&v264.__r_.__value_.__l.__data_ = 0uLL;
      std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>(a2 + 2040, IntegerUUID, (uint64_t)buf);
      v74 = *(std::__shared_weak_count **)&buf[16];
      if (*(_QWORD *)&buf[16])
      {
        v75 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      size = (std::__shared_weak_count *)v264.__r_.__value_.__l.__size_;
      if (v264.__r_.__value_.__l.__size_)
      {
        v78 = (unint64_t *)(v264.__r_.__value_.__l.__size_ + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      ML3CPPStringFromData((NSData *)&v264, v239[5]);
      *(_OWORD *)buf = *(_OWORD *)&v264.__r_.__value_.__l.__data_;
      v80 = v264.__r_.__value_.__r.__words[2];
      memset(&v264, 0, sizeof(v264));
      v82 = v245[6];
      v81 = v245[7];
      *(_QWORD *)&buf[16] = v80;
      *(_QWORD *)&buf[24] = v82;
      *(_QWORD *)&v271 = v81;
      if (v81)
      {
        v83 = (unint64_t *)(v81 + 8);
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>(a2 + 1128, buf, (uint64_t)buf);
      v85 = (std::__shared_weak_count *)v271;
      if ((_QWORD)v271)
      {
        v86 = (unint64_t *)(v271 + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v264.__r_.__value_.__l.__data_);
    }
    goto LABEL_263;
  }
  v27 = *(int *)(a2 + 32);
  PropertyIndex = ML3TrackRulesGetPropertyIndex(10, 167772163);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__specialRules + 56 * PropertyIndex + 4 * v27) != -1)
  {
    v29 = v245[6];
    v30 = HIBYTE(v232[2].__r_.__value_.__r.__words[2]);
    if ((v30 & 0x80u) == 0)
      v31 = HIBYTE(v232[2].__r_.__value_.__r.__words[2]);
    else
      v31 = v232[2].__r_.__value_.__l.__size_;
    v32 = *(unsigned __int8 *)(v29 + 31);
    v33 = (char)v32;
    if ((v32 & 0x80u) != 0)
      v32 = *(_QWORD *)(v29 + 16);
    if (v31 == v32)
    {
      p_data = (const void **)&v232[2].__r_.__value_.__l.__data_;
      v37 = *(unsigned __int8 **)(v29 + 8);
      v35 = (unsigned __int8 *)(v29 + 8);
      v36 = v37;
      if (v33 >= 0)
        v38 = v35;
      else
        v38 = v36;
      if ((v30 & 0x80) != 0)
      {
        if (!memcmp(*p_data, v38, v232[2].__r_.__value_.__l.__size_))
          goto LABEL_138;
      }
      else
      {
        if (!*((_BYTE *)&v232[2].__r_.__value_.__s + 23))
          goto LABEL_138;
        while (*(unsigned __int8 *)p_data == *v38)
        {
          p_data = (const void **)((char *)p_data + 1);
          ++v38;
          if (!--v30)
            goto LABEL_138;
        }
      }
    }
    v88 = (std::__shared_weak_count *)a3[1];
    v211[0] = *a3;
    v211[1] = v88;
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v211, 0xA000003u);
    v92 = shouldPreserveTrackProperty;
    if (!v88)
      goto LABEL_136;
    v93 = (unint64_t *)&v88->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (v94)
    {
LABEL_136:
      if ((shouldPreserveTrackProperty & 1) != 0)
        goto LABEL_138;
      goto LABEL_137;
    }
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
    if ((v92 & 1) == 0)
    {
LABEL_137:
      v95 = *(void **)(a2 + 16);
      ML3CPPBridgeString((const UInt8 *)&v232[2], 1);
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      v261[0] = v96;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v245[6]);
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      v261[1] = v97;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v261, 2);
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v95, "executeUpdate:withParameters:error:", CFSTR("UPDATE album_artist SET album_artist = ? WHERE ROWID = ?"), v98, 0);

      std::string::operator=((std::string *)(v245[6] + 8), v232 + 2);
    }
  }
LABEL_138:
  v99 = *(int *)(a2 + 32);
  v100 = ML3TrackRulesGetPropertyIndex(10, 167772169);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  v101 = v205;
  if (*(_DWORD *)(__specialRules + 56 * v100 + 4 * v99) != -1)
  {
    v102 = (uint64_t (**)())*((unsigned __int8 *)v227 + 71);
    if (*((char *)v227 + 71) < 0)
    {
      if (!v227[7])
        goto LABEL_159;
    }
    else if (!*((_BYTE *)v227 + 71))
    {
LABEL_159:
      if ((v102 & 0x80) != 0)
        v102 = v227[7];
      goto LABEL_164;
    }
    v103 = v245[6];
    v104 = v227[7];
    if ((char)v102 >= 0)
      v105 = (uint64_t (**)())*((unsigned __int8 *)v227 + 71);
    else
      v105 = v227[7];
    v106 = (uint64_t (**)())*(unsigned __int8 *)(v103 + 55);
    v107 = (char)v106;
    if ((char)v106 < 0)
      v106 = *(uint64_t (***)())(v103 + 40);
    if (v105 == v106)
    {
      v108 = (const void **)(v227 + 6);
      if (v107 >= 0)
        v109 = (unsigned __int8 *)(v103 + 32);
      else
        v109 = *(unsigned __int8 **)(v103 + 32);
      if ((v102 & 0x80) != 0)
      {
        v111 = memcmp(*v108, v109, (size_t)v227[7]);
        v102 = v104;
        if (!v111)
        {
LABEL_164:
          if (v102)
            goto LABEL_203;
          v103 = v245[6];
          LOBYTE(v107) = *(_BYTE *)(v103 + 55);
          goto LABEL_166;
        }
      }
      else
      {
        if (!*((_BYTE *)v227 + 71))
        {
LABEL_166:
          if ((v107 & 0x80) != 0)
          {
            if (!*(_QWORD *)(v103 + 40))
              goto LABEL_203;
          }
          else if (!(_BYTE)v107)
          {
            goto LABEL_203;
          }
          goto LABEL_187;
        }
        v110 = *((unsigned __int8 *)v227 + 71);
        while (*(unsigned __int8 *)v108 == *v109)
        {
          v108 = (const void **)((char *)v108 + 1);
          ++v109;
          if (!--v110)
            goto LABEL_159;
        }
      }
    }
LABEL_187:
    v123 = (std::__shared_weak_count *)a3[1];
    v210[0] = *a3;
    v210[1] = v123;
    if (v123)
    {
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
    v126 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v210, 0xA000009u);
    if (v123)
    {
      v127 = (unint64_t *)&v123->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    if ((v126 & 1) == 0)
    {
      if (*((char *)v227 + 71) < 0)
        v129 = v227[7];
      else
        v129 = (uint64_t (**)())*((unsigned __int8 *)v227 + 71);
      v130 = *(void **)(a2 + 16);
      if (v129)
        ML3CPPBridgeString((const UInt8 *)v227 + 48, 1);
      else
        objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v131 = (void *)objc_claimAutoreleasedReturnValue();
      v260[0] = v131;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v245[6]);
      v132 = (void *)objc_claimAutoreleasedReturnValue();
      v260[1] = v132;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v260, 2);
      v133 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v130, "executeUpdate:withParameters:error:", CFSTR("UPDATE album_artist SET sort_album_artist = ? WHERE ROWID = ?"), v133, 0);

      std::string::operator=((std::string *)(v245[6] + 32), (const std::string *)v227 + 2);
      v134 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a2, (uint64_t)(v227 + 6), (uint64_t)&v232[2]);
      v135 = v245[6];
      *(_QWORD *)(v135 + 112) = v134;
      *(_QWORD *)(v135 + 120) = v136;
      v137 = *(void **)(a2 + 16);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v134);
      v138 = (void *)objc_claimAutoreleasedReturnValue();
      v259[0] = v138;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(v245[6] + 120));
      v139 = (void *)objc_claimAutoreleasedReturnValue();
      v259[1] = v139;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v245[6]);
      v140 = (void *)objc_claimAutoreleasedReturnValue();
      v259[2] = v140;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v259, 3);
      v141 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v137, "executeUpdate:withParameters:error:", CFSTR("UPDATE item SET album_artist_order=?, album_artist_order_section=? WHERE album_artist_pid=?"), v141, 0);

      v101 = v205;
    }
  }
LABEL_203:
  if (v201)
  {
    v142 = v245[6];
    if (v201 != *(_QWORD *)(v142 + 104))
    {
      *(_QWORD *)(v142 + 104) = v201;
      v143 = *(void **)(a2 + 16);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:");
      v144 = (void *)objc_claimAutoreleasedReturnValue();
      v258[0] = v144;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v245[6]);
      v145 = (void *)objc_claimAutoreleasedReturnValue();
      v258[1] = v145;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v258, 2);
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v143, "executeUpdate:withParameters:error:", CFSTR("UPDATE album_artist SET store_id = ? WHERE ROWID = ?"), v146, 0);

      v101 = v205;
    }
  }
  if (v101 && v101 != *(_QWORD *)(v245[6] + 144))
  {
    v147 = *(int *)(a2 + 32);
    v148 = ML3TrackRulesGetPropertyIndex(18, 301989898);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    if (*(_DWORD *)(__albumArtistRules + 56 * v148 + 4 * v147) != -1)
    {
      v149 = (std::__shared_weak_count *)a3[1];
      v209[0] = *a3;
      v209[1] = v149;
      if (v149)
      {
        v150 = (unint64_t *)&v149->__shared_owners_;
        do
          v151 = __ldxr(v150);
        while (__stxr(v151 + 1, v150));
      }
      v152 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v209, 0x1200000Au);
      if (v149)
      {
        v153 = (unint64_t *)&v149->__shared_owners_;
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
      }
      if ((v152 & 1) == 0)
      {
        v155 = *(void **)(a2 + 16);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v205);
        v156 = (void *)objc_claimAutoreleasedReturnValue();
        v257[0] = v156;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v245[6]);
        v157 = (void *)objc_claimAutoreleasedReturnValue();
        v257[1] = v157;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v257, 2);
        v158 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v155, "executeUpdate:withParameters:error:", CFSTR("UPDATE album_artist SET sync_id = ? WHERE ROWID = ?"), v158, 0);

        *(_QWORD *)(v245[6] + 144) = v205;
      }
    }
  }
  v159 = *(int *)(a2 + 32);
  v160 = ML3TrackRulesGetPropertyIndex(18, 301989899);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__albumArtistRules + 56 * v160 + 4 * v159) == -1)
    goto LABEL_249;
  v161 = v245[6];
  v162 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v163 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v163 = __str.__r_.__value_.__l.__size_;
  v164 = *(unsigned __int8 *)(v161 + 175);
  v165 = (char)v164;
  if ((v164 & 0x80u) != 0)
    v164 = *(_QWORD *)(v161 + 160);
  if (v163 == v164)
  {
    v168 = *(unsigned __int8 **)(v161 + 152);
    v166 = (unsigned __int8 *)(v161 + 152);
    v167 = v168;
    if (v165 >= 0)
      v169 = v166;
    else
      v169 = v167;
    if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(__str.__r_.__value_.__l.__data_, v169, __str.__r_.__value_.__l.__size_))
        goto LABEL_249;
    }
    else
    {
      if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
        goto LABEL_249;
      v170 = &__str;
      while (v170->__r_.__value_.__s.__data_[0] == *v169)
      {
        v170 = (std::string *)((char *)v170 + 1);
        ++v169;
        if (!--v162)
          goto LABEL_249;
      }
    }
  }
  v171 = (std::__shared_weak_count *)a3[1];
  v208[0] = *a3;
  v208[1] = v171;
  if (v171)
  {
    v172 = (unint64_t *)&v171->__shared_owners_;
    do
      v173 = __ldxr(v172);
    while (__stxr(v173 + 1, v172));
  }
  v174 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v208, 0x1200000Bu);
  v175 = v174;
  if (!v171)
    goto LABEL_247;
  v176 = (unint64_t *)&v171->__shared_owners_;
  do
    v177 = __ldaxr(v176);
  while (__stlxr(v177 - 1, v176));
  if (v177)
  {
LABEL_247:
    if ((v174 & 1) != 0)
      goto LABEL_249;
    goto LABEL_248;
  }
  ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
  std::__shared_weak_count::__release_weak(v171);
  if ((v175 & 1) == 0)
  {
LABEL_248:
    v178 = *(void **)(a2 + 16);
    ML3CPPBridgeString((const UInt8 *)&__str, 1);
    v179 = (void *)objc_claimAutoreleasedReturnValue();
    v256[0] = v179;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v245[6]);
    v180 = (void *)objc_claimAutoreleasedReturnValue();
    v256[1] = v180;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v256, 2);
    v181 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v178, "executeUpdate:withParameters:error:", CFSTR("UPDATE album_artist SET cloud_universal_library_id = ? WHERE ROWID = ?"), v181, 0);

    std::string::operator=((std::string *)(v245[6] + 152), &__str);
  }
LABEL_249:
  if (*(unsigned __int8 *)(v245[6] + 176) != v200)
  {
    v182 = *(int *)(a2 + 32);
    v183 = ML3TrackRulesGetPropertyIndex(18, 301989901);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    if (*(_DWORD *)(__albumArtistRules + 56 * v183 + 4 * v182) != -1)
    {
      v184 = (std::__shared_weak_count *)a3[1];
      v207[0] = *a3;
      v207[1] = v184;
      if (v184)
      {
        v185 = (unint64_t *)&v184->__shared_owners_;
        do
          v186 = __ldxr(v185);
        while (__stxr(v186 + 1, v185));
      }
      v187 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v207, 0x1200000Du);
      if (v184)
      {
        v188 = (unint64_t *)&v184->__shared_owners_;
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
      if ((v187 & 1) == 0)
      {
        v190 = *(void **)(a2 + 16);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v204 != 0);
        v191 = (void *)objc_claimAutoreleasedReturnValue();
        v255[0] = v191;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v245[6]);
        v192 = (void *)objc_claimAutoreleasedReturnValue();
        v255[1] = v192;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v255, 2);
        v193 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v190, "executeUpdate:withParameters:error:", CFSTR("UPDATE album_artist SET classical_experience_available = ? WHERE ROWID = ?"), v193, 0);

        *(_BYTE *)(v245[6] + 176) = v200;
      }
    }
  }
LABEL_263:
  v194 = v245[7];
  *a1 = v245[6];
  a1[1] = v194;
  if (v194)
  {
    v195 = (unint64_t *)(v194 + 8);
    do
      v196 = __ldxr(v195);
    while (__stxr(v196 + 1, v195));
  }
LABEL_266:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v226, 8);
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v230.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v231, 8);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v238, 8);

  _Block_object_dispose(&v244, 8);
  v197 = v251;
  if (v251)
  {
    v198 = (unint64_t *)&v251->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
}

void sub_1AC361F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  char a70;
  void *a72;
  char a73;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;

  _Block_object_dispose((const void *)(v78 - 208), 8);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v74);

  if (a56 < 0)
    operator delete(__p);
  _Block_object_dispose(&a58, 8);
  if (a69 < 0)
    operator delete(a64);
  _Block_object_dispose(&a70, 8);
  if (a73 < 0)
    operator delete(a72);
  _Block_object_dispose(&STACK[0x200], 8);

  _Block_object_dispose(&STACK[0x230], 8);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x260]);
  _Unwind_Resume(a1);
}

void ML3ImportSession::_getAlbumInfo(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  std::string::size_type size;
  BOOL v10;
  std::string::size_type v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::string::size_type v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  void *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  ML3AlbumGroupingIdentifier *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  BOOL v48;
  int v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t PropertyIndex;
  uint64_t v53;
  uint64_t v54;
  std::string::size_type v55;
  uint64_t v56;
  int v57;
  const void **p_data;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  void *v63;
  _BYTE *v64;
  id v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  uint64_t IntegerUUID;
  NSObject *v72;
  std::string::__raw *v73;
  std::string::__raw *v74;
  const std::string *v75;
  const std::string *v76;
  uint64_t *v77;
  uint64_t *v78;
  std::string *v79;
  std::string::__raw *v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  unsigned __int8 *v84;
  _QWORD *v85;
  uint64_t v86;
  int v87;
  char v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  void *v97;
  std::string::size_type v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  char shouldPreserveTrackProperty;
  char v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::string::size_type v137;
  uint64_t v138;
  std::string::size_type v139;
  std::string::size_type v140;
  uint64_t v141;
  int v142;
  const void **v143;
  unsigned __int8 *v144;
  uint64_t v145;
  BOOL v146;
  void *v147;
  uint64_t v148;
  void *v149;
  void *v150;
  void *v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  int v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  char v165;
  char v166;
  unint64_t *v167;
  unint64_t v168;
  std::string::size_type v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t i;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t j;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  char v197;
  unint64_t *v198;
  unint64_t v199;
  void *v200;
  uint64_t k;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  char v208;
  unint64_t *v209;
  unint64_t v210;
  _QWORD *v211;
  unint64_t v212;
  char *v213;
  _QWORD *v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  BOOL v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  char v230;
  char v231;
  unint64_t *v232;
  unint64_t v233;
  NSObject *v234;
  uint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  char *v238;
  _QWORD *v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  char v256;
  unint64_t *v257;
  unint64_t v258;
  NSObject *v259;
  uint64_t v260;
  _QWORD *v261;
  char *v262;
  unint64_t v263;
  _QWORD *v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  char v279;
  unint64_t *v280;
  unint64_t v281;
  void *v282;
  uint64_t m;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  char v290;
  unint64_t *v291;
  unint64_t v292;
  void *v293;
  uint64_t n;
  uint64_t v295;
  uint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  char v300;
  char v301;
  unint64_t *v302;
  unint64_t v303;
  void *v304;
  uint64_t ii;
  uint64_t v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  void *v312;
  __int16 v313;
  char v314;
  uint64_t *v315;
  uint64_t *v316;
  void *v317;
  uint64_t v318;
  void *v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  unint64_t v325;
  uint64_t v327;
  _QWORD v329[2];
  _QWORD v330[2];
  _QWORD v331[2];
  _QWORD v332[2];
  _QWORD v333[2];
  _QWORD v334[2];
  _QWORD v335[2];
  _QWORD v336[2];
  _QWORD v337[2];
  __int128 v338;
  uint64_t v339;
  std::__shared_weak_count *v340;
  _QWORD v341[4];
  id v342;
  uint64_t *v343;
  uint64_t *v344;
  uint64_t *v345;
  _QWORD *v346;
  uint64_t *v347;
  uint64_t *v348;
  uint64_t *v349;
  uint64_t *v350;
  _BYTE *v351;
  uint64_t *v352;
  uint64_t *v353;
  uint64_t *v354;
  uint64_t *v355;
  uint64_t *v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  std::__shared_weak_count *v361;
  uint64_t v362;
  char v363;
  char v364;
  char v365;
  char v366;
  char v367;
  char v368;
  char v369;
  char v370;
  uint64_t v371;
  char *v372;
  uint64_t v373;
  BOOL v374;
  std::string v375;
  std::string v376;
  uint64_t v377;
  unsigned __int8 *v378;
  uint64_t v379;
  BOOL v380;
  uint64_t v381;
  uint64_t *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t *v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD v405[3];
  char v406;
  uint64_t v407;
  __int128 *v408;
  uint64_t v409;
  __n128 (*v410)(__n128 *, __n128 *);
  void (*v411)(uint64_t);
  uint64_t v412;
  std::string __p;
  uint64_t v414;
  const std::string *v415;
  uint64_t v416;
  __n128 (*v417)(__n128 *, __n128 *);
  void (*v418)(uint64_t);
  uint64_t v419;
  std::string v420;
  uint64_t v421;
  const std::string *v422;
  uint64_t v423;
  __n128 (*v424)(__n128 *, __n128 *);
  void (*v425)(uint64_t);
  uint64_t v426;
  std::string v427;
  uint64_t v428;
  uint64_t *v429;
  uint64_t v430;
  uint64_t (*v431)(uint64_t, uint64_t);
  void (*v432)(uint64_t);
  id v433;
  uint64_t v434;
  uint64_t *v435;
  uint64_t v436;
  __n128 (*v437)(__n128 *, __n128 *);
  uint64_t (*v438)(uint64_t);
  const char *v439;
  uint64_t v440;
  std::__shared_weak_count *v441;
  uint64_t v442;
  std::string v443;
  void *v444;
  id v445;
  _BYTE *v446;
  uint64_t v447;
  uint64_t v448;
  _BYTE buf[32];
  __int128 v450;
  uint64_t v451;
  std::__shared_weak_count *v452;
  int v453;
  _BYTE v454[8];
  uint64_t v455;
  _QWORD v456[3];
  _QWORD v457[2];
  _QWORD v458[2];
  void *v459;
  void *v460;
  __int128 v461;
  __int128 v462;
  _QWORD v463[4];

  v463[1] = *MEMORY[0x1E0C80C00];
  v442 = a4;
  v434 = 0;
  v435 = &v434;
  v436 = 0x4012000000;
  v437 = __Block_byref_object_copy__256;
  v438 = __Block_byref_object_dispose__257;
  v441 = 0;
  v439 = "";
  v440 = 0;
  v428 = 0;
  v429 = &v428;
  v430 = 0x3032000000;
  v431 = __Block_byref_object_copy__212;
  v432 = __Block_byref_object_dispose__213;
  v433 = 0;
  v421 = 0;
  v422 = (const std::string *)&v421;
  v423 = 0x4812000000;
  v424 = __Block_byref_object_copy__214;
  v425 = __Block_byref_object_dispose__215;
  v426 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a3 + 24))(buf, *a3, 167772164);
  if (SBYTE7(v450) < 0)
  {
    std::string::__init_copy_ctor_external(&v427, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if (SBYTE7(v450) < 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    *(_OWORD *)&v427.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[16];
    v427.__r_.__value_.__r.__words[2] = v450;
  }
  v414 = 0;
  v415 = (const std::string *)&v414;
  v416 = 0x4812000000;
  v417 = __Block_byref_object_copy__214;
  v418 = __Block_byref_object_dispose__215;
  v419 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a3 + 24))(buf, *a3, 167772170);
  if (SBYTE7(v450) < 0)
  {
    std::string::__init_copy_ctor_external(&v420, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if (SBYTE7(v450) < 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    *(_OWORD *)&v420.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[16];
    v420.__r_.__value_.__r.__words[2] = v450;
  }
  v407 = 0;
  v408 = (__int128 *)&v407;
  v409 = 0x4812000000;
  v410 = __Block_byref_object_copy__214;
  v411 = __Block_byref_object_dispose__215;
  v412 = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a3 + 24))(buf, *a3, 100663323);
  if (SBYTE7(v450) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if (SBYTE7(v450) < 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[16];
    __p.__r_.__value_.__r.__words[2] = v450;
  }
  v405[0] = 0;
  v405[1] = v405;
  v405[2] = 0x2020000000;
  v406 = 0;
  v6 = *a3;
  if (*(_BYTE *)(*a3 + 17))
  {
    v7 = 1;
  }
  else
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 56))(v6, 167772185);
    v6 = *a3;
  }
  v406 = v7;
  v401 = 0;
  v402 = &v401;
  v403 = 0x2020000000;
  v404 = 0;
  v404 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, 167772185);
  v397 = 0;
  v398 = &v397;
  v399 = 0x2020000000;
  v400 = 0;
  v400 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 167772186);
  v393 = 0;
  v394 = &v393;
  v395 = 0x2020000000;
  v396 = 0;
  v396 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 167772182);
  v389 = 0;
  v390 = &v389;
  v391 = 0x2020000000;
  v392 = 0;
  v392 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 117440516);
  v385 = 0;
  v386 = &v385;
  v387 = 0x2020000000;
  v388 = 0;
  v388 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 33554438);
  v381 = 0;
  v382 = &v381;
  v383 = 0x2020000000;
  v384 = 0;
  v384 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 100663300);
  v377 = 0;
  v378 = (unsigned __int8 *)&v377;
  v379 = 0x2020000000;
  v380 = 0;
  v380 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 16777246) != 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a3 + 24))(buf, *a3, 33554462);
  if (SBYTE7(v450) < 0)
  {
    std::string::__init_copy_ctor_external(&v376, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if (SBYTE7(v450) < 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    *(_OWORD *)&v376.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[16];
    v376.__r_.__value_.__r.__words[2] = v450;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a3 + 24))(buf, *a3, 33554451);
  if (SBYTE7(v450) < 0)
  {
    std::string::__init_copy_ctor_external(&v375, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
    *(_QWORD *)buf = off_1E5B4D010;
    if (SBYTE7(v450) < 0)
      operator delete(*(void **)&buf[16]);
  }
  else
  {
    *(_OWORD *)&v375.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[16];
    v375.__r_.__value_.__r.__words[2] = v450;
  }
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 16777248);
  v371 = 0;
  v372 = (char *)&v371;
  v373 = 0x2020000000;
  size = HIBYTE(v376.__r_.__value_.__r.__words[2]);
  if ((v376.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v376.__r_.__value_.__l.__size_;
  if (size)
  {
    v10 = 1;
  }
  else if (v8)
  {
    v11 = HIBYTE(v375.__r_.__value_.__r.__words[2]);
    if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = v375.__r_.__value_.__l.__size_;
    v10 = v11 != 0;
  }
  else
  {
    v10 = 0;
  }
  v374 = v10;
  if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 33554462) & 1) != 0)
    v321 = 1;
  else
    v321 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 16777248);
  v327 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 167772175);
  v323 = *(_QWORD *)(*a3 + 8);
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 285212693);
  v324 = v12 != 0;
  v13 = (_BYTE *)*a3;
  v320 = v12;
  if (*(_BYTE *)(*a3 + 16) && !v13[17])
  {
    v21 = *(void **)(a2 + 16);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v323);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v460 = v22;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v460, 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "executeQuery:withParameters:", CFSTR("SELECT album_pid FROM item WHERE ROWID = ?"), v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v24, "objectForFirstRowAndColumn");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v25, "longLongValue"))
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      *(_QWORD *)&buf[24] = 0;
      v317 = v25;
      v26 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 167772164);
      v27 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 167772170);
      v28 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 167772186);
      v29 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 167772182);
      v314 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 16777246);
      v30 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 33554438);
      v31 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 100663300);
      v32 = *(void **)(a2 + 16);
      v459 = v317;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v459, 1);
      v312 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "executeQuery:withParameters:", CFSTR("SELECT album, sort_album, feed_url, user_rating, liked_state, all_compilations, season_number, representative_item_pid, grouping_key, album_year, contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available, liked_state_changed_date, store_id, cloud_library_id, album_artist_pid FROM album WHERE album_pid=?"));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v341[0] = MEMORY[0x1E0C809B0];
      v341[1] = 3321888768;
      v341[2] = ___ZN16ML3ImportSession13_getAlbumInfoENSt3__110shared_ptrI13ML3ImportItemEEx_block_invoke;
      v341[3] = &unk_1E5B52640;
      v363 = v26;
      v364 = v27;
      v343 = &v421;
      v344 = &v414;
      v345 = &v407;
      v346 = v405;
      v365 = v29;
      v347 = &v401;
      v348 = &v393;
      v366 = v314;
      v349 = &v377;
      v350 = &v389;
      v367 = v30;
      v351 = buf;
      v352 = &v385;
      v368 = v321;
      v369 = v28;
      v353 = &v371;
      v354 = &v397;
      v370 = v31;
      v355 = &v381;
      v356 = &v428;
      v358 = a2;
      v359 = a4;
      v34 = (std::__shared_weak_count *)a3[1];
      v360 = *a3;
      v361 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(p_shared_owners);
        while (__stxr(v36 + 1, p_shared_owners));
      }
      v357 = &v434;
      v25 = v317;
      v342 = v317;
      v362 = v323;
      objc_msgSend(v33, "enumerateRowsWithBlock:", v341);

      v37 = v361;
      if (v361)
      {
        v38 = (unint64_t *)&v361->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      _Block_object_dispose(buf, 8);
    }
    else
    {
      v50 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v323;
        _os_log_impl(&dword_1AC149000, v50, OS_LOG_TYPE_ERROR, "No existing album PID for update item %lli", buf, 0xCu);
      }

    }
  }
  else
  {
    v14 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v13 + 32))(v13, 16777217);
    v15 = MLMediaTypeByStandardizingMediaType(v14);
    if (v390[3]
      || (SHIBYTE(v422[2].__r_.__value_.__r.__words[2]) < 0
        ? (v20 = v422[2].__r_.__value_.__l.__size_)
        : (v20 = HIBYTE(v422[2].__r_.__value_.__r.__words[2])),
          (v15 & 0x10042) != 0 ? (v48 = a4 == 0) : (v48 = 1),
          v48 ? (v49 = 0) : (v49 = 1),
          v20 || v49))
    {
      v17 = *a3;
      v16 = (std::__shared_weak_count *)a3[1];
      v339 = *a3;
      v340 = v16;
      if (v16)
      {
        v18 = (unint64_t *)&v16->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(buf, v17, 167772164);
      if (SBYTE7(v450) < 0)
      {
        std::string::__init_copy_ctor_external(&v443, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
      }
      else
      {
        *(_OWORD *)&v443.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[16];
        v443.__r_.__value_.__r.__words[2] = v450;
      }
      ML3CPPBridgeString((const UInt8 *)&v443, 1);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v443.__r_.__value_.__l.__data_);
      *(_QWORD *)buf = off_1E5B4D010;
      if (SBYTE7(v450) < 0)
        operator delete(*(void **)&buf[16]);
      objc_msgSend(*(id *)(a2 + 8), "groupingKeyForString:", v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(buf, v17, 100663323);
      if (SBYTE7(v450) < 0)
      {
        std::string::__init_copy_ctor_external(&v443, *(const std::string::value_type **)&buf[16], *(std::string::size_type *)&buf[24]);
      }
      else
      {
        *(_OWORD *)&v443.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[16];
        v443.__r_.__value_.__r.__words[2] = v450;
      }
      ML3CPPBridgeString((const UInt8 *)&v443, 1);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v443.__r_.__value_.__l.__data_);
      *(_QWORD *)buf = off_1E5B4D010;
      if (SBYTE7(v450) < 0)
        operator delete(*(void **)&buf[16]);
      v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 32))(v17, 117440516);
      v44 = -[ML3AlbumGroupingIdentifier initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:]([ML3AlbumGroupingIdentifier alloc], "initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:", a4, v41, v42, v43, (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 32))(v17, 16777246) != 0);

      v45 = (void *)v429[5];
      v429[5] = (uint64_t)v44;

      if (v16)
      {
        v46 = (unint64_t *)&v16->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  if (!v435[6])
  {
    objc_msgSend((id)v429[5], "groupingKey");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v63, "length") || objc_msgSend((id)v429[5], "albumArtistPersistentID"))
    {

    }
    else
    {
      v146 = objc_msgSend((id)v429[5], "seasonNumber") == 0;

      if (v146)
        goto LABEL_88;
    }
    v64 = buf;
    v65 = (id)v429[5];
    v66 = v65;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4012000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__256;
    *(_QWORD *)&v450 = __Block_byref_object_dispose__257;
    v452 = 0;
    *((_QWORD *)&v450 + 1) = "";
    v451 = 0;
    if (v327)
    {
      v67 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(a2 + 1008), v327);
      if (v67)
      {
        std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](&v451, v67[3], v67[4]);
        v64 = *(_BYTE **)&buf[8];
        v68 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
        if (!v66)
          goto LABEL_171;
      }
      else
      {
        v68 = 0;
        v64 = buf;
        if (!v66)
        {
LABEL_171:
          v115 = *((_QWORD *)v64 + 6);
          if (!v115)
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v66, "albumArtistPersistentID"));
            v319 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 4);
            v116 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(CFSTR("SELECT album, sort_album, feed_url, rowid, grouping_key, album_artist_pid, season_number, all_compilations, user_rating, liked_state, album_year, (CASE WHEN season_number > 0 THEN season_number ELSE IFNULL(sort_album, album) END), contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available, store_id, liked_state_changed_date, cloud_library_id FROM album "), "stringByAppendingString:", CFSTR("WHERE "));
            v117 = (void *)objc_claimAutoreleasedReturnValue();
            v118 = v117;
            if (v327)
            {
              objc_msgSend(v117, "stringByAppendingString:", CFSTR("(ROWID=? OR sync_id=?) OR"));
              v119 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v327);
              v120 = (void *)objc_claimAutoreleasedReturnValue();
              *(_QWORD *)&v462 = v120;
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v327);
              v121 = (void *)objc_claimAutoreleasedReturnValue();
              *((_QWORD *)&v462 + 1) = v121;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v462, 2);
              v122 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v116, "addObjectsFromArray:", v122);

            }
            else
            {
              v119 = v117;
            }
            objc_msgSend(v66, "groupingKey");
            v147 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v147, "length"))
            {
              objc_msgSend(v119, "stringByAppendingString:", CFSTR("(grouping_key IN (?) AND album_artist_pid = ?)"));
              v148 = objc_claimAutoreleasedReturnValue();

              *(_QWORD *)&v461 = v147;
              *((_QWORD *)&v461 + 1) = v319;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v461, 2);
            }
            else
            {
              objc_msgSend(v119, "stringByAppendingString:", CFSTR("(grouping_key IS NULL AND album_artist_pid = ?)"));
              v148 = objc_claimAutoreleasedReturnValue();

              *(_QWORD *)&v461 = v319;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v461, 1);
            }
            v149 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v116, "addObjectsFromArray:", v149);
            v150 = (void *)v148;

            objc_msgSend(*(id *)(a2 + 16), "executeQuery:withParameters:", v148, v116);
            v151 = (void *)objc_claimAutoreleasedReturnValue();
            v443.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
            v443.__r_.__value_.__l.__size_ = 3221225472;
            v443.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN16ML3ImportSession21_getExistingAlbumInfoEP26ML3AlbumGroupingIdentifierx_block_invoke;
            v444 = &unk_1E5B65088;
            v447 = a2;
            v446 = buf;
            v445 = v66;
            v448 = v327;
            objc_msgSend(v151, "enumerateRowsWithBlock:", &v443);

            v64 = *(_BYTE **)&buf[8];
            v115 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
          }
          v152 = *((_QWORD *)v64 + 7);
          *(_QWORD *)&v338 = v115;
          *((_QWORD *)&v338 + 1) = v152;
          if (v152)
          {
            v153 = (unint64_t *)(v152 + 8);
            do
              v154 = __ldxr(v153);
            while (__stxr(v154 + 1, v153));
          }
          _Block_object_dispose(buf, 8);
          v155 = v452;
          if (v452)
          {
            v156 = (unint64_t *)&v452->__shared_owners_;
            do
              v157 = __ldaxr(v156);
            while (__stlxr(v157 - 1, v156));
            if (!v157)
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
            }
          }

          std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v435 + 6), &v338);
          v158 = (std::__shared_weak_count *)*((_QWORD *)&v338 + 1);
          if (*((_QWORD *)&v338 + 1))
          {
            v159 = (unint64_t *)(*((_QWORD *)&v338 + 1) + 8);
            do
              v160 = __ldaxr(v159);
            while (__stlxr(v160 - 1, v159));
            if (!v160)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }
          goto LABEL_88;
        }
      }
    }
    else
    {
      v68 = 0;
      if (!v65)
        goto LABEL_171;
    }
    if (!v68)
    {
      objc_msgSend(v66, "keyValue");
      v113 = (void *)objc_claimAutoreleasedReturnValue();
      ML3CPPStringFromData((NSData *)&v443, v113);
      v114 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(a2 + 1248), (unsigned __int8 *)&v443);
      if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v443.__r_.__value_.__l.__data_);

      v64 = *(_BYTE **)&buf[8];
      if (v114)
      {
        std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)&buf[8] + 48), *((_QWORD *)v114 + 5), *((_QWORD *)v114 + 6));
        v64 = *(_BYTE **)&buf[8];
      }
    }
    goto LABEL_171;
  }
LABEL_88:
  if (!v435[6])
  {
    v69 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, 16777217);
    v70 = MLMediaTypeByStandardizingMediaType(v69);
    IntegerUUID = v327;
    if (!v327)
      IntegerUUID = ML3CreateIntegerUUID();
    objc_msgSend((id)v429[5], "groupingKey");
    *(_QWORD *)&v338 = objc_claimAutoreleasedReturnValue();
    v72 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      v73 = (std::string::__raw *)&v422[2];
      if (SHIBYTE(v422[2].__r_.__value_.__r.__words[2]) < 0)
        v73 = (std::string::__raw *)v73->__words[0];
      v74 = (std::string::__raw *)&v415[2];
      if (SHIBYTE(v415[2].__r_.__value_.__r.__words[2]) < 0)
        v74 = (std::string::__raw *)v74->__words[0];
      *(_DWORD *)buf = 134218754;
      *(_QWORD *)&buf[4] = IntegerUUID;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v73;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = v74;
      LOWORD(v450) = 2048;
      *(_QWORD *)((char *)&v450 + 2) = v442;
      _os_log_impl(&dword_1AC149000, v72, OS_LOG_TYPE_DEFAULT, "creating new album entry: pid=%lld, name='%{public}s', sortName='%{public}s', artistId=%lld", buf, 0x2Au);
    }
    v313 = v70;

    v325 = IntegerUUID;
    v75 = v422;
    v76 = v415;
    v77 = v402;
    v78 = v398;
    v315 = v386;
    v316 = v394;
    v79 = (std::string *)&v415[2];
    v80 = (std::string::__raw *)&v422[2];
    v322 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a2, (uint64_t)&v415[2], (uint64_t)&v422[2]);
    v318 = v81;
    v82 = v372;
    v83 = v382;
    v84 = v378;
    v85 = operator new(0xB0uLL);
    v85[1] = 0;
    v85[2] = 0;
    *v85 = &off_1E5B51298;
    if (SHIBYTE(v75[2].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)buf, v75[2].__r_.__value_.__l.__data_, v75[2].__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)v80->__words;
      *(_QWORD *)&buf[16] = v80->__words[2];
    }
    v86 = a2;
    if (SHIBYTE(v76[2].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v443, v76[2].__r_.__value_.__l.__data_, v76[2].__r_.__value_.__l.__size_);
    else
      v443 = *v79;
    v87 = *((_DWORD *)v77 + 6);
    v88 = v78[3] != 0;
    v89 = *((_DWORD *)v316 + 6);
    v90 = *((_DWORD *)v315 + 6);
    v91 = v82[24];
    v92 = v83[3];
    v463[0] = 0;
    v462 = 0uLL;
    ML3AlbumData::ML3AlbumData((uint64_t)(v85 + 3), v325, (__int128 *)buf, (__int128 *)&v443, v87, v88, v89, v90, v322, v318, v91, v327, v92, &v462, v84[24], v320 != 0, 0);
    if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v443.__r_.__value_.__l.__data_);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    *(_QWORD *)&v461 = v85 + 3;
    *((_QWORD *)&v461 + 1) = v85;
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)(v435 + 6), &v461);
    v93 = (std::__shared_weak_count *)*((_QWORD *)&v461 + 1);
    if (*((_QWORD *)&v461 + 1))
    {
      v94 = (unint64_t *)(*((_QWORD *)&v461 + 1) + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    v96 = (void *)v429[5];
    if (v96)
    {
      objc_msgSend(v96, "keyValue");
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      ML3CPPStringFromData((NSData *)&v443, v97);
      *(_OWORD *)buf = *(_OWORD *)&v443.__r_.__value_.__l.__data_;
      v98 = v443.__r_.__value_.__r.__words[2];
      memset(&v443, 0, sizeof(v443));
      v100 = v435[6];
      v99 = v435[7];
      *(_QWORD *)&buf[16] = v98;
      *(_QWORD *)&buf[24] = v100;
      *(_QWORD *)&v450 = v99;
      if (v99)
      {
        v101 = (unint64_t *)(v99 + 8);
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>(a2 + 1248, buf, (uint64_t)buf);
      v103 = (std::__shared_weak_count *)v450;
      if ((_QWORD)v450)
      {
        v104 = (unint64_t *)(v450 + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v443.__r_.__value_.__l.__data_);

      v86 = a2;
    }
    v106 = v323;
    if ((v313 & 0x400) != 0)
      v106 = 0;
    *(_QWORD *)&v462 = v106;
    std::allocate_shared[abi:ne180100]<ML3AlbumImportItem,std::allocator<ML3AlbumImportItem>,std::shared_ptr<ML3AlbumData> &,std::string &,BOOL &,NSData * {__strong}&,long long,long long &,long long &,BOOL &,void>(&v443, v435[6], (std::__shared_weak_count *)v435[7], v408 + 3, v378 + 24, (void **)&v338, (uint64_t *)&v462, &v442, v390 + 3, v372 + 24);
    *(_QWORD *)buf = v325;
    *(_OWORD *)&buf[8] = *(_OWORD *)&v443.__r_.__value_.__l.__data_;
    *(_OWORD *)&v443.__r_.__value_.__l.__data_ = 0uLL;
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ImportItem>>>(v86 + 2248, v325, (uint64_t)buf);
    v107 = *(std::__shared_weak_count **)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      v108 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v110 = (std::__shared_weak_count *)v443.__r_.__value_.__l.__size_;
    if (v443.__r_.__value_.__l.__size_)
    {
      v111 = (unint64_t *)(v443.__r_.__value_.__l.__size_ + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }

    goto LABEL_455;
  }
  v51 = *(int *)(a2 + 32);
  PropertyIndex = ML3TrackRulesGetPropertyIndex(10, 167772164);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__specialRules + 56 * PropertyIndex + 4 * v51) != -1)
  {
    v53 = v435[6];
    v54 = HIBYTE(v422[2].__r_.__value_.__r.__words[2]);
    if ((v54 & 0x80u) == 0)
      v55 = HIBYTE(v422[2].__r_.__value_.__r.__words[2]);
    else
      v55 = v422[2].__r_.__value_.__l.__size_;
    v56 = *(unsigned __int8 *)(v53 + 31);
    v57 = (char)v56;
    if ((v56 & 0x80u) != 0)
      v56 = *(_QWORD *)(v53 + 16);
    if (v55 == v56)
    {
      p_data = (const void **)&v422[2].__r_.__value_.__l.__data_;
      v61 = *(unsigned __int8 **)(v53 + 8);
      v59 = (unsigned __int8 *)(v53 + 8);
      v60 = v61;
      if (v57 >= 0)
        v62 = v59;
      else
        v62 = v60;
      if ((v54 & 0x80) != 0)
      {
        if (!memcmp(*p_data, v62, v422[2].__r_.__value_.__l.__size_))
          goto LABEL_184;
      }
      else
      {
        if (!*((_BYTE *)&v422[2].__r_.__value_.__s + 23))
          goto LABEL_184;
        while (*(unsigned __int8 *)p_data == *v62)
        {
          p_data = (const void **)((char *)p_data + 1);
          ++v62;
          if (!--v54)
            goto LABEL_184;
        }
      }
    }
    v123 = (std::__shared_weak_count *)a3[1];
    v337[0] = *a3;
    v337[1] = v123;
    if (v123)
    {
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldxr(v124);
      while (__stxr(v125 + 1, v124));
    }
    shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v337, 0xA000004u);
    v127 = shouldPreserveTrackProperty;
    if (!v123)
      goto LABEL_182;
    v128 = (unint64_t *)&v123->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (v129)
    {
LABEL_182:
      if ((shouldPreserveTrackProperty & 1) != 0)
        goto LABEL_184;
      goto LABEL_183;
    }
    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
    std::__shared_weak_count::__release_weak(v123);
    if ((v127 & 1) == 0)
    {
LABEL_183:
      v130 = *(void **)(a2 + 16);
      ML3CPPBridgeString((const UInt8 *)&v422[2], 1);
      v131 = (void *)objc_claimAutoreleasedReturnValue();
      v458[0] = v131;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v435[6]);
      v132 = (void *)objc_claimAutoreleasedReturnValue();
      v458[1] = v132;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v458, 2);
      v133 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v130, "executeUpdate:withParameters:error:", CFSTR("UPDATE album SET album = ? WHERE ROWID = ?"), v133, 0);

      std::string::operator=((std::string *)(v435[6] + 8), v422 + 2);
    }
  }
LABEL_184:
  v134 = *(int *)(a2 + 32);
  v135 = ML3TrackRulesGetPropertyIndex(10, 167772170);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  v136 = a2;
  if (*(_DWORD *)(__specialRules + 56 * v135 + 4 * v134) == -1)
    goto LABEL_253;
  v137 = HIBYTE(v415[2].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v415[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v415[2].__r_.__value_.__l.__size_)
      goto LABEL_205;
  }
  else if (!*((_BYTE *)&v415[2].__r_.__value_.__s + 23))
  {
LABEL_205:
    if ((v137 & 0x80) != 0)
      v137 = v415[2].__r_.__value_.__l.__size_;
    goto LABEL_230;
  }
  v138 = v435[6];
  v139 = v415[2].__r_.__value_.__l.__size_;
  if ((v137 & 0x80u) == 0)
    v140 = HIBYTE(v415[2].__r_.__value_.__r.__words[2]);
  else
    v140 = v415[2].__r_.__value_.__l.__size_;
  v141 = *(unsigned __int8 *)(v138 + 55);
  v142 = (char)v141;
  if ((v141 & 0x80u) != 0)
    v141 = *(_QWORD *)(v138 + 40);
  if (v140 == v141)
  {
    v143 = (const void **)&v415[2].__r_.__value_.__l.__data_;
    if (v142 >= 0)
      v144 = (unsigned __int8 *)(v138 + 32);
    else
      v144 = *(unsigned __int8 **)(v138 + 32);
    if ((v137 & 0x80) != 0)
    {
      v161 = memcmp(*v143, v144, v415[2].__r_.__value_.__l.__size_);
      v137 = v139;
      if (!v161)
      {
LABEL_230:
        if (v137)
          goto LABEL_253;
        v138 = v435[6];
        LOBYTE(v142) = *(_BYTE *)(v138 + 55);
LABEL_232:
        if ((v142 & 0x80) != 0)
        {
          if (!*(_QWORD *)(v138 + 40))
            goto LABEL_253;
        }
        else if (!(_BYTE)v142)
        {
          goto LABEL_253;
        }
      }
    }
    else
    {
      if (!*((_BYTE *)&v415[2].__r_.__value_.__s + 23))
        goto LABEL_232;
      v145 = HIBYTE(v415[2].__r_.__value_.__r.__words[2]);
      while (*(unsigned __int8 *)v143 == *v144)
      {
        v143 = (const void **)((char *)v143 + 1);
        ++v144;
        if (!--v145)
          goto LABEL_205;
      }
    }
  }
  v162 = (std::__shared_weak_count *)a3[1];
  v336[0] = *a3;
  v336[1] = v162;
  if (v162)
  {
    v163 = (unint64_t *)&v162->__shared_owners_;
    do
      v164 = __ldxr(v163);
    while (__stxr(v164 + 1, v163));
  }
  v165 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v336, 0xA00000Au);
  v166 = v165;
  if (!v162)
    goto LABEL_243;
  v167 = (unint64_t *)&v162->__shared_owners_;
  do
    v168 = __ldaxr(v167);
  while (__stlxr(v168 - 1, v167));
  if (!v168)
  {
    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
    std::__shared_weak_count::__release_weak(v162);
    if ((v166 & 1) != 0)
      goto LABEL_253;
  }
  else
  {
LABEL_243:
    if ((v165 & 1) != 0)
      goto LABEL_253;
  }
  if (SHIBYTE(v415[2].__r_.__value_.__r.__words[2]) < 0)
    v169 = v415[2].__r_.__value_.__l.__size_;
  else
    v169 = HIBYTE(v415[2].__r_.__value_.__r.__words[2]);
  v170 = *(void **)(a2 + 16);
  if (v169)
    ML3CPPBridgeString((const UInt8 *)&v415[2], 1);
  else
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v171 = (void *)objc_claimAutoreleasedReturnValue();
  v457[0] = v171;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v435[6]);
  v172 = (void *)objc_claimAutoreleasedReturnValue();
  v457[1] = v172;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v457, 2);
  v173 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v170, "executeUpdate:withParameters:error:", CFSTR("UPDATE album SET sort_album = ? WHERE ROWID = ?"), v173, 0);

  std::string::operator=((std::string *)(v435[6] + 32), v415 + 2);
  v174 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(a2, (uint64_t)&v415[2], (uint64_t)&v422[2]);
  v175 = v435[6];
  *(_QWORD *)(v175 + 72) = v174;
  *(_QWORD *)(v175 + 80) = v176;
  v177 = *(void **)(a2 + 16);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v174);
  v178 = (void *)objc_claimAutoreleasedReturnValue();
  v456[0] = v178;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(v435[6] + 80));
  v179 = (void *)objc_claimAutoreleasedReturnValue();
  v456[1] = v179;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)v435[6]);
  v180 = (void *)objc_claimAutoreleasedReturnValue();
  v456[2] = v180;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v456, 3);
  v181 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v177, "executeUpdate:withParameters:error:", CFSTR("UPDATE item SET album_order=?, album_order_section=? WHERE album_pid=?"), v181, 0);

  v136 = a2;
LABEL_253:
  v182 = v435[6];
  if (v402[3] != *(_DWORD *)(v182 + 56))
  {
    v183 = *(int *)(v136 + 32);
    v184 = ML3TrackRulesGetPropertyIndex(10, 167772185);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    v136 = a2;
    if (*(_DWORD *)(__specialRules + 56 * v184 + 4 * v183) == -1)
    {
      v182 = v435[6];
    }
    else
    {
      v185 = *(void **)(a2 + 16);
      std::string::basic_string[abi:ne180100]<0>(&v443, "UPDATE album SET user_rating = ? WHERE ROWID = ?");
      *(_QWORD *)buf = v402[3];
      *(_DWORD *)&buf[24] = 0;
      LOBYTE(v450) = 1;
      *((_QWORD *)&v450 + 1) = *(_QWORD *)v435[6];
      v453 = 0;
      v454[0] = 1;
      v463[0] = 0;
      v462 = 0uLL;
      *(_QWORD *)&v461 = &v462;
      BYTE8(v461) = 0;
      *(_QWORD *)&v462 = operator new(0x50uLL);
      *((_QWORD *)&v462 + 1) = v462;
      v463[0] = v462 + 80;
      *((_QWORD *)&v462 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)v463, (uint64_t)buf, (uint64_t)&v455, v462);
      ML3ImportExecuteVariadicStatement(v185, (const UInt8 *)&v443, (uint64_t *)&v462);
      *(_QWORD *)&v461 = &v462;
      std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v461);
      for (i = 0; i != -80; i -= 40)
      {
        if (v454[i])
          std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v450 + i + 8);
      }
      if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v443.__r_.__value_.__l.__data_);
      v182 = v435[6];
      *(_DWORD *)(v182 + 56) = v402[3];
    }
  }
  if (v398[3] != *(unsigned __int8 *)(v182 + 60))
  {
    v187 = *(int *)(v136 + 32);
    v188 = ML3TrackRulesGetPropertyIndex(10, 167772186);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    v136 = a2;
    if (*(_DWORD *)(__specialRules + 56 * v188 + 4 * v187) != -1)
    {
      v189 = *(void **)(a2 + 16);
      std::string::basic_string[abi:ne180100]<0>(&v443, "UPDATE album SET user_rating_is_derived = ? WHERE ROWID = ?");
      *(_QWORD *)buf = v398[3];
      *(_DWORD *)&buf[24] = 0;
      LOBYTE(v450) = 1;
      *((_QWORD *)&v450 + 1) = *(_QWORD *)v435[6];
      v453 = 0;
      v454[0] = 1;
      v463[0] = 0;
      v462 = 0uLL;
      *(_QWORD *)&v461 = &v462;
      BYTE8(v461) = 0;
      *(_QWORD *)&v462 = operator new(0x50uLL);
      *((_QWORD *)&v462 + 1) = v462;
      v463[0] = v462 + 80;
      *((_QWORD *)&v462 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)v463, (uint64_t)buf, (uint64_t)&v455, v462);
      ML3ImportExecuteVariadicStatement(v189, (const UInt8 *)&v443, (uint64_t *)&v462);
      *(_QWORD *)&v461 = &v462;
      std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v461);
      for (j = 0; j != -80; j -= 40)
      {
        if (v454[j])
          std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v450 + j + 8);
      }
      if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v443.__r_.__value_.__l.__data_);
      *(_BYTE *)(v435[6] + 60) = v398[3] != 0;
    }
  }
  v191 = *(int *)(v136 + 32);
  v192 = ML3TrackRulesGetPropertyIndex(10, 167772182);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  v193 = a2;
  if (*(_DWORD *)(__specialRules + 56 * v192 + 4 * v191) != -1)
  {
    v193 = a2;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 167772182))
    {
      if (v394[3] != *(_DWORD *)(v435[6] + 64))
      {
        v194 = (std::__shared_weak_count *)a3[1];
        v335[0] = *a3;
        v335[1] = v194;
        if (v194)
        {
          v195 = (unint64_t *)&v194->__shared_owners_;
          do
            v196 = __ldxr(v195);
          while (__stxr(v196 + 1, v195));
        }
        v197 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v335, 0xA000016u);
        if (v194)
        {
          v198 = (unint64_t *)&v194->__shared_owners_;
          do
            v199 = __ldaxr(v198);
          while (__stlxr(v199 - 1, v198));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
        if ((v197 & 1) == 0)
        {
          v200 = *(void **)(a2 + 16);
          std::string::basic_string[abi:ne180100]<0>(&v443, "UPDATE album SET liked_state = ? WHERE ROWID = ?");
          *(_QWORD *)buf = v394[3];
          *(_DWORD *)&buf[24] = 0;
          LOBYTE(v450) = 1;
          *((_QWORD *)&v450 + 1) = *(_QWORD *)v435[6];
          v453 = 0;
          v454[0] = 1;
          v463[0] = 0;
          v462 = 0uLL;
          *(_QWORD *)&v461 = &v462;
          BYTE8(v461) = 0;
          *(_QWORD *)&v462 = operator new(0x50uLL);
          *((_QWORD *)&v462 + 1) = v462;
          v463[0] = v462 + 80;
          *((_QWORD *)&v462 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)v463, (uint64_t)buf, (uint64_t)&v455, v462);
          ML3ImportExecuteVariadicStatement(v200, (const UInt8 *)&v443, (uint64_t *)&v462);
          *(_QWORD *)&v461 = &v462;
          std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v461);
          for (k = 0; k != -80; k -= 40)
          {
            if (v454[k])
              std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v450 + k + 8);
          }
          if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v443.__r_.__value_.__l.__data_);
          *(_DWORD *)(v435[6] + 64) = v394[3];
        }
      }
    }
  }
  v202 = *(int *)(v193 + 32);
  v203 = ML3TrackRulesGetPropertyIndex(2, 33554438);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  v204 = a2;
  if (*(_DWORD *)(__itemExtraRules + 56 * v203 + 4 * v202) != -1)
  {
    v204 = a2;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 33554438))
    {
      if (v386[3] != *(_DWORD *)(v435[6] + 68))
      {
        v205 = (std::__shared_weak_count *)a3[1];
        v334[0] = *a3;
        v334[1] = v205;
        if (v205)
        {
          v206 = (unint64_t *)&v205->__shared_owners_;
          do
            v207 = __ldxr(v206);
          while (__stxr(v207 + 1, v206));
        }
        v208 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v334, 0x2000006u);
        if (v205)
        {
          v209 = (unint64_t *)&v205->__shared_owners_;
          do
            v210 = __ldaxr(v209);
          while (__stlxr(v210 - 1, v209));
          if (!v210)
          {
            ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
            std::__shared_weak_count::__release_weak(v205);
          }
        }
        if ((v208 & 1) == 0)
        {
          v211 = (_QWORD *)v435[6];
          v213 = *(char **)(a2 + 464);
          v212 = *(_QWORD *)(a2 + 472);
          if ((unint64_t)v213 >= v212)
          {
            v215 = *(char **)(a2 + 456);
            v216 = (v213 - v215) >> 3;
            v217 = v216 + 1;
            if ((unint64_t)(v216 + 1) >> 61)
              goto LABEL_476;
            v218 = v212 - (_QWORD)v215;
            if (v218 >> 2 > v217)
              v217 = v218 >> 2;
            v219 = (unint64_t)v218 >= 0x7FFFFFFFFFFFFFF8;
            v220 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v219)
              v220 = v217;
            if (v220)
            {
              v220 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v220);
              v204 = a2;
              v215 = *(char **)(a2 + 456);
              v213 = *(char **)(a2 + 464);
            }
            else
            {
              v221 = 0;
            }
            v222 = (_QWORD *)(v220 + 8 * v216);
            v223 = v220 + 8 * v221;
            *v222 = *v211;
            v214 = v222 + 1;
            while (v213 != v215)
            {
              v224 = *((_QWORD *)v213 - 1);
              v213 -= 8;
              *--v222 = v224;
            }
            *(_QWORD *)(v204 + 456) = v222;
            *(_QWORD *)(v204 + 464) = v214;
            *(_QWORD *)(v204 + 472) = v223;
            if (v215)
              operator delete(v215);
          }
          else
          {
            *(_QWORD *)v213 = *v211;
            v214 = v213 + 8;
          }
          *(_QWORD *)(v204 + 464) = v214;
          *(_DWORD *)(v435[6] + 68) = v386[3];
        }
      }
    }
  }
  if (((v321 & 1) != 0 || !*(_BYTE *)(*a3 + 16) || *(_BYTE *)(*a3 + 17))
    && *(_DWORD *)(v435[6] + 88) != v372[24])
  {
    v225 = *(int *)(v204 + 32);
    v226 = ML3TrackRulesGetPropertyIndex(2, 33554462);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    v204 = a2;
    if (*(_DWORD *)(__itemExtraRules + 56 * v226 + 4 * v225) != -1)
    {
      v227 = (std::__shared_weak_count *)a3[1];
      v333[0] = *a3;
      v333[1] = v227;
      if (v227)
      {
        v228 = (unint64_t *)&v227->__shared_owners_;
        do
          v229 = __ldxr(v228);
        while (__stxr(v229 + 1, v228));
      }
      v230 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v333, 0x200001Eu);
      v231 = v230;
      if (!v227)
        goto LABEL_341;
      v232 = (unint64_t *)&v227->__shared_owners_;
      do
        v233 = __ldaxr(v232);
      while (__stlxr(v233 - 1, v232));
      if (!v233)
      {
        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
        std::__shared_weak_count::__release_weak(v227);
        if ((v231 & 1) == 0)
          goto LABEL_342;
      }
      else
      {
LABEL_341:
        if ((v230 & 1) == 0)
        {
LABEL_342:
          v234 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
          {
            v235 = *(_QWORD *)v435[6];
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v235;
            _os_log_impl(&dword_1AC149000, v234, OS_LOG_TYPE_DEFAULT, "contains_classical_work differs for album %lld", buf, 0xCu);
          }

          v236 = (_QWORD *)v435[6];
          v204 = a2;
          v238 = *(char **)(a2 + 488);
          v237 = *(_QWORD *)(a2 + 496);
          if ((unint64_t)v238 >= v237)
          {
            v240 = *(char **)(a2 + 480);
            v241 = (v238 - v240) >> 3;
            v242 = v241 + 1;
            if ((unint64_t)(v241 + 1) >> 61)
              goto LABEL_476;
            v243 = v237 - (_QWORD)v240;
            if (v243 >> 2 > v242)
              v242 = v243 >> 2;
            v219 = (unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8;
            v244 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v219)
              v244 = v242;
            if (v244)
            {
              v244 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v244);
              v204 = a2;
              v240 = *(char **)(a2 + 480);
              v238 = *(char **)(a2 + 488);
            }
            else
            {
              v245 = 0;
            }
            v246 = (_QWORD *)(v244 + 8 * v241);
            v247 = v244 + 8 * v245;
            *v246 = *v236;
            v239 = v246 + 1;
            while (v238 != v240)
            {
              v248 = *((_QWORD *)v238 - 1);
              v238 -= 8;
              *--v246 = v248;
            }
            *(_QWORD *)(v204 + 480) = v246;
            *(_QWORD *)(v204 + 488) = v239;
            *(_QWORD *)(v204 + 496) = v247;
            if (v240)
              operator delete(v240);
          }
          else
          {
            *(_QWORD *)v238 = *v236;
            v239 = v238 + 8;
          }
          *(_QWORD *)(v204 + 488) = v239;
          *(_DWORD *)(v435[6] + 88) = v372[24];
        }
      }
    }
  }
  v249 = *(int *)(v204 + 32);
  v250 = ML3TrackRulesGetPropertyIndex(1, 16777246);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  v252 = v327;
  v251 = a2;
  if (*(_DWORD *)(__itemRules + 56 * v250 + 4 * v249) != -1)
  {
    v252 = v327;
    v251 = a2;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, 16777246))
    {
      if (v378[24] != *(unsigned __int8 *)(v435[6] + 136))
      {
        v253 = (std::__shared_weak_count *)a3[1];
        v332[0] = *a3;
        v332[1] = v253;
        if (v253)
        {
          v254 = (unint64_t *)&v253->__shared_owners_;
          do
            v255 = __ldxr(v254);
          while (__stxr(v255 + 1, v254));
        }
        v256 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v332, 0x100001Eu);
        if (v253)
        {
          v257 = (unint64_t *)&v253->__shared_owners_;
          do
            v258 = __ldaxr(v257);
          while (__stlxr(v258 - 1, v257));
          if (!v258)
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
          }
        }
        if ((v256 & 1) == 0)
        {
          v259 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v259, OS_LOG_TYPE_DEFAULT))
          {
            v260 = *(_QWORD *)v435[6];
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v260;
            _os_log_impl(&dword_1AC149000, v259, OS_LOG_TYPE_DEFAULT, "is_compilation differs for album %lld", buf, 0xCu);
          }

          v261 = (_QWORD *)v435[6];
          v251 = a2;
          v262 = *(char **)(a2 + 512);
          v263 = *(_QWORD *)(a2 + 520);
          if ((unint64_t)v262 < v263)
          {
            *(_QWORD *)v262 = *v261;
            v264 = v262 + 8;
            v252 = v327;
LABEL_393:
            *(_QWORD *)(v251 + 512) = v264;
            *(_BYTE *)(v435[6] + 136) = v378[24];
            goto LABEL_394;
          }
          v265 = *(char **)(a2 + 504);
          v266 = (v262 - v265) >> 3;
          v267 = v266 + 1;
          if (!((unint64_t)(v266 + 1) >> 61))
          {
            v268 = v263 - (_QWORD)v265;
            if (v268 >> 2 > v267)
              v267 = v268 >> 2;
            v219 = (unint64_t)v268 >= 0x7FFFFFFFFFFFFFF8;
            v269 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v219)
              v269 = v267;
            if (v269)
            {
              v269 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v269);
              v251 = a2;
              v265 = *(char **)(a2 + 504);
              v262 = *(char **)(a2 + 512);
            }
            else
            {
              v270 = 0;
            }
            v271 = (_QWORD *)(v269 + 8 * v266);
            v272 = v269 + 8 * v270;
            *v271 = *v261;
            v264 = v271 + 1;
            while (v262 != v265)
            {
              v273 = *((_QWORD *)v262 - 1);
              v262 -= 8;
              *--v271 = v273;
            }
            *(_QWORD *)(v251 + 504) = v271;
            *(_QWORD *)(v251 + 512) = v264;
            *(_QWORD *)(v251 + 520) = v272;
            v252 = v327;
            if (v265)
              operator delete(v265);
            goto LABEL_393;
          }
LABEL_476:
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        }
      }
    }
  }
LABEL_394:
  if (v252 && v252 != *(_QWORD *)(v435[6] + 96))
  {
    v274 = *(int *)(v251 + 32);
    v275 = ML3TrackRulesGetPropertyIndex(17, 285212691);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    v251 = a2;
    if (*(_DWORD *)(__albumRules + 56 * v275 + 4 * v274) != -1)
    {
      v276 = (std::__shared_weak_count *)a3[1];
      v331[0] = *a3;
      v331[1] = v276;
      if (v276)
      {
        v277 = (unint64_t *)&v276->__shared_owners_;
        do
          v278 = __ldxr(v277);
        while (__stxr(v278 + 1, v277));
      }
      v279 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v331, 0x11000013u);
      if (v276)
      {
        v280 = (unint64_t *)&v276->__shared_owners_;
        do
          v281 = __ldaxr(v280);
        while (__stlxr(v281 - 1, v280));
        if (!v281)
        {
          ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
          std::__shared_weak_count::__release_weak(v276);
        }
      }
      if ((v279 & 1) == 0)
      {
        v282 = *(void **)(a2 + 16);
        std::string::basic_string[abi:ne180100]<0>(&v443, "UPDATE album SET sync_id = ? WHERE ROWID = ?");
        *(_QWORD *)buf = v327;
        *(_DWORD *)&buf[24] = 0;
        LOBYTE(v450) = 1;
        *((_QWORD *)&v450 + 1) = *(_QWORD *)v435[6];
        v453 = 0;
        v454[0] = 1;
        v463[0] = 0;
        v462 = 0uLL;
        *(_QWORD *)&v461 = &v462;
        BYTE8(v461) = 0;
        *(_QWORD *)&v462 = operator new(0x50uLL);
        *((_QWORD *)&v462 + 1) = v462;
        v463[0] = v462 + 80;
        *((_QWORD *)&v462 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)v463, (uint64_t)buf, (uint64_t)&v455, v462);
        ML3ImportExecuteVariadicStatement(v282, (const UInt8 *)&v443, (uint64_t *)&v462);
        *(_QWORD *)&v461 = &v462;
        std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v461);
        for (m = 0; m != -80; m -= 40)
        {
          if (v454[m])
            std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v450 + m + 8);
        }
        if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v443.__r_.__value_.__l.__data_);
        *(_QWORD *)(v435[6] + 96) = v327;
      }
    }
  }
  v284 = v382[3];
  if (v284 && v284 != *(_QWORD *)(v435[6] + 104))
  {
    v285 = *(int *)(v251 + 32);
    v286 = ML3TrackRulesGetPropertyIndex(17, 285212696);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    v251 = a2;
    if (*(_DWORD *)(__albumRules + 56 * v286 + 4 * v285) != -1)
    {
      v287 = (std::__shared_weak_count *)a3[1];
      v330[0] = *a3;
      v330[1] = v287;
      if (v287)
      {
        v288 = (unint64_t *)&v287->__shared_owners_;
        do
          v289 = __ldxr(v288);
        while (__stxr(v289 + 1, v288));
      }
      v290 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v330, 0x11000018u);
      if (v287)
      {
        v291 = (unint64_t *)&v287->__shared_owners_;
        do
          v292 = __ldaxr(v291);
        while (__stlxr(v292 - 1, v291));
        if (!v292)
        {
          ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
          std::__shared_weak_count::__release_weak(v287);
        }
      }
      if ((v290 & 1) == 0)
      {
        v293 = *(void **)(a2 + 16);
        std::string::basic_string[abi:ne180100]<0>(&v443, "UPDATE album SET store_id = ? WHERE ROWID = ?");
        *(_QWORD *)buf = v382[3];
        *(_DWORD *)&buf[24] = 0;
        LOBYTE(v450) = 1;
        *((_QWORD *)&v450 + 1) = *(_QWORD *)v435[6];
        v453 = 0;
        v454[0] = 1;
        v463[0] = 0;
        v462 = 0uLL;
        *(_QWORD *)&v461 = &v462;
        BYTE8(v461) = 0;
        *(_QWORD *)&v462 = operator new(0x50uLL);
        *((_QWORD *)&v462 + 1) = v462;
        v463[0] = v462 + 80;
        *((_QWORD *)&v462 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)v463, (uint64_t)buf, (uint64_t)&v455, v462);
        ML3ImportExecuteVariadicStatement(v293, (const UInt8 *)&v443, (uint64_t *)&v462);
        *(_QWORD *)&v461 = &v462;
        std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v461);
        for (n = 0; n != -80; n -= 40)
        {
          if (v454[n])
            std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v450 + n + 8);
        }
        if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v443.__r_.__value_.__l.__data_);
        *(_QWORD *)(v435[6] + 104) = v382[3];
      }
    }
  }
  if (*(unsigned __int8 *)(v435[6] + 137) != v324)
  {
    v295 = *(int *)(v251 + 32);
    v296 = ML3TrackRulesGetPropertyIndex(17, 285212693);
    if (_ML3InitializeTrackRulesIfNeeded___once != -1)
      dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
    if (*(_DWORD *)(__albumRules + 56 * v296 + 4 * v295) != -1)
    {
      v297 = (std::__shared_weak_count *)a3[1];
      v329[0] = *a3;
      v329[1] = v297;
      if (v297)
      {
        v298 = (unint64_t *)&v297->__shared_owners_;
        do
          v299 = __ldxr(v298);
        while (__stxr(v299 + 1, v298));
      }
      v300 = ML3ImportSession::_shouldPreserveTrackProperty(a2, (uint64_t)v329, 0x11000015u);
      v301 = v300;
      if (!v297)
        goto LABEL_447;
      v302 = (unint64_t *)&v297->__shared_owners_;
      do
        v303 = __ldaxr(v302);
      while (__stlxr(v303 - 1, v302));
      if (!v303)
      {
        ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
        std::__shared_weak_count::__release_weak(v297);
        if ((v301 & 1) != 0)
          goto LABEL_455;
      }
      else
      {
LABEL_447:
        if ((v300 & 1) != 0)
          goto LABEL_455;
      }
      v304 = *(void **)(a2 + 16);
      std::string::basic_string[abi:ne180100]<0>(&v443, "UPDATE album SET classical_experience_available = ? WHERE ROWID = ?");
      buf[0] = v324;
      *(_DWORD *)&buf[24] = 2;
      LOBYTE(v450) = 1;
      *((_QWORD *)&v450 + 1) = *(_QWORD *)v435[6];
      v453 = 0;
      v454[0] = 1;
      v463[0] = 0;
      v462 = 0uLL;
      *(_QWORD *)&v461 = &v462;
      BYTE8(v461) = 0;
      *(_QWORD *)&v462 = operator new(0x50uLL);
      *((_QWORD *)&v462 + 1) = v462;
      v463[0] = v462 + 80;
      *((_QWORD *)&v462 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>> const*,std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>*>((uint64_t)v463, (uint64_t)buf, (uint64_t)&v455, v462);
      ML3ImportExecuteVariadicStatement(v304, (const UInt8 *)&v443, (uint64_t *)&v462);
      *(_QWORD *)&v461 = &v462;
      std::vector<std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v461);
      for (ii = 0; ii != -80; ii -= 40)
      {
        if (v454[ii])
          std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v450 + ii + 8);
      }
      if (SHIBYTE(v443.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v443.__r_.__value_.__l.__data_);
      *(_BYTE *)(v435[6] + 137) = v324;
    }
  }
LABEL_455:
  v306 = v435[7];
  *a1 = v435[6];
  a1[1] = v306;
  if (v306)
  {
    v307 = (unint64_t *)(v306 + 8);
    do
      v308 = __ldxr(v307);
    while (__stxr(v308 + 1, v307));
  }
  _Block_object_dispose(&v371, 8);
  if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v375.__r_.__value_.__l.__data_);
  if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v376.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v377, 8);
  _Block_object_dispose(&v381, 8);
  _Block_object_dispose(&v385, 8);
  _Block_object_dispose(&v389, 8);
  _Block_object_dispose(&v393, 8);
  _Block_object_dispose(&v397, 8);
  _Block_object_dispose(&v401, 8);
  _Block_object_dispose(v405, 8);
  _Block_object_dispose(&v407, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v414, 8);
  if (SHIBYTE(v420.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v420.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v421, 8);
  if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v427.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v428, 8);

  _Block_object_dispose(&v434, 8);
  v309 = v441;
  if (v441)
  {
    v310 = (unint64_t *)&v441->__shared_owners_;
    do
      v311 = __ldaxr(v310);
    while (__stlxr(v311 - 1, v310));
    if (!v311)
    {
      ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
      std::__shared_weak_count::__release_weak(v309);
    }
  }
}

void sub_1AC36503C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x220], 8);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  _Block_object_dispose(&STACK[0x280], 8);
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Block_object_dispose(&STACK[0x2C0], 8);
  _Block_object_dispose(&STACK[0x2E0], 8);
  _Block_object_dispose(&STACK[0x300], 8);
  _Block_object_dispose(&STACK[0x320], 8);
  _Block_object_dispose(&STACK[0x340], 8);
  _Block_object_dispose(&STACK[0x360], 8);
  _Block_object_dispose(&STACK[0x380], 8);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  _Block_object_dispose(&STACK[0x3C8], 8);
  if (SLOBYTE(STACK[0x40F]) < 0)
    operator delete((void *)STACK[0x3F8]);
  _Block_object_dispose(&STACK[0x410], 8);
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  _Block_object_dispose(&STACK[0x458], 8);

  _Block_object_dispose(&STACK[0x488], 8);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x4B8]);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__256(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__257(uint64_t a1)
{
  return std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 48);
}

void ___ZN16ML3ImportSession13_getAlbumInfoENSt3__110shared_ptrI13ML3ImportItemEEx_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  ML3AlbumGroupingIdentifier *v11;
  void *v12;
  ML3AlbumGroupingIdentifier *v13;
  ML3AlbumGroupingIdentifier *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t PropertyIndex;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int shouldPreserveTrackProperty;
  char v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t i;
  void *v51;
  void *v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  ML3AlbumGroupingIdentifier *v57;
  void *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  __int128 v62;
  std::string v63;
  std::string v64;
  _QWORD v65[2];
  std::string __p;
  std::string v67;
  std::string v68;
  std::string v69;
  uint64_t v70;
  std::string __str[2];
  std::string v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 160);
  memset(&v72, 0, sizeof(v72));
  memset(__str, 0, sizeof(__str));
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v3, (uint64_t)__str, 3uLL);
  if (!*(_BYTE *)(a1 + 200))
    std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), __str);
  if (!*(_BYTE *)(a1 + 201))
    std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48), &__str[1]);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  if (*(char *)(v5 + 71) < 0)
  {
    if (*(_QWORD *)(v5 + 56))
      goto LABEL_10;
  }
  else if (*(_BYTE *)(v5 + 71))
  {
    goto LABEL_10;
  }
  std::string::operator=((std::string *)(v5 + 48), &v72);
LABEL_10:
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = (int)objc_msgSend(v3, "intForColumnIndex:", 3);
  if (!*(_BYTE *)(a1 + 202))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = (int)objc_msgSend(v3, "intForColumnIndex:", 4);
  if (!*(_BYTE *)(a1 + 203))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = objc_msgSend(v3, "intForColumnIndex:", 5) != 0;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = objc_msgSend(v3, "int64ForColumnIndex:", 6);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = objc_msgSend(v3, "int64ForColumnIndex:", 7);
  objc_msgSend(v3, "dataForColumnIndex:", 8);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!*(_BYTE *)(a1 + 204))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = objc_msgSend(v3, "int64ForColumnIndex:", 9);
  if (!*(_BYTE *)(a1 + 205))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24) = objc_msgSend(v3, "intForColumnIndex:", 10) != 0;
  if (!*(_BYTE *)(a1 + 206))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24) = (int)objc_msgSend(v3, "intForColumnIndex:", 11);
  v7 = objc_msgSend(v3, "int64ForColumnIndex:", 12);
  v8 = objc_msgSend(v3, "intForColumnIndex:", 13);
  v9 = objc_msgSend(v3, "int64ForColumnIndex:", 14);
  if (!*(_BYTE *)(a1 + 207))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 24) = objc_msgSend(v3, "int64ForColumnIndex:", 15);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v3, "cStringForColumnIndex:", 16));
  v59 = v9;
  v60 = v8;
  v61 = v7;
  v10 = objc_msgSend(v3, "int64ForColumnIndex:", 17);
  v11 = [ML3AlbumGroupingIdentifier alloc];
  ML3CPPBridgeString((const UInt8 *)&v72, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[ML3AlbumGroupingIdentifier initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:](v11, "initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:", v10, v6, v12, objc_msgSend(v3, "int64ForColumnIndex:", 6), objc_msgSend(v3, "intForColumnIndex:", 5) != 0);

  v14 = [ML3AlbumGroupingIdentifier alloc];
  v15 = *(_QWORD *)(a1 + 168);
  v16 = *(void **)(v4 + 8);
  ML3CPPBridgeString((const UInt8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "groupingKeyForString:", v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  ML3CPPBridgeString((const UInt8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48), 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[ML3AlbumGroupingIdentifier initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:](v14, "initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:", v15, v18, v19, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24));
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8);
  v22 = *(void **)(v21 + 40);
  *(_QWORD *)(v21 + 40) = v20;

  v23 = *(int *)(v4 + 32);
  PropertyIndex = ML3TrackRulesGetPropertyIndex(1, 16777225);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__itemRules + 56 * PropertyIndex + 4 * v23) == -1
    || (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 40), "isEqual:", v13) & 1) != 0)
  {
    goto LABEL_38;
  }
  v25 = *(std::__shared_weak_count **)(a1 + 184);
  v65[0] = *(_QWORD *)(a1 + 176);
  v65[1] = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(v4, (uint64_t)v65, 0x1000009u);
  v29 = shouldPreserveTrackProperty;
  if (!v25)
    goto LABEL_37;
  v30 = (unint64_t *)&v25->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if ((v29 & 1) != 0)
      goto LABEL_38;
  }
  else
  {
LABEL_37:
    if (shouldPreserveTrackProperty)
    {
LABEL_38:
      v57 = v13;
      v58 = v6;
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v64, __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
      else
        v64 = __str[0];
      if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v63, __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
      else
        v63 = __str[1];
      v32 = objc_msgSend(*(id *)(a1 + 32), "longLongValue");
      v33 = objc_msgSend(v3, "int64ForColumnIndex:", 3);
      v34 = objc_msgSend(v3, "intForColumnIndex:", 11);
      v35 = objc_msgSend(v3, "int64ForColumnIndex:", 4);
      v36 = objc_msgSend(v3, "int64ForColumnIndex:", 9);
      v37 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v4, (uint64_t)&v63, (uint64_t)&v64);
      v55 = v38;
      v56 = v37;
      v54 = v34;
      v39 = objc_msgSend(v3, "intForColumnIndex:", 10);
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
      v41 = objc_msgSend(v3, "intForColumnIndex:", 5);
      v42 = operator new(0xB0uLL);
      v53 = v39;
      v42[1] = 0;
      v42[2] = 0;
      *v42 = &off_1E5B51298;
      v43 = v36;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v69, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
      else
        v69 = v64;
      v44 = v33;
      v45 = v32;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v68, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
      else
        v68 = v63;
      v46 = *(_QWORD *)(v40 + 24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v67, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v67 = __p;
      ML3AlbumData::ML3AlbumData((uint64_t)(v42 + 3), v45, (__int128 *)&v69, (__int128 *)&v68, v44, v54 != 0, v35, v43, v56, v55, v53, v61, v46, (__int128 *)&v67, v41 != 0, v60 != 0, v59);
      v13 = v57;
      v6 = v58;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      *(_QWORD *)&v62 = v42 + 3;
      *((_QWORD *)&v62 + 1) = v42;
      std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) + 48, &v62);
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
      if (*((_QWORD *)&v62 + 1))
      {
        v48 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      goto LABEL_68;
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) == *(_QWORD *)(a1 + 192))
  {
    v51 = *(void **)(v4 + 16);
    v70 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v70, 1);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "executeUpdate:withParameters:error:", CFSTR("UPDATE album SET representative_item_pid=0 WHERE album_pid=?"), v52, 0);

  }
LABEL_68:

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v72.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v72.__r_.__value_.__l.__data_ + i * 8));
  }

}

void sub_1AC366074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;

  if (a47 < 0)
    operator delete(__p);

  v59 = 0;
  v60 = v57 - 176;
  while (1)
  {
    if (*(char *)(v60 + v59 + 71) < 0)
      operator delete(*(void **)(v60 + v59 + 48));
    v59 -= 24;
    if (v59 == -72)
    {

      _Unwind_Resume(a1);
    }
  }
}

void ___ZN16ML3ImportSession21_getExistingAlbumInfoEP26ML3AlbumGroupingIdentifierx_block_invoke(void **a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v5;
  ML3ImportSession *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  int v18;
  NSString *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  ML3AlbumGroupingIdentifier *v24;
  void *v25;
  ML3AlbumGroupingIdentifier *v26;
  void *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t i;
  void *v48;
  NSData v49[2];
  std::__shared_weak_count *v50;
  void *__p[2];
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55[2];
  char v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  int v61;
  int v62;
  __int128 v63;
  int v64;
  int v65;
  int v66;
  int v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71[2];
  __int128 v72;
  _QWORD v73[4];

  v73[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = (ML3ImportSession *)a1[6];
  v73[0] = 0;
  v72 = 0u;
  memset(v71, 0, sizeof(v71));
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v5, (uint64_t)v71, 3uLL);
  if (SHIBYTE(v71[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v70, v71[0].__r_.__value_.__l.__data_, v71[0].__r_.__value_.__l.__size_);
  else
    v70 = v71[0];
  if (SHIBYTE(v71[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v69, v71[1].__r_.__value_.__l.__data_, v71[1].__r_.__value_.__l.__size_);
  else
    v69 = v71[1];
  if (SHIBYTE(v73[0]) < 0)
  {
    std::string::__init_copy_ctor_external(&v68, (const std::string::value_type *)v72, *((std::string::size_type *)&v72 + 1));
  }
  else
  {
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v72;
    v68.__r_.__value_.__r.__words[2] = v73[0];
  }
  v7 = objc_msgSend(v5, "int64ForColumnIndex:", 3);
  objc_msgSend(v5, "objectAtIndexedSubscript:", 4);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v5, "int64ForColumnIndex:", 5);
  v9 = objc_msgSend(v5, "intForColumnIndex:", 6);
  v67 = objc_msgSend(v5, "intForColumnIndex:", 7);
  v66 = objc_msgSend(v5, "intForColumnIndex:", 8);
  v65 = objc_msgSend(v5, "intForColumnIndex:", 9);
  v64 = objc_msgSend(v5, "intForColumnIndex:", 10);
  objc_msgSend(v5, "objectAtIndexedSubscript:", 11);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    v11 = (void *)*((_QWORD *)v6 + 3);
    objc_msgSend(v5, "objectAtIndexedSubscript:", 11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKeyedSubscript:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "ML3NameOrderValue");
    *(_QWORD *)&v63 = v14;
    *((_QWORD *)&v63 + 1) = v15;

  }
  else
  {
    v14 = 0;
    v63 = *(_OWORD *)"";
  }

  objc_msgSend(v5, "objectAtIndexedSubscript:", 11);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
    v17 = v14 == 0;
  else
    v17 = 0;
  v18 = v17;

  if (v18)
  {
    objc_msgSend(v5, "objectAtIndexedSubscript:", 11);
    v19 = (NSString *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v63 = ML3ImportSession::_getNameOrderForString(v6, v19);
    *((_QWORD *)&v63 + 1) = v20;

  }
  v62 = objc_msgSend(v5, "intForColumnIndex:", 12);
  v61 = objc_msgSend(v5, "intForColumnIndex:", 13);
  v60 = objc_msgSend(v5, "int64ForColumnIndex:", 14);
  v59 = objc_msgSend(v5, "intForColumnIndex:", 15) != 0;
  v58 = objc_msgSend(v5, "int64ForColumnIndex:", 16);
  v57 = objc_msgSend(v5, "int64ForColumnIndex:", 17);
  std::string::basic_string[abi:ne180100]<0>(v55, (char *)objc_msgSend(v5, "cStringForColumnIndex:", 18));
  std::allocate_shared[abi:ne180100]<ML3AlbumData,std::allocator<ML3AlbumData>,long long &,std::string &,std::string &,int &,int &,int &,int &,ML3NameOrder &,int &,long long &,long long &,std::string &,int &,BOOL &,long long &,void>(__p, v7, (uint64_t)&v70, (uint64_t)&v69, &v66, &v61, &v65, &v64, (uint64_t *)&v63, &v62, &v60, &v58, (uint64_t)v55, &v67, (char *)&v59, &v57);
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*((_QWORD *)a1[5] + 1) + 48, (__int128 *)__p);
  v21 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v22 = (unint64_t *)((char *)__p[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (a1[4])
  {
    v24 = [ML3AlbumGroupingIdentifier alloc];
    ML3CPPBridgeString((const UInt8 *)&v68, 1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = -[ML3AlbumGroupingIdentifier initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:](v24, "initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:", v8, v48, v25, v9, v67 != 0);

    if (v26 && -[ML3AlbumGroupingIdentifier isEqual:](v26, "isEqual:", a1[4]))
    {
      *a4 = 1;
      -[ML3AlbumGroupingIdentifier keyValue](v26, "keyValue");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      ML3CPPStringFromData(v49, v27);
      v28 = *((_QWORD *)a1[5] + 1);
      *(_OWORD *)__p = *(_OWORD *)&v49[0].super.isa;
      v29 = v50;
      v49[0].super.isa = 0;
      v49[1].super.isa = 0;
      v50 = 0;
      v31 = *(_QWORD *)(v28 + 48);
      v30 = *(std::__shared_weak_count **)(v28 + 56);
      v52 = v29;
      v53 = v31;
      v54 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3AlbumData>>>((uint64_t)v6 + 1248, (unsigned __int8 *)__p, (uint64_t)__p);
      v34 = v54;
      if (v54)
      {
        v35 = (unint64_t *)&v54->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (SHIBYTE(v52) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v50) < 0)
        operator delete(v49[0].super.isa);

    }
  }
  v37 = (unint64_t)a1[7];
  if (v37)
  {
    v38 = *((_QWORD *)a1[5] + 1);
    v40 = *(void **)(v38 + 48);
    v39 = *(std::__shared_weak_count **)(v38 + 56);
    __p[0] = a1[7];
    __p[1] = v40;
    v52 = v39;
    if (v39)
    {
      v41 = (unint64_t *)&v39->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3AlbumData>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3AlbumData>>>((uint64_t)v6 + 1008, v37, (uint64_t)__p);
    v43 = v52;
    if (v52)
    {
      v44 = (unint64_t *)&v52->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
  if (v56 < 0)
    operator delete(v55[0]);

  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v73[i]) < 0)
      operator delete((void *)v73[i - 2]);
  }

}

void sub_1AC3667C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;

  std::pair<std::string const,std::shared_ptr<ML3AlbumData>>::~pair((uint64_t)&a26);
  if (a25 < 0)
    operator delete(__p);

  if (a37 < 0)
    operator delete(a32);

  if (a52 < 0)
    operator delete(a47);
  if (*(char *)(v55 - 217) < 0)
    operator delete(*(void **)(v55 - 240));
  if (*(char *)(v55 - 185) < 0)
    operator delete(*(void **)(v55 - 208));
  v57 = 0;
  v58 = v55 - 176;
  while (1)
  {
    if (*(char *)(v58 + v57 + 71) < 0)
      operator delete(*(void **)(v58 + v57 + 48));
    v57 -= 24;
    if (v57 == -72)
    {

      _Unwind_Resume(a1);
    }
  }
}

uint64_t __copy_helper_block_ea8_176c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(result + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(result + 184) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_176c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(uint64_t a1)
{
  return std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 176);
}

__n128 __Block_byref_object_copy__209(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__210(uint64_t a1)
{
  return std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 48);
}

void ___ZN16ML3ImportSession19_getAlbumArtistInfoENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t PropertyIndex;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int shouldPreserveTrackProperty;
  char v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t i;
  void *v34;
  void *v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  std::string v39;
  _QWORD v40[2];
  std::string __p;
  std::string v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  std::string v47;
  std::string v48;
  uint64_t v49;
  std::string __str[2];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 80);
  memset(__str, 0, sizeof(__str));
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v3, (uint64_t)__str, 2uLL);
  if (!*(_BYTE *)(a1 + 112))
    std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), __str);
  if (!*(_BYTE *)(a1 + 113))
    std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48), &__str[1]);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v3, "int64ForColumnIndex:", 2);
  v5 = objc_msgSend(v3, "int64ForColumnIndex:", 3);
  objc_msgSend(v3, "dataForColumnIndex:", 4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v3, "int64ForColumnIndex:", 5);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v3, "cStringForColumnIndex:", 6));
  v8 = objc_msgSend(v3, "intForColumnIndex:", 7);
  v9 = objc_msgSend(v3, "intForColumnIndex:", 8);
  v37 = objc_msgSend(v3, "int64ForColumnIndex:", 9);
  v10 = *(void **)(v4 + 8);
  ML3CPPBridgeString((const UInt8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "groupingKeyForString:", v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  v15 = *(int *)(v4 + 32);
  PropertyIndex = ML3TrackRulesGetPropertyIndex(1, 16777228);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__itemRules + 56 * PropertyIndex + 4 * v15) == -1
    || (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "isEqualToData:", v6) & 1) != 0)
  {
    goto LABEL_17;
  }
  v17 = *(std::__shared_weak_count **)(a1 + 96);
  v40[0] = *(_QWORD *)(a1 + 88);
  v40[1] = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(v4, (uint64_t)v40, 0x100000Cu);
  v21 = shouldPreserveTrackProperty;
  if (!v17)
    goto LABEL_16;
  v22 = (unint64_t *)&v17->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if ((v21 & 1) != 0)
      goto LABEL_17;
  }
  else
  {
LABEL_16:
    if (shouldPreserveTrackProperty)
    {
LABEL_17:
      v36 = v9;
      if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v39, __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
      else
        v39 = __str[1];
      v24 = objc_msgSend(*(id *)(a1 + 32), "longLongValue");
      v25 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v4, (uint64_t)&v39, (uint64_t)__str);
      v27 = v26;
      v29 = operator new(0xD8uLL);
      v29[1] = 0;
      v29[2] = 0;
      *v29 = &off_1E5B51308;
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v48, __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
      else
        v48 = __str[0];
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v47, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
      else
        v47 = v39;
      v45 = 0uLL;
      v46 = 0;
      v44 = 0;
      v43 = 0uLL;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v42, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v42 = __p;
      ML3ArtistData::ML3ArtistData((uint64_t)(v29 + 3), v24, (__int128 *)&v48, (__int128 *)&v47, &v45, &v43, v5, v28, v25, v27, 0, 0x7FFFFFFFFFFFFFFFLL, v7, (__int128 *)&v42, v8 != 0, v36, v37);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      *(_QWORD *)&v38 = v29 + 3;
      *((_QWORD *)&v38 + 1) = v29;
      std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48, &v38);
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      goto LABEL_42;
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) == *(_QWORD *)(a1 + 104))
  {
    v34 = *(void **)(v4 + 16);
    v49 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v49, 1);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "executeUpdate:withParameters:error:", CFSTR("UPDATE album_artist SET representative_item_pid=0 WHERE album_artist_pid=?"), v35, 0);

  }
LABEL_42:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  for (i = 0; i != 0x1FFFFFFFFFFFFFFALL; i -= 3)
  {
    if (SHIBYTE(__str[1].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(__str[i / 3 + 1].__r_.__value_.__l.__data_);
  }

}

void sub_1AC366EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;

  if (a36 < 0)
    operator delete(__p);

  v47 = 0;
  v48 = v45 - 144;
  while (1)
  {
    if (*(char *)(v48 + v47 + 47) < 0)
      operator delete(*(void **)(v48 + v47 + 24));
    v47 -= 24;
    if (v47 == -48)
    {

      _Unwind_Resume(a1);
    }
  }
}

void ___ZN16ML3ImportSession27_getExistingAlbumArtistInfoEP6NSDatax_block_invoke(void **a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  ML3ImportSession *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  int v17;
  NSString *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t i;
  void *v43[2];
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  void *__p[2];
  std::__shared_weak_count *v48;
  __int128 v49;
  uint64_t v50[2];
  uint64_t v51;
  int v52;
  BOOL v53;
  void *v54[2];
  char v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  std::string v59;
  std::string v60;
  std::string v61[2];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = (ML3ImportSession *)a1[6];
  memset(v61, 0, sizeof(v61));
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v6, (uint64_t)v61, 2uLL);
  if (SHIBYTE(v61[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v60, v61[0].__r_.__value_.__l.__data_, v61[0].__r_.__value_.__l.__size_);
  else
    v60 = v61[0];
  if (SHIBYTE(v61[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v59, v61[1].__r_.__value_.__l.__data_, v61[1].__r_.__value_.__l.__size_);
  else
    v59 = v61[1];
  v8 = objc_msgSend(v6, "int64ForColumnIndex:", 2);
  v58 = objc_msgSend(v6, "int64ForColumnIndex:", 3);
  objc_msgSend(v6, "objectAtIndexedSubscript:", 4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = (void *)*((_QWORD *)v7 + 3);
    objc_msgSend(v6, "objectAtIndexedSubscript:", 4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKeyedSubscript:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "ML3NameOrderValue");
    *(_QWORD *)&v57 = v13;
    *((_QWORD *)&v57 + 1) = v14;

  }
  else
  {
    v13 = 0;
    v57 = *(_OWORD *)"";
  }

  objc_msgSend(v6, "objectAtIndexedSubscript:", 3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
    v16 = v13 == 0;
  else
    v16 = 0;
  v17 = v16;

  if (v17)
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", 4);
    v18 = (NSString *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v57 = ML3ImportSession::_getNameOrderForString(v7, v18);
    *((_QWORD *)&v57 + 1) = v19;

  }
  v56 = objc_msgSend(v6, "int64ForColumnIndex:", 5);
  std::string::basic_string[abi:ne180100]<0>(v54, (char *)objc_msgSend(v6, "cStringForColumnIndex:", 6));
  v53 = objc_msgSend(v6, "intForColumnIndex:", 7) != 0;
  v52 = objc_msgSend(v6, "intForColumnIndex:", 8);
  v51 = objc_msgSend(v6, "int64ForColumnIndex:", 9);
  v50[0] = objc_msgSend(v6, "int64ForColumnIndex:", 10);
  v50[1] = (int)objc_msgSend(v6, "intForColumnIndex:", 11);
  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v48 = 0;
  std::allocate_shared[abi:ne180100]<ML3ArtistData,std::allocator<ML3ArtistData>,long long &,std::string &,std::string &,std::string,std::string,long long &,ML3NameOrder &,ML3NameOrder &,long long &,std::string &,BOOL &,int &,long long &,void>(&v49, v8, (uint64_t)&v60, (uint64_t)&v59, (uint64_t)v43, (uint64_t)__p, &v58, (uint64_t *)&v57, v50, &v56, (uint64_t)v54, (char *)&v53, &v52, &v51);
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*((_QWORD *)a1[5] + 1) + 48, &v49);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (SHIBYTE(v48) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);
  v23 = a1[4];
  if (v23)
  {
    ML3CPPStringFromData((NSData *)__p, v23);
    v24 = *((_QWORD *)a1[5] + 1);
    *(_OWORD *)v43 = *(_OWORD *)__p;
    v25 = v48;
    __p[0] = 0;
    __p[1] = 0;
    v48 = 0;
    v27 = *(_QWORD *)(v24 + 48);
    v26 = *(std::__shared_weak_count **)(v24 + 56);
    v44 = v25;
    v45 = v27;
    v46 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>((uint64_t)v7 + 1128, (unsigned __int8 *)v43, (uint64_t)v43);
    v30 = v46;
    if (v46)
    {
      v31 = (unint64_t *)&v46->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    if (SHIBYTE(v44) < 0)
      operator delete(v43[0]);
    if (SHIBYTE(v48) < 0)
      operator delete(__p[0]);
  }
  v33 = (unint64_t)a1[7];
  if (v33)
  {
    v34 = *((_QWORD *)a1[5] + 1);
    v36 = *(void **)(v34 + 48);
    v35 = *(std::__shared_weak_count **)(v34 + 56);
    v43[0] = a1[7];
    v43[1] = v36;
    v44 = v35;
    if (v35)
    {
      v37 = (unint64_t *)&v35->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ArtistData>>>((uint64_t)v7 + 1048, v33, (uint64_t)v43);
    v39 = v44;
    if (v44)
    {
      v40 = (unint64_t *)&v44->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  *a4 = 1;
  if (v55 < 0)
    operator delete(v54[0]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  for (i = 0; i != 0x1FFFFFFFFFFFFFFALL; i -= 3)
  {
    if (SHIBYTE(v61[1].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v61[i / 3 + 1].__r_.__value_.__l.__data_);
  }

}

void sub_1AC367484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;

  if (*(char *)(v41 - 153) < 0)
    operator delete(*(void **)(v41 - 176));
  v43 = 0;
  v44 = v41 - 144;
  while (1)
  {
    if (*(char *)(v44 + v43 + 47) < 0)
      operator delete(*(void **)(v44 + v43 + 24));
    v43 -= 24;
    if (v43 == -48)
    {

      _Unwind_Resume(a1);
    }
  }
}

uint64_t __copy_helper_block_ea8_88c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 96) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_88c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(uint64_t a1)
{
  return std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 88);
}

void ___ZN16ML3ImportSession14_getArtistInfoENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t PropertyIndex;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int shouldPreserveTrackProperty;
  char v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t i;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  std::string v43;
  std::string v44;
  _QWORD v45[2];
  __int128 v46;
  uint64_t v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  uint64_t v52;
  std::string __str[2];
  std::string v54[2];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 96);
  memset(v54, 0, sizeof(v54));
  memset(__str, 0, sizeof(__str));
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v3, (uint64_t)__str, 4uLL);
  if (!*(_BYTE *)(a1 + 128))
    std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), __str);
  if (!*(_BYTE *)(a1 + 129))
    std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48), &__str[1]);
  if (!*(_BYTE *)(a1 + 130))
    std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48), v54);
  if (!*(_BYTE *)(a1 + 131))
    std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48), &v54[1]);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = objc_msgSend(v3, "int64ForColumnIndex:", 4);
  v5 = objc_msgSend(v3, "int64ForColumnIndex:", 5);
  objc_msgSend(v3, "dataForColumnIndex:", 6);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v3, "int64ForColumnIndex:", 7);
  v41 = objc_msgSend(v3, "intForColumnIndex:", 8);
  v8 = *(void **)(v4 + 8);
  ML3CPPBridgeString((const UInt8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = v7;
  v10 = *(unsigned __int8 *)(a1 + 132);
  if (*(_BYTE *)(a1 + 132))
  {
    ML3CPPBridgeString((const UInt8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48), 0);
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v11 = &stru_1E5B66908;
  }
  objc_msgSend(v8, "artistGroupingKeyForArtistName:seriesName:", v9, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v12;

  if (v10)
  v15 = *(int *)(v4 + 32);
  PropertyIndex = ML3TrackRulesGetPropertyIndex(1, 16777220);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__itemRules + 56 * PropertyIndex + 4 * v15) == -1
    || (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "isEqualToData:", v6) & 1) != 0)
  {
    goto LABEL_26;
  }
  v17 = *(std::__shared_weak_count **)(a1 + 112);
  v45[0] = *(_QWORD *)(a1 + 104);
  v45[1] = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(v4, (uint64_t)v45, 0x1000004u);
  v21 = shouldPreserveTrackProperty;
  if (!v17)
    goto LABEL_25;
  v22 = (unint64_t *)&v17->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if ((v21 & 1) != 0)
      goto LABEL_26;
  }
  else
  {
LABEL_25:
    if (shouldPreserveTrackProperty)
    {
LABEL_26:
      v39 = v6;
      if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
      else
        v44 = __str[1];
      if (SHIBYTE(v54[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v43, v54[1].__r_.__value_.__l.__data_, v54[1].__r_.__value_.__l.__size_);
      else
        v43 = v54[1];
      v24 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v4, (uint64_t)&v44, (uint64_t)__str);
      v26 = v25;
      v27 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v4, (uint64_t)&v43, (uint64_t)v54);
      v29 = v28;
      v30 = objc_msgSend(*(id *)(a1 + 32), "longLongValue");
      v32 = operator new(0xD8uLL);
      v32[1] = 0;
      v32[2] = 0;
      *v32 = &off_1E5B51308;
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v51, __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
      else
        v51 = __str[0];
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v50, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
      else
        v50 = v44;
      if (SHIBYTE(v54[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v49, v54[0].__r_.__value_.__l.__data_, v54[0].__r_.__value_.__l.__size_);
      else
        v49 = v54[0];
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v48, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
      else
        v48 = v43;
      v46 = 0uLL;
      v47 = 0;
      ML3ArtistData::ML3ArtistData((uint64_t)(v32 + 3), v30, (__int128 *)&v51, (__int128 *)&v50, (__int128 *)&v49, (__int128 *)&v48, v5, v31, v24, v26, v27, v29, v40, &v46, v41 != 0, 0, 0);
      v6 = v39;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      *(_QWORD *)&v42 = v32 + 3;
      *((_QWORD *)&v42 + 1) = v32;
      std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 48, &v42);
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
      if (*((_QWORD *)&v42 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      goto LABEL_61;
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) == *(_QWORD *)(a1 + 120))
  {
    v37 = *(void **)(v4 + 16);
    v52 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v52, 1);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "executeUpdate:withParameters:error:", CFSTR("UPDATE item_artist SET representative_item_pid=0 WHERE item_artist_pid=?"), v38, 0);

  }
LABEL_61:

  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 3)
  {
    if (SHIBYTE(v54[1].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v54[i / 3 + 1].__r_.__value_.__l.__data_);
  }

}

void sub_1AC367BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;

  v58 = 0;
  v59 = v56 - 192;
  while (1)
  {
    if (*(char *)(v59 + v58 + 95) < 0)
      operator delete(*(void **)(v59 + v58 + 72));
    v58 -= 24;
    if (v58 == -96)
    {

      _Unwind_Resume(a1);
    }
  }
}

void ___ZN16ML3ImportSession22_getExistingArtistInfoEP6NSDatax_block_invoke(void **a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  ML3ImportSession *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  int v17;
  NSString *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  BOOL v27;
  int v28;
  NSString *v29;
  uint64_t v30;
  std::__shared_weak_count *isa;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t i;
  NSData v54[2];
  std::__shared_weak_count *v55;
  void *__p[2];
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  int v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71[2];
  __int128 v72;
  _QWORD v73[6];

  v73[5] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = (ML3ImportSession *)a1[6];
  memset(v73, 0, 32);
  v72 = 0u;
  memset(v71, 0, sizeof(v71));
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v6, (uint64_t)v71, 4uLL);
  if (SHIBYTE(v71[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v70, v71[0].__r_.__value_.__l.__data_, v71[0].__r_.__value_.__l.__size_);
  else
    v70 = v71[0];
  if (SHIBYTE(v71[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v69, v71[1].__r_.__value_.__l.__data_, v71[1].__r_.__value_.__l.__size_);
  else
    v69 = v71[1];
  if (SHIBYTE(v73[0]) < 0)
  {
    std::string::__init_copy_ctor_external(&v68, (const std::string::value_type *)v72, *((std::string::size_type *)&v72 + 1));
  }
  else
  {
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v72;
    v68.__r_.__value_.__r.__words[2] = v73[0];
  }
  if (SHIBYTE(v73[3]) < 0)
    std::string::__init_copy_ctor_external(&v67, (const std::string::value_type *)v73[1], v73[2]);
  else
    v67 = *(std::string *)&v73[1];
  v8 = objc_msgSend(v6, "int64ForColumnIndex:", 4);
  v66 = objc_msgSend(v6, "int64ForColumnIndex:", 5);
  objc_msgSend(v6, "objectAtIndexedSubscript:", 6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = (void *)*((_QWORD *)v7 + 3);
    objc_msgSend(v6, "objectAtIndexedSubscript:", 6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKeyedSubscript:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "ML3NameOrderValue");
    *(_QWORD *)&v65 = v13;
    *((_QWORD *)&v65 + 1) = v14;

  }
  else
  {
    v13 = 0;
    v65 = *(_OWORD *)"";
  }

  objc_msgSend(v6, "objectAtIndexedSubscript:", 6);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
    v16 = v13 == 0;
  else
    v16 = 0;
  v17 = v16;

  if (v17)
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", 6);
    v18 = (NSString *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v65 = ML3ImportSession::_getNameOrderForString(v7, v18);
    *((_QWORD *)&v65 + 1) = v19;

  }
  objc_msgSend(v6, "objectAtIndexedSubscript:", 7);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    v21 = (void *)*((_QWORD *)v7 + 3);
    objc_msgSend(v6, "objectAtIndexedSubscript:", 7);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "objectForKeyedSubscript:", v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "ML3NameOrderValue");
    *(_QWORD *)&v64 = v24;
    *((_QWORD *)&v64 + 1) = v25;

  }
  else
  {
    v24 = 0;
    v64 = *(_OWORD *)"";
  }

  objc_msgSend(v6, "objectAtIndexedSubscript:", 7);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  if (v26)
    v27 = v24 == 0;
  else
    v27 = 0;
  v28 = v27;

  if (v28)
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", 7);
    v29 = (NSString *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)&v64 = ML3ImportSession::_getNameOrderForString(v7, v29);
    *((_QWORD *)&v64 + 1) = v30;

  }
  v63 = objc_msgSend(v6, "int64ForColumnIndex:", 8);
  v62 = objc_msgSend(v6, "intForColumnIndex:", 9) != 0;
  __p[0] = 0;
  __p[1] = 0;
  v57 = 0;
  v60 = 0;
  v61 = 0;
  std::allocate_shared[abi:ne180100]<ML3ArtistData,std::allocator<ML3ArtistData>,long long &,std::string &,std::string &,std::string &,std::string &,long long &,ML3NameOrder &,ML3NameOrder &,long long &,std::string,BOOL &,int,int,void>(v54, v8, (uint64_t)&v70, (uint64_t)&v69, (uint64_t)&v68, (uint64_t)&v67, &v66, (uint64_t *)&v65, (uint64_t *)&v64, &v63, (uint64_t)__p, (char *)&v62, &v61, &v60);
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*((_QWORD *)a1[5] + 1) + 48, (__int128 *)v54);
  isa = (std::__shared_weak_count *)v54[1].super.isa;
  if (v54[1].super.isa)
  {
    v32 = (unint64_t *)((char *)v54[1].super.isa + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))isa->__on_zero_shared)(isa);
      std::__shared_weak_count::__release_weak(isa);
    }
  }
  if (SHIBYTE(v57) < 0)
    operator delete(__p[0]);
  v34 = a1[4];
  if (v34)
  {
    ML3CPPStringFromData(v54, v34);
    v35 = *((_QWORD *)a1[5] + 1);
    *(_OWORD *)__p = *(_OWORD *)&v54[0].super.isa;
    v36 = v55;
    v54[0].super.isa = 0;
    v54[1].super.isa = 0;
    v55 = 0;
    v38 = *(_QWORD *)(v35 + 48);
    v37 = *(std::__shared_weak_count **)(v35 + 56);
    v57 = v36;
    v58 = v38;
    v59 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v40 = __ldxr(p_shared_owners);
      while (__stxr(v40 + 1, p_shared_owners));
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ArtistData>>>((uint64_t)v7 + 1088, (unsigned __int8 *)__p, (uint64_t)__p);
    v41 = v59;
    if (v59)
    {
      v42 = (unint64_t *)&v59->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (SHIBYTE(v57) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v55) < 0)
      operator delete(v54[0].super.isa);
  }
  v44 = (unint64_t)a1[7];
  if (v44)
  {
    v45 = *((_QWORD *)a1[5] + 1);
    v47 = *(void **)(v45 + 48);
    v46 = *(std::__shared_weak_count **)(v45 + 56);
    __p[0] = a1[7];
    __p[1] = v47;
    v57 = v46;
    if (v46)
    {
      v48 = (unint64_t *)&v46->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ArtistData>>>>::__emplace_unique_key_args<long long,std::pair<long long const,std::shared_ptr<ML3ArtistData>>>((uint64_t)v7 + 968, v44, (uint64_t)__p);
    v50 = v57;
    if (v57)
    {
      v51 = (unint64_t *)&v57->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  *a4 = 1;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v73[i + 3]) < 0)
      operator delete((void *)v73[i + 1]);
  }

}

void sub_1AC368294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  if (a51 < 0)
    operator delete(__p);
  if (a58 < 0)
    operator delete(a53);
  if (*(char *)(v59 - 201) < 0)
    operator delete(*(void **)(v59 - 224));
  v61 = 0;
  v62 = v59 - 192;
  while (1)
  {
    if (*(char *)(v62 + v61 + 95) < 0)
      operator delete(*(void **)(v62 + v61 + 72));
    v61 -= 24;
    if (v61 == -96)
    {

      _Unwind_Resume(a1);
    }
  }
}

uint64_t __copy_helper_block_ea8_104c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(result + 112) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_104c41_ZTSNSt3__110shared_ptrI13ML3ImportItemEE(uint64_t a1)
{
  return std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 104);
}

void ___ZN16ML3ImportSession21_getDefaultEmptyGenreEv_block_invoke()
{
  char *v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  __int128 v4;

  v0 = (char *)operator new(0x50uLL);
  *((_QWORD *)v0 + 1) = 0;
  *((_QWORD *)v0 + 2) = 0;
  *(_QWORD *)v0 = &off_1E5B512D0;
  *(_OWORD *)(v0 + 56) = *(_OWORD *)"";
  *(_OWORD *)(v0 + 40) = 0u;
  *((_QWORD *)v0 + 9) = 0;
  *((_QWORD *)&v4 + 1) = v0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_QWORD *)&v4 = v0 + 24;
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)&ML3ImportSession::_getDefaultEmptyGenre(void)::__emptyGenreData, &v4);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<ML3GenreData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B512D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3GenreData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B512D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

void std::__shared_ptr_emplace<ML3GenreData>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void std::__shared_ptr_emplace<ML3GenreImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B513E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3GenreImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B513E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_emplace<ML3GenreImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 __Block_byref_object_copy__292(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__293(uint64_t a1)
{
  return std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 48);
}

void ___ZN16ML3ImportSession21_getExistingGenreInfoEP6NSDatax_block_invoke(unint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t NameOrderForString;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSString *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  std::string *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  void **v34;
  void *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  float v39;
  float v40;
  _BOOL8 v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  _QWORD **v52;
  _QWORD *i;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  float v57;
  float v58;
  _BOOL8 v59;
  unint64_t v60;
  unint64_t v61;
  int8x8_t prime;
  void *v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint8x8_t v68;
  unint64_t v69;
  uint8x8_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  void *v77;
  id v78;
  void *__p[2];
  uint64_t v80;
  std::string v81;
  std::string v82;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 48);
  memset(&v81, 0, sizeof(v81));
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v5, (uint64_t)&v81, 1uLL);
  objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    v9 = *(void **)(v7 + 24);
    objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "objectForKeyedSubscript:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    NameOrderForString = objc_msgSend(v11, "ML3NameOrderValue");
    v14 = v13;

  }
  else
  {
    NameOrderForString = 0;
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  }

  objc_msgSend(v5, "objectAtIndexedSubscript:", 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 && !NameOrderForString)
  {
    objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
    v16 = (NSString *)objc_claimAutoreleasedReturnValue();
    NameOrderForString = ML3ImportSession::_getNameOrderForString((ML3ImportSession *)v7, v16);
    v14 = v17;

  }
  v18 = objc_msgSend(v5, "int64ForColumnIndex:", 2);
  objc_msgSend(v5, "objectAtIndexedSubscript:", 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "longLongValue");
  v21 = operator new(0x50uLL);
  v21[1] = 0;
  v21[2] = 0;
  *v21 = &off_1E5B512D0;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v82, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
  else
    v82 = v81;
  v21[3] = v20;
  v22 = (std::string *)(v21 + 4);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
  {
    v20 = v82.__r_.__value_.__r.__words[0];
    std::string::__init_copy_ctor_external(v22, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
    v21[7] = NameOrderForString;
    v21[8] = v14;
    v21[9] = v18;
    operator delete((void *)v20);
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
    v21[6] = *((_QWORD *)&v82.__r_.__value_.__l + 2);
    v21[7] = NameOrderForString;
    v21[8] = v14;
    v21[9] = v18;
  }
  __p[0] = v21 + 3;
  __p[1] = v21;
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, (__int128 *)__p);
  v23 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v24 = (unint64_t *)((char *)__p[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  v26 = *(void **)(a1 + 32);
  if (!v26)
    goto LABEL_60;
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v78 = v6;
  ML3CPPStringFromData((NSData *)__p, v26);
  v28 = (uint64_t *)(v7 + 1208);
  v29 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
  v30 = v29;
  v31 = *(_QWORD *)(v7 + 1216);
  if (!v31)
    goto LABEL_36;
  v32 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
  v32.i16[0] = vaddlv_u8(v32);
  v33 = v32.u32[0];
  if (v32.u32[0] > 1uLL)
  {
    v20 = v29;
    if (v29 >= v31)
      v20 = v29 % v31;
  }
  else
  {
    v20 = (v31 - 1) & v29;
  }
  v34 = *(void ***)(*v28 + 8 * v20);
  if (!v34 || (v35 = *v34) == 0)
  {
LABEL_36:
    v35 = operator new(0x38uLL);
    v37 = (_QWORD *)(v7 + 1224);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    v82.__r_.__value_.__l.__size_ = v7 + 1224;
    *(_QWORD *)v35 = 0;
    *((_QWORD *)v35 + 1) = v30;
    v38 = v80;
    *((_OWORD *)v35 + 1) = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v80 = 0;
    *((_QWORD *)v35 + 5) = 0;
    *((_QWORD *)v35 + 6) = 0;
    *((_QWORD *)v35 + 4) = v38;
    v82.__r_.__value_.__s.__data_[16] = 1;
    v39 = (float)(unint64_t)(*(_QWORD *)(v7 + 1232) + 1);
    v40 = *(float *)(v7 + 1240);
    if (!v31 || (float)(v40 * (float)v31) < v39)
    {
      v41 = 1;
      if (v31 >= 3)
        v41 = (v31 & (v31 - 1)) != 0;
      v42 = v41 | (2 * v31);
      v43 = vcvtps_u32_f32(v39 / v40);
      if (v42 <= v43)
        v44 = v43;
      else
        v44 = v42;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(v7 + 1208, v44);
      v31 = *(_QWORD *)(v7 + 1216);
      if ((v31 & (v31 - 1)) != 0)
      {
        if (v30 >= v31)
          v20 = v30 % v31;
        else
          v20 = v30;
      }
      else
      {
        v20 = (v31 - 1) & v30;
      }
    }
    v45 = *v28;
    v46 = *(_QWORD **)(*v28 + 8 * v20);
    if (v46)
    {
      *(_QWORD *)v35 = *v46;
      v6 = v78;
    }
    else
    {
      *(_QWORD *)v35 = *v37;
      *v37 = v35;
      *(_QWORD *)(v45 + 8 * v20) = v37;
      v6 = v78;
      if (!*(_QWORD *)v35)
      {
LABEL_57:
        v82.__r_.__value_.__r.__words[0] = 0;
        ++*(_QWORD *)(v7 + 1232);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v82);
        goto LABEL_58;
      }
      v47 = *(_QWORD *)(*(_QWORD *)v35 + 8);
      if ((v31 & (v31 - 1)) != 0)
      {
        if (v47 >= v31)
          v47 %= v31;
      }
      else
      {
        v47 &= v31 - 1;
      }
      v46 = (_QWORD *)(*v28 + 8 * v47);
    }
    *v46 = v35;
    goto LABEL_57;
  }
  while (1)
  {
    v36 = *((_QWORD *)v35 + 1);
    if (v36 == v30)
      break;
    if (v33 > 1)
    {
      if (v36 >= v31)
        v36 %= v31;
    }
    else
    {
      v36 &= v31 - 1;
    }
    if (v36 != v20)
      goto LABEL_36;
LABEL_35:
    v35 = *(void **)v35;
    if (!v35)
      goto LABEL_36;
  }
  if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v35 + 16, (unsigned __int8 *)__p))
    goto LABEL_35;
  v6 = v78;
LABEL_58:
  std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)v35 + 5, *(_QWORD *)(v27 + 48), *(_QWORD *)(v27 + 56));
  if (SHIBYTE(v80) < 0)
    operator delete(__p[0]);
LABEL_60:
  v48 = *(_QWORD *)(a1 + 56);
  if (v48)
  {
    v49 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v50 = *(_QWORD *)(v7 + 896);
    if (v50)
    {
      v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
      v51.i16[0] = vaddlv_u8(v51);
      if (v51.u32[0] > 1uLL)
      {
        a1 = *(_QWORD *)(a1 + 56);
        if (v48 >= v50)
          a1 = v48 % v50;
      }
      else
      {
        a1 = (v50 - 1) & v48;
      }
      v52 = *(_QWORD ***)(*(_QWORD *)(v7 + 888) + 8 * a1);
      if (v52)
      {
        for (i = *v52; i; i = (_QWORD *)*i)
        {
          v54 = i[1];
          if (v54 == v48)
          {
            if (i[2] == v48)
              goto LABEL_134;
          }
          else
          {
            if (v51.u32[0] > 1uLL)
            {
              if (v54 >= v50)
                v54 %= v50;
            }
            else
            {
              v54 &= v50 - 1;
            }
            if (v54 != a1)
              break;
          }
        }
      }
    }
    v55 = operator new(0x28uLL);
    v56 = (_QWORD *)(v7 + 904);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
    v82.__r_.__value_.__l.__size_ = v7 + 904;
    *v55 = 0;
    v55[1] = v48;
    v55[3] = 0;
    v55[4] = 0;
    v55[2] = v48;
    v82.__r_.__value_.__s.__data_[16] = 1;
    v57 = (float)(unint64_t)(*(_QWORD *)(v7 + 912) + 1);
    v58 = *(float *)(v7 + 920);
    if (!v50 || (float)(v58 * (float)v50) < v57)
    {
      v59 = 1;
      if (v50 >= 3)
        v59 = (v50 & (v50 - 1)) != 0;
      v60 = v59 | (2 * v50);
      v61 = vcvtps_u32_f32(v57 / v58);
      if (v60 <= v61)
        prime = (int8x8_t)v61;
      else
        prime = (int8x8_t)v60;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v50 = *(_QWORD *)(v7 + 896);
      }
      if (*(_QWORD *)&prime <= v50)
      {
        if (*(_QWORD *)&prime < v50)
        {
          v69 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 912) / *(float *)(v7 + 920));
          if (v50 < 3 || (v70 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v70.i16[0] = vaddlv_u8(v70), v70.u32[0] > 1uLL))
          {
            v69 = std::__next_prime(v69);
          }
          else
          {
            v71 = 1 << -(char)__clz(v69 - 1);
            if (v69 >= 2)
              v69 = v71;
          }
          if (*(_QWORD *)&prime <= v69)
            prime = (int8x8_t)v69;
          if (*(_QWORD *)&prime >= v50)
          {
            v50 = *(_QWORD *)(v7 + 896);
          }
          else
          {
            if (prime)
              goto LABEL_90;
            v77 = *(void **)(v7 + 888);
            *(_QWORD *)(v7 + 888) = 0;
            if (v77)
              operator delete(v77);
            v50 = 0;
            *(_QWORD *)(v7 + 896) = 0;
          }
        }
      }
      else
      {
LABEL_90:
        if (*(_QWORD *)&prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v63 = operator new(8 * *(_QWORD *)&prime);
        v64 = *(void **)(v7 + 888);
        *(_QWORD *)(v7 + 888) = v63;
        if (v64)
          operator delete(v64);
        v65 = 0;
        *(int8x8_t *)(v7 + 896) = prime;
        do
          *(_QWORD *)(*(_QWORD *)(v7 + 888) + 8 * v65++) = 0;
        while (*(_QWORD *)&prime != v65);
        v66 = (_QWORD *)*v56;
        if (*v56)
        {
          v67 = v66[1];
          v68 = (uint8x8_t)vcnt_s8(prime);
          v68.i16[0] = vaddlv_u8(v68);
          if (v68.u32[0] > 1uLL)
          {
            if (v67 >= *(_QWORD *)&prime)
              v67 %= *(_QWORD *)&prime;
          }
          else
          {
            v67 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(*(_QWORD *)(v7 + 888) + 8 * v67) = v56;
          v72 = (_QWORD *)*v66;
          if (*v66)
          {
            do
            {
              v73 = v72[1];
              if (v68.u32[0] > 1uLL)
              {
                if (v73 >= *(_QWORD *)&prime)
                  v73 %= *(_QWORD *)&prime;
              }
              else
              {
                v73 &= *(_QWORD *)&prime - 1;
              }
              if (v73 != v67)
              {
                v74 = *(_QWORD *)(v7 + 888);
                if (!*(_QWORD *)(v74 + 8 * v73))
                {
                  *(_QWORD *)(v74 + 8 * v73) = v66;
                  goto LABEL_115;
                }
                *v66 = *v72;
                *v72 = **(_QWORD **)(*(_QWORD *)(v7 + 888) + 8 * v73);
                **(_QWORD **)(*(_QWORD *)(v7 + 888) + 8 * v73) = v72;
                v72 = v66;
              }
              v73 = v67;
LABEL_115:
              v66 = v72;
              v72 = (_QWORD *)*v72;
              v67 = v73;
            }
            while (v72);
          }
        }
        v50 = (unint64_t)prime;
      }
      if ((v50 & (v50 - 1)) != 0)
      {
        if (v48 >= v50)
          a1 = v48 % v50;
        else
          a1 = v48;
      }
      else
      {
        a1 = (v50 - 1) & v48;
      }
    }
    v75 = *(_QWORD **)(*(_QWORD *)(v7 + 888) + 8 * a1);
    i = (_QWORD *)v82.__r_.__value_.__r.__words[0];
    if (v75)
    {
      *(_QWORD *)v82.__r_.__value_.__l.__data_ = *v75;
      goto LABEL_132;
    }
    *(_QWORD *)v82.__r_.__value_.__l.__data_ = *(_QWORD *)(v7 + 904);
    *(_QWORD *)(v7 + 904) = i;
    *(_QWORD *)(*(_QWORD *)(v7 + 888) + 8 * a1) = v56;
    if (*i)
    {
      v76 = *(_QWORD *)(*i + 8);
      if ((v50 & (v50 - 1)) != 0)
      {
        if (v76 >= v50)
          v76 %= v50;
      }
      else
      {
        v76 &= v50 - 1;
      }
      v75 = (_QWORD *)(*(_QWORD *)(v7 + 888) + 8 * v76);
LABEL_132:
      *v75 = i;
    }
    v82.__r_.__value_.__r.__words[0] = 0;
    ++*(_QWORD *)(v7 + 912);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v82);
LABEL_134:
    std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](i + 3, *(_QWORD *)(v49 + 48), *(_QWORD *)(v49 + 56));
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);

}

void sub_1AC368E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  void *v23;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a23);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession24_getDefaultEmptyComposerEv_block_invoke()
{
  char *v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  __int128 v4;

  v0 = (char *)operator new(0x68uLL);
  *((_QWORD *)v0 + 1) = 0;
  *((_QWORD *)v0 + 2) = 0;
  *(_QWORD *)v0 = &off_1E5B51340;
  *((_OWORD *)v0 + 5) = *(_OWORD *)"";
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *((_QWORD *)v0 + 9) = 0;
  *((_QWORD *)v0 + 12) = 0;
  *((_QWORD *)&v4 + 1) = v0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_QWORD *)&v4 = v0 + 24;
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)&ML3ImportSession::_getDefaultEmptyComposer(void)::__emptyComposerData, &v4);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<ML3ComposerData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3ComposerData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51340;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

void std::__shared_ptr_emplace<ML3ComposerData>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

__n128 __Block_byref_object_copy__278(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__279(uint64_t a1)
{
  return std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 48);
}

void ___ZN16ML3ImportSession16_getComposerInfoENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t PropertyIndex;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int shouldPreserveTrackProperty;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t i;
  void *v30;
  void *v31;
  __int128 v32;
  std::string v33;
  _QWORD v34[2];
  std::string v35;
  std::string v36;
  uint64_t v37;
  std::string __str[2];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(_QWORD *)(a1 + 80);
  memset(__str, 0, sizeof(__str));
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v3, (uint64_t)__str, 2uLL);
  if (!*(_BYTE *)(a1 + 112))
    std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), __str);
  if (!*(_BYTE *)(a1 + 113))
    std::string::operator=((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48), &__str[1]);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v3, "int64ForColumnIndex:", 2);
  objc_msgSend(v3, "dataForColumnIndex:", 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v3, "int64ForColumnIndex:", 4);
  v7 = *(void **)(v4 + 8);
  ML3CPPBridgeString((const UInt8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "groupingKeyForString:", v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  v12 = *(int *)(v4 + 32);
  PropertyIndex = ML3TrackRulesGetPropertyIndex(1, 16777231);
  if (_ML3InitializeTrackRulesIfNeeded___once != -1)
    dispatch_once(&_ML3InitializeTrackRulesIfNeeded___once, &__block_literal_global_67);
  if (*(_DWORD *)(__itemRules + 56 * PropertyIndex + 4 * v12) == -1
    || (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "isEqualToData:", v5) & 1) != 0)
  {
    goto LABEL_17;
  }
  v14 = *(std::__shared_weak_count **)(a1 + 96);
  v34[0] = *(_QWORD *)(a1 + 88);
  v34[1] = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  shouldPreserveTrackProperty = ML3ImportSession::_shouldPreserveTrackProperty(v4, (uint64_t)v34, 0x100000Fu);
  v18 = shouldPreserveTrackProperty;
  if (!v14)
    goto LABEL_16;
  v19 = (unint64_t *)&v14->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((v18 & 1) != 0)
      goto LABEL_17;
  }
  else
  {
LABEL_16:
    if (shouldPreserveTrackProperty)
    {
LABEL_17:
      if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v33, __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
      else
        v33 = __str[1];
      v21 = objc_msgSend(*(id *)(a1 + 32), "longLongValue");
      v22 = ML3ImportSession::_effectiveNameOrderForSortNameAndFallback(v4, (uint64_t)&v33, (uint64_t)__str);
      v24 = v23;
      v25 = operator new(0x68uLL);
      v25[1] = 0;
      v25[2] = 0;
      *v25 = &off_1E5B51340;
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v36, __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
      else
        v36 = __str[0];
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v35, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
      else
        v35 = v33;
      ML3ComposerData::ML3ComposerData((uint64_t)(v25 + 3), v21, (__int128 *)&v36, (__int128 *)&v35, v22, v24, v6);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      *(_QWORD *)&v32 = v25 + 3;
      *((_QWORD *)&v32 + 1) = v25;
      std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 48, &v32);
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      goto LABEL_37;
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) == *(_QWORD *)(a1 + 104))
  {
    v30 = *(void **)(v4 + 16);
    v37 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v37, 1);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "executeUpdate:withParameters:error:", CFSTR("UPDATE composer SET representative_item_pid=0 WHERE composer_pid=?"), v31, 0);

  }
LABEL_37:

  for (i = 0; i != 0x1FFFFFFFFFFFFFFALL; i -= 3)
  {
    if (SHIBYTE(__str[1].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(__str[i / 3 + 1].__r_.__value_.__l.__data_);
  }

}

void sub_1AC36947C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34)
{
  void *v34;
  void *v35;
  void *v36;
  uint64_t v38;

  v38 = 0;
  while (1)
  {
    if (*(&a34 + v38 + 47) < 0)
      operator delete(*(void **)(&a34 + v38 + 24));
    v38 -= 24;
    if (v38 == -48)
    {

      _Unwind_Resume(a1);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ComposerData>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  _QWORD v39[2];
  char v40;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x38uLL);
  v39[0] = v16;
  v39[1] = a1 + 16;
  v40 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v40 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(void **)a1;
          *(_QWORD *)a1 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v15;
          if (*v15)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v15;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v27;
                    goto LABEL_58;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_58:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v38 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v38)
          operator delete(v38);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v36 = v39[0];
  if (v35)
  {
    *(_QWORD *)v39[0] = *v35;
LABEL_75:
    *v35 = v36;
    goto LABEL_76;
  }
  *(_QWORD *)v39[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v36;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)v36)
  {
    v37 = *(_QWORD *)(*(_QWORD *)v36 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9)
        v37 %= v9;
    }
    else
    {
      v37 &= v9 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  v39[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
}

void sub_1AC36999C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<ML3AlbumData>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ML3ComposerImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3ComposerImportItem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51490;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_emplace<ML3ComposerImportItem>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ML3ComposerData::ML3ComposerData(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v12;
  std::string *v13;
  __int128 v14;

  *(_QWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v12 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v12;
  }
  v13 = (std::string *)(a1 + 32);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v14 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  *(_QWORD *)(a1 + 56) = a5;
  *(_QWORD *)(a1 + 64) = a6;
  *(_QWORD *)(a1 + 72) = a7;
  return a1;
}

void sub_1AC369AA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ___ZN16ML3ImportSession24_getExistingComposerInfoEP6NSDatax_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t NameOrderForString;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  int v18;
  NSString *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  std::string::size_type v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::string::size_type v35;
  uint64_t v36;
  std::string::size_type v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  _QWORD *v43;
  _QWORD *i;
  unint64_t v45;
  char *v46;
  _QWORD *v47;
  float v48;
  float v49;
  _BOOL8 v50;
  unint64_t v51;
  unint64_t v52;
  int8x8_t prime;
  void *v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint8x8_t v59;
  unint64_t v60;
  uint8x8_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  std::string::size_type *v66;
  std::string::size_type v67;
  unint64_t v68;
  unint64_t j;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  std::string __p;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80[2];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1[6];
  memset(v80, 0, sizeof(v80));
  ML3DatabaseRowGetHomogeneousColumns<std::string>(v3, (uint64_t)v80, 2uLL);
  if (SHIBYTE(v80[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v78, v80[0].__r_.__value_.__l.__data_, v80[0].__r_.__value_.__l.__size_);
  else
    v78 = v80[0];
  if (SHIBYTE(v80[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v77, v80[1].__r_.__value_.__l.__data_, v80[1].__r_.__value_.__l.__size_);
  else
    v77 = v80[1];
  objc_msgSend(v3, "objectAtIndexedSubscript:", 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "longLongValue");

  objc_msgSend(v3, "objectAtIndexedSubscript:", 4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "longLongValue");

  objc_msgSend(v3, "objectAtIndexedSubscript:", 3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = *(void **)(v4 + 24);
    objc_msgSend(v3, "objectAtIndexedSubscript:", 3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKeyedSubscript:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    NameOrderForString = objc_msgSend(v12, "ML3NameOrderValue");
    v15 = v14;

  }
  else
  {
    NameOrderForString = 0;
    v15 = 0x7FFFFFFFFFFFFFFFLL;
  }

  objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16)
    v17 = NameOrderForString == 0;
  else
    v17 = 0;
  v18 = v17;

  if (v18)
  {
    objc_msgSend(v3, "objectAtIndexedSubscript:", 3);
    v19 = (NSString *)objc_claimAutoreleasedReturnValue();
    NameOrderForString = ML3ImportSession::_getNameOrderForString((ML3ImportSession *)v4, v19);
    v15 = v20;

  }
  v21 = (uint64_t)operator new(0x68uLL);
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)v21 = &off_1E5B51340;
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  else
    __p = v78;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v79, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  else
    v79 = v77;
  ML3ComposerData::ML3ComposerData(v21 + 24, v6, (__int128 *)&__p, (__int128 *)&v79, NameOrderForString, v15, v8);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v76 = v21 + 24;
  *((_QWORD *)&v76 + 1) = v21;
  std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](*(_QWORD *)(a1[5] + 8) + 48, &v76);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (void *)a1[4];
  if (v25)
  {
    ML3CPPStringFromData((NSData *)&v79, v25);
    v26 = *(_QWORD *)(a1[5] + 8);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
    v27 = v79.__r_.__value_.__r.__words[2];
    memset(&v79, 0, sizeof(v79));
    v29 = *(_QWORD *)(v26 + 48);
    v28 = *(std::__shared_weak_count **)(v26 + 56);
    __p.__r_.__value_.__r.__words[2] = v27;
    v74 = v29;
    v75 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v31 = __ldxr(p_shared_owners);
      while (__stxr(v31 + 1, p_shared_owners));
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ComposerData>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<ML3ComposerData>>>(v4 + 1168, (unsigned __int8 *)&__p, (uint64_t)&__p);
    v32 = v75;
    if (v75)
    {
      v33 = (unint64_t *)&v75->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
  }
  v35 = a1[7];
  if (v35)
  {
    v36 = *(_QWORD *)(a1[5] + 8);
    v37 = *(_QWORD *)(v36 + 48);
    v38 = *(std::__shared_weak_count **)(v36 + 56);
    v79.__r_.__value_.__r.__words[0] = v35;
    v79.__r_.__value_.__l.__size_ = v37;
    v79.__r_.__value_.__r.__words[2] = (std::string::size_type)v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = *(_QWORD *)(v4 + 936);
    if (v41)
    {
      v42 = (uint8x8_t)vcnt_s8((int8x8_t)v41);
      v42.i16[0] = vaddlv_u8(v42);
      if (v42.u32[0] > 1uLL)
      {
        v21 = v35;
        if (v35 >= v41)
          v21 = v35 % v41;
      }
      else
      {
        v21 = (v41 - 1) & v35;
      }
      v43 = *(_QWORD **)(*(_QWORD *)(v4 + 928) + 8 * v21);
      if (v43)
      {
        for (i = (_QWORD *)*v43; i; i = (_QWORD *)*i)
        {
          v45 = i[1];
          if (v45 == v35)
          {
            if (i[2] == v35)
            {
              if (v38)
              {
                v70 = (unint64_t *)&v38->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
              }
              goto LABEL_123;
            }
          }
          else
          {
            if (v42.u32[0] > 1uLL)
            {
              if (v45 >= v41)
                v45 %= v41;
            }
            else
            {
              v45 &= v41 - 1;
            }
            if (v45 != v21)
              break;
          }
        }
      }
    }
    v46 = (char *)operator new(0x28uLL);
    v47 = (_QWORD *)(v4 + 944);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
    __p.__r_.__value_.__l.__size_ = v4 + 944;
    *(_QWORD *)v46 = 0;
    *((_QWORD *)v46 + 1) = v35;
    *((_QWORD *)v46 + 2) = v35;
    *(_OWORD *)(v46 + 24) = *(_OWORD *)&v79.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v79.__r_.__value_.__r.__words[1] = 0uLL;
    __p.__r_.__value_.__s.__data_[16] = 1;
    v48 = (float)(unint64_t)(*(_QWORD *)(v4 + 952) + 1);
    v49 = *(float *)(v4 + 960);
    if (v41 && (float)(v49 * (float)v41) >= v48)
    {
LABEL_113:
      v66 = *(std::string::size_type **)(*(_QWORD *)(v4 + 928) + 8 * v21);
      v67 = __p.__r_.__value_.__r.__words[0];
      if (v66)
      {
        *(_QWORD *)__p.__r_.__value_.__l.__data_ = *v66;
      }
      else
      {
        *(_QWORD *)__p.__r_.__value_.__l.__data_ = *(_QWORD *)(v4 + 944);
        *(_QWORD *)(v4 + 944) = v67;
        *(_QWORD *)(*(_QWORD *)(v4 + 928) + 8 * v21) = v47;
        if (!*(_QWORD *)v67)
        {
LABEL_122:
          __p.__r_.__value_.__r.__words[0] = 0;
          ++*(_QWORD *)(v4 + 952);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
          goto LABEL_123;
        }
        v68 = *(_QWORD *)(*(_QWORD *)v67 + 8);
        if ((v41 & (v41 - 1)) != 0)
        {
          if (v68 >= v41)
            v68 %= v41;
        }
        else
        {
          v68 &= v41 - 1;
        }
        v66 = (std::string::size_type *)(*(_QWORD *)(v4 + 928) + 8 * v68);
      }
      *v66 = v67;
      goto LABEL_122;
    }
    v50 = 1;
    if (v41 >= 3)
      v50 = (v41 & (v41 - 1)) != 0;
    v51 = v50 | (2 * v41);
    v52 = vcvtps_u32_f32(v48 / v49);
    if (v51 <= v52)
      prime = (int8x8_t)v52;
    else
      prime = (int8x8_t)v51;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v41 = *(_QWORD *)(v4 + 936);
    }
    if (*(_QWORD *)&prime > v41)
      goto LABEL_79;
    if (*(_QWORD *)&prime < v41)
    {
      v60 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 952) / *(float *)(v4 + 960));
      if (v41 < 3 || (v61 = (uint8x8_t)vcnt_s8((int8x8_t)v41), v61.i16[0] = vaddlv_u8(v61), v61.u32[0] > 1uLL))
      {
        v60 = std::__next_prime(v60);
      }
      else
      {
        v62 = 1 << -(char)__clz(v60 - 1);
        if (v60 >= 2)
          v60 = v62;
      }
      if (*(_QWORD *)&prime <= v60)
        prime = (int8x8_t)v60;
      if (*(_QWORD *)&prime >= v41)
      {
        v41 = *(_QWORD *)(v4 + 936);
      }
      else
      {
        if (prime)
        {
LABEL_79:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v54 = operator new(8 * *(_QWORD *)&prime);
          v55 = *(void **)(v4 + 928);
          *(_QWORD *)(v4 + 928) = v54;
          if (v55)
            operator delete(v55);
          v56 = 0;
          *(int8x8_t *)(v4 + 936) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(v4 + 928) + 8 * v56++) = 0;
          while (*(_QWORD *)&prime != v56);
          v57 = (_QWORD *)*v47;
          if (*v47)
          {
            v58 = v57[1];
            v59 = (uint8x8_t)vcnt_s8(prime);
            v59.i16[0] = vaddlv_u8(v59);
            if (v59.u32[0] > 1uLL)
            {
              if (v58 >= *(_QWORD *)&prime)
                v58 %= *(_QWORD *)&prime;
            }
            else
            {
              v58 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(v4 + 928) + 8 * v58) = v47;
            v63 = (_QWORD *)*v57;
            if (*v57)
            {
              do
              {
                v64 = v63[1];
                if (v59.u32[0] > 1uLL)
                {
                  if (v64 >= *(_QWORD *)&prime)
                    v64 %= *(_QWORD *)&prime;
                }
                else
                {
                  v64 &= *(_QWORD *)&prime - 1;
                }
                if (v64 != v58)
                {
                  v65 = *(_QWORD *)(v4 + 928);
                  if (!*(_QWORD *)(v65 + 8 * v64))
                  {
                    *(_QWORD *)(v65 + 8 * v64) = v57;
                    goto LABEL_104;
                  }
                  *v57 = *v63;
                  *v63 = **(_QWORD **)(*(_QWORD *)(v4 + 928) + 8 * v64);
                  **(_QWORD **)(*(_QWORD *)(v4 + 928) + 8 * v64) = v63;
                  v63 = v57;
                }
                v64 = v58;
LABEL_104:
                v57 = v63;
                v63 = (_QWORD *)*v63;
                v58 = v64;
              }
              while (v63);
            }
          }
          v41 = (unint64_t)prime;
          goto LABEL_108;
        }
        v72 = *(void **)(v4 + 928);
        *(_QWORD *)(v4 + 928) = 0;
        if (v72)
          operator delete(v72);
        v41 = 0;
        *(_QWORD *)(v4 + 936) = 0;
      }
    }
LABEL_108:
    if ((v41 & (v41 - 1)) != 0)
    {
      if (v35 >= v41)
        v21 = v35 % v41;
      else
        v21 = v35;
    }
    else
    {
      v21 = (v41 - 1) & v35;
    }
    goto LABEL_113;
  }
LABEL_123:
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  for (j = 0; j != 0x1FFFFFFFFFFFFFFALL; j -= 3)
  {
    if (SHIBYTE(v80[1].__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(v80[j / 3 + 1].__r_.__value_.__l.__data_);
  }

}

void sub_1AC36A2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  void *v43;
  uint64_t v44;
  uint64_t v45;

  if (a14 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v40);
  operator delete(v43);
  if (a25 < 0)
    operator delete(a20);
  if (a32 < 0)
    operator delete(a27);
  v44 = 0;
  v45 = v41 - 144;
  while (1)
  {
    if (*(char *)(v45 + v44 + 47) < 0)
      operator delete(*(void **)(v45 + v44 + 24));
    v44 -= 24;
    if (v44 == -48)
    {

      _Unwind_Resume(a1);
    }
  }
}

uint64_t ML3ImportSession::updateTrack(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  NSObject *v8;
  void **v9;
  uint64_t result;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t TrackPersistentID;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  char v44;
  char v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  NSObject *v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  __int128 v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  char *v72;
  __int128 v73;
  int64x2_t v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  char *v89;
  __int128 v90;
  int64x2_t v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  int v107;
  _QWORD v108[2];
  uint64_t v109[2];
  _QWORD v110[2];
  _QWORD v111[2];
  uint64_t v112[2];
  uint64_t v113[2];
  void *__p[2];
  char v115;
  _BYTE buf[24];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v8 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 88))(__p);
    v9 = v115 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a4;
    _os_log_impl(&dword_1AC149000, v8, OS_LOG_TYPE_DEFAULT, "update track %{public}s, processCollectionsAsStandaloneEntities=%{BOOL}u, ignoreNonExistingTrack=%{BOOL}u", buf, 0x18u);
    if (v115 < 0)
      operator delete(__p[0]);
  }

  ++*(_DWORD *)(a1 + 156);
  if (!objc_msgSend(*(id *)(a1 + 1576), "count"))
  {
    if (*(_QWORD *)(a1 + 1536) == *(_QWORD *)(a1 + 1528) || (a3 & 1) != 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  if ((a3 & 1) == 0)
  {
LABEL_12:
    result = ML3ImportSession::flush((ML3ImportSession *)a1, 0);
    if (!(_DWORD)result)
      return result;
LABEL_13:
    if (a3)
      goto LABEL_14;
    v33 = (std::__shared_weak_count *)a2[1];
    v110[0] = *a2;
    v110[1] = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(p_shared_owners);
      while (__stxr(v35 + 1, p_shared_owners));
    }
    TrackPersistentID = ML3ImportSession::_getTrackPersistentID(a1, v110);
    v37 = TrackPersistentID;
    if (!v33)
      goto LABEL_42;
    v38 = (unint64_t *)&v33->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      if (v37)
      {
LABEL_43:
        v40 = *a2;
        *(_QWORD *)(v40 + 8) = v37;
        *(_BYTE *)(v40 + 16) = 1;
        v41 = (std::__shared_weak_count *)a2[1];
        v109[0] = v40;
        v109[1] = (uint64_t)v41;
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        v44 = ML3ImportSession::_prepareTrackData(a1, v109, 0);
        v45 = v44;
        if (!v41)
          goto LABEL_50;
        v46 = (unint64_t *)&v41->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
          if ((v45 & 1) != 0)
          {
LABEL_51:
            v48 = *(void **)(a1 + 1584);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v37);
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v48, "addObject:", v49);

            v50 = *(uint64_t **)(a1 + 1560);
            v51 = *(_QWORD *)(a1 + 1568);
            if ((unint64_t)v50 >= v51)
            {
              v76 = *(_QWORD *)(a1 + 1552);
              v77 = ((uint64_t)v50 - v76) >> 4;
              v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 60)
                std::vector<long long>::__throw_length_error[abi:ne180100]();
              v79 = v51 - v76;
              if (v79 >> 3 > v78)
                v78 = v79 >> 3;
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
                v80 = 0xFFFFFFFFFFFFFFFLL;
              else
                v80 = v78;
              v118 = a1 + 1568;
              v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v80);
              v83 = &v81[16 * v77];
              v84 = *(_OWORD *)a2;
              *(_OWORD *)v83 = *(_OWORD *)a2;
              if (*((_QWORD *)&v84 + 1))
              {
                v85 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
                do
                  v86 = __ldxr(v85);
                while (__stxr(v86 + 1, v85));
              }
              v87 = *(_QWORD **)(a1 + 1560);
              v88 = *(_QWORD **)(a1 + 1552);
              if (v87 == v88)
              {
                v91 = vdupq_n_s64((unint64_t)v87);
                v89 = &v81[16 * v77];
              }
              else
              {
                v89 = &v81[16 * v77];
                do
                {
                  v90 = *((_OWORD *)v87 - 1);
                  v87 -= 2;
                  *((_OWORD *)v89 - 1) = v90;
                  v89 -= 16;
                  *v87 = 0;
                  v87[1] = 0;
                }
                while (v87 != v88);
                v91 = *(int64x2_t *)(a1 + 1552);
              }
              v55 = v83 + 16;
              *(_QWORD *)(a1 + 1552) = v89;
              *(_QWORD *)(a1 + 1560) = v83 + 16;
              *(int64x2_t *)&buf[8] = v91;
              v100 = *(_QWORD *)(a1 + 1568);
              *(_QWORD *)(a1 + 1568) = &v81[16 * v82];
              v117 = v100;
              *(_QWORD *)buf = v91.i64[0];
              std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              *v50 = *a2;
              v52 = a2[1];
              v50[1] = v52;
              if (v52)
              {
                v53 = (unint64_t *)(v52 + 8);
                do
                  v54 = __ldxr(v53);
                while (__stxr(v54 + 1, v53));
              }
              v55 = v50 + 2;
            }
            *(_QWORD *)(a1 + 1560) = v55;
            v101 = *a2;
            v102 = (std::__shared_weak_count *)a2[1];
            v108[0] = v101;
            v108[1] = v102;
            if (v102)
            {
              v103 = (unint64_t *)&v102->__shared_owners_;
              do
                v104 = __ldxr(v103);
              while (__stxr(v104 + 1, v103));
            }
            ML3ImportSession::_addTrackDataToSourceMaps(a1, v108);
            if (v102)
            {
              v105 = (unint64_t *)&v102->__shared_owners_;
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            if (*(_QWORD *)(a1 + 1560) - *(_QWORD *)(a1 + 1552) >= 0x3E71uLL)
            {
              v107 = _os_feature_enabled_impl();
              return ML3ImportSession::flush((ML3ImportSession *)a1, v107);
            }
            return 1;
          }
        }
        else
        {
LABEL_50:
          if ((v44 & 1) != 0)
            goto LABEL_51;
        }
        v92 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1AC149000, v92, OS_LOG_TYPE_ERROR, "failed to prepare track data", buf, 2u);
        }

        return 0;
      }
    }
    else
    {
LABEL_42:
      if (TrackPersistentID)
        goto LABEL_43;
    }
    v56 = os_log_create("com.apple.amp.medialibrary", "Import");
    v57 = os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
    if ((a4 & 1) != 0)
    {
      if (v57)
      {
        v58 = *(_QWORD *)(*a2 + 8);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v58;
        _os_log_impl(&dword_1AC149000, v56, OS_LOG_TYPE_ERROR, "updateTrack ignoring non-existing track with pid %lld", buf, 0xCu);
      }

      return 1;
    }
    if (v57)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v56, OS_LOG_TYPE_ERROR, "updateTrack called for unknown track", buf, 2u);
    }

    return 0;
  }
LABEL_14:
  v11 = (std::__shared_weak_count *)a2[1];
  v113[0] = *a2;
  v113[1] = (uint64_t)v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = ML3ImportSession::_prepareTrackForImport(a1, v113, a4, 0);
  v15 = v14;
  if (!v11)
    goto LABEL_21;
  v16 = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v15)
      goto LABEL_22;
  }
  else
  {
LABEL_21:
    if (!v14)
    {
LABEL_22:
      v18 = (std::__shared_weak_count *)a2[1];
      v112[0] = *a2;
      v112[1] = (uint64_t)v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = ML3ImportSession::_prepareTrackData(a1, v112, 1);
      v22 = v21;
      if (!v18)
        goto LABEL_29;
      v23 = (unint64_t *)&v18->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if ((v22 & 1) != 0)
        {
LABEL_30:
          v25 = *(void **)(a1 + 1584);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(*a2 + 8));
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "addObject:", v26);

          v27 = *(uint64_t **)(a1 + 1560);
          v28 = *(_QWORD *)(a1 + 1568);
          if ((unint64_t)v27 >= v28)
          {
            v59 = *(_QWORD *)(a1 + 1552);
            v60 = ((uint64_t)v27 - v59) >> 4;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 60)
              std::vector<long long>::__throw_length_error[abi:ne180100]();
            v62 = v28 - v59;
            if (v62 >> 3 > v61)
              v61 = v62 >> 3;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
              v63 = 0xFFFFFFFFFFFFFFFLL;
            else
              v63 = v61;
            v118 = a1 + 1568;
            v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v63);
            v66 = &v64[16 * v60];
            v67 = *(_OWORD *)a2;
            *(_OWORD *)v66 = *(_OWORD *)a2;
            if (*((_QWORD *)&v67 + 1))
            {
              v68 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
            }
            v70 = *(_QWORD **)(a1 + 1560);
            v71 = *(_QWORD **)(a1 + 1552);
            if (v70 == v71)
            {
              v74 = vdupq_n_s64((unint64_t)v70);
              v72 = &v64[16 * v60];
            }
            else
            {
              v72 = &v64[16 * v60];
              do
              {
                v73 = *((_OWORD *)v70 - 1);
                v70 -= 2;
                *((_OWORD *)v72 - 1) = v73;
                v72 -= 16;
                *v70 = 0;
                v70[1] = 0;
              }
              while (v70 != v71);
              v74 = *(int64x2_t *)(a1 + 1552);
            }
            v32 = v66 + 16;
            *(_QWORD *)(a1 + 1552) = v72;
            *(_QWORD *)(a1 + 1560) = v66 + 16;
            *(int64x2_t *)&buf[8] = v74;
            v93 = *(_QWORD *)(a1 + 1568);
            *(_QWORD *)(a1 + 1568) = &v64[16 * v65];
            v117 = v93;
            *(_QWORD *)buf = v74.i64[0];
            std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *v27 = *a2;
            v29 = a2[1];
            v27[1] = v29;
            if (v29)
            {
              v30 = (unint64_t *)(v29 + 8);
              do
                v31 = __ldxr(v30);
              while (__stxr(v31 + 1, v30));
            }
            v32 = v27 + 2;
          }
          *(_QWORD *)(a1 + 1560) = v32;
          v94 = *a2;
          v95 = (std::__shared_weak_count *)a2[1];
          v111[0] = v94;
          v111[1] = v95;
          if (v95)
          {
            v96 = (unint64_t *)&v95->__shared_owners_;
            do
              v97 = __ldxr(v96);
            while (__stxr(v97 + 1, v96));
          }
          ML3ImportSession::_addTrackDataToSourceMaps(a1, v111);
          if (v95)
          {
            v98 = (unint64_t *)&v95->__shared_owners_;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          if (*(_QWORD *)(a1 + 1560) - *(_QWORD *)(a1 + 1552) >= 0x3E71uLL)
            return ML3ImportSession::flush((ML3ImportSession *)a1, 0);
          return 1;
        }
      }
      else
      {
LABEL_29:
        if ((v21 & 1) != 0)
          goto LABEL_30;
      }
      v75 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v75, OS_LOG_TYPE_ERROR, "failed to prepare track data", buf, 2u);
      }

    }
  }
  return 0;
}

void sub_1AC36AC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::removeTrack(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  _BYTE *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t TrackPersistentID;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  _BOOL4 v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _BYTE __p[12];
  char v25;
  uint8_t buf[4];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(__p);
    v5 = v25 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    v27 = v5;
    _os_log_impl(&dword_1AC149000, v4, OS_LOG_TYPE_DEFAULT, "removing track %{public}s", buf, 0xCu);
    if (v25 < 0)
      operator delete(*(void **)__p);
  }

  if (*(_QWORD *)(a1 + 1536) == *(_QWORD *)(a1 + 1528) && *(_QWORD *)(a1 + 1560) == *(_QWORD *)(a1 + 1552))
    v6 = 1;
  else
    v6 = ML3ImportSession::flush((ML3ImportSession *)a1, 0);
  v7 = (std::__shared_weak_count *)a2[1];
  v22 = *a2;
  v23 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  TrackPersistentID = ML3ImportSession::_getTrackPersistentID(a1, &v22);
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v13 = os_log_create("com.apple.amp.medialibrary", "Import");
  v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (TrackPersistentID)
  {
    if (v14)
    {
      *(_DWORD *)__p = 134217984;
      *(_QWORD *)&__p[4] = TrackPersistentID;
      _os_log_impl(&dword_1AC149000, v13, OS_LOG_TYPE_DEFAULT, "removing track %lld", __p, 0xCu);
    }

    ++*(_DWORD *)(a1 + 160);
    if (*(_QWORD *)(a1 + 1536) == *(_QWORD *)(a1 + 1528) && *(_QWORD *)(a1 + 1560) == *(_QWORD *)(a1 + 1552)
      || (v15 = _os_feature_enabled_impl(), ML3ImportSession::flush((ML3ImportSession *)a1, v15)))
    {
      v16 = *(void **)(a1 + 1584);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", TrackPersistentID, v22, v23);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "addObject:", v17);

      v18 = *(void **)(a1 + 1576);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", TrackPersistentID);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObject:", v19);

      if ((unint64_t)objc_msgSend(*(id *)(a1 + 1576), "count") < 0x3E8)
      {
        return 1;
      }
      else
      {
        v20 = _os_feature_enabled_impl();
        return ML3ImportSession::flush((ML3ImportSession *)a1, v20);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (v14)
    {
      *(_WORD *)__p = 0;
      _os_log_impl(&dword_1AC149000, v13, OS_LOG_TYPE_DEFAULT, "failed to locate track to delete. oh well", __p, 2u);
    }

  }
  return v6;
}

void sub_1AC36AFF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::addContainer(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  _BYTE *v5;
  uint64_t result;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t ContainerPersistentID;
  unint64_t IntegerUUID;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  char *v60;
  __int128 v61;
  int64x2_t v62;
  uint64_t v63;
  uint64_t v64[4];
  _QWORD v65[2];
  uint8_t buf[4];
  _BYTE *v67;
  _BYTE __p[24];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(__p);
    v5 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    v67 = v5;
    _os_log_impl(&dword_1AC149000, v4, OS_LOG_TYPE_DEFAULT, "adding container %{public}s", buf, 0xCu);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }

  if (*(_QWORD *)(a1 + 1536) == *(_QWORD *)(a1 + 1528)
    && *(_QWORD *)(a1 + 1560) == *(_QWORD *)(a1 + 1552)
    && !objc_msgSend(*(id *)(a1 + 1576), "count")
    && *(_QWORD *)(a1 + 2352) == *(_QWORD *)(a1 + 2344)
    || (result = ML3ImportSession::flush((ML3ImportSession *)a1, 1), (_DWORD)result))
  {
    v7 = (std::__shared_weak_count *)a2[1];
    v65[0] = *a2;
    v65[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ContainerPersistentID = ML3ImportSession::_getContainerPersistentID(a1, v65);
    IntegerUUID = ContainerPersistentID;
    if (!v7)
      goto LABEL_19;
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (IntegerUUID)
        goto LABEL_20;
    }
    else
    {
LABEL_19:
      if (ContainerPersistentID)
      {
LABEL_20:
        ++*(_DWORD *)(a1 + 168);
        *(_BYTE *)(*a2 + 16) = 1;
        goto LABEL_23;
      }
    }
    ++*(_DWORD *)(a1 + 164);
    IntegerUUID = *(_QWORD *)(*a2 + 8);
    if (!IntegerUUID)
    {
      v32 = (std::__shared_weak_count *)a2[1];
      v64[2] = *a2;
      v64[3] = (uint64_t)v32;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      IntegerUUID = ML3CreateIntegerUUID();
      v35 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 134217984;
        *(_QWORD *)&__p[4] = IntegerUUID;
        _os_log_impl(&dword_1AC149000, v35, OS_LOG_TYPE_DEFAULT, "created new container pid %lld", __p, 0xCu);
      }

      if (v32)
      {
        v36 = (unint64_t *)&v32->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
LABEL_23:
    if (*(_BYTE *)(a1 + 1512))
      std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__erase_unique<long long>((_QWORD *)(a1 + 768), IntegerUUID);
    v14 = *a2;
    *(_QWORD *)(v14 + 8) = IntegerUUID;
    v15 = (std::__shared_weak_count *)a2[1];
    v64[0] = v14;
    v64[1] = (uint64_t)v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = ML3ImportSession::_prepareContainerData(a1, v64);
    v19 = v18;
    if (!v15)
      goto LABEL_32;
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (v19)
        goto LABEL_33;
    }
    else
    {
LABEL_32:
      if (v18)
      {
LABEL_33:
        v22 = *(unint64_t **)(a1 + 2304);
        v23 = *(_QWORD *)(a1 + 2312);
        if ((unint64_t)v22 >= v23)
        {
          v25 = *(unint64_t **)(a1 + 2296);
          v26 = v22 - v25;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61)
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          v28 = v23 - (_QWORD)v25;
          if (v28 >> 2 > v27)
            v27 = v28 >> 2;
          v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8;
          v30 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v29)
            v30 = v27;
          if (v30)
          {
            v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v30);
            v22 = *(unint64_t **)(a1 + 2304);
            v25 = *(unint64_t **)(a1 + 2296);
          }
          else
          {
            v31 = 0;
          }
          v38 = (unint64_t *)(v30 + 8 * v26);
          v39 = v30 + 8 * v31;
          *v38 = IntegerUUID;
          v24 = v38 + 1;
          while (v22 != v25)
          {
            v40 = *--v22;
            *--v38 = v40;
          }
          *(_QWORD *)(a1 + 2296) = v38;
          *(_QWORD *)(a1 + 2304) = v24;
          *(_QWORD *)(a1 + 2312) = v39;
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v22 = IntegerUUID;
          v24 = v22 + 1;
        }
        *(_QWORD *)(a1 + 2304) = v24;
        v41 = *(uint64_t **)(a1 + 2328);
        v42 = *(_QWORD *)(a1 + 2336);
        if ((unint64_t)v41 >= v42)
        {
          v47 = *(_QWORD *)(a1 + 2320);
          v48 = ((uint64_t)v41 - v47) >> 4;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 60)
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          v50 = v42 - v47;
          if (v50 >> 3 > v49)
            v49 = v50 >> 3;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
            v51 = 0xFFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          v70 = a1 + 2336;
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v51);
          v54 = &v52[16 * v48];
          v55 = *(_OWORD *)a2;
          *(_OWORD *)v54 = *(_OWORD *)a2;
          if (*((_QWORD *)&v55 + 1))
          {
            v56 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          v58 = *(_QWORD **)(a1 + 2328);
          v59 = *(_QWORD **)(a1 + 2320);
          if (v58 == v59)
          {
            v62 = vdupq_n_s64((unint64_t)v58);
            v60 = &v52[16 * v48];
          }
          else
          {
            v60 = &v52[16 * v48];
            do
            {
              v61 = *((_OWORD *)v58 - 1);
              v58 -= 2;
              *((_OWORD *)v60 - 1) = v61;
              v60 -= 16;
              *v58 = 0;
              v58[1] = 0;
            }
            while (v58 != v59);
            v62 = *(int64x2_t *)(a1 + 2320);
          }
          v46 = v54 + 16;
          *(_QWORD *)(a1 + 2320) = v60;
          *(_QWORD *)(a1 + 2328) = v54 + 16;
          *(int64x2_t *)&__p[8] = v62;
          v63 = *(_QWORD *)(a1 + 2336);
          *(_QWORD *)(a1 + 2336) = &v52[16 * v53];
          v69 = v63;
          *(_QWORD *)__p = v62.i64[0];
          std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)__p);
        }
        else
        {
          *v41 = *a2;
          v43 = a2[1];
          v41[1] = v43;
          if (v43)
          {
            v44 = (unint64_t *)(v43 + 8);
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          v46 = v41 + 2;
        }
        *(_QWORD *)(a1 + 2328) = v46;
        if (v46 == *(_QWORD **)(a1 + 2320))
          return 1;
        else
          return ML3ImportSession::flush((ML3ImportSession *)a1, 0);
      }
    }
    return 0;
  }
  return result;
}

void sub_1AC36B55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::_prepareContainerData(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;
  std::__shared_weak_count *v5;
  _BYTE *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char v31;
  char v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char v38;
  char v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  uint64_t (**v49)();
  void *v50;
  uint64_t (**v51)();
  uint8_t *v52;
  uint64_t v53;
  uint64_t (**v54)();
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  NSObject *v65;
  NSObject *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  _QWORD *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  NSObject *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t ContainerPersistentID;
  _QWORD *n;
  NSObject *v81;
  unint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  uint8x8_t v85;
  _QWORD **v86;
  unint64_t v87;
  float v88;
  float v89;
  _BOOL8 v90;
  unint64_t v91;
  unint64_t v92;
  size_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t (***i)();
  uint64_t (**v99)();
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t *j;
  uint64_t v111;
  NSObject *v112;
  void *v113;
  void *v114;
  void *v115;
  unint64_t *v116;
  unint64_t v117;
  _BYTE *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  NSObject *v122;
  __int128 *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  void *v134;
  _QWORD *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  NSObject *v140;
  __int128 *v141;
  _BYTE *v142;
  void *v143;
  void *v144;
  _BYTE *v145;
  void *v146;
  void *v147;
  unint64_t *v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t k;
  void *v154;
  NSObject *v155;
  uint64_t v156;
  void *v157;
  void *v158;
  uint64_t v159;
  uint64_t m;
  void *v161;
  _QWORD *v162;
  std::__shared_weak_count *v163;
  void *v164;
  unint64_t *v165;
  unint64_t v166;
  id v167;
  uint64_t v168;
  NSObject *v169;
  _BOOL4 v170;
  std::string::size_type v171;
  std::string::size_type v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  std::string::size_type v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  _OWORD *v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  _QWORD *v194;
  _QWORD *v195;
  char *v196;
  __int128 v197;
  int64x2_t v198;
  _QWORD *v199;
  _OWORD *v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  uint64_t v207;
  char *v208;
  _QWORD *v209;
  _QWORD *v210;
  char *v211;
  __int128 v212;
  int64x2_t v213;
  _OWORD *v214;
  uint64_t (*v215)(uint64_t, uint64_t);
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  _OWORD *v219;
  uint64_t (*v220)(uint64_t, uint64_t);
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  void *v224;
  void *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  void *v231;
  _QWORD *v232;
  uint64_t v233;
  void *v234;
  void *v235;
  void *v236;
  uint64_t v237;
  void *v238;
  uint8_t *v239;
  void *v240;
  void *v241;
  void *v242;
  NSObject *v243;
  int v244;
  void **v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t v248;
  ML3Container *v249;
  ML3ContainerItemDiffOperation *v250;
  std::__shared_weak_count *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  id v257;
  id obj;
  int64x2_t *v259;
  int v260;
  unsigned int v261;
  void *v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  _QWORD v266[2];
  _QWORD v267[2];
  uint64_t v268;
  std::__shared_weak_count *v269;
  uint64_t v270[3];
  __int128 *v271;
  __int128 *v272;
  char *v273;
  void **v274[2];
  void (*v275)(_QWORD *, void *, void *);
  void *v276;
  __int128 *p_buf;
  _BYTE *v278;
  _WORD *v279;
  __int128 *v280;
  __int128 v281;
  __int128 v282;
  _BYTE v283[40];
  uint64_t v284;
  int v285;
  _BYTE v286[72];
  uint64_t v287;
  int v288;
  uint64_t (**v289)();
  char v290;
  std::string v291;
  uint64_t (**v292)();
  std::__shared_weak_count *v293;
  std::string v294;
  uint64_t (**v295)();
  std::__shared_weak_count *v296;
  std::string v297;
  __int128 v298;
  std::string v299;
  __int128 v300;
  void *v301;
  std::__shared_weak_count *v302;
  std::string v303;
  void *v304[2];
  void *v305[2];
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t (**v309)();
  uint64_t v310;
  std::string __s;
  const __CFString *v312;
  const __CFString *v313;
  __int128 *v314;
  std::string *v315;
  uint64_t v316;
  uint64_t v317;
  std::string v318;
  uint64_t (*v319)(uint64_t, uint64_t);
  _BYTE v320[24];
  __int128 v321;
  uint64_t v322;
  int v323;
  uint64_t (**v324)();
  char v325;
  std::string v326;
  _BYTE v327[12];
  std::string v328;
  uint8_t v329[8];
  uint8_t *v330;
  std::string v331;
  void *v332;
  std::__shared_weak_count *v333;
  _WORD v334[36];
  uint64_t v335;
  int v336;
  __int128 buf;
  std::string v338;
  _BYTE v339[32];
  uint64_t v340;
  int v341;
  uint64_t v342;

  v342 = *MEMORY[0x1E0C80C00];
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&buf, *a2, 184549384);
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v334, v338.__r_.__value_.__l.__data_, v338.__r_.__value_.__l.__size_);
  else
    *(std::string *)v334 = v338;
  v271 = 0;
  v272 = 0;
  v273 = 0;
  *(_QWORD *)v286 = &v271;
  v286[8] = 0;
  v271 = (__int128 *)operator new(0x18uLL);
  v272 = v271;
  v273 = (char *)v271 + 24;
  v272 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v273, (__int128 *)v334, (__int128 *)&v334[12], (std::string *)v271);
  if (SHIBYTE(v334[11]) < 0)
    operator delete(*(void **)v334);
  *(_QWORD *)&buf = off_1E5B4D010;
  if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v338.__r_.__value_.__l.__data_);
  memset(v270, 0, sizeof(v270));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v270, v271, v272, 0xAAAAAAAAAAAAAAABLL * (((char *)v272 - (char *)v271) >> 3));
  v4 = ML3ImportSession::_processSortableNames(a1, v270);
  *(_QWORD *)&buf = v270;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if ((v4 & 1) == 0)
  {
    v21 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AC149000, v21, OS_LOG_TYPE_ERROR, "failed to process sort strings", (uint8_t *)&buf, 2u);
    }

    goto LABEL_97;
  }
  v6 = (_BYTE *)*a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v268 = *a2;
  v269 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 664) + (((unint64_t)*(int *)(a1 + 32) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(a1 + 32)) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 500);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v6[16] || (*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)v6 + 56))(v6, 218103812))
    {
      (*(void (**)(__int128 *__return_ptr, _BYTE *, uint64_t))(*(_QWORD *)v6 + 80))(&buf, v6, 218103812);
      v10 = (uint64_t *)buf;
      if ((_QWORD)buf != *((_QWORD *)&buf + 1))
      {
        v2 = 0x1E0CB3000uLL;
        do
        {
          v11 = *v10;
          v12 = (std::__shared_weak_count *)v10[1];
          *(_QWORD *)v334 = *v10;
          *(_QWORD *)&v334[4] = v12;
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 + 1, v13));
          }
          v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, 234881030);
          if (!std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(*(_QWORD *)(a1 + 616) + 40 * *(int *)(a1 + 32)), v15))
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v15);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v9, "addObject:", v16);

          }
          if (v12)
          {
            v17 = (unint64_t *)&v12->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 += 2;
        }
        while (v10 != *((uint64_t **)&buf + 1));
        v6 = (_BYTE *)v268;
      }
      *(_QWORD *)v334 = &buf;
      std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)v334);
    }
    v19 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v6 + 32))(v6, 201326593);
    if (v19
      && !std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>((_QWORD *)(*(_QWORD *)(a1 + 616) + 40 * *(int *)(a1 + 32)), v19))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "addObject:", v20);

    }
    if ((unint64_t)objc_msgSend(v9, "count") < 0x1F4)
    {
      if (objc_msgSend(v9, "count"))
      {
        ML3TrackRulesIdentityPropertyForSource(*(unsigned int *)(a1 + 32));
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(&stru_1E5B66908, "stringByPaddingToLength:withString:startingAtIndex:", 2 * objc_msgSend(v9, "count") - 1, CFSTR(",?"), 1);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT ROWID,%@ FROM item_store WHERE %@ IN (%@)"), v22, v22, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 16), "executeQuery:withParameters:", v24, v9);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
        *((_QWORD *)&buf + 1) = 3221225472;
        v338.__r_.__value_.__r.__words[0] = (std::string::size_type)___ZN16ML3ImportSession25_prepareContainerItemDataENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke;
        v338.__r_.__value_.__l.__size_ = (std::string::size_type)&__block_descriptor_40_e40_v32__0__ML3DatabaseRow_8__NSError_16_B24l;
        v338.__r_.__value_.__r.__words[2] = a1;
        objc_msgSend(v25, "enumerateRowsWithBlock:", &buf);

      }
    }
    else
    {
      ML3ImportSession::_populateExistingTrackIdentifiersForSource((ML3ImportSession *)a1, *(unsigned int *)(a1 + 32));
    }

  }
  if (v5)
  {
    v26 = (unint64_t *)&v5->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v28 = (std::__shared_weak_count *)a2[1];
  v267[0] = *a2;
  v267[1] = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = ML3ImportSession::_prepareArtwork(a1, v267, 184549450, 5uLL);
  v32 = v31;
  if (!v28)
    goto LABEL_53;
  v33 = (unint64_t *)&v28->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_53:
    if ((v31 & 1) != 0)
      goto LABEL_54;
LABEL_90:
    v65 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AC149000, v65, OS_LOG_TYPE_ERROR, "failed to prepare container artwork", (uint8_t *)&buf, 2u);
    }

    goto LABEL_97;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if ((v32 & 1) == 0)
    goto LABEL_90;
LABEL_54:
  v35 = (std::__shared_weak_count *)a2[1];
  v266[0] = *a2;
  v266[1] = v35;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = ML3ImportSession::_prepareArtworkFromSecondarySource(a1, v266, 218103810, 218103811, 5uLL);
  v39 = v38;
  if (v35)
  {
    v40 = (unint64_t *)&v35->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      if ((v39 & 1) != 0)
        goto LABEL_62;
      goto LABEL_94;
    }
  }
  if ((v38 & 1) == 0)
  {
LABEL_94:
    v66 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AC149000, v66, OS_LOG_TYPE_ERROR, "failed to prepare container secondary source artwork", (uint8_t *)&buf, 2u);
    }

LABEL_97:
    v67 = 0;
    goto LABEL_98;
  }
LABEL_62:
  v43 = (_QWORD *)*a2;
  v42 = (std::__shared_weak_count *)a2[1];
  v265 = *a2;
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v46 = v43[1];
  v47 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1AC149000, v47, OS_LOG_TYPE_DEFAULT, "Preparing container authors", (uint8_t *)&buf, 2u);
  }

  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v338.__r_.__value_.__r.__words[0] = 0x5812000000;
  v338.__r_.__value_.__l.__size_ = (std::string::size_type)__Block_byref_object_copy__424;
  v338.__r_.__value_.__r.__words[2] = (std::string::size_type)__Block_byref_object_dispose__425;
  memset(v339, 0, sizeof(v339));
  v340 = 0;
  v341 = 1065353216;
  *(_QWORD *)v334 = 0;
  *(_QWORD *)&v334[4] = v334;
  *(_QWORD *)&v334[8] = 0x5812000000;
  *(_QWORD *)&v334[12] = __Block_byref_object_copy__424;
  *(_QWORD *)&v334[16] = __Block_byref_object_dispose__425;
  memset(&v334[20], 0, 32);
  v335 = 0;
  v336 = 1065353216;
  *(_QWORD *)v286 = 0;
  *(_QWORD *)&v286[8] = v286;
  *(_QWORD *)&v286[16] = 0x5812000000;
  *(_QWORD *)&v286[24] = __Block_byref_object_copy__426;
  *(_QWORD *)&v286[32] = __Block_byref_object_dispose__427;
  memset(&v286[40], 0, 32);
  v287 = 0;
  v288 = 1065353216;
  *(_QWORD *)&v281 = 0;
  *((_QWORD *)&v281 + 1) = &v281;
  *(_QWORD *)&v282 = 0x5812000000;
  *((_QWORD *)&v282 + 1) = __Block_byref_object_copy__424;
  *(_QWORD *)v283 = __Block_byref_object_dispose__425;
  memset(&v283[8], 0, 32);
  v284 = 0;
  v285 = 1065353216;
  *(_OWORD *)v304 = 0u;
  *(_OWORD *)v305 = 0u;
  v306 = 1065353216;
  v48 = *(void **)(a1 + 16);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v46);
  v49 = (uint64_t (**)())objc_claimAutoreleasedReturnValue();
  v324 = v49;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v324, 1);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v48, "executeQuery:withParameters:", CFSTR("SELECT container_author_pid, cloud_id, is_pending, role, position FROM container_author JOIN person USING (person_pid) WHERE container_pid = ?"), v50);
  v262 = (void *)objc_claimAutoreleasedReturnValue();

  v51 = (uint64_t (**)())MEMORY[0x1E0C809B0];
  v274[0] = (void **)MEMORY[0x1E0C809B0];
  v274[1] = (void **)3221225472;
  v275 = ___ZN16ML3ImportSession34_prepareContainerAuthorImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke;
  v276 = &unk_1E5B65120;
  p_buf = &buf;
  v278 = v286;
  v279 = v334;
  v280 = &v281;
  objc_msgSend(v262, "enumerateRowsWithBlock:", v274);
  v318.__r_.__value_.__r.__words[0] = 0;
  v318.__r_.__value_.__l.__size_ = (std::string::size_type)&v318;
  v318.__r_.__value_.__r.__words[2] = 0x5812000000;
  v319 = __Block_byref_object_copy__430;
  *(_QWORD *)v320 = __Block_byref_object_dispose__431;
  *(_OWORD *)&v320[8] = 0u;
  v321 = 0u;
  v322 = 0;
  v323 = 1065353216;
  v309 = v51;
  v310 = 3221225472;
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)___ZN16ML3ImportSession34_prepareContainerAuthorImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke_432;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E5B65148;
  v317 = v46;
  __s.__r_.__value_.__r.__words[2] = (std::string::size_type)&buf;
  v312 = (const __CFString *)v286;
  v313 = (const __CFString *)v334;
  v314 = &v281;
  v316 = a1;
  v315 = &v318;
  v2 = MEMORY[0x1AF43CDE0](&v309);
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v43 + 56))(v43, 218103813))
  {
    (*(void (**)(uint8_t *__return_ptr, _QWORD *, uint64_t))(*v43 + 80))(v329, v43, 218103813);
    v52 = *(uint8_t **)v329;
    if (*(uint8_t **)v329 == v330)
    {
      v53 = 0;
    }
    else
    {
      v53 = 0;
      do
      {
        v54 = *(uint64_t (***)())v52;
        v55 = (std::__shared_weak_count *)*((_QWORD *)v52 + 1);
        v301 = *(void **)v52;
        v302 = v55;
        if (v55)
        {
          v56 = (unint64_t *)&v55->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
          v296 = v55;
          do
            v58 = __ldxr(v56);
          while (__stxr(v58 + 1, v56));
        }
        else
        {
          v296 = 0;
        }
        v295 = v54;
        (*(void (**)(uint64_t, uint64_t (***)(), _QWORD, uint64_t))(v2 + 16))(v2, &v295, 0, v53);
        v59 = v296;
        if (v296)
        {
          v60 = (unint64_t *)&v296->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v62 = v302;
        if (v302)
        {
          v63 = (unint64_t *)&v302->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        ++v53;
        v52 += 16;
      }
      while (v52 != v330);
      v43 = (_QWORD *)v265;
    }
    (*(void (**)(void **__return_ptr, _QWORD *, uint64_t))(*v43 + 80))(&v301, v43, 218103814);
    for (i = (uint64_t (***)())v301; i != (uint64_t (***)())v302; i += 2)
    {
      v99 = *i;
      v100 = (std::__shared_weak_count *)i[1];
      *(_QWORD *)&v298 = *i;
      *((_QWORD *)&v298 + 1) = v100;
      if (v100)
      {
        v101 = (unint64_t *)&v100->__shared_owners_;
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
        v293 = v100;
        do
          v103 = __ldxr(v101);
        while (__stxr(v103 + 1, v101));
      }
      else
      {
        v293 = 0;
      }
      v292 = v99;
      (*(void (**)(uint64_t, uint64_t (***)(), uint64_t, uint64_t))(v2 + 16))(v2, &v292, 1, v53);
      v104 = v293;
      if (v293)
      {
        v105 = (unint64_t *)&v293->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v107 = (std::__shared_weak_count *)*((_QWORD *)&v298 + 1);
      if (*((_QWORD *)&v298 + 1))
      {
        v108 = (unint64_t *)(*((_QWORD *)&v298 + 1) + 8);
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      ++v53;
    }
    for (j = *(uint64_t **)(*((_QWORD *)&buf + 1) + 64); j; j = (uint64_t *)*j)
    {
      if (*((char *)j + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v298, (const std::string::value_type *)j[2], j[3]);
      }
      else
      {
        v298 = *((_OWORD *)j + 1);
        v299.__r_.__value_.__r.__words[0] = j[4];
      }
      v111 = j[5];
      if (!std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::find<std::string>((_QWORD *)(v318.__r_.__value_.__l.__size_ + 48), (unsigned __int8 *)&v298))
      {
        v112 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v327 = 134217984;
          *(_QWORD *)&v327[4] = v111;
          _os_log_impl(&dword_1AC149000, v112, OS_LOG_TYPE_DEFAULT, "Removing container author pid %lld", v327, 0xCu);
        }

        v113 = *(void **)(a1 + 2632);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v111);
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v113, "addObject:", v114);

        ++*(_DWORD *)(a1 + 196);
      }
      if (v299.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v298);
    }
    *(_QWORD *)&v298 = &v301;
    std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
    v301 = v329;
    std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v301);
  }

  _Block_object_dispose(&v318, 8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*((void ***)&v321 + 1));
  v115 = *(void **)&v320[16];
  *(_QWORD *)&v320[16] = 0;
  if (v115)
    operator delete(v115);

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v305[0]);
  if (v304[0])
    operator delete(v304[0]);
  _Block_object_dispose(&v281, 8);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)&v283[16]);
  _Block_object_dispose(v286, 8);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)&v286[48]);
  _Block_object_dispose(v334, 8);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)&v334[24]);
  _Block_object_dispose(&buf, 8);
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table((uint64_t)&v339[8]);
  if (v42)
  {
    v116 = (unint64_t *)&v42->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v118 = (_BYTE *)*a2;
  v264 = (_QWORD *)*a2;
  v251 = (std::__shared_weak_count *)a2[1];
  if (v251)
  {
    v119 = (unint64_t *)&v251->__shared_owners_;
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
  }
  v249 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3Container alloc], "initWithPersistentID:inLibrary:", *((_QWORD *)v118 + 1), *(_QWORD *)(a1 + 8));
  -[ML3Entity valueForProperty:](v249, "valueForProperty:", CFSTR("keep_local"));
  v121 = (void *)objc_claimAutoreleasedReturnValue();
  v260 = objc_msgSend(v121, "integerValue");

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v253 = (void *)objc_claimAutoreleasedReturnValue();
  if (v118[17] || (*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)v118 + 56))(v118, 218103812))
  {
    v122 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(__int128 *__return_ptr, _BYTE *))(*(_QWORD *)v118 + 88))(&buf, v118);
      v123 = v338.__r_.__value_.__s.__data_[7] >= 0 ? &buf : (__int128 *)buf;
      *(_DWORD *)v334 = 136446210;
      *(_QWORD *)&v334[2] = v123;
      _os_log_impl(&dword_1AC149000, v122, OS_LOG_TYPE_DEFAULT, "preparing container_items for container %{public}s", (uint8_t *)v334, 0xCu);
      if (v338.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)buf);
    }

    (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t))(*(_QWORD *)v118 + 80))(&v307, v118, 218103812);
    v124 = v308;
    v125 = v307;
    std::unordered_map<unsigned long long,long long>::unordered_map((uint64_t)v274, *(_QWORD *)(a1 + 616) + 40 * *(int *)(a1 + 32));
    v126 = v124 - v125;
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v126 >> 4);
    v254 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", v126 >> 4);
    v252 = (void *)objc_claimAutoreleasedReturnValue();
    v248 = v126;
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v126 >> 4);
    v255 = (void *)objc_claimAutoreleasedReturnValue();
    *(_OWORD *)v304 = 0u;
    *(_OWORD *)v305 = 0u;
    v306 = 1065353216;
    v2 = v307;
    if (v307 != v308)
    {
      v127 = 0;
      do
      {
        v128 = *(_QWORD *)v2;
        v129 = *(std::__shared_weak_count **)(v2 + 8);
        *(_QWORD *)&v281 = *(_QWORD *)v2;
        *((_QWORD *)&v281 + 1) = v129;
        if (v129)
        {
          v130 = (unint64_t *)&v129->__shared_owners_;
          do
            v131 = __ldxr(v130);
          while (__stxr(v131 + 1, v130));
        }
        *(_QWORD *)&buf = v127;
        v132 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)v304, v127, (uint64_t *)&buf);
        std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v132 + 3, v128, (uint64_t)v129);
        v133 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v128 + 32))(v128, 234881030);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v133);
        v134 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v255, "addObject:", v134);

        v135 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(v274, v133);
        if (v135)
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v135[3]);
          v136 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v254, "addObject:", v136);

          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v128 + 24))(&buf, v128, 234881028);
          (*(void (**)(_WORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v128 + 24))(v334, v128, 234881029);
          if (BYTE8(buf) | LOBYTE(v334[4]))
          {
            objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 2);
            v137 = (void *)objc_claimAutoreleasedReturnValue();
            if (BYTE8(buf))
            {
              v138 = (void *)MEMORY[0x1E0CB3940];
              if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external((std::string *)v286, v338.__r_.__value_.__l.__data_, v338.__r_.__value_.__l.__size_);
              else
                *(std::string *)v286 = v338;
              v142 = v286[23] >= 0 ? v286 : *(_BYTE **)v286;
              objc_msgSend(v138, "stringWithUTF8String:", v142);
              v143 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v137, "setObject:forKeyedSubscript:", v143, CFSTR("uuid"));

              if ((v286[23] & 0x80000000) != 0)
                operator delete(*(void **)v286);
            }
            if (LOBYTE(v334[4]))
            {
              v144 = (void *)MEMORY[0x1E0CB3940];
              if (SHIBYTE(v334[19]) < 0)
                std::string::__init_copy_ctor_external((std::string *)v286, *(const std::string::value_type **)&v334[8], *(std::string::size_type *)&v334[12]);
              else
                *(std::string *)v286 = *(std::string *)&v334[8];
              v145 = v286[23] >= 0 ? v286 : *(_BYTE **)v286;
              objc_msgSend(v144, "stringWithUTF8String:", v145);
              v146 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v137, "setObject:forKeyedSubscript:", v146, CFSTR("position_uuid"));

              if ((v286[23] & 0x80000000) != 0)
                operator delete(*(void **)v286);
            }
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v127);
            v147 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v252, "setObject:forKeyedSubscript:", v137, v147);

          }
          *(_QWORD *)v334 = off_1E5B4D010;
          if (SHIBYTE(v334[19]) < 0)
            operator delete(*(void **)&v334[8]);
          *(_QWORD *)&buf = off_1E5B4D010;
          if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v338.__r_.__value_.__l.__data_);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v133);
          v139 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v253, "addObject:", v139);

          v140 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
          {
            (*(void (**)(__int128 *__return_ptr))(*v264 + 88))(&buf);
            v141 = &buf;
            if (v338.__r_.__value_.__s.__data_[7] < 0)
              v141 = (__int128 *)buf;
            *(_DWORD *)v334 = 134218242;
            *(_QWORD *)&v334[2] = v133;
            v334[6] = 2082;
            *(_QWORD *)&v334[7] = v141;
            _os_log_impl(&dword_1AC149000, v140, OS_LOG_TYPE_ERROR, "failed to map itemSourceID=%lld for container %{public}s", (uint8_t *)v334, 0x16u);
            if (v338.__r_.__value_.__s.__data_[7] < 0)
              operator delete((void *)buf);
          }

        }
        if (v129)
        {
          v148 = (unint64_t *)&v129->__shared_owners_;
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        ++v127;
        v2 += 16;
      }
      while (v2 != v308);
    }
    v250 = -[ML3ContainerItemDiffOperation initWithContainerPersistentID:updatedItemsPersistentIDs:updatedItemsProperties:connection:]([ML3ContainerItemDiffOperation alloc], "initWithContainerPersistentID:updatedItemsPersistentIDs:updatedItemsProperties:connection:", v264[1], v254, v252, *(_QWORD *)(a1 + 16));
    -[ML3ContainerItemDiffOperation start](v250, "start");
    -[ML3ContainerItemDiffOperation waitUntilFinished](v250, "waitUntilFinished");
    -[ML3ContainerItemDiffOperation containerItemsToDelete](v250, "containerItemsToDelete");
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    memset(v286, 0, 64);
    obj = v150;
    v151 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v286, &buf, 16);
    if (v151)
    {
      v152 = **(_QWORD **)&v286[16];
      do
      {
        for (k = 0; k != v151; ++k)
        {
          if (**(_QWORD **)&v286[16] != v152)
            objc_enumerationMutation(obj);
          v154 = *(void **)(*(_QWORD *)&v286[8] + 8 * k);
          v155 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
          {
            v156 = objc_msgSend(v154, "persistentID");
            *(_DWORD *)v334 = 134217984;
            *(_QWORD *)&v334[2] = v156;
            _os_log_impl(&dword_1AC149000, v155, OS_LOG_TYPE_DEFAULT, "deleting container_item with persistent-id: %lld", (uint8_t *)v334, 0xCu);
          }

          v2 = *(_QWORD *)(a1 + 2560);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v154, "persistentID"));
          v157 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend((id)v2, "addObject:", v157);

          ++*(_DWORD *)(a1 + 184);
        }
        v151 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v286, &buf, 16);
      }
      while (v151);
    }

    -[ML3ContainerItemDiffOperation containerItemsToUpdate](v250, "containerItemsToUpdate");
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    memset(v283, 0, 32);
    v281 = 0u;
    v282 = 0u;
    v257 = v158;
    v159 = objc_msgSend(v257, "countByEnumeratingWithState:objects:count:", &v281, v334, 16);
    if (v159)
    {
      v261 = v260 - 1;
      v263 = *(_QWORD *)v282;
      v259 = (int64x2_t *)(a1 + 2536);
      do
      {
        for (m = 0; m != v159; ++m)
        {
          if (*(_QWORD *)v282 != v263)
            objc_enumerationMutation(v257);
          v161 = *(void **)(*((_QWORD *)&v281 + 1) + 8 * m);
          v318.__r_.__value_.__r.__words[0] = objc_msgSend(v161, "newPosition");
          v162 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)v304, v318.__r_.__value_.__r.__words[0], (uint64_t *)&v318);
          v164 = (void *)v162[3];
          v163 = (std::__shared_weak_count *)v162[4];
          v332 = v164;
          v333 = v163;
          if (v163)
          {
            v165 = (unint64_t *)&v163->__shared_owners_;
            do
              v166 = __ldxr(v165);
            while (__stxr(v166 + 1, v165));
          }
          (*(void (**)(uint64_t (***__return_ptr)(), void *, uint64_t))(*(_QWORD *)v164 + 24))(&v309, v164, 234881028);
          (*(void (**)(uint8_t *__return_ptr, void *, uint64_t))(*(_QWORD *)v164 + 24))(v329, v164, 234881029);
          objc_msgSend(v161, "occurrenceID");
          v167 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(&v318, (char *)objc_msgSend(v167, "UTF8String"));
          v301 = off_1E5B4D010;
          LOBYTE(v302) = 1;
          if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v303, v318.__r_.__value_.__l.__data_, v318.__r_.__value_.__l.__size_);
            if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v318.__r_.__value_.__l.__data_);
          }
          else
          {
            v303 = v318;
          }

          v168 = objc_msgSend(v161, "persistentID");
          v169 = os_log_create("com.apple.amp.medialibrary", "Import");
          v170 = os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT);
          if (v168)
          {
            if (v170)
            {
              v171 = objc_msgSend(v161, "newPosition");
              v172 = objc_msgSend(v161, "persistentID");
              v173 = objc_msgSend(v161, "previousPosition");
              v174 = objc_msgSend(v161, "newPosition");
              LODWORD(v318.__r_.__value_.__l.__data_) = 134218752;
              *(std::string::size_type *)((char *)v318.__r_.__value_.__r.__words + 4) = v171;
              WORD2(v318.__r_.__value_.__r.__words[1]) = 2048;
              *(std::string::size_type *)((char *)&v318.__r_.__value_.__r.__words[1] + 6) = v172;
              HIWORD(v318.__r_.__value_.__r.__words[2]) = 2048;
              v319 = (uint64_t (*)(uint64_t, uint64_t))v173;
              *(_WORD *)v320 = 2048;
              *(_QWORD *)&v320[2] = v174;
              _os_log_impl(&dword_1AC149000, v169, OS_LOG_TYPE_DEFAULT, "mapped item at position %lld to existing container_item with pid %lld (update position: %lld -> %lld)", (uint8_t *)&v318, 0x2Au);
            }

            v175 = operator new();
            v176 = objc_msgSend(v161, "persistentID");
            v177 = objc_msgSend(v161, "containerPersistentID");
            v2 = objc_msgSend(v161, "itemPersistentID");
            v178 = objc_msgSend(v161, "newPosition");
            *(_QWORD *)&v298 = off_1E5B4D010;
            BYTE8(v298) = v310;
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v299, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              v299 = __s;
            v295 = off_1E5B4D010;
            LOBYTE(v296) = (_BYTE)v330;
            if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v297, v331.__r_.__value_.__l.__data_, v331.__r_.__value_.__l.__size_);
            else
              v297 = v331;
            v292 = off_1E5B4D010;
            LOBYTE(v293) = (_BYTE)v302;
            if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v294, v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_);
            else
              v294 = v303;
            ML3ContainerItemImportItem::ML3ContainerItemImportItem(v175, v176, v177, v2, v178, (uint64_t)&v298, (uint64_t)&v295, (uint64_t)&v292);
            *(_QWORD *)&v300 = v175;
            v184 = (_QWORD *)operator new();
            *v184 = &off_1E5B51A78;
            v184[1] = 0;
            v184[2] = 0;
            v184[3] = v175;
            *((_QWORD *)&v300 + 1) = v184;
            v185 = *(_OWORD **)(a1 + 2544);
            v186 = *(_QWORD *)(a1 + 2552);
            if ((unint64_t)v185 >= v186)
            {
              v187 = ((uint64_t)v185 - v259->i64[0]) >> 4;
              v188 = v187 + 1;
              if ((unint64_t)(v187 + 1) >> 60)
                std::vector<long long>::__throw_length_error[abi:ne180100]();
              v189 = v186 - v259->i64[0];
              if (v189 >> 3 > v188)
                v188 = v189 >> 3;
              if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF0)
                v190 = 0xFFFFFFFFFFFFFFFLL;
              else
                v190 = v188;
              *(_QWORD *)v320 = a1 + 2552;
              v191 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v190);
              v193 = &v191[16 * v187];
              *(_OWORD *)v193 = v300;
              v300 = 0uLL;
              v194 = *(_QWORD **)(a1 + 2544);
              v195 = *(_QWORD **)(a1 + 2536);
              if (v194 == v195)
              {
                v198 = vdupq_n_s64((unint64_t)v194);
                v196 = &v191[16 * v187];
              }
              else
              {
                v196 = &v191[16 * v187];
                do
                {
                  v197 = *((_OWORD *)v194 - 1);
                  v194 -= 2;
                  *((_OWORD *)v196 - 1) = v197;
                  v196 -= 16;
                  *v194 = 0;
                  v194[1] = 0;
                }
                while (v194 != v195);
                v198 = *v259;
              }
              v214 = v193 + 16;
              *(_QWORD *)(a1 + 2536) = v196;
              *(_QWORD *)(a1 + 2544) = v193 + 16;
              *(int64x2_t *)&v318.__r_.__value_.__r.__words[1] = v198;
              v215 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 2552);
              *(_QWORD *)(a1 + 2552) = &v191[16 * v192];
              v319 = v215;
              v318.__r_.__value_.__r.__words[0] = v198.i64[0];
              std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)&v318);
              v216 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
              *(_QWORD *)(a1 + 2544) = v214;
              if (v216)
              {
                v217 = (unint64_t *)&v216->__shared_owners_;
                do
                  v218 = __ldaxr(v217);
                while (__stlxr(v218 - 1, v217));
                if (!v218)
                {
                  ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                  std::__shared_weak_count::__release_weak(v216);
                }
              }
            }
            else
            {
              *v185 = v300;
              v300 = 0uLL;
              *(_QWORD *)(a1 + 2544) = v185 + 1;
            }
            v292 = off_1E5B4D010;
            if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v294.__r_.__value_.__l.__data_);
            v295 = off_1E5B4D010;
            if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v297.__r_.__value_.__l.__data_);
            *(_QWORD *)&v298 = off_1E5B4D010;
            if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v299.__r_.__value_.__l.__data_);
            ++*(_DWORD *)(a1 + 180);
          }
          else
          {
            if (v170)
            {
              v179 = objc_msgSend(v161, "newPosition");
              LODWORD(v318.__r_.__value_.__l.__data_) = 134217984;
              *(std::string::size_type *)((char *)v318.__r_.__value_.__r.__words + 4) = v179;
              _os_log_impl(&dword_1AC149000, v169, OS_LOG_TYPE_DEFAULT, "creating new container_item for item at position %lld", (uint8_t *)&v318, 0xCu);
            }

            v180 = operator new();
            v181 = objc_msgSend(*(id *)(a1 + 80), "nextPersistentID");
            v182 = objc_msgSend(v161, "containerPersistentID");
            v2 = objc_msgSend(v161, "itemPersistentID");
            v183 = objc_msgSend(v161, "newPosition");
            *(_QWORD *)v327 = off_1E5B4D010;
            v327[8] = v310;
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v328, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              v328 = __s;
            v324 = off_1E5B4D010;
            v325 = (char)v330;
            if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v326, v331.__r_.__value_.__l.__data_, v331.__r_.__value_.__l.__size_);
            else
              v326 = v331;
            v289 = off_1E5B4D010;
            v290 = (char)v302;
            if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v291, v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_);
            else
              v291 = v303;
            ML3ContainerItemImportItem::ML3ContainerItemImportItem(v180, v181, v182, v2, v183, (uint64_t)v327, (uint64_t)&v324, (uint64_t)&v289);
            *(_QWORD *)&v300 = v180;
            v199 = (_QWORD *)operator new();
            *v199 = &off_1E5B51A78;
            v199[1] = 0;
            v199[2] = 0;
            v199[3] = v180;
            *((_QWORD *)&v300 + 1) = v199;
            v200 = *(_OWORD **)(a1 + 2544);
            v201 = *(_QWORD *)(a1 + 2552);
            if ((unint64_t)v200 >= v201)
            {
              v202 = ((uint64_t)v200 - v259->i64[0]) >> 4;
              v203 = v202 + 1;
              if ((unint64_t)(v202 + 1) >> 60)
                std::vector<long long>::__throw_length_error[abi:ne180100]();
              v204 = v201 - v259->i64[0];
              if (v204 >> 3 > v203)
                v203 = v204 >> 3;
              if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFF0)
                v205 = 0xFFFFFFFFFFFFFFFLL;
              else
                v205 = v203;
              *(_QWORD *)v320 = a1 + 2552;
              v206 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v205);
              v208 = &v206[16 * v202];
              *(_OWORD *)v208 = v300;
              v300 = 0uLL;
              v209 = *(_QWORD **)(a1 + 2544);
              v210 = *(_QWORD **)(a1 + 2536);
              if (v209 == v210)
              {
                v213 = vdupq_n_s64((unint64_t)v209);
                v211 = &v206[16 * v202];
              }
              else
              {
                v211 = &v206[16 * v202];
                do
                {
                  v212 = *((_OWORD *)v209 - 1);
                  v209 -= 2;
                  *((_OWORD *)v211 - 1) = v212;
                  v211 -= 16;
                  *v209 = 0;
                  v209[1] = 0;
                }
                while (v209 != v210);
                v213 = *v259;
              }
              v219 = v208 + 16;
              *(_QWORD *)(a1 + 2536) = v211;
              *(_QWORD *)(a1 + 2544) = v208 + 16;
              *(int64x2_t *)&v318.__r_.__value_.__r.__words[1] = v213;
              v220 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 2552);
              *(_QWORD *)(a1 + 2552) = &v206[16 * v207];
              v319 = v220;
              v318.__r_.__value_.__r.__words[0] = v213.i64[0];
              std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)&v318);
              v221 = (std::__shared_weak_count *)*((_QWORD *)&v300 + 1);
              *(_QWORD *)(a1 + 2544) = v219;
              if (v221)
              {
                v222 = (unint64_t *)&v221->__shared_owners_;
                do
                  v223 = __ldaxr(v222);
                while (__stlxr(v223 - 1, v222));
                if (!v223)
                {
                  ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                  std::__shared_weak_count::__release_weak(v221);
                }
              }
            }
            else
            {
              *v200 = v300;
              v300 = 0uLL;
              *(_QWORD *)(a1 + 2544) = v200 + 1;
            }
            v289 = off_1E5B4D010;
            if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v291.__r_.__value_.__l.__data_);
            v324 = off_1E5B4D010;
            if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v326.__r_.__value_.__l.__data_);
            *(_QWORD *)v327 = off_1E5B4D010;
            if (SHIBYTE(v328.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v328.__r_.__value_.__l.__data_);
            ++*(_DWORD *)(a1 + 176);
          }
          if (v261 <= 1)
          {
            v224 = *(void **)(a1 + 2600);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v161, "itemPersistentID"));
            v225 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v224, "addObject:", v225);

          }
          if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v303.__r_.__value_.__l.__data_);
          *(_QWORD *)v329 = off_1E5B4D010;
          if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v331.__r_.__value_.__l.__data_);
          v309 = off_1E5B4D010;
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          v226 = v333;
          if (v333)
          {
            v227 = (unint64_t *)&v333->__shared_owners_;
            do
              v228 = __ldaxr(v227);
            while (__stlxr(v228 - 1, v227));
            if (!v228)
            {
              ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
              std::__shared_weak_count::__release_weak(v226);
            }
          }
        }
        v159 = objc_msgSend(v257, "countByEnumeratingWithState:objects:count:", &v281, v334, 16);
      }
      while (v159);
    }

    v229 = 0x1E0CB3000uLL;
    if (objc_msgSend(obj, "count"))
    {
      v230 = objc_msgSend(v257, "count");
      if (!(v230 | (uint64_t)v305[1]))
      {
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v231 = (void *)objc_claimAutoreleasedReturnValue();
        v232 = v275;
        if (v275)
        {
          do
          {
            v233 = v232[2];
            objc_msgSend(*(id *)(v229 + 2024), "numberWithLongLong:", v232[3]);
            v234 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(v229 + 2024), "numberWithUnsignedLongLong:", v233);
            v235 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v231, "setObject:forKeyedSubscript:", v234, v235);

            v232 = (_QWORD *)*v232;
            v229 = 0x1E0CB3000;
          }
          while (v232);
        }
        v236 = (void *)MEMORY[0x1E0D4D030];
        v309 = (uint64_t (**)())CFSTR("sourceMapDict");
        v310 = (uint64_t)CFSTR("itemSourceIDS");
        v318.__r_.__value_.__r.__words[0] = (std::string::size_type)v231;
        v318.__r_.__value_.__l.__size_ = (std::string::size_type)v255;
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("unmappedIDS");
        __s.__r_.__value_.__l.__size_ = (std::string::size_type)CFSTR("updatedItemPersistentIDs");
        v318.__r_.__value_.__r.__words[2] = (std::string::size_type)v253;
        v319 = (uint64_t (*)(uint64_t, uint64_t))v254;
        v237 = *(_QWORD *)(a1 + 2560);
        __s.__r_.__value_.__r.__words[2] = (std::string::size_type)CFSTR("deletedContainerItemPersistentIDs");
        v312 = CFSTR("containerItemsToUpdate");
        *(_QWORD *)v320 = v237;
        *(_QWORD *)&v320[8] = v257;
        v313 = CFSTR("name");
        v238 = (void *)MEMORY[0x1E0CB3940];
        (*(void (**)(uint8_t *__return_ptr))(*v264 + 88))(v329);
        if (v331.__r_.__value_.__s.__data_[7] >= 0)
          v239 = v329;
        else
          v239 = *(uint8_t **)v329;
        objc_msgSend(v238, "stringWithUTF8String:", v239);
        v240 = (void *)objc_claimAutoreleasedReturnValue();
        *(_QWORD *)&v320[16] = v240;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v318, &v309, 7);
        v241 = (void *)objc_claimAutoreleasedReturnValue();
        v332 = v241;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v332, 1);
        v242 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v236, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", *MEMORY[0x1E0D4CE40], CFSTR("Bug"), CFSTR("EmptyContainerItemImportBug"), CFSTR("Missing reporting_adam_id in PAF event"), 0, v242, 0);

        if (v331.__r_.__value_.__s.__data_[7] < 0)
          operator delete(*(void **)v329);

      }
    }
    v243 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT))
    {
      v244 = (int)v305[1];
      (*(void (**)(void **__return_ptr))(*v264 + 88))(&v301);
      v245 = v303.__r_.__value_.__s.__data_[7] >= 0 ? &v301 : (void **)v301;
      *(_DWORD *)v329 = 67109634;
      *(_DWORD *)&v329[4] = v244;
      LOWORD(v330) = 1024;
      *(_DWORD *)((char *)&v330 + 2) = v248 >> 4;
      HIWORD(v330) = 2080;
      v331.__r_.__value_.__r.__words[0] = (std::string::size_type)v245;
      _os_log_impl(&dword_1AC149000, v243, OS_LOG_TYPE_DEFAULT, "mapped %d/%d items for container %s", v329, 0x18u);
      if (v303.__r_.__value_.__s.__data_[7] < 0)
        operator delete(v301);
    }

    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)v304);
    std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)v274);
    v274[0] = (void **)&v307;
    std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](v274);
  }

  if (v251)
  {
    v246 = (unint64_t *)&v251->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
  v67 = 1;
LABEL_98:
  v69 = (_QWORD *)*a2;
  v68 = (std::__shared_weak_count *)a2[1];
  if (v68)
  {
    v70 = (unint64_t *)&v68->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = ML3ContainerRulesIdentityImportPropertyForSource(*(unsigned int *)(a1 + 32));
  v73 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v69 + 32))(v69, v72);
  *(_QWORD *)&buf = v73;
  if (v73)
  {
    v74 = v69[1];
    std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 2368, v73, &buf)[3] = v74;
  }
  else
  {
    v75 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      v334[0] = 0;
      _os_log_impl(&dword_1AC149000, v75, OS_LOG_TYPE_ERROR, "no identity property for container import item", (uint8_t *)v334, 2u);
    }

  }
  if (v68)
  {
    v76 = (unint64_t *)&v68->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v78 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 184549392);
  *(_QWORD *)v334 = v78;
  if (v78)
  {
    ContainerPersistentID = ML3ImportSession::_getContainerPersistentID((ML3ImportSession *)a1, v78);
    if (ContainerPersistentID)
    {
      n = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(a1 + 2368, v78, v334);
      v78 = ContainerPersistentID;
LABEL_155:
      n[3] = v78;
      goto LABEL_156;
    }
    v81 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v78;
      _os_log_impl(&dword_1AC149000, v81, OS_LOG_TYPE_DEFAULT, "couldnt find parent container with source id %lld - deferring mapping until the end", (uint8_t *)&buf, 0xCu);
    }

    v82 = *(_QWORD *)(*a2 + 8);
    v83 = (uint64_t *)(a1 + 2408);
    v84 = *(_QWORD *)(a1 + 2416);
    if (v84)
    {
      v85 = (uint8x8_t)vcnt_s8((int8x8_t)v84);
      v85.i16[0] = vaddlv_u8(v85);
      if (v85.u32[0] > 1uLL)
      {
        v2 = *(_QWORD *)(*a2 + 8);
        if (v82 >= v84)
          v2 = v82 % v84;
      }
      else
      {
        v2 = (v84 - 1) & v82;
      }
      v86 = *(_QWORD ***)(*v83 + 8 * v2);
      if (v86)
      {
        for (n = *v86; n; n = (_QWORD *)*n)
        {
          v87 = n[1];
          if (v87 == v82)
          {
            if (n[2] == v82)
              goto LABEL_155;
          }
          else
          {
            if (v85.u32[0] > 1uLL)
            {
              if (v87 >= v84)
                v87 %= v84;
            }
            else
            {
              v87 &= v84 - 1;
            }
            if (v87 != v2)
              break;
          }
        }
      }
    }
    n = operator new(0x20uLL);
    *n = 0;
    n[1] = v82;
    n[2] = v82;
    n[3] = 0;
    v88 = (float)(unint64_t)(*(_QWORD *)(a1 + 2432) + 1);
    v89 = *(float *)(a1 + 2440);
    if (!v84 || (float)(v89 * (float)v84) < v88)
    {
      v90 = 1;
      if (v84 >= 3)
        v90 = (v84 & (v84 - 1)) != 0;
      v91 = v90 | (2 * v84);
      v92 = vcvtps_u32_f32(v88 / v89);
      if (v91 <= v92)
        v93 = v92;
      else
        v93 = v91;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1 + 2408, v93);
      v84 = *(_QWORD *)(a1 + 2416);
      if ((v84 & (v84 - 1)) != 0)
      {
        if (v82 >= v84)
          v2 = v82 % v84;
        else
          v2 = v82;
      }
      else
      {
        v2 = (v84 - 1) & v82;
      }
    }
    v94 = *v83;
    v95 = *(_QWORD **)(*v83 + 8 * v2);
    if (v95)
    {
      *n = *v95;
    }
    else
    {
      *n = *(_QWORD *)(a1 + 2424);
      *(_QWORD *)(a1 + 2424) = n;
      *(_QWORD *)(v94 + 8 * v2) = a1 + 2424;
      if (!*n)
      {
LABEL_154:
        ++*(_QWORD *)(a1 + 2432);
        goto LABEL_155;
      }
      v96 = *(_QWORD *)(*n + 8);
      if ((v84 & (v84 - 1)) != 0)
      {
        if (v96 >= v84)
          v96 %= v84;
      }
      else
      {
        v96 &= v84 - 1;
      }
      v95 = (_QWORD *)(*v83 + 8 * v96);
    }
    *v95 = n;
    goto LABEL_154;
  }
LABEL_156:
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, 184549407))
    *(_BYTE *)(a1 + 1516) = 1;
  *(_QWORD *)&buf = &v271;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  return v67;
}

void sub_1AC36DAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  void *v59;
  void *v60;
  void *v61;
  void *v62;

  if (SLOBYTE(STACK[0x4D7]) < 0)
    operator delete((void *)STACK[0x4C0]);

  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table((uint64_t)&STACK[0x370]);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&a59);
  a59 = (uint64_t)&STACK[0x3A0];
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a59);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  STACK[0x370] = (unint64_t)&a56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x370]);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long long,long long>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = v5[2];
      if (v7)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v2 = v5[2];
          if (v8 >= v7)
            v2 = v8 % v7;
        }
        else
        {
          v2 = (v7 - 1) & v8;
        }
        v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          for (i = (_QWORD *)*v10; i; i = (_QWORD *)*i)
          {
            v12 = i[1];
            if (v12 == v8)
            {
              if (i[2] == v8)
                goto LABEL_41;
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v7)
                  v12 %= v7;
              }
              else
              {
                v12 &= v7 - 1;
              }
              if (v12 != v2)
                break;
            }
          }
        }
      }
      v13 = operator new(0x20uLL);
      *v13 = 0;
      v13[1] = v8;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v5 + 1);
      v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v15 = *(float *)(a1 + 32);
      if (!v7 || (float)(v15 * (float)v7) < v14)
      {
        v16 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3)
          v16 = 1;
        v17 = v16 | (2 * v7);
        v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18)
          v19 = v18;
        else
          v19 = v17;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
        v7 = *(_QWORD *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v8 >= v7)
            v2 = v8 % v7;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v7 - 1) & v8;
        }
      }
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v21)
      {
        *v13 = *v21;
      }
      else
      {
        *v13 = *v6;
        *v6 = v13;
        *(_QWORD *)(v20 + 8 * v2) = v6;
        if (!*v13)
          goto LABEL_40;
        v22 = *(_QWORD *)(*v13 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v22 >= v7)
            v22 %= v7;
        }
        else
        {
          v22 &= v7 - 1;
        }
        v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
      }
      *v21 = v13;
LABEL_40:
      ++*(_QWORD *)(a1 + 24);
LABEL_41:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1AC36E450(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v35;
  _QWORD v36[2];
  char v37;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x28uLL);
  v36[0] = v13;
  v36[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v5;
  v14 = *a3;
  v13[3] = 0;
  v13[4] = 0;
  v13[2] = v14;
  v37 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v17 = 1;
  if (v7 >= 3)
    v17 = (v7 & (v7 - 1)) != 0;
  v18 = v17 | (2 * v7);
  v19 = vcvtps_u32_f32(v15 / v16);
  if (v18 <= v19)
    prime = (int8x8_t)v19;
  else
    prime = (int8x8_t)v18;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      v27 = std::__next_prime(v27);
    }
    else
    {
      v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2)
        v27 = v29;
    }
    if (*(_QWORD *)&prime <= v27)
      prime = (int8x8_t)v27;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v35 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v7 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v21 = operator new(8 * *(_QWORD *)&prime);
  v22 = *(void **)a1;
  *(_QWORD *)a1 = v21;
  if (v22)
    operator delete(v22);
  v23 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
  while (*(_QWORD *)&prime != v23);
  v24 = (_QWORD *)*v12;
  if (*v12)
  {
    v25 = v24[1];
    v26 = (uint8x8_t)vcnt_s8(prime);
    v26.i16[0] = vaddlv_u8(v26);
    if (v26.u32[0] > 1uLL)
    {
      if (v25 >= *(_QWORD *)&prime)
        v25 %= *(_QWORD *)&prime;
    }
    else
    {
      v25 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v12;
    v30 = (_QWORD *)*v24;
    if (*v24)
    {
      do
      {
        v31 = v30[1];
        if (v26.u32[0] > 1uLL)
        {
          if (v31 >= *(_QWORD *)&prime)
            v31 %= *(_QWORD *)&prime;
        }
        else
        {
          v31 &= *(_QWORD *)&prime - 1;
        }
        if (v31 != v25)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
            goto LABEL_56;
          }
          *v24 = *v30;
          *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
          v30 = v24;
        }
        v31 = v25;
LABEL_56:
        v24 = v30;
        v30 = (_QWORD *)*v30;
        v25 = v31;
      }
      while (v30);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  i = (_QWORD *)v36[0];
  if (v32)
  {
    *(_QWORD *)v36[0] = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v36[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = v12;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7)
        v33 %= v7;
    }
    else
    {
      v33 &= v7 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  v36[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>>::reset[abi:ne180100]((uint64_t)v36);
  return i;
}

void sub_1AC36E878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<ML3ImportItem>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__shared_ptr_pointer<ML3ContainerItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemImportItem>,std::allocator<ML3ContainerItemImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemImportItem>,std::allocator<ML3ContainerItemImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ContainerItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerItemImportItem>,std::allocator<ML3ContainerItemImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_26ML3ContainerItemImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t __Block_byref_object_copy__426(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__427(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::~__hash_table(a1 + 48);
}

void ___ZN16ML3ImportSession34_prepareContainerAuthorImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  void **v14;

  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(v5, "int64ForColumnIndex:", 0);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v5, "cStringForColumnIndex:", 1));
  v8 = *(_QWORD *)(a1[4] + 8) + 48;
  v14 = __p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)__p, (__int128 **)&v14)+ 5) = v7;
  LODWORD(v7) = objc_msgSend(v5, "intForColumnIndex:", 2);
  v9 = (uint64_t *)(*(_QWORD *)(a1[5] + 8) + 48);
  v14 = __p;
  std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)__p, (__int128 **)&v14)[40] = (_DWORD)v7 != 0;
  LODWORD(v7) = objc_msgSend(v5, "intForColumnIndex:", 3);
  v10 = *(_QWORD *)(a1[6] + 8) + 48;
  v14 = __p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)__p, (__int128 **)&v14)+ 5) = (int)v7;
  LODWORD(v7) = objc_msgSend(v5, "intForColumnIndex:", 4);
  v11 = *(_QWORD *)(a1[7] + 8) + 48;
  v14 = __p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (unsigned __int8 *)__p, (__int128 **)&v14)+ 5) = (int)v7;
  if (v13 < 0)
    operator delete(__p[0]);

}

void sub_1AC36EB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__430(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__431(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 48);
}

void ___ZN16ML3ImportSession34_prepareContainerAuthorImportItemsENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke_432(_QWORD *a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t PersonPersistentID;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _OWORD *v30;
  unint64_t v31;
  _OWORD *v32;
  NSObject *v33;
  _BYTE *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _OWORD *v46;
  unint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  char *v59;
  __int128 v60;
  int64x2_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  _QWORD *v71;
  char *v72;
  __int128 v73;
  int64x2_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  std::__shared_weak_count *v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  std::string v85;
  uint64_t (**v86)();
  char v87;
  std::string __p;
  _QWORD *v89;
  std::__shared_weak_count *v90;
  _BYTE buf[24];
  __int128 v92;
  uint64_t v93;
  uint8_t v94[16];
  char v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v8 = a1[9];
  if (!a3)
  {
    v13 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 251658243);
    (*(void (**)(_QWORD **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a2 + 72))(&v89, *a2, 369098758);
    v9 = v89;
    if (v89)
      goto LABEL_6;
LABEL_10:
    v87 = 0;
    memset(&__p, 0, sizeof(__p));
    goto LABEL_84;
  }
  v9 = (_QWORD *)*a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v89 = (_QWORD *)*a2;
  v90 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = 0;
  if (!v9)
    goto LABEL_10;
LABEL_6:
  (*(void (**)(uint64_t (***__return_ptr)(), _QWORD *, uint64_t))(*v9 + 24))(&v86, v9, 369098753);
  if (!v87)
    goto LABEL_84;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v85, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v85 = __p;
  v14 = *(_QWORD *)(a1[4] + 8) + 48;
  *(_QWORD *)buf = &v85;
  v15 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (unsigned __int8 *)&v85, (__int128 **)buf)+ 5);
  v16 = v90;
  v83 = v89;
  v84 = v90;
  if (v90)
  {
    v17 = (unint64_t *)&v90->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  PersonPersistentID = ML3ImportSession::_getPersonPersistentID(v8, &v83);
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (!PersonPersistentID)
  {
    v33 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(_BYTE *__return_ptr))(*v89 + 88))(buf);
      v34 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v94 = 136315138;
      *(_QWORD *)&v94[4] = v34;
      _os_log_impl(&dword_1AC149000, v33, OS_LOG_TYPE_DEFAULT, "Adding new person entry for author: %s", v94, 0xCu);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }

    v35 = v90;
    v81 = v89;
    v82 = v90;
    if (v90)
    {
      v36 = (unint64_t *)&v90->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    ML3ImportSession::addPerson(v8, (uint64_t *)&v81);
    if (v35)
    {
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    PersonPersistentID = v89[1];
    if (v15)
      goto LABEL_22;
LABEL_48:
    v40 = objc_msgSend(*(id *)(v8 + 136), "nextPersistentID", v81, v82, v83, v84, *(_OWORD *)&v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__r.__words[2]);
    v41 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(uint8_t *__return_ptr))(*v89 + 88))(v94);
      v42 = v95 >= 0 ? v94 : *(uint8_t **)v94;
      *(_DWORD *)buf = 134218754;
      *(_QWORD *)&buf[4] = v40;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v42;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&v92 = v13;
      WORD4(v92) = 1024;
      *(_DWORD *)((char *)&v92 + 10) = a3;
      _os_log_impl(&dword_1AC149000, v41, OS_LOG_TYPE_DEFAULT, "Adding new author entry with pid %lld for %s: role=%lld, isPending=%d", buf, 0x26u);
      if (v95 < 0)
        operator delete(*(void **)v94);
    }

    v43 = operator new();
    v44 = a1[10];
    *(_WORD *)(v43 + 16) = 256;
    *(_BYTE *)(v43 + 18) = 1;
    *(_OWORD *)(v43 + 24) = 0u;
    *(_OWORD *)(v43 + 40) = 0u;
    *(_DWORD *)(v43 + 56) = 1065353216;
    *(_QWORD *)(v43 + 64) = v40;
    *(_QWORD *)(v43 + 72) = v44;
    *(_QWORD *)(v43 + 80) = PersonPersistentID;
    *(_QWORD *)(v43 + 88) = v13;
    *(_BYTE *)(v43 + 96) = a3;
    *(_QWORD *)(v43 + 104) = a4;
    *(_QWORD *)v43 = &off_1E5B4ECD0;
    *(_QWORD *)(v43 + 8) = v40;
    *(_QWORD *)v94 = v43;
    v45 = (_QWORD *)operator new();
    *v45 = &off_1E5B51B90;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v43;
    *(_QWORD *)&v94[8] = v45;
    v46 = *(_OWORD **)(v8 + 2616);
    v47 = *(_QWORD *)(v8 + 2624);
    if ((unint64_t)v46 >= v47)
    {
      v62 = *(_QWORD *)(v8 + 2608);
      v63 = ((uint64_t)v46 - v62) >> 4;
      if ((unint64_t)(v63 + 1) >> 60)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v64 = v47 - v62;
      v65 = v64 >> 3;
      if (v64 >> 3 <= (unint64_t)(v63 + 1))
        v65 = v63 + 1;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
        v66 = 0xFFFFFFFFFFFFFFFLL;
      else
        v66 = v65;
      *((_QWORD *)&v92 + 1) = v8 + 2624;
      v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v66);
      v69 = &v67[16 * v63];
      *(_OWORD *)v69 = *(_OWORD *)v94;
      memset(v94, 0, sizeof(v94));
      v70 = *(_QWORD **)(v8 + 2616);
      v71 = *(_QWORD **)(v8 + 2608);
      if (v70 == v71)
      {
        v74 = vdupq_n_s64((unint64_t)v70);
        v72 = &v67[16 * v63];
      }
      else
      {
        v72 = &v67[16 * v63];
        do
        {
          v73 = *((_OWORD *)v70 - 1);
          v70 -= 2;
          *((_OWORD *)v72 - 1) = v73;
          v72 -= 16;
          *v70 = 0;
          v70[1] = 0;
        }
        while (v70 != v71);
        v74 = *(int64x2_t *)(v8 + 2608);
      }
      v48 = v69 + 16;
      *(_QWORD *)(v8 + 2608) = v72;
      *(_QWORD *)(v8 + 2616) = v69 + 16;
      *(int64x2_t *)&buf[8] = v74;
      v76 = *(_QWORD *)(v8 + 2624);
      *(_QWORD *)(v8 + 2624) = &v67[16 * v68];
      *(_QWORD *)&v92 = v76;
      *(_QWORD *)buf = v74.i64[0];
      std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v46 = *(_OWORD *)v94;
      v48 = v46 + 1;
    }
    *(_QWORD *)(v8 + 2616) = v48;
    v77 = *(_QWORD *)(a1[4] + 8) + 48;
    *(_QWORD *)buf = &v85;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v77, (unsigned __int8 *)&v85, (__int128 **)buf)+ 5) = v40;
    ++*(_DWORD *)(v8 + 188);
    goto LABEL_82;
  }
  if (!v15)
    goto LABEL_48;
LABEL_22:
  v22 = (uint64_t *)(*(_QWORD *)(a1[5] + 8) + 48);
  *(_QWORD *)buf = &v85;
  if (std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (unsigned __int8 *)&v85, (__int128 **)buf)[40] != a3|| (v23 = *(_QWORD *)(a1[6] + 8) + 48, *(_QWORD *)buf = &v85, v13 != *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, (unsigned __int8 *)&v85, (__int128 **)buf)+ 5))|| (v24 = *(_QWORD *)(a1[7] + 8) + 48, *(_QWORD *)buf = &v85, *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, (unsigned __int8 *)&v85, (__int128 **)buf)+ 5) != a4))
  {
    v25 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(uint8_t *__return_ptr))(*v89 + 88))(v94);
      v26 = v95 >= 0 ? v94 : *(uint8_t **)v94;
      *(_DWORD *)buf = 134219010;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v26;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v92) = a3;
      WORD2(v92) = 2048;
      *(_QWORD *)((char *)&v92 + 6) = v13;
      HIWORD(v92) = 2048;
      v93 = a4;
      _os_log_impl(&dword_1AC149000, v25, OS_LOG_TYPE_DEFAULT, "Updating author entry with pid %lld for %s: isPending=%d, role=%lld, position=%lld", buf, 0x30u);
      if (v95 < 0)
        operator delete(*(void **)v94);
    }

    ++*(_DWORD *)(v8 + 192);
    v27 = operator new();
    v28 = a1[10];
    *(_WORD *)(v27 + 16) = 256;
    *(_BYTE *)(v27 + 18) = 1;
    *(_OWORD *)(v27 + 24) = 0u;
    *(_OWORD *)(v27 + 40) = 0u;
    *(_DWORD *)(v27 + 56) = 1065353216;
    *(_QWORD *)(v27 + 64) = v15;
    *(_QWORD *)(v27 + 72) = v28;
    *(_QWORD *)(v27 + 80) = PersonPersistentID;
    *(_QWORD *)(v27 + 88) = v13;
    *(_BYTE *)(v27 + 96) = a3;
    *(_QWORD *)(v27 + 104) = a4;
    *(_QWORD *)v27 = &off_1E5B4ECD0;
    *(_QWORD *)(v27 + 8) = v15;
    *(_QWORD *)v94 = v27;
    v29 = (_QWORD *)operator new();
    *v29 = &off_1E5B51B90;
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = v27;
    *(_QWORD *)&v94[8] = v29;
    v30 = *(_OWORD **)(v8 + 2616);
    v31 = *(_QWORD *)(v8 + 2624);
    if ((unint64_t)v30 >= v31)
    {
      v49 = *(_QWORD *)(v8 + 2608);
      v50 = ((uint64_t)v30 - v49) >> 4;
      if ((unint64_t)(v50 + 1) >> 60)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v51 = v31 - v49;
      v52 = v51 >> 3;
      if (v51 >> 3 <= (unint64_t)(v50 + 1))
        v52 = v50 + 1;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
        v53 = 0xFFFFFFFFFFFFFFFLL;
      else
        v53 = v52;
      *((_QWORD *)&v92 + 1) = v8 + 2624;
      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v53);
      v56 = &v54[16 * v50];
      *(_OWORD *)v56 = *(_OWORD *)v94;
      memset(v94, 0, sizeof(v94));
      v57 = *(_QWORD **)(v8 + 2616);
      v58 = *(_QWORD **)(v8 + 2608);
      if (v57 == v58)
      {
        v61 = vdupq_n_s64((unint64_t)v57);
        v59 = &v54[16 * v50];
      }
      else
      {
        v59 = &v54[16 * v50];
        do
        {
          v60 = *((_OWORD *)v57 - 1);
          v57 -= 2;
          *((_OWORD *)v59 - 1) = v60;
          v59 -= 16;
          *v57 = 0;
          v57[1] = 0;
        }
        while (v57 != v58);
        v61 = *(int64x2_t *)(v8 + 2608);
      }
      v32 = v56 + 16;
      *(_QWORD *)(v8 + 2608) = v59;
      *(_QWORD *)(v8 + 2616) = v56 + 16;
      *(int64x2_t *)&buf[8] = v61;
      v75 = *(_QWORD *)(v8 + 2624);
      *(_QWORD *)(v8 + 2624) = &v54[16 * v55];
      *(_QWORD *)&v92 = v75;
      *(_QWORD *)buf = v61.i64[0];
      std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      *v30 = *(_OWORD *)v94;
      v32 = v30 + 1;
    }
    *(_QWORD *)(v8 + 2616) = v32;
  }
LABEL_82:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*(_QWORD *)(a1[8] + 8) + 48, (unsigned __int8 *)&v85, (uint64_t)&v85);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
LABEL_84:
  v86 = off_1E5B4D010;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v78 = v90;
  if (v90)
  {
    v79 = (unint64_t *)&v90->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
}

void sub_1AC36F3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  void *v27;

  if (a18 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void ML3ImportSession::addPerson(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t PersonPersistentID;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  __int128 v34;
  int64x2_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::string buf;
  _BYTE __p[40];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(__p);
    v5 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    _os_log_impl(&dword_1AC149000, v4, OS_LOG_TYPE_DEFAULT, "adding person %{public}s", (uint8_t *)&buf, 0xCu);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }

  v6 = (std::__shared_weak_count *)a2[1];
  v44 = *a2;
  v45 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  PersonPersistentID = ML3ImportSession::_getPersonPersistentID(a1, &v44);
  v10 = PersonPersistentID;
  if (!v6)
    goto LABEL_14;
  v11 = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v10)
      goto LABEL_15;
  }
  else
  {
LABEL_14:
    if (PersonPersistentID)
    {
LABEL_15:
      ++*(_DWORD *)(a1 + 204);
      *(_BYTE *)(*a2 + 16) = 1;
      goto LABEL_16;
    }
  }
  ++*(_DWORD *)(a1 + 200);
  v36 = (std::__shared_weak_count *)a2[1];
  v43 = *a2;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v10 = objc_msgSend(*(id *)(a1 + 88), "nextPersistentID", v43, v36, v44, v45);
  v39 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__p = 134217984;
    *(_QWORD *)&__p[4] = v10;
    _os_log_impl(&dword_1AC149000, v39, OS_LOG_TYPE_DEFAULT, "created new person pid %lld", __p, 0xCu);
  }

  if (v36)
  {
    v40 = (unint64_t *)&v36->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_16:
  v13 = *a2;
  *(_QWORD *)(*a2 + 8) = v10;
  v14 = *(_QWORD **)(a1 + 2496);
  v15 = *(_QWORD *)(a1 + 2504);
  if ((unint64_t)v14 >= v15)
  {
    v20 = *(_QWORD *)(a1 + 2488);
    v21 = ((uint64_t)v14 - v20) >> 4;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v23 = v15 - v20;
    if (v23 >> 3 > v22)
      v22 = v23 >> 3;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v24 = 0xFFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    *(_QWORD *)&__p[32] = a1 + 2504;
    v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v24);
    v27 = &v25[16 * v21];
    v28 = *(_OWORD *)a2;
    *(_OWORD *)v27 = *(_OWORD *)a2;
    if (*((_QWORD *)&v28 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = *(_QWORD **)(a1 + 2496);
    v32 = *(_QWORD **)(a1 + 2488);
    if (v31 == v32)
    {
      v35 = vdupq_n_s64((unint64_t)v31);
      v33 = &v25[16 * v21];
    }
    else
    {
      v33 = &v25[16 * v21];
      do
      {
        v34 = *((_OWORD *)v31 - 1);
        v31 -= 2;
        *((_OWORD *)v33 - 1) = v34;
        v33 -= 16;
        *v31 = 0;
        v31[1] = 0;
      }
      while (v31 != v32);
      v35 = *(int64x2_t *)(a1 + 2488);
    }
    v19 = v27 + 16;
    *(_QWORD *)(a1 + 2488) = v33;
    *(_QWORD *)(a1 + 2496) = v27 + 16;
    *(int64x2_t *)&__p[8] = v35;
    v42 = *(_QWORD *)(a1 + 2504);
    *(_QWORD *)(a1 + 2504) = &v25[16 * v26];
    *(_QWORD *)&__p[24] = v42;
    *(_QWORD *)__p = v35.i64[0];
    std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)__p);
  }
  else
  {
    *v14 = v13;
    v16 = a2[1];
    v14[1] = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = v14 + 2;
  }
  *(_QWORD *)(a1 + 2496) = v19;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 24))(__p, *a2, 369098753);
  if ((__p[39] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)&__p[16], *(std::string::size_type *)&__p[24]);
    *(_QWORD *)__p = off_1E5B4D010;
    if ((__p[39] & 0x80000000) != 0)
      operator delete(*(void **)&__p[16]);
  }
  else
  {
    buf = *(std::string *)&__p[16];
  }
  *(_QWORD *)__p = &buf;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2448, (unsigned __int8 *)&buf, (__int128 **)__p)+ 5) = v10;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
}

void sub_1AC36F8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  v18 = a1 + 2;
  v13[40] = 0;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = a1[1];
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v18;
          if (*v18)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = v18;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v13 = *v37;
LABEL_75:
    *v37 = v13;
    goto LABEL_76;
  }
  *(_QWORD *)v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v36 + 8 * v3) = v18;
  if (*(_QWORD *)v13)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_1AC36FD64(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3ContainerAuthorImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerAuthorImportItem>,std::allocator<ML3ContainerAuthorImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ContainerAuthorImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerAuthorImportItem>,std::allocator<ML3ContainerAuthorImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ContainerAuthorImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ContainerAuthorImportItem>,std::allocator<ML3ContainerAuthorImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_28ML3ContainerAuthorImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ___ZN16ML3ImportSession25_prepareContainerItemDataENSt3__110shared_ptrI13ML3ImportItemEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  objc_msgSend(v5, "numberForColumnIndex:", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "longLongValue");

  v14 = v9;
  objc_msgSend(v5, "numberForColumnIndex:", 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "longLongValue");

  v12 = *(_QWORD *)(v7 + 616) + 40 * *(int *)(v7 + 32);
  v13 = v11;
  std::__hash_table<std::__hash_value_type<unsigned long long,long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v12, v11, &v13)[3] = v9;
  std::__hash_table<std::__hash_value_type<long long,unsigned long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,unsigned long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,unsigned long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,unsigned long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((float *)(*(_QWORD *)(v7 + 640) + 40 * *(int *)(v7 + 32)), v9, &v14)[3] = v11;

}

void sub_1AC36FEE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::removeContainer(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t ContainerPersistentID;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  ML3Container *v14;
  os_log_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  _BYTE __p[12];
  char v22;
  uint8_t buf[4];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 88))(__p);
    v5 = v22 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    v24 = v5;
    _os_log_impl(&dword_1AC149000, v4, OS_LOG_TYPE_DEFAULT, "removing container %{public}s", buf, 0xCu);
    if (v22 < 0)
      operator delete(*(void **)__p);
  }

  if (ML3ImportSession::flush((ML3ImportSession *)a1, 0))
  {
    v6 = (std::__shared_weak_count *)a2[1];
    v19 = *a2;
    v20 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    ContainerPersistentID = ML3ImportSession::_getContainerPersistentID(a1, &v19);
    v10 = ContainerPersistentID;
    if (!v6)
      goto LABEL_15;
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v10)
        goto LABEL_16;
    }
    else
    {
LABEL_15:
      if (ContainerPersistentID)
      {
LABEL_16:
        *(_QWORD *)(*a2 + 8) = v10;
        v13 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 134217984;
          *(_QWORD *)&__p[4] = v10;
          _os_log_impl(&dword_1AC149000, v13, OS_LOG_TYPE_DEFAULT, "removing container %lld", __p, 0xCu);
        }

        ++*(_DWORD *)(a1 + 172);
        v14 = [ML3Container alloc];
        v15 = -[ML3Entity initWithPersistentID:inLibrary:](v14, "initWithPersistentID:inLibrary:", v10, *(_QWORD *)(a1 + 8), v19, v20);
        v16 = -[NSObject deleteFromLibrary](v15, "deleteFromLibrary");
        if ((v16 & 1) == 0)
        {
          v17 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__p = 0;
            _os_log_impl(&dword_1AC149000, v17, OS_LOG_TYPE_ERROR, "failed to delete playlist", __p, 2u);
          }

        }
LABEL_27:

        return v16;
      }
    }
    v15 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl(&dword_1AC149000, v15, OS_LOG_TYPE_DEFAULT, "failed to find playlist to delete - ignoring", __p, 2u);
    }
    v16 = 1;
    goto LABEL_27;
  }
  return 0;
}

void sub_1AC3701CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ML3ImportSession::finish(ML3ImportSession *this)
{
  uint64_t v2;

  v2 = ML3ImportSession::flush(this, 1);
  if ((_DWORD)v2)
    ML3ImportSession::_finishImport((id *)this);
  return v2;
}

void ML3ImportSession::_finishImport(id *this)
{
  NSObject *v1;
  ML3ImportSession *v2;
  NSObject *v3;
  id v4;
  ML3ImportSession *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  id v13;
  _BOOL4 v14;
  _BOOL4 v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  ML3ImportSession *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;
  id v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  ML3ImportSession *v31;
  _QWORD *i;
  void *v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t j;
  NSObject *v45;
  double v46;
  double v47;
  NSObject *v48;
  NSObject *v49;
  double v50;
  double v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t k;
  void *v56;
  ML3ImportSession *v57;
  BOOL v58;
  NSObject *v59;
  const char *v60;
  const char *v61;
  NSObject *p_super;
  void *v63;
  uint64_t v64;
  int v65;
  NSArray *v66;
  NSObject *v67;
  uint64_t v68;
  void *v69;
  char v70;
  NSObject *v71;
  ML3ImportSession *v72;
  id v73;
  id v74;
  NSObject *v75;
  id v76;
  _QWORD *m;
  uint64_t v78;
  unint64_t v79;
  uint64_t ContainerPersistentID;
  void *v81;
  NSObject *v82;
  void *v83;
  void *v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  id v88;
  void *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  void *v93;
  NSObject *v94;
  id v95;
  void *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  void *v100;
  NSObject *v101;
  id v102;
  void *v103;
  void *v104;
  id v105;
  void *v106;
  void *v107;
  id v108;
  char v109;
  id v110;
  NSObject *v111;
  void *v112;
  void *v113;
  id v114;
  void *v115;
  void *v116;
  id v117;
  char v118;
  id v119;
  NSObject *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  id v128;
  ML3ImportSession *v129;
  id v130;
  void *v131;
  double v132;
  double v133;
  double v134;
  NSObject *v135;
  NSObject *v136;
  int v137;
  int v138;
  int v139;
  NSObject *v140;
  int v141;
  int v142;
  int v143;
  NSObject *v144;
  int v145;
  int v146;
  int v147;
  NSObject *v148;
  int v149;
  int v150;
  int v151;
  NSObject *v152;
  int v153;
  int v154;
  int v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  os_log_t v160;
  void *v162;
  id v163;
  void *v164;
  void *v165;
  int v166;
  void *v167;
  void *v168;
  void *v169;
  NSArray *v170;
  NSArray *v171;
  NSArray *v172;
  ML3Container *v173;
  NSArray *v174;
  NSArray *v175;
  _QWORD v177[4];
  id v178;
  ML3ImportSession *v179;
  _QWORD v180[4];
  id v181;
  id v182;
  _QWORD v183[4];
  id v184;
  id v185;
  _QWORD v186[4];
  id v187;
  _QWORD v188[4];
  id v189;
  void *__p;
  void *v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  id v197;
  id v198;
  id v199;
  id v200;
  uint8_t v201[16];
  const __CFString *v202;
  void *v203;
  void *v204;
  _QWORD v205[2];
  _QWORD v206[2];
  _QWORD v207[2];
  _QWORD v208[2];
  _BYTE v209[128];
  _QWORD v210[3];
  _QWORD v211[3];
  _QWORD v212[3];
  _QWORD v213[3];
  _QWORD v214[5];
  uint8_t buf[128];
  uint8_t v216[32];
  __int128 v217;
  __int128 v218;
  uint64_t v219;

  v219 = *MEMORY[0x1E0C80C00];
  v1 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AC149000, v1, OS_LOG_TYPE_DEFAULT, "finishing import", buf, 2u);
  }

  v2 = (ML3ImportSession *)this;
  if (*((_BYTE *)this + 1512))
  {
    if (_os_feature_enabled_impl())
    {
      v2 = (ML3ImportSession *)this;
      if (this[104])
      {
        v3 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          v4 = this[104];
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v4;
          _os_log_impl(&dword_1AC149000, v3, OS_LOG_TYPE_DEFAULT, "removing %lu album_artists not re-added by the reset import", buf, 0xCu);
        }

        ML3AlbumArtistRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
        v170 = (NSArray *)objc_claimAutoreleasedReturnValue();
        if (v170)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE album_artist SET %@='', liked_state=?, liked_state_changed_date=? WHERE album_artist_pid=?"), v170);
          v164 = (void *)objc_claimAutoreleasedReturnValue();
          v5 = (ML3ImportSession *)this;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE album_artist SET %@=0, liked_state=?, liked_state_changed_date=? WHERE album_artist_pid=?"), v170);
          v167 = (void *)objc_claimAutoreleasedReturnValue();
          v6 = this[103];
          if (v6)
          {
            while (1)
            {
              v7 = v6[2];
              v8 = (void *)*((_QWORD *)v5 + 2);
              if (*((_DWORD *)v5 + 8) == 2)
              {
                v213[0] = &unk_1E5BAC378;
                objc_msgSend(MEMORY[0x1E0C99D68], "date");
                v9 = (void *)objc_claimAutoreleasedReturnValue();
                v213[1] = v9;
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v7);
                v10 = (void *)objc_claimAutoreleasedReturnValue();
                v213[2] = v10;
                objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v213, 3);
                v11 = (void *)objc_claimAutoreleasedReturnValue();
                v200 = 0;
                v12 = objc_msgSend(v8, "executeUpdate:withParameters:error:", v164, v11, &v200);
                v13 = v200;
              }
              else
              {
                v212[0] = &unk_1E5BAC378;
                objc_msgSend(MEMORY[0x1E0C99D68], "date");
                v9 = (void *)objc_claimAutoreleasedReturnValue();
                v212[1] = v9;
                objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v7);
                v10 = (void *)objc_claimAutoreleasedReturnValue();
                v212[2] = v10;
                objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v212, 3);
                v11 = (void *)objc_claimAutoreleasedReturnValue();
                v199 = 0;
                v12 = objc_msgSend(v8, "executeUpdate:withParameters:error:", v167, v11, &v199);
                v13 = v199;
              }

              if ((v12 & 1) == 0)
                break;

              v6 = (_QWORD *)*v6;
              v5 = (ML3ImportSession *)this;
              if (!v6)
                goto LABEL_15;
            }
            v16 = os_log_create("com.apple.amp.medialibrary", "Import");
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543618;
              *(_QWORD *)&buf[4] = v170;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v7;
              _os_log_impl(&dword_1AC149000, v16, OS_LOG_TYPE_ERROR, "failed to remove source property=%{public}@ for albumArtistPID=%lld", buf, 0x16u);
            }

            v14 = 0;
          }
          else
          {
LABEL_15:
            v14 = 1;
          }

        }
        else
        {
          v14 = 1;
        }

        v2 = (ML3ImportSession *)this;
      }
      else
      {
        v14 = 1;
      }
      if (!*((_QWORD *)v2 + 109))
        goto LABEL_42;
      v17 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *((_QWORD *)v2 + 109);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v18;
        _os_log_impl(&dword_1AC149000, v17, OS_LOG_TYPE_DEFAULT, "removing %lu albums not re-added by the reset import", buf, 0xCu);
      }

      ML3AlbumRulesRemovalSourceIdentityPropertyForSource(*((unsigned int *)this + 8));
      v171 = (NSArray *)objc_claimAutoreleasedReturnValue();
      if (v171)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE album SET %@='', liked_state=?, liked_state_changed_date=? WHERE album_pid=?"), v171);
        v165 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = (ML3ImportSession *)this;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE album SET %@=0, liked_state=?, liked_state_changed_date=? WHERE album_artist_pid=?"), v171);
        v168 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = this[108];
        if (v20)
        {
          while (1)
          {
            v21 = v20[2];
            v22 = (void *)*((_QWORD *)v19 + 2);
            if (*((_DWORD *)v19 + 8) == 2)
            {
              v211[0] = &unk_1E5BAC378;
              objc_msgSend(MEMORY[0x1E0C99D68], "date");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              v211[1] = v23;
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v21);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              v211[2] = v24;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v211, 3);
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              v198 = 0;
              v26 = objc_msgSend(v22, "executeUpdate:withParameters:error:", v165, v25, &v198);
              v27 = v198;
            }
            else
            {
              v210[0] = &unk_1E5BAC378;
              objc_msgSend(MEMORY[0x1E0C99D68], "date");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              v210[1] = v23;
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v21);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              v210[2] = v24;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v210, 3);
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              v197 = 0;
              v26 = objc_msgSend(v22, "executeUpdate:withParameters:error:", v168, v25, &v197);
              v27 = v197;
            }

            if ((v26 & 1) == 0)
              break;

            v20 = (_QWORD *)*v20;
            v19 = (ML3ImportSession *)this;
            if (!v20)
            {
              v14 = 1;
              goto LABEL_39;
            }
          }
          v28 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543618;
            *(_QWORD *)&buf[4] = v171;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v21;
            _os_log_impl(&dword_1AC149000, v28, OS_LOG_TYPE_ERROR, "failed to remove source property=%{public}@ for albumPID=%lld", buf, 0x16u);
          }

          v14 = 0;
        }
LABEL_39:

      }
    }
    else
    {
      v14 = 1;
    }
    v2 = (ML3ImportSession *)this;
LABEL_42:
    if (*((_QWORD *)v2 + 94))
    {
      v29 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        v30 = *((_QWORD *)v2 + 94);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v30;
        _os_log_impl(&dword_1AC149000, v29, OS_LOG_TYPE_DEFAULT, "removing %lu tracks not re-added by the reset import", buf, 0xCu);
      }

      objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", this[94]);
      v172 = (NSArray *)objc_claimAutoreleasedReturnValue();
      v31 = (ML3ImportSession *)this;
      for (i = this[93]; i; v31 = (ML3ImportSession *)this)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", i[2]);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSArray addObject:](v172, "addObject:", v33);

        i = (_QWORD *)*i;
      }
      v14 = ML3ImportSession::_removeTracksFromLibrary(v31, v172);
      if (!v14)
      {
        v34 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1AC149000, v34, OS_LOG_TYPE_ERROR, "failed to remove remaining tracks", buf, 2u);
        }

      }
      v2 = (ML3ImportSession *)this;
    }
    v15 = v14;
    if (*((_QWORD *)v2 + 99))
    {
      v35 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        v36 = *((_QWORD *)v2 + 99);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v36;
        _os_log_impl(&dword_1AC149000, v35, OS_LOG_TYPE_DEFAULT, "removing %lu containers not re-added by the reset import", buf, 0xCu);
      }

      v2 = (ML3ImportSession *)this;
      v37 = this[98];
      if (v37)
      {
        while (1)
        {
          v38 = v37[2];
          v173 = -[ML3Entity initWithPersistentID:inLibrary:]([ML3Container alloc], "initWithPersistentID:inLibrary:", v38, this[1]);
          if (!-[ML3Entity deleteFromLibrary](v173, "deleteFromLibrary"))
            break;

          v37 = (_QWORD *)*v37;
          if (!v37)
          {
            v14 = 1;
            goto LABEL_62;
          }
        }
        v39 = os_log_create("com.apple.amp.medialibrary", "Default");
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v38;
          _os_log_impl(&dword_1AC149000, v39, OS_LOG_TYPE_ERROR, "failed to delete container %lld", buf, 0xCu);
        }

        v14 = 0;
LABEL_62:
        v2 = (ML3ImportSession *)this;
      }
      v15 = v14;
    }
    goto LABEL_64;
  }
  v15 = 1;
LABEL_64:
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear((uint64_t)v2 + 1088);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear((uint64_t)v2 + 1128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear((uint64_t)v2 + 1248);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear((uint64_t)v2 + 1168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear((uint64_t)v2 + 1208);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear((uint64_t)v2 + 968);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear((uint64_t)v2 + 1048);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear((uint64_t)v2 + 1008);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear((uint64_t)v2 + 928);
  std::__hash_table<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::shared_ptr<ML3ImportItem>>>>::clear((uint64_t)v2 + 888);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear((uint64_t)v2 + 1288);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<ML3ArtistData>>>>::clear((uint64_t)v2 + 1328);
  if (!v15)
  {
    v166 = 0;
    goto LABEL_123;
  }
  if ((ML3ImportSession::_enableTriggers((id *)v2) & 1) == 0)
  {
    v59 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v60 = "failed to re-create triggers";
      goto LABEL_120;
    }
    goto LABEL_121;
  }
  if (*((_BYTE *)this + 1513))
  {
    v40 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v40, OS_LOG_TYPE_DEFAULT, "re-building indexes after large import", buf, 2u);
    }

    v195 = 0u;
    v196 = 0u;
    v193 = 0u;
    v194 = 0u;
    +[ML3MusicLibrary indexSchemaSQL](ML3MusicLibrary, "indexSchemaSQL");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v193, v209, 16);
    if (!v42)
    {
LABEL_112:

      v59 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v60 = "failed to re-create indexes";
        goto LABEL_120;
      }
      goto LABEL_121;
    }
    v43 = *(_QWORD *)v194;
    do
    {
      for (j = 0; j != v42; ++j)
      {
        if (*(_QWORD *)v194 != v43)
          objc_enumerationMutation(v41);
        if ((objc_msgSend(this[2], "executeUpdate:", *(_QWORD *)(*((_QWORD *)&v193 + 1) + 8 * j)) & 1) == 0)
          goto LABEL_112;
      }
      v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v193, v209, 16);
    }
    while (v42);

    if ((objc_msgSend(this[2], "executeUpdate:", CFSTR("PRAGMA analysis_limit=400;")) & 1) == 0)
    {
      _ML3LogCategoryImport();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v45, OS_LOG_TYPE_ERROR, "failed to set ANALYZE limit", buf, 2u);
      }

    }
    objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
    v47 = v46;
    _ML3LogCategoryImport();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v48, OS_LOG_TYPE_DEFAULT, "Starting to run ANALYZE...", buf, 2u);
    }

    if ((objc_msgSend(this[2], "executeUpdate:", CFSTR("ANALYZE;")) & 1) == 0)
    {
      _ML3LogCategoryImport();
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v49, OS_LOG_TYPE_ERROR, "failed to perform ANALYZE", buf, 2u);
      }

    }
    objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
    v51 = v50;
    _ML3LogCategoryImport();
    v52 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v51 - v47;
      _os_log_impl(&dword_1AC149000, v52, OS_LOG_TYPE_DEFAULT, "Finished running ANALYZE... Took %g", buf, 0xCu);
    }

  }
  memset(v216, 0, sizeof(v216));
  v217 = 0u;
  v218 = 0u;
  v214[0] = objc_opt_class();
  v214[1] = objc_opt_class();
  v214[2] = objc_opt_class();
  v214[3] = objc_opt_class();
  v214[4] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v214, 5);
  v174 = (NSArray *)objc_claimAutoreleasedReturnValue();
  v53 = -[NSArray countByEnumeratingWithState:objects:count:](v174, "countByEnumeratingWithState:objects:count:", v216, buf, 16);
  if (!v53)
    goto LABEL_102;
  v54 = **(_QWORD **)&v216[16];
  while (2)
  {
    for (k = 0; k != v53; ++k)
    {
      if (**(_QWORD **)&v216[16] != v54)
        objc_enumerationMutation(v174);
      v56 = *(void **)(*(_QWORD *)&v216[8] + 8 * k);
      if (*((_DWORD *)this + 40) || (*((_DWORD *)this + 39) + *((_DWORD *)this + 38)) > 0x13)
      {
        if ((objc_msgSend(v56, "canonicalizeCollectionRepresentativeItemsInLibrary:usingConnection:", this[1], this[2]) & 1) == 0)
        {
          v160 = os_log_create("com.apple.amp.medialibrary", "Import");
          if (!os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
          {
LABEL_117:

            p_super = &v174->super;
            goto LABEL_118;
          }
          *(_WORD *)v201 = 0;
          v61 = "failed to canonicalize collection representative item pids";
LABEL_116:
          _os_log_impl(&dword_1AC149000, v160, OS_LOG_TYPE_ERROR, v61, v201, 2u);
          goto LABEL_117;
        }
      }
      else if ((objc_msgSend(v56, "updateRepresentativeItemPersistentIDsInLibrary:persistentIDs:usingConnection:", this[1], this[198], this[2]) & 1) == 0)
      {
        v160 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (!os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
          goto LABEL_117;
        *(_WORD *)v201 = 0;
        v61 = "failed to update representative item pids";
        goto LABEL_116;
      }
    }
    v53 = -[NSArray countByEnumeratingWithState:objects:count:](v174, "countByEnumeratingWithState:objects:count:", v216, buf, 16);
    if (v53)
      continue;
    break;
  }
LABEL_102:

  v57 = (ML3ImportSession *)this;
  if ((*((_BYTE *)this + 1512) || *((_DWORD *)this + 40) > 0x63u || *((_DWORD *)this + 58) || *((_DWORD *)this + 55))
    && (v58 = +[ML3Collection removeOrphanedCollectionsInLibrary:usingConnection:](ML3Collection, "removeOrphanedCollectionsInLibrary:usingConnection:", this[1], this[2]), v57 = (ML3ImportSession *)this, !v58))
  {
    p_super = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v201 = 0;
      _os_log_impl(&dword_1AC149000, p_super, OS_LOG_TYPE_ERROR, "failed to de-orphan collections", v201, 2u);
    }
LABEL_118:

    v59 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v60 = "failed to apply finishing collection changes";
      goto LABEL_120;
    }
  }
  else
  {
    if ((objc_msgSend(*((id *)v57 + 7), "commitUpdates") & 1) != 0)
    {
      v166 = 1;
      goto LABEL_122;
    }
    v59 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v60 = "failed to commit sort map changes";
LABEL_120:
      _os_log_impl(&dword_1AC149000, v59, OS_LOG_TYPE_ERROR, v60, buf, 2u);
    }
  }
LABEL_121:

  v166 = 0;
LABEL_122:
  v2 = (ML3ImportSession *)this;
LABEL_123:
  objc_msgSend(*((id *)v2 + 2), "executeQuery:", CFSTR("SELECT value FROM _MLDatabaseProperties WHERE key = 'MLCloudAccountID'"));
  v175 = (NSArray *)objc_claimAutoreleasedReturnValue();
  -[NSArray objectForFirstRowAndColumn](v175, "objectForFirstRowAndColumn");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = objc_msgSend(v63, "longLongValue");

  v65 = v166;
  if (v64)
    v65 = 0;
  v66 = v175;
  if (v65 == 1 && objc_msgSend(this[90], "count"))
  {
    v67 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
    {
      v68 = objc_msgSend(this[90], "count");
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v68;
      _os_log_impl(&dword_1AC149000, v67, OS_LOG_TYPE_DEFAULT, "inserting %lu tracks into purchase playlist", buf, 0xCu);
    }

    objc_msgSend(this[1], "currentDevicePurchasesPlaylist");
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = objc_msgSend(v69, "appendTracksWithPersistentIDs:notify:", this[90], 0);

    if ((v70 & 1) == 0)
    {
      v71 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v71, OS_LOG_TYPE_ERROR, "failed to update purchased playlist", buf, 2u);
      }

    }
    v66 = v175;
    objc_msgSend(this[90], "removeAllObjects");
  }

  v72 = (ML3ImportSession *)this;
  v73 = this[1];
  memset(buf, 0, 24);
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(buf, *((const void **)v72 + 287), *((_QWORD *)v72 + 288), (uint64_t)(*((_QWORD *)v72 + 288) - *((_QWORD *)v72 + 287)) >> 3);
  v74 = this[2];
  v188[0] = MEMORY[0x1E0C809B0];
  v188[1] = 3321888768;
  v188[2] = ___ZN16ML3ImportSession13_finishImportEv_block_invoke;
  v188[3] = &unk_1E5B526E0;
  v191 = 0;
  v192 = 0;
  __p = 0;
  v162 = *(void **)buf;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
  v163 = v73;
  v189 = v163;
  objc_msgSend(v74, "enqueueBlockForTransactionCommit:", v188);
  if (this[304])
  {
    v75 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
    {
      v76 = this[304];
      *(_DWORD *)v216 = 134217984;
      *(_QWORD *)&v216[4] = v76;
      _os_log_impl(&dword_1AC149000, v75, OS_LOG_TYPE_DEFAULT, "re-trying %lu orphaned playlists", v216, 0xCu);
    }

    v72 = (ML3ImportSession *)this;
    for (m = this[303]; m; v72 = (ML3ImportSession *)this)
    {
      v78 = m[2];
      v79 = m[3];
      ContainerPersistentID = ML3ImportSession::_getContainerPersistentID(v72, v79);
      if (ContainerPersistentID)
      {
        v81 = (void *)*((_QWORD *)v72 + 2);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", ContainerPersistentID);
        v82 = objc_claimAutoreleasedReturnValue();
        v208[0] = v82;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v78);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        v208[1] = v83;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v208, 2);
        v84 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v81, "executeUpdate:withParameters:error:", CFSTR("UPDATE container SET parent_pid = ? WHERE container_pid = ?"), v84, 0);

      }
      else
      {
        v82 = os_log_create("com.apple.amp.medialibrary", "Import");
        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v216 = 134218240;
          *(_QWORD *)&v216[4] = v78;
          *(_WORD *)&v216[12] = 2048;
          *(_QWORD *)&v216[14] = v79;
          _os_log_impl(&dword_1AC149000, v82, OS_LOG_TYPE_ERROR, "failed to find parent of orphaned container. container_pid=%lld, parentSourceId=%lld", v216, 0x16u);
        }
      }

      m = (_QWORD *)*m;
    }
  }
  v85 = (_QWORD *)*((_QWORD *)v72 + 57);
  v86 = (_QWORD *)*((_QWORD *)v72 + 58);
  if (v85 != v86)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *v85);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      v88 = this[2];
      v207[0] = v87;
      v207[1] = v87;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v207, 2);
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "executeUpdate:withParameters:error:", CFSTR("UPDATE album SET album_year = (SELECT IFNULL(MAX(year), 0) FROM item_extra JOIN item USING(item_pid) WHERE item.album_pid = ?) WHERE album_pid = ?"), v89, 0);

      ++v85;
    }
    while (v85 != v86);
    v72 = (ML3ImportSession *)this;
    v85 = this[57];
  }
  *((_QWORD *)v72 + 58) = v85;
  v90 = (_QWORD *)*((_QWORD *)v72 + 60);
  v91 = (_QWORD *)*((_QWORD *)v72 + 61);
  if (v90 != v91)
  {
    do
    {
      v92 = *v90;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *v90);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      v94 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v216 = 134217984;
        *(_QWORD *)&v216[4] = v92;
        _os_log_impl(&dword_1AC149000, v94, OS_LOG_TYPE_DEFAULT, "updating contains_classical_work for album %lld", v216, 0xCu);
      }

      v95 = this[2];
      v206[0] = v93;
      v206[1] = v93;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v206, 2);
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v95, "executeUpdate:withParameters:error:", CFSTR("UPDATE album SET contains_classical_work=(CASE WHEN EXISTS (SELECT album_pid FROM item JOIN item_extra USING (item_pid) WHERE album_pid=? AND classical_work!='' OR (show_composer=1 AND grouping!='')) THEN 1 ELSE 0 END) WHERE album_pid=?"), v96, 0);

      ++v90;
    }
    while (v90 != v91);
    v72 = (ML3ImportSession *)this;
    v90 = this[60];
  }
  *((_QWORD *)v72 + 61) = v90;
  v97 = (_QWORD *)*((_QWORD *)v72 + 63);
  v98 = (_QWORD *)*((_QWORD *)v72 + 64);
  if (v97 != v98)
  {
    do
    {
      v99 = *v97;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *v97);
      v100 = (void *)objc_claimAutoreleasedReturnValue();
      v101 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v216 = 134217984;
        *(_QWORD *)&v216[4] = v99;
        _os_log_impl(&dword_1AC149000, v101, OS_LOG_TYPE_DEFAULT, "updating all_compilations for album %lld", v216, 0xCu);
      }

      v102 = this[2];
      v205[0] = v100;
      v205[1] = v100;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v205, 2);
      v103 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v102, "executeUpdate:withParameters:error:", CFSTR("UPDATE album SET all_compilations=(SELECT IFNULL(MIN(is_compilation), 0) FROM item WHERE item.album_pid = ?) WHERE album_pid = ?"), v103, 0);

      ++v97;
    }
    while (v97 != v98);
    v72 = (ML3ImportSession *)this;
    v97 = this[63];
  }
  *((_QWORD *)v72 + 64) = v97;
  if (*((_DWORD *)v72 + 8) != 6)
  {
    if (!v166)
      goto LABEL_173;
LABEL_172:
    objc_msgSend(*((id *)v72 + 2), "executeUpdate:", CFSTR("DELETE FROM _MLDatabaseProperties WHERE key = 'MLResetCollectionsOnNextImport'"));
    goto LABEL_173;
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v169 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*((id *)v72 + 2), "executeQuery:", CFSTR("SELECT person_pid, cloud_id, name FROM person WHERE NOT EXISTS (SELECT * FROM container_item_person WHERE container_item_person.person_pid = person.person_pid) AND NOT EXISTS (SELECT * FROM container_author WHERE container_author.person_pid = person.person_pid)"));
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  v186[0] = MEMORY[0x1E0C809B0];
  v186[1] = 3221225472;
  v186[2] = ___ZN16ML3ImportSession13_finishImportEv_block_invoke_154;
  v186[3] = &unk_1E5B65EE0;
  v105 = v169;
  v187 = v105;
  objc_msgSend(v104, "enumerateRowsWithBlock:", v186);

  if (objc_msgSend(v105, "count"))
  {
    +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer");
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "statementWithPrefix:inParameterCount:", CFSTR("DELETE FROM person WHERE ROWID"), objc_msgSend(v105, "count"));
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v108 = this[2];
    v185 = 0;
    v109 = objc_msgSend(v108, "executeUpdate:withParameters:error:", v107, v105, &v185);
    v110 = v185;
    LOBYTE(v166) = v109;
    if ((v109 & 1) == 0)
    {
      v111 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v216 = 138543362;
        *(_QWORD *)&v216[4] = v110;
        _os_log_impl(&dword_1AC149000, v111, OS_LOG_TYPE_ERROR, "Failed to remove orphaned persons. err=%{public}@", v216, 0xCu);
      }

    }
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(this[2], "executeQuery:", CFSTR("SELECT container_item_reaction_pid, container_item_pid, person_pid FROM container_item_reaction WHERE NOT EXISTS (SELECT * FROM container_item WHERE container_item.container_item_pid =container_item_reaction.container_item_pid)"));
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  v183[0] = MEMORY[0x1E0C809B0];
  v183[1] = 3221225472;
  v183[2] = ___ZN16ML3ImportSession13_finishImportEv_block_invoke_159;
  v183[3] = &unk_1E5B65EE0;
  v114 = v112;
  v184 = v114;
  objc_msgSend(v113, "enumerateRowsWithBlock:", v183);

  if (objc_msgSend(v114, "count"))
  {
    +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer");
    v115 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v115, "statementWithPrefix:inParameterCount:", CFSTR("DELETE FROM container_item_reaction WHERE ROWID"), objc_msgSend(v114, "count"));
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    v117 = this[2];
    v182 = 0;
    v118 = objc_msgSend(v117, "executeUpdate:withParameters:error:", v116, v114, &v182);
    v119 = v182;
    LOBYTE(v166) = v118;
    if ((v118 & 1) == 0)
    {
      v120 = os_log_create("com.apple.amp.medialibrary", "Import");
      if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v216 = 138543362;
        *(_QWORD *)&v216[4] = v119;
        _os_log_impl(&dword_1AC149000, v120, OS_LOG_TYPE_ERROR, "Failed to remove orphaned reactions. err=%{public}@", v216, 0xCu);
      }

    }
  }

  v72 = (ML3ImportSession *)this;
  if ((v166 & 1) != 0)
    goto LABEL_172;
LABEL_173:
  v121 = *((_QWORD *)v72 + 8);
  if (v121 && v121 != *((_QWORD *)v72 + 2))
  {
    objc_msgSend(*((id *)v72 + 1), "checkInDatabaseConnection:");
    v122 = (void *)*((_QWORD *)v72 + 8);
    *((_QWORD *)v72 + 8) = 0;

    v72 = (ML3ImportSession *)this;
  }
  v123 = (void *)*((_QWORD *)v72 + 7);
  *((_QWORD *)v72 + 7) = 0;

  v124 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(this[1], "databasePath");
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v125, "stringByStandardizingPath");
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v124, "stringWithFormat:", CFSTR("com.apple.MusicLibrary.importFinished-%@"), v126);
  v127 = (void *)objc_claimAutoreleasedReturnValue();

  v128 = objc_retainAutorelease(v127);
  notify_post((const char *)objc_msgSend(v128, "UTF8String"));
  v129 = (ML3ImportSession *)this;
  if (*((_DWORD *)this + 54) && *((_DWORD *)this + 39)
    || *((_DWORD *)this + 48) + *((_DWORD *)this + 47) + *((_DWORD *)this + 49)
    || *((_DWORD *)this + 58)
     + *((_DWORD *)this + 56)
     + *((_DWORD *)this + 41)
     + *((_DWORD *)this + 43)
     + *((_DWORD *)this + 38)
     + *((_DWORD *)this + 40) != -*((_DWORD *)this + 46) - (*((_DWORD *)this + 44) + *((_DWORD *)this + 45)))
  {
    v130 = this[2];
    v180[0] = MEMORY[0x1E0C809B0];
    v180[1] = 3221225472;
    v180[2] = ___ZN16ML3ImportSession13_finishImportEv_block_invoke_164;
    v180[3] = &unk_1E5B64F90;
    v181 = v163;
    objc_msgSend(v130, "enqueueBlockForTransactionCommit:", v180);

    v129 = (ML3ImportSession *)this;
  }
  if (MSVDeviceOSIsInternalInstall())
  {
    CFPreferencesAppSynchronize(CFSTR("com.apple.medialibrary"));
    if (CFPreferencesGetAppBooleanValue(CFSTR("DuplicateVideosAlert"), CFSTR("com.apple.medialibrary"), 0))
    {
      v131 = (void *)*((_QWORD *)v129 + 2);
      v177[0] = MEMORY[0x1E0C809B0];
      v177[1] = 3221225472;
      v177[2] = ___ZN16ML3ImportSession13_finishImportEv_block_invoke_2_169;
      v177[3] = &unk_1E5B65008;
      v179 = v129;
      v178 = v163;
      objc_msgSend(v131, "enqueueBlockForTransactionCommit:", v177);

      v129 = (ML3ImportSession *)this;
    }
  }
  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  v133 = v132;
  v134 = *((double *)v129 + 30);
  v135 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v216 = 134218240;
    *(_QWORD *)&v216[4] = v129;
    *(_WORD *)&v216[12] = 2048;
    *(double *)&v216[14] = v133 - v134;
    _os_log_impl(&dword_1AC149000, v135, OS_LOG_TYPE_DEFAULT, "finished import session %p in %.2f seconds", v216, 0x16u);
  }

  v136 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
  {
    v137 = *((_DWORD *)this + 38);
    v138 = *((_DWORD *)this + 39);
    v139 = *((_DWORD *)this + 40);
    *(_DWORD *)v216 = 67109632;
    *(_DWORD *)&v216[4] = v137;
    *(_WORD *)&v216[8] = 1024;
    *(_DWORD *)&v216[10] = v138;
    *(_WORD *)&v216[14] = 1024;
    *(_DWORD *)&v216[16] = v139;
    _os_log_impl(&dword_1AC149000, v136, OS_LOG_TYPE_DEFAULT, "    tracks: %d adds %d updates %d deletes", v216, 0x14u);
  }

  v140 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
  {
    v141 = *((_DWORD *)this + 41);
    v142 = *((_DWORD *)this + 42);
    v143 = *((_DWORD *)this + 43);
    *(_DWORD *)v216 = 67109632;
    *(_DWORD *)&v216[4] = v141;
    *(_WORD *)&v216[8] = 1024;
    *(_DWORD *)&v216[10] = v142;
    *(_WORD *)&v216[14] = 1024;
    *(_DWORD *)&v216[16] = v143;
    _os_log_impl(&dword_1AC149000, v140, OS_LOG_TYPE_DEFAULT, "    containers: %d adds %d updates %d deletes", v216, 0x14u);
  }

  v144 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
  {
    v145 = *((_DWORD *)this + 53);
    v146 = *((_DWORD *)this + 54);
    v147 = *((_DWORD *)this + 55);
    *(_DWORD *)v216 = 67109632;
    *(_DWORD *)&v216[4] = v145;
    *(_WORD *)&v216[8] = 1024;
    *(_DWORD *)&v216[10] = v146;
    *(_WORD *)&v216[14] = 1024;
    *(_DWORD *)&v216[16] = v147;
    _os_log_impl(&dword_1AC149000, v144, OS_LOG_TYPE_DEFAULT, "    albums: %d adds %d updates %d deletes", v216, 0x14u);
  }

  v148 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
  {
    v149 = *((_DWORD *)this + 56);
    v150 = *((_DWORD *)this + 57);
    v151 = *((_DWORD *)this + 58);
    *(_DWORD *)v216 = 67109632;
    *(_DWORD *)&v216[4] = v149;
    *(_WORD *)&v216[8] = 1024;
    *(_DWORD *)&v216[10] = v150;
    *(_WORD *)&v216[14] = 1024;
    *(_DWORD *)&v216[16] = v151;
    _os_log_impl(&dword_1AC149000, v148, OS_LOG_TYPE_DEFAULT, "    artists: %d adds %d updates %d deletes", v216, 0x14u);
  }

  v152 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
  {
    v153 = *((_DWORD *)this + 50);
    v154 = *((_DWORD *)this + 51);
    v155 = *((_DWORD *)this + 52);
    *(_DWORD *)v216 = 67109632;
    *(_DWORD *)&v216[4] = v153;
    *(_WORD *)&v216[8] = 1024;
    *(_DWORD *)&v216[10] = v154;
    *(_WORD *)&v216[14] = 1024;
    *(_DWORD *)&v216[16] = v155;
    _os_log_impl(&dword_1AC149000, v152, OS_LOG_TYPE_DEFAULT, "    persons: %d adds %d updates %d deletes", v216, 0x14u);
  }

  if (*((_BYTE *)this + 1521))
  {
    v156 = (void *)MEMORY[0x1E0D4D030];
    v202 = CFSTR("importSource");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *((unsigned int *)this + 8));
    v157 = (void *)objc_claimAutoreleasedReturnValue();
    v203 = v157;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v203, &v202, 1);
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    v204 = v158;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v204, 1);
    v159 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v156, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", *MEMORY[0x1E0D4CE40], CFSTR("Bug"), CFSTR("Invalid Import State"), CFSTR("Error importing payload"), 0, v159, 0);

  }
  if (__p)
  {
    v191 = __p;
    operator delete(__p);
  }
  if (v162)
    operator delete(v162);

}

void sub_1AC372068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZN16ML3ImportSession13_finishImportEv_block_invoke(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  void *v4;
  _QWORD v6[4];
  void *__p;
  void *v8;
  uint64_t v9;

  v2 = *(const void **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  if ((const void *)v3 != v2)
  {
    v4 = *(void **)(a1 + 32);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3321888768;
    v6[2] = ___ZN16ML3ImportSession13_finishImportEv_block_invoke_2;
    v6[3] = &__block_descriptor_56_ea8_32c39_ZTSNSt3__16vectorIxNS_9allocatorIxEEEE_e31_v16__0__ML3DatabaseConnection_8l;
    v8 = 0;
    v9 = 0;
    __p = 0;
    std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p, v2, v3, (v3 - (uint64_t)v2) >> 3);
    objc_msgSend(v4, "databaseConnectionAllowingWrites:withBlock:", 1, v6);
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  return objc_msgSend(*(id *)(a1 + 32), "notifyContentsDidChange");
}

void sub_1AC372434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN16ML3ImportSession13_finishImportEv_block_invoke_154(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "numberForColumnIndex:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringForColumnIndex:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringForColumnIndex:", 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138543874;
    v9 = v4;
    v10 = 2114;
    v11 = v6;
    v12 = 2114;
    v13 = v5;
    _os_log_impl(&dword_1AC149000, v7, OS_LOG_TYPE_DEFAULT, "purging orphaned person %{public}@: %{public}@, %{public}@", (uint8_t *)&v8, 0x20u);
  }

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
}

void sub_1AC37257C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession13_finishImportEv_block_invoke_159(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "numberForColumnIndex:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "numberForColumnIndex:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "numberForColumnIndex:", 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = os_log_create("com.apple.amp.medialibrary", "Import");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138543874;
    v9 = v4;
    v10 = 2114;
    v11 = v5;
    v12 = 2114;
    v13 = v6;
    _os_log_impl(&dword_1AC149000, v7, OS_LOG_TYPE_DEFAULT, "purging orphaned reaaction pid %{public}@; container_item_pid=%{public}@, person_pid=%{public}@",
      (uint8_t *)&v8,
      0x20u);
  }

  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
}

void sub_1AC3726E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t ___ZN16ML3ImportSession13_finishImportEv_block_invoke_164(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = result;
    objc_msgSend(*(id *)(result + 32), "notifyEntitiesAddedOrRemoved");
    return objc_msgSend(*(id *)(v2 + 32), "notifyAssistantContentsDidChange");
  }
  return result;
}

void ___ZN16ML3ImportSession13_finishImportEv_block_invoke_2_169(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  id v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  int v12;
  _QWORD v13[4];
  id v14;
  uint8_t *v15;
  uint8_t buf[8];
  uint8_t *v17;
  uint64_t v18;
  char v19;
  uint8_t v20[4];
  int v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = os_log_create("com.apple.amp.medialibrary", "Import");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v4, OS_LOG_TYPE_DEFAULT, "Checking for Duplicate Videos...", buf, 2u);
    }

    *(_QWORD *)buf = 0;
    v17 = buf;
    v18 = 0x2020000000;
    v19 = 0;
    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = *(void **)(a1 + 32);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = ___ZN16ML3ImportSession13_finishImportEv_block_invoke_171;
    v13[3] = &unk_1E5B64FE0;
    v15 = buf;
    v7 = v5;
    v14 = v7;
    objc_msgSend(v6, "databaseConnectionAllowingWrites:withBlock:", 0, v13);
    v8 = v17[24];
    v9 = os_log_create("com.apple.amp.medialibrary", "Import");
    v10 = v9;
    if (v8)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v11 = *(_DWORD *)(v3 + 32);
        *(_DWORD *)v20 = 67109378;
        v21 = v11;
        v22 = 2112;
        v23 = v7;
        _os_log_impl(&dword_1AC149000, v10, OS_LOG_TYPE_ERROR, "Duplicate Videos Detected after source %d import!\n%@", v20, 0x12u);
      }

      ML3ShowFileRadarAlert(CFSTR("Duplicate Video Detected"), CFSTR("The media library service has detected that a duplicate video has been imported."), v7);
    }
    else
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_DWORD *)(v3 + 32);
        *(_DWORD *)v20 = 67109120;
        v21 = v12;
        _os_log_impl(&dword_1AC149000, v10, OS_LOG_TYPE_DEFAULT, "No Duplicate Videos found after source %d import.", v20, 8u);
      }

    }
    _Block_object_dispose(buf, 8);
  }
}

void sub_1AC37296C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession13_finishImportEv_block_invoke_171(uint64_t a1, void *a2)
{
  id v3;
  __int128 v4;
  id v5;
  _QWORD v6[4];
  __int128 v7;

  objc_msgSend(a2, "executeQuery:", CFSTR("SELECT store_item_id, title, media_type FROM item JOIN item_store USING(item_pid) JOIN item_extra USING(item_pid) WHERE store_item_id IN (SELECT store_item_id FROM item JOIN item_store USING(item_pid) GROUP BY store_item_id HAVING COUNT() > 1 AND store_item_id !=0 AND media_type IN (512,2048)) AND is_ota_purchased = 1 AND purchase_history_id = 0"));
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN16ML3ImportSession13_finishImportEv_block_invoke_2_174;
  v6[3] = &unk_1E5B64FB8;
  v4 = *(_OWORD *)(a1 + 32);
  v3 = (id)v4;
  v7 = v4;
  objc_msgSend(v5, "enumerateRowsWithBlock:", v6);

}

void sub_1AC372A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{

  _Unwind_Resume(a1);
}

void ___ZN16ML3ImportSession13_finishImportEv_block_invoke_2_174(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v5 = a2;
  if (v5 && !a3)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  v6 = *(void **)(a1 + 32);
  v10 = v5;
  objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectAtIndexedSubscript:", 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectAtIndexedSubscript:", 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "appendFormat:", CFSTR("%@ | %@ | %@\n"), v7, v8, v9);

}

void sub_1AC372B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_40c39_ZTSNSt3__16vectorIxNS_9allocatorIxEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
}

void __destroy_helper_block_ea8_40c39_ZTSNSt3__16vectorIxNS_9allocatorIxEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN16ML3ImportSession13_finishImportEv_block_invoke_2(uint64_t a1, void *a2)
{
  _QWORD *i;
  _QWORD *v4;
  id v5;

  v5 = a2;
  v4 = *(_QWORD **)(a1 + 32);
  for (i = *(_QWORD **)(a1 + 40); v4 != i; ++v4)
    +[ML3Container reloadContainedMediaTypesForContainerWithPersistID:usingConnection:](ML3Container, "reloadContainedMediaTypesForContainerWithPersistID:usingConnection:", *v4, v5);

}

void sub_1AC372BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_32c39_ZTSNSt3__16vectorIxNS_9allocatorIxEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
}

void __destroy_helper_block_ea8_32c39_ZTSNSt3__16vectorIxNS_9allocatorIxEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void sub_1AC372F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC373074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18457(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18458(uint64_t a1)
{

}

void sub_1AC37328C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC3732F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC3733F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC373454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC3734AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC373504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC3735AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC373608(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC373678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AC373730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC3737FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1AC3738D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC3739C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

sqlite3_int64 ML3DatabaseRowInt64ForColumnIndex(uint64_t a1, int a2)
{
  return sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 8), a2);
}

uint64_t ML3DatabaseRowIntForColumnIndex(uint64_t a1, int a2)
{
  return sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), a2);
}

uint64_t ML3ContainerItemOccurrenceID(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "stringByAppendingFormat:", CFSTR("_%lld"), a2);
}

__CFString *ML3ContainerItemOccurrencePrefix(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  id v13;
  void *v14;
  char *v15;
  uint64_t quot;
  lldiv_t v17;
  uint64_t v18;
  const UInt8 *v19;
  uint64_t v20;
  lldiv_t v21;
  uint64_t v22;
  char *v23;
  CFStringRef v24;
  __CFString *v25;
  char *v27;
  uint64_t v28;
  lldiv_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  lldiv_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v14 = v13;
  if (a1 && a5 == 8 && a6)
  {
    v15 = (char *)&v35 + 1;
    quot = a1;
    do
    {
      v17 = lldiv(quot, 10);
      quot = v17.quot;
      if (v17.rem >= 0)
        LOBYTE(v18) = v17.rem;
      else
        v18 = -v17.rem;
      *(v15 - 2) = v18 + 48;
      v19 = (const UInt8 *)(v15 - 2);
      --v15;
    }
    while (v17.quot);
LABEL_18:
    if (a1 < 0)
    {
      *(v15 - 2) = 45;
      v19 = (const UInt8 *)(v15 - 2);
    }
    v23 = (char *)((char *)&v35 - (char *)v19);
    goto LABEL_21;
  }
  if (a1 && a7 == 3 && (a6 & 1) == 0)
  {
    v15 = (char *)&v35 + 1;
    v20 = a1;
    do
    {
      v21 = lldiv(v20, 10);
      v20 = v21.quot;
      if (v21.rem >= 0)
        LOBYTE(v22) = v21.rem;
      else
        v22 = -v21.rem;
      *(v15 - 2) = v22 + 48;
      v19 = (const UInt8 *)(v15 - 2);
      --v15;
    }
    while (v21.quot);
    goto LABEL_18;
  }
  if (objc_msgSend(v13, "length"))
  {
    v24 = v14;
    goto LABEL_22;
  }
  if (a3)
  {
    v27 = (char *)&v35 + 1;
    v28 = a3;
    do
    {
      v29 = lldiv(v28, 10);
      v28 = v29.quot;
      if (v29.rem >= 0)
        LOBYTE(v30) = v29.rem;
      else
        v30 = -v29.rem;
      *(v27 - 2) = v30 + 48;
      v19 = (const UInt8 *)(v27 - 2);
      --v27;
    }
    while (v29.quot);
    if (a3 < 0)
    {
      *(v27 - 2) = 45;
      v19 = (const UInt8 *)(v27 - 2);
    }
  }
  else
  {
    v31 = (char *)&v35 + 1;
    v32 = a4;
    do
    {
      v33 = lldiv(v32, 10);
      v32 = v33.quot;
      if (v33.rem >= 0)
        LOBYTE(v34) = v33.rem;
      else
        v34 = -v33.rem;
      *(v31 - 2) = v34 + 48;
      v19 = (const UInt8 *)(v31 - 2);
      --v31;
    }
    while (v33.quot);
    if (a4 < 0)
    {
      *(v31 - 2) = 45;
      v19 = (const UInt8 *)(v31 - 2);
    }
  }
  v23 = (char *)((char *)&v35 - (char *)v19);
LABEL_21:
  v24 = CFStringCreateWithBytes(0, v19, (CFIndex)v23, 0x8000100u, 0);
LABEL_22:
  v25 = (__CFString *)v24;

  return v25;
}

id ML3DatabaseImportDataForDAAPFilePaths(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint8_t buf[4];
  id v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v16;
    v5 = 0x1E0CB3000uLL;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v16 != v4)
          objc_enumerationMutation(v1);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          objc_msgSend(*(id *)(v5 + 1160), "currentHandler");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSData *ML3DatabaseImportDataForDAAPFilePaths(NSArray *__strong)");
          v8 = v5;
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("ML3DatabaseImport.m"), 269, CFSTR("DAAP file path must be a string."));

          v5 = v8;
        }
        ++v6;
      }
      while (v3 != v6);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
    }
    while (v3);
  }
  v14 = 0;
  objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v1, 200, 0, &v14);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v14;
  if (v11)
  {
    v12 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v20 = v11;
      _os_log_impl(&dword_1AC149000, v12, OS_LOG_TYPE_ERROR, "Failed to encode DAAP file paths with error: %{public}@", buf, 0xCu);
    }

  }
  return v10;
}

BOOL ML3ImportDefaultRememberBookmarkTime(__int16 a1)
{
  return (a1 & 0x3B26) != 0;
}

BOOL ML3ImportDefaultExcludeFromShuffle(__int16 a1)
{
  return (a1 & 0x408) == 0;
}

void ML3ContainerItemReactionImportItem::~ML3ContainerItemReactionImportItem(void **this)
{
  ML3ContainerItemReactionImportItem::~ML3ContainerItemReactionImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{
  *this = &off_1E5B503C0;
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3ContainerItemReactionImportItem::isValid(ML3ContainerItemReactionImportItem *this)
{
  return 1;
}

std::string *ML3ContainerItemReactionImportItem::getStringValue@<X0>(std::string *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  if (a2 == 268435458)
  {
    this = std::string::operator=((std::string *)(a3 + 16), (std::string *)((char *)this + 88));
    *(_BYTE *)(a3 + 8) = 1;
  }
  return this;
}

void sub_1AC3752B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)v1 = v4;
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t ML3ContainerItemReactionImportItem::getIntegerValue(ML3ContainerItemReactionImportItem *this, int a2)
{
  char *v2;

  switch(a2)
  {
    case 268435459:
      v2 = (char *)this + 112;
      return *(_QWORD *)v2;
    case 268435461:
      v2 = (char *)this + 80;
      return *(_QWORD *)v2;
    case 268435460:
      v2 = (char *)this + 72;
      return *(_QWORD *)v2;
  }
  return 0;
}

BOOL ML3ContainerItemReactionImportItem::hasValue(ML3ContainerItemReactionImportItem *this, int a2)
{
  return (a2 - 268435458) < 4;
}

uint64_t ML3ContainerItemReactionImportItem::ML3ContainerItemReactionImportItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  std::string *v9;
  __int128 v10;

  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)a1 = &off_1E5B503C0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = a3;
  *(_QWORD *)(a1 + 80) = a4;
  v9 = (std::string *)(a1 + 88);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v10 = *a5;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_QWORD *)(a1 + 112) = a6;
  *(_QWORD *)(a1 + 8) = a2;
  return a1;
}

void sub_1AC37542C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

BOOL ML3RestrictionRankInfoIsRestrictedLevel(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;

  v2 = a1[1];
  if (v2 <= *a1)
    return 1;
  v3 = a1[2];
  if (v2 < a2)
  {
    v6 = __OFSUB__(v3, a2);
    v4 = v3 == a2;
    v5 = v3 - a2 < 0;
  }
  else
  {
    v6 = 0;
    v4 = 1;
    v5 = 0;
  }
  return !(v5 ^ v6 | v4);
}

uint64_t ML3RestrictionInfoUninitialize()
{
  pthread_mutex_lock(&sRestrictionSettingsLock);
  sRestrictionSettingsInfo = 0;
  return pthread_mutex_unlock(&sRestrictionSettingsLock);
}

id ML3FairPlayHardwareID()
{
  void *v0;
  void *v1;
  id v2;
  int v3;
  int v4;
  NSObject *v5;
  void *v6;
  int v8;
  uint64_t v9;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MGCopyAnswer();
  v1 = v0;
  if (v0)
  {
    memset(v10, 0, 24);
    v2 = objc_retainAutorelease(v0);
    zxcm2Qme0x(objc_msgSend(v2, "UTF8String"), objc_msgSend(v2, "length"), (uint64_t)v10);
    v4 = v3;
    if (!v3)
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", (char *)v10 + 4, LODWORD(v10[0]));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_8;
    }
    v5 = os_log_create("com.apple.amp.medialibrary", "Library");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 134217984;
      v9 = v4;
      _os_log_impl(&dword_1AC149000, v5, OS_LOG_TYPE_DEFAULT, "ML3FairPlayHardwareID failed. err=%ld", (uint8_t *)&v8, 0xCu);
    }

  }
  v6 = 0;
LABEL_8:

  return v6;
}

void sub_1AC375EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ML3TrackIntegrityComputeFromTrackData(unsigned int a1, unint64_t a2, void *a3, unint64_t a4)
{
  id v7;
  id v8;
  id v9;
  int v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  unsigned int v16;
  CC_SHA1_CTX c;
  unint64_t data;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  unsigned __int8 v25[57];
  unsigned __int8 md[20];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  CC_SHA1_Init(&c);
  data = bswap64(a2);
  CC_SHA1_Update(&c, &data, 8u);
  data = bswap64(a1);
  CC_SHA1_Update(&c, &data, 8u);
  v8 = objc_retainAutorelease(v7);
  CC_SHA1_Update(&c, (const void *)objc_msgSend(v8, "UTF8String"), objc_msgSend(v8, "length"));
  data = bswap64(a4);
  CC_SHA1_Update(&c, &data, 8u);
  CC_SHA1_Final(md, &c);
  v16 = 57;
  ML3FairPlayHardwareID();
  v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  gDmCYFQnze(4, 0, objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"), (uint64_t)md, 20, (uint64_t)v25, (uint64_t)&v16);
  v11 = v10;
  if (v10)
  {
    v12 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = objc_msgSend(v9, "length");
      *(_DWORD *)buf = 134218496;
      v20 = v11;
      v21 = 2048;
      v22 = v13;
      v23 = 1024;
      v24 = 20;
      _os_log_impl(&dword_1AC149000, v12, OS_LOG_TYPE_ERROR, "FairPlayCandyBarCompute failed with %ld on sugar of %ld length for digest of %d length", buf, 0x1Cu);
    }

    v14 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v25, v16);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v14;
}

void sub_1AC3760D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ML3IsCurrentlyRestrictedMedia(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  sqlite3_value **v3;
  unsigned int v5;
  int v6;
  int v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v13;
  BOOL v14;
  int v17;

  v3 = a3;
  v5 = sqlite3_value_int(*a3);
  v6 = sqlite3_value_int(v3[1]);
  v7 = sqlite3_value_int(v3[2]);
  LODWORD(v3) = sqlite3_value_int(v3[3]);
  ML3RestrictionInfoInitializeIfNecessary();
  if (!(_DWORD)v3)
  {
    v8 = (v5 & 4) != 0 || (v5 & 0x2800) == 0;
    v9 = v8 && (v5 & 0x200) == 0;
    v10 = v9 && (v5 & 2) == 0;
    v11 = !v10 || v6 == 0;
    if (!v11 && v6 != 2)
      goto LABEL_46;
  }
  if (!byte_1ED07883B || ((v5 & 2) != 0 ? (v13 = v6 == 0) : (v13 = 1), v13))
  {
    if ((v5 & 0x2800) == 0 || (v5 & 4) != 0)
    {
      if ((v5 & 0x200) == 0)
        goto LABEL_48;
      goto LABEL_43;
    }
  }
  else
  {
    v14 = v6 != 2;
    if (v6 != 2 || (v5 & 0x2800) == 0 || (v5 & 4) != 0)
      goto LABEL_41;
  }
  if (qword_1ED078848 <= qword_1ED078840)
    goto LABEL_46;
  v14 = qword_1ED078848 < v7 && qword_1ED078850 > v7;
LABEL_41:
  if (!v14 && (v5 & 0x200) != 0)
  {
LABEL_43:
    if (qword_1ED078860 <= qword_1ED078858 || qword_1ED078860 < v7 && qword_1ED078868 > v7)
      goto LABEL_46;
LABEL_48:
    v17 = (byte_1ED07883C != 0) & (v5 >> 10);
    goto LABEL_49;
  }
  if (!v14)
    goto LABEL_48;
LABEL_46:
  v17 = 1;
LABEL_49:
  sqlite3_result_int(a1, v17);
}

void ML3TrackDigestCompute(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  unsigned __int8 v4[20];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  _ML3GetDigestFromSqlite3Values(v4, a2, a3);
  sqlite3_result_blob(a1, v4, 20, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t _ML3GetDigestFromSqlite3Values(unsigned __int8 *a1, int a2, sqlite3_value **a3)
{
  uint64_t v6;
  sqlite3_value *v7;
  unint64_t v8;
  unint64_t *p_data;
  CC_LONG v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t data;
  CC_SHA1_CTX c;

  memset(&c, 0, sizeof(c));
  CC_SHA1_Init(&c);
  if (a2 >= 1)
  {
    v6 = a2;
    do
    {
      v7 = *a3;
      switch(sqlite3_value_type(*a3))
      {
        case 1:
          data = 0;
          v8 = bswap64(sqlite3_value_int64(v7));
          goto LABEL_6;
        case 2:
          data = 0;
          v8 = bswap64(COERCE_UNSIGNED_INT64(sqlite3_value_double(v7)));
LABEL_6:
          data = v8;
          p_data = &data;
          v10 = 8;
          goto LABEL_11;
        case 3:
          v11 = (unint64_t *)sqlite3_value_text(v7);
          goto LABEL_9;
        case 4:
          v11 = (unint64_t *)sqlite3_value_blob(v7);
LABEL_9:
          v12 = v11;
          v10 = sqlite3_value_bytes(v7);
          p_data = v12;
          goto LABEL_11;
        case 5:
          LOBYTE(data) = 0;
          p_data = &data;
          v10 = 1;
LABEL_11:
          CC_SHA1_Update(&c, p_data, v10);
          break;
        default:
          break;
      }
      ++a3;
      --v6;
    }
    while (v6);
  }
  return CC_SHA1_Final(a1, &c);
}

void ML3TrackIntegrityCompute(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  id v4;
  int v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  _BYTE v16[57];
  unsigned __int8 v17[20];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  _ML3GetDigestFromSqlite3Values(v17, a2, a3);
  v9 = 57;
  ML3FairPlayHardwareID();
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  gDmCYFQnze(4, 0, objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"), (uint64_t)v17, 20, (uint64_t)v16, (uint64_t)&v9);
  if (v5)
  {
    v6 = v5;
    v7 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = objc_msgSend(v4, "length");
      *(_DWORD *)buf = 134218496;
      v11 = v6;
      v12 = 2048;
      v13 = v8;
      v14 = 1024;
      v15 = 20;
      _os_log_impl(&dword_1AC149000, v7, OS_LOG_TYPE_ERROR, "FairPlayCandyBarCompute failed with %ld on sugar of %ld length for digest of %d length", buf, 0x1Cu);
    }

    sqlite3_result_null(a1);
  }
  else
  {
    sqlite3_result_blob(a1, v16, v9, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }

}

void ML3TrackIntegrityVerify(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  void *v5;
  id v6;
  int v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  unsigned __int8 v13[20];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0)
  {
    sqlite3_result_error(a1, "", 1);
  }
  else
  {
    _ML3GetDigestFromSqlite3Values(v13, a2 - 1, a3 + 1);
    sqlite3_value_blob(*a3);
    sqlite3_value_bytes(*a3);
    ML3FairPlayHardwareID();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "length"))
    {
      v6 = objc_retainAutorelease(v5);
      objc_msgSend(v6, "bytes");
      objc_msgSend(v6, "length");
      zLTj();
      v8 = v7;
      if (v7)
      {
        v9 = os_log_create("com.apple.amp.medialibrary", "Library");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v11 = 134217984;
          v12 = v8;
          _os_log_impl(&dword_1AC149000, v9, OS_LOG_TYPE_DEFAULT, "ML3TrackIntegrityVerify failed. err=%ld", (uint8_t *)&v11, 0xCu);
        }

      }
      v10 = v8 != -42022;
    }
    else
    {
      v10 = 1;
    }
    sqlite3_result_int(a1, v10);

  }
}

void ML3CompoundSortKey(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  id v6;
  uint64_t v7;
  sqlite3_value *v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  void *v12;
  uint64_t v13;
  unint64_t *v14;
  id v15;
  unint64_t v16;

  v6 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
  if (a2 >= 1)
  {
    v7 = a2;
    while (1)
    {
      v8 = *a3;
      v9 = sqlite3_value_type(*a3);
      if ((v9 - 1) < 2)
        break;
      if (v9 == 3)
      {
        v10 = (unint64_t *)sqlite3_value_text(v8);
LABEL_9:
        v14 = v10;
        v13 = sqlite3_value_bytes(v8);
        v12 = v6;
        v11 = v14;
LABEL_10:
        objc_msgSend(v12, "appendBytes:length:", v11, v13);
        goto LABEL_11;
      }
      if (v9 == 4)
      {
        v10 = (unint64_t *)sqlite3_value_blob(v8);
        goto LABEL_9;
      }
LABEL_11:
      ++a3;
      if (!--v7)
        goto LABEL_12;
    }
    v16 = 0;
    v16 = bswap64(sqlite3_value_int64(v8));
    v11 = &v16;
    v12 = v6;
    v13 = 8;
    goto LABEL_10;
  }
LABEL_12:
  v15 = objc_retainAutorelease(v6);
  sqlite3_result_blob(a1, (const void *)objc_msgSend(v15, "bytes"), objc_msgSend(v15, "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);

}

void ML3SearchStringMatch(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  const unsigned __int8 *v5;
  const char *v6;
  char *searchUTF8String;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  CPSearchMatcher *searchMatcher;
  const unsigned __int8 *v16;
  int v17;
  ML3MatcherAuxData *v18;

  sqlite3_get_auxdata(a1, 0);
  v18 = (ML3MatcherAuxData *)objc_claimAutoreleasedReturnValue();
  v5 = sqlite3_value_text(*a3);
  v6 = (const char *)v5;
  if (!v18)
  {
    v18 = objc_alloc_init(ML3MatcherAuxData);
    sqlite3_set_auxdata(a1, 0, v18, (void (__cdecl *)(void *))_ML3DestroyCFObjectContext);
    searchUTF8String = v18->_searchUTF8String;
    if (!searchUTF8String)
      goto LABEL_5;
    goto LABEL_4;
  }
  searchUTF8String = v18->_searchUTF8String;
  if (!strcmp(searchUTF8String, (const char *)v5))
    goto LABEL_11;
  if (searchUTF8String)
LABEL_4:
    free(searchUTF8String);
LABEL_5:
  v18->_searchUTF8String = strdup(v6);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v6);
  objc_msgSend(MEMORY[0x1E0CB3500], "alphanumericCharacterSet");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v8, "rangeOfCharacterFromSet:", v9);

  v11 = objc_alloc(MEMORY[0x1E0CFA9B0]);
  if (v10 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v12 = v8;
    v13 = 0;
  }
  else
  {
    v13 = (*MEMORY[0x1E0CFAA58] | *MEMORY[0x1E0CFAA50]) | *MEMORY[0x1E0CFAA60];
    v12 = v8;
  }
  v14 = objc_msgSend(v11, "initWithSearchString:options:", v12, v13);
  searchMatcher = v18->_searchMatcher;
  v18->_searchMatcher = (CPSearchMatcher *)v14;

LABEL_11:
  v16 = sqlite3_value_text(a3[1]);
  if (v16)
    v17 = -[CPSearchMatcher matchesUTF8String:](v18->_searchMatcher, "matchesUTF8String:", v16);
  else
    v17 = 0;
  sqlite3_result_int(a1, v17);

}

void _ML3DestroyCFObjectContext(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void ML3SeasonDisplayName(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  uint64_t v4;
  UInt8 *v5;
  __CFString *v6;

  v4 = sqlite3_value_int(*a3);
  if ((int)v4 < 1)
  {
    sqlite3_result_null(a1);
  }
  else
  {
    MLLocalizedSeasonDisplayStringForSeasonNumber(v4);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v5 = ML3CopyUTF8StringFromCFString(v6);
    sqlite3_result_text(a1, (const char *)v5, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);

  }
}

void ML3SortString(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  void *v5;
  UInt8 *v6;
  __CFString *v7;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sqlite3_value_text(*a3));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "MLSortString");
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v6 = ML3CopyUTF8StringFromCFString(v7);
    sqlite3_result_text(a1, (const char *)v6, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  }
  else
  {
    sqlite3_result_value(a1, *a3);
  }

}

void ML3SortStringWithPrefix(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  void *v5;
  UInt8 *v6;
  __CFString *v7;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", sqlite3_value_text(*a3));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "MLSortStringWithPrefix");
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v6 = ML3CopyUTF8StringFromCFString(v7);
    sqlite3_result_text(a1, (const char *)v6, -1, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
  }
  else
  {
    sqlite3_result_value(a1, *a3);
  }

}

void ML3ItemDatabaseImportDataSource::~ML3ItemDatabaseImportDataSource(id *this)
{
  *this = &off_1E5B4F940;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 17));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 13));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 11));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 9));
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
}

{
  *this = &off_1E5B4F940;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 17));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 13));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 11));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 9));
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ItemDatabaseImportDataSource::getImportPropertyGroupKey(ML3ItemDatabaseImportDataSource *this)
{
  return 1;
}

uint64_t ML3ItemDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ItemDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

void ML3ItemDatabaseImportDataSource::prepareColumns(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10[2];
  std::string __p;
  std::string v12;

  v4 = *(_QWORD *)(a1 + 24);
  v10[0] = *(_QWORD *)(*a2 + 8);
  v5 = std::__hash_table<std::__hash_value_type<long long,ML3CollectionInfoSet>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,ML3CollectionInfoSet>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,ML3CollectionInfoSet>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v4 + 336, v10[0], v10);
  std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)(a1 + 72), v5[3], v5[4]);
  std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)(a1 + 88), v5[5], v5[6]);
  std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)(a1 + 104), v5[7], v5[8]);
  std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)(a1 + 120), v5[9], v5[10]);
  std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)(a1 + 136), v5[11], v5[12]);
  (*(void (**)(unint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*a2 + 144))(v10, *a2, 33554433, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v12 = __p;
  ML3CPPBridgeString((const UInt8 *)&v12, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v10[0] = (unint64_t)off_1E5B4D010;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = *(id *)(*(_QWORD *)(a1 + 24) + 24);
  objc_msgSend(v7, "objectForKey:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 152) = objc_msgSend(v8, "ML3NameOrderValue");
  *(_QWORD *)(a1 + 160) = v9;

  *(_BYTE *)(a1 + 168) = *(_BYTE *)(*(_QWORD *)(a1 + 24) + 252);
}

void sub_1AC3771F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ML3ItemDatabaseImportDataSource::integerValueForKey(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;

  v3 = 0;
  switch((int)a3)
  {
    case 16777217:
      v4 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, 16777217);
      return MLMediaTypeByStandardizingMediaType(v4);
    case 16777218:
      return *(_QWORD *)(a1 + 152);
    case 16777219:
      if (!*(_QWORD *)(a1 + 152))
        return *(unsigned __int8 *)(a1 + 168);
      return *(_QWORD *)(a1 + 160);
    case 16777220:
      v5 = *(_QWORD *)(a1 + 72);
      return *(_QWORD *)v5;
    case 16777221:
      v6 = *(_QWORD *)(a1 + 72);
      return *(_QWORD *)(v6 + 112);
    case 16777222:
      v7 = *(_QWORD *)(a1 + 72);
      goto LABEL_18;
    case 16777223:
      return *(_QWORD *)(*(_QWORD *)(a1 + 72) + 128);
    case 16777224:
      v8 = *(_QWORD *)(a1 + 72);
      if (!*(_QWORD *)(v8 + 128))
        return *(unsigned __int8 *)(a1 + 168);
      return *(_QWORD *)(v8 + 136);
    case 16777225:
      v5 = *(_QWORD *)(a1 + 104);
      return *(_QWORD *)v5;
    case 16777226:
      return *(_QWORD *)(*(_QWORD *)(a1 + 104) + 72);
    case 16777227:
      v9 = *(_QWORD *)(a1 + 104);
      if (!*(_QWORD *)(v9 + 72))
        return *(unsigned __int8 *)(a1 + 168);
      return *(_QWORD *)(v9 + 80);
    case 16777228:
      v5 = *(_QWORD *)(a1 + 88);
      return *(_QWORD *)v5;
    case 16777229:
      v6 = *(_QWORD *)(a1 + 88);
      return *(_QWORD *)(v6 + 112);
    case 16777230:
      v7 = *(_QWORD *)(a1 + 88);
LABEL_18:
      if (!*(_QWORD *)(v7 + 112))
        return *(unsigned __int8 *)(a1 + 168);
      return *(_QWORD *)(v7 + 120);
    case 16777231:
      v5 = *(_QWORD *)(a1 + 120);
      return *(_QWORD *)v5;
    case 16777232:
      return *(_QWORD *)(*(_QWORD *)(a1 + 120) + 56);
    case 16777233:
      v10 = *(_QWORD *)(a1 + 120);
      if (!*(_QWORD *)(v10 + 56))
        return *(unsigned __int8 *)(a1 + 168);
      return *(_QWORD *)(v10 + 64);
    case 16777234:
      v5 = *(_QWORD *)(a1 + 136);
      return *(_QWORD *)v5;
    case 16777235:
      return *(_QWORD *)(*(_QWORD *)(a1 + 136) + 32);
    case 16777236:
      v11 = *(_QWORD *)(a1 + 136);
      if (*(_QWORD *)(v11 + 32))
        return *(_QWORD *)(v11 + 40);
      else
        return *(unsigned __int8 *)(a1 + 168);
    case 16777239:
      v13 = *a2;
      v12 = (std::__shared_weak_count *)a2[1];
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, 16777239);
      if (!v3)
      {
        v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, 16777238);
        if (!v3)
          v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, 117440517);
      }
      if (!v12)
        return v3;
      v16 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      break;
    case 16777240:
    case 16777241:
      return v3;
    default:
      v19 = *a2;
      v12 = (std::__shared_weak_count *)a2[1];
      if (v12)
      {
        v20 = (unint64_t *)&v12->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, a3);
      if (!v12)
        return v3;
      v22 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(v22);
      while (__stlxr(v17 - 1, v22));
      break;
  }
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return v3;
}

void sub_1AC3774C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ML3ItemDatabaseImportDataSource::hasValueForKey(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  switch((int)a3)
  {
    case 16777218:
    case 16777219:
      if (*(_BYTE *)(*a2 + 17))
        return 1;
      v12 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 56);
      return v12();
    case 16777220:
    case 16777225:
    case 16777228:
    case 16777231:
    case 16777234:
      v5 = (std::__shared_weak_count *)a2[1];
      v19 = *a2;
      v20 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v8 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 80))(a1, &v19, a3) != 0;
      v9 = v20;
      if (!v20)
        return v8;
      v10 = (unint64_t *)&v20->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_8;
    case 16777221:
    case 16777222:
      v13 = *a2;
      if (!*(_BYTE *)(*a2 + 17))
        goto LABEL_21;
      return 1;
    case 16777223:
    case 16777224:
      if (*(_BYTE *)(*a2 + 17))
        return 1;
      v12 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 56);
      return v12();
    case 16777226:
    case 16777227:
      if (*(_BYTE *)(*a2 + 17))
        return 1;
      v12 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 56);
      return v12();
    case 16777229:
    case 16777230:
      if (*(_BYTE *)(*a2 + 17)
        || ((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, 167772163) & 1) != 0)
      {
        return 1;
      }
      v13 = *a2;
LABEL_21:
      v12 = *(uint64_t (**)(void))(*(_QWORD *)v13 + 56);
      return v12();
    case 16777232:
    case 16777233:
      if (*(_BYTE *)(*a2 + 17))
        return 1;
      v12 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 56);
      return v12();
    case 16777235:
    case 16777236:
      if (*(_BYTE *)(*a2 + 17))
        return 1;
      v12 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 56);
      return v12();
    case 16777239:
      if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, 16777239) & 1) != 0
        || ((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, 16777238) & 1) != 0)
      {
        return 1;
      }
      else
      {
        v12 = *(uint64_t (**)(void))(*(_QWORD *)*a2 + 56);
        return v12();
      }
    default:
      v14 = *a2;
      v9 = (std::__shared_weak_count *)a2[1];
      if (v9)
      {
        v15 = (unint64_t *)&v9->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 56))(v14, a3) & 1) != 0)
      {
        v8 = 1;
      }
      else if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 200))(v14, a3))
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
      }
      else
      {
        v8 = 0;
      }
      if (!v9)
        return v8;
      v18 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v18);
      while (__stlxr(v11 - 1, v18));
LABEL_8:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      return v8;
  }
}

void sub_1AC3777BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ML3HomeSharingContainerImportItem::~ML3HomeSharingContainerImportItem(ML3HomeSharingContainerImportItem *this)
{
  ML3DAAPContainerImportItem::~ML3DAAPContainerImportItem(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3HomeSharingContainerImportItem::isValid(ML3HomeSharingContainerImportItem *this)
{
  return 1;
}

uint64_t ML3HomeSharingContainerImportItem::getIntegerValue(ML3HomeSharingContainerImportItem *this, uint64_t a2)
{
  unint64_t v2;
  ML3CPP::Element *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  ML3CPP::Element *v15;
  std::__shared_weak_count *v16;

  if ((int)a2 <= 184549396)
  {
    if ((_DWORD)a2 != 184549377)
    {
      if ((_DWORD)a2 == 184549395)
      {
        if ((*(uint64_t (**)(ML3HomeSharingContainerImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 184549377) == *((_QWORD *)this + 36))return 1;
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v15, *((_QWORD *)this + 8), 0x61655053u);
        if (v15)
          v2 = ML3CPP::Element::integerValue(v15) - 10 < 0xFFFFFFFE;
        else
          v2 = 0;
        v12 = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        return v2;
      }
      return ML3DAAPContainerImportItem::getIntegerValue((ML3DAAPImportItem *)this, a2);
    }
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v15, *((_QWORD *)this + 8), 0x6D696964u);
    v5 = v15;
    if (v15)
      v2 = ML3CPP::Element::integerValue(v15);
    v6 = v16;
    if (!v16)
      goto LABEL_30;
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldaxr(v10);
    while (__stlxr(v8 - 1, v10));
    goto LABEL_29;
  }
  switch((_DWORD)a2)
  {
    case 0xB000015:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v15, *((_QWORD *)this + 8), 0x668D6368u);
      v5 = v15;
      if (v15)
        v2 = ML3CPP::Element::integerValue(v15);
      v6 = v16;
      if (!v16)
        goto LABEL_30;
      v7 = (unint64_t *)&v16->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
LABEL_29:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (v5)
          return v2;
        return ML3DAAPContainerImportItem::getIntegerValue((ML3DAAPImportItem *)this, a2);
      }
      goto LABEL_30;
    case 0xB000018:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v15, *((_QWORD *)this + 8), 0x61655347u);
      v5 = v15;
      if (v15)
        v2 = ML3CPP::Element::integerValue(v15);
      v6 = v16;
      if (v16)
      {
        v9 = (unint64_t *)&v16->__shared_owners_;
        do
          v8 = __ldaxr(v9);
        while (__stlxr(v8 - 1, v9));
        goto LABEL_29;
      }
LABEL_30:
      if (v5)
        return v2;
      return ML3DAAPContainerImportItem::getIntegerValue((ML3DAAPImportItem *)this, a2);
    case 0xB000025:
      return 3;
  }
  return ML3DAAPContainerImportItem::getIntegerValue((ML3DAAPImportItem *)this, a2);
}

void ML3HomeSharingContainerImportItem::getDataValue(ML3HomeSharingContainerImportItem *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  ML3HomeSharingContainerImportItem *v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;

  v3 = this;
  v4 = a3;
  if ((_DWORD)a2 == 184549407)
  {
    if (std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(*((_QWORD *)this + 8) + 96, 0x61655350u))
    {
      v5 = operator new();
      *(_QWORD *)v5 = &off_1E5B4CF08;
      *(_QWORD *)(v5 + 8) = 1;
      v6 = (_BYTE *)operator new[]();
      *(_QWORD *)(v5 + 16) = v6;
      *(_BYTE *)(v5 + 24) = 1;
      *v6 = 0;
      std::shared_ptr<ML3CPPData>::shared_ptr[abi:ne180100]<ML3CPPData,void>(v4, v5);
      return;
    }
    a3 = v4;
    this = v3;
    a2 = 184549407;
  }
  ML3DAAPContainerImportItem::getDataValue(this, a2, a3);
}

void sub_1AC377B48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF43C744](v1, 0x1091C40934DB768);
  _Unwind_Resume(a1);
}

BOOL ML3HomeSharingContainerImportItem::hasValue(ML3HomeSharingContainerImportItem *this, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  unsigned int v5;

  result = 1;
  if ((int)a2 > 184549399)
  {
    switch((_DWORD)a2)
    {
      case 0xB000018:
        v4 = *((_QWORD *)this + 8) + 96;
        v5 = 1634030407;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v5) != 0;
      case 0xB00001F:
        v4 = *((_QWORD *)this + 8) + 96;
        v5 = 1634030416;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v5) != 0;
      case 0xB000025:
        return result;
    }
    return ML3DAAPContainerImportItem::hasValue((ML3DAAPImportItem *)this, a2);
  }
  if ((_DWORD)a2 == 184549377)
  {
    v4 = *((_QWORD *)this + 8) + 96;
    v5 = 1835624804;
    return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v5) != 0;
  }
  if ((_DWORD)a2 == 184549395)
    return result;
  if ((_DWORD)a2 != 184549397)
    return ML3DAAPContainerImportItem::hasValue((ML3DAAPImportItem *)this, a2);
  v4 = *((_QWORD *)this + 8) + 96;
  v5 = 1720542056;
  return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v5) != 0;
}

void ML3HomeSharingTrackImportItem::~ML3HomeSharingTrackImportItem(ML3HomeSharingTrackImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

BOOL ML3HomeSharingTrackImportItem::isValid(ML3HomeSharingTrackImportItem *this)
{
  return (*(unsigned int (**)(ML3HomeSharingTrackImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777217) != 0;
}

void ML3HomeSharingTrackImportItem::getStringValue(ML3HomeSharingTrackImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::string __str;
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (std::string *)(a3 + 16);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  if ((int)a2 > 100663305)
  {
    if ((_DWORD)a2 == 100663306)
    {
LABEL_17:
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
      std::string::operator=(v4, &__str);
      *(_BYTE *)(a3 + 8) = 1;
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v8 = (void *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
    if ((_DWORD)a2 != 167772173)
    {
LABEL_15:
      ML3DAAPImportItem::getStringValue((ML3DAAPImportItem *)this, a2, (uint64_t)&__str);
      *(_BYTE *)(a3 + 8) = __str.__r_.__value_.__s.__data_[8];
      std::string::operator=(v4, (const std::string *)&__str.__r_.__value_.__r.__words[2]);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5B4D010;
      if ((v10 & 0x80000000) == 0)
        return;
      v8 = (void *)__str.__r_.__value_.__r.__words[2];
LABEL_19:
      operator delete(v8);
      return;
    }
  }
  else if ((_DWORD)a2 != 33554439)
  {
    if ((_DWORD)a2 == 100663304)
      goto LABEL_17;
    goto LABEL_15;
  }
  ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v11, *((_QWORD *)this + 8), 0x6173666Du);
  if (v11)
  {
    std::string::basic_string[abi:ne180100](&__str, *(void **)(v11 + 48), *(_QWORD *)(v11 + 64));
    std::string::operator=(v4, &__str);
    *(_BYTE *)(a3 + 8) = 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1AC377ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;
  void **v22;
  uint64_t v23;

  if (a15 < 0)
    operator delete(__p);
  *(_QWORD *)v21 = v23;
  if (*(char *)(v21 + 39) < 0)
    operator delete(*v22);
  _Unwind_Resume(exception_object);
}

uint64_t ML3HomeSharingTrackImportItem::getDescription(ML3HomeSharingTrackImportItem *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v5[11];
  char v6;
  uint64_t v7;
  char v8;

  (*(void (**)(ML3HomeSharingTrackImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663309);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"<ML3HomeSharingTrackImportItem ", 31);
  *(_DWORD *)((char *)&v5[1] + *(_QWORD *)(v5[0] - 24)) = *(_DWORD *)((_BYTE *)&v5[1] + *(_QWORD *)(v5[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (_QWORD *)std::ostream::operator<<();
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" homeSharingId=", 15);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  v3 = (_QWORD *)std::ostream::operator<<();
  v8 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v8, 1);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v5[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v7);
}

void sub_1AC3780AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id ML3HomeSharingTrackImportItem::getDeduplicationPredicates(ML3HomeSharingTrackImportItem *this)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
  v3 = (*(uint64_t (**)(ML3HomeSharingTrackImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663309);
  if (v3)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.home_sharing_id"), v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v4);

  }
  return v2;
}

void sub_1AC37814C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id ML3MemorySQLiteDatabasePathWithName(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v5;
  void *v6;

  v1 = a1;
  if (!objc_msgSend(v1, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *ML3MemorySQLiteDatabasePathWithName(NSString *__strong)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("ML3SqliteUtilities.m"), 19, CFSTR("invalid parameter"));

  }
  objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", CFSTR(":"), CFSTR("_"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("file:%@?mode=memory&cache=shared"), v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

BOOL ML3TruncateDatabase(void *a1, int a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  _BOOL8 v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  const char *v11;
  int v13;
  sqlite3 *ppDb;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  ppDb = 0;
  v3 = objc_retainAutorelease(a1);
  if (sqlite3_open_v2((const char *)objc_msgSend(v3, "fileSystemRepresentation"), &ppDb, 16777218, 0))
  {
    v4 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v4, OS_LOG_TYPE_DEFAULT, "** COULD NOT DELETE DATABASE! **", buf, 2u);
    }

    v5 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v5, OS_LOG_TYPE_DEFAULT, "MusicLibrary couldn't create a SQLite handle to truncate.", buf, 2u);
    }

    v6 = 0;
  }
  else
  {
    if (a2)
      v7 = 129;
    else
      v7 = 128;
    v13 = v7;
    v8 = sqlite3_file_control(ppDb, 0, 101, &v13);
    v6 = v8 == 0;
    if (v8)
    {
      v9 = v8;
      v10 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = sqlite3_errmsg(ppDb);
        *(_DWORD *)buf = 138543874;
        v16 = v3;
        v17 = 2082;
        v18 = v11;
        v19 = 1024;
        v20 = v9;
        _os_log_impl(&dword_1AC149000, v10, OS_LOG_TYPE_DEFAULT, "Could not truncate database at path: %{public}@. %{public}s (%d)", buf, 0x1Cu);
      }

    }
    sqlite3_close(ppDb);
  }

  return v6;
}

BOOL ML3CopyDatabase(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  int v9;
  __CFString *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  int v20;
  sqlite3 *v21;
  sqlite3 *ppDb;
  uint64_t v23;
  __CFString *v24;
  uint8_t buf[4];
  id v26;
  __int16 v27;
  __CFString *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v21 = 0;
  ppDb = 0;
  v7 = objc_retainAutorelease(v5);
  v8 = sqlite3_open_v2((const char *)objc_msgSend(v7, "fileSystemRepresentation"), &ppDb, 16777217, 0);
  if ((_DWORD)v8)
  {
    v9 = v8;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Could not open original database. %s (%d)"), sqlite3_errmsg(ppDb), v8);
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v11 = 0;
    goto LABEL_8;
  }
  v12 = sqlite3_open_v2((const char *)objc_msgSend(objc_retainAutorelease(v6), "fileSystemRepresentation"), &v21, 16777222, 0);
  if ((_DWORD)v12)
  {
    v9 = v12;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Could not open database copy. %s (%d)"), sqlite3_errmsg(v21), v12);
LABEL_7:
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v11 = 0;
    goto LABEL_8;
  }
  v13 = sqlite3_file_control(v21, 0, 102, ppDb);
  if ((_DWORD)v13)
  {
    v9 = v13;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Could not perform copy: %s (%d)"), sqlite3_errmsg(v21), v13);
    goto LABEL_7;
  }
  v20 = sqlite3_exec(v21, "PRAGMA wal_checkpoint(RESTART);", 0, 0, 0);
  if (v20)
    v9 = v20;
  else
    v9 = 0;
  if (v20)
    v10 = CFSTR("Warning: could not checkpoint copied SQLite file.");
  else
    v10 = 0;
  v11 = v20 == 0;
LABEL_8:
  if (ppDb)
    sqlite3_close(ppDb);
  if (v21)
    sqlite3_close(v21);
  if (v10)
  {
    v14 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      v26 = v7;
      v27 = 2114;
      v28 = v10;
      _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_DEFAULT, "Could not copy database file at path %{public}@. %{public}@", buf, 0x16u);
    }

    if (a3)
    {
      v15 = (void *)MEMORY[0x1E0CB35C8];
      v23 = *MEMORY[0x1E0CB2D50];
      v24 = v10;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "errorWithDomain:code:userInfo:", CFSTR("ML3DatabaseErrorDomain"), v9, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v18 = objc_retainAutorelease(v17);
      *a3 = v18;

    }
  }

  return v11;
}

BOOL ML3SQLiteResultIsCorruption(int a1)
{
  return a1 == 11 || a1 == 267 || a1 == 26;
}

id ML3NonQualifiedColumnNameFromProperty(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  v2 = objc_msgSend(v1, "rangeOfString:", CFSTR("."));
  v3 = v1;
  if (v2 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(v1, "substringFromIndex:", v2 + 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v3;
}

void ML3ContainerSeedDatabaseImportDataSource::~ML3ContainerSeedDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ContainerSeedDatabaseImportDataSource::getImportPropertyGroupKey(ML3ContainerSeedDatabaseImportDataSource *this)
{
  return 12;
}

uint64_t ML3ContainerSeedDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ContainerSeedDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

unint64_t ML3ContainerSeedDatabaseImportDataSource::integerValueForKey(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v23[8];
  std::__shared_weak_count *v24;
  uint8_t buf[4];
  unint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v23[7] = 0;
  v24 = 0;
  v4 = *a2;
  if ((_DWORD)a3 == 201326593)
  {
    v5 = (std::__shared_weak_count *)a2[1];
    v23[5] = *a2;
    v23[6] = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, 201326593);
    v9 = v8;
    if (!v5)
      goto LABEL_9;
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v9)
        goto LABEL_26;
    }
    else
    {
LABEL_9:
      if (!v8)
        goto LABEL_26;
    }
    std::unordered_map<unsigned long long,long long>::unordered_map((uint64_t)v23, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 616) + 40 * *(int *)(*(_QWORD *)(a1 + 24) + 32));
    v12 = std::__hash_table<std::__hash_value_type<long long,long long>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,long long>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,long long>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,long long>>>::find<long long>(v23, v9);
    if (v12)
    {
      v9 = v12[3];
    }
    else
    {
      v18 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v26 = v9;
        _os_log_impl(&dword_1AC149000, v18, OS_LOG_TYPE_ERROR, "failed to map container_seed item_pid %lld", buf, 0xCu);
      }

    }
    std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)v23);
  }
  else
  {
    v13 = (std::__shared_weak_count *)a2[1];
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a3);
    if (v13)
    {
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
LABEL_26:
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return v9;
}

void sub_1AC37901C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  _Unwind_Resume(exception_object);
}

uint64_t ML3ContainerSeedDatabaseImportDataSource::hasValueForKey(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;

  v3 = *a2;
  if ((_DWORD)a3 == 201326593)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, 201326593) & 1) != 0)
    {
      v7 = 1;
      if (!v4)
        return v7;
    }
    else if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 200))(v3, 201326593))
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
      if (!v4)
        return v7;
    }
    else
    {
      v7 = 0;
      if (!v4)
        return v7;
    }
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
  }
  else
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (v4)
    {
      v9 = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, a3) & 1) != 0)
    {
      v7 = 1;
      if (!v4)
        return v7;
    }
    else if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 200))(v3, a3))
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
      if (!v4)
        return v7;
    }
    else
    {
      v7 = 0;
      if (!v4)
        return v7;
    }
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v13);
    while (__stlxr(v12 - 1, v13));
  }
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1AC3791F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1AC379428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC3796AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC379B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1AC37A604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  ML3ImportSession::~ML3ImportSession((ML3ImportSession *)&STACK[0x3A0]);
  _Unwind_Resume(a1);
}

void sub_1AC37A958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1AC37ABA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC37AE34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC37B6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v27 - 144);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v27 - 128);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a27);

  _Unwind_Resume(a1);
}

void sub_1AC37C1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  void *v27;
  uint64_t v28;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v28 - 144);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v28 - 128);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a27);

  _Unwind_Resume(a1);
}

void sub_1AC37C648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a5);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1AC37CA2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1AC37D00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  va_list va;

  va_start(va, a17);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1AC37D3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a5);
  v7 = v6;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1AC37D604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a5);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1AC37D970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1AC37DDE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1AC37E1DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1AC37E75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1AC37E9E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL23TranslateDictionaryKeysP12NSDictionaryS0_P19NSMutableDictionary_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v5, v6);

}

void sub_1AC37EA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1AC37EC1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3ITunesSyncContainerImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncContainerImportItem>,std::allocator<ML3ITunesSyncContainerImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ITunesSyncContainerImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncContainerImportItem>,std::allocator<ML3ITunesSyncContainerImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ITunesSyncContainerImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncContainerImportItem>,std::allocator<ML3ITunesSyncContainerImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_32ML3ITunesSyncContainerImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1AC37ED78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3ITunesSyncTrackImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncTrackImportItem>,std::allocator<ML3ITunesSyncTrackImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ITunesSyncTrackImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncTrackImportItem>,std::allocator<ML3ITunesSyncTrackImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ITunesSyncTrackImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncTrackImportItem>,std::allocator<ML3ITunesSyncTrackImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_28ML3ITunesSyncTrackImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ITunesSyncAlbumImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncAlbumImportItem>,std::allocator<ML3ITunesSyncAlbumImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ITunesSyncAlbumImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncAlbumImportItem>,std::allocator<ML3ITunesSyncAlbumImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ITunesSyncAlbumImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncAlbumImportItem>,std::allocator<ML3ITunesSyncAlbumImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_28ML3ITunesSyncAlbumImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ITunesSyncArtistImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncArtistImportItem>,std::allocator<ML3ITunesSyncArtistImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ITunesSyncArtistImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncArtistImportItem>,std::allocator<ML3ITunesSyncArtistImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ITunesSyncArtistImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ITunesSyncArtistImportItem>,std::allocator<ML3ITunesSyncArtistImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_29ML3ITunesSyncArtistImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1AC37EFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1AC37F140(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3SubscriptionContainerImportItem::~ML3SubscriptionContainerImportItem(ML3SubscriptionContainerImportItem *this)
{
  ML3DAAPContainerImportItem::~ML3DAAPContainerImportItem(this);
  JUMPOUT(0x1AF43C744);
}

