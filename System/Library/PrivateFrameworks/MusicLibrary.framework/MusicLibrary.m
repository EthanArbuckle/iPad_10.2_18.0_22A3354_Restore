void sub_1AC14B75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1AC14BB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC14C890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC14CDD0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1AC14CDF0(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1AC14CD9CLL);
}

void sub_1AC14D098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1AC14D1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC14D660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC14DB44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1AC14F3B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC151644(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC151974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ML3RestrictionInfoInitializeIfNecessary()
{
  void *v0;
  int v1;
  void *v2;
  int v3;
  BOOL v4;

  if (!sRestrictionSettingsInfo)
  {
    pthread_mutex_lock(&sRestrictionSettingsLock);
    if (sRestrictionSettingsInfo)
    {
LABEL_10:
      pthread_mutex_unlock(&sRestrictionSettingsLock);
      return;
    }
    byte_1ED07883A = ML3HasExplicitContentRestriction();
    objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    v1 = objc_msgSend(v0, "effectiveBoolValueForSetting:", *MEMORY[0x1E0D46F80]);

    byte_1ED07883B = v1 == 2;
    objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "effectiveBoolValueForSetting:", *MEMORY[0x1E0D470E8]);

    byte_1ED07883C = v3 == 2;
    ML3RestrictionRankInfoInitialize(&qword_1ED078840, (void *)*MEMORY[0x1E0D470C0], 0, 1000);
    ML3RestrictionRankInfoInitialize(&qword_1ED078858, (void *)*MEMORY[0x1E0D470C8], 0, 1000);
    if (!byte_1ED07883A && !byte_1ED07883B)
    {
      v4 = 1;
      if (byte_1ED07883C)
      {
LABEL_9:
        byte_1ED078839 = v4;
        sRestrictionSettingsInfo = 1;
        goto LABEL_10;
      }
      if (qword_1ED078848 >= qword_1ED078850)
      {
        v4 = qword_1ED078860 < qword_1ED078868;
        goto LABEL_9;
      }
    }
    v4 = 1;
    goto LABEL_9;
  }
}

void sub_1AC151D18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC15251C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ML3RestrictionRankInfoInitialize(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *a1 = a3;
  a1[2] = a4;
  objc_msgSend(v7, "effectiveValueForSetting:", v9);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  a1[1] = (int)objc_msgSend(v8, "intValue");

}

void sub_1AC1525F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

BOOL ML3HasExplicitContentRestriction()
{
  void *v0;
  int v1;

  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "effectiveBoolValueForSetting:", *MEMORY[0x1E0D46FF8]);

  return v1 == 2;
}

void sub_1AC1530A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC153594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC15378C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{

  _Unwind_Resume(a1);
}

void sub_1AC153864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1AC153D88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC15459C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC154958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3GreenTeaIsLoggableBundleIdentifier(void *a1)
{
  uint64_t v1;
  id v2;
  int v3;

  v1 = ML3GreenTeaIsLoggableBundleIdentifier_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&ML3GreenTeaIsLoggableBundleIdentifier_onceToken, &__block_literal_global_12631);
  v3 = objc_msgSend((id)ML3GreenTeaIsLoggableBundleIdentifier___greenTeaBundleIdentifierIgnoreList, "containsObject:", v2);

  return v3 ^ 1u;
}

void sub_1AC155318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  uint64_t v16;

  _Block_object_dispose((const void *)(v16 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ML3ArtworkConfigurationMediaTypeForString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeMusicQuiz")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeAudioBook")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypePodcast")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeSong")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeVoiceMemo")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeITunesUAudio")) & 1) != 0)
  {
    v2 = 32;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeDigitalBooklet")) & 1) != 0)
  {
    v2 = 64;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeVideoPodcast")) & 1) != 0)
  {
    v2 = 256;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeTVShow")) & 1) != 0)
  {
    v2 = 512;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeMusicVideo")) & 1) != 0)
  {
    v2 = 1024;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeMovie")) & 1) != 0)
  {
    v2 = 2048;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeVideoITunesU")) & 1) != 0)
  {
    v2 = 4096;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeHomeVideo")) & 1) != 0)
  {
    v2 = 0x2000;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeAny")) & 1) != 0)
  {
    v2 = 0xFFFFFFLL;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeAnyAudio")) & 1) != 0)
  {
    v2 = 255;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("MLMediaTypeAnyVideo")))
  {
    v2 = 65280;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_1AC1559F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC155AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC155C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1AC156F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AC157440(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void FastAppendPersistentID(ML3QueryResultSet_MutableBackingStore *a1, int64_t a2, char a3)
{
  int64_t *value;
  int64_t *end;
  int64_t *v8;
  int64_t *begin;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  int64_t *v16;
  int64_t *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  char *v27;
  char *v28;
  char *v29;
  char v30;

  end = a1->super._persistentIDs.__end_;
  value = a1->super._persistentIDs.__end_cap_.__value_;
  if (end >= value)
  {
    begin = a1->super._persistentIDs.__begin_;
    v10 = end - begin;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v12 = (char *)value - (char *)begin;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8;
    v14 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (v14)
    {
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v14);
      begin = a1->super._persistentIDs.__begin_;
      end = a1->super._persistentIDs.__end_;
    }
    else
    {
      v15 = 0;
    }
    v16 = (int64_t *)(v14 + 8 * v10);
    v17 = (int64_t *)(v14 + 8 * v15);
    *v16 = a2;
    v8 = v16 + 1;
    while (end != begin)
    {
      v18 = *--end;
      *--v16 = v18;
    }
    a1->super._persistentIDs.__begin_ = v16;
    a1->super._persistentIDs.__end_ = v8;
    a1->super._persistentIDs.__end_cap_.__value_ = v17;
    if (begin)
      operator delete(begin);
  }
  else
  {
    *end = a2;
    v8 = end + 1;
  }
  a1->super._persistentIDs.__end_ = v8;
  v20 = a1->super._sections.__end_;
  v19 = a1->super._sections.__end_cap_.__value_;
  if (v20 >= v19)
  {
    v22 = a1->super._sections.__begin_;
    v23 = v20 - v22;
    v24 = v20 - v22 + 1;
    if (v24 < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v25 = v19 - v22;
    if (2 * v25 > v24)
      v24 = 2 * v25;
    if (v25 >= 0x3FFFFFFFFFFFFFFFLL)
      v26 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
      v27 = (char *)operator new(v26);
    else
      v27 = 0;
    v28 = &v27[v26];
    v27[v23] = a3;
    v21 = &v27[v23 + 1];
    if (v20 == v22)
    {
      v27 += v23;
    }
    else
    {
      v29 = &v20[~(unint64_t)v22];
      do
      {
        v30 = *--v20;
        (v29--)[(_QWORD)v27] = v30;
      }
      while (v20 != v22);
      v20 = a1->super._sections.__begin_;
    }
    a1->super._sections.__begin_ = v27;
    a1->super._sections.__end_ = v21;
    a1->super._sections.__end_cap_.__value_ = v28;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v20 = a3;
    v21 = v20 + 1;
  }
  a1->super._sections.__end_ = v21;
}

void sub_1AC15A044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t iPhoneSortKeyBuilderInstallSqlite3_v2(unsigned int *pApp, sqlite3 *db)
{
  unsigned int v4;
  uint64_t result;

  if (pApp)
  {
    do
      v4 = __ldxr(pApp);
    while (__stxr(v4 + 1, pApp));
  }
  result = sqlite3_create_function_v2(db, "iPhoneSortKey", 1, 2052, pApp, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))iPhoneSortKeyBuilderMake_xFunc, 0, 0, (void (__cdecl *)(void *))iPhoneSortKeyBuilderRelease);
  if (!(_DWORD)result)
  {
    result = sqlite3_create_function_v2(db, "iPhoneSortSection", 1, 2053, pApp, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))iPhoneSortKeyBuilderSection_xFunc, 0, 0, 0);
    if (!(_DWORD)result)
      return sqlite3_create_function_v2(db, "iPhoneGroupingKey", 1, 2052, pApp, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))iPhoneSortKeyBuilderGroupingKey_xFunc, 0, 0, 0);
  }
  return result;
}

const __CFString *iPhoneSortKeyBuilderGetHeaderForSection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4 >= 1)
  {
    v5 = 0;
    for (i = 0; i < v4; ++i)
    {
      v7 = *(_QWORD *)(a1 + 24) + v5;
      v8 = a2 - *(_QWORD *)(v7 + 40);
      if (v8 >= 0)
      {
        if (v8 < CFArrayGetCount(*(CFArrayRef *)(v7 + 16)))
          return (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 16), v8);
        v4 = *(_QWORD *)(a1 + 32);
      }
      v5 += 48;
    }
  }
  v9 = *(_QWORD *)(a1 + 24) + 48 * v4;
  v10 = *(_QWORD *)(v9 - 8);
  if (v10 + CFArrayGetCount(*(CFArrayRef *)(v9 - 24)) + 1 == a2)
    return CFSTR("UNKNOWN_SECTION_HEADER");
  else
    return CFSTR("NUMERIC_SECTION_HEADER");
}

void sub_1AC15B318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1AC15B440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  uint64_t v16;

  _Block_object_dispose((const void *)(v16 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AC15B650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC15B8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  NSObject *v14;

  if (a2 == 1)
  {
    v10 = objc_begin_catch(exception_object);
    _ML3LogCategoryCacheManagement();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(a9) = 138543362;
      *(_QWORD *)((char *)&a9 + 4) = v10;
      _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_DEFAULT, "caught exception gathering purgeable storage amount: %{public}@", (uint8_t *)&a9, 0xCu);
    }

    objc_msgSend(v10, "userInfo");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKey:", CFSTR("ML3DatabaseExceptionErrorUserInfoKey"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13 && objc_msgSend(v13, "code") == 13)
    {
      _ML3LogCategoryCacheManagement();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(a9) = 0;
        _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_DEFAULT, "force-deleting cached assets to free space", (uint8_t *)&a9, 2u);
      }

      objc_msgSend(v9, "_clearAllCloudAssets");
      objc_end_catch();
      JUMPOUT(0x1AC15B828);
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1AC15BC64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC15BE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL ML3IsMemorySQLiteDatabasePath(void *a1)
{
  id v1;
  _BOOL8 v2;
  uint64_t v3;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR(":memory:")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    objc_msgSend(v1, "rangeOfString:", CFSTR("mode=memory"));
    v2 = v3 != 0;
  }

  return v2;
}

void sub_1AC15C034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1AC15C49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1AC15C6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC15C818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id *v5;

  _Unwind_Resume(a1);
}

void sub_1AC15C854()
{
  JUMPOUT(0x1AC15C848);
}

void sub_1AC15C8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC15CE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v21 - 192);
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v21 - 144);

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_1AC15D0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1AC15D110()
{
  JUMPOUT(0x1AC15D100);
}

void sub_1AC15D2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int>::unordered_set(uint64_t a1, uint64_t a2)
{
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  return a1;
}

void sub_1AC15D360(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void sub_1AC15D758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC15D87C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC15D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC15D9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1AC15DDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

_QWORD *iPhoneSortKeyBuilderCreateForCurrentDevice()
{
  __CFString *v0;
  void *v1;
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint8_t buf[16];

  ML3LocalizationLanguageCanonicalIdentifier();
  v0 = (__CFString *)objc_claimAutoreleasedReturnValue();
  ML3LocalizedSectionDictionary();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((_NSIsNSDictionary() & 1) == 0)
  {
    v2 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v2, OS_LOG_TYPE_ERROR, "Failed to load section dictionary - using simple sections", buf, 2u);
    }

    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "bundleIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v4, "isEqualToString:", CFSTR("com.apple.Music")))
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("We failed to load the sections headers dictionary for language %@"), v0);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      ML3ShowFileRadarAlert(CFSTR("Invalid Sections Found"), CFSTR("Failed to load sections headers dictionary."), v5);

    }
    v1 = &unk_1E5BAC5E0;
  }
  v6 = iPhoneSortKeyBuilderCreate(v0, (const __CFDictionary *)v1);

  return v6;
}

_QWORD *iPhoneSortKeyBuilderCreate(const __CFString *a1, const __CFDictionary *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  const __CFArray *Value;
  const __CFArray *v7;
  CFTypeID v8;
  CFIndex Count;
  const void *v10;
  CFTypeID v11;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  UInt8 *v14;
  uint64_t v15;
  UErrorCode v16;
  CFIndex v17;
  CFIndex v18;
  const __CFAllocator *v19;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v21;
  uint64_t v22;
  CFTypeID v23;
  const __CFString *v24;
  const __CFString *v25;
  CFTypeID v26;
  const __CFArray *v27;
  const __CFArray *v28;
  CFTypeID v29;
  const __CFString *v30;
  CFDataRef SortKeyForSections;
  CFDataRef v32;
  CFDataRef v33;
  CFDataRef v34;
  CFIndex v35;
  const void **v36;
  CFIndex v37;
  CFIndex i;
  const __CFString *v39;
  const __CFData *v40;
  const __CFData *v41;
  CFIndex v42;
  const __CFArray *v43;
  const void **v44;
  const void *v45;
  CFTypeRef v46;
  _QWORD *v47;
  const __CFAllocator *v48;
  const __CFLocale *v49;
  unsigned int v50;
  uint64_t j;
  int v53;
  FILE *v54;
  const char *v55;
  const __CFString *theString;
  const __CFArray *v57;
  _QWORD *v58;
  uint64_t v59;
  CFIndex v60;
  CFDataRef cf;
  CFIndex usedBufLen;
  int v63;
  CFRange v64;
  CFRange v65;

  if (!a1)
    __assert_rtn("iPhoneSortKeyBuilderCreate", "iPhoneSortKey.c", 105, "canonicalLanguageIdentifier != NULL");
  v4 = malloc_type_calloc(1uLL, 0x30uLL, 0x1060040E905D0B9uLL);
  if (!v4)
    __assert_rtn("iPhoneSortKeyBuilderCreate", "iPhoneSortKey.c", 108, "builder != NULL");
  v5 = v4;
  Value = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("SectionHeaders"));
  if (!Value || (v7 = Value, v8 = CFGetTypeID(Value), v8 != CFArrayGetTypeID()) || !CFArrayGetCount(v7))
    __assert_rtn("iPhoneSortKeyBuilderCreate", "iPhoneSortKey.c", 111, "!CFSafeGetArrayIsEmpty(sectionHeadersDictionaries)");
  Count = CFArrayGetCount(v7);
  v5[4] = Count;
  if (Count >= 75)
    __assert_rtn("iPhoneSortKeyBuilderCreate", "iPhoneSortKey.c", 114, "builder->languageCount <= MAXIMUM_LANGUAGE_COUNT");
  v10 = CFDictionaryGetValue(a2, CFSTR("NameTransform"));
  v5[5] = v10;
  if (v10)
  {
    v11 = CFGetTypeID(v10);
    if (v11 != CFStringGetTypeID())
      __assert_rtn("iPhoneSortKeyBuilderCreate", "iPhoneSortKey.c", 117, "builder->nameTransform == NULL || (CFGetTypeID(builder->nameTransform) == CFStringGetTypeID())");
  }
  v63 = 0;
  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
  v14 = (UInt8 *)malloc_type_malloc(MaximumSizeForEncoding + 1, 0xFFB73412uLL);
  usedBufLen = 0;
  v64.location = 0;
  v64.length = Length;
  CFStringGetBytes(a1, v64, 0x600u, 0, 0, v14, MaximumSizeForEncoding, &usedBufLen);
  v14[usedBufLen] = 0;
  v15 = ucol_open();
  free(v14);
  v16 = v63;
  v58 = v5;
  if (v63 > 0)
  {
    v53 = 703;
LABEL_54:
    v54 = (FILE *)*MEMORY[0x1E0C80C10];
    v55 = u_errorName(v16);
    fprintf(v54, "%s:%d: %s\n", "/Library/Caches/com.apple.xbs/Sources/MusicLibrary/MusicLibrary/Sorting/iPhoneSortKey/iPhoneSortKey.c", v53, v55);
    v5[1] = 0;
LABEL_55:
    __assert_rtn("iPhoneSortKeyBuilderCreate", "iPhoneSortKey.c", 120, "builder->collator != NULL");
  }
  ucol_setAttribute();
  if (v63 >= 1)
  {
    ucol_close();
    v53 = 712;
    v16 = v63;
    goto LABEL_54;
  }
  theString = a1;
  v5[1] = v15;
  if (!v15)
    goto LABEL_55;
  v5[3] = malloc_type_calloc(v5[4], 0x30uLL, 0x106004084DD7D94uLL);
  if ((uint64_t)v5[4] >= 1)
  {
    v17 = 0;
    v18 = 0;
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v57 = v7;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, v17);
      if (!ValueAtIndex
        || (v21 = ValueAtIndex, v22 = v5[3], v23 = CFGetTypeID(ValueAtIndex), v23 != CFDictionaryGetTypeID()))
      {
        __assert_rtn("BuildLanguage", "iPhoneSortKey.c", 638, "!CFSafeTypeMismatch(languageDictionary, CFDictionaryGetTypeID)");
      }
      v24 = (const __CFString *)CFDictionaryGetValue(v21, CFSTR("FirstCharacterAfterLanguage"));
      if (!v24 || (v25 = v24, v26 = CFGetTypeID(v24), v26 != CFStringGetTypeID()))
        __assert_rtn("BuildLanguage", "iPhoneSortKey.c", 641, "!CFSafeTypeMismatch(firstCharacterAfterLanguage, CFStringGetTypeID)");
      v27 = (const __CFArray *)CFDictionaryGetValue(v21, CFSTR("Headers"));
      if (!v27 || (v28 = v27, v29 = CFGetTypeID(v27), v29 != CFArrayGetTypeID()) || !CFArrayGetCount(v28))
        __assert_rtn("BuildLanguage", "iPhoneSortKey.c", 644, "!CFSafeGetArrayIsEmpty(headers)");
      v30 = (const __CFString *)CFArrayGetValueAtIndex(v28, 0);
      SortKeyForSections = CFStringCreateSortKeyForSections(v19, v30);
      if (!SortKeyForSections)
        __assert_rtn("BuildLanguage", "iPhoneSortKey.c", 647, "firstCharacterSortKey != NULL");
      v32 = SortKeyForSections;
      v33 = CFStringCreateSortKeyForSections(v19, v25);
      if (!v33)
        __assert_rtn("BuildLanguage", "iPhoneSortKey.c", 650, "endCharacterSortKey != NULL");
      v34 = v33;
      v60 = v18;
      cf = v32;
      v59 = v22;
      v35 = CFArrayGetCount(v28);
      v36 = (const void **)malloc_type_calloc(v35, 8uLL, 0x6004044C4A2DFuLL);
      if (v35 < 1)
      {
        v43 = CFArrayCreate(v19, v36, v35, MEMORY[0x1E0C9B378]);
        v37 = 0;
      }
      else
      {
        v37 = 0;
        for (i = 0; i != v35; ++i)
        {
          v39 = (const __CFString *)CFArrayGetValueAtIndex(v28, i);
          v40 = CFStringCreateSortKeyForSections(v19, v39);
          if (!v40)
          {
            if (i)
            {
              for (j = 0; j != i; ++j)
                CFRelease(v36[j]);
            }
            free(v36);
            CFRelease(v34);
            CFRelease(cf);
            __assert_rtn("iPhoneSortKeyBuilderCreate", "iPhoneSortKey.c", 130, "result != 0");
          }
          v41 = v40;
          v42 = CFDataGetLength(v40);
          if (v42 > v37)
            v37 = v42;
          v36[i] = v41;
        }
        v43 = CFArrayCreate(v19, v36, v35, MEMORY[0x1E0C9B378]);
        v44 = v36;
        do
        {
          v45 = *v44++;
          CFRelease(v45);
          --v35;
        }
        while (v35);
      }
      free(v36);
      v46 = CFRetain(v28);
      *(_QWORD *)(v59 + 48 * v17) = cf;
      v47 = (_QWORD *)(v59 + 48 * v17);
      v47[1] = v34;
      v47[2] = v46;
      v47[3] = v43;
      v47[4] = v37;
      v47[5] = v60;
      v18 = CFArrayGetCount(v43) + v60;
      ++v17;
      v7 = v57;
      v5 = v58;
    }
    while (v17 < v58[4]);
  }
  if (CFStringHasPrefix(theString, CFSTR("ja")))
  {
    v48 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v49 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString);
    v65.location = 0;
    v65.length = 0;
    v5[2] = CFStringTokenizerCreate(v48, 0, v65, 4uLL, v49);
    CFRelease(v49);
  }
  do
    v50 = __ldxr((unsigned int *)v5);
  while (__stxr(v50 + 1, (unsigned int *)v5));
  return v5;
}

CFDataRef CFStringCreateSortKeyForSections(const __CFAllocator *a1, CFStringRef theString)
{
  CFIndex Length;
  UniChar *v5;
  int SortKey;
  const UInt8 *v7;
  int Bound;
  CFRange v10;

  Length = CFStringGetLength(theString);
  v5 = (UniChar *)CFAllocatorAllocate(a1, 2 * Length, 0);
  v10.location = 0;
  v10.length = Length;
  CFStringGetCharacters(theString, v10, v5);
  SortKey = ucol_getSortKey();
  v7 = (const UInt8 *)CFAllocatorAllocate(a1, SortKey, 0);
  ucol_getSortKey();
  CFAllocatorDeallocate(a1, v5);
  Bound = ucol_getBound();
  return CFDataCreateWithBytesNoCopy(a1, v7, Bound, a1);
}

id ML3LocalizationLanguageCanonicalIdentifier()
{
  void *v0;
  void *v1;
  void *v2;

  +[ML3LanguageResourceManager sharedResourceManager](ML3LanguageResourceManager, "sharedResourceManager");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "resources");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "canonicalLanguageIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id ML3LocalizedSectionDictionary()
{
  void *v0;
  void *v1;
  void *v2;

  +[ML3LanguageResourceManager sharedResourceManager](ML3LanguageResourceManager, "sharedResourceManager");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "resources");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "sectionsInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id MLMobileUserHomeDirectory()
{
  void *Value;
  char *pw_dir;
  CFStringRef v2;
  CFIndex Length;
  uint64_t MaximumSizeForEncoding;
  CFAllocatorRef *v5;
  UInt8 *v6;
  CFIndex Bytes;
  passwd *v8;
  NSObject *v9;
  CFIndex usedBufLen;
  UInt8 buffer[4];
  const __CFString *v13;
  uint64_t v14;
  CFRange v15;

  v14 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&MLMobileUserHomeDirectory_lock);
  if (MLMobileUserHomeDirectory_pathDictionary)
  {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)MLMobileUserHomeDirectory_pathDictionary, CFSTR("mobile"));
    if (Value)
      goto LABEL_20;
  }
  else
  {
    MLMobileUserHomeDirectory_pathDictionary = (uint64_t)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  pw_dir = getenv("IPHONE_SHARED_RESOURCES_DIRECTORY");
  if (!pw_dir)
  {
    Length = CFStringGetLength(CFSTR("mobile"));
    MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    usedBufLen = 0;
    v5 = (CFAllocatorRef *)MEMORY[0x1E0C9AE30];
    if (MaximumSizeForEncoding >= 127)
      v6 = (UInt8 *)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE30], MaximumSizeForEncoding + 1, 0);
    else
      v6 = buffer;
    v15.location = 0;
    v15.length = Length;
    Bytes = CFStringGetBytes(CFSTR("mobile"), v15, 0x8000100u, 0, 1u, v6, MaximumSizeForEncoding, &usedBufLen);
    v8 = 0;
    if (Bytes == Length)
    {
      v6[usedBufLen] = 0;
      v8 = getpwnam((const char *)v6);
    }
    if (buffer != v6)
      CFAllocatorDeallocate(*v5, v6);
    if (!v8)
      goto LABEL_17;
    pw_dir = v8->pw_dir;
    if (!pw_dir)
      goto LABEL_17;
  }
  v2 = CFStringCreateWithFileSystemRepresentation(0, pw_dir);
  if (v2)
  {
    Value = (void *)v2;
    CFDictionarySetValue((CFMutableDictionaryRef)MLMobileUserHomeDirectory_pathDictionary, CFSTR("mobile"), v2);
    CFRelease(Value);
  }
  else
  {
LABEL_17:
    v9 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buffer = 138543362;
      v13 = CFSTR("mobile");
      _os_log_impl(&dword_1AC149000, v9, OS_LOG_TYPE_DEFAULT, "Returning NULL path from MLMobileUserHomeDirectory for %{public}@", buffer, 0xCu);
    }

    Value = 0;
  }
LABEL_20:
  pthread_mutex_unlock(&MLMobileUserHomeDirectory_lock);
  return Value;
}

void _MLDispatchToSerialQueue(int a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (_MLDispatchToSerialQueue___once == -1)
  {
    v4 = v3;
  }
  else
  {
    dispatch_once(&_MLDispatchToSerialQueue___once, &__block_literal_global_57);
    v4 = v5;
  }
  if (a1)
    dispatch_async((dispatch_queue_t)__ML3LogSerialQueue, v4);
  else
    dispatch_sync((dispatch_queue_t)__ML3LogSerialQueue, v4);

}

uint64_t CreateSQLExtensionsOnSqliteConnection(sqlite3 *a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 33) = 0u;
  *(_QWORD *)v2 = a1;
  if (!sqlite3_create_function(a1, "FindRowForRunningSum_UInt64", 2, 2049, (void *)v2, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ML3SQLiteExtensions::Step_FindRowForRunningSum_UInt64, (void (__cdecl *)(sqlite3_context *))ML3SQLiteExtensions::Final_FindRowForRunningSum_UInt64)&& !sqlite3_create_function(*(sqlite3 **)v2, "CFTimeRelativeToStartOfToday", 1, 2049, (void *)v2, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ML3SQLiteExtensions::CFTimeRelativeToStartOfToday, 0, 0))
  {
    sqlite3_create_function(*(sqlite3 **)v2, "CFTimeRelativeToEndOfToday", 1, 2049, (void *)v2, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))ML3SQLiteExtensions::CFTimeRelativeToEndOfToday, 0, 0);
  }
  return v2;
}

void sub_1AC162248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC162888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AC162B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1AC162E28(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 80));
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void ___ZL26_executeTimeQueryOperationP8NSStringP17ML3QueryResultSetU13block_pointerFvvE_block_invoke()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  _executeTimeQueryOperation(NSString *,ML3QueryResultSet *,void({block_pointer})(void))::timeQueryOps = objc_msgSend(v0, "BOOLForKey:", CFSTR("MLTimeQueryOperations"));

}

void sub_1AC163298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AC1636FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  _Block_object_dispose(&a56, 8);
  _Unwind_Resume(a1);
}

double _ML3ArtworkConfigurationCGSizeFromString(void *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  double v11;
  int v12;
  NSObject *v13;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  MEMORY[0x1E0C80A78]();
  v4 = &buf[-v3];
  MEMORY[0x1E0C80A78]();
  v6 = (const char *)&buf[-v5];
  objc_msgSend(v1, "getCharacters:range:", v4, 0, v2);
  if (v2)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0.0;
    do
    {
      while (1)
      {
        if (v10 == 3)
          goto LABEL_19;
        v12 = *(unsigned __int16 *)&v4[2 * v7];
        if (v10 != 2)
          break;
        if (v12 != 125)
        {
          v6[v9++] = v12;
LABEL_13:
          v10 = 2;
          goto LABEL_15;
        }
        v6[v9] = 0;
        atof(v6);
        v10 = 3;
        v7 = ++v8;
        if (v2 <= v8)
          goto LABEL_19;
      }
      if (v10 == 1)
      {
        if (v12 != 44)
        {
          v6[v9++] = v12;
          v10 = 1;
          goto LABEL_15;
        }
        v6[v9] = 0;
        v11 = atof(v6);
        v9 = 0;
        goto LABEL_13;
      }
      v10 = v12 == 123;
LABEL_15:
      v7 = ++v8;
    }
    while (v2 > v8);
  }
  v13 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "_ML3ArtworkConfigurationCGSizeFromString";
    v17 = 2114;
    v18 = v1;
    _os_log_impl(&dword_1AC149000, v13, OS_LOG_TYPE_ERROR, "%s parse error: error parsing '%{public}@'", buf, 0x16u);
  }

  v11 = *MEMORY[0x1E0C9D820];
LABEL_19:

  return v11;
}

void sub_1AC163D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1AC165300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1AC1656BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1AC165AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1AC166EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a15, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1AC1672AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC16741C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1AC1675B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1AC167DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1AC168384(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  id v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;

  if (a2 == 1)
  {
    v11 = objc_begin_catch(a1);
    v12 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v11, "description");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringWithFormat:", CFSTR("*** Database Exception: %@"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    _ML3LogCategoryWriter();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v13;
      _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
    }

    +[ML3MediaLibraryWriter writerErrorWithCode:description:](ML3MediaLibraryWriter, "writerErrorWithCode:description:", 301, v13);
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x1AC16826CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1AC168CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose((const void *)(v15 - 160), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC16A1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC16A8B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC16A96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC16B91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _databaseAuthorizer(_DWORD *a1, int a2, char *__s2, uint64_t a4)
{
  uint64_t result;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  int v13;
  _BYTE v14[18];
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = 0;
  switch(a2)
  {
    case 1:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_CREATE_INDEX: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 2:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_CREATE_TABLE: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 3:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_CREATE_TEMP_INDEX: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 4:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_CREATE_TEMP_TABLE: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 5:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_CREATE_TEMP_TRIGGER: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 6:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_CREATE_TEMP_VIEW: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 7:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_CREATE_TRIGGER: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 8:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_CREATE_VIEW: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 9:
      if (strncmp("sqlite_", __s2, 7uLL))
        return 0;
      _ML3LogCategoryService();
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_DELETE: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 10:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_DROP_INDEX: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 11:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_DROP_TABLE: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 12:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_DROP_TEMP_INDEX: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 13:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_DROP_TEMP_TABLE: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 14:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_DROP_TEMP_TRIGGER: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 15:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_DROP_TEMP_VIEW: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 16:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_DROP_TRIGGER: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 17:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_DROP_VIEW: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 18:
      if (strncmp("sqlite_", __s2, 7uLL))
        return 0;
      _ML3LogCategoryService();
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_INSERT: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 19:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_PRAGMA: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 20:
      if (strncmp("sqlite_", __s2, 7uLL))
        return 0;
      _ML3LogCategoryService();
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_READ: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 21:
    case 22:
    case 31:
    case 32:
    case 33:
      return result;
    case 23:
      if (strncmp("sqlite_", __s2, 7uLL))
        return 0;
      _ML3LogCategoryService();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v13 = 136446722;
        *(_QWORD *)v14 = "denied";
        *(_WORD *)&v14[8] = 2082;
        *(_QWORD *)&v14[10] = __s2;
        v15 = 2082;
        v16 = a4;
        v10 = "SQLITE_UPDATE: %{public}s, param1=%{public}s, param2=%{public}s";
LABEL_65:
        v11 = v9;
        v12 = 32;
LABEL_66:
        _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v13, v12);
      }
LABEL_67:

      *a1 = a2;
      return 1;
    case 24:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_ATTACH: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 25:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_DETACH: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 26:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_ALTER_TABLE: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 27:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_REINDEX: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 28:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_ANALYZE: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 29:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_CREATE_VTABLE: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    case 30:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 136446722;
      *(_QWORD *)v14 = "denied";
      *(_WORD *)&v14[8] = 2082;
      *(_QWORD *)&v14[10] = __s2;
      v15 = 2082;
      v16 = a4;
      v10 = "SQLITE_DROP_VTABLE: %{public}s, param1=%{public}s, param2=%{public}s";
      goto LABEL_65;
    default:
      v9 = os_log_create("com.apple.amp.medialibrary", "Service");
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_67;
      v13 = 67109378;
      *(_DWORD *)v14 = a2;
      *(_WORD *)&v14[4] = 2082;
      *(_QWORD *)&v14[6] = "denied";
      v10 = "Unknown action %d: %{public}s";
      v11 = v9;
      v12 = 18;
      goto LABEL_66;
  }
}

CFDataRef iPhoneSortKeyBuilderCopyGroupingKeyForString(uint64_t a1, CFStringRef theString)
{
  CFIndex v4;
  UniChar *v5;
  const UInt8 *v6;
  CFIndex length;
  CFRange v9;

  v4 = CFStringGetLength(theString);
  v5 = (UniChar *)malloc_type_malloc(2 * v4, 0x1000040BDFB0063uLL);
  v9.location = 0;
  v9.length = v4;
  CFStringGetCharacters(theString, v9, v5);
  length = 0;
  v6 = (const UInt8 *)CreateGroupingKeyFromCharacters(*(_QWORD *)(a1 + 8), v5, v4, &length);
  free(v5);
  if (v6)
    return CFDataCreateWithBytesNoCopy(0, v6, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
  else
    return 0;
}

void *CreateGroupingKeyFromCharacters(uint64_t a1, const UChar *a2, uint64_t a3, int64_t *a4)
{
  int32_t v5;
  void *v7;
  int SortKeyPart;
  _BYTE *v9;
  int64_t v10;
  UCharIterator iter;
  uint64_t v13;
  uint64_t v14;

  v5 = a3;
  v14 = *MEMORY[0x1E0C80C00];
  v7 = malloc_type_malloc(6 * a3 + 5, 0x1B6F2B0FuLL);
  v13 = 0;
  memset(&iter, 0, sizeof(iter));
  uiter_setString(&iter, a2, v5);
  SortKeyPart = ucol_nextSortKeyPart();
  v9 = memchr(v7, 1, SortKeyPart);
  v10 = v9 - (_BYTE *)v7;
  if (!v9)
    v10 = 0;
  *a4 = v10;
  return v7;
}

void sub_1AC16C918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC16CA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1AC16CD4C(mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, _QWORD *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v17;
  mach_port_t reply_port;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  mach_msg_header_t msg;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v30 = 1;
  v31 = a4;
  v32 = 16777472;
  v33 = a5;
  v34 = *MEMORY[0x1E0C804E8];
  v17 = *a3;
  v35 = a2;
  v36 = v17;
  v37 = a5;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B000000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v19)
    {
      if (msg.msgh_id == 71)
      {
        v20 = 4294966988;
      }
      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v20 = 4294966996;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            v21 = v33;
            if (v33 == v47)
            {
              v20 = 0;
              v22 = v34;
              *a3 = v38;
              v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v20 = 4294966996;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port)
              v20 = 4294966996;
            else
              v20 = HIDWORD(v31);
          }
        }
        else
        {
          v20 = 4294966996;
        }
      }
      else
      {
        v20 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v20;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v20;
}

uint64_t sub_1AC16CFA4(mach_port_t a1, unsigned int a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  mach_port_t reply_port;
  uint64_t v9;
  uint64_t v10;
  mach_msg_header_t msg;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3[5];
  v19 = a3[4];
  v20 = v4;
  v5 = a3[7];
  v21 = a3[6];
  v22 = v5;
  v6 = a3[1];
  v15 = *a3;
  v16 = v6;
  v7 = a3[3];
  v17 = a3[2];
  v13 = *MEMORY[0x1E0C804E8];
  v14 = a2;
  v18 = v7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B100000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }
  if ((_DWORD)v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (msg.msgh_id == 71)
  {
    v10 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }
  if (msg.msgh_id != 1301)
  {
    v10 = 4294966995;
    goto LABEL_17;
  }
  v10 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0)
    goto LABEL_17;
  if (msg.msgh_size != 36)
    goto LABEL_17;
  if (msg.msgh_remote_port)
    goto LABEL_17;
  v10 = v14;
  if (v14)
    goto LABEL_17;
  return v10;
}

uint64_t sub_1AC16D130(mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, _QWORD *a9, _DWORD *a10)
{
  mach_port_t reply_port;
  uint64_t v13;
  uint64_t v14;
  int v15;
  mach_msg_header_t msg;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _BYTE v23[28];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v18 = 1;
  v19 = a6;
  v20 = 16777472;
  v21 = a7;
  v22 = *MEMORY[0x1E0C804E8];
  *(_DWORD *)v23 = a2;
  *(_DWORD *)&v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  v24 = a7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B200000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v13)
    {
      if (msg.msgh_id == 71)
      {
        v14 = 4294966988;
      }
      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v14 = 4294966996;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              v14 = 0;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port)
              v14 = 4294966996;
            else
              v14 = HIDWORD(v19);
          }
        }
        else
        {
          v14 = 4294966996;
        }
      }
      else
      {
        v14 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v14;
}

uint64_t sub_1AC16D31C(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v15;
  int v16;
  mach_msg_header_t msg;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B300000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }
    if (msg.msgh_id == 71)
    {
      v12 = 4294966988;
    }
    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            v12 = v18;
            if (!v18)
            {
              v15 = v20;
              *a2 = v19;
              *a3 = v15;
              v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }
            goto LABEL_23;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port)
            v13 = 1;
          else
            v13 = v18 == 0;
          if (v13)
            v12 = 4294966996;
          else
            v12 = v18;
          goto LABEL_23;
        }
      }
      v12 = 4294966996;
    }
    else
    {
      v12 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(&msg);
    return v12;
  }
  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

uint64_t sub_1AC16D494(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  _BOOL4 v5;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x48247A308694277ALL) + 1720232012;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x48247A308694277ALL) + 1720232012;
  v4 = (v2 < 1041443894) ^ (v3 < 1041443894);
  v5 = v2 > v3;
  if (v4)
    v5 = v2 < 1041443894;
  v1 = *(_DWORD *)a1 ^ (1374699841 * ((((2 * a1) | 0x4FD35BAC) - a1 + 1477857834) ^ 0xCA1DB5DF));
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B56B60 + v1 - 70) + ((1053 * !v5) ^ v1)) - 4))();
}

uint64_t sub_1AC16D560()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;

  v4 = (v1 ^ 0x8C014780) + v3;
  v5 = v2 - 1946073280;
  v6 = v5 < 1670105898;
  v7 = v4 < v5;
  if (v6 != v4 < 1670105898)
    v7 = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((7 * !v7) ^ v1)) - 4))();
}

uint64_t sub_1AC16D5D0()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;

  v3 = (2 * v1) ^ 0x736;
  v4 = -1357576236 - v2;
  if (v2 + 678787926 + v3 < 0)
    v4 = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((806 * (v4 - 1468695531 >= 0)) | v3)) - 4))();
}

uint64_t sub_1AC16D658()
{
  uint64_t v0;
  int v1;
  int v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((910
                                          * ((*(_DWORD *)(*v3 + 4 * v5) ^ (v1 + 1019)) <= (*(_DWORD *)(*v4 + 4 * v5) ^ (((v2 + 169956159) & 0xF5DEAFFB) + v1)))) ^ v2))
                            - 4))();
}

uint64_t sub_1AC16D6B8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((a2 + 810) * (v4 < a3)) ^ a2))
                            - ((a2 - 827) ^ 0xCCLL)))();
}

uint64_t sub_1AC16D6E4()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((806 * (v2 - 1468695531 >= 0)) | v1)) - 4))();
}

uint64_t sub_1AC16D718(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 4) = 715447152 - v1;
  return result;
}

void sub_1AC16D72C(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 + 628203409 * ((-2 - ((~(_DWORD)a1 | 0x96C77CC6) + (a1 | 0x69388339))) ^ 0x144F70F5);
  __asm { BR              X9 }
}

uint64_t sub_1AC16D814@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (a1 ^ (22 * (v1 != 0))))
                            - ((((a1 + 1762786865) & 0x96EE01EE) + 157) ^ 0x24BLL)))();
}

uint64_t sub_1AC16D868()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _BOOL4 v7;

  v5 = *(_DWORD *)(v2 + 16) - v0 - 1890328183;
  v7 = (*(_BYTE *)(v3 - 0x685C86573AC75C4BLL) & 1) == 0 && v5 < 0xFFFFFFBF;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((127 * v7) ^ v1)) - ((v1 + 2073161076) & 0x846E13F7) + 786))();
}

uint64_t sub_1AC16D8EC@<X0>(uint64_t (*a1)(uint64_t *)@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  v11 = v8 + 364;
  v12 = 1178560073 * ((&a3 & 0x4D8B99B8 | ~(&a3 | 0x4D8B99B8)) ^ 0x80626607);
  a3 = v9;
  a4 = v7;
  a5 = v12 ^ 0x17EF6F7F;
  a6 = v12 + v8 + 364 - 253;
  a7 = -1613813926 - v12;
  v13 = a1(&a3);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10
                                                      + 8
                                                      * (((*(_DWORD *)(v9 - 0x685C86573AC75C47) == 1797235913)
                                                        * ((v11 ^ 0x151) + 858)) ^ v11))
                                          - 8))(v13);
}

void sub_1AC16D9A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  int v5;
  unint64_t v6;
  _BYTE *v7;

  v5 = v3 - ((2 * v3 + 514311060) & 0x316E9FBE) + 671822249;
  *v7 = (HIBYTE(v5) ^ 0x98) - 2 * ((v4 + 4) & (HIBYTE(v5) ^ 0x98) ^ HIBYTE(v5) & 1) + 74;
  v7[1] = (BYTE2(v5) ^ 0xB7) - ((2 * (BYTE2(v5) ^ 0xB7)) & 0x94) + 74;
  v7[2] = (BYTE1(v5) ^ 0x4F) - ((2 * (BYTE1(v5) ^ 0x4F)) & 0x94) + 74;
  v7[3] = (v3 - ((2 * v3 - 108) & 0xBE) - 87) ^ 0x95;
  v6 = v2 - ((2 * v2) & 0xBDF5409C8C624178) + 0x5EFAA04E463120BCLL;
  v7[4] = (HIBYTE(v6) ^ 0x5E) - ((2 * (HIBYTE(v6) ^ 0x5E)) & 0x94) + 74;
  v7[5] = (BYTE6(v6) ^ 0xFA) - 2 * ((BYTE6(v6) ^ 0xFA) & 0xCF ^ BYTE6(v6) & 5) + 74;
  v7[6] = (BYTE5(v6) ^ 0xA0) - ((2 * BYTE5(v6)) & 0x94) + 74;
  v7[7] = (BYTE4(v6) ^ 0x4E) - 2 * ((BYTE4(v6) ^ 0x4E) & 0x4B ^ BYTE4(v6) & 1) + 74;
  v7[8] = (((v2 - ((2 * (_DWORD)v2) & 0x8C624178) + 1177624764) >> 24) ^ 0x46)
        - 2
        * ((((v2 - ((2 * (_DWORD)v2) & 0x8C624178) + 1177624764) >> 24) ^ 0x46) & 0x4B ^ ((v2 - ((2 * (_DWORD)v2) & 0x8C624178) + 1177624764) >> 24) & 1)
        + 74;
  v7[9] = (BYTE2(v6) ^ 0x31) - ((2 * BYTE2(v6)) & 0x94) + 74;
  v7[10] = (BYTE1(v6) ^ 0x20) - ((2 * BYTE1(v6)) & 0x94) + 74;
  v7[11] = (v2 - ((2 * v2) & 0x78) - 68) ^ 0xF6;
  *(_DWORD *)(v0 + 4) = *(_DWORD *)(v1 - 0x685C86573AC75C47);
}

uint64_t sub_1AC16E07C(uint64_t a1)
{
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B56B60
                                          + (int)((*(_DWORD *)a1 - 1225351577 * (a1 ^ 0x239AD816)) ^ 0x47B))
                              + (int)((864 * (*(_QWORD *)(a1 + 8) != 0x685C86573AC75C5FLL)) | (*(_DWORD *)a1
                                                                                             - 1225351577
                                                                                             * (a1 ^ 0x239AD816))))
                            - 8))();
}

uint64_t sub_1AC16E0EC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((32 * (*(_DWORD *)(v2 - 0x685C86573AC75C47) == 1797235913)) | ((*(_DWORD *)(v2 - 0x685C86573AC75C47) == 1797235913) << 9)) ^ v0))
                            - 8))();
}

uint64_t sub_1AC16E12C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  int v6;

  v3 = *(_DWORD *)(v2 - 0x685C86573AC75C4FLL) - 1383720663;
  v4 = *(_DWORD *)(v2 - 0x685C86573AC75C53) - 234738305;
  v5 = v4 < 0xF9CE9235;
  v6 = v3 < v4;
  if (v3 < 0xF9CE9235 != v5)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ (v6 << 6))) - 8))();
}

uint64_t sub_1AC16E1B0@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  _DWORD *v2;

  *v2 = a2;
  *(_DWORD *)(result + 4) = -1797193732;
  return result;
}

void sub_1AC16E1C4(uint64_t a1)
{
  int v1;
  int v2;
  _BOOL4 v3;

  v1 = 535753261 * (((a1 | 0x8E29127E) - a1 + (a1 & 0x71D6ED81)) ^ 0x84DD1C51);
  v2 = *(_DWORD *)(a1 + 12) - v1;
  v3 = (*(_DWORD *)(a1 + 8) - v1 - 443342277) > 0x7FFFFFFE;
  __asm { BR              X14 }
}

uint64_t sub_1AC16E294@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _DWORD v7[2];
  uint64_t v8;

  v5 = (((v7 | 0xEF29C4DE) - (v7 & 0xEF29C4DE)) ^ 0xE5DDCAF1) * v2;
  v8 = v3;
  v7[0] = v4 - v5 - 286;
  v7[1] = v5 - v1 - ((886684552 - 2 * v1) & 0xEE724FB8) + 296092665 + 3 * (v4 ^ 0x4D2);
  return ((uint64_t (*)(_DWORD *))(*(_QWORD *)(a1 + 8 * (v4 ^ 0x4DB)) - 12))(v7);
}

uint64_t sub_1AC16E3FC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (1734042137 * (((a1 | 0xD7F017E0) - (a1 & 0xD7F017E0)) ^ 0x8B3ED4AD));
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B56B60 + (v1 ^ 0x1C3))
                              + ((632 * (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))) ^ v1))
                            - 4))();
}

uint64_t sub_1AC16E470@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v4 = *(_DWORD *)(v2 - 0x48247A308694277ALL);
  v5 = v4 - 1468695530;
  if (v4 - 1468695530 < 0)
    v5 = 1468695530 - v4;
  *(_DWORD *)(v1 - 0x48247A308694277ALL) = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((120
                                          * ((v5 ^ 0xFF9AB7FB)
                                           + 528350990
                                           + ((v5 << (104 * (v3 ^ 0xBB) + 49)) & 0xFF356FF6) != 521713417)) ^ v3))
                            - 4))();
}

uint64_t sub_1AC16E50C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  *(_DWORD *)(*(_QWORD *)(v3 - 0x48247A3086942776) + 4 * (v5 - 521713418)) = *(_DWORD *)(*(_QWORD *)(v4 - 0x48247A3086942776)
                                                                                           + 4 * (v5 - 521713418));
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((295 * (v5 + ((v2 - 936) | 0x91) - 442 == v1)) | v2)) - 8))();
}

void sub_1AC16E578()
{
  JUMPOUT(0x1AC16E53CLL);
}

uint64_t sub_1AC16E584(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x48247A308694277ALL);
  v4 = v2 - 1468695530;
  v3 = v2 - 1468695530 < 0;
  v5 = 1468695530 - v2;
  if (!v3)
    v5 = v4;
  v1 = (*(_DWORD *)(a1 + 4) - 460628867 * ((a1 & 0x873FB66C | ~(a1 | 0x873FB66C)) ^ 0x3456CBEE)) ^ 0x5D6;
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B56B60 + v1 - 973)
                              + ((43
                                * ((v5 ^ 0xDF675FF7) + 2008873532 + ((v5 << (v1 - 70)) & 0xBECEBFEE) - 1462000180 >= (((v1 - 839) | 0x91) ^ 0x7FFFFE6Eu))) ^ v1))
                            - 8))();
}

uint64_t sub_1AC16E6A0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  int v5;
  uint64_t v6;
  _QWORD *v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (a4 | (2 * (*(_DWORD *)(*v7 + 4 * a5) != v5)))) - 8))();
}

void sub_1AC16E6C4()
{
  JUMPOUT(0x1AC16E66CLL);
}

_DWORD *sub_1AC16E6D8(_DWORD *result)
{
  *result = 1779867409;
  return result;
}

uint64_t sub_1AC16E6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;
  int v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((1370 * ((((((v7 - 91993083) & 0x57BB5FE) - 1131) << 31) & (a5 ^ v5)) != 0)) ^ v7))
                            - 12))();
}

uint64_t sub_1AC16E738()
{
  int v0;
  uint64_t v1;
  int v2;
  char v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((((v4 << (v3 + 31)) & v0) != 0) * v5) ^ v2)) - 12))();
}

_DWORD *sub_1AC16E760@<X0>(_DWORD *result@<X0>, int a2@<W8>)
{
  char v2;
  int v3;

  *result = (a2 << (((v2 - 115) & 0x97) + 116)) + v3 - 2054465358;
  return result;
}

void sub_1AC16E798(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  _DWORD v5[4];
  unint64_t *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  **(_DWORD **)(a1 + 96) = *(_DWORD *)(a2 + 16);
  v3 = 628203409 * ((v5 - 918820755 - 2 * (v5 & 0xC93BE86D)) ^ 0x4BB3E45E);
  v5[2] = v3 + 1252841699;
  v5[0] = v3 - 1882357464;
  v6 = &STACK[0x5800F43E2BD23BC8];
  sub_1AC196A60((uint64_t)v5);
  __asm { BR              X9 }
}

uint64_t sub_1AC16E948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;

  v11 = v8 - 1844442588;
  if (v11 <= 0x40)
    v11 = 64;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((910 * (a7 - v7 - v9 + v11 > 0xE)) ^ 0x4A1u)) - 4))();
}

uint64_t sub_1AC16E9B4(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;

  v12 = v8 + v7;
  v13 = v12 + v9;
  if ((v12 + v9) <= 0x40)
    v13 = a2;
  v14 = a7 - v12 < a1 + v10 + ((a7 + 134) ^ 0x3BEu) + v13;
  return (*(uint64_t (**)(void))(v11 + 8 * (((v14 ^ 0xA1) & 1 | (16 * ((v14 ^ 0xA1) & 1))) ^ 0x323u)))();
}

uint64_t sub_1AC16EA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25)
{
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;

  v29 = (unint64_t)(&a25 + a13 + (v26 + v25 - 1)) < 0x10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v28
                                        + 8
                                        * (((v29 ^ (v27 + 24)) & 1 | (8
                                                                                     * ((v29 ^ (v27 + 24)) & 1))) ^ v27))
                            - ((v27 - 1159697571) & 0x451F91CB ^ 0x1CELL)))();
}

uint64_t sub_1AC16EA78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t v8;

  v7.i64[0] = 0x9494949494949494;
  v7.i64[1] = 0x9494949494949494;
  v8.i64[0] = 0x4A4A4A4A4A4A4A4ALL;
  v8.i64[1] = 0x4A4A4A4A4A4A4A4ALL;
  *(int8x16_t *)(v4 + (((v2 + 727) ^ 0xFFFFFB5ELL) & (a1 + v1))) = vaddq_s8(vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v7)), v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((1316 * (((v3 + 1) & 0x1FFFFFFF0) == 16)) ^ v2)) - 4))();
}

void sub_1AC16EAE4()
{
  JUMPOUT(0x1AC16EAA4);
}

uint64_t sub_1AC16EAF0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (a3 ^ (917 * (v3 == v4))))
                            - (a3 - 1175)
                            - (((a3 - 385) | 0x9Eu) ^ 0xFFFFFFFFFFFFFC44)))();
}

uint64_t sub_1AC16EB3C@<X0>(int a1@<W5>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  *(&a19 + (a2 + v19)) = *(_BYTE *)(v20 + v23 - 389552312)
                                     - (((v21 ^ 0xB4) - 118) & (2 * *(_BYTE *)(v20 + v23 - 389552312)))
                                     + 74;
  return (*(uint64_t (**)(void))(v22 + 8 * ((115 * ((a1 + a2 + 1) > 0x3F)) ^ v21)))();
}

uint64_t sub_1AC16EBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,int a35,int a36,int a37,int a38,int a39,int a40,unsigned __int8 a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int32x4_t a48,int32x4_t a49,int32x4_t a50,int32x4_t a51)
{
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, __n128, __n128, __n128, __n128, __n128);
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  int v65;
  int v66;
  uint8x16_t v67;
  uint16x8_t v68;
  int8x16_t v69;
  int8x16_t v70;
  uint16x8_t v71;
  int8x16_t v72;
  int8x16_t v73;
  uint8x16_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint8x16_t v77;
  int8x16_t v80;
  int8x16_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  unsigned int v90;
  int v91;
  char *v92;
  unsigned int v93;
  uint8x16_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint8x16_t v98;
  uint8x16_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  _DWORD *v110;
  int v111;
  int v112;
  unint64_t v113;
  unsigned int v114;
  uint64_t v115;
  int8x16x4_t v116;
  int8x16x4_t v117;

  v59 = (uint64_t (*)(uint64_t, __n128, __n128, __n128, __n128, __n128))(*(_QWORD *)(v52 + 8 * v51) - 4);
  v60 = (__n128)vdupq_n_s32(0x6B1FA4DBu);
  v61 = (__n128)vdupq_n_s32(0x6B1FA4C9u);
  v62.n128_u64[0] = 0x4A4A4A4A4A4A4A4ALL;
  v62.n128_u64[1] = 0x4A4A4A4A4A4A4A4ALL;
  v114 = (v57 + 628186668) & 0x85E8DBFA;
  v115 = v58 - 16;
  v63 = (__n128)vdupq_n_s32(0x6B1FA4D9u);
  v64.n128_u64[0] = 0x9494949494949494;
  v64.n128_u64[1] = 0x9494949494949494;
  v65 = a41 ^ 0x56;
  if (v65 == 2)
  {
    v117 = vld4q_s8(&a25);
    v95 = (uint8x16_t)veorq_s8(v117.val[0], (int8x16_t)v62);
    v96 = vmovl_u8(*(uint8x8_t *)v95.i8);
    v97 = vmovl_high_u8(v95);
    v98 = (uint8x16_t)veorq_s8(v117.val[1], (int8x16_t)v62);
    _Q22 = vmovl_u8(*(uint8x8_t *)v98.i8);
    _Q21 = vmovl_high_u8(v98);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    v103 = (uint8x16_t)veorq_s8(v117.val[2], (int8x16_t)v62);
    v104 = vmovl_high_u8(v103);
    v105 = vmovl_u8(*(uint8x8_t *)v103.i8);
    v117.val[0] = veorq_s8(v117.val[3], (int8x16_t)v62);
    v117.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v117.val[0]);
    v117.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v117.val[1]);
    v117.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v117.val[1].i8);
    v117.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v117.val[0].i8);
    v117.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v117.val[0]);
    v117.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v117.val[0].i8);
    v106 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v105.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v96.i8), 0x18uLL)), v117.val[0]);
    v107 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v105, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v96), 0x18uLL)), v117.val[3]);
    v108 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v104.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v97.i8), 0x18uLL)), v117.val[1]);
    v109 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v104, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v97), 0x18uLL)), v117.val[2]);
    v117.val[0] = veorq_s8(vandq_s8((int8x16_t)v106, (int8x16_t)v60), (int8x16_t)(*(_OWORD *)v117.val & __PAIR128__(0xFFFFFF12FFFFFF12, 0xFFFFFF12FFFFFF12)));
    v117.val[3] = veorq_s8(vandq_s8((int8x16_t)v107, (int8x16_t)v60), (int8x16_t)(*(_OWORD *)&v117.val[3] & __PAIR128__(0xFFFFFF12FFFFFF12, 0xFFFFFF12FFFFFF12)));
    v117.val[1] = veorq_s8(vandq_s8((int8x16_t)v108, (int8x16_t)v60), (int8x16_t)(*(_OWORD *)&v117.val[1] & __PAIR128__(0xFFFFFF12FFFFFF12, 0xFFFFFF12FFFFFF12)));
    v117.val[2] = veorq_s8(vandq_s8((int8x16_t)v109, (int8x16_t)v60), (int8x16_t)(*(_OWORD *)&v117.val[2] & __PAIR128__(0xFFFFFF12FFFFFF12, 0xFFFFFF12FFFFFF12)));
    a50 = vaddq_s32(vsubq_s32(v108, vaddq_s32((int32x4_t)v117.val[1], (int32x4_t)v117.val[1])), (int32x4_t)v61);
    a51 = vaddq_s32(vsubq_s32(v109, vaddq_s32((int32x4_t)v117.val[2], (int32x4_t)v117.val[2])), (int32x4_t)v61);
    a48 = vaddq_s32(vsubq_s32(v106, vaddq_s32((int32x4_t)v117.val[0], (int32x4_t)v117.val[0])), (int32x4_t)v61);
    a49 = vaddq_s32(vsubq_s32(v107, vaddq_s32((int32x4_t)v117.val[3], (int32x4_t)v117.val[3])), (int32x4_t)v61);
    v110 = (_DWORD *)&a48 + v56 + 1874048654;
    v111 = *((_DWORD *)&a48 + ((v114 - 1766888819) & 0x6950956F ^ (unint64_t)(v56 - 259)) + 1874048654) ^ *(v110 - 3);
    v112 = *(v110 - 16) ^ *(v110 - 14) ^ (v111 + v54 - (a5 & (2 * v111)));
    HIDWORD(v113) = v112 ^ v54;
    LODWORD(v113) = v112;
    *v110 = (v113 >> 31) + v54 - (a5 & (2 * (v113 >> 31)));
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v52 + 8 * (int)((623 * (v58 != 1874048591)) ^ v114)) - 12))(671088640);
  }
  else if (v65 == 1)
  {
    v116 = vld4q_s8(&a25);
    v66 = 283 * (v57 ^ (v57 + 2));
    v67 = (uint8x16_t)veorq_s8(v116.val[0], (int8x16_t)v62);
    v68 = vmovl_u8(*(uint8x8_t *)v67.i8);
    v69 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v68.i8);
    v70 = (int8x16_t)vmovl_high_u16(v68);
    v71 = vmovl_high_u8(v67);
    v72 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v71.i8);
    v73 = (int8x16_t)vmovl_high_u16(v71);
    v74 = (uint8x16_t)veorq_s8(v116.val[1], (int8x16_t)v62);
    v75 = vmovl_high_u8(v74);
    v76 = vmovl_u8(*(uint8x8_t *)v74.i8);
    v77 = (uint8x16_t)veorq_s8(v116.val[2], (int8x16_t)v62);
    _Q26 = (int8x16_t)vmovl_high_u8(v77);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v77.i8);
    v80 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }
    v85 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v116.val[0] = veorq_s8(v116.val[3], (int8x16_t)v62);
    v116.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v116.val[0]);
    v116.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v116.val[1]);
    v116.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v116.val[0].i8);
    v116.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v116.val[0]);
    v116.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v116.val[0].i8), 0x18uLL), v80), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v76.i8, 8uLL), v69));
    v116.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v116.val[3], 0x18uLL), _Q25), vorrq_s8((int8x16_t)vshll_high_n_u16(v76, 8uLL), v70));
    v116.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v116.val[1].i8), 0x18uLL), v85), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v75.i8, 8uLL), v72));
    v116.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v116.val[2], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v75, 8uLL), v73));
    v86 = (int32x4_t)veorq_s8(vandq_s8(v116.val[0], (int8x16_t)v63), (int8x16_t)(*(_OWORD *)&v69 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
    v87 = (int32x4_t)veorq_s8(vandq_s8(v116.val[3], (int8x16_t)v63), (int8x16_t)(*(_OWORD *)&v70 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
    v88 = (int32x4_t)veorq_s8(vandq_s8(v116.val[1], (int8x16_t)v63), (int8x16_t)(*(_OWORD *)&v72 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
    v89 = (int32x4_t)veorq_s8(vandq_s8(v116.val[2], (int8x16_t)v63), (int8x16_t)(*(_OWORD *)&v73 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
    a50 = vaddq_s32(vsubq_s32((int32x4_t)v116.val[1], vaddq_s32(v88, v88)), (int32x4_t)v61);
    a51 = vaddq_s32(vsubq_s32((int32x4_t)v116.val[2], vaddq_s32(v89, v89)), (int32x4_t)v61);
    a48 = vaddq_s32(vsubq_s32((int32x4_t)v116.val[0], vaddq_s32(v86, v86)), (int32x4_t)v61);
    a49 = vaddq_s32(vsubq_s32((int32x4_t)v116.val[3], vaddq_s32(v87, v87)), (int32x4_t)v61);
    v90 = ((v66 + 22) ^ (v53 + 572) ^ a35)
        - 549460035
        + ((a38 ^ v53) & (a36 ^ 0xD4535BF7) | (a36 ^ v53) & (a37 ^ v53))
        + *((_DWORD *)*(&off_1E5B56B60 + v66 - 395) + v115 + v56)
        + (a48.i32[(*((_BYTE *)*(&off_1E5B56B60 + v66 - 522) + v115 + v56 - 8) - 108)] ^ v54);
    v91 = v90 + v53 - (v55 & (2 * v90));
    v92 = (char *)*(&off_1E5B56B60 + (v66 ^ 0x266)) - 4;
    v93 = (((v91 ^ v53) << (v92[v115 + v56] - 22)) | ((v91 ^ v53) >> (22 - v92[v115 + v56]))) + (a36 ^ v53);
    return ((uint64_t (*)(uint64_t, _QWORD, __n128))(*(_QWORD *)(v52 + 8 * v66) - 12))(671088640, v93 + v53 - (v55 & (2 * v93)), v60);
  }
  else
  {
    a35 = 2 * (a35 ^ v53) + v53 - (v55 & (4 * (a35 ^ v53)));
    a36 = 2 * (a36 ^ v53) + v53 - (v55 & (4 * (a36 ^ v53)));
    a37 = 2 * (a37 ^ v53) + v53 - (v55 & (4 * (a37 ^ v53)));
    a38 = 2 * (a38 ^ v53) + v53 - (v55 & (4 * (a38 ^ v53)));
    return v59(671088640, v60, v61, v62, v63, v64);
  }
}

uint64_t sub_1AC16F71C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, int a16, unsigned int a17)
{
  uint64_t v17;
  int v18;
  unsigned int v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;

  v19 = ((677 * (v18 ^ (v18 + 2))) ^ (a4 + v18 + 1455130148)) + a14;
  v20 = v19 < 0x6DF39AB5;
  v21 = v19 > a17;
  if (a17 < 0x6DF39AB5 != v20)
    v22 = v20;
  else
    v22 = v21;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v17 + 8 * ((215 * !v22) ^ (a4 + v18 + 1239))) - 4))(a1, 3905414984);
}

uint64_t sub_1AC16F7C8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (v4 ^ (628 * (v5 + a2 + 63 >= (v5 + a2)))))
                            - ((v4 - a4 - 1015) ^ 0x54A5C6E5)))();
}

uint64_t sub_1AC16F810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8
                                        * (v14 | (16
                                                * ((((unint64_t)(a13 + v15 - v13) < 0x10) ^ (v14 - 41)) & 1))))
                            - 4))();
}

uint64_t sub_1AC16F858@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W3>, int a4@<W7>, int a5@<W8>, int8x16_t a6@<Q2>, int8x16_t a7@<Q4>)
{
  int8x16_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int8x16_t v12;

  v12 = *(int8x16_t *)(v10 + a1 + v8 + ((a5 + a4) & v11) - 57);
  *v7 = vaddq_s8(vsubq_s8(v12, vandq_s8(vaddq_s8(v12, v12), a7)), a6);
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (a2 ^ (a3 + a5 + 618))) - 8))();
}

uint64_t sub_1AC16F8BC@<X0>(int a1@<W1>, int a2@<W3>, char a3@<W5>, int a4@<W6>, int a5@<W8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  *(_BYTE *)(v6 + v5) = (a5 ^ (v10 - 9))
                      + *(_BYTE *)(v9 + (v7 + a1))
                      - (a3 & (2 * *(_BYTE *)(v9 + (v7 + a1))))
                      + 17;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (((v5 == 63) * a4) ^ (a2 + a5 + 596))) - 8))();
}

uint64_t sub_1AC16F910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;

  v16 = v14 + 1356805185 < (a13 + 920459823);
  if ((a13 + 920459823) < 0x68174CF9 != v14 + 1356805185 < (v13 + 1746357017))
    v16 = (a13 + 920459823) < 0x68174CF9;
  return (*(uint64_t (**)(void))(v15 + 8 * ((989 * !v16) ^ v13)))();
}

uint64_t sub_1AC16F97C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v42;

  v37 = (a4 + 1471540913) & 0xFCEFD7FF;
  v42 = a4 ^ 0x31B;
  v38 = 3804331 * ((v36 - 82795860 - 2 * ((v36 - 120) & 0xFB10A324)) ^ 0x18E5072);
  *(_QWORD *)(v36 - 112) = a10;
  *(_DWORD *)(v36 - 120) = v38 + a4 + 1632;
  *(_DWORD *)(v36 - 116) = (a13 + 380855409) ^ v38;
  v39 = sub_1AC18A930(v36 - 120);
  v40 = a35 & ((v37 - 1420149709) ^ v42);
  *(&a26 + (v40 ^ 0x37)) = -54;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v35 + 8 * ((1883 * ((v40 ^ 0x37) > 0x37)) ^ a4))
                                          - 12))(v39);
}

uint64_t sub_1AC16FA88(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8 * (((v4 != ((v5 + 320) ^ 0x454)) * (a4 + (v5 ^ (v7 - 279)) + 965)) ^ v5))
                            - 4))();
}

uint64_t sub_1AC16FAD0()
{
  unsigned int v0;
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((243 * ((((v1 ^ (v3 - 1111)) - v3 + 8) ^ v0) < 8)) ^ v1)) - 8))();
}

uint64_t sub_1AC16FB08@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(&a18 + a1 + v20) = 0x4A4A4A4A4A4A4A4ALL;
  return ((uint64_t (*)(void))(*(_QWORD *)(v21
                                        + 8
                                        * (int)((((v18 & 0x38) == 8) * (((v19 + 66219951) & 0xFC0D937B) + 80)) ^ (v19 + 489)))
                            - 4))();
}

uint64_t sub_1AC16FB64(double a1)
{
  int v1;
  double *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *v2 = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((v4 == 0) * v3) ^ v1)) - 4))();
}

uint64_t sub_1AC16FB88@<X0>(int a1@<W3>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((a2 - 807) * (v3 != v2)) | a2))
                            + 1420150493
                            - (a2 - a1 - 472)))();
}

void sub_1AC16FBBC()
{
  JUMPOUT(0x1AC16EBA8);
}

uint64_t sub_1AC16FBCC@<X0>(unsigned int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,char a21)
{
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  unsigned int v28;
  int v29;
  _BOOL4 v30;

  v27 = v21 < a1;
  *(&a21 + (a4 - 701486349)) = *(_BYTE *)(v26 + (v24 + a2))
                                           - ((2 * *(_BYTE *)(v26 + (v24 + a2))) & 0x94)
                                           + 74;
  v28 = a3 + v24 + 1;
  v29 = v27 ^ (v28 < a1);
  v30 = v28 < v21;
  if (!v29)
    v27 = v30;
  return (*(uint64_t (**)(void))(v25 + 8 * ((!v27 * v22) ^ v23)))();
}

uint64_t sub_1AC16FC5C@<X0>(int a1@<W3>, int a2@<W8>)
{
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((a1 + v3 + 444) ^ (16
                                                            * (a2 - 294834946 >= ((v3 + 875432174) & 0x772C36FFu) - 1687))))
                            - 12))();
}

uint64_t sub_1AC16FCB4@<X0>(unsigned int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = a1;
  v5 = v2 + a1 + ((v1 + 740473631) & 0xD3DD3FD9) - 455;
  if (v5 <= 0x38)
    v5 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((19 * (v5 - v4 + 294834946 < 8)) ^ v1)) - 8))();
}

uint64_t sub_1AC16FD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25)
{
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(&a25 + v27 + v28) = 0x4A4A4A4A4A4A4A4ALL;
  return ((uint64_t (*)(void))(*(_QWORD *)(v29 + 8 * ((((v26 & 0xFFFFFFFFFFFFFFF8) == 8) * (v25 ^ 0x72E)) ^ v25))
                            - 12))();
}

uint64_t sub_1AC16FD6C(double a1)
{
  int v1;
  double *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *v2 = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((v4 == 0) * v3) ^ v1)) - 12))();
}

uint64_t sub_1AC16FD90(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * ((((((v6 + 1143014177) | 0x1084C0A1) ^ (a4 - 246)) + (v6 ^ 0x5EE)) * (v4 != v5)) ^ v6))
                            - 12))();
}

uint64_t sub_1AC16FDD8@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  *(&a18 + a1 + v19) = 74;
  return ((uint64_t (*)(void))(*(_QWORD *)(v20
                                        + 8
                                        * (int)((1493
                                               * (((v18 + 1329683566) & 0xB0BE9FBF ^ (v21 - 227) ^ 0xFFFFFFFFBAC8EA1ELL)
                                                + a1 < 0x38)) ^ (v18 + 1329683566) & 0xB0BE9FBF))
                            - 12))();
}

void sub_1AC16FE38()
{
  JUMPOUT(0x1AC16FE10);
}

void sub_1AC16FE40()
{
  JUMPOUT(0x1AC16EBA8);
}

uint64_t sub_1AC170288@<X0>(uint64_t a1@<X1>, char a2@<W3>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32)
{
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  _BOOL4 v38;

  v37 = *(_DWORD *)(&a20 + ((v35 + a3) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a1 + (v35 + a3 + 2)) = (BYTE1(v37) ^ 0xA4) - ((v37 >> 7) & 0x94) + 74;
  *(_BYTE *)(a1 + (v35 + a3)) = ((v33 - a2 + 74) ^ HIBYTE(v37))
                                            - ((2 * ((v33 - a2 + 74) ^ HIBYTE(v37))) & 0x94)
                                            + 74;
  *(_BYTE *)(a1 + (v35 + a3 + 1)) = (BYTE2(v37) ^ 0xAC) - ((2 * (BYTE2(v37) ^ 0xAC)) & 0x94) + 74;
  *(_BYTE *)(a1 + (v35 + a3 + 3)) = v37 ^ 0x42;
  v38 = v35 + 268000702 < (a32 - 54226688);
  if (v35 + 268000702 < v32 != a32 - 54226688 < v32)
    v38 = a32 - 54226688 < v32;
  return ((uint64_t (*)(void))(*(_QWORD *)(v36 + 8 * ((v38 * v34) ^ v33)) - 12))();
}

void sub_1AC170410()
{
  JUMPOUT(0x1AC1703D8);
}

uint64_t sub_1AC170418()
{
  return 0;
}

void sub_1AC170458(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _DWORD v3[2];
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)a1 + 535753261 * ((a1 & 0x658A5D69 | ~(a1 | 0x658A5D69)) ^ 0x9081ACB9);
  v2 = *(_QWORD *)(a1 + 8);
  v3[0] = v1
        + 235795823 * ((-1614712329 - (v3 | 0x9FC171F7) + (v3 | 0x603E8E08)) ^ 0xF493C751)
        - 63;
  v4 = v2;
  sub_1AC1AA220((uint64_t)v3);
  __asm { BR              X9 }
}

uint64_t sub_1AC170588@<X0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  _BOOL4 v8;

  v5 = 2 * (v2 ^ 0x224);
  v6 = (((v4 - v3) >> 4) & 0x73FDBFC ^ 0x733927C)
     + (((v4 - v3) >> 5) ^ 0xF42624C0)
     - 1344645676;
  v7 = (v1 > 0x5C85BC2D) ^ (v6 < ((123 * (v5 ^ 0x2C4)) ^ 0xA37A4568));
  v8 = v6 < v1 - 1552268334;
  if (v7)
    v8 = v1 > 0x5C85BC2D;
  return (*(uint64_t (**)(void))(a1 + 8 * ((2013 * v8) ^ v5)))();
}

uint64_t sub_1AC170630@<X0>(uint64_t a1@<X8>)
{
  char v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * (int)((((v2 + 1045405748) & 0xC1B05DD7 ^ 0x563) * ((v1 & 0x1F) == 0x1C)) ^ v2))
                            - 4))();
}

uint64_t sub_1AC170678@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;

  v6 = v1 + 1827667960;
  v7 = v3 - 1218;
  if (*v4 + 678788118 < 0)
    v6 = 1412422644 - v1;
  *v4 = *v4 - 1620045302 + v6;
  v8 = v2 + 965453420;
  **(_DWORD **)(v5 - 0x48247A3086942776) = *(_DWORD *)(*(_QWORD *)(v5 - 0x48247A3086942776) + 4 * (v1 + 207622658));
  v9 = v8 > 1173076079;
  if (v8 < -974407570 != (v7 ^ 0x2B9) - 974408403 > 1173076079)
    v9 = v8 < -974407570;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((672 * !v9) ^ v7)) - 4))();
}

void sub_1AC170774()
{
  JUMPOUT(0x1AC170720);
}

void sub_1AC17077C()
{
  _DWORD *v0;

  *v0 = 1468695530;
}

void sub_1AC1709BC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1AC170A2C@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((230
                                          * (((2 * (a1 - 576264642)) & 0xFFFE5EB8)
                                           + 0x40A441515D56A0F1
                                           + ((a1 - 576264642) ^ 0xBF5BBEAF7FFF2F5CLL) == 3713388621)) ^ 0x454u))
                            - 8))();
}

uint64_t sub_1AC170AC8()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v6 = *(unsigned __int8 *)(v3 + v4 - 0x4B4B6B4CFD8F215ALL) - *(unsigned __int8 *)(v1 + v4 - 0x4B4B6B4CFD8F215ALL);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5
                                                      + 8
                                                      * ((1182
                                                        * (((((v2 - 302) | 0x400) + 1660614814) & (2 * v6)) + (v6 ^ v0) == v0)) ^ v2))
                                          - 8))(4294925278);
}

uint64_t sub_1AC170B2C()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BOOL4 v5;

  v5 = v1 < v0;
  if (v5 == v2 - 0x4B4B6B4C2039510CLL < v0)
    v5 = v2 - 0x4B4B6B4C2039510CLL < v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((((v3 ^ 0x456) + 384) ^ 0x164) * !v5) ^ v3)) - 8))();
}

uint64_t sub_1AC170BA4@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * ((1735 * (a1 == ((v1 + 241172194) | 0x1100A) + 335022429)) ^ v1))
                                          - 8))(4294925278);
}

uint64_t sub_1AC170BEC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((660
                                          * (((2 * (*v0 - 42)) & 0xBFFF7ED8) + ((v1 - 215) ^ 0xDFFFBFC7 ^ (*v0 - 42)) == -536887444)) ^ (v1 - 215)))
                            - 12))();
}

uint64_t sub_1AC170C58()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BOOL4 v5;

  v5 = ((v1 + v3 + 364 - 535) & (2 * (*(unsigned __int8 *)(v2 + 1) - 134)))
     + ((*(unsigned __int8 *)(v2 + 1) - 134) ^ v0) == v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((v5 | (4 * v5)) ^ v3)) - 12))();
}

uint64_t sub_1AC170CA0()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BOOL4 v5;

  v5 = (v1 & (2 * (*(unsigned __int8 *)(v2 + 2) - 72))) + ((*(unsigned __int8 *)(v2 + 2) - 72) ^ v0) == v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((8 * v5) | (16 * v5)) ^ v3)) - ((5 * (v3 ^ 0xC0u)) ^ 0x21BLL)))();
}

uint64_t sub_1AC170CF0()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 3) - 134)))
                                           + ((*(unsigned __int8 *)(v2 + 3) - 134) ^ v0) == v0)
                                          * (v3 + 1777)) ^ v3))
                            - 12))();
}

uint64_t sub_1AC170D34()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((1606
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 4) - 247)))
                                           + (v3 ^ v5 ^ (*(unsigned __int8 *)(v2 + 4) - 247)) == v0)) ^ v4))
                            - 12))();
}

uint64_t sub_1AC170D78()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((441
                                          * ((((v3 + 364) ^ (v1 - 521)) & (2 * (*(unsigned __int8 *)(v2 + 5) - 13)))
                                           + ((*(unsigned __int8 *)(v2 + 5) - 13) ^ v0) == v0)) ^ v3))
                            - 12))();
}

uint64_t sub_1AC170DC4()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1689
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 6) - 1)))
                                           + ((v3 + 997403212) & 0xC48CD71F ^ v4 ^ (*(unsigned __int8 *)(v2 + 6) - 1)) == v0)) ^ v3))
                            - 12))();
}

uint64_t sub_1AC170E20()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1389
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 7) - 1)))
                                           + ((*(unsigned __int8 *)(v2 + 7) - 1) ^ v0) == v0)) ^ v3))
                            - (v3 + 364)
                            + 523))();
}

uint64_t sub_1AC170E68()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;

  v5 = (((v3 ^ 0xAE) + 1181) ^ 0xFFFFFB5E) + *(unsigned __int8 *)(v2 + 8);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v1 & (2 * v5)) + (v5 ^ v0) == v0) * ((107 * (v3 ^ 0xAE)) ^ 0x21)) ^ v3))
                            - 12))();
}

uint64_t sub_1AC170EC8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(*(_QWORD *)(v4 + 96) + 1428) = 381856475;
  return (*(uint64_t (**)(void))(v3 + 8 * (((*(_DWORD *)(a2 + 4) == 576264651) * (((v2 - 498) | 3) ^ 0x117)) ^ v2)))();
}

uint64_t sub_1AC170F18(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((218
                                          * ((v3 & (2 * (**(unsigned __int8 **)(a2 + 8) - 42)))
                                           + ((**(unsigned __int8 **)(a2 + 8) - 42) ^ v2) == (((v4 - 502) | 0x102) ^ (v2 - 285)))) ^ v4))
                            - 8))();
}

uint64_t sub_1AC170F64()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1863
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 1) - 134)))
                                           + ((*(unsigned __int8 *)(v3 + 1) - 134) ^ v0) == (v2 ^ 0x334 ^ v4))) ^ v2))
                            - 8))();
}

uint64_t sub_1AC170FA4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((((*(unsigned __int8 *)(v3 + 2) - 72) << (((v2 + 9) | 3) ^ 0x22)) & v1)
                                           + ((*(unsigned __int8 *)(v3 + 2) - 72) ^ v0) == v0)
                                          * ((v2 - 1277359128) & 0x4C22F3FE ^ 0x6FC)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC171010()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;

  v5 = *(unsigned __int8 *)(v2 + 3) + ((107 * (v3 ^ 0x1FB) - 500) | 0x100) - 425;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((1001 * ((v1 & (2 * v5)) + (v5 ^ v0) != v0)) ^ v3)) - 8))();
}

uint64_t sub_1AC171060()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((322
                                          * ((((v2 - 244) ^ (v1 + 291)) & (2 * (*(unsigned __int8 *)(v3 + 4) - 247)))
                                           + ((*(unsigned __int8 *)(v3 + 4) - 247) ^ v0) == v0)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC1710A0()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v5 = *(unsigned __int8 *)(v3 + 5) + 3 * (v2 ^ 0x276) - 304;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((287 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v2)) - 8))();
}

uint64_t sub_1AC1710E4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v5 = v2 ^ 0x683;
  v6 = 107 * (v5 ^ 0x491) + *(unsigned __int8 *)(v3 + 6) - 536;
  return (*(uint64_t (**)(void))(v4
                              + 8 * ((296 * ((((97 * (v5 ^ 0x497)) ^ (v1 + 291)) & (2 * v6)) + (v6 ^ v0) == v0)) | v5)))();
}

uint64_t sub_1AC171148()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1347
                                          * ((((*(unsigned __int8 *)(v2 + 7) - 1) << ((v3 - 52) & 0x3F ^ 0x22)) & v1)
                                           + ((*(unsigned __int8 *)(v2 + 7) - 1) ^ v0) == v0)) ^ v3))
                            - ((v3 + 637) ^ 0x49CLL)))();
}

uint64_t sub_1AC1711AC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 8) - 5)))
                                 + ((*(unsigned __int8 *)(v3 + 8) - 5) ^ v0) == v0)
                                * ((v2 - 881) ^ 0x45)) ^ v2)))();
}

uint64_t sub_1AC1711E4(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(*(_QWORD *)(v4 + 96) + 1428) = 381856479;
  return (*(uint64_t (**)(void))(v3 + 8 * ((54 * (*(_DWORD *)(a2 + 4) != 576264651)) ^ v2)))();
}

uint64_t sub_1AC171238(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  v6 = **(unsigned __int8 **)(a2 + 8) - 42;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((30 * ((v3 & (2 * v6)) + (v6 ^ v2) == v2)) ^ v4))
                            - 593 * (v4 ^ 0x121u)
                            + 1178))();
}

uint64_t sub_1AC171284()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((623
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 1) - 134)))
                                           + ((*(unsigned __int8 *)(v3 + 1) - 134) ^ (v0 + (v2 ^ 0x581) - 1186)) == v0)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC1712C8()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((158
                                          * (((v1 + ((v2 - 380705644) & 0x16B11EEA) - 1186) & (2
                                                                                             * (*(unsigned __int8 *)(v3 + 2)
                                                                                              - 72)))
                                           + ((*(unsigned __int8 *)(v3 + 2) - 72) ^ v0) == v0)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC17131C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1441
                                          * ((((*(unsigned __int8 *)(v3 + 3) - 134) << (((v2 + 93) | 0x22) ^ 0xA3)) & v1)
                                           + ((*(unsigned __int8 *)(v3 + 3) - 134) ^ v0) == v0)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC171368()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v5 = *(unsigned __int8 *)(v3 + 4) + (v2 ^ 0xFFFFFE2A);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((1546 * ((v1 & (2 * v5)) + (v5 ^ v0) == v0)) ^ v2)) - 8))();
}

uint64_t sub_1AC1713AC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((652
                                          * (((v1 + v2 + 895 - 1186) & (2 * (*(unsigned __int8 *)(v3 + 5) - 13)))
                                           + ((*(unsigned __int8 *)(v3 + 5) - 13) ^ v0) == v0)) | v2))
                            - 8))();
}

uint64_t sub_1AC1713EC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1064
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 6) - 1)))
                                           + ((*(unsigned __int8 *)(v3 + 6) - 1) ^ v0) == v0)) ^ v2))
                            - (v2 ^ 0x581u)
                            + 1178))();
}

uint64_t sub_1AC17142C()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((609
                                          * ((((*(unsigned __int8 *)(v3 + 7) - 1) << (v2 - 34)) & v1)
                                           + ((*(unsigned __int8 *)(v3 + 7) - 1) ^ v0) == ((v2 - 456475000) & 0x1B354176 ^ (v0 - 286)))) ^ v2))
                            - 8))();
}

uint64_t sub_1AC17148C()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((((*(unsigned __int8 *)(v2 + 8) - 11) << (v3 ^ 0x23)) & v1)
                                          + ((*(unsigned __int8 *)(v2 + 8) - 11) ^ v0) != v0) ^ v3))
                            - ((v3 - 1346151031) & 0x503CA5F6)
                            + 1178))();
}

uint64_t sub_1AC1714E8()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * ((((v1 ^ 0x611) + 301) * (v0 == 48)) ^ v1)))(4294925278);
}

void sub_1AC171A84()
{
  JUMPOUT(0x1AC171AA0);
}

void sub_1AC171CFC()
{
  JUMPOUT(0x1AC171C08);
}

uint64_t sub_1AC171D10()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((31 * (v1 + 1 == v3 + 16)) ^ v0)) - 12))();
}

uint64_t sub_1AC171DE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 8 * ((1402 * (a3 + 1 == v6 + 32)) ^ v4))
                                                            - 12))(a1, a2, a4);
}

uint64_t sub_1AC171EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((738 * (v5 + 1 == v7 + 48)) | a5)) - 12))();
}

void sub_1AC171F88()
{
  JUMPOUT(0x1AC1724ACLL);
}

uint64_t sub_1AC172170()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((2009 * (v1 + 1 == v3 + 4)) ^ v0)) - 12))();
}

uint64_t sub_1AC172234@<X0>(uint64_t a1@<X2>, unsigned int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((23 * (a1 + 1 == v3 + 24)) ^ a2)) - 12))();
}

uint64_t sub_1AC1722F4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((808 * (v1 + 1 != v3 + 44)) ^ v0)) - 4))();
}

uint64_t sub_1AC1723A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((37 * (a3 + 1 == v5 + 64)) | v3)) - 4))();
}

void sub_1AC172454()
{
  JUMPOUT(0x1AC1724A8);
}

uint64_t sub_1AC172528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, unsigned int a17, unsigned int a18)
{
  uint64_t v18;
  _BOOL4 v19;

  if (a18 < a17 != a15 - 1111412815 < (a7 ^ (a7 + 398)) - 240312360)
    v19 = a15 - 1111412815 < (a7 ^ (a7 + 398)) - 240312360;
  else
    v19 = a15 - 1111412815 > a18;
  return ((uint64_t (*)(void))(*(_QWORD *)(v18 + 8 * ((28 * v19) ^ (a5 + a7 - 88))) - 12))();
}

uint64_t sub_1AC1725B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v6;
  unsigned int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((1229 * (v6 - 1112343143 + (v7 ^ 0xED) - a5 + 392 + 63 >= v6 + a6)) ^ v7))
                            - 4))();
}

uint64_t sub_1AC172610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  return ((uint64_t (*)(void))(*(_QWORD *)(v17
                                        + 8
                                        * ((237
                                          * (a14
                                           + v15
                                           - (unint64_t)(v14 - 1112343143 + ((v16 - 547021712) & 0x2EFBF27E)) < 0x10)) ^ v16))
                            - 4))();
}

uint64_t sub_1AC172668@<X0>(char a1@<W1>, int a2@<W4>, int a3@<W5>, int a4@<W8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v6 + v5) = *(_BYTE *)(v8 + (v4 + a3))
                      + (a1 | ~(2 * *(_BYTE *)(v8 + (v4 + a3))))
                      + 75;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((a2 + a4 + 409) | (16 * (v5 == 63)))) - 12))();
}

uint64_t sub_1AC1726B8@<X0>(unint64_t a1@<X3>, int a2@<W4>, int a3@<W5>, int a4@<W6>, int a5@<W7>, int a6@<W8>, int8x16_t a7@<Q3>, int8x16_t a8@<Q4>)
{
  int v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;

  *v9 = vaddq_s8(vaddq_s8(*(int8x16_t *)(v11 + (v8 + a3)), a8), vmvnq_s8(vandq_s8(vaddq_s8(*(int8x16_t *)(v11 + (v8 + a3)), *(int8x16_t *)(v11 + (v8 + a3))), a7)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8 * ((((a6 ^ (a4 - 28) ^ a1) != 64) * a5) ^ (a2 + a6 + 425)))
                            - 12))();
}

uint64_t sub_1AC17271C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v14;
  int v15;
  uint64_t v16;
  BOOL v17;

  v17 = v14 + 1348162207 < (a14 + 1393365454);
  if ((a14 + 1393365454) < 0x84474498 != (v14 + 1348162207) < 0x84474498)
    v17 = (a14 + 1393365454) < 0x84474498;
  return (*(uint64_t (**)(_QWORD))(v16
                                           + 8
                                           * ((((v15 + 1) ^ v17) & 1 | (4
                                                                                       * (((v15 + 1) ^ v17) & 1))) ^ v15)))(v15 ^ 0x1E0u);
}

uint64_t sub_1AC17278C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;

  v37 = (a1 + 138476968) | 0x6201006;
  v38 = 3804331 * ((((2 * (v36 - 120)) | 0x254F8DF4) - (v36 - 120) + 1834498310) ^ 0x683935AC);
  *(_QWORD *)(v36 - 112) = a11;
  *(_DWORD *)(v36 - 120) = v38 + a1 + 976;
  *(_DWORD *)(v36 - 116) = (a14 + 380855409) ^ v38;
  v39 = sub_1AC18A930(v36 - 120);
  v40 = a35 & 0x3F ^ (a1 - 649);
  *(&a26 + v40) = -54;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v35 + 8 * (((v40 > 0x37) * (v37 ^ 0xE611198)) ^ a1)) - 8))(v39);
}

uint64_t sub_1AC172884()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * ((109 * (v0 == ((v1 + 1734997042) & 0x98960B7D ^ 0x24F))) ^ (v1 - 540)))
                            - ((v1 - 640) | 1u)
                            + 57))();
}

uint64_t sub_1AC1728DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (int)(((((v6 - 1635930354) & 0x6FE35EEF ^ 0xFFFFE0D1) + v6 - a5 + 151)
                                               * ((v5 ^ 8u) > 7)) ^ v6))
                            - 8))();
}

uint64_t sub_1AC17292C@<X0>(int a1@<W4>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  char v19;
  int v20;
  uint64_t v21;

  *(_QWORD *)(&a19 + a2 - 282813386) = 0x4A4A4A4A4A4A4A4ALL;
  return ((uint64_t (*)(void))(*(_QWORD *)(v21
                                        + 8 * ((((v19 & 0x38) != 8) * ((a1 + v20 - 574) ^ 0xDB)) ^ (a1 + v20 - 411)))
                            - 4))();
}

uint64_t sub_1AC172984(double a1)
{
  double *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *v1 = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((v4 != 0) * v3) ^ v2)) - 4))();
}

uint64_t sub_1AC1729A8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((((a1 + 640665638) & 0xD9D03751 ^ 0x2F8) * (v2 != v1)) ^ a1))
                            + 241242214
                            - ((a1 - 1359497690) & 0x5F69597E)))();
}

void sub_1AC172A08()
{
  JUMPOUT(0x1AC1719D4);
}

uint64_t sub_1AC172A20@<X0>(int a1@<W5>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  unsigned int v28;
  int v29;
  _BOOL4 v30;

  v27 = v20 < v22;
  *(&a19 + (a2 + v21)) = *(_BYTE *)(v26 + (v19 + a1))
                                     - (((v24 - 96) ^ 0x54) & (2 * *(_BYTE *)(v26 + (v19 + a1))))
                                     + 74;
  v28 = v19 + 1 + v23;
  v29 = v27 ^ (v28 < v22);
  v30 = v28 < v20;
  if (!v29)
    v27 = v30;
  return (*(uint64_t (**)(void))(v25 + 8 * (!v27 | (4 * !v27) | v24)))();
}

uint64_t sub_1AC172A90@<X0>(int a1@<W4>, int a2@<W6>, int a3@<W8>)
{
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((a3 - 282813386) < 0x38) * ((v3 ^ (a2 + 933)) + 43)) ^ (a1 + v3 - 221)))
                            - 4))();
}

uint64_t sub_1AC172AD4@<X0>(int a1@<W6>, unsigned int a2@<W8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = a2;
  v5 = ((v2 + 258938994) & 0xFEF1F37E ^ 0xFFFFFFFFE1458C59) + a2;
  if (v5 <= 0x38)
    v5 = 56;
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((193 * (v5 - v4 + 282813386 >= ((a1 + v2 - 1149) ^ 0xE611066uLL))) ^ v2)))();
}

uint64_t sub_1AC172B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  *(_QWORD *)(&a25 + v26 - 282813386) = 0x4A4A4A4A4A4A4A4ALL;
  return ((uint64_t (*)(void))(*(_QWORD *)(v28
                                        + 8
                                        * ((((v25 & 0xFFFFFFFFFFFFFFF8) == 8) * (5 * (v27 ^ (a7 + 79)) - 34)) ^ (a5 + v27 - 351)))
                            - 4))();
}

uint64_t sub_1AC172BAC(double a1)
{
  double *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *v1 = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((v4 == 0) * v3) ^ v2)) - 4))();
}

uint64_t sub_1AC172BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (((a5 + ((v7 - 1083871280) & 0x4EFB9C7E) - 716) * (v5 == v6)) ^ v7))
                            - 8))();
}

void sub_1AC172C0C()
{
  JUMPOUT(0x1AC1719D4);
}

uint64_t sub_1AC1730C4@<X0>(uint64_t a1@<X4>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  _BOOL4 v38;

  v36 = (v34 + a2);
  v37 = *(_DWORD *)(&a19 + v36 + 72);
  *(_BYTE *)(a1 + v36) = (HIBYTE(v37) ^ 0x2B) + (((v32 + 57) | 0x2E) ^ 0x24) - ((2 * (HIBYTE(v37) ^ 0x2B)) & 0x94);
  *(_BYTE *)(a1 + (v36 + 2)) = (BYTE1(v37) ^ 0xA4) - ((v37 >> 7) & 0x94) + 74;
  *(_BYTE *)(a1 + (v36 + 1)) = (BYTE2(v37) ^ 0xAC) - ((2 * (BYTE2(v37) ^ 0xAC)) & 0x94) + 74;
  *(_BYTE *)(a1 + (v36 + 3)) = v37 ^ 0x42;
  v38 = v34 + 1962089524 < (a31 + 1819654512);
  if (v34 + 1962089524 < v31 != a31 + 1819654512 < v31)
    v38 = a31 + 1819654512 < v31;
  return ((uint64_t (*)(void))(*(_QWORD *)(v35 + 8 * ((v38 * v33) | v32)) - 4))();
}

void sub_1AC17325C()
{
  JUMPOUT(0x1AC17322CLL);
}

void sub_1AC173274(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_1AC1732F8()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v0 + 12616) - 12))(1797235913);
}

uint64_t sub_1AC17341C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;
  int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (((v9 == ((a7 + v7 - 1625) ^ 0xAE86B0E6)) * (v7 - 1563)) ^ v7))
                            - 12))();
}

uint64_t sub_1AC173460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  int v17;
  int v18;
  uint64_t v19;

  return ((uint64_t (*)(void))(*(_QWORD *)(v19
                                        + 8
                                        * (((((v18 - 576264639) & 0xFFFFFFFC) - a17 == ((v17 - 696) ^ 0xDDA6E59F))
                                          * (v17 - 1511)) ^ (v17 - 696)))
                            - 8))();
}

uint64_t sub_1AC1734AC@<X0>(int a1@<W6>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3
                                                      + 8
                                                      * ((2045 * (a2 != ((a1 + v2 - 692) ^ (a1 - 778) ^ 0x2A8113FE))) ^ v2))
                                          - 12))(2497773335);
}

uint64_t sub_1AC1734F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  _BOOL4 v24;

  v22 = 2 * ((v19 - 1300171675) & 0x9C0C3AF7 ^ 0x339);
  v23 = v19 + 1317876396;
  v24 = a19 - 1827064289 < (v20 - 1702292886);
  if ((a19 - 1827064289) < 0xBCE22C2C != v20 - 1702292886 < (v22 ^ 0xBCE22F36))
    v24 = v20 - 1702292886 < (v22 ^ 0xBCE22F36);
  return (*(uint64_t (**)(void))(v21 + 8 * (((2 * v24) | (8 * v24)) ^ v23)))();
}

uint64_t sub_1AC1736C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15, uint64_t a16, unint64_t a17)
{
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v22 = (v18 + 746) ^ (a7 + 882);
  v23 = 628203409 * ((2 * ((v20 - 160) & 0x5955AA10) - (v20 - 160) + 648697320) ^ 0xA42259DB);
  STACK[0x298] = a12;
  STACK[0x2A8] = a15;
  STACK[0x290] = a14;
  *(_DWORD *)(v20 - 144) = v18 - v23 - 372;
  *(_DWORD *)(v20 - 140) = v17 - v23 - 370555003;
  STACK[0x2C0] = a13;
  STACK[0x2B8] = a17;
  ((void (*)(uint64_t))(*(_QWORD *)(v21 + 8 * (v18 ^ 0x236)) - 8))(v20 - 160);
  return ((uint64_t (*)(void))(*(_QWORD *)(v19 + 8 * ((1577 * (*(_DWORD *)(v20 - 128) == 1797235913)) ^ v18))
                            - (v22 ^ 0xB172D35BLL)))();
}

uint64_t sub_1AC1737C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((89
                                          * (((*(_DWORD *)(v7 + 48 * (v10 + v11)) == 429513602) ^ ((v9 + 22) ^ (a7 - 116))) & 1)) ^ v9))
                            - 4))();
}

uint64_t sub_1AC173814()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;

  v4 = (v0 ^ 0x42C78E0B) == (((v1 + 288526175) | 0xA0404144) ^ 0x5414F729) + v2;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * (((16 * v4) | (v4 << 10)) ^ v1)) - 12))(2497773335);
}

uint64_t sub_1AC173870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * (((*(_DWORD *)(v8 + 48 * (a7 + v7 + v10 + 781764061) + 36) != v10)
                                          * (v7 - 666)) ^ v7))
                            - 12))();
}

uint64_t sub_1AC1738BC@<X0>(int a1@<W6>, int a2@<W7>, int a3@<W8>)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  int v8;
  int v9;

  if ((v3 - 1120374279) <= 0x18 && ((1 << (v3 - 7)) & 0x1034001) != 0)
  {
    v7 = a3 & 0xFFFFFFFFFFFFFFFLL;
    if (v7)
    {
      if (v7 == 3)
      {
        v8 = a1 + 1317875190;
        v9 = (*(uint64_t (**)())(v4 + 48 * a3 + 8))();
        __asm { BR              X8 }
      }
      __asm { BR              X2 }
    }
    __asm { BR              X11 }
  }
  return a2 ^ 0x94E0FF17;
}

void sub_1AC173EE0(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) - 535753261 * (a1 ^ 0xAF40E2F);
  __asm { BR              X9 }
}

uint64_t sub_1AC173F68@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((29 * ((*(_DWORD *)(v2 - 0x685C86573AC75C4BLL) & 1) == ((a1 + 654) ^ 0x67A) - 719)) ^ a1)))();
}

uint64_t sub_1AC173FAC(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v2
                                                              + 8
                                                              * ((1491
                                                                * (v1
                                                                 - 128
                                                                 + *(_DWORD *)(v3 - 0x685C86573AC75C53)
                                                                 - 130836843 != -614)) ^ v1))
                                                  - 8))(a1, *(_QWORD *)(v3 - 0x685C86573AC75C5FLL));
}

uint64_t sub_1AC174010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v12 = ((unint64_t)&a9 ^ 0xBF7FF7D7DBF3D67ELL)
      + 0x7EFF7A39F7CDEFC0
      + ((2 * (_QWORD)&a9) & 0x7EFFEFAFB7E7ACF0);
  a9 = v10 - 1;
  *(_BYTE *)(a2 + a9) = ((v12 + (v9 ^ 0x8D)) ^ 0xBA) * (v12 - 45);
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v11 + 8 * ((38 * (a9 == 0)) ^ v9)) - 8))((v12 + 211));
}

void sub_1AC1740A8()
{
  JUMPOUT(0x1AC17406CLL);
}

void sub_1AC1740B0()
{
  _DWORD *v0;

  *v0 = -780059195;
}

void sub_1AC174218(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1AC1742A4@<X0>(int a1@<W8>)
{
  _DWORD *v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2 + 8 * (((*v1 != 0) * ((a1 - 77) ^ 0x54E)) ^ a1)))();
}

uint64_t sub_1AC1742E0()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  int v3;
  unsigned int *v4;
  uint64_t v5;

  v5 = v2(*v4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * ((107 * (((v3 ^ (*v0 == 0)) & 1) == 0)) ^ v3)) - 8))(v5);
}

uint64_t sub_1AC174318()
{
  uint64_t v0;
  _DWORD *v1;
  uint64_t (*v2)(_QWORD);
  unsigned int *v3;
  uint64_t result;

  result = v2(*v3);
  *v1 = 0;
  *(_DWORD *)v0 = 0;
  *(_QWORD *)(v0 + 344) = 0;
  *(_QWORD *)(v0 + 352) = 0;
  *(_DWORD *)(v0 + 360) = 2067538220;
  *(_DWORD *)(v0 + 56) = 1218717361;
  return result;
}

uint64_t sub_1AC174358()
{
  _DWORD *v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((107 * (((v2 ^ (*v0 == 0)) & 1) == 0)) ^ v2)) - 8))();
}

void Ehn34khqq1jgEJw()
{
  _DWORD v0[8];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[0] = 1734042137 * (v0 ^ 0x5CCEC34D) - 504207030;
  sub_1AC1ADE7C(v0);
  __asm { BR              X8 }
}

uint64_t sub_1AC174438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, int a15, unsigned int a16)
{
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  a14 = &STACK[0xD7CDE9D8B19903B];
  a16 = 514 - 460628867 * (((&a14 | 0x98AB1C2F) - (&a14 & 0x98AB1C2F)) ^ 0xD43D9E52);
  sub_1AC1A886C((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 + 8 * ((1268 * (a15 == 1797235913)) ^ v17))
                                                                                                - 8))(v18, v19, v20, v21, v22, v23, v24);
}

uint64_t sub_1AC1744E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;

  v24 = ((2 * (&a14 & 0x4F910590) - &a14 + 812579432) ^ 0x6CA03925) * v22;
  LODWORD(a16) = (v20 - ((2 * v20) & 0xDEE8F856) - 277578709) ^ v24;
  LODWORD(a15) = 477 - v24;
  a14 = a11;
  ((void (*)(uint64_t *))(*(_QWORD *)(v17 + 328) - 8))(&a14);
  a15 = v19;
  a16 = a11;
  LODWORD(a14) = 1178560073 * (&a14 ^ 0x32160040) + 1529;
  ((void (*)(uint64_t *))(*(_QWORD *)(v17 + 1376) - 8))(&a14);
  v25 = 628203409 * ((&a14 + 1529925748 - 2 * (&a14 & 0x5B30D074)) ^ 0xD9B8DC47);
  LODWORD(a14) = 583 - v25;
  a15 = a10;
  LODWORD(a16) = (v18 ^ 0xF2FC9FF7) + ((2 * v18) & 0xE5F93FEE) + 2108653119 + v25;
  a17 = a11;
  v26 = (*(uint64_t (**)(uint64_t *))(v17 + 416))(&a14);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23 + 8 * (((HIDWORD(a14) == v21) << 7) ^ 0x246u)) - 8))(v26);
}

uint64_t sub_1AC174680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, int a15, uint64_t a16, int a17, unsigned int a18, unint64_t *a19)
{
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  v22 = 1759421093 * ((2 * (&a14 & 0x7DEFB770) - &a14 + 34621583) ^ 0xB16DF8DB);
  a19 = &STACK[0x3703560E774B8133];
  a16 = a11;
  a14 = -512966212 - v22;
  a17 = v22 ^ 0x4B730259;
  a18 = v22 + v21 - 2024873665;
  v23 = sub_1AC1ADC5C((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20
                                                      + 8 * ((59 * (a15 == (((v21 - 134) | 0xB) ^ (v19 + 57)))) ^ v21))
                                          - 8))(v23);
}

uint64_t sub_1AC174750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, uint64_t a13, unsigned int a14, int a15, unint64_t *a16, unint64_t *a17)
{
  uint64_t v17;
  int v18;
  uint64_t v19;
  void (*v20)(unsigned int *);
  uint64_t v21;

  a14 = (v18 + 547) ^ (1374699841
                     * ((&a14 - 397078248 - 2 * (&a14 & 0xE8551118)) ^ 0x85A10911));
  a16 = &STACK[0x70D8B5D370459CD0];
  a17 = a12;
  v20 = (void (*)(unsigned int *))(*(_QWORD *)(v19 + 8 * (v18 - 547)) - 12);
  v20(&a14);
  a14 = (v18 + 547) ^ (1374699841
                     * ((&a14 + 536729857 - 2 * (&a14 & 0x1FFDD901)) ^ 0x7209C108));
  a16 = &STACK[0x70D8B5D370459CD4];
  a17 = a12;
  v20(&a14);
  a14 = v18
      - 380
      + 1225351577 * (((&a14 | 0xCDD97601) - (&a14 & 0xCDD97601)) ^ 0xEE43AE17)
      + 823;
  a16 = a12;
  v21 = sub_1AC16E07C((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17
                                                      + 8
                                                      * ((1986 * (a15 == ((v18 - 1564972072) ^ 0xC9A7CAD7))) ^ (v18 - 380)))
                                          - 8))(v21);
}

uint64_t sub_1AC1748A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  int v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * (v10 ^ (1712 * (a9 != 0))))
                            - ((v9 + 1224937857) & 0xB6FCEE7E ^ 0xA2B86E16)))();
}

uint64_t sub_1AC1748EC@<X0>(int a1@<W8>)
{
  int v1;
  void (*v2)(_BYTE *);
  unsigned int v3;
  int v4;
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[4];
  unsigned int v12;
  uint64_t v13;

  *v7 = v10 ^ v3;
  v4 = a1 + 1564971747;
  v5 = v4 | 0xCA;
  v13 = v9;
  v12 = v4 + 535753261 * ((2 * (v11 & 0x412B78B8) - v11 + 1054115655) ^ 0x34208968) + 1531;
  v2(v11);
  v13 = v8;
  v12 = v5 + 535753261 * ((2 * (v11 & 0x4AF28A8) - v11 - 78588075) ^ 0xF1A4D97A) + 1329;
  v2(v11);
  return v1 ^ v3;
}

void sub_1AC1749FC(uint64_t a1)
{
  int v1;

  v1 = ((*(_DWORD *)(a1 + 16) ^ (235795823 * ((a1 + 1866794728 - 2 * (a1 & 0x6F4506E8)) ^ 0xFBE84FB1))) + 2144551545) & 0x802CBF7F;
  __asm { BR              X5 }
}

uint64_t sub_1AC174C18(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((a5 + a7 - 262 == 381) * (((a7 + a3) & a4) + 80)) ^ a7)) - 8))();
}

uint64_t sub_1AC174C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  *(_DWORD *)(a10 - 0x5BFD90C18C6562A2) = 1874864697 - v18;
  v24 = 460628867 * ((v23 + 584760077 - 2 * ((v23 - 136) & 0x22DABB95)) ^ 0x6E4C39E8);
  *(_QWORD *)(v23 - 128) = a12;
  *(_DWORD *)(v23 - 120) = v24 + v22 + 1182;
  *(_DWORD *)(v23 - 136) = 690734872 - v24;
  sub_1AC1A0890((_DWORD *)(v23 - 136));
  v25 = 535753261 * (((~(v23 - 136) & 0x71E37D66) - (~(v23 - 136) | 0x71E37D67)) ^ 0x7B177348);
  *(_QWORD *)(v23 - 136) = a12;
  *(_DWORD *)(v23 - 128) = v25 + ((v19 << 6) & 0xF4DBBF80) + ((32 * v19) ^ 0xFA6DDFDE) + 536804838;
  *(_DWORD *)(v23 - 124) = v25 + v22 + 73;
  sub_1AC16E1C4(v23 - 136);
  *(_QWORD *)(v23 - 136) = a18;
  *(_QWORD *)(v23 - 128) = &STACK[0x48247A30869427CE];
  *(_DWORD *)(v23 - 120) = (v22 + 91) ^ (1734042137
                                       * ((((2 * (v23 - 136)) | 0x1BEBF396) - (v23 - 136) + 1913259573) ^ 0xD13B3A86));
  sub_1AC16E3FC(v23 - 136);
  *(_QWORD *)(v23 - 128) = a12;
  *(_QWORD *)(v23 - 120) = a18;
  *(_DWORD *)(v23 - 136) = (v22 - 158) ^ (1374699841
                                        * (((((v23 - 136) ^ 0x60944128 | 0xF4B9EC4) ^ 0xFFFFFFFE)
                                          - ((v23 - 136) ^ 0x5099404 | 0xF0B4613B)) ^ 0xF79632DA));
  v26 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * (v22 - 339)) - 12))(v23 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20
                                                      + 8
                                                      * ((39
                                                        * (*(_DWORD *)(v23 - 132) <= (((v22 ^ 0x116) + 822) ^ 0x15526C41 ^ (9 * (v22 ^ 0x116u))))) ^ v22))
                                          - 8))(v26);
}

uint64_t sub_1AC174EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  *(_DWORD *)(v20 - 120) = (v19 - 453) ^ (1734042137 * ((v20 - 136) ^ 0x5CCEC34D));
  *(_QWORD *)(v20 - 136) = v18;
  *(_QWORD *)(v20 - 128) = a17;
  v21 = sub_1AC16E3FC(v20 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17 + 8 * (((9 * (v19 ^ 0x33A) - 372) * (a10 < 1)) ^ v19))
                                          - 4))(v21);
}

uint64_t sub_1AC174F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t), uint64_t a18)
{
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  *(_DWORD *)(v19 - 120) = (v18 - 171) ^ (1734042137
                                        * ((2 * ((v19 - 136) & 0x7099D5F8) - (v19 - 136) - 1889129977) ^ 0xD3A8E94A));
  *(_QWORD *)(v19 - 136) = a18;
  *(_QWORD *)(v19 - 128) = a15;
  sub_1AC16E3FC(v19 - 136);
  v20 = 535753261 * ((2 * ((v19 - 136) & 0x59E62C60) - (v19 - 136) + 639226782) ^ 0x2CEDDDB1);
  *(_QWORD *)(v19 - 136) = a16;
  *(_DWORD *)(v19 - 128) = v20 + 443342277;
  *(_DWORD *)(v19 - 124) = v20 + v18 - 189;
  sub_1AC16E1C4(v19 - 136);
  *(_DWORD *)(v19 - 136) = (v18 - 420) ^ (1374699841 * ((v19 - 136) ^ 0x6DF41809));
  *(_QWORD *)(v19 - 128) = a16;
  *(_QWORD *)(v19 - 120) = a18;
  v21 = a17(v19 - 136);
  return (*(uint64_t (**)(uint64_t))(a14
                                            + 8
                                            * ((109
                                              * (((v18 - 1554344805) & 0x5CA56F17u)
                                               - 1229
                                               + *(_DWORD *)(v19 - 132)
                                               - 357723906 >= 0xFC3322D2)) ^ (v18 + 312))))(v21);
}

uint64_t sub_1AC1750DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  uint64_t v12;
  int v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8
                                        * ((55
                                          * ((((v13 ^ 0x611) + 270) ^ 0x90B6183A)
                                           + (a12 ^ 0xFF69FFDD)
                                           + 1876944627
                                           + ((2 * a12) & 0xFED3FFBA) > 0x7FFFFFFD)) ^ v13))
                            - 8))();
}

void sub_1AC175D38(uint64_t a1)
{
  int v1;
  unsigned int v2;
  _DWORD v4[4];
  unint64_t *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8) + 1759421093 * ((((2 * a1) | 0x1851ADD4) - a1 - 204003050) ^ 0xBF5566BE);
  v2 = 628203409 * (((v4 | 0x809EFB7E) - v4 + (v4 & 0x7F610480)) ^ 0x216F74D);
  v4[0] = v1 + v2 - 1882357516;
  v4[2] = v2 + 1252841699;
  v5 = &STACK[0x5800F43E2BD23C34];
  sub_1AC196A60((uint64_t)v4);
  __asm { BR              X13 }
}

uint64_t sub_1AC17614C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  v8 = v6 + ((13 * (v3 ^ 0x478)) ^ 0x42052EB);
  if (v8 <= 0x40)
    v8 = 64;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7
                                                                                          + 8
                                                                                          * ((-v4
                                                                                            - 69228511
                                                                                            - v5
                                                                                            + ((v3 + 1005840064) & 0xC40C17FB)
                                                                                            + v8 < 0xF) | v3))
                                                                              - 12))(4225738785, 4225738785, a3, 69227243, 4192169323);
}

uint64_t sub_1AC1761F0(int a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  _BOOL4 v12;

  v10 = a4 + v5 + v4;
  v11 = v10 + 314;
  if ((v10 + 314) <= 0x40)
    v11 = 64;
  v12 = !__CFADD__(v10 + 313, a1 + v7 + v8 + v11 + 954);
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (v6 ^ (503 * v12))) - (((v6 - 1102) | 0x40Cu) - 722) + 946))();
}

uint64_t sub_1AC176258@<X0>(uint64_t a1@<X5>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,arg28_1AC176258 a28)
{
  int v28;
  uint64_t v29;
  uint64_t v30;

  *(_OWORD *)(a1 + a2 + ((v28 + 44111123) & 0xFD5EE7FF ^ 0xFEB27EB3)) = *(_OWORD *)&a28.arr[4];
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v30 + 8 * ((77 * (((v29 + 1) & 0x1FFFFFFF0) == 16)) ^ v28))
                                          - 12))(4250855423);
}

void sub_1AC1762CC()
{
  JUMPOUT(0x1AC17628CLL);
}

uint64_t sub_1AC1762D8@<X0>(int a1@<W0>, uint64_t a2@<X5>, uint64_t a3@<X7>, int a4@<W8>)
{
  char v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  v8 = (a1 - 212) | 0xAE;
  *(_BYTE *)(a2 + (v8 ^ (v6 + 1007)) + v5) = v4;
  *(_BYTE *)(a2 + (a4 - 21856979)) = *(_BYTE *)(a3 + ((v8 ^ 0xFFFFFD01) & 0x100000001));
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (int)(v8 ^ 0x6CC)) - 8))();
}

uint64_t sub_1AC17789C@<X0>(uint64_t a1@<X5>, uint64_t a2@<X7>, int a3@<W8>)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(a1 + ((v3 + 487215671) & 0xE2F5AAFE ^ 0xFEB27D1A) + a3) = *(_BYTE *)(a2 + (v5 - 102797971));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (v3 ^ (1206 * ((v4 + 3) < 4)))) - 8))();
}

uint64_t sub_1AC177904@<X0>(uint64_t a1@<X5>, uint64_t a2@<X7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t (*a22)(uint64_t))
{
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v25 = (v22 - 714);
  *(_BYTE *)(a1 + (a3 - 21856977)) = *(_BYTE *)(a2 + ((v25 ^ 0xFFFFFFCBLL) & (v23 + 4192169326)));
  v26 = 3804331 * ((v24 - 168) ^ 0xFA9EF356);
  STACK[0x300] = a20;
  *(_DWORD *)(v24 - 168) = v26 + v25 + 1628;
  *(_DWORD *)(v24 - 164) = v26 ^ 0x47ED973F;
  v27 = sub_1AC18A930(v24 - 168);
  return a22(v27);
}

uint64_t sub_1AC17798C()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1857 * (v0 - 208464334 < (v2 ^ 0xCu))) ^ (v2 + 685))) - 8))();
}

uint64_t sub_1AC1779CC()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;

  v4 = v0;
  v5 = v1 + v0 + 26 * (v3 ^ 0x36) - 51;
  if (v5 <= 0x38)
    v5 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)((41 * (v5 - v4 + 208464334 < 8)) ^ v3 ^ 0x17C))
                            - (v3 ^ 0x3CLL)))();
}

uint64_t sub_1AC177A40@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + a2 + v4) = v6;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((1771 * (((v3 - 176) ^ 0x169) == (v2 & 0xFFFFFFFFFFFFFFF8))) ^ v3)))();
}

uint64_t sub_1AC177A88()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((v2 - 301) ^ 0x3B4) * (v0 == v1)) ^ v2)) - 8))();
}

uint64_t sub_1AC177AB8@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(a1 + a2 + v4) = v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (((2 * ((unint64_t)(a2 + 1 + v4) < 0x38)) | (16
                                                                                            * ((unint64_t)(a2 + 1 + v4) < 0x38))) ^ (v2 + 685)))
                            - 8))();
}

void sub_1AC177AEC()
{
  JUMPOUT(0x1AC176A94);
}

uint64_t sub_1AC177D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,__int16 a49,char a50,char a51,int a52)
{
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;

  if (BYTE4(a29) == 2)
    return (*(uint64_t (**)(uint64_t))(v52
                                              + 8
                                              * ((38 * (a52 == (a3 ^ 0x169) + 849733335)) ^ ((int)a3 + 297))))(a13);
  if (BYTE4(a29) == 1)
    return (*(uint64_t (**)(void))(v52
                                + 8 * ((536 * (a52 != ((((_DWORD)a3 + 293) | 0x22) ^ 0x32A5E94F))) ^ ((int)a3 + 327))))();
  v54 = ((_DWORD)a3 - 1152710773) & 0x44B4FC6F;
  v55 = ((unint64_t)&a35 ^ 0x7FF7DBFDFC763A55 ^ v54)
      + ((2 * (_QWORD)&a35) & 0xFFEFB7FBF8EC7CF0)
      - 0xC2013114502F7ALL;
  a51 = (v55 ^ 0xBA) * (v55 + 17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 + 8 * ((533 * ((v54 ^ 0x42FLL) == 91)) ^ v54)) - 4))(a1, a2, a3, a13, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40);
}

void sub_1AC178038()
{
  JUMPOUT(0x1AC17800CLL);
}

uint64_t sub_1AC178044@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t *v5;
  _BYTE v6[444];
  _BYTE *v7;
  uint64_t v8;
  unint64_t *v9;

  v2 = *v5;
  v3 = 235795823 * ((((2 * (v1 - 168)) | 0xEC2AD926) - (v1 - 168) + 166368109) ^ 0x62B825CA);
  *(_QWORD *)&v6[428] = v5[2];
  v9 = &STACK[0x4BBB3C48FF632858];
  v7 = v6;
  v8 = v2;
  *(_DWORD *)(v1 - 132) = (a1 + 1717) ^ v3;
  *(_DWORD *)(v1 - 160) = v3 + 1903733929;
  result = ((uint64_t (*)(uint64_t))*(&off_1E5B56B60 + a1 + 130))(v1 - 168);
  *((_DWORD *)v5 + 7) = *(_DWORD *)(v1 - 136);
  return result;
}

uint64_t sub_1AC178148(_DWORD *a1)
{
  unsigned int v1;

  v1 = 1374699841 * ((-2 - ((a1 | 0xA88133EE) + (~(_DWORD)a1 | 0x577ECC11))) ^ 0x3A8AD418);
  return (*((uint64_t (**)(void))*(&off_1E5B56B60 + (int)(*a1 ^ v1 ^ 0xBC))
          + (int)((((((*(_BYTE *)a1 ^ v1) + 29) ^ ((a1[4] ^ v1 ^ 0x6B1FA4C9) - 1 < 0x63)) & 1)
                 * (*a1 ^ v1 ^ 0xCD)) ^ *a1 ^ v1)))();
}

uint64_t sub_1AC1781E4()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v1 ^ 0x21A ^ (63 * ((v0 - 100) < 0x9C))))
                            - (((v1 ^ 0x21A) + 7) ^ 0x225u)
                            + 194))();
}

uint64_t sub_1AC178228(uint64_t result)
{
  int v1;

  *(_DWORD *)(*(_QWORD *)(result + 8) - 0x1F36B4636D64D9F5) = v1;
  return result;
}

void sub_1AC1782B4(uint64_t a1)
{
  int v1;
  _BOOL4 v4;

  v4 = *(_QWORD *)(a1 + 24) != 0x685C86573AC75C5FLL
    && *(_QWORD *)(a1 + 8) != 0x297960D88B36971ALL
    && *(_QWORD *)(a1 + 40) != 0x22BD6E97930F2962;
  v1 = *(_DWORD *)a1 - 1224239923 * ((-2 - ((~(_DWORD)a1 | 0x50890EB9) + (a1 | 0xAF76F146))) ^ 0xA23AF36E);
  __asm { BR              X9 }
}

uint64_t sub_1AC1783CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  int v18;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17
                                                                                          + 8
                                                                                          * ((1724
                                                                                            * (*(_DWORD *)(a17 - 0x685C86573AC75C47) == 1797235913)) ^ v18))
                                                                              - ((v18 + 993) ^ 0x44ELL)))(a1, a2, a3, a4, a5);
}

uint64_t sub_1AC178420(__n128 a1, __n128 a2, __n128 a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  int v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  unsigned int v25;
  _BOOL4 v26;

  v23.n128_u64[0] = 0x9494949494949494;
  v23.n128_u64[1] = 0x9494949494949494;
  v24.n128_u64[0] = 0x4A4A4A4A4A4A4A4ALL;
  v24.n128_u64[1] = 0x4A4A4A4A4A4A4A4ALL;
  v25 = v21 + 485 + *(_DWORD *)(a21 - 0x685C86573AC75C4FLL) - 1106812349;
  v26 = v25 < 0xA4FE17E;
  if (v26 == ((v21 - 951298895) & 0x38B3A76Du) + 173007125 > 0xA4FE17E)
    v26 = v25 > 0xA4FE17E;
  return (*(uint64_t (**)(__n128, __n128, __n128, __n128, __n128, __n128))(v22
                                                                                   + 8 * ((104 * v26) ^ (v21 + 485))))(a1, a2, a3, a4, v23, v24);
}

uint64_t sub_1AC178644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25)
{
  int v25;
  uint64_t v26;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v26 + 8 * (v25 - 1576)) - 8))(((((((v25 - 1489377498) & 0x58C616BF)
                                                                                           + 1455094566) & 0xA94503D7)
                                                                                         - 1527650580) & 0x5B0E17FF ^ 0x200001FF) & a25);
}

uint64_t sub_1AC17941C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _BOOL4 v20;

  *(_BYTE *)(*v18 + (v15 + v19)) = -54;
  if ((a15 - 1166358479) < 0xFDB58F8E != (v15 - 1289709784) < 0xFDB58F8E)
    v20 = (a15 - 1166358479) < 0xFDB58F8E;
  else
    v20 = v15 - 1289709784 < (a15 - 1166358479);
  return ((uint64_t (*)(void))(*(_QWORD *)(v17 + 8 * (v16 ^ (475 * v20))) - ((v16 - 187) | 0x29u) + 101))();
}

uint64_t sub_1AC17949C()
{
  unsigned int v0;
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  _BOOL4 v9;
  int v10;

  v9 = v4 < v0;
  v10 = v1 + 1;
  *(_BYTE *)(*v7 + (v10 + v8)) = 74;
  if (v9 == v10 + v2 < v0)
    v9 = v10 + v2 < v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((v9 * v5) ^ v3)) - 7 * (v3 ^ 0xF4u) + 101))();
}

void sub_1AC179500(int a1@<W8>)
{
  _QWORD *v1;
  unsigned int v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 0x297960D88B36971ALL) = *v1;
  *(_DWORD *)(v5 - 0x22BD6E97930F2962) = a1;
  *v1 = 0;
  *(_QWORD *)(v8 - 0x685C86573AC75C57) = 0x7CC64B607CC64B6;
  *v3 = 1279817996;
  v2 = (((2 * (*(_DWORD *)(v8 - 0x685C86573AC75C4BLL) & 0xFFFFFFFE ^ 0xC1378588)) | 0x87CFDDAE)
      - (*(_DWORD *)(v8 - 0x685C86573AC75C4BLL) & 0xFFFFFFFE ^ 0xC1378588)
      - 1139273431) ^ 0x6BA7FFD7;
  *(_DWORD *)(v8 - 0x685C86573AC75C4BLL) = (((2 * v2) & 0xF9416D58) - v2 + 56576338) ^ 0xEA28DDDB;
  *(_DWORD *)(v7 + 48) = *v6;
}

void sub_1AC179638()
{
  uint64_t v0;
  int v1;
  BOOL v2;
  char v3;

  v0 = MEMORY[0x1E0C80A78]();
  if (*(_QWORD *)v0)
    v2 = *(_QWORD *)(v0 + 16) == 0x3703560E774B811BLL;
  else
    v2 = 1;
  v3 = v2;
  v1 = *(_DWORD *)(v0 + 24) + 1374699841 * ((~(_DWORD)v0 & 0x2CB30A96 | v0 & 0xD34CF569) ^ 0x4147129F);
  __asm { BR              X8 }
}

uint64_t sub_1AC179748()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  int v6;

  *(_DWORD *)(v3 - 192) = (v1 + 358) ^ (1224239923
                                      * ((-2 - ((~(v3 - 192) | 0xC3FDFBE7) + ((v3 - 192) | 0x3C020418))) ^ 0x314E0630));
  STACK[0x260] = (unint64_t)&STACK[0x1F962A92975952C5];
  *(_QWORD *)(v3 - 184) = &STACK[0x1F962A92975952C5];
  STACK[0x258] = (unint64_t)&STACK[0x589C7105EC0C83A6];
  *(_QWORD *)(v3 - 168) = &STACK[0x589C7105EC0C83A6];
  *(_BYTE *)(v3 - 160) = (51 * ((-2 - ((~(v3 + 64) | 0xE7) + ((v3 + 64) | 0x18))) ^ 0x30)) ^ 0xC;
  v4 = *(uint64_t (**)(uint64_t))(v0 + 8 * (int)(v1 & 0xEA843298));
  STACK[0x250] = (unint64_t)v4;
  v5 = v4(v3 - 192);
  v6 = *(_DWORD *)(v3 - 176);
  LODWORD(STACK[0x5E4]) = v6;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * (((v6 == 1797235913) * (v1 ^ 0x208)) ^ v1))
                                          - ((v1 - 365) | 0x82u)
                                          + 182))(v5);
}

uint64_t sub_1AC179840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unint64_t *a33,uint64_t a34,__int128 a35,unint64_t a36,uint64_t a37,uint64_t a38,char *a39,unint64_t *a40,uint64_t a41,unint64_t a42,unint64_t *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,unint64_t *a48,uint64_t a49,unint64_t *a50,uint64_t a51,int32x4_t a52,int32x4_t a53,uint64_t a54,uint64_t a55,unint64_t a56,uint64_t a57,unint64_t *a58,unint64_t *a59,unint64_t *a60,unint64_t *a61,uint64_t a62,unint64_t a63)
{
  int a65;
  char *a66;
  unint64_t a67;
  uint64_t a68;
  char *a69;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t (*v84)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t, char *, unint64_t *, uint64_t, unint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *);

  STACK[0x230] = v73;
  a41 = v72;
  STACK[0x368] = 0;
  a33 = &STACK[0x53090DC262200990];
  STACK[0x3A8] = (unint64_t)&STACK[0x324CCD1CACB41144];
  STACK[0x3A0] = (unint64_t)&STACK[0x5FA3F43A3B4E93DE];
  STACK[0x398] = (unint64_t)&STACK[0x52155BFDA3867659];
  STACK[0x390] = (unint64_t)&STACK[0x1F589EA4AC42C389];
  a61 = &STACK[0x252BBBF887A1DA69];
  a60 = &STACK[0x13CB99128B0A52C7];
  a59 = &STACK[0x252BBBF887A1DAE9];
  a58 = &STACK[0x13CB99128B0A53A7];
  a43 = &STACK[0x2E08524DB1FD7C3A];
  a50 = &STACK[0x53090DC2622008C0];
  STACK[0x270] = (unint64_t)&STACK[0x252BBBF887A1DA51];
  STACK[0x268] = (unint64_t)&STACK[0x13CB99128B0A52F3];
  a48 = &STACK[0x1F36B4636D64DFF1];
  STACK[0x210] = (unint64_t)&STACK[0x1F36B4636D64DFD9];
  STACK[0x228] = (unint64_t)&STACK[0x297960D88B369B6A];
  STACK[0x220] = (unint64_t)&STACK[0x22BD6E97930F2E32];
  a40 = &STACK[0x70D8B5D37045A20C];
  v78 = *(_DWORD *)(v71 + 28);
  v79 = *(_DWORD *)(v71 + 32);
  a68 = v71;
  v80 = (v79 + v69);
  v81 = ((v70 ^ 0x4AA) - 1423236450) & 0x54D4DBF6;
  a36 = ((unint64_t)&STACK[0x4C8] ^ 0x2D77E76D5EFDFBEELL)
      - 0x2442E7200CD08884
      + ((2 * (_QWORD)&STACK[0x4C8]) & 0x5AEFCEDABDFBF7D0);
  a42 = ((unint64_t)&STACK[0x600] ^ 0xFD55D3BFFF77BFC4)
      + 0x7EAEFFFCBEFEE97CLL
      + ((2 * (_QWORD)&STACK[0x600]) & 0xFAABA77FFEEF7F80);
  LODWORD(a47) = 2 * v80;
  LODWORD(STACK[0x28C]) = (v80 ^ 0xE4B8B177) - 1882218500 + ((2 * v80) & 0xECEAC3BE ^ 0x248A8110);
  a56 = ((unint64_t)&STACK[0x5D0] ^ 0xFFE6EFFCFFFFCF77)
      + 0x3D1FF87FFDFDFE89
      + ((2 * (_QWORD)&STACK[0x5D0]) & 0xFFCDDFF9FFFF9EE0);
  *(int32x4_t *)&STACK[0x350] = vdupq_n_s32(0x7FFFFFFEu);
  LODWORD(STACK[0x208]) = (v75 - 477033691) & 0x1C6EF567;
  a35 = xmmword_1AC3B5850;
  HIDWORD(a51) = (v75 - 1406592356) & 0x53D6E6FF;
  a52 = vdupq_n_s32(0x6B1FA4C9u);
  a53 = vdupq_n_s32(0x6B1FA4D9u);
  LODWORD(STACK[0x200]) = (v75 - 938220545) & 0x37EC1FD6;
  STACK[0x2A8] = (unint64_t)&STACK[0x46C] % 0x25 + 16;
  HIDWORD(a47) = v79 + v69;
  LODWORD(STACK[0x218]) = v80 ^ 0x92CDD0A8;
  a69 = (char *)&a9 - 0x6F9DFF84F26E9E55;
  a66 = (char *)&a9 - 0x6F9DFF84F26E9E2ELL;
  a39 = (char *)&a9 - 0x6F9DFF84F26E9F03;
  LODWORD(STACK[0x2A4]) = (4 * v75) ^ 0x120;
  STACK[0x410] = v74 | 0xE3158D8989549E0CLL;
  v82 = 235795823 * (v74 ^ 0x8B0BAFE94AD4959);
  STACK[0x408] = v82;
  STACK[0x400] = v82 + 2903491633;
  LODWORD(v82) = (2 * v75) ^ 0x1D2;
  LODWORD(STACK[0x3E4]) = v82;
  LODWORD(STACK[0x3E0]) = v82 + 1728911169;
  STACK[0x3F8] = v74 | 0x33B7ABA507BA729BLL;
  *(int32x4_t *)&STACK[0x330] = vdupq_n_s32(0x701CA3EAu);
  *(int32x4_t *)&STACK[0x340] = vdupq_n_s32(0x5C0728FAu);
  *(int32x4_t *)&STACK[0x310] = vdupq_n_s32(0xB8FEC92A);
  *(int32x4_t *)&STACK[0x320] = vdupq_n_s32(0xB80E51F6);
  *(int32x4_t *)&STACK[0x300] = vdupq_n_s32(0xB80E51F5);
  STACK[0x2F8] = v74 | 0x7E99DE453316DED9;
  LODWORD(STACK[0x2F4]) = v75 - 1658038842;
  a65 = 2 * (v75 ^ 0x1DD);
  LODWORD(STACK[0x204]) = v75 ^ 0x21E;
  HIDWORD(a44) = v75 ^ 0x37C;
  HIDWORD(a37) = v78 - v69;
  LODWORD(STACK[0x21C]) = v78 - v69 + 588596349;
  LODWORD(STACK[0x20C]) = v75 + 1872430849;
  a67 = ((v81 - 0x107260C1021843A5) ^ (unint64_t)&STACK[0x4A8])
      + ((2 * (_QWORD)&STACK[0x4A8]) & 0xDF1B3E7DFBCF7FF0)
      + 0x1DF2FEFF77DF5001;
  a63 = a67 + 17;
  LODWORD(STACK[0x2B4]) = 2126645288;
  STACK[0x420] = 0x6F9DFF84F26EA555;
  LODWORD(STACK[0x3DC]) = v75 ^ 0xD4;
  a49 = (int)v75;
  HIDWORD(a34) = 836639572;
  a38 = 15;
  LODWORD(STACK[0x2F0]) = v75 ^ 0xBE;
  STACK[0x428] = v75;
  a57 = (int)v75;
  LODWORD(STACK[0x2B8]) = 94890206;
  v83 = (char *)&STACK[0x6A0] + STACK[0x420] + (v81 + 702) - 0x6F9DFF84F26EA535;
  LODWORD(STACK[0x5FC]) = v77;
  STACK[0x568] = (unint64_t)(v83 - 1634);
  v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t, char *, unint64_t *, uint64_t, unint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(_QWORD *)(v76 + 8 * (int)((92 * (*(_DWORD *)*(&off_1E5B56B60 + (int)v81 - 718) == 0)) ^ v81)) - ((((_DWORD)v81 - 410) | 0x14u) ^ 0x212));
  STACK[0x2D8] = (unint64_t)*(&off_1E5B56B60 + (int)(v81 ^ 0x31E));
  STACK[0x370] = (unint64_t)*(&off_1E5B56B60 + (int)v81 - 860) - 8;
  STACK[0x2D0] = (unint64_t)*(&off_1E5B56B60 + (int)(v81 ^ 0x376));
  return v84(v80, a2, a3, 2497773328, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           *((_QWORD *)&a35 + 1),
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52.i64[0],
           a52.i64[1],
           a53.i64[0],
           a53.i64[1],
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60);
}

uint64_t sub_1AC179F18()
{
  unint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  BOOL v9;

  STACK[0x248] = v0;
  LODWORD(STACK[0x2BC]) = v3;
  STACK[0x528] = 0;
  v6 = 235795823 * ((2 * ((v5 - 192) & 0x54638408) - (v5 - 192) - 1415808016) ^ 0x3F3132A9);
  *(_DWORD *)(v5 - 184) = -1065978750 - v6;
  *(_QWORD *)(v5 - 176) = STACK[0x268];
  *(_QWORD *)(v5 - 160) = STACK[0x270];
  *(_QWORD *)(v5 - 192) = 0x383D7D5E79B2ABB8;
  *(_DWORD *)(v5 - 168) = v6 + v2 - 1141;
  v7 = (uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * (v2 ^ 0x625)) - 12);
  STACK[0x280] = (unint64_t)v7;
  v8 = v7(v5 - 192);
  v9 = *(_DWORD *)(v5 - 152) == (v2 ^ 0x6D8) + 1797235727;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4
                                                      + 8
                                                      * ((((v2 - 35) ^ v9) & 1 | (8
                                                                                                 * (((v2 - 35) ^ v9) & 1))) ^ v2))
                                          - 8))(v8);
}

uint64_t sub_1AC17A00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  LODWORD(STACK[0x5FC]) = v4;
  STACK[0x498] = STACK[0x420];
  LODWORD(STACK[0x5E4]) = v4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5
                                                                       + 8
                                                                       * ((1542
                                                                         * (v4 == ((2 * (v3 + 591)) ^ 0x5B6 ^ (v6 + 782) ^ (6 * ((v3 + 591) ^ 0x316))))) ^ (v3 + 591))))(a1, a2, a3, 2497773328);
}

uint64_t sub_1AC17F270(unint64_t a1)
{
  int v1;
  unint64_t v2;
  uint64_t v3;

  STACK[0x498] = STACK[0x380] - 176;
  STACK[0x598] = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((v1 - 1258) * (v2 > a1)) | v1)) - 8))();
}

uint64_t sub_1AC17F314@<X0>(uint64_t a1@<X0>, int a2@<W4>, char a3@<W6>, char a4@<W7>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = (v8 + a2);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(v6 + (v11 & 0xF)) ^ *(_BYTE *)(v5 + (v11 & 0xF)) ^ *(_BYTE *)((v11 & 0xF) + a5 + 2) ^ ((*(_BYTE *)(v9 + v11) | a3) + (*(_BYTE *)(v9 + v11) | 0x68) - 9) ^ ((v11 & 0xF) * (v7 ^ a4));
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((159 * ((v8 + 1 + a2) > 0x14F)) ^ v7)) - 8))();
}

uint64_t sub_1AC17F38C@<X0>(uint64_t a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, char a4@<W3>, int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v13 = (v8 + a2);
  v14 = v13 & (v9 ^ 0xB8u ^ a3);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(v7 + v14) ^ *(_BYTE *)(v6 + v14) ^ *(_BYTE *)(v14 + a6 + 2) ^ ((*(_BYTE *)(v11 + v13) ^ 0x9D)
                                                                                                 + (v10 & (2 * *(_BYTE *)(v11 + v13)))
                                                                                                 + 89) ^ (v14 * a4);
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((183 * (v8 - 1 == a5)) ^ v9)) - 8))();
}

uint64_t sub_1AC17F404(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int8x16_t a35)
{
  int v35;
  int8x16_t *v36;
  uint64_t v37;
  int8x16_t *v38;

  v38 = (int8x16_t *)((char *)&STACK[0x6A0] + STACK[0x380] - 0x6F9DFF84F26EA535);
  v38[-12] = veorq_s8(*v36, a35);
  STACK[0x630] += 32;
  STACK[0x638] = a1;
  STACK[0x640] = a1;
  return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 + 8 * (((((v35 - 1450) | 0xC4) ^ 0xDB) * (&v38[-12] == (int8x16_t *)a1)) ^ v35))
                                                                                                - 12))(a1, a2, a3, a4, a5, 118);
}

uint64_t sub_1AC17F484(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  int v78;
  int v79;
  char v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned __int8 *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  unsigned __int8 v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  char v111;
  char v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  char v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  char v124;
  uint64_t v125;
  int v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  int v195;
  unsigned int v196;
  BOOL v197;
  int v198;
  int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  unint64_t v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  int v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  int v220;
  unsigned int v221;
  unsigned int v222;
  int v223;
  int v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  unsigned int v230;
  unsigned int v231;
  int v232;
  int v233;
  unsigned int v234;
  int v235;
  int v236;
  int v237;
  unsigned int v238;
  int v239;
  int v240;
  unsigned int v241;
  int v242;
  unsigned int v243;
  int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  int v249;
  int v250;
  unsigned int v251;
  int v252;
  int v253;
  unsigned int v254;
  unsigned int v255;
  int v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  int v260;
  int v261;
  unsigned int v262;
  int v263;
  int v264;
  int v265;
  unsigned int v266;
  int v267;
  int v268;
  unsigned int v269;
  unsigned int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  int v282;
  unint64_t v283;
  unsigned int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  char *v292;
  char *v293;
  unsigned int v294;
  unsigned int v295;
  uint64_t v296;
  int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  int v301;
  unsigned int v302;
  unsigned int v303;
  char *v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  int v308;
  unsigned int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  char *v328;
  char v329;
  int v330;
  unint64_t v331;
  unint64_t v332;
  int v333;
  unsigned int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  unsigned int v339;
  int v340;
  unint64_t v341;
  unsigned int v342;
  unsigned int v343;
  int v344;
  _BYTE *v346;
  unsigned __int8 *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  __int128 v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  int v360;
  int v361;
  uint64_t v362;

  v69 = v63 - 1254;
  v70 = (unsigned __int8 *)&STACK[0x1940] + v64;
  *v70 = *a1;
  *(_QWORD *)(v70 + 1) = *(_QWORD *)(a1 + 1);
  *(_DWORD *)(v70 + 9) = *(_DWORD *)(a1 + 9);
  *(_WORD *)(v70 + 13) = *(_WORD *)(a1 + 13);
  v70[15] = a1[15];
  v71 = *((_QWORD *)a1 + 1);
  *((_QWORD *)v70 + 2) = *(_QWORD *)a1;
  *((_QWORD *)v70 + 3) = v71;
  v72 = *(_QWORD *)(v67 + 8 * (v63 - 1304)) - 8;
  v73 = (v63 - 1575204748) & 0x5DE3B7FB;
  v74 = *(_QWORD *)(v67 + 8 * ((v63 - 1254) ^ 0x8B)) - 12;
  v75 = *(_QWORD *)(v67 + 8 * ((v63 - 1254) ^ 0xD9)) - 12;
  v76 = *(_BYTE *)(v75 + (v70[14] ^ (((v63 + 116) & 0xFB) + 108)));
  v77 = v70[8];
  v78 = *(unsigned __int8 *)(v74 + (v77 ^ v65));
  v79 = v77 ^ 0x34;
  LODWORD(v77) = ((v76 ^ (16 * v76)) ^ 0x23) << 8;
  v80 = *(_BYTE *)(v75 + (v70[10] ^ 0xCBLL));
  v81 = *(_QWORD *)(v67 + 8 * (v69 ^ 0x60));
  v82 = *(unsigned __int8 *)(v81 + (v70[1] ^ 0x1ALL));
  v83 = (v82 >> 1) ^ (((((v82 ^ 3) + (v82 & 0xD5 ^ 0xFE) + 1) ^ v82 & 0xDF) & 0xF0) >> 4) ^ 0x66;
  v84 = ((v70[3] ^ 0xB8) + *(_BYTE *)(v72 + (v70[3] ^ 0x54)) - 115) | ((v82 ^ 0xDE ^ (v83 - ((2 * v83) & 0x3C) + 30)) << 16);
  v85 = (((v78 + v79 - 22) ^ 0xF5) << 24) | (((v80 ^ (16 * v80)) ^ 0xEF) << 8) | ((v70[11] ^ 0x3E) + *(_BYTE *)(v72 + (v70[11] ^ 0xD2)) - 115);
  LOBYTE(v82) = *(_BYTE *)(v75 + (v70[6] ^ 0x2ELL));
  v86 = *(_BYTE *)(v81 + (v70[13] ^ 0x5BLL)) ^ 0xD6;
  v87 = ((v70[7] ^ v66) + *(_BYTE *)(v72 + (v70[7] ^ 0x7CLL)) - 115) | ((((v70[4] ^ 0x13)
                                                                                         + *(unsigned __int8 *)(v74 + (v70[4] ^ 0x42))
                                                                                         - 22) ^ 0xE6) << 24) | (((v82 ^ (16 * v82)) ^ 0xF3) << 8);
  v88 = *(unsigned __int8 *)(v81 + (v70[13] ^ 0x5BLL)) ^ 0xFFFFFFD6 ^ (v86 >> 4) ^ (v86 >> 1);
  LODWORD(v77) = v77 & 0xFF00FFFF | ((v88 - ((2 * v88) & 0x2E) + 23) << 16);
  LOBYTE(v83) = *(_BYTE *)(v81 + (v70[5] ^ 0xEDLL));
  v89 = v84 | (((*(unsigned __int8 *)(v74 + (*v70 ^ 0x81)) + (*v70 ^ 0xD0) - 22) ^ 0x3C) << 24);
  v90 = ((v83 ^ 0xD6) >> 4) ^ ((v83 ^ 0xD6) >> 1);
  v348 = v81;
  v350 = v74;
  v351 = v72;
  v91 = v85 & 0xFF00FFFF | (((*(_BYTE *)(v81 + (v70[9] ^ 0x38)) ^ ((*(_BYTE *)(v81 + (v70[9] ^ 0x38)) ^ 0xD6) >> 4) ^ ((*(_BYTE *)(v81 + (v70[9] ^ 0x38)) ^ 0xD6) >> 1)) ^ 0x7D) << 16);
  v349 = v75;
  v92 = v89 & 0xFFFF00FF | (((*(_BYTE *)(v75 + (v70[2] ^ 0x22)) ^ (16
                                                                                    * *(_BYTE *)(v75 + (v70[2] ^ 0x22)))) ^ 0xDD) << 8);
  LODWORD(STACK[0x418]) = (v77 & 0xFFFFFF00 | ((((v70[12] ^ 0x13) + *(unsigned __int8 *)(v74 + (v70[12] ^ 0x42)) - 22) ^ 0xE6) << 24) | (*(_BYTE *)(v72 + (v70[15] ^ 0x38)) + (v70[15] ^ 0xD4) - 115)) ^ 0x945BD5CD;
  LODWORD(STACK[0x388]) = v92 ^ 0x950A8FCC;
  v93 = (unsigned __int8 *)STACK[0x638];
  LODWORD(STACK[0x290]) = (v87 & 0xFF00FFFF | ((v83 ^ 0x6C ^ (v90
                                                                                              - ((2 * v90) & 0x2A)
                                                                                              - 107)) << 16)) ^ 0xB33288CB;
  LODWORD(STACK[0x3B8]) = v91 ^ 0x2BD0BF39;
  v346 = (_BYTE *)STACK[0x640];
  v347 = v93;
  STACK[0x3D0] = 14;
  v94 = v75;
  v95 = *(unsigned __int8 *)(v75 + (v93[14] ^ 0xD9));
  STACK[0x2E0] = 4;
  v96 = v93[4];
  HIDWORD(a16) = v73 - 505;
  HIDWORD(v356) = (v73 - 1740317211) & 0x67BB1CC4;
  v97 = (16 * v95 - ((v95 << ((v73 + 7) ^ 0x24)) & (HIDWORD(v356) ^ 0x64)) + 80) ^ v95;
  LOBYTE(v95) = v96 ^ 0xB7;
  v98 = v72;
  LOBYTE(v96) = *(_BYTE *)(v74 + (v96 ^ 0xE6));
  STACK[0x420] = 15;
  v99 = v93[15];
  v100 = v96 + v95 - 22;
  if ((v99 & 0x20) != 0)
    v101 = -32;
  else
    v101 = 32;
  v102 = (v101 + v99);
  v103 = *(unsigned __int8 *)(v72 + (v102 ^ 0xDD));
  STACK[0x3C8] = 6;
  v361 = v103 + (v102 ^ 0x31);
  v104 = *(unsigned __int8 *)(v75 + (v93[6] ^ 0x51));
  STACK[0x378] = 12;
  STACK[0x280] = 0;
  HIDWORD(v105) = v104 ^ 0x3F;
  LODWORD(v105) = (v104 ^ 0x3F ^ (16 * v104 - ((32 * v104) & 0xBF) + 80)) & 0xF8;
  v106 = ((v105 >> 3) | ((unint64_t)(v100 ^ 0xE5u) << 13)) ^ 0x58F620A6;
  v107 = (v106 >> 21) | ((_DWORD)v106 << 11);
  v360 = *(unsigned __int8 *)(v74 + (v93[12] ^ 0xF7) - 2 * ((v93[12] ^ 0xF7) & 0xAEu) + 174) - (v93[12] ^ 0xF7);
  v108 = *v93;
  STACK[0x380] = 3;
  v109 = v93[3];
  v110 = *(unsigned __int8 *)(v74 + (v108 ^ 0xD8)) + (v108 ^ a6) - 2 * (v108 ^ a6);
  STACK[0x3B0] = 8;
  v358 = (v109 ^ 0xFFFFFFBB) + *(unsigned __int8 *)(v72 + (v109 ^ 0x57));
  v111 = (v93[8] ^ 0xA7) + *(_BYTE *)(v74 + (v93[8] ^ 0xF6));
  STACK[0x2E8] = 7;
  v112 = (v93[7] ^ 0xE9) + *(_BYTE *)(v72 + (v93[7] ^ 5));
  STACK[0x278] = 13;
  LODWORD(v109) = *(unsigned __int8 *)(v348 + (v93[13] ^ 0x12));
  v113 = v109 ^ ((unint64_t)(((v109 ^ 0xD6) >> 3) & 4 ^ v109 & 0xA4 | ((v109 ^ 0xD6) >> 3) & 0xFB ^ (v109 ^ 0xFFFFFFD6) & 0x5A) >> 1);
  LOBYTE(v109) = *(_BYTE *)(v348 + (v93[5] ^ 0x9CLL));
  v114 = ((v109 ^ 0xD6) >> 4) ^ ((v109 ^ 0xD6) >> 1);
  v115 = (v112 - 115) | ((v109 ^ 0xE6 ^ (v114
                                                                                          - ((2 * v114) & 0x2A)
                                                                                          - 107)) << 16);
  STACK[0x240] = 9;
  v116 = *(unsigned __int8 *)(v348 + (v93[9] ^ a6));
  v117 = (v116 ^ 0xD6) >> 3;
  v118 = 114 - ((v116 & 8 | (16 * ((v116 & 8) != 0))) ^ 0x6F);
  if (((((v116 & 8 | (16 * (((v116 & 8) >> 3) & 1))) ^ 0x6F) + 17) & v117) == 0)
    v118 = ((v116 & 8 | (16 * ((v116 & 8) != 0))) ^ 0x6F) - 108;
  STACK[0x238] = 10;
  v119 = v116 ^ ((((v117 + v118 - 3) ^ (v116 ^ 0xD6) & 0xF7) & 0xFE) >> 1);
  v120 = *(_BYTE *)(v348 + (v93[1] ^ 0xCFLL)) ^ 0xD6;
  v121 = *(unsigned __int8 *)(v348 + (v93[1] ^ 0xCFLL)) ^ 0xFFFFFFD6 ^ (v120 >> 4) ^ (v120 >> 1);
  v122 = *(_QWORD *)(v67 + 8 * (v73 ^ 0x682)) - 8;
  LODWORD(v356) = v113;
  v123 = *(_DWORD *)(v122 + 4 * (v113 ^ 0xE1u));
  v124 = *(_BYTE *)(v75 + (v93[10] ^ 0xFBLL));
  v125 = *(_QWORD *)(v67 + 8 * (v73 - 1375)) - 4;
  *(_QWORD *)((char *)&v355 + 4) = __PAIR64__(v121, (v124 ^ (16 * v124)) ^ 0xE9u);
  v126 = *(_DWORD *)(v125 + 4 * ((v124 ^ (16 * v124)) ^ 0x66u));
  HIDWORD(v127) = v126 ^ 0x8C6F;
  LODWORD(v127) = v126 ^ 0x8E6F0000;
  LODWORD(v355) = v110 - 23;
  HIDWORD(v362) = v73;
  v128 = *(_QWORD *)(v67 + 8 * (v73 - 1453)) - 12;
  v129 = (v127 >> 16) ^ *(_DWORD *)(v128 + 4 * ((v110 - 23) ^ 0xF9u)) ^ (16 * (v123 ^ 0x9AB43AB9)
                                                                                          + 903386454
                                                                                          - ((32 * (v123 ^ 0x9AB43AB9)) & 0x6BB12AA0));
  HIDWORD(v354) = v115 ^ v107;
  v130 = v115 ^ v107 ^ 0xDD03A24B;
  v131 = *(_QWORD *)(v67 + 8 * (v73 ^ 0x61D));
  LODWORD(v357) = v97;
  v132 = *(_DWORD *)(v125 + 4 * (v97 ^ 0x71u));
  v133 = *(_DWORD *)(v131 + 4 * (v130 ^ 0x33u)) ^ v123 ^ (v129 - 329959154 - ((2 * v129) & 0xD8AA721C));
  HIDWORD(v127) = v132 ^ 0x8C6F;
  LODWORD(v127) = v132 ^ 0x8E6F0000;
  v134 = *(_DWORD *)(v122 + 4 * (v121 ^ 0xBFu)) ^ 0x9AB43AB9;
  v135 = (v127 >> 16) ^ (16 * v134 + 903386454 - ((32 * v134) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * HIBYTE(v130));
  HIDWORD(v353) = (*(_BYTE *)(v98 + (v93[11] ^ 0x12)) + (v93[11] ^ 0xFE) - 115);
  v136 = *(_DWORD *)(v131 + 4 * (HIDWORD(v353) ^ 0xB9u)) ^ v134 ^ (v135 - 329959154 - ((2 * v135) & 0xD8AA721C));
  v137 = *(_DWORD *)(v122 + 4 * BYTE2(v130)) ^ 0x9AB43AB9;
  v138 = *(unsigned __int8 *)(v94 + (v93[2] ^ 0x26)) ^ 0xFFFFFFE8;
  v139 = v138 ^ (16 * v138);
  v140 = *(_DWORD *)(v125 + 4 * (v139 ^ 0xFBu));
  HIDWORD(v127) = v140 ^ 0x8C6F;
  LODWORD(v127) = v140 ^ 0x8E6F0000;
  HIDWORD(v352) = (v111 - ((2 * v111 + 84) & 0x4E) + 17);
  LODWORD(v353) = v139;
  v141 = (v127 >> 16) ^ *(_DWORD *)(v128 + 4 * (HIDWORD(v352) ^ 0x40u)) ^ (16 * v137
                                                                           + 903386454
                                                                           - ((32 * v137) & 0x6BB12AA0));
  LODWORD(v354) = v361 - 115;
  v142 = *(_DWORD *)(v131 + 4 * ((v361 - 115) ^ 0xEBu)) ^ v137 ^ (v141
                                                                                   - 329959154
                                                                                   - ((2 * v141) & 0xD8AA721C));
  HIDWORD(v355) = v119;
  v143 = *(_DWORD *)(v122 + 4 * (v119 ^ 0xAAu)) ^ 0x9AB43AB9;
  v144 = *(_DWORD *)(v125 + 4 * (BYTE1(v107) ^ 0x31u));
  HIDWORD(v127) = v144 ^ 0x8C6F;
  LODWORD(v127) = v144 ^ 0x8E6F0000;
  LODWORD(v352) = v360 - 23;
  v145 = (v127 >> 16) ^ *(_DWORD *)(v128 + 4 * ((v360 - 23) ^ 0xF7u)) ^ (16 * v143
                                                                                          + 903386454
                                                                                          - ((32 * v143) & 0x6BB12AA0));
  HIDWORD(a23) = v358 - 115;
  v146 = *(_DWORD *)(v131 + 4 * ((v358 - 115) ^ 0x33u)) ^ v143 ^ (v145
                                                                                   - 329959154
                                                                                   - ((2 * v145) & 0xD8AA721C));
  v147 = *(_DWORD *)(v122 + 4 * (BYTE2(v146) ^ 0xBBu)) ^ 0x9AB43AB9;
  v148 = *(_DWORD *)(v125 + 4 * (BYTE1(v142) ^ 0xF4u));
  HIDWORD(v127) = v148 ^ 0x8C6F;
  LODWORD(v127) = v148 ^ 0x8E6F0000;
  BYTE1(v148) = BYTE1(v136) ^ 0xAD;
  v149 = v147 ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v133) ^ 0xCD)) ^ *(_DWORD *)(v131
                                                                            + 4 * (v136 ^ 0xDBu)) ^ (16 * v147 + 903386454 - ((32 * v147) & 0x6BB12AA0)) ^ (v127 >> 16);
  v150 = *(_DWORD *)(v122 + 4 * (BYTE2(v133) ^ 0x58u));
  v151 = *(_DWORD *)(v125 + 4 * ((unsigned __int16)(v146 ^ 0x22E) >> 8));
  HIDWORD(v127) = v151 ^ 0x8C6F;
  LODWORD(v127) = v151 ^ 0x8E6F0000;
  v152 = (16 * (v150 ^ 0x9AB43AB9) + 903386454 - ((32 * (v150 ^ 0x9AB43AB9)) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * ((v136 ^ 0xF15ADDB) >> 24)) ^ (v127 >> 16);
  v153 = *(_DWORD *)(v131 + 4 * (v142 ^ 0x80u)) ^ v150 ^ (v152 - 329959154 - ((2 * v152) & 0xD8AA721C));
  v154 = *(_DWORD *)(v122 + 4 * (BYTE2(v136) ^ 0xD6u)) ^ 0x9AB43AB9;
  v155 = *(_DWORD *)(v125 + 4 * (BYTE1(v133) ^ 0xDCu));
  HIDWORD(v127) = v155 ^ 0x8C6F;
  LODWORD(v127) = v155 ^ 0x8E6F0000;
  v156 = *(_DWORD *)(v128 + 4 * (HIBYTE(v142) ^ 0x19));
  v157 = (16 * v154 + 903386454 - ((32 * v154) & 0x6BB12AA0)) ^ v156;
  v158 = *(_DWORD *)(v131 + 4 * (v146 ^ 0x2Eu)) ^ v154 ^ (v127 >> 16);
  v159 = *(_DWORD *)(v122 + 4 * (BYTE2(v142) ^ 0x32u));
  v160 = *(_DWORD *)(v125 + 4 * BYTE1(v148));
  HIDWORD(v127) = v160 ^ 0x8C6F;
  LODWORD(v127) = v160 ^ 0x8E6F0000;
  v161 = (v127 >> 16) ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v146) ^ 0xBD)) ^ (16 * (v159 ^ 0x9AB43AB9)
                                                                         + 903386454
                                                                         - ((32 * (v159 ^ 0x9AB43AB9)) & 0x6BB12AA0));
  v162 = v159 ^ *(_DWORD *)(v131 + 4 * (v133 ^ 0x19u)) ^ 0xEB7DEC7D ^ (v161
                                                                                        - 329959154
                                                                                        - ((2 * v161) & 0xD8AA721C));
  v163 = v162
       - ((2 * v162) & 0x5F186BF6)
       + 797718011
       - ((2 * (v162 - ((2 * v162) & 0x5F186BF6) + 797718011)) & 0x8F40926C)
       - 945796810;
  v164 = *(_DWORD *)(v122 + 4 * (BYTE2(v163) ^ 0x63u));
  v165 = v158 ^ (v157 - 329959154 - 2 * (v157 & 0x6C55390F ^ v156 & 1));
  BYTE2(v162) = BYTE2(v165) ^ 0xEB;
  v166 = *(_DWORD *)(v125 + 4 * ((unsigned __int16)(v165 ^ 0xDFF9) >> 8));
  v167 = (16 * (v164 ^ 0x9AB43AB9) + 903386454 - ((32 * (v164 ^ 0x9AB43AB9)) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v149) ^ 0x7A)) ^ (((v166 ^ 0x8E6F8C6F) >> (v149 & 0x10) >> (v149 & 0x10 ^ 0x10)) + ((v166 << 16) ^ 0x8C6F0000));
  v168 = *(_DWORD *)(v131 + 4 * (v153 ^ 0x60u)) ^ v164 ^ (v167 - 329959154 - ((2 * v167) & 0xD8AA721C));
  LOWORD(v164) = v149 ^ 0xED2E;
  v169 = *(_DWORD *)(v122 + 4 * ((v149 ^ 0x930FED2E) >> 16)) ^ 0x9AB43AB9;
  v170 = *(_DWORD *)(v125 + 4 * (BYTE1(v163) ^ 0xDAu));
  HIDWORD(v127) = v170 ^ 0x8C6F;
  LODWORD(v127) = v170 ^ 0x8E6F0000;
  v171 = (16 * v169 + 903386455 + ~((32 * v169) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v153) ^ 0xD1)) ^ (v127 >> 16);
  v172 = *(_DWORD *)(v131 + 4 * (v165 ^ 0xF9u)) ^ v169 ^ (v171 - 329959154 - ((2 * v171) & 0xD8AA721C));
  v173 = *(_DWORD *)(v128 + 4 * (HIBYTE(v165) ^ 5));
  HIDWORD(v127) = v173 ^ 0x156;
  LODWORD(v127) = v173 ^ 0x35D89400;
  v174 = v127 >> 10;
  v175 = *(_DWORD *)(v125 + 4 * BYTE1(v164));
  HIDWORD(v127) = v175 ^ 0x8C6F;
  LODWORD(v127) = v175 ^ 0x8E6F0000;
  v176 = *(_DWORD *)(v122 + 4 * (BYTE2(v153) ^ 0x81u)) ^ 0x9AB43AB9;
  v177 = ((v174 ^ 0x25EB099C) << 10) ^ (16 * v176) ^ ((v174 ^ 0x25EB099Cu) >> 22);
  v178 = *(_DWORD *)(v131 + 4 * (v163 ^ 5u)) ^ v176 ^ (v127 >> 16);
  v179 = *(_DWORD *)(v125 + 4 * (BYTE1(v153) ^ 0xF7u));
  HIDWORD(v127) = v179 ^ 0x8C6F;
  LODWORD(v127) = v179 ^ 0x8E6F0000;
  v180 = v178 ^ (v177 - 329959154 - ((2 * v177) & 0xD8AA721C));
  v181 = *(_DWORD *)(v122 + 4 * BYTE2(v162)) ^ 0x9AB43AB9;
  v182 = (v127 >> 16) ^ (16 * v181 + 903386454 - ((32 * v181) & 0x6BB12AA0)) ^ *(_DWORD *)(v128
                                                                                         + 4 * (HIBYTE(v163) ^ 0x2E));
  v183 = *(_DWORD *)(v131 + 4 * (v164 ^ 0x33u)) ^ v181 ^ (v182 - 329959154 - ((2 * v182) & 0xD8AA721C));
  v184 = *(_DWORD *)(v122 + 4 * (BYTE2(v183) ^ 0x62u)) ^ 0x9AB43AB9;
  v185 = (16 * v184 + 903386454 - ((32 * v184) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v168) ^ 0x47));
  v186 = v180 ^ 0xF1F7E4A6;
  v187 = *(_DWORD *)(v125 + 4 * ((unsigned __int16)(v180 ^ 0xE4A6) >> 8));
  HIDWORD(v127) = v187 ^ 0x8C6F;
  LODWORD(v127) = v187 ^ 0x8E6F0000;
  v188 = *(_DWORD *)(v131 + 4 * (v172 ^ 0x68u)) ^ v184 ^ (v127 >> 16) ^ (v185
                                                                                          - 329959154
                                                                                          - ((2 * v185) & 0xD8AA721C));
  v189 = *(_DWORD *)(v122 + 4 * (BYTE2(v168) ^ 0xEFu)) ^ 0x9AB43AB9;
  v190 = *(_DWORD *)(v125 + 4 * ((unsigned __int16)(v183 ^ 0x2957) >> 8));
  HIDWORD(v127) = v190 ^ 0x8C6F;
  LODWORD(v127) = v190 ^ 0x8E6F0000;
  v191 = (16 * v189 + 903386454 - ((32 * v189) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v172) ^ 0xCE)) ^ (v127 >> 16);
  v192 = *(_DWORD *)(v131 + 4 * (v180 ^ 0x15u)) ^ v189 ^ (v191 - 329959154 - ((2 * v191) & 0xD8AA721C));
  v193 = *(_DWORD *)(v122 + 4 * (BYTE2(v172) ^ 0x60u)) ^ 0x9AB43AB9;
  v194 = *(_DWORD *)(v125 + 4 * (BYTE1(v168) ^ 0xA1u));
  HIDWORD(v127) = v194 ^ 0x8C6F;
  LODWORD(v127) = v194 ^ 0x8E6F0000;
  v195 = (16 * v193 + 903386454 - ((32 * v193) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * HIBYTE(v186)) ^ (v127 >> 16);
  v196 = *(_DWORD *)(v131 + 4 * (v183 ^ 0x57u)) ^ v193 ^ (v195 - 329959154 - ((2 * v195) & 0xD8AA721C));
  v197 = (v172 & 0x1000) == 0;
  v198 = BYTE1(v172) ^ 0xC;
  if (v197)
    v199 = 16;
  else
    v199 = -16;
  v200 = *(_DWORD *)(v122 + 4 * BYTE2(v186)) ^ 0x9AB43AB9;
  v201 = *(_DWORD *)(v125 + 4 * ((v198 + v199) ^ 0x83u));
  v202 = *(_DWORD *)(v128 + 4 * (HIBYTE(v183) ^ 0xA1)) ^ HIWORD(v201) ^ (v201 << 16) ^ (16 * v200
                                                                                        + 903386454
                                                                                        - ((32 * v200) & 0x6BB12AA0)) ^ 0x8C6F8E6F;
  v203 = *(_DWORD *)(v131 + 4 * (v168 ^ 0xDAu)) ^ v200 ^ (v202 - 329959154 - ((2 * v202) & 0xD8AA721C));
  v204 = v203 ^ 0xEFBC3B44;
  v205 = *(_DWORD *)(v122 + 4 * ((v203 ^ 0xEFBC3B44) >> 16)) ^ 0x9AB43AB9;
  v206 = *(_DWORD *)(v125 + 4 * ((unsigned __int16)(v196 ^ 0x8D48) >> 8));
  HIDWORD(v207) = v206 ^ 0x8C6F;
  LODWORD(v207) = v206 ^ 0x8E6F0000;
  v208 = (v207 >> 16) ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v188) ^ 0xCC)) ^ (16 * v205
                                                                         + 903386454
                                                                         - ((32 * v205) & 0x6BB12AA0));
  v209 = *(_DWORD *)(v131 + 4 * (v192 ^ 0xA9u)) ^ v205 ^ (v208 - 329959154 - ((2 * v208) & 0xD8AA721C));
  LOWORD(v208) = v188 ^ 0xD583;
  v210 = *(_DWORD *)(v122 + 4 * (((v188 ^ 0x255FD583) >> 16) ^ 0xC3u)) ^ 0x9AB43AB9;
  v211 = *(_DWORD *)(v125 + 4 * ((unsigned __int16)(v203 ^ 0x3B44) >> 8));
  HIDWORD(v207) = v211 ^ 0x8C6F;
  LODWORD(v207) = v211 ^ 0x8E6F0000;
  v212 = (v207 >> 16) ^ *(_DWORD *)(v128 + 4 * HIBYTE(v192)) ^ (16 * v210 + 903386454 - ((32 * v210) & 0x6BB12AA0));
  v213 = *(_DWORD *)(v131 + 4 * (v196 ^ 0x48u)) ^ v210 ^ (v212 - 329959154 - ((2 * v212) & 0xD8AA721C));
  v214 = *(_DWORD *)(v122 + 4 * ((v192 ^ 0xE93411A9) >> 16)) ^ 0x9AB43AB9;
  v215 = *(_DWORD *)(v125 + 4 * BYTE1(v208));
  HIDWORD(v207) = v215 ^ 0x8C6F;
  LODWORD(v207) = v215 ^ 0x8E6F0000;
  v216 = (16 * v214 + 903386454 - ((32 * v214) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * ((v196 ^ 0x807D8D48) >> 24)) ^ (v207 >> 16);
  v217 = *(_DWORD *)(v131 + 4 * (v203 ^ 0x77u)) ^ v214 ^ (v216 - 329959154 - ((2 * v216) & 0xD8AA721C));
  v218 = *(_DWORD *)(v122 + 4 * (BYTE2(v196) ^ 0xBEu)) ^ 0x9AB43AB9;
  v219 = *(_DWORD *)(v125 + 4 * (BYTE1(v192) ^ 0x82u));
  HIDWORD(v207) = v219 ^ 0x8C6F;
  LODWORD(v207) = v219 ^ 0x8E6F0000;
  v220 = (v207 >> 16) ^ *(_DWORD *)(v128 + 4 * HIBYTE(v204)) ^ (16 * v218 + 903386454 - ((32 * v218) & 0x6BB12AA0));
  v221 = *(_DWORD *)(v131 + 4 * v208) ^ v218 ^ (v220 - 329959154 - ((2 * v220) & 0xD8AA721C));
  v222 = *(_DWORD *)(v122 + 4 * ((v221 ^ 0x950DA39D) >> 16)) ^ 0x9AB43AB9;
  v223 = (16 * v222 + 903386454 - ((32 * v222) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * ((v209 ^ 0x11521BCA) >> 24));
  v224 = *(_DWORD *)(v125 + 4 * (BYTE1(v217) ^ 0x89u));
  HIDWORD(v207) = v224 ^ 0x8C6F;
  LODWORD(v207) = v224 ^ 0x8E6F0000;
  v225 = v223 - 329959154 - ((2 * v223) & 0xD8AA721C);
  BYTE1(v223) = BYTE1(v213) ^ 0xD1;
  v226 = *(_DWORD *)(v131 + 4 * (v213 ^ 0x88u)) ^ v222 ^ (v207 >> 16) ^ 0x71C9D6C4 ^ v225;
  v227 = *(_DWORD *)(v122 + 4 * ((v209 ^ 0x11521BCA) >> 16));
  v228 = *(_DWORD *)(v125 + 4 * (BYTE1(v221) ^ 0x30u));
  HIDWORD(v207) = v228 ^ 0x8C6F;
  LODWORD(v207) = v228 ^ 0x8E6F0000;
  v229 = (16 * (v227 ^ 0x9AB43AB9) + 903386454 - ((32 * (v227 ^ 0x9AB43AB9)) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v213) ^ 0xDF)) ^ (v207 >> 16);
  v217 ^= 0x7A851A70u;
  v230 = *(_DWORD *)(v131 + 4 * (v217 ^ 0x33u)) ^ v227 ^ (v229 - 329959154 - ((2 * v229) & 0xD8AA721C));
  v231 = *(_DWORD *)(v122 + 4 * (BYTE2(v213) ^ 0xA7u)) ^ 0x9AB43AB9;
  v232 = *(_DWORD *)(v125 + 4 * (BYTE1(v209) ^ 0x88u));
  HIDWORD(v207) = v232 ^ 0x8C6F;
  LODWORD(v207) = v232 ^ 0x8E6F0000;
  v233 = (16 * v231 + 903386454 - ((32 * v231) & 0x6BB12AA0)) ^ *(_DWORD *)(v128
                                                                          + 4
                                                                          * ((HIBYTE(v217) ^ -HIBYTE(v217) ^ ((HIBYTE(v217) ^ 0xFFFFFF16) + 234))
                                                                           + 233)) ^ (v207 >> 16);
  v234 = *(_DWORD *)(v131 + 4 * (v221 ^ 0x9Du)) ^ v231 ^ (v233 - 329959154 - ((2 * v233) & 0xD8AA721C));
  v235 = *(_DWORD *)(v122 + 4 * BYTE2(v217));
  v236 = *(_DWORD *)(v125 + 4 * BYTE1(v223));
  HIDWORD(v207) = v236 ^ 0x8C6F;
  LODWORD(v207) = v236 ^ 0x8E6F0000;
  v237 = (v207 >> 16) ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v221) ^ 0x7C)) ^ (16 * (v235 ^ 0x9AB43AB9)
                                                                         + 903386454
                                                                         - ((32 * (v235 ^ 0x9AB43AB9)) & 0x6BB12AA0));
  v238 = *(_DWORD *)(v131 + 4 * (v209 ^ 0xF9u)) ^ v235 ^ (v237 - 329959154 - ((2 * v237) & 0xD8AA721C));
  v239 = *(_DWORD *)(v122 + 4 * (BYTE2(v238) ^ 0x33u));
  v240 = *(_DWORD *)(v125 + 4 * ((unsigned __int16)(v234 ^ 0xDE69) >> 8));
  HIDWORD(v207) = v240 ^ 0x8C6F;
  LODWORD(v207) = v240 ^ 0x8E6F0000;
  v241 = v226 - ((2 * v226) & 0x60E3DF32) - 1334710375;
  v242 = (v207 >> 16) ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v241) ^ 0xD9)) ^ (16 * (v239 ^ 0x9AB43AB9)
                                                                         + 903386454
                                                                         - ((32 * (v239 ^ 0x9AB43AB9)) & 0x6BB12AA0));
  v243 = *(_DWORD *)(v131 + 4 * (v230 ^ 0x6Au)) ^ v239 ^ (v242 - 329959154 - ((2 * v242) & 0xD8AA721C));
  v244 = *(_DWORD *)(v125 + 4 * (BYTE1(v238) ^ 5u));
  HIDWORD(v207) = v244 ^ 0x8C6F;
  LODWORD(v207) = v244 ^ 0x8E6F0000;
  v245 = *(_DWORD *)(v122 + 4 * (BYTE2(v241) ^ 0x1Bu)) ^ 0x9AB43AB9;
  v246 = v245 ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v230) ^ 0x47)) ^ *(_DWORD *)(v131
                                                                            + 4 * (v234 ^ 0x69u)) ^ ((v207 >> 16) - 329959154 - ((2 * (v207 >> 16)) & 0xD8AA721C)) ^ (16 * v245 + 903386454 - ((32 * v245) & 0x6BB12AA0));
  v247 = *(_DWORD *)(v122 + 4 * (BYTE2(v230) ^ 0x4Eu)) ^ 0x9AB43AB9;
  v248 = (16 * v247 + 903386455 + ~((32 * v247) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * ((v234 ^ 0x5FEEDE69) >> 24));
  v249 = *(_DWORD *)(v125 + 4 * (BYTE1(v241) ^ 0x84u));
  HIDWORD(v207) = v249 ^ 0x8C6F;
  LODWORD(v207) = v249 ^ 0x8E6F0000;
  v250 = *(_DWORD *)(v131
                   + 4
                   * ((((v238 ^ 0xF6) + (v238 ^ 0xFFFFFF3A) + 1) ^ 0xFFFFFFFE)
                    + (v238 ^ 0xF6))) ^ v247 ^ ((v248 ^ (v207 >> 16))
                                                               - 329959154
                                                               - ((2 * (v248 ^ (v207 >> 16))) & 0xD8AA721C));
  v251 = *(_DWORD *)(v122 + 4 * (BYTE2(v234) ^ 0x2Du)) ^ 0x9AB43AB9;
  v252 = *(_DWORD *)(v125 + 4 * (BYTE1(v230) ^ 0xE5u));
  HIDWORD(v207) = v252 ^ 0x8C6F;
  LODWORD(v207) = v252 ^ 0x8E6F0000;
  v253 = (v207 >> 16) ^ (16 * v251 + 903386454 - ((32 * v251) & 0x6BB12AA0)) ^ *(_DWORD *)(v128
                                                                                         + 4
                                                                                         * ((HIBYTE(v238) ^ 0x8F) & 0x90 ^ 0x86u ^ (~(2 * (HIBYTE(v238) ^ 0x8F | 0x90)) + (HIBYTE(v238) ^ 0x8F | 0x90))));
  v254 = *(_DWORD *)(v131 + 4 * (v241 ^ 0xC2u)) ^ v251 ^ (v253 - 329959154 - ((2 * v253) & 0xD8AA721C));
  v255 = *(_DWORD *)(v122 + 4 * ((v254 ^ 0x59A5F4B7) >> 16)) ^ 0x9AB43AB9;
  v256 = *(_DWORD *)(v125 + 4 * ((unsigned __int16)(v250 ^ 0x872B) >> 8));
  HIDWORD(v207) = v256 ^ 0x8C6F;
  LODWORD(v207) = v256 ^ 0x8E6F0000;
  v257 = (16 * v255 + 903386454 - ((32 * v255) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v243) ^ 0x48)) ^ (v207 >> 16);
  v258 = *(_DWORD *)(v131 + 4 * (v246 ^ 0xEEu)) ^ v255 ^ (v257 - 329959154 - ((2 * v257) & 0xD8AA721C));
  v259 = *(_DWORD *)(v122 + 4 * (BYTE2(v243) ^ 0x91u)) ^ 0x9AB43AB9;
  v260 = *(_DWORD *)(v125 + 4 * (BYTE1(v254) ^ 0x67u));
  HIDWORD(v207) = v260 ^ 0x8C6F;
  LODWORD(v207) = v260 ^ 0x8E6F0000;
  v261 = v259 ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v246) ^ 0xD6)) ^ *(_DWORD *)(v131
                                                                            + 4 * (v250 ^ 0x18u)) ^ (16 * v259 + 903386454 - ((32 * v259) & 0x6BB12AA0)) ^ ((v207 >> 16) - 329959154 - ((2 * (v207 >> 16)) & 0xD8AA721C));
  v262 = *(_DWORD *)(v122 + 4 * (BYTE2(v246) ^ 0x56u)) ^ 0x9AB43AB9;
  v263 = *(_DWORD *)(v125 + 4 * (BYTE1(v243) ^ 0x81u));
  HIDWORD(v207) = v263 ^ 0x8C6F;
  LODWORD(v207) = v263 ^ 0x8E6F0000;
  v264 = *(_DWORD *)(v128 + 4 * ((v250 ^ 0x911B872B) >> 24)) ^ *(_DWORD *)(v122 + 4 * (BYTE2(v246) ^ 0x56u)) ^ 0xF7F548C7 ^ (16 * v262 + 903386454 - ((32 * v262) & 0x6BB12AA0)) ^ (v207 >> 16);
  HIDWORD(v207) = *(_DWORD *)(v131 + 4 * (v254 ^ 0xB7u)) ^ 0xF0DD9DB4;
  LODWORD(v207) = HIDWORD(v207);
  v265 = (v207 >> 21) ^ __ROR4__(v264, 21);
  v266 = *(_DWORD *)(v122 + 4 * (BYTE2(v250) ^ 0xD8u)) ^ 0x9AB43AB9;
  v267 = *(_DWORD *)(v125 + 4 * (BYTE1(v246) ^ 0xE4u));
  HIDWORD(v207) = v267 ^ 0x8C6F;
  LODWORD(v207) = v267 ^ 0x8E6F0000;
  v268 = (v207 >> 16) ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v254) ^ 0xB0)) ^ (16 * v266
                                                                         + 903386454
                                                                         - ((32 * v266) & 0x6BB12AA0));
  v269 = *(_DWORD *)(v131 + 4 * (v243 ^ 0x1Fu)) ^ v266 ^ (v268 - 329959154 - ((2 * v268) & 0xD8AA721C));
  v270 = *(_DWORD *)(v122 + 4 * (BYTE2(v258) ^ 0x74u)) ^ 0x9AB43AB9;
  v271 = *(_DWORD *)(v125 + 4 * (BYTE1(v269) ^ 0x66u));
  HIDWORD(v207) = v271 ^ 0x8C6F;
  LODWORD(v207) = v271 ^ 0x8E6F0000;
  v272 = v261 ^ 0x177CD9D9;
  v273 = *(_DWORD *)(v128 + 4 * ((v261 ^ 0x177CD9D9u) >> 24)) ^ 0x6D41727E ^ v270 ^ (v207 >> 16) ^ (16 * v270 + 903386454 - ((32 * v270) & 0x6BB12AA0));
  HIDWORD(v207) = v265 ^ 0x549BF9D9;
  LODWORD(v207) = v265 ^ 0x549BF9D9;
  v274 = v207 >> 11;
  v275 = *(_DWORD *)(v131 + 4 * ((v207 >> 11) ^ 0xEFu));
  v276 = (v273 & 0x200 | ((((unsigned __int16)(v273 & 0x200) >> 9) & 1) << 10)) ^ 0xF7E7E377;
  v197 = ((v276 + 135797897) & (v275 ^ 0xEC55390E)) == 0;
  v277 = v276 + 786324735;
  v278 = 514728941 - v276;
  if (v197)
    v278 = v277;
  v279 = ((v275 ^ 0xF0DD9DB4) - 650526838 + v278) ^ v273 & 0xFFFFFDFF;
  v280 = *(_DWORD *)(v122 + 4 * BYTE2(v272)) ^ 0x9AB43AB9;
  v281 = (16 * v280 + 903386454 - ((32 * v280) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * ((v274 ^ 0x1EA133EFu) >> 24));
  v282 = *(_DWORD *)(v125 + 4 * (((unsigned __int16)(v258 ^ 0x3D47) >> 8) ^ 0x93u));
  HIDWORD(v283) = v282 ^ 0x8C6F;
  LODWORD(v283) = v282 ^ 0x8E6F0000;
  v284 = *(_DWORD *)(v131 + 4 * (v269 ^ 0xDu)) ^ v280 ^ (v283 >> 16) ^ (v281
                                                                                         - 329959154
                                                                                         - ((2 * v281) & 0xD8AA721C));
  v285 = *(_DWORD *)(v122 + 4 * (BYTE2(v269) ^ 0x72u));
  v286 = *(_DWORD *)(v122 + 4 * (BYTE2(v274) ^ 0x62u));
  v287 = *(_DWORD *)(v128 + 4 * ((v258 ^ 0xD4B73D47) >> 24));
  v288 = *(_DWORD *)(v125 + 4 * (BYTE1(v274) ^ 0xA0u));
  v289 = *(_DWORD *)(v125 + 4 * BYTE1(v272));
  HIDWORD(v283) = v289 ^ 0x8C6F;
  LODWORD(v283) = v289 ^ 0x8E6F0000;
  v286 ^= 0x9AB43AB9;
  v290 = (16 * v286 + 903386454 - ((32 * v286) & 0x6BB12AA0)) ^ *(_DWORD *)(v128 + 4 * (HIBYTE(v269) ^ 0x32)) ^ (v283 >> 16);
  v291 = *(_DWORD *)(v131 + 4 * (v258 ^ 0x74u)) ^ v286 ^ (v290 - 329959154 - ((2 * v290) & 0xD8AA721C));
  v292 = (char *)*(&off_1E5B56B60 + HIDWORD(v362) - 1488) - 4;
  v293 = (char *)*(&off_1E5B56B60 + (HIDWORD(v362) ^ 0x6C9)) - 8;
  v294 = v279 ^ 0xF137909F;
  v295 = *(_DWORD *)&v293[4 * ((v279 ^ 0xF137909F) >> 16)] ^ 0xEE142615;
  HIDWORD(v357) = v295 ^ ((HIBYTE(v284) ^ 0x9FD52929) - 874675925 + *(_DWORD *)&v292[4 * (HIBYTE(v284) ^ 0xB4)]) ^ (v295 >> 2) ^ (v295 >> 4);
  v296 = (uint64_t)*(&off_1E5B56B60 + HIDWORD(v362) - 1344);
  v297 = *(_DWORD *)(v296
                   + 4
                   * ((*(_BYTE *)(v131 + 4 * (v258 ^ 0x74u)) ^ v286 ^ (v290 + 14 - ((2 * v290) & 0x1C))) ^ 0x9Eu));
  v298 = (HIDWORD(v357) & 0x1000000 | ((((HIDWORD(v357) & 0x1000000u) >> 24) & 1) << 25)) ^ 0xBD97E7EF;
  HIDWORD(v283) = v288 ^ 0x8C6F;
  LODWORD(v283) = v288 ^ 0x8E6F0000;
  v299 = (v283 >> 16) ^ v287 ^ (16 * (v285 ^ 0x9AB43AB9) + 903386454 - ((32 * (v285 ^ 0x9AB43AB9)) & 0x6BB12AA0));
  v300 = *(_DWORD *)(v131 + 4 * (v261 ^ 0xEAu)) ^ v285 ^ 0x9AB43AB9 ^ (v299
                                                                                        - 329959154
                                                                                        - ((2 * v299) & 0xD8AA721C));
  v301 = v284 ^ 0xBC37B;
  v302 = *(_DWORD *)&v293[4 * (BYTE2(v300) ^ 0x99)] ^ 0xEE142615;
  v303 = (*(_DWORD *)&v292[4 * (((v279 ^ 0xF137909F) >> 24) ^ 0xB4)]
        + (((v279 ^ 0xF137909F) >> 24) ^ 0x9FD52929)
        - 874675925) ^ ((v284 ^ 0x7B) - 830912386 + ((2 * (v284 ^ 0xBC37B)) & 0x1A ^ 0x5EFCDFFF)) ^ v302 ^ (v302 >> 2) ^ *(_DWORD *)(v296 + 4 * (v284 ^ 0x79u)) ^ (v302 >> 4);
  v304 = (char *)*(&off_1E5B56B60 + (HIDWORD(v362) ^ 0x63D)) - 4;
  v305 = *(_DWORD *)&v304[4 * ((unsigned __int16)(v291 ^ 0x7C9C) >> 8)] ^ 0xF0638D61;
  v306 = v305 ^ (1515496080 * v305);
  v307 = v300 ^ 0x6792B6A6;
  v308 = *(_DWORD *)&v292[4 * (((v300 ^ 0x6792B6A6) >> 24) ^ 0xB4)];
  v309 = (v291 ^ 0x250E7C9C) >> 24;
  v310 = *(_DWORD *)&v292[4 * (v309 ^ 0xB4)];
  v311 = v303 ^ v306;
  LODWORD(v292) = *(_DWORD *)&v293[4 * (BYTE2(v291) ^ 5)];
  HIDWORD(v359) = *(_DWORD *)&v293[4 * BYTE2(v301)];
  LODWORD(v362) = v310;
  v312 = *(_DWORD *)&v304[4 * BYTE1(v301)];
  v313 = *(_DWORD *)&v304[4 * ((unsigned __int16)(v300 ^ 0xB6A6) >> 8)];
  v314 = *(unsigned int *)&v304[4 * (BYTE1(v279) ^ 0x5E)];
  v315 = *(_DWORD *)(v296 + 4 * (v279 ^ 0x9Du));
  LODWORD(v359) = *(_DWORD *)(v296 + 4 * (v300 ^ 0xA4u));
  v316 = (v311 - 1288533813 - ((2 * v311) & 0x666511C6u) + 24) ^ LODWORD(STACK[0x290]);
  v317 = v316 ^ 0x5244C6B3;
  v318 = (char *)*(&off_1E5B56B60 + HIDWORD(v362) - 1493) - 8;
  v346[5] = v318[BYTE2(v317) ^ 0x5ELL] ^ BYTE2(v317) ^ 0x8A ^ ((BYTE2(v317) ^ 0x8A)
                                                             - ((2 * (BYTE2(v317) ^ 0x8A) - 18) & 0xD0)
                                                             - 33) ^ 0xB9;
  v319 = v292 ^ 0xEE142615 ^ ((HIBYTE(v307) ^ 0x9FD52929) - 874675925 + v308) ^ ((v292 ^ 0xEE142615) >> 2) ^ ((v292 ^ 0xEE142615) >> 4) ^ v312 ^ 0xF0638D61 ^ v315 ^ (1515496080 * (v312 ^ 0xF0638D61)) ^ (v294 - 830912386 + ((2 * v294) & 0x1A ^ 0x5EFCDFFF));
  v320 = (v319 - 1794470025 - ((2 * v319) & 0x2A151EEE)) ^ LODWORD(STACK[0x388]);
  v321 = v320 ^ 0x22A932A6;
  v322 = (BYTE1(v321) | 0x88) ^ (v321 >> 8) & 0x88;
  v323 = (uint64_t)*(&off_1E5B56B60 + HIDWORD(v362) - 1372);
  v346[2] = (((unsigned __int16)(v320 ^ 0x32A6) >> 8) | 0x88) ^ ((unsigned __int16)(v320 ^ 0x32A6) >> 8) & 0x88 ^ 0x35 ^ ((*(_BYTE *)(v323 + (v322 ^ 0x14)) ^ 0x5B) + ((2 * *(_BYTE *)(v323 + (v322 ^ 0x14))) | 0xDF) - 111);
  v324 = (uint64_t)*(&off_1E5B56B60 + (HIDWORD(v362) ^ 0x6A9));
  LODWORD(v322) = *(unsigned __int8 *)(v324 + (BYTE3(v316) ^ 0xEFLL));
  HIDWORD(v283) = v322 ^ 0x12;
  LODWORD(v283) = (v322 ^ 0x60) << 24;
  v346[STACK[0x2E0]] = (v283 >> 29) ^ 0x83;
  v325 = v298 + 2129362678;
  if (((v298 + 1114118161) & (v297 ^ 0x51000000)) != 0)
    v325 = -98873644 - v298;
  v326 = HIDWORD(v357) & 0xFEFFFFFF ^ (1515496080 * (v313 ^ 0xF0638D61)) ^ ((v297 ^ ((v291 ^ 0x9C)
                                                                                   - 830912386
                                                                                   + ((2 * (v291 ^ 0x250E7C9C)) & 0x1A ^ 0x5EFCDFFF)))
                                                                          - 1015244517
                                                                          + v325);
  v327 = v313 ^ 0xF0638D61 ^ LODWORD(STACK[0x3B8]) ^ (v326 + 735100729 - ((2 * v326) & 0x57A17EFE) + 70);
  v328 = (char *)*(&off_1E5B56B60 + HIDWORD(v362) - 1395) - 12;
  v329 = v328[v313 ^ 0x61u ^ LOBYTE(STACK[0x3B8]) ^ (v326 + 57 - 2 * v326 + 70) ^ 0x28];
  v346[11] = v329 & 0xFB ^ ((v329 | 0xFB) + 24) ^ 0x30;
  v330 = *(unsigned __int8 *)(v324 + (HIBYTE(v320) ^ 0xF9));
  HIDWORD(v331) = v330 ^ 0x12;
  LODWORD(v331) = (v330 ^ 0x60) << 24;
  v332 = STACK[0x280];
  v346[STACK[0x280]] = (v331 >> 29) ^ 0xFB;
  v346[1] = BYTE2(v321) ^ 0x61 ^ ((BYTE2(v321) ^ 0x61) - ((2 * (BYTE2(v321) ^ 0x61) - 18) & 0xD0) - 33) ^ 0xB8 ^ v318[BYTE2(v321) ^ 0xB5];
  v333 = (v309 ^ 0x9FD52929) - 874675925 + v310;
  v334 = HIDWORD(v359) ^ 0xEE142615 ^ ((HIDWORD(v359) ^ 0xEE142615) >> 4) ^ ((HIDWORD(v359) ^ 0xEE142615) >> 2);
  v335 = (v334 & 0x80000 ^ 0x3FFEB77F) + 2 * (v334 & 0x80000);
  v197 = ((v335 - 1073657727) & v333) == 0;
  v336 = v335 - 319301128;
  v337 = 1828014326 - v335;
  if (v197)
    v337 = v336;
  v338 = v359 ^ (v307 + 2096205936) ^ (((v333 - 754356599 + v337) ^ v334 & 0xFFF7FFFF ^ (1515496080 * (v314 ^ 0xF0638D61)))
                                                      + 1367848973
                                                      - 2
                                                      * (((v333 - 754356599 + v337) ^ v334 & 0xFFF7FFFF ^ (1515496080 * (v314 ^ 0xF0638D61))) & 0x5187B80F ^ ((v333 - 754356599 + v337) ^ v334 & 0xFFF7FFFF) & 2));
  v339 = v314 ^ LODWORD(STACK[0x418]) ^ (v338 - 1805920819 - ((2 * v338) & 0x28B7ABFA) + 48);
  v346[STACK[0x278]] = v318[(BYTE2(v339) ^ 0xF8) + 213 + ((v339 >> 15) & 0x1A8 ^ 0xFFFFFE5F)] ^ BYTE2(v339) ^ ((BYTE2(v339) ^ 0xF8) - ((2 * (BYTE2(v339) ^ 0xF8) - 18) & 0xD0) - 33) ^ 0x7E;
  v340 = *(unsigned __int8 *)(v324 + (HIBYTE(v339) ^ 0xALL));
  HIDWORD(v341) = v340 ^ 0x12;
  LODWORD(v341) = (v340 ^ 0x60) << 24;
  v346[STACK[0x378]] = (v341 >> 29) ^ 0x50;
  v342 = ((v327 ^ 0xCFDDD967) >> 16) ^ 0xFFFFFF94;
  v346[STACK[0x240]] = v342 ^ (v342 - ((2 * v342 - 18) & 0xD0) - 33) ^ v318[((v327 ^ 0xCFDDD967) >> 16) ^ 0x40] ^ 0xC;
  v343 = (((v339 ^ 0xAF561F4E) >> 4) & 0xF0 | ((unsigned __int16)(v339 ^ 0x1F4E) >> 12)) ^ 0xE6;
  v346[STACK[0x3D0]] = *(_BYTE *)(v323 + (((v343 >> 4) & 0xFFFFFF0F | (16 * (v343 & 0xF))) ^ 0xAELL)) ^ (((v343 >> 4) & 0xF | (16 * (v343 & 0xF))) - ((2 * ((v343 >> 4) & 0xF | (16 * (v343 & 0xF)))) & 0xB6) + 91) ^ 0x2B;
  v346[STACK[0x238]] = (((unsigned __int16)(v327 ^ 0xD967) >> 8)
                      + (~((v327 ^ 0xCFDDD967) >> 7) | 0x49)
                      + 92) ^ 0xDB ^ *(_BYTE *)(v323
                                              + (((unsigned __int16)(v327 ^ 0xD967) >> 8) ^ 0xA0));
  v346[STACK[0x3C8]] = (BYTE1(v317) - ((v317 >> 7) & 0xB6) + 91) ^ *(_BYTE *)(v323 + (BYTE1(v317) ^ 0x75)) ^ 0x80;
  v346[STACK[0x380]] = v328[v320 ^ 0x95] ^ 0x8E;
  v346[STACK[0x2E8]] = v328[v316 ^ 0x7FLL] ^ 0x1F;
  v346[STACK[0x420]] = v328[v339 ^ 0xE1] ^ 0xB0;
  v344 = *(unsigned __int8 *)(v324 + (HIBYTE(v327) ^ 0x49));
  HIDWORD(v341) = v344 ^ 0x12;
  LODWORD(v341) = (v344 ^ 0x60) << 24;
  v346[STACK[0x3B0]] = (v341 >> 29) ^ 0x2E;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 8 * ((108 * ((((_DWORD)v332 - 743077273 - 2 * (((_DWORD)v332 + 16) & 0x53B58A5F)) ^ 0xD3B58A50) < 0x150)) ^ HIDWORD(v362))))(v342 - ((2 * v342 - 18) & 0xD0) - 33, v316, v314, 230, v318, 208, v317, v328, a9, a10, a11, a12, a13, a14, a15, a16, v346, v347, v348,
           v349,
           v350,
           v351,
           a23,
           v352,
           v353,
           v354,
           v355,
           *((_QWORD *)&v355 + 1),
           v356,
           v357,
           v359,
           v362,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           2,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           11,
           5,
           a59,
           a60,
           a61,
           a62,
           a63);
}

void sub_1AC181834(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,unsigned __int8 a24,int a25,int a26,unsigned __int8 a27,int a28,unsigned __int8 a29,int a30,int a31,int a32,unsigned __int8 a33,int a34,int a35,char a36,__int16 a37,char a38)
{
  LODWORD(STACK[0x388]) = (a24 | ((a31 ^ 0xC) << 24) | ((a27 ^ 0xEF) << 8) | ((a33 ^ 0x92) << 16)) ^ 0xD8A5C17;
  LODWORD(STACK[0x290]) = a30 ^ 0xB4B3FC60;
  LODWORD(STACK[0x3B8]) = (a28 | ((a34 ^ 0xD3) << 16) | ((a26 << ((a36 - 106) & 0xBF ^ 2)) + (a32 << 8))) ^ 0x20E95C0;
  LODWORD(STACK[0x418]) = ((((a35 ^ 0x4A) << 16) + ((a25 ^ 0x1A) << 24)) | a29 | ((a38 ^ a4) << 8)) ^ 0x87CA7C6C;
  JUMPOUT(0x1AC17F810);
}

uint64_t sub_1AC181938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  uint64_t v17;
  unint64_t v18;

  v18 = STACK[0x598];
  STACK[0x630] -= 32;
  *(_BYTE *)(v18 + 335) = *(_BYTE *)(a14 + 335) ^ (15 * (((a17 - 98) & 0xDB) - 56)) ^ *((_BYTE *)*(&off_1E5B56B60
                                                                                                 + a17
                                                                                                 - 861)
                                                                                      + 11) ^ *((_BYTE *)*(&off_1E5B56B60 + a17 - 975)
                                                                                              + 9) ^ *((_BYTE *)*(&off_1E5B56B60 + (a17 ^ 0x48C)) + 6) ^ 0x4A;
  return (*(uint64_t (**)(void))(v17 + 8 * a17))();
}

void sub_1AC181A04()
{
  JUMPOUT(0x1AC181988);
}

uint64_t sub_1AC181A0C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  uint64_t v5;

  STACK[0x498] = STACK[0x498] + (v4 ^ 0x121u) - 202;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (v4 ^ 0x367u)) - ((v4 - 225) ^ a4)))();
}

uint64_t sub_1AC181A44@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  char v6;
  char v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;

  v9 = (_BYTE *)STACK[0x470];
  v10 = (0x10u >> (a1 ^ v7)) - ((2 * (0x10u >> (a1 ^ v7))) & 0x116E9FBE) - 1732816929;
  a6[12] = (HIBYTE(v10) ^ 0x98) - 2 * ((HIBYTE(v10) ^ 0x98) & 0x4B ^ HIBYTE(v10) & 1) + 74;
  a6[13] = (BYTE2(v10) ^ 0xB7) - ((2 * (BYTE2(v10) ^ 0xB7)) & 0x94) + 74;
  a6[14] = (BYTE1(v10) ^ 0x4F) - ((2 * (BYTE1(v10) ^ 0x4F)) & 0x94) + 74;
  a6[15] = v10 ^ 0x95;
  v9[16] ^= *a6 ^ v6;
  v9[17] ^= a6[1] ^ v6;
  v9[18] ^= a6[2] ^ v6;
  v9[19] ^= a6[3] ^ v6;
  v9[20] ^= a6[4] ^ v6;
  v9[21] ^= a6[5] ^ v6;
  v9[22] ^= a6[6] ^ v6;
  v9[23] ^= a6[7] ^ v6;
  v9[24] ^= a6[8] ^ v6;
  v9[25] ^= a6[9] ^ v6;
  v9[26] ^= a6[10] ^ v6;
  v9[27] ^= a6[11] ^ v6;
  v9[28] ^= a6[12] ^ v6;
  v9[29] ^= a6[13] ^ v6;
  v9[30] ^= a6[14] ^ v6;
  v9[31] ^= a6[15] ^ v6;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v8 + 8 * (a1 + 1028)) - 4))(79);
}

void sub_1AC181C60()
{
  JUMPOUT(0x1AC181A88);
}

uint64_t sub_1AC181C68@<X0>(unint64_t a1@<X3>, int a2@<W4>, int a3@<W8>)
{
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((219
                                          * (LODWORD(STACK[0x430]) == ((5 * (a3 ^ 0x1A3) + a2) & 0x496F75EF) + 576264191)) ^ (5 * (a3 ^ 0x1A3))))
                            - ((5 * (a3 ^ 0x1A3u) - 1219) ^ a1)))();
}

uint64_t sub_1AC181CD8(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (((*(unsigned __int8 *)(v6 + (v5 - 576264643)) != (((v3 + v4) & a3) - 51))
                                          * (((a3 + v3 + v4 + 154) | 0x81) - 623)) | v3))
                            - 12))();
}

uint64_t sub_1AC181D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  int v37;
  uint64_t v38;
  unint64_t v39;

  LODWORD(STACK[0x430]) = 576264642;
  v39 = STACK[0x470];
  STACK[0x4C8] = 335;
  *(_BYTE *)(v39 + 335) = ((a37 - 106) ^ 0xBA) * (a37 - 89);
  return (*(uint64_t (**)(void))(v38 + 8 * ((743 * (STACK[0x4C8] == 0)) ^ (3 * (v37 ^ 0x1E1)))))();
}

void sub_1AC182270()
{
  JUMPOUT(0x1AC182230);
}

uint64_t sub_1AC18227C()
{
  unsigned int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = ((uint64_t (*)(void))STACK[0x2C0])();
  LODWORD(STACK[0x650]) = v1;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8 * ((1924 * (v1 == v0 + 1797235612 + v0 - 301 - 372)) ^ v0))
                                          - 8))(v3);
}

uint64_t sub_1AC1822C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v5 = STACK[0x248];
  v6 = STACK[0x3F0];
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 + 8 * (v3 - 143)) - 8);
  STACK[0x3D0] = STACK[0x248] + 2353;
  STACK[0x3C8] = v6 + 49;
  STACK[0x3C0] = v5 + 2333;
  STACK[0x3B8] = v6 + 29;
  STACK[0x3B0] = v5 + 2313;
  STACK[0x388] = v6 + 9;
  return v7(a1, 1239, a3, 2497773328, 4092525957, 202441719, 348488620, 4128204254);
}

uint64_t sub_1AC182318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4
                                                                                 + 8
                                                                                 * (((STACK[0x438] == 0x2CF2CD9EB99DE98FLL)
                                                                                   * (((v3 ^ 0x1B7) - 48) ^ 0x123)) ^ (v3 + 57)))
                                                                     - 12))(a1, a2, a3, 2497773328);
}

uint64_t sub_1AC18236C@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)((15 * (((STACK[0x428] - 185) & a1) != 0)) ^ (STACK[0x428] + 1350))))();
}

uint64_t sub_1AC182394()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((235 * ((((v1 ^ v3) < 0x201) ^ (v0 + 71)) & 1)) ^ (v0 - 90)))
                            - (((v0 - 128) | 0x80u) ^ 0xB6)))();
}

uint64_t sub_1AC1823E4@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((725
                                          * ((((a1 | 0x8A) - 454567373) & 0x1B1825FB ^ 0xBFu) * v2 + 4 == v1 - 576264642)) ^ (a1 | 0x8A)))
                            - 12))();
}

uint64_t sub_1AC182440@<X0>(int a1@<W8>)
{
  _QWORD *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unint64_t v20;

  v7 = 62 * (a1 ^ 0x88);
  v1[31] = 0x578A83EA2FE08074;
  v1[32] = v1 + 33;
  v1[65] = 0x578A83EA2FE08074;
  v1[66] = v1 + 67;
  STACK[0x3C8] = (unint64_t)v1 + 0x48247A3086942986;
  v1[99] = 0x578A83EA2FE08074;
  v1[100] = v1 + 101;
  STACK[0x3D0] = (unint64_t)v1 + 0x48247A3086942A96;
  v1[133] = 0x578A83EA2FE08074;
  v1[134] = v1 + 135;
  STACK[0x420] = (unint64_t)v1 + 0x48247A3086942BA6;
  v1[167] = 0x578A83EA2FE08074;
  v1[168] = v1 + 169;
  v8 = v6 - 192;
  *(_QWORD *)(v6 - 168) = (char *)v1 + 0x48247A3086942876;
  v9 = 460628867 * ((v6 - 742779128 - 2 * ((v6 - 192) & 0xD3BA17C8)) ^ 0x9F2C95B5);
  v10 = a1 + 719;
  *(_DWORD *)(v6 - 184) = a1 + 719 + v9;
  STACK[0x418] = (unint64_t)v1 + 0x48247A3086942CB6;
  *(_DWORD *)(v6 - 176) = v9 + (v2 ^ 0x4B15B1A) - 1837432323 + ((2 * v2) & 0xDF5DFFA6 ^ 0xD61D4982);
  v11 = STACK[0x4E0] + 4;
  *(_QWORD *)(v6 - 192) = v11;
  v12 = (void (*)(uint64_t))((char *)*(&off_1E5B56B60 + a1 - 16) - 8);
  v12(v6 - 192);
  v13 = v11 + v4;
  v14 = 460628867 * ((((2 * v8) | 0xF786B5D8) - v8 + 71083284) ^ 0xB755D891);
  *(_QWORD *)(v6 - 192) = v13;
  *(_QWORD *)(v6 - 168) = STACK[0x3C8];
  *(_DWORD *)(v6 - 176) = v14 + (v2 ^ 0x70A0E914) - 429214733 + ((v7 + 931044096) & (2 * v2) ^ 0x163E0992);
  *(_DWORD *)(v6 - 184) = v10 + v14;
  v12(v6 - 192);
  v15 = v13 + v4;
  v16 = 460628867 * (((v8 | 0xEF072E79) - (v8 & 0xEF072E79)) ^ 0xA391AC04);
  *(_QWORD *)(v6 - 192) = v15;
  *(_QWORD *)(v6 - 168) = STACK[0x3D0];
  *(_DWORD *)(v6 - 176) = v16 + (v2 ^ 0xB465291C) + 581923835 + ((2 * v2) & 0xBEF51BAA ^ 0x96350982);
  *(_DWORD *)(v6 - 184) = v10 + v16;
  v12(v6 - 192);
  v17 = v15 + v4;
  v18 = 460628867 * ((v8 & 0xE3F88CC4 | ~(v8 | 0xE3F88CC4)) ^ 0x5091F146);
  *(_QWORD *)(v6 - 192) = v17;
  *(_QWORD *)(v6 - 168) = STACK[0x420];
  *(_DWORD *)(v6 - 176) = v18 + (v2 ^ 0xADF1EB36) + 993767889 + ((2 * v2) & 0x8DDC9FFE ^ 0x841C0992);
  *(_DWORD *)(v6 - 184) = v10 + v18;
  v12(v6 - 192);
  v19 = 460628867 * ((((v6 - 192) | 0x6C255846) - ((v6 - 192) & 0x6C255846)) ^ 0x20B3DA3B);
  *(_QWORD *)(v6 - 192) = v17 + v4;
  *(_QWORD *)(v6 - 168) = STACK[0x418];
  *(_DWORD *)(v6 - 176) = v19 + (v2 ^ 0x9120893E) + 132830169 + ((2 * v2) & 0xF47E5BEE ^ 0xD43E4982);
  *(_DWORD *)(v6 - 184) = v10 + v19;
  v12(v6 - 192);
  v20 = STACK[0x4E0];
  STACK[0x600] = (v3 - 576264642);
  return (*(uint64_t (**)(unint64_t))(v5
                                                     + 8 * (((v3 == 576264642) * ((v7 + 207) ^ 0x1F9)) ^ (v7 + 207))))(v20);
}

uint64_t sub_1AC182854@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  char v2;
  uint64_t v3;
  unsigned int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v7 = v3 + ((a2 - 369) | v4) - 187;
  STACK[0x600] = v7;
  *(_BYTE *)(a1 + v7) = ((v2 - 64) ^ v5) * (v2 - 47);
  return (*(uint64_t (**)(void))(v6 + 8 * ((112 * (STACK[0x600] == 0)) | a2)))();
}

uint64_t sub_1AC1828A0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  v2 = ((uint64_t (*)(void))STACK[0x2C0])();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1
                                                      + 8
                                                      * (((STACK[0x438] == 0x2CF2CD9EB99DE98FLL)
                                                        * (((v0 ^ 0x1B7) - 48) ^ 0x123)) ^ (v0 + 57)))
                                          - 12))(v2);
}

void sub_1AC182914()
{
  uint64_t v0;

  ((void (*)(uint64_t))STACK[0x2C0])(v0 - 0x2CF2CD9EB99DE98FLL);
  JUMPOUT(0x1AC182958);
}

uint64_t sub_1AC18299C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;

  v52 = 235795823 * ((2 * ((v51 - 192) & 0x8EBAC30) - (v51 - 192) - 149662769) ^ 0x63B91A96);
  *(_DWORD *)(v51 - 176) = 182239067 - v52;
  *(_DWORD *)(v51 - 172) = v52 + v48 + 124;
  *(_QWORD *)(v51 - 160) = 0;
  *(_QWORD *)(v51 - 152) = v47;
  *(_QWORD *)(v51 - 136) = a47;
  *(_QWORD *)(v51 - 192) = 0;
  *(_QWORD *)(v51 - 184) = a44;
  *(_QWORD *)(v51 - 168) = a15;
  v53 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v49 + 8 * (v48 - 126)) - 4))(v51 - 192);
  v54 = *(_DWORD *)(v51 - 144);
  LODWORD(STACK[0x654]) = v54;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v50 + 8 * ((232 * (v54 == 1797235913)) ^ v48))
                                          - 2 * (v48 - 137)
                                          + 364))(v53);
}

void sub_1AC182A8C()
{
  JUMPOUT(0x1AC182ABCLL);
}

void sub_1AC182B00()
{
  JUMPOUT(0x1AC182B40);
}

void sub_1AC182BB4()
{
  int v0;

  LODWORD(STACK[0x648]) = v0;
  JUMPOUT(0x1AC182B28);
}

uint64_t sub_1AC182BE8()
{
  int v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  int v4;

  STACK[0x418] = v1;
  v3 = STACK[0x428] ^ 0x357;
  v4 = STACK[0x57C];
  *(_DWORD *)(STACK[0x678] + 4 * ((LODWORD(STACK[0x57C]) - 70853752) >> ((STACK[0x428] ^ 0x57) + 21))) = v0;
  v4 += 4;
  LODWORD(STACK[0x57C]) = v4;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * (((8 * ((v4 - 70853752) < 0x40)) | (16 * ((v4 - 70853752) < 0x40))) ^ v3))
                                          - (v3 ^ 0x3EBu)
                                          - 2))(489);
}

uint64_t sub_1AC184170@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;

  v11 = (v3 ^ v6) * a1;
  v12 = *(_DWORD *)(a3 + 4 * (v7 + v5 - 8)) ^ *(_DWORD *)(a3 + 4 * (v7 + v5 - 3));
  v13 = v12 + v10 - (v8 & (2 * v12));
  HIDWORD(v14) = *(_DWORD *)(a3 + 4 * (v7 + v5 - 16)) ^ v13 ^ *(_DWORD *)(a3
                                                                                        + 4
                                                                                        * ((v11 ^ (v7 - 736))
                                                                                         + v5)) ^ v10;
  LODWORD(v14) = *(_DWORD *)(a3 + 4 * (v7 + v5 - 16)) ^ v13 ^ *(_DWORD *)(a3
                                                                                        + 4
                                                                                        * ((v11 ^ (v7 - 736))
                                                                                         + v5));
  *(_DWORD *)(a3 + 4 * (v4 + v7)) = (v14 >> 31) + v10 - (v8 & (2 * (v14 >> 31)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((((v4 + 1 + v7) > 0x4F) * a2) ^ v3)) - 8))();
}

uint64_t sub_1AC184200()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * v0) - 8))();
}

void sub_1AC1842F4()
{
  JUMPOUT(0x1AC18421CLL);
}

uint64_t sub_1AC18430C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v6 + 8 * ((224 * ((a3 + 1 + v5) > 0x27)) ^ v3))
                                         - 4))((v4 + 40));
}

uint64_t sub_1AC1843D0(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((281 * ((a1 + 1 + v2) < 0x3C)) ^ v1)) - 4))();
}

uint64_t sub_1AC18448C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((102 * ((a3 + 1 + v4) > 0x4F)) ^ v3)) - 4))();
}

void sub_1AC18453C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;

  LODWORD(STACK[0x434]) = v0;
  LODWORD(STACK[0x448]) = v2;
  LODWORD(STACK[0x4D4]) = v1;
  LODWORD(STACK[0x534]) = v3;
  LODWORD(STACK[0x57C]) = v8 + 80;
  v9 = STACK[0x668];
  v10 = *(_DWORD *)(STACK[0x668] - 0x5800F43E2BD23AF4);
  LODWORD(STACK[0x44C]) = v4;
  v11 = (v10 ^ (v6 + (v5 ^ 0x288) - 186)) + (v4 ^ v6);
  *(_DWORD *)(v9 - 0x5800F43E2BD23AF4) = v11 + v6 - (v7 & (2 * v11));
  JUMPOUT(0x1AC1845C0);
}

uint64_t sub_1AC1846A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _BOOL4 v7;

  v5 = STACK[0x60C];
  LODWORD(STACK[0x60C]) += ((v3 + 1258207517) & 0xB501463B) + 45;
  v6 = (((v3 - 114) | 0x305) ^ 0xE82F35ED) + LODWORD(STACK[0x664]);
  v7 = v5 + 999246901 > v6;
  if ((v5 + 999246901) < 0x58E32235 != v6 < 0x58E32235)
    v7 = (v5 + 999246901) < 0x58E32235;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8 * ((14 * v7) ^ (v3 + 1547))))(a1, a2, a3, 2497773328);
}

void sub_1AC184A54()
{
  JUMPOUT(0x1AC184A64);
}

uint64_t sub_1AC184AE0@<X0>(unsigned int a1@<W4>, int a2@<W8>)
{
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  unsigned int v11;
  int v12;
  _BOOL8 v13;

  v9 = v3 + 725;
  v10 = v4 < a1;
  *(_BYTE *)(v7 - 0x5800F43E2BD23B4CLL + (v2 + v6)) = *(_BYTE *)(STACK[0x4B8]
                                                                             + (a2 - 492033600));
  v11 = a2 + v5 + 139 * (v9 ^ 0x3E9);
  v12 = v10 ^ (v11 < a1);
  v13 = v11 < v4;
  if (!v12)
    v10 = v13;
  return ((uint64_t (*)(_BOOL8))(*(_QWORD *)(v8 + 8 * ((1680 * !v10) ^ v9)) - 8))(v13);
}

void sub_1AC184B70()
{
  JUMPOUT(0x1AC184B20);
}

uint64_t sub_1AC184B80()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;

  v4 = v0 - 684086362;
  v5 = 3804331 * ((~((v3 - 192) | 0x4BF46FA) + ((v3 - 192) & 0x4BF46FA)) ^ 0x1DE4A53);
  *(_QWORD *)(v3 - 184) = v2;
  *(_DWORD *)(v3 - 192) = v5 + v1 + 1494;
  *(_DWORD *)(v3 - 188) = v4 ^ v5;
  v6 = sub_1AC18A930(v3 - 192);
  return ((uint64_t (*)(uint64_t))STACK[0x4F0])(v6);
}

void sub_1AC184C0C()
{
  JUMPOUT(0x1AC183A04);
}

uint64_t sub_1AC184C30()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((((v2 + 644) ^ 0x30F) - 60) * (v0 != v1)) ^ v2)) - 8))();
}

uint64_t sub_1AC184C6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v1 + v4 + a1 - 1) = 74;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((644 * (v1 + v4 < (((v2 - 819) | 0x38u) ^ v3))) ^ (v2 - 644)))
                            - 8))();
}

void sub_1AC184CAC()
{
  JUMPOUT(0x1AC184C70);
}

void sub_1AC184CB4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  unint64_t v3;
  unsigned int v4;
  int v5;
  unint64_t v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;

  v2 = *(unsigned __int8 *)(v0 - 0x5800F43E2BD23AECLL) ^ 0x56;
  if (v2 == 1)
  {
    v9 = *(_DWORD *)(v0 - 0x5800F43E2BD23B08);
    *(_BYTE *)(v0 - 0x5800F43E2BD23B14) = ((8 * v9) ^ 0xB8) - ((2 * ((8 * v9) ^ 0xB8)) & 0x9F) + 74;
    v10 = STACK[0x428];
    v7 = -108;
    *(_BYTE *)(v0 - 0x5800F43E2BD23B13) = ((v9 >> 5) ^ 0xF9)
                                          - ((((v9 >> 5) ^ 0xFFFFFFF9) << (STACK[0x428] + 71)) & 0x94)
                                          + 74;
    v5 = v10 + 475;
    *(_BYTE *)(v0 - 0x5800F43E2BD23B12) = ((v9 >> 13) ^ 0xC7) - ((2 * ((v9 >> 13) ^ 0xC7)) & 0x94) + 74;
    *(_BYTE *)(v0 - 0x5800F43E2BD23B11) = ((v9 >> 21) ^ 0x8B) - ((2 * ((v9 >> 21) ^ 0x8B)) & 0x94) + 74;
    v11 = *(_DWORD *)(v0 - 0x5800F43E2BD23B0CLL);
    HIDWORD(v12) = v11 ^ 8;
    LODWORD(v12) = v9 ^ 0x80000000;
    *(_BYTE *)(v0 - 0x5800F43E2BD23B10) = (v12 >> 29) - ((2 * (v12 >> 29)) & 0x94) + 74;
    *(_BYTE *)(v0 - 0x5800F43E2BD23B0FLL) = ((v11 >> 5) ^ 0xD9) - ((2 * ((v11 >> 5) ^ 0xD9)) & 0x94) + 74;
    *(_BYTE *)(v0 - 0x5800F43E2BD23B0ELL) = ((v11 >> 13) ^ 0xB) + (~(2 * ((v11 >> 13) ^ 0xB)) | 0x6B) + 75;
    v8 = (v11 >> 21) ^ 0xFFFFFFD3;
  }
  else
  {
    v3 = STACK[0x428];
    if (v2 != 2)
    {
LABEL_6:
      STACK[0x5E8] = *(_QWORD *)(v1 + 8 * ((int)v3 - 145)) - 12;
      JUMPOUT(0x1AC183A0CLL);
    }
    v4 = *(_DWORD *)(v0 - 0x5800F43E2BD23B0CLL);
    v5 = (STACK[0x428] + 454) | 0x15;
    *(_BYTE *)(v0 - 0x5800F43E2BD23B14) = ((STACK[0x428] - 58) | 0x15)
                                          + ((v4 >> 21) ^ 0xD3)
                                          - 2 * (((v4 >> 21) ^ 0xD3) & 0x4E ^ (v4 >> 21) & 4)
                                          - 75;
    *(_BYTE *)(v0 - 0x5800F43E2BD23B13) = ((v4 >> 13) ^ 0xB) - ((2 * ((v4 >> 13) ^ 0xB)) & 0x94) + 74;
    *(_BYTE *)(v0 - 0x5800F43E2BD23B12) = ((v4 >> 5) ^ 0xD9) - ((2 * ((v4 >> 5) ^ 0xD9)) & 0x94) + 74;
    v8 = *(_DWORD *)(v0 - 0x5800F43E2BD23B08);
    HIDWORD(v6) = v4 ^ 8;
    LODWORD(v6) = v8 ^ 0x80000000;
    *(_BYTE *)(v0 - 0x5800F43E2BD23B11) = (v6 >> 29) - ((2 * (v6 >> 29)) & 0x94) + 74;
    *(_BYTE *)(v0 - 0x5800F43E2BD23B10) = ((v8 >> 21) ^ 0x8B) - ((2 * ((v8 >> 21) ^ 0x8B)) & 0x94) + 74;
    *(_BYTE *)(v0 - 0x5800F43E2BD23B0FLL) = ((v8 >> 13) ^ 0xC7) + (~(2 * ((v8 >> 13) ^ 0xC7)) | 0x6B) + 75;
    *(_BYTE *)(v0 - 0x5800F43E2BD23B0ELL) = ((v8 >> 5) ^ 0xF9) - ((2 * ((v8 >> 5) ^ 0xF9)) & 0x94) + 74;
    v7 = -112;
    LOBYTE(v8) = (8 * v8) ^ 0xB8;
  }
  LODWORD(v3) = 62 * (v5 ^ 0x296);
  *(_BYTE *)(v0 - 0x5800F43E2BD23B0DLL) = v8 - (((_BYTE)v8 << (v3 + 71)) & v7) + 74;
  goto LABEL_6;
}

uint64_t sub_1AC185090@<X0>(uint64_t a1@<X8>)
{
  _DWORD *v1;
  int v2;
  uint64_t v3;
  int v4;
  _BYTE *v5;
  unsigned int v6;
  unsigned int v7;
  _BOOL4 v8;
  _BOOL4 v9;

  v4 = (v2 - 314) | 0x421;
  v5 = (_BYTE *)STACK[0x620];
  v6 = *(_DWORD *)(a1 - 0x5800F43E2BD23B04);
  *v5 = (HIBYTE(v6) ^ 0x2B) - ((v4 + 51) & (2 * (HIBYTE(v6) ^ 0x2B))) + 74;
  v5[1] = (BYTE2(v6) ^ 0xAC) - ((2 * (BYTE2(v6) ^ 0xAC)) & 0x94) + 74;
  v5[2] = (BYTE1(v6) ^ 0xA4) - ((v6 >> 7) & 0x94) + 74;
  v5[3] = v6 ^ 0x42;
  v7 = *v1 - 1846618017;
  v8 = v7 < 0xC494C093;
  v9 = v7 > 0xC494C097;
  if (v8)
    v9 = v8;
  return (*(uint64_t (**)(void))(v3 + 8 * ((533 * v9) ^ v4)))();
}

void sub_1AC185194()
{
  JUMPOUT(0x1AC1850BCLL);
}

void sub_1AC185210()
{
  JUMPOUT(0x1AC1851C8);
}

uint64_t sub_1AC185218()
{
  return ((uint64_t (*)(void))STACK[0x5B8])();
}

uint64_t sub_1AC185244()
{
  int v0;
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;

  v3 = STACK[0x428] - 34;
  *(_DWORD *)(STACK[0x2C8] + 52) = ((((LODWORD(STACK[0x64C]) ^ v2) + (v0 ^ v2)) % 0x2710) ^ 0x59B3F7BA)
                                 - 295854352
                                 + (((((LODWORD(STACK[0x64C]) ^ v2) + (v0 ^ v2)) % 0x2710) << (STACK[0x428] ^ 0xBB)) & 0x6F74);
  v4 = STACK[0x654];
  LODWORD(STACK[0x5FC]) = STACK[0x654];
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((2007 * (v4 == v2)) ^ v3)) - 8))();
}

void sub_1AC1852DC()
{
  _DWORD *v0;

  *v0 = STACK[0x4C0];
  v0[85] = STACK[0x480];
  v0[86] = STACK[0x4B4];
  v0[87] = STACK[0x444];
  v0[88] = STACK[0x5CC];
  JUMPOUT(0x1AC17E82CLL);
}

void sub_1AC185314()
{
  STACK[0x498] -= 1616;
  JUMPOUT(0x1AC17E824);
}

void sub_1AC185330()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = v0 | 4;
}

uint64_t sub_1AC185338(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  int v5;
  uint64_t v6;

  STACK[0x368] = v4;
  LODWORD(STACK[0x5E4]) = a4 + 22;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((559 * (STACK[0x368] != 0)) ^ (v5 + 235)))
                            - ((v5 + 1760624437) & 0x970F01B5 ^ 0x1A1)))();
}

uint64_t sub_1AC1854BC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((29
                                * (((v1 - 1956178772) & 0x7498EBAB ^ (v2 - 355)) + v0 >= 3 * (v1 ^ 0x375u) - 184)) ^ v1)))();
}

uint64_t sub_1AC18550C(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  LODWORD(STACK[0x5E4]) = v1 + 22;
  v4 = STACK[0x5A8];
  v5 = LODWORD(STACK[0x4A4]);
  STACK[0x500] = v5;
  return ((uint64_t (*)(uint64_t, unint64_t))(*(_QWORD *)(v3
                                                                        + 8
                                                                        * ((123
                                                                          * ((_DWORD)v5 != ((v2 + 2050925220) & 0x85C15FEB)
                                                                                         - 842)) ^ (v2 + 765)))
                                                            - 8))(a1, v4);
}

void sub_1AC185518()
{
  JUMPOUT(0x1AC185520);
}

void sub_1AC185570(uint64_t a1@<X1>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  int v4;

  v4 = 93 * (a2 ^ 0x1A7);
  ((void (*)(_QWORD, uint64_t, _QWORD))STACK[0x2D8])(*(unsigned int *)STACK[0x2D0], a1, (v2 - 1127925783 + v4));
  *(_DWORD *)(v3 - 192) = 1225351577
                        * ((((v3 - 192) | 0x3CD09B98) - (v3 - 192) + ((v3 - 192) & 0xC32F6460)) ^ 0x1F4A438E)
                        + 2138962583
                        + v4
                        + 591;
  sub_1AC1AE8EC((_DWORD *)(v3 - 192));
  JUMPOUT(0x1AC1855FCLL);
}

uint64_t sub_1AC185640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  int v52;

  v48 = STACK[0x5A8];
  v49 = (LODWORD(STACK[0x4A4]) ^ 0xCFFDED45) + 2046736380 + ((2 * LODWORD(STACK[0x4A4])) & 0x9FFBDA8A);
  v50 = 1759421093 * ((((v47 - 192) | 0xAC34018A) - (v47 - 192) + ((v47 - 192) & 0x53CBFE70)) ^ 0x1F49B1DE);
  *(_QWORD *)(v47 - 136) = v43;
  *(_BYTE *)(v47 - 164) = -91 * ((((v47 + 64) | 0x8A) - (v47 + 64) + ((v47 + 64) & 0x70)) ^ 0xDE) - 102;
  *(_QWORD *)(v47 - 184) = v44;
  *(_QWORD *)(v47 - 176) = a41;
  *(_DWORD *)(v47 - 192) = (v45 - 422) ^ v50;
  *(_DWORD *)(v47 - 144) = v49 ^ v50;
  *(_QWORD *)(v47 - 152) = v48;
  *(_QWORD *)(v47 - 160) = a42;
  *(_DWORD *)(v47 - 168) = v42 + v50 + ((v45 - 1696562101) & 0x651F7B5B ^ 0xEA599D2B);
  v51 = ((uint64_t (*)(uint64_t))*(&off_1E5B56B60 + (v45 ^ 0x3BFu)))(v47 - 192);
  v52 = *(_DWORD *)(v47 - 188);
  LODWORD(STACK[0x5E4]) = v52;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v46
                                                      + 8
                                                      * (int)(((v52 == 1797235913) * ((v45 - 1696562101) ^ 0x9AE08375)) ^ v45))
                                          - 8))(v51);
}

uint64_t sub_1AC18576C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,int a39)
{
  int v39;
  unsigned int v40;
  uint64_t v41;

  return ((uint64_t (*)(void))(*(_QWORD *)(v41
                                        + 8
                                        * ((1475
                                          * (((v39 + ((v40 + 303112116) & 0xEDEEDDBB) - 186) ^ LODWORD(STACK[0x55C])) != a39 - 114891388 + v40 - 656)) ^ v40))
                            - 4))();
}

uint64_t sub_1AC1857CC@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  LODWORD(STACK[0x5E4]) = v1 - 121;
  v4 = 1224239923
     * ((2 * ((v3 - 192) & 0x2D9C6B7C1C2A4430) - (v3 - 192) - 0x2D9C6B7C1C2A4434) ^ 0xFA3921EA1166461BLL);
  v5 = LODWORD(STACK[0x5E4]) + v4;
  *(_QWORD *)(v3 - 168) = 2497773331u - v4;
  *(_QWORD *)(v3 - 160) = v5;
  *(_DWORD *)(v3 - 180) = v4 ^ (a1 + 418081250) ^ 0x85;
  *(_DWORD *)(v3 - 176) = v4 + a1 + 2104632204;
  *(_DWORD *)(v3 - 152) = v4;
  *(_DWORD *)(v3 - 188) = a1 + 418081250 + v4;
  *(_DWORD *)(v3 - 184) = (a1 + 418081250) & 0xFFFBEAB2 ^ v4;
  v6 = ((uint64_t (*)(uint64_t))STACK[0x370])(v3 - 192);
  STACK[0x368] = 0;
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * *(int *)(v3 - 192)))(v6);
}

uint64_t sub_1AC185828@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;

  v4 = v2 + 753;
  v5 = ((unint64_t)&STACK[0x500] ^ 0xBFDFD9FFE373FDFELL)
     + 0x5CBFAE47FFFDBE78
     + (((_QWORD)&STACK[0x500] << (v4 - 58)) & 0x7FBFB3FFC6E7FBF0);
  v6 = a2 - 1;
  STACK[0x500] = v6;
  *(_BYTE *)(a1 + v6) = ((v5 + ((v4 + 124) ^ 0x3D)) ^ 0xBA) * (v5 - 101);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((110 * (STACK[0x500] != 0)) ^ v4)) - 8))();
}

void sub_1AC1858E0()
{
  JUMPOUT(0x1AC1858A4);
}

void sub_1AC1858E8(uint64_t a1, uint64_t a2)
{
  ((void (*)(_QWORD, uint64_t, _QWORD))STACK[0x2D8])(*(unsigned int *)STACK[0x2D0], a2, 0);
  JUMPOUT(0x1AC185910);
}

uint64_t sub_1AC1859F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int v3;
  int v4;

  STACK[0x368] = 0;
  v2 = STACK[0x428];
  v3 = 111 * (STACK[0x428] ^ 0xBD);
  v4 = *(_DWORD *)(v0 + 56);
  *(_DWORD *)(v0 + 56) = v4 + 1;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((((v4 - 1218717366) < 0xFFFFFFFA) * (v3 ^ 0x3F6)) ^ ((int)v2 + 591))))();
}

void sub_1AC185A44()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 - 192) = 1225351577
                        * ((2 * (((v1 - 192) ^ 0xDBA188F) & 0x4A25CCB4) - ((v1 - 192) ^ 0xDBA188F) - 1243991221) ^ 0x9BFAF3D2)
                        + 2138962583
                        + v0;
  sub_1AC1AE8EC((_DWORD *)(v1 - 192));
  *(_BYTE *)(v1 - 160) = (51 * ((((2 * ((v1 + 64) ^ 0x5C)) | 0xB0) - ((v1 + 64) ^ 0x5C) + 40) ^ 0x53)) ^ 0xD;
  *(_QWORD *)(v1 - 184) = STACK[0x260];
  *(_QWORD *)(v1 - 168) = STACK[0x258];
  *(_DWORD *)(v1 - 192) = (v0 + 2) ^ (1224239923
                                    * ((((2 * ((v1 - 192) ^ 0x62BB5C)) | 0x6FC4CFB0)
                                      - ((v1 - 192) ^ 0x62BB5C)
                                      + 1209899048) ^ 0x45332153));
  ((void (*)(uint64_t))STACK[0x250])(v1 - 192);
  STACK[0x368] = 0;
  JUMPOUT(0x1AC185524);
}

uint64_t sub_1AC185B2C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v1 = 1734042137 * ((((2 * a1) | 0x8ED2A308) - a1 + 949399164) ^ 0x9BA792C9);
  v2 = *(_DWORD *)a1 ^ v1;
  v3 = *(_DWORD *)(a1 + 4) + v1;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x48247A308694277ALL);
  v6 = v4 - 1468695530;
  v5 = v4 - 1468695530 < 0;
  v7 = 1468695530 - v4;
  if (!v5)
    v7 = v6;
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B56B60 + v2 - 746)
                              + ((240 * ((v3 - 1789185916) >= 4 * (unint64_t)v7)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC185BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2
                                                                        + 8
                                                                        * ((((v3 == 1789185916) ^ (v4 - 1)) & 1 | ((((v3 == 1789185916) ^ (v4 - 1)) & 1) << 7)) ^ v4))
                                                            - 8))(a1, a2, 1368499268);
}

uint64_t sub_1AC185C20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1
                                                                                        + 8
                                                                                        * ((38 * ((v3 + 690) ^ 0x63F)
                                                                                          + 412) ^ (v3 + 690) ^ 0x6B6))
                                                                            - 4))(a1, (v3 + 690) ^ 0x6B6u, 38 * ((v3 + 690) ^ 0x63Fu), 2425293427, v2);
}

uint64_t sub_1AC185CA0@<X0>(uint64_t a1@<X0>, int a2@<W2>, unsigned int a3@<W3>, int a4@<W4>, int a5@<W8>)
{
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  unsigned int v9;

  v9 = ((v7 - (a2 ^ 0x60A) + 32 * (a2 ^ 0x60A) - 868) ^ a3) >> v8;
  *(_BYTE *)(*(_QWORD *)(a1 + 8) + (a4 + a5)) = v9 - (((_BYTE)v9 << ((a2 - 118) ^ 0xA1)) & 0x94) + 74;
  return (*(uint64_t (**)(void))(v5 + 8 * (a2 ^ ((16 * (a4 - 1 == v6)) | ((a4 - 1 == v6) << 7)))))();
}

uint64_t sub_1AC185D10(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * (((v3 == 24) * (38 * (a2 ^ 0x89) + 412)) ^ a2)) - 4))(a1);
}

uint64_t sub_1AC185D48(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  _BOOL4 v6;

  v6 = v2 > 0x533AA37A;
  if (v6 == v5 + 714399723 < (int)((a2 + 1398) ^ 0xACC55A93))
    v6 = v5 + 714399723 < v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((30 * v6) ^ a2)) - 4))();
}

uint64_t sub_1AC185DB8@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W8>)
{
  int v3;
  _QWORD *v4;
  int v5;

  return sub_1AC185CA0(a1, (a2 + 356) | 0x412u, *(_DWORD *)(*v4 + 4 * (v5 - 36733616 + ((a2 + 356) | 0x412))), v3, a3);
}

uint64_t sub_1AC185DEC(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 24) = a3;
  return result;
}

void sub_1AC185DF4(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 36) ^ (235795823
                             * ((-2 - ((a1 ^ 0x29040430 | 0x96E8ABCB) + (a1 ^ 0x10C0A082 | 0x69175434))) ^ 0x52961214));
  __asm { BR              X14 }
}

uint64_t sub_1AC185F30(int a1)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((995
                                          * (((v1 << ((a1 + 47) & 0x3F ^ 0x2C)) & 0xFFB5F7FC ^ 0xA690167C)
                                           + (v1 ^ (a1 - 282689247) & 0x10D97CFF ^ 0x2C97F01E)
                                           - 67125905 == 2077931885)) ^ (a1 + 828)))
                            - 4))();
}

uint64_t sub_1AC185FD4(int a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1077
                                          * ((((a3 + a1 - 2145057790) < 8) ^ (11 * (a4 ^ 0xD0) + 72)) & 1)) ^ a4))
                            - 8))();
}

uint64_t sub_1AC18603C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8 * (((a2 + v7 + 26 * (a7 ^ 0xACu) - 250 < 0xFFFFFFF0) * (a7 - 43)) ^ a7))
                            - 8))();
}

uint64_t sub_1AC186080(int a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v23;

  v12 = (a3 + a1 + a2);
  v13 = *(_QWORD *)(v11 - 120);
  v14 = v12 + v13;
  v15 = (a6 ^ 0xE5) & v12;
  v16 = v8 - v14;
  v17 = (v15 | v7) - v14;
  v18 = (v15 | v9) - v14;
  v19 = v16 + v15;
  v23 = (unint64_t)(v6 - v13) < 0x10 || v19 < 0x10 || v17 < 0x10 || v18 < 0x10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((488 * ((a6 ^ 3 ^ v23) & 1)) ^ a6)) - 12))();
}

uint64_t sub_1AC1860FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  unsigned int v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v6
                                                                      + 8
                                                                      * (int)(((v7 >= (a6 ^ 0xFAu))
                                                                             * (((a6 ^ 0x2E3) + 1439696344) & 0xAA2FFBFE ^ 0x3E7)) ^ a6 ^ 0x2E3)))(a1, a2, a3, 0);
}

uint64_t sub_1AC186148(int a1, int a2, int a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16x4_t v20;
  int8x16x4_t v21;

  v20.val[1].i64[0] = ((_BYTE)v9 - 1) & 0xF;
  v20.val[1].i64[1] = ((_BYTE)v9 + 14) & 0xF;
  v20.val[2].i64[0] = ((_BYTE)v9 + 13) & 0xF;
  v20.val[2].i64[1] = ((_BYTE)v9 + 12) & 0xF;
  v20.val[3].i64[0] = ((_BYTE)v9 + 11) & 0xF;
  v20.val[3].i64[1] = ((_BYTE)v9 + 10) & 0xF;
  v21.val[0].i64[0] = ((_BYTE)v9 + 9) & 0xF;
  v21.val[0].i64[1] = ((_BYTE)v9 + 8) & 0xF;
  v21.val[1].i64[0] = ((_BYTE)v9 + 7) & 0xF;
  v21.val[1].i64[1] = ((_BYTE)v9 + 6) & 0xF;
  v21.val[2].i64[0] = ((_BYTE)v9 + 5) & 0xF;
  v21.val[2].i64[1] = (v9 + 4) & 0xF;
  v21.val[3].i64[0] = ((_BYTE)v9 + 3) & 0xF;
  v21.val[3].i64[1] = ((_BYTE)v9 + 2) & 0xF;
  v13 = a1 + a3 + a2;
  v14.i64[0] = 0x6161616161616161;
  v14.i64[1] = 0x6161616161616161;
  v15.i64[0] = 0x4A4A4A4A4A4A4A4ALL;
  v15.i64[1] = 0x4A4A4A4A4A4A4A4ALL;
  v20.val[0].i64[0] = ((_BYTE)a1 + (_BYTE)a3 + (_BYTE)a2) & 0xF;
  v20.val[0].i64[1] = v9 & 0xF;
  v16.i64[0] = vqtbl4q_s8(v20, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v16.i64[1] = vqtbl4q_s8(v21, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v17 = vrev64q_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v5 - 15 + v13), *(int8x16_t *)(v7 + v20.val[0].i64[0] - 15)), veorq_s8(*(int8x16_t *)(v6 + v20.val[0].i64[0] - 15), *(int8x16_t *)(v8 + v20.val[0].i64[0] - 15))));
  v18 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v17, v17, 8uLL), v15), vmulq_s8(v16, v14)));
  *(int8x16_t *)(*(_QWORD *)(v11 - 120) - 15 + v13) = vextq_s8(v18, v18, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((1037 * ((v12 & 0xFFFFFFF0) == 16)) ^ a5 ^ 0x15D))
                            - ((a5 ^ 0x15Du)
                             - 156)
                            + 684))();
}

void sub_1AC1862B8()
{
  JUMPOUT(0x1AC186230);
}

uint64_t sub_1AC1862C4(int a1)
{
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * ((2021 * ((v1 ^ (a1 + 623) ^ 0x534D0E12) != 0)) ^ a1)))(2105948264);
}

uint64_t sub_1AC186310(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;

  *(_BYTE *)(*(_QWORD *)(v10 - 120) + (a1 - 2105948264)) = *(_BYTE *)(v1 + (a1 - 2105948264)) ^ *(_BYTE *)(v3 + ((a1 - 2105948264) & 0xFLL)) ^ *(_BYTE *)(v2 + ((a1 - 2105948264) & 0xFLL)) ^ *(_BYTE *)(v4 + ((a1 - 2105948264) & 0xFLL)) ^ (97 * ((a1 - 104) & 0xF)) ^ 0x4A;
  v11 = a1 - 1341349246;
  v12 = (a1 + 1);
  v13 = (v7 > 0xD26D2516) ^ (v11 < v5);
  v14 = v11 < v8;
  if (v13)
    v14 = v7 > 0xD26D2516;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9 + 8 * ((v14 * (v6 - 1492)) ^ v6)) - 4))(v12);
}

uint64_t sub_1AC1863B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  int v6;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (int)((((53 * (v4 ^ 0x2A1) - 798) ^ (v4 + 160053155) & 0xF675C7AD) * (v6 == a4)) ^ v4)))();
}

uint64_t sub_1AC1863FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;
  char v9;
  _BOOL4 v10;

  v10 = (v9 & 8) == ((a7 + 1248) ^ 0x6E9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v8
                                                                                       + 8
                                                                                       * (((2 * v10) | (16 * v10)) ^ a7)))(a1, a2, a3, a4, (v7 - a4), (a7 + 1248) ^ 0x509u);
}

uint64_t sub_1AC186434(int a1, int a2, int a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char v54;
  uint64_t v55;
  int8x16x4_t v57;

  v51 = a6 ^ 0x3F;
  *(_DWORD *)(v49 - 152) = v50;
  v52 = (v51 - 999) & v50;
  *(_QWORD *)(v49 - 128) = v43 - 7;
  *(_QWORD *)(v49 - 136) = *(_QWORD *)(v49 - 120) - 7;
  v53 = -a4;
  *(_DWORD *)(v49 - 160) = v52;
  v54 = a1 + a3 + v48;
  *(_DWORD *)(v49 - 144) = v51;
  v55 = (v53 + a1 + a3 + a2);
  v57.val[0].i64[0] = ((_BYTE)v53 + (_BYTE)a1 + (_BYTE)a3 + (_BYTE)a2) & 0xF;
  v57.val[0].i64[1] = ((_BYTE)v53 + v47) & 0xF;
  v57.val[1].i64[0] = ((_BYTE)v53 + v54 - 32) & 0xF;
  v57.val[1].i64[1] = ((_BYTE)v53 + v54 + ((v51 - 14) | 0xE)) & 0xF;
  v57.val[2].i64[0] = ((_BYTE)v53 + v54 - 34) & 0xF;
  v57.val[2].i64[1] = ((_BYTE)v53 + v54 - 35) & 0xF;
  v57.val[3].i64[0] = ((_BYTE)v53 + v54 - 36) & 0xF;
  v57.val[3].i64[1] = ((_BYTE)v53 + v54 - 37) & 0xF;
  *(int8x8_t *)(*(_QWORD *)(v49 - 136) + v55) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(*(_QWORD *)(v49 - 128) + v55), *(int8x8_t *)(v45 + (v55 & 0xF) - 7)), veor_s8(*(int8x8_t *)(v44 + (v55 & 0xF) - 7), *(int8x8_t *)(v46 + (v55 & 0xF) - 7)))), (int8x8_t)0x4A4A4A4A4A4A4A4ALL), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v57, (int8x16_t)xmmword_1AC3B5870), (int8x8_t)0x6161616161616161)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a43 + 8 * ((63 * (v53 != 8 - v52)) ^ *(_DWORD *)(v49 - 144)))
                                         - 12))((__n128)xmmword_1AC3B5870);
}

void sub_1AC18658C()
{
  JUMPOUT(0x1AC1864A8);
}

uint64_t sub_1AC1865B4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (a2 ^ (1309 * (*(_DWORD *)(v3 - 152) == *(_DWORD *)(v3 - 160)))))
                            - ((a2 + 1102) ^ 0x525)))();
}

uint64_t sub_1AC1865F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = (a5 - 2077932095);
  *(_BYTE *)(*(_QWORD *)(v14 - 120) + v15) = *(_BYTE *)(v8 + v15) ^ *(_BYTE *)(v10 + (v15 & 0xF)) ^ *(_BYTE *)(v9 + (v15 & 0xF)) ^ *(_BYTE *)(v11 + (v15 & 0xF)) ^ (97 * (v15 & 0xF)) ^ 0x4A;
  return ((uint64_t (*)(void))(*(_QWORD *)(v13
                                        + 8 * (((a5 - 1 == v12) * ((a8 - 47020284) & 0x2CD773F ^ 0x5B)) ^ (a8 - 1589)))
                            - 8))();
}

uint64_t sub_1AC186680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;

  v38 = *(_QWORD *)(v35 + 24);
  *(int8x16_t *)(v37 - 112) = veorq_s8(*(int8x16_t *)(*(_QWORD *)(v35 + 40) - 0x4BBB3C48FF632B30), (int8x16_t)xmmword_1AC3B5880);
  if (*(_QWORD *)(v37 - 120))
    v39 = v38 == 0x38DF4D133EEC7284;
  else
    v39 = 1;
  v40 = !v39;
  LODWORD(a11) = 2 * v34;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 + 8 * (int)((2 * v40) | (v40 << 7) | a6)) - 12))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34);
}

uint64_t sub_1AC1866FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  BOOL v39;

  v37 = ((v35 ^ 0x6BFFDF92) & a11) + ((a6 + 905963978) ^ v34);
  v39 = ((((_DWORD)a6 + 407611728) & 0xE7B453FE ^ 0x273) & (v37 + 9)) != 0 || v37 == 905965303;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 + 8 * ((124 * (((a6 - 124) ^ v39) & 1)) ^ ((int)a6 + 131))) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34);
}

uint64_t sub_1AC186788@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  char *v41;
  int v42;
  unint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned __int8 v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  char *v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unsigned __int8 *v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  char *v131;
  int v132;
  char *v133;
  char *v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  int v138;
  int v139;
  char *v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  int v154;
  int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  int v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  unsigned int v170;
  int v171;
  int v172;
  int v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  int v180;
  unsigned int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  unsigned int v200;
  unsigned int v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  unsigned int v212;
  int v213;
  int v214;
  int v215;
  uint64_t v216;
  int v217;
  int v218;
  int v219;
  int v220;
  unsigned int v221;
  int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  unsigned int v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  unsigned int v276;
  int v277;
  unsigned int v278;

  v40 = v37 | 0x10A;
  v41 = (char *)*(&off_1E5B56B60 + (v37 | 0x10A) - 845) - 12;
  v42 = v41[*(unsigned __int8 *)(v36 - 0x38DF4D133EEC7283) ^ 0x85];
  HIDWORD(v43) = v42 ^ 0x2D;
  LODWORD(v43) = v42 << 24;
  v44 = ((v37 | 0x10A) - 1092324300) & 0x411B8EF9;
  v45 = (v43 >> 30) ^ 0x9F;
  v46 = (uint64_t)*(&off_1E5B56B60 + ((v37 | 0x10A) ^ 0x3E2));
  v47 = *(unsigned __int8 *)(v46 + (*(unsigned __int8 *)(v36 - 0x38DF4D133EEC7279) ^ 0xBFLL));
  HIDWORD(v43) = v47 ^ 8;
  LODWORD(v43) = (v47 ^ 0x70) << 24;
  LOBYTE(v47) = v43 >> 28;
  v48 = v45 << (v44 ^ 0xF9);
  v49 = v41[*(unsigned __int8 *)(v36 - 0x38DF4D133EEC727FLL) ^ 0x6FLL];
  HIDWORD(v43) = v49 ^ 0x2D;
  LODWORD(v43) = v49 << 24;
  v50 = (char *)*(&off_1E5B56B60 + v40 - 917) - 4;
  v51 = (uint64_t)*(&off_1E5B56B60 + v40 - 877);
  v52 = *(unsigned __int8 *)(v51 + (*(unsigned __int8 *)(v36 - 0x38DF4D133EEC7278) ^ 0xD8));
  v53 = *(unsigned __int8 *)(v46 + (*(unsigned __int8 *)(v36 - 0x38DF4D133EEC7275) ^ 0xBCLL));
  v54 = (((v43 >> 30) ^ 0x68) << 16) | ((v50[*(unsigned __int8 *)(v36
                                                                                                  - 0x38DF4D133EEC727ELL) ^ 0xDFLL] ^ 0x8E) << 8);
  HIDWORD(v43) = v53 ^ 8;
  LODWORD(v43) = (v53 ^ 0x70) << 24;
  v55 = v43 >> 28;
  v56 = v55 ^ 0x68;
  v57 = v54 | ((*(unsigned __int8 *)(v51 + (*(unsigned __int8 *)(v36 - 0x38DF4D133EEC7280) ^ 0xAFLL)) ^ 0xFFFFFFCF) << 24);
  v58 = *(unsigned __int8 *)(v46 + (*(unsigned __int8 *)(v36 - 0x38DF4D133EEC727DLL) ^ 0x98));
  HIDWORD(v43) = v58 ^ 8;
  LODWORD(v43) = (v58 ^ 0x70) << 24;
  v59 = v57 & 0xFFFFFF00 | (v43 >> 28);
  v60 = *(unsigned __int8 *)(v46 + (*(unsigned __int8 *)(v36 - 0x38DF4D133EEC7281) ^ 0xD0));
  HIDWORD(v43) = v60 ^ 8;
  LODWORD(v43) = (v60 ^ 0x70) << 24;
  LODWORD(v46) = v41[*(unsigned __int8 *)(v36 - 0x38DF4D133EEC7277) ^ 0xB6];
  LOBYTE(v60) = (v43 >> 28) ^ 0x3C;
  HIDWORD(v43) = v46 ^ 0x2D;
  LODWORD(v43) = (_DWORD)v46 << 24;
  v61 = v48 | ((v50[*(unsigned __int8 *)(v36 - 0x38DF4D133EEC7282) ^ 0x49] ^ 4) << 8) | ((*(unsigned __int8 *)(v51 + (*v38 ^ 0xFELL)) ^ 0x16) << 24) | v60;
  v62 = (v43 >> 30) ^ 0x21;
  v63 = v41[*(unsigned __int8 *)(v36 - 0x38DF4D133EEC727BLL) ^ 0xC8];
  HIDWORD(v43) = v63 ^ 0x2D;
  LODWORD(v43) = v63 << 24;
  v64 = (((v50[*(unsigned __int8 *)(v36 - 0x38DF4D133EEC7276) ^ 0xC7] ^ 0x4FLL) << 8) | ((v52 ^ 0x1F) << 24) | (v62 << 16) | v56) ^ 0x75F49EF4;
  v65 = ((unsigned __int16)((((v50[*(unsigned __int8 *)(v36 - 0x38DF4D133EEC7276) ^ 0xC7] ^ 0x4F) << 8) | v56) ^ 0x9EF4) >> 8);
  v66 = (uint64_t)*(&off_1E5B56B60 + v40 - 872);
  v67 = v47 | ((v50[*(unsigned __int8 *)(v36 - 0x38DF4D133EEC727ALL) ^ 0xB7] ^ 0xAF) << 8) & 0xFF00FFFF | (((v43 >> 30) ^ 0x37) << 16) | ((*(unsigned __int8 *)(v51 + (*(unsigned __int8 *)(v36 - 0x38DF4D133EEC727CLL) ^ 0x18)) ^ 0x50) << 24);
  LODWORD(v65) = (v65 - ((2 * (v64 >> 8)) & 0x158) + 88687532) ^ *(_DWORD *)(v66 + 4 * (v65 ^ 0xF5));
  v68 = (char *)*(&off_1E5B56B60 + (v40 ^ 0x3AA)) - 4;
  HIDWORD(v43) = *(_DWORD *)&v68[4 * v52];
  LODWORD(v43) = HIDWORD(v43) ^ 0x58583DEC;
  v69 = v62 ^ 0xDD;
  v70 = (uint64_t)*(&off_1E5B56B60 + v40 - 835);
  LODWORD(v65) = (v43 >> 2) ^ *(_DWORD *)(v70 + 4 * v69) ^ (v65 - ((2 * v65) & 0x88F1948A) - 998716859);
  v71 = (char *)*(&off_1E5B56B60 + (v40 ^ 0x378)) - 4;
  v72 = *(_DWORD *)&v71[4 * (v55 ^ 0xD9)] ^ v61 ^ (v65 - ((2 * v65) & 0x5237C7E6) - 1457789965);
  v278 = v59;
  v276 = v67;
  v274 = v72 ^ v59 ^ 0x2789BBD4;
  v73 = v67 ^ 0xE6 ^ v274;
  HIDWORD(v43) = *(_DWORD *)&v68[4 * (((v73 ^ v64) >> 24) ^ 0x21)];
  LODWORD(v43) = HIDWORD(v43) ^ 0x58583DEC;
  v74 = ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x5237C7E6) - 1457789965) ^ *(_DWORD *)&v71[4
                                                                                    * ((v73 ^ v64) ^ 0xDE)];
  v272 = v73 ^ v64;
  v275 = v72;
  v271 = *(_DWORD *)(v66 + 4 * (((unsigned __int16)(v73 ^ v64) >> 8) ^ 0x1Eu)) ^ *(_DWORD *)(v70 + 4 * (((v73 ^ v64) >> 16) ^ 0x8Fu)) ^ v72 ^ ((((unsigned __int16)(v73 ^ v64) >> 8) ^ 0xEB) - ((2 * (((v73 ^ v64) >> 8) ^ 0x4BA6EB)) & 0x158) + 88687532) ^ (v74 - ((2 * v74) & 0x88F1948A) - 998716859);
  v75 = v271 ^ 0x76E748E2 ^ v72 ^ v59;
  v277 = v64;
  HIDWORD(v43) = *(_DWORD *)&v68[4 * (((v75 ^ v64) >> 24) ^ 0xA2)];
  LODWORD(v43) = HIDWORD(v43) ^ 0x58583DEC;
  v76 = v75 ^ v64 ^ 0xC84590C6;
  LODWORD(v65) = *(_DWORD *)(v66 + 4 * (BYTE1(v76) ^ 0xF5u)) ^ *(_DWORD *)(v70
                                                                           + 4
                                                                           * (((v75 ^ v64) >> 16) ^ 0x6Cu)) ^ (BYTE1(v76) - ((v76 >> 7) & 0x158) + 88687532) ^ ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x88F1948A) - 998716859);
  LODWORD(v270) = v75 ^ v64;
  HIDWORD(v270) = v75;
  HIDWORD(v269) = v271 ^ 0x76E748E2 ^ *(_DWORD *)&v71[4 * ((v75 ^ v64) ^ 0x83)] ^ (v65
                                                                                                  - ((2 * v65) & 0x5237C7E6)
                                                                                                  - 1457789965);
  LODWORD(v269) = HIDWORD(v269) ^ 0x2789BBD4 ^ v75;
  v273 = v73;
  HIDWORD(v268) = v75 ^ v73;
  v77 = v269 ^ 0x8EDEEA78 ^ v75 ^ v73;
  HIDWORD(v43) = *(_DWORD *)&v68[4 * (((v77 ^ v76) >> 24) ^ 0x67)];
  LODWORD(v43) = HIDWORD(v43) ^ 0x58583DEC;
  v78 = (v43 >> 2) ^ *(_DWORD *)(v66 + 4 * (((unsigned __int16)(v77 ^ v76) >> 8) ^ 0x97u)) ^ ((((unsigned __int16)(v77 ^ v76) >> 8) ^ 0x62) - ((2 * (((v77 ^ v76) >> 8) ^ 0xD8B62)) & 0x158) + 88687532);
  v79 = (v78 - ((2 * v78) & 0x5237C7E6) - 1457789965) ^ *(_DWORD *)&v71[4 * ((v77 ^ v76) ^ 0xE1)];
  v80 = HIDWORD(v269) ^ 0x2789BBD4 ^ *(_DWORD *)(v70 + 4 * (((v77 ^ v76 ^ 0x2142BA5) >> 16) ^ 0xB6u)) ^ (v79 - ((2 * v79) & 0x88F1948A) - 998716859);
  HIDWORD(v267) = v77 ^ v76;
  LODWORD(v268) = v77;
  LODWORD(v65) = v77 ^ 0x5EF1BA37;
  HIDWORD(v266) = v80 ^ v269 ^ 0x8EDEEA78;
  LODWORD(v266) = HIDWORD(v266) ^ 0x307C325C ^ v77 ^ 0x5EF1BA37;
  v81 = v266 ^ v77 ^ v76;
  HIDWORD(v43) = *(_DWORD *)&v68[4 * (HIBYTE(v81) ^ 0xA4)];
  LODWORD(v43) = HIDWORD(v43) ^ 0x58583DEC;
  v82 = ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x5237C7E6) - 1457789965) ^ *(_DWORD *)&v71[4 * (v81 ^ 0x18)];
  LODWORD(v267) = v80;
  v83 = *(_DWORD *)(v70 + 4 * (BYTE2(v81) ^ 0xCAu)) ^ *(_DWORD *)(v66
                                                                  + 4
                                                                  * (((unsigned __int16)(v81 ^ 0x7B5D) >> 8) ^ 0xF5u)) ^ v80 ^ (((unsigned __int16)(v81 ^ 0x7B5D) >> 8) - (((v81 ^ 0xCEE37B5D) >> 7) & 0x158) + 88687532) ^ 0xB524E4A7 ^ (v82 - ((2 * v82) & 0x88F1948A) - 998716859);
  v84 = v83 ^ (v65 - ((2 * v65) & 0x6A49C94E) - 1255873369);
  HIDWORD(v43) = *(_DWORD *)&v68[4 * (((v84 ^ v81 ^ 0xCEE37B5D) >> 24) ^ 0x70)];
  LODWORD(v43) = HIDWORD(v43) ^ 0x58583DEC;
  LODWORD(v65) = ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x88F1948A) - 998716859) ^ *(_DWORD *)(v70
                                                                                        + 4
                                                                                        * (((v84 ^ v81 ^ 0xCEE37B5D ^ 0xF3443494) >> 16) ^ 0xE4u));
  LODWORD(v65) = (v65 - ((2 * v65) & 0x5237C7E6) - 1457789965) ^ *(_DWORD *)&v71[4
                                                                               * ((v84 ^ v81 ^ 0x5D) ^ 0x91)];
  LODWORD(v264) = v84 ^ v81 ^ 0xCEE37B5D;
  LODWORD(v65) = (v65 - ((2 * v65) & 0xA928758) + 88687532) ^ *(_DWORD *)(v66
                                                                        + 4
                                                                        * (((unsigned __int16)(v264 ^ 0xBBD4) >> 8) ^ 0xF5u));
  v85 = v83 ^ ((unsigned __int16)(v264 ^ 0xBBD4) >> 8) ^ (v65 - ((2 * v65) & 0x6A49C94E) - 1255873369);
  HIDWORD(v264) = v84;
  v265 = __PAIR64__(v81, v83);
  LODWORD(v263) = v83 ^ ((HIDWORD(v266) ^ 0x307C325C) - ((2 * (HIDWORD(v266) ^ 0x307C325C)) & 0x6A49C94E) - 1255873369);
  HIDWORD(v262) = v85 ^ v263;
  LODWORD(v65) = v85 ^ v263 ^ 0xE6F58988;
  v86 = v65 ^ v84;
  v87 = v65 ^ v84 ^ v264 ^ 0x1A89BBD4;
  HIDWORD(v43) = *(_DWORD *)&v68[4 * (HIBYTE(v87) ^ 0x43)];
  LODWORD(v43) = HIDWORD(v43) ^ 0x58583DEC;
  *(_QWORD *)((char *)&v262 + 4) = __PAIR64__(v65 ^ v84, v87);
  v88 = v87 ^ 0x299B7ABE;
  v89 = *(_DWORD *)(v66 + 4 * (((unsigned __int16)(v87 ^ 0x7ABE) >> 8) ^ 0xF5u)) ^ *(_DWORD *)(v70 + 4 * (((v87 ^ 0x4D501F31) >> 16) ^ 0xE2u)) ^ (((unsigned __int16)(v87 ^ 0x7ABE) >> 8) - (((v87 ^ 0x299B7ABE) >> 7) & 0x158) + 88687532) ^ ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x88F1948A) - 998716859);
  HIDWORD(v263) = v85;
  v90 = v85 ^ *(_DWORD *)&v71[4 * (v87 ^ 0xFB)] ^ (v89 - ((2 * v89) & 0x5237C7E6) - 1457789965);
  HIDWORD(v261) = v90 ^ v65;
  LODWORD(v65) = v90 ^ v65 ^ 0x5BF36347;
  LODWORD(v261) = v65 ^ v86;
  v91 = v65 ^ v86 ^ 0x2745D0FF;
  v92 = v91 ^ v88;
  v93 = v91 ^ v88 ^ 0x3DCC6B2B;
  LODWORD(v56) = (BYTE1(v93) - ((v93 >> 7) & 0x158) + 88687532) ^ *(_DWORD *)(v66 + 4 * (BYTE1(v93) ^ 0xF5u));
  v94 = (v56 - ((2 * v56) & 0x5237C7E6) - 1457789965) ^ *(_DWORD *)&v71[4 * ((v91 ^ v88) ^ 0x6E)];
  HIDWORD(v260) = v92;
  HIDWORD(v43) = *(_DWORD *)&v68[4 * (HIBYTE(v92) ^ 0x57)];
  LODWORD(v43) = HIDWORD(v43) ^ 0x58583DEC;
  LODWORD(v262) = v90;
  LODWORD(v260) = (v43 >> 2) ^ *(_DWORD *)(v70 + 4 * (((v92 ^ 0x516EF336) >> 16) ^ 0x8Bu)) ^ v90 ^ (v94 - ((2 * v94) & 0x88F1948A) - 998716859);
  v95 = v260 ^ 0x930000ED ^ v65;
  LODWORD(v259) = v95 ^ 0x8D06EA22 ^ v91;
  v96 = v259 ^ v93;
  v97 = v259 ^ v93 ^ 0x9289BB39;
  HIDWORD(v43) = *(_DWORD *)&v68[4 * (HIBYTE(v96) ^ 0x39)];
  LODWORD(v43) = HIDWORD(v43) ^ 0x58583DEC;
  HIDWORD(v258) = v96;
  v98 = *(_DWORD *)&v71[4 * (v97 ^ 0x3D)] ^ *(_DWORD *)(v66
                                                                       + 4
                                                                       * (((unsigned __int16)(v96 ^ 0xAA41) >> 8) ^ 0xF5u)) ^ 0xAC52A05F ^ (v43 >> 2);
  v99 = *(_DWORD *)(v70 + 4 * (BYTE2(v97) ^ 0x7Eu)) ^ v260 ^ 0x930000ED ^ ((unsigned __int16)(v96 ^ 0xAA41) >> 8) ^ 0x2C5BC664 ^ (v98 - ((2 * v98) & 0x88F1948A) - 998716859);
  HIDWORD(v259) = v95;
  v100 = v99 ^ (v91 - ((2 * v91) & 0x58B78CC8) + 744212068);
  v101 = v100 ^ v96 ^ 0x53DEAA41;
  HIDWORD(v43) = *(_DWORD *)&v68[4 * (HIBYTE(v101) ^ 0x44)];
  LODWORD(v43) = HIDWORD(v43) ^ 0x58583DEC;
  LODWORD(v51) = (v95 ^ 0x8D06EA22) - 2 * ((v95 ^ 0x8D06EA22) & 0x2C5BC665 ^ v95 & 1);
  v102 = *(_DWORD *)(v66 + 4 * (BYTE1(v101) ^ 0xFDu)) ^ *(_DWORD *)&v71[4
                                                                        * ((v100 ^ v96 ^ 0x41) ^ 0xC4)] ^ ((BYTE1(v101) ^ 8) - 2 * (((v101 >> 8) ^ 0x2E3F08) & 0xBE ^ (v101 >> 8) & 0x12) + 88687532) ^ ((v43 >> 2) - ((2 * (v43 >> 2)) & 0x5237C7E6) - 1457789965);
  HIDWORD(v257) = v101 ^ 0x413A9491;
  v103 = (v102 - ((2 * v102) & 0x88F1948A) - 998716859) ^ *(_DWORD *)(v70 + 4 * (BYTE2(v101) ^ 0x16u));
  v104 = (uint64_t)*(&off_1E5B56B60 + (v40 ^ 0x3CC));
  LODWORD(v65) = *(unsigned __int8 *)(v104 + (*(unsigned __int8 *)(v39 - 109) ^ 0xA5));
  HIDWORD(v43) = v65 ^ 0x1A;
  LODWORD(v43) = (v65 ^ 0x80) << 24;
  v105 = (uint64_t)*(&off_1E5B56B60 + (v40 ^ 0x37C));
  v106 = (char *)*(&off_1E5B56B60 + v40 - 747) - 8;
  v255 = v104;
  v256 = (char *)*(&off_1E5B56B60 + (v40 ^ 0x3E0)) - 12;
  v107 = (*(unsigned __int8 *)(v104 + (*(unsigned __int8 *)(v39 - 101) ^ 0x60)) ^ 0x51) & 0xFFFF00FF | ((*(unsigned __int8 *)(v105 + (*(unsigned __int8 *)(v39 - 103) ^ 5)) ^ 0x58) << 16) | (((v256[*(unsigned __int8 *)(v39 - 102) ^ 4] + (*(_BYTE *)(v39 - 102) ^ 0xB) + 97) ^ 0x33) << 8) | ((v106[*(unsigned __int8 *)(v39 - 104) ^ 0x1CLL] ^ 0x29) << 24);
  v253 = v106;
  v254 = v105;
  v108 = (*(unsigned __int8 *)(v104 + (*(unsigned __int8 *)(v39 - 97) ^ 0x7BLL)) ^ 0xE5) & 0xFFFF00FF | ((((*(_BYTE *)(v39 - 98) ^ 0xD0) + v256[*(unsigned __int8 *)(v39 - 98) ^ 0xDFLL] + 97) ^ 0xE4) << 8) | ((*(unsigned __int8 *)(v105 + (*(unsigned __int8 *)(v39 - 99) ^ 0xAALL)) ^ 0x6A) << 16) | ((v106[*(unsigned __int8 *)(v39 - 100) ^ 0x45] ^ 0xE6) << 24);
  LODWORD(v41) = (*(unsigned __int8 *)(v104 + (*(unsigned __int8 *)(v39 - 105) ^ 0x28)) ^ 0x90) & 0xFFFF00FF | ((((*(_BYTE *)(v39 - 106) ^ 0xAC) + v256[*(unsigned __int8 *)(v39 - 106) ^ 0xA3] + 97) ^ 0xF6) << 8) | ((v106[*(unsigned __int8 *)(v39 - 108) ^ 0xB2] ^ 0xDE) << 24) | ((*(unsigned __int8 *)(v105 + (*(unsigned __int8 *)(v39 - 107) ^ 0x27)) ^ 0x3C) << 16);
  LODWORD(v104) = (((((v43 >> 30) ^ 0xDB) >> 2) | (((v43 >> 30) ^ 0xDB) << 6)) | ((*(unsigned __int8 *)(v105 + (*(unsigned __int8 *)(v39 - 111) ^ 0x7ALL)) ^ 9) << 16) | ((v106[*(unsigned __int8 *)(v39 - 112) ^ 0x78] ^ 0xDC) << 24) | (((v256[*(unsigned __int8 *)(v39 - 110) ^ 0x5DLL] + (*(_BYTE *)(v39 - 110) ^ 0x52) + 97) ^ 0x5D) << 8)) ^ 0x9590EA88;
  v109 = v107 ^ 0xCD410EED;
  HIDWORD(v252) = a1 - 905965303;
  v110 = v103 - ((2 * v103) & 0x58B78CC8) + 744212068;
  HIDWORD(v251) = v44 ^ 0x638;
  LODWORD(v251) = v44 ^ 0x676;
  LODWORD(v250) = v99 ^ (v51 + 744212068);
  HIDWORD(v250) = v44 ^ 0x67F;
  HIDWORD(v249) = v44 ^ 0x66C;
  LODWORD(v249) = v44 ^ 0x63C;
  LODWORD(v258) = v99;
  LODWORD(v248) = v110 ^ v99;
  HIDWORD(v248) = v44 ^ 0x685;
  HIDWORD(v247) = v44 ^ 0x6F0;
  *(_DWORD *)(v39 - 136) = v44;
  LODWORD(v247) = v44 ^ 0x6C6;
  LODWORD(v257) = v100 ^ 0x626A2240;
  LODWORD(v252) = (v51 + 744212068) ^ 0x3DC8BA5D ^ v110;
  HIDWORD(a4) = v252 ^ v100 ^ 0x626A2240;
  v111 = *(unsigned __int8 **)(v39 - 120);
  *(_QWORD *)(v39 - 216) = 7;
  LOBYTE(v110) = v111[7];
  *(_QWORD *)(v39 - 184) = 12;
  v112 = *(_DWORD *)(v39 - 136);
  v113 = *(unsigned __int8 *)(v255 + (v110 ^ (v112 + 88)));
  v114 = v111[12] ^ 0x60;
  *(_QWORD *)(v39 - 176) = 8;
  *(_QWORD *)(v39 - 144) = 1;
  LODWORD(v65) = v106[v114] ^ 0x5D;
  v115 = v106[v111[8] ^ 0xC1] ^ 0xE9;
  LODWORD(v114) = *(unsigned __int8 *)(v105 + (v111[1] ^ 0x66)) ^ 0xE5;
  *(_QWORD *)(v39 - 152) = 15;
  v116 = (_DWORD)v114 << 16;
  v117 = v111[15] ^ 0xE9;
  *(_QWORD *)(v39 - 168) = 11;
  LODWORD(v117) = *(unsigned __int8 *)(v255 + v117) ^ 0x47;
  LODWORD(v64) = v117 | ((_DWORD)v65 << 24);
  LODWORD(v65) = *(unsigned __int8 *)(v255 + (v111[11] ^ 0xC3));
  *(_QWORD *)(v39 - 192) = 0;
  v118 = v116 | ((v106[*v111 ^ 0x30] ^ 0x6D) << 24);
  LOBYTE(v101) = v65 ^ 0x8D;
  LODWORD(v65) = v65 ^ 0x8D | (v115 << 24);
  *(_QWORD *)(v39 - 160) = 2;
  v119 = v118 & 0xFFFF00FF | (((v256[v111[2] ^ 0xC0] + (v111[2] ^ 0xCF) + 97) ^ 0xF9) << 8);
  v120 = v113 ^ 0x97;
  v121 = v113 ^ 0x97 | ((v106[v111[4] ^ 0xFCLL] ^ 0xD3) << 24);
  *(_QWORD *)(v39 - 232) = 4;
  *(_QWORD *)(v39 - 224) = 5;
  v122 = *(unsigned __int8 *)(v105 + (v111[5] ^ 0xA9)) ^ 0xD8;
  *(_QWORD *)(v39 - 240) = 9;
  v123 = (*(unsigned __int8 *)(v105 + (v111[9] ^ 0x5DLL)) ^ 0x36) << 16;
  *(_QWORD *)(v39 - 208) = 10;
  LODWORD(v65) = v123 & 0xFFFF00FF | (((v256[v111[10] ^ 0xD5] + (v111[10] ^ 0xDA) + 97) ^ 0xCF) << 8) | v65;
  *(_QWORD *)(v39 - 200) = 14;
  v124 = (v256[v111[14] ^ 0xE4] + (v111[14] ^ 0xEB) - 31) << 8;
  *(_QWORD *)(v39 - 256) = 13;
  *(_QWORD *)(v39 - 248) = 3;
  v125 = v124 | ((*(unsigned __int8 *)(v105 + (v111[13] ^ 0x92)) ^ 0xB) << 16);
  v126 = *(unsigned __int8 *)(v255 + (v111[3] ^ 0xDCLL)) ^ 0x53;
  LODWORD(v64) = v125 | v64;
  v127 = (v122 << 16) | (((v256[v111[6] ^ 0x4FLL] + (v111[6] ^ 0x40) + 97) ^ 0xB7) << 8) | v121;
  v128 = v104 ^ v61 ^ ((v126 | v119) + 740905905 - 2 * ((v126 | v119) & 0x2C2953BB ^ v126 & 0xA));
  v129 = v41 ^ 0xA34AA7BD ^ v278 ^ (v127 + 452140548 - 2 * (v127 & 0x1AF31E15 ^ v120 & 0x11111111));
  LODWORD(v56) = v108 ^ 0xBDF142FC ^ v277 ^ (v64 + 71891781 - 2 * (v64 & 0x448FB5F ^ v117 & 0x1A));
  v130 = v109 ^ v276 ^ (v65 + 1962456916 - 2 * (v65 & 0x74F8B75C ^ v101 & 8));
  *(_DWORD *)(v39 - 128) = 375528432;
  v131 = (char *)*(&off_1E5B56B60 + HIDWORD(v250)) - 8;
  v132 = *(_DWORD *)&v131[4 * (HIBYTE(v130) ^ 0x3F)];
  HIDWORD(v43) = ~v132;
  LODWORD(v43) = v132 ^ 0x6A0B473E;
  v133 = (char *)*(&off_1E5B56B60 + HIDWORD(v251)) - 4;
  LODWORD(v65) = (v43 >> 1) ^ *(_DWORD *)&v133[4 * (BYTE2(v56) ^ 0x34)] ^ ((BYTE2(v56) ^ 0x68)
                                                                         + 1304210440
                                                                         - 2
                                                                         * ((WORD1(v56) ^ 0xB768) & 0xD ^ WORD1(v56) & 5));
  v134 = (char *)*(&off_1E5B56B60 + v251) - 4;
  v135 = *(_DWORD *)&v134[4 * (v130 ^ 0xC6)] ^ *(_DWORD *)&v133[4 * (BYTE2(v128) ^ 0x89)] ^ ((BYTE2(v128) ^ 0xD5) + 1304210440 - ((v128 >> 15) & 0x10)) ^ ((v130 ^ 0xAB) + 375528433 + ((2 * (v130 ^ 0xAB) + 254) & 0x2E2 ^ 0xCDFB7FFF));
  v136 = *(_DWORD *)&v133[4 * (BYTE2(v129) ^ 0x8C)] ^ *(_DWORD *)&v134[4 * (v56 ^ 0xB6)] ^ ((v56 ^ 0xDB) + 375528433 + ((2 * (v56 ^ 0xDB) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ ((BYTE2(v129) ^ 0xD0) + 1304210440 - ((v129 >> 15) & 0x10));
  v137 = *(_DWORD *)&v131[4 * (HIBYTE(v129) ^ 0xC8)];
  HIDWORD(v43) = ~v137;
  LODWORD(v43) = v137 ^ 0x6A0B473E;
  v138 = *(_DWORD *)&v131[4 * (HIBYTE(v128) ^ 0x6C)];
  LODWORD(v117) = ((BYTE2(v130) ^ 0xAD) + 1304210440 - 2 * ((BYTE2(v130) ^ 0xAD) & 0x18 ^ HIWORD(v130) & 0x10)) ^ ((v128 ^ 0x71) + 375528432 - ((2 * (v128 ^ 0x71) + 842892542) & 0x320482E2)) ^ *(_DWORD *)&v134[4 * (v128 ^ 0x1C)] ^ (v43 >> 1) ^ *(_DWORD *)&v133[4 * (BYTE2(v130) ^ 0xF1)];
  HIDWORD(v43) = ~v138;
  LODWORD(v43) = v138 ^ 0x6A0B473E;
  LODWORD(v64) = v43 >> 1;
  v139 = *(_DWORD *)&v131[4 * (BYTE3(v56) ^ 0xB7)];
  HIDWORD(v43) = ~v139;
  LODWORD(v43) = v139 ^ 0x6A0B473E;
  v140 = (char *)*(&off_1E5B56B60 + v112 - 1751) - 12;
  v141 = (v129 ^ 0x10) + 375528433 + ((2 * (v129 ^ 0x10) + 254) & 0x2E2 ^ 0xCDFB7FFF);
  LODWORD(v65) = *(_DWORD *)&v140[4 * (BYTE1(v128) ^ 0xDE)] ^ v273 ^ *(_DWORD *)&v134[4 * (v129 ^ 0x7D)] ^ (v65 + 1498568468 - ((2 * v65) & 0xB2A4AE28));
  v142 = *(_DWORD *)&v140[4 * (BYTE1(v56) ^ 0x66)];
  v143 = (v135 + 1498568468 - ((2 * v135) & 0xB2A4AE28)) ^ *(_DWORD *)&v140[4 * (BYTE1(v129) ^ 0x2F)] ^ (v43 >> 1);
  v144 = v143 - ((2 * v143) & 0xFBECD266);
  LODWORD(v56) = v65 ^ v141;
  v145 = *(_DWORD *)&v140[4 * (BYTE1(v130) ^ 0x29)] ^ v275 ^ v64 ^ (v136 + 1498568468 - ((2 * v136) & 0xB2A4AE28));
  LODWORD(v117) = v142 ^ v274 ^ (v117 + 1498568468 - ((2 * v117) & 0xB2A4AE28));
  v146 = *(_DWORD *)&v131[4 * ((v65 ^ ~v141) >> 24)];
  HIDWORD(v43) = ~v146;
  LODWORD(v43) = v146 ^ 0x6A0B473E;
  v147 = v43 >> 1;
  v148 = *(_DWORD *)&v131[4 * (HIBYTE(v145) ^ 0x91)];
  HIDWORD(v43) = ~v148;
  LODWORD(v43) = v148 ^ 0x6A0B473E;
  v149 = v43 >> 1;
  v150 = *(_DWORD *)&v131[4 * (BYTE3(v117) ^ 0xA3)];
  HIDWORD(v43) = ~v150;
  LODWORD(v43) = v150 ^ 0x6A0B473E;
  v151 = v149 ^ *(_DWORD *)&v133[4 * (BYTE2(v117) ^ 0xF0)] ^ ((BYTE2(v117) ^ 0xAC)
                                                            + 1304210440
                                                            - 2 * ((WORD1(v117) ^ 0xA3AC) & 0x19 ^ WORD1(v117) & 0x11));
  LODWORD(v52) = (v43 >> 1) ^ *(_DWORD *)&v134[4 * (v145 ^ 0x7B)] ^ *(_DWORD *)&v133[4 * (BYTE2(v56) ^ 0x15)] ^ ((BYTE2(v56) ^ 0x49) + 1304210440 - ((2 * (WORD1(v56) ^ 0xFF49)) & 0x10)) ^ ((v145 ^ 0x16) + 375528433 + ((2 * (v145 ^ 0x16) + 254) & 0x2E2 ^ 0xCDFB7FFF));
  v152 = v52 + 1498568468 - ((2 * v52) & 0xB2A4AE28);
  LODWORD(v52) = (v144 - 34182861) ^ v272;
  v153 = (v151 + 1498568468 - ((2 * v151) & 0xB2A4AE28)) ^ *(_DWORD *)&v140[4 * (BYTE1(v56) ^ 0x2C)];
  LODWORD(v65) = v147 ^ *(_DWORD *)&v134[4 * (v117 ^ 3)] ^ ((v117 ^ 0x6E)
                                                                           + 375528433
                                                                           + ((2 * (v117 ^ 0x6E) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ *(_DWORD *)&v133[4 * (BYTE2(v52) ^ 0x93)] ^ ((BYTE2(v52) ^ 0xCF) + 1304210440 - ((2 * (WORD1(v52) ^ 0x93CF)) & 0x10));
  v154 = *(_DWORD *)&v133[4 * (BYTE2(v145) ^ 0x2E)] ^ ((BYTE2(v145) ^ 0x72) + 1304210440 - ((v145 >> 15) & 0x10));
  LODWORD(v41) = *(_DWORD *)(v39 - 128);
  v155 = *(_DWORD *)&v131[4 * (BYTE3(v52) ^ 0x93)];
  HIDWORD(v43) = ~v155;
  LODWORD(v43) = v155 ^ 0x6A0B473E;
  LODWORD(v117) = ((v56 ^ 0xFC)
                 + (_DWORD)v41
                 - ((2 * (v56 ^ 0xFC) + 842892542) & 0x320482E2)) ^ *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0xBD)] ^ *(_DWORD *)&v134[4 * (v56 ^ 0x91)] ^ (v154 + 1498568468 - ((2 * v154) & 0xB2A4AE28));
  LODWORD(v56) = ((v52 ^ 0x7E) - 1726037377) ^ v271 ^ *(_DWORD *)&v134[4
                                                                                      * (v52 ^ 0x13)] ^ (v153 + 2101565809 - ((2 * v153) & 0xFA86B2E2));
  v156 = *(_DWORD *)&v140[4 * (BYTE1(v145) ^ 0x57)] ^ HIDWORD(v268) ^ (v65 + 1498568468 - ((2 * v65) & 0xB2A4AE28));
  LODWORD(v117) = ((v117 ^ (v43 >> 1)) - ((2 * (v117 ^ (v43 >> 1))) & 0xD087B460) + 1749277232) ^ v270;
  LODWORD(v65) = *(_DWORD *)&v131[4 * (BYTE3(v117) ^ 0x85)];
  v157 = *(_DWORD *)&v140[4 * (BYTE1(v52) ^ 0xF2)] ^ v75 ^ v152;
  HIDWORD(v43) = ~(_DWORD)v65;
  LODWORD(v43) = v65 ^ 0x6A0B473E;
  LODWORD(v65) = (v140[4 * (BYTE1(v52) ^ 0xF2)] ^ v75 ^ v152);
  LODWORD(v65) = ((v65 ^ 0xA1) + 375528433 + ((2 * (v65 ^ 0xA1) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ *(_DWORD *)&v134[4 * (v65 ^ 0xCC)];
  v158 = *(_DWORD *)&v133[4 * (BYTE2(v56) ^ 0xDB)] ^ ((BYTE2(v56) ^ 0x87)
                                                    + 1304210440
                                                    - ((v56 >> 15) & 0x10)) ^ (v43 >> 1);
  LODWORD(v65) = (v65 + 1498568468 - ((2 * v65) & 0xB2A4AE28)) ^ *(_DWORD *)&v140[4 * (BYTE1(v56) ^ 0xDE)];
  LODWORD(v52) = ((v56 ^ 0x9E)
                + 375528433
                + ((2 * (v56 ^ 0x9E) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ *(_DWORD *)&v134[4 * (v56 ^ 0xF3)];
  v159 = v52 + 1498568468 - ((2 * v52) & 0xB2A4AE28);
  v160 = (v158 + 1498568468 - ((2 * v158) & 0xB2A4AE28)) ^ *(_DWORD *)&v140[4 * (BYTE1(v157) ^ 0x57)];
  v161 = ((v156 ^ 0x740CBC3A) >> 16);
  LODWORD(v52) = v161 + 1304210440 - (((v156 ^ 0x740CBC3A) >> 15) & 0x10);
  LODWORD(v64) = *(_DWORD *)&v131[4 * (HIBYTE(v156) ^ 0x37)];
  HIDWORD(v43) = ~(_DWORD)v64;
  LODWORD(v43) = v64 ^ 0x6A0B473E;
  LODWORD(v64) = v43 >> 1;
  LODWORD(v56) = *(_DWORD *)&v131[4 * (BYTE3(v56) ^ 0x3A)];
  HIDWORD(v43) = ~(_DWORD)v56;
  LODWORD(v43) = v56 ^ 0x6A0B473E;
  LODWORD(v56) = BYTE2(v157) ^ *(_DWORD *)&v133[4 * (BYTE2(v157) ^ 0xF6)] ^ *(_DWORD *)&v140[4
                                                                                           * ((unsigned __int16)(v156 ^ 0xBC3A) >> 8)] ^ 0x14EEFBB6 ^ (v43 >> 1);
  LODWORD(v56) = ((v117 ^ 0x20) - 1726037377) ^ HIDWORD(v269) ^ *(_DWORD *)&v134[4
                                                                                                * (v117 ^ 0x4D)] ^ (v56 + 2101565809 - ((2 * v56) & 0xFA86B2E2));
  v162 = ((v156 ^ 0x3A) - 1726037377) ^ HIDWORD(v267) ^ *(_DWORD *)&v134[4
                                                                                        * (v156 ^ 0x57)] ^ (v160 + 2101565809 - ((2 * v160) & 0xFA86B2E2));
  v163 = *(_DWORD *)&v131[4 * (HIBYTE(v157) ^ 0x7C)];
  HIDWORD(v43) = ~v163;
  LODWORD(v43) = v163 ^ 0x6A0B473E;
  v164 = *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0x3A)];
  LODWORD(v117) = *(_DWORD *)&v133[4 * (BYTE2(v117) ^ 0xC5)] ^ v268 ^ BYTE2(v117) ^ v64 ^ (v65
                                                                                         + 1304210440
                                                                                         - ((2 * v65) & 0x9B795810));
  v165 = v164 ^ v269 ^ v52 ^ *(_DWORD *)&v133[4 * (v161 ^ 0x5C)] ^ (v43 >> 1) ^ v159;
  LODWORD(v65) = ((v117 ^ 0x5A)
                + 375528433
                + ((2 * (v117 ^ 0x5A) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ *(_DWORD *)&v134[4 * (v117 ^ 0x37)];
  v166 = *(_DWORD *)&v131[4 * (BYTE3(v56) ^ 0x5B)];
  v167 = v65 + 1498568468 - ((2 * v65) & 0xB2A4AE28);
  HIDWORD(v43) = ~v166;
  LODWORD(v43) = v166 ^ 0x6A0B473E;
  v168 = (v43 >> 1) ^ ((v162 ^ 0x72)
                     + (_DWORD)v41
                     - ((2 * (v162 ^ 0x72) + 842892542) & 0x320482E2)) ^ *(_DWORD *)&v134[4 * (v162 ^ 0x1F)];
  LODWORD(v65) = *(_DWORD *)&v131[4 * (HIBYTE(v162) ^ 0x28)];
  HIDWORD(v43) = ~(_DWORD)v65;
  LODWORD(v43) = v65 ^ 0x6A0B473E;
  v169 = v43 >> 1;
  v170 = v168 + 1498568468 - ((2 * v168) & 0xB2A4AE28);
  v171 = *(_DWORD *)&v131[4 * (BYTE3(v117) ^ 0xB9)];
  HIDWORD(v43) = ~v171;
  LODWORD(v43) = v171 ^ 0x6A0B473E;
  v172 = v43 >> 1;
  v173 = *(_DWORD *)&v131[4 * (HIBYTE(v165) ^ 0xB4)];
  HIDWORD(v43) = ~v173;
  LODWORD(v43) = v173 ^ 0x6A0B473E;
  v174 = v172 ^ *(_DWORD *)&v134[4 * (v165 ^ 0x8B)] ^ ((v165 ^ 0xE6)
                                                                      + 375528433
                                                                      + ((2 * (v165 ^ 0xE6) + 254) & 0x2E2 ^ 0xCDFB7FFF));
  v175 = BYTE2(v56);
  v176 = (BYTE2(v56) ^ 0x95) + 1304210440 - ((v56 >> 15) & 0x10);
  LODWORD(v66) = v56;
  LODWORD(v104) = (v56 ^ 0xF4)
                + 375528433
                + ((2 * (v56 ^ 0xF4) + 254) & 0x2E2 ^ 0xCDFB7FFF);
  v177 = ((BYTE2(v162) ^ 0x14) + 1304210440 - ((v162 >> 15) & 0x10)) ^ v266 ^ *(_DWORD *)&v140[4 * (BYTE1(v56) ^ 0x1F)] ^ *(_DWORD *)&v133[4 * (BYTE2(v162) ^ 0x48)] ^ (v174 + 1498568468 - ((2 * v174) & 0xB2A4AE28));
  LODWORD(v56) = *(_DWORD *)&v140[4 * ((unsigned __int16)(v117 ^ 0xA55A) >> 8)] ^ v267 ^ ((BYTE2(v165) ^ 0x59) + 1304210440 - ((2 * (HIWORD(v165) ^ 0xB459)) & 0x10)) ^ *(_DWORD *)&v133[4 * (BYTE2(v165) ^ 5)] ^ v170;
  LODWORD(v117) = (((v117 ^ 0xFA64A55A) >> 16)
                 + 1304210440
                 - ((v117 >> 15) & 0x10)) ^ HIDWORD(v266) ^ *(_DWORD *)&v134[4
                                                                                         * (v66 ^ 0x99)] ^ v104 ^ ((v43 >> 1) + 1498568468 - ((2 * (v43 >> 1)) & 0xB2A4AE28)) ^ *(_DWORD *)&v140[4 * (BYTE1(v162) ^ 0x12)] ^ *(_DWORD *)&v133[4 * (((v117 ^ 0xFA64A55A) >> 16) ^ 0x5C)];
  v178 = *(_DWORD *)&v140[4 * (BYTE1(v165) ^ 0x34)] ^ HIDWORD(v265) ^ v176 ^ *(_DWORD *)&v133[4 * (v175 ^ 0xC9)] ^ v167 ^ v169;
  v179 = *(_DWORD *)&v131[4 * (HIBYTE(v178) ^ 0xEB)];
  HIDWORD(v43) = ~v179;
  LODWORD(v43) = v179 ^ 0x6A0B473E;
  v180 = (v43 >> 1) + 1498568468 - ((2 * (v43 >> 1)) & 0xB2A4AE28);
  v181 = ((BYTE2(v117) ^ 0x81) + 1304210440 - ((v117 >> 15) & 0x10)) ^ *(_DWORD *)&v133[4 * (BYTE2(v117) ^ 0xDD)];
  LODWORD(v52) = ((v117 ^ 0x51)
                + 375528433
                + ((2 * (v117 ^ 0x51) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ *(_DWORD *)&v134[4 * (v117 ^ 0x3C)];
  LODWORD(v104) = *(_DWORD *)&v133[4 * (BYTE2(v177) ^ 0xDB)] ^ ((BYTE2(v177) ^ 0x87) + 1304210440 - ((v177 >> 15) & 0x10));
  v182 = *(_DWORD *)&v131[4 * (BYTE3(v117) ^ 0x14)];
  HIDWORD(v43) = ~v182;
  LODWORD(v43) = v182 ^ 0x6A0B473E;
  LODWORD(v105) = v43 >> 1;
  v183 = *(_DWORD *)&v131[4 * (BYTE3(v56) ^ 0x9A)];
  HIDWORD(v43) = ~v183;
  LODWORD(v43) = v183 ^ 0x6A0B473E;
  LODWORD(v66) = *(_DWORD *)&v133[4 * (((v178 ^ 0xA87CE98B) >> 16) ^ 0x5C)] ^ ((v178 ^ 0xA87CE98B) >> 16) ^ (v52 + 1304210440 - ((2 * v52) & 0x9B795810));
  v184 = *(_DWORD *)&v134[4 * (v178 ^ 0xE6)] ^ *(_DWORD *)&v140[4 * (BYTE1(v177) ^ 0xDE)] ^ ((v178 ^ 0x8B) + 375528433 + ((2 * (v178 ^ 0x8B) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ (v181 + 1498568468 - ((2 * v181) & 0xB2A4AE28)) ^ (v43 >> 1);
  v185 = *(_DWORD *)&v131[4 * (HIBYTE(v177) ^ 0x77)];
  HIDWORD(v43) = ~v185;
  LODWORD(v43) = v185 ^ 0x6A0B473E;
  v186 = *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0x34)] ^ v264 ^ ((BYTE2(v56) ^ 0xE9)
                                                            + 1304210440
                                                            - ((2 * (WORD1(v56) ^ 0x9AE9)) & 0x10)) ^ *(_DWORD *)&v133[4 * (BYTE2(v56) ^ 0xB5)] ^ ((v177 ^ 0x9E) + 375528433 + ((2 * (v177 ^ 0x9E) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ *(_DWORD *)&v134[4 * (v177 ^ 0xF3)] ^ v180;
  LODWORD(v65) = *(_DWORD *)&v140[4 * (BYTE1(v178) ^ 0xB)] ^ v263 ^ ((v56 ^ 0xA8)
                                                                   + 375528433
                                                                   + ((2 * (v56 ^ 0xA8) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ *(_DWORD *)&v134[4 * (v56 ^ 0xC5)] ^ v105 ^ (v104 + 1498568468 - ((2 * v104) & 0xB2A4AE28));
  LODWORD(v56) = *(_DWORD *)&v140[4 * (BYTE1(v56) ^ 0x2D)] ^ v84 ^ (v43 >> 1) ^ (v66
                                                                               + 1498568468
                                                                               - ((2 * v66) & 0xB2A4AE28));
  BYTE1(v177) = BYTE1(v65) ^ 0x65;
  LODWORD(v117) = (v184 - 1255873369 - ((2 * v184) & 0x6A49C94E)) ^ v265;
  LODWORD(v52) = *(_DWORD *)&v131[4 * (BYTE3(v65) ^ 0x6D)];
  HIDWORD(v43) = ~(_DWORD)v52;
  LODWORD(v43) = v52 ^ 0x6A0B473E;
  v187 = v43 >> 1;
  LODWORD(v104) = *(_DWORD *)&v131[4 * (BYTE3(v117) ^ 0xFD)];
  v188 = *(_DWORD *)&v133[4 * (((v65 ^ 0x2E0E654A) >> 16) ^ 0x5C)] ^ (~(_DWORD)v104 << 31) ^ (v104 >> 1) ^ (((v65 ^ 0x2E0E654A) >> 16) + 1304210440 - (((v65 ^ 0x2E0E654A) >> 15) & 0x10)) ^ 0x3505A39F;
  LODWORD(v66) = ((v65 ^ 0x4A)
                + 375528433
                + ((2 * (v65 ^ 0x4A) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ *(_DWORD *)&v134[4 * (v65 ^ 0x27)];
  LODWORD(v65) = *(_DWORD *)&v131[4 * (BYTE3(v56) ^ 0xAE)];
  HIDWORD(v43) = ~(_DWORD)v65;
  LODWORD(v43) = v65 ^ 0x6A0B473E;
  v189 = v188 + 1498568468 - ((2 * v188) & 0xB2A4AE28);
  v190 = (v43 >> 1) ^ *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0xA4)] ^ (v66 + 1498568468 - ((2 * v66) & 0xB2A4AE28));
  v191 = v190 + 1304210440 - ((2 * v190) & 0x9B795810);
  v192 = *(_DWORD *)&v133[4 * (BYTE2(v56) ^ 0x3A)] ^ v187 ^ ((BYTE2(v56) ^ 0x66)
                                                           + 1304210440
                                                           - ((v56 >> 15) & 0x10)) ^ *(_DWORD *)&v134[4 * (v117 ^ 0x4D)] ^ ((v117 ^ 0x20) + 375528433 + ((2 * (v117 ^ 0x20) + 254) & 0x2E2 ^ 0xCDFB7FFF));
  LODWORD(v104) = ((v56 ^ 0xB3)
                 - 227468908
                 + ((2 * (v56 ^ 0xB3) + 254) & 0x228 ^ 0xCDDB7BFF)) ^ *(_DWORD *)&v140[4 * BYTE1(v177)];
  LODWORD(v52) = (v104 + 2101565809 - ((2 * v104) & 0xFA86B2E2)) ^ *(_DWORD *)&v134[4 * (v56 ^ 0xDE)];
  LODWORD(v117) = *(_DWORD *)&v133[4 * (BYTE2(v117) ^ 0x40)] ^ ((BYTE2(v117) ^ 0x1C)
                                                              + 1304210440
                                                              - ((2 * (WORD1(v117) ^ 0xFD1C)) & 0x10));
  LODWORD(v104) = v117 ^ 0xD9E215AF ^ -(v117 ^ 0xD9E215AF);
  LODWORD(v117) = v117 ^ v52 ^ 0x431D28D3;
  LODWORD(v52) = v52 ^ 0x6500C283;
  LODWORD(v117) = v104 ^ (v117 + v52 + 1);
  LODWORD(v104) = *(_DWORD *)&v131[4 * ((v186 ^ 0x3F162902u) >> 24)];
  HIDWORD(v43) = ~(_DWORD)v104;
  LODWORD(v43) = v104 ^ 0x6A0B473E;
  LODWORD(v117) = v117 + v52;
  LODWORD(v52) = *(_DWORD *)&v140[4 * (BYTE1(v56) ^ 0x7C)];
  LODWORD(v56) = ((v186 ^ 0x3F162902u) >> 16) ^ DWORD2(v262) ^ *(_DWORD *)&v133[4
                                                                                               * (((v186 ^ 0x3F162902u) >> 16) ^ 0x5C)] ^ v191;
  LODWORD(v117) = (v43 >> 1) ^ DWORD1(v262) ^ v117;
  v193 = *(_DWORD *)&v140[4 * (BYTE1(v186) ^ 0xCB)] ^ HIDWORD(v262) ^ (v192 + 1498568468 - ((2 * v192) & 0xB2A4AE28));
  v194 = v52 ^ HIDWORD(v263) ^ ((v186 ^ 2)
                              + 375528433
                              + ((2 * (v186 ^ 2) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ *(_DWORD *)&v134[4 * (v186 ^ 0x6F)] ^ v189;
  v195 = ((BYTE2(v194) ^ 0xE9) + 1304210440 - ((2 * (HIWORD(v194) ^ 0xB8E9)) & 0x10)) ^ *(_DWORD *)&v133[4 * (BYTE2(v194) ^ 0xB5)];
  LODWORD(v64) = v195 + 1498568468 - ((2 * v195) & 0xB2A4AE28);
  v196 = *(_DWORD *)&v131[4 * (BYTE3(v56) ^ 0x9D)];
  HIDWORD(v43) = ~v196;
  LODWORD(v43) = v196 ^ 0x6A0B473E;
  LODWORD(v105) = v43 >> 1;
  v197 = *(_DWORD *)&v131[4 * (HIBYTE(v193) ^ 0x61)];
  HIDWORD(v43) = ~v197;
  LODWORD(v43) = v197 ^ 0x6A0B473E;
  v198 = *(_DWORD *)&v134[4 * (v194 ^ 0xC5)] ^ *(_DWORD *)&v133[4 * (BYTE2(v56) ^ 0x28)] ^ ((v194 ^ 0xA8) + 375528433 + ((2 * (v194 ^ 0xA8) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ ((BYTE2(v56) ^ 0x74) + 1304210440 - ((v56 >> 15) & 0x10)) ^ (v43 >> 1);
  LODWORD(v66) = v105 ^ ((BYTE2(v117) ^ 0xE6) + 1304210440 - ((v117 >> 15) & 0x10)) ^ *(_DWORD *)&v133[4 * (BYTE2(v117) ^ 0xBA)];
  v199 = v56;
  v200 = (v56 ^ 0xD9) + 375528433 + ((2 * (v56 ^ 0xD9) + 254) & 0x2E2 ^ 0xCDFB7FFF);
  v201 = (v193 ^ 0x85) + 375528433 + ((2 * (v193 ^ 0x85) + 254) & 0x2E2 ^ 0xCDFB7FFF);
  v202 = *(_DWORD *)&v131[4 * (HIBYTE(v194) ^ 0xB8)];
  HIDWORD(v43) = ~v202;
  LODWORD(v43) = v202 ^ 0x6A0B473E;
  LODWORD(v65) = ((BYTE2(v193) ^ 8) + 1304210440 - 2 * ((HIWORD(v193) ^ 0x6108) & 0x1B ^ HIWORD(v193) & 0x13)) ^ *(_DWORD *)&v133[4 * (BYTE2(v193) ^ 0x54)] ^ *(_DWORD *)&v134[4 * (v117 ^ 0x29)] ^ ((v117 ^ 0x44) + 375528433 + ((2 * (v117 ^ 0x44) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ (v43 >> 1);
  v203 = *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0xDD)] ^ HIDWORD(v261) ^ (v198 + 1498568468 - ((2 * v198) & 0xB2A4AE28));
  LODWORD(v117) = *(_DWORD *)&v131[4 * (BYTE3(v117) ^ 0xB0)];
  HIDWORD(v43) = ~(_DWORD)v117;
  LODWORD(v43) = v117 ^ 0x6A0B473E;
  LODWORD(v56) = *(_DWORD *)&v140[4 * (BYTE1(v56) ^ 0xBD)] ^ v262 ^ (v65 + 1498568468 - ((2 * v65) & 0xB2A4AE28));
  LODWORD(v52) = *(_DWORD *)&v134[4 * (v193 ^ 0xE8)];
  v204 = *(_DWORD *)&v140[4 * (BYTE1(v193) ^ 0x8F)] ^ HIDWORD(v260) ^ *(_DWORD *)&v134[4 * (v199 ^ 0xB4)] ^ v200 ^ (v43 >> 1) ^ v64;
  LODWORD(v117) = v201 ^ v261 ^ v52 ^ *(_DWORD *)&v140[4 * (BYTE1(v194) ^ 0x2D)] ^ (v66
                                                                                  + 1498568468
                                                                                  - ((2 * v66) & 0xB2A4AE28));
  v205 = *(_DWORD *)&v131[4 * (HIBYTE(v204) ^ 0x18)];
  LODWORD(v66) = ((BYTE2(v117) ^ 0x66) + 1304210440 - ((v117 >> 15) & 0x10)) ^ *(_DWORD *)&v133[4 * (BYTE2(v117) ^ 0x3A)];
  HIDWORD(v43) = ~v205;
  LODWORD(v43) = v205 ^ 0x6A0B473E;
  v206 = (v43 >> 1) + 1304210440 - ((2 * (v43 >> 1)) & 0x9B795810);
  LODWORD(v65) = *(_DWORD *)&v131[4 * (BYTE3(v56) ^ 0xEF)];
  HIDWORD(v43) = ~(_DWORD)v65;
  LODWORD(v43) = v65 ^ 0x6A0B473E;
  v207 = v206 ^ *(_DWORD *)&v133[4 * (BYTE2(v56) ^ 0x40)];
  LODWORD(v111) = (_DWORD)v41;
  v208 = (v43 >> 1) ^ *(_DWORD *)&v134[4 * (v204 ^ 0x90)] ^ ((v204 ^ 0xFD)
                                                                            + (_DWORD)v41
                                                                            - ((2 * (v204 ^ 0xFD)
                                                                              + 842892542) & 0x320482E2));
  v209 = v66 + 1498568468 - ((2 * v66) & 0xB2A4AE28);
  LODWORD(v66) = *(_DWORD *)&v134[4 * (v203 ^ 0x27)] ^ ((v203 ^ 0x4A)
                                                                       + 375528433
                                                                       + ((2 * (v203 ^ 0x4A) + 254) & 0x2E2 ^ 0xCDFB7FFF));
  LODWORD(v65) = *(_DWORD *)&v131[4 * (BYTE3(v117) ^ 0xAE)];
  HIDWORD(v43) = ~(_DWORD)v65;
  LODWORD(v43) = v65 ^ 0x6A0B473E;
  LODWORD(v66) = (v43 >> 1) ^ *(_DWORD *)&v133[4 * (BYTE2(v204) ^ 0xF)] ^ (v66 + 1304210440 - ((2 * v66) & 0x9B795810));
  LODWORD(v104) = *(_DWORD *)&v131[4 * (HIBYTE(v203) ^ 0xDC)];
  HIDWORD(v43) = ~(_DWORD)v104;
  LODWORD(v43) = v104 ^ 0x6A0B473E;
  v210 = ((BYTE2(v203) ^ 0xE) + 1304210440 - 2 * ((HIWORD(v203) ^ 0xDC0E) & 0x19 ^ HIWORD(v203) & 0x11)) ^ v260 ^ *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0x7C)] ^ *(_DWORD *)&v133[4 * (BYTE2(v203) ^ 0x52)] ^ (v208 + 1498568468 - ((2 * v208) & 0xB2A4AE28));
  v211 = v117;
  LODWORD(v65) = (v117 ^ 0xB3)
               + 375528433
               + ((2 * (v117 ^ 0xB3) + 254) & 0x2E2 ^ 0xCDFB7FFF);
  LODWORD(v117) = *(_DWORD *)&v140[4 * (BYTE1(v204) ^ 0x1B)] ^ HIDWORD(v259) ^ *(_DWORD *)&v134[4
                                                                                              * (v56 ^ 0x4D)] ^ v209 ^ ((v56 ^ 0x20) + 375528433 + ((2 * (v56 ^ 0x20) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ (v43 >> 1);
  LODWORD(v41) = v65 ^ HIDWORD(v258) ^ *(_DWORD *)&v140[4 * (BYTE1(v203) ^ 0x65)] ^ *(_DWORD *)&v134[4 * (v211 ^ 0xDE)] ^ (v207 + 1498568468 - ((2 * v207) & 0xB2A4AE28));
  v212 = v41 ^ BYTE2(v56);
  LODWORD(v56) = *(_DWORD *)&v140[4 * (BYTE1(v56) ^ 0xA4)] ^ v259 ^ (v66 + 1498568468 - ((2 * v66) & 0xB2A4AE28));
  v213 = (v56 ^ BYTE2(v204));
  v214 = *(_DWORD *)(v39 - 128);
  LODWORD(v66) = (v213 ^ 0x75) + (_DWORD)v111 - ((2 * (v213 ^ 0x75) + 842892542) & 0x320482E2);
  LODWORD(v65) = *(_DWORD *)&v131[4 * ((v212 ^ 0x7641388B) >> 24)];
  HIDWORD(v43) = ~(_DWORD)v65;
  LODWORD(v43) = v65 ^ 0x6A0B473E;
  LODWORD(v52) = v43 >> 1;
  LODWORD(v105) = *(_DWORD *)&v131[4 * ((v210 ^ 0xF7E9CFA8) >> 24)];
  HIDWORD(v43) = ~(_DWORD)v105;
  LODWORD(v43) = v105 ^ 0x6A0B473E;
  v215 = v43 >> 1;
  v216 = *(_QWORD *)(v39 - 120);
  LODWORD(v105) = (((v212 ^ 0x7641388B) >> 16) + 1304210440 - ((v41 >> 15) & 0x10)) ^ *(_DWORD *)&v133[4 * (((v212 ^ 0x7641388B) >> 16) ^ 0x5C)];
  v217 = *(_DWORD *)&v131[4 * (BYTE3(v56) ^ 0xE7)];
  v218 = v105 + 1498568468 - ((2 * v105) & 0xB2A4AE28);
  HIDWORD(v43) = ~v217;
  LODWORD(v43) = v217 ^ 0x6A0B473E;
  v219 = v43 >> 1;
  v220 = v52 ^ *(_DWORD *)&v134[4 * (v213 ^ 0x18)] ^ (((v210 ^ 0xF7E9CFA8) >> 16)
                                                    + 1304210440
                                                    - (((v210 ^ 0xF7E9CFA8) >> 15) & 0x10)) ^ *(_DWORD *)&v133[4 * (((v210 ^ 0xF7E9CFA8) >> 16) ^ 0x5C)] ^ v66;
  v221 = (v220 + 1498568468 - ((2 * v220) & 0xB2A4AE28)) ^ *(_DWORD *)&v140[4 * (BYTE1(v117) ^ 0xEC)];
  LODWORD(v66) = v215 ^ *(_DWORD *)&v133[4 * (BYTE2(v117) ^ 0xA7)] ^ ((BYTE2(v117) ^ 0xFB)
                                                                    + 1304210440
                                                                    - ((2 * (WORD1(v117) ^ 0x57FB)) & 0x10)) ^ (v214 + (v212 ^ 0x8B) - ((2 * (v212 ^ 0x8B) + 842892542) & 0x320482E2)) ^ *(_DWORD *)&v134[4 * (v212 ^ 0xE6)];
  LODWORD(v65) = *(_DWORD *)&v131[4 * (BYTE3(v117) ^ 0x57)];
  HIDWORD(v43) = ~(_DWORD)v65;
  LODWORD(v43) = v65 ^ 0x6A0B473E;
  LODWORD(v66) = (v66 + 1498568468 - ((2 * v66) & 0xB2A4AE28)) ^ *(_DWORD *)&v140[4 * (BYTE1(v56) ^ 0x6D)];
  LODWORD(v105) = *(_DWORD *)&v140[4 * (BYTE1(v210) ^ 0x2D)];
  LODWORD(v104) = v117 ^ 0x2F;
  v222 = *(_DWORD *)&v134[4 * (v117 ^ 0x42)];
  LODWORD(v117) = ((v210 ^ 0xA8)
                 + 375528433
                 + ((2 * (v210 ^ 0xA8) + 254) & 0x2E2 ^ 0xCDFB7FFF)) ^ *(_DWORD *)&v134[4 * (v210 ^ 0xC5)] ^ ((BYTE2(v56) ^ 0x31) + 1304210440 - ((v56 >> 15) & 0x10)) ^ *(_DWORD *)&v133[4 * (BYTE2(v56) ^ 0x6D)] ^ (v43 >> 1);
  LODWORD(v65) = v104 + v214 - ((2 * v104 + 842892542) & 0x320482E2);
  LODWORD(v117) = v250 ^ *(_DWORD *)&v140[4 * (BYTE1(v41) ^ 0xDA)] ^ (v117 + 1498568468 - ((2 * v117) & 0xB2A4AE28));
  v223 = (v66 + 744212068 - ((2 * v66) & 0x58B78CC8)) ^ v258;
  v224 = (v221 + 1862638608 - ((2 * v221) & 0xDE0B3820)) ^ HIDWORD(v257);
  v225 = v105 ^ v257 ^ v65 ^ v219 ^ v222 ^ v218;
  BYTE2(v140) = BYTE2(v117) ^ 0x8C;
  LODWORD(v104) = v224 ^ 0x351D74B9;
  v226 = (char *)*(&off_1E5B56B60 + HIDWORD(v249)) - 8;
  v227 = (char *)*(&off_1E5B56B60 + v249) - 8;
  v228 = (char *)*(&off_1E5B56B60 + HIDWORD(v248)) - 12;
  LODWORD(v66) = (*(_DWORD *)&v228[4 * (BYTE2(v223) ^ 0x9E)] - 145890302) ^ (*(_DWORD *)&v226[4
                                                                                            * (v225 ^ 0xC9)]
                                                                           + 1909492905);
  v229 = *(unsigned int *)&v226[4 * (v117 ^ 0xC8)];
  v230 = (*(_DWORD *)&v228[4 * (BYTE2(v225) ^ 0x38)] - 145890302) ^ (*(_DWORD *)&v227[4
                                                                                    * ((v117 ^ 0x898C5DC8) >> 24)]
                                                                   - 1627856470) ^ (*(_DWORD *)&v226[4 * (v223 ^ 0xA2)]
                                                                                  + 1909492905);
  LODWORD(v56) = *(_DWORD *)&v226[4 * (v224 ^ 0xB9)];
  v231 = *(_DWORD *)&v227[4 * (HIBYTE(v223) ^ 0xE7)];
  LODWORD(v65) = *(_DWORD *)&v227[4 * (HIBYTE(v225) ^ 0xB8)];
  LODWORD(v226) = *(_DWORD *)&v227[4 * (HIBYTE(v224) ^ 0x65)];
  v232 = *(unsigned int *)(v39 - 136);
  v233 = (uint64_t)*(&off_1E5B56B60 + (int)v232 - 1747);
  LODWORD(v64) = *(_DWORD *)(v233 + 4 * (BYTE1(v223) ^ 0xA0u));
  v234 = *(_DWORD *)(v233 + 4 * (BYTE1(v225) ^ 0xE9u));
  LODWORD(v117) = (v66 - 303738583 - ((2 * v66) & 0xDBCAA252)) ^ *(_DWORD *)(v233 + 4 * (BYTE1(v117) ^ 0x61u)) ^ ((_DWORD)v226 - 1627856470);
  v235 = *(_DWORD *)&v228[4 * BYTE2(v140)];
  LODWORD(v66) = *(_DWORD *)&v228[4 * BYTE2(v104)];
  LODWORD(v131) = *(_DWORD *)(v233 + 4 * BYTE1(v104)) ^ v252 ^ (v230 - 303738583 - ((2 * v230) & 0xDBCAA252));
  v236 = HIDWORD(a4) ^ HIDWORD(v257) ^ (v117 + 1862638608 - ((2 * v117) & 0xDE0B3820));
  v237 = ((unsigned __int16)(*(_WORD *)(v233 + 4 * BYTE1(v104)) ^ v252 ^ (v230
                                                                                           + 20777
                                                                                           - ((2 * v230) & 0xA252))) >> 8) ^ 0x99;
  v238 = (char *)*(&off_1E5B56B60 + (int)v232 - 1683) - 4;
  *(_BYTE *)(v216 + 6) = v238[v237] ^ 0x29;
  v239 = (char *)*(&off_1E5B56B60 + HIDWORD(v247)) - 12;
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 256)) = (v239[BYTE2(v236) ^ 0xADLL] + 68) ^ 0xC5;
  v240 = (uint64_t)*(&off_1E5B56B60 + (int)v232 - 1719);
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 216)) = *(_BYTE *)(v240 + (v131 ^ 0xFCLL)) ^ 0x84;
  LODWORD(v237) = v64 ^ HIDWORD(a4) ^ (v229 - ((2 * v229 - 475981486) & 0xDBCAA252) + 1605754322) ^ (v65 - 1627856470) ^ (v66 - 145890302);
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 240)) = (v239[BYTE2(v237) ^ 0x8CLL] + 68) ^ 0x47;
  v241 = (char *)*(&off_1E5B56B60 + v247) - 4;
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 232)) = (v241[(v131 >> 24) ^ 0xDELL] + 3) ^ 0x1B;
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 224)) = ((v239[BYTE2(v131) ^ 0x15]
                                              + ((v239[BYTE2(v131) ^ 0x15] + 68) ^ 0xDA)
                                              + 69) ^ 0xFE)
                                            + v239[BYTE2(v131) ^ 0x15]
                                            + 68;
  v242 = (v56 + 1909492905);
  v243 = v248 ^ v234 ^ (v235 - 145890302) ^ v242 ^ (v231
                                                                              - ((2 * v231 + 1039254356) & 0xDBCAA252)
                                                                              - 1931595053);
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 248)) = *(_BYTE *)(v240 + (v243 ^ 5)) ^ 0x76;
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 184)) = (v241[HIBYTE(v236) ^ 0x4ELL] + 3) ^ 0xE6;
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 176)) = (v241[BYTE3(v237) ^ 0x9CLL] + 3) ^ 0xB8;
  v244 = *(_QWORD *)(v39 - 192);
  *(_BYTE *)(v216 + v244) = (v241[BYTE3(v243) ^ 0x67] + 3) ^ 0x91;
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 168)) = *(_BYTE *)(v240 + (v237 ^ 0xF2)) ^ 0x7C;
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 208)) = v238[BYTE1(v237) ^ 0x1ELL] ^ 0x8A;
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 160)) = v238[BYTE1(v243) ^ 0x33] ^ 0x93;
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 200)) = v238[BYTE1(v236) ^ 0xBCLL] ^ 0x5D;
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 152)) = *(_BYTE *)(v240 + (v236 ^ 0x9FLL)) ^ 0x84;
  *(_BYTE *)(v216 + *(_QWORD *)(v39 - 144)) = (v239[BYTE2(v243) ^ 0xDLL] + 68) ^ 0x8E;
  v245 = (_DWORD)v244 - 287515010 - ((2 * (_DWORD)v244 + 32) & 0xDDB9BCFC) + 16;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a36 + 8 * ((28 * ((v245 ^ 0xEEDCDE7E) < HIDWORD(v252))) ^ ((int)v232 - 444))) - 12))(v238, 2667110826, v242, v232, v229, 184, v245, v243, a2, a3, a4, v247, v248, v249, v250, v251, v252, v253, v254,
           v255,
           v256,
           v257,
           v258,
           v259,
           v260,
           v261,
           v262,
           *((_QWORD *)&v262 + 1),
           v263,
           v264,
           v265,
           v266,
           v267,
           v268,
           v269,
           v270);
}

void sub_1AC1897C4()
{
  JUMPOUT(0x1AC1875A8);
}

uint64_t sub_1AC1897F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  int v12;
  uint64_t v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v13
                                        + 8
                                        * (v12 ^ (2030
                                                * (((2 * (a10 - (a12 & 0xF860ECC8) + 179816907)) & 0xEBFF6FE ^ 0x820E4C8)
                                                 + ((a10 - (a12 & 0xF860ECC8) + 179816907) ^ 0x7B6F8D1B)
                                                 - 18776072 != 104954743))))
                            - 12))();
}

uint64_t sub_1AC1898B4(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((v1 - 148) ^ (26 * ((a1 + v2 - 123730815) < 8))))
                            - ((29 * ((v1 - 148) ^ 0x1D5u) - 1259) ^ (6 * ((v1 - 148) ^ 0x1BBu)))))();
}

uint64_t sub_1AC189940(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * ((1190 * (((((a3 ^ 0x71B) - 169) ^ 0xFFFFF9B0) & a7) == 123730816)) ^ a3))
                            - 12))();
}

uint64_t sub_1AC189984(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BOOL4 v24;
  int v27;

  v12 = (a1 + v9 + a2);
  v13 = *(_QWORD *)(v11 - 120);
  v14 = v12 + v13 + 1;
  v15 = (((a6 - 1376) | 0x609) - 1754) & (a1 + v9);
  v16 = v7 + v15 - v12;
  v17 = v15 + v7 + 1;
  v18 = v15 + v6 - v12 + 2;
  v19 = v15 + v6 + 3;
  v20 = v15 + v8;
  v21 = v20 - v12 + 4;
  v22 = v20 + 5;
  v24 = v17 > v13 && v16 < v14;
  if (v19 > v13 && v18 < v14)
    v24 = 1;
  v27 = v22 > v13 && v21 < v14 || v24;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * (((2 * (v27 ^ 1)) | (8 * (v27 ^ 1))) ^ a6)) - 4))();
}

uint64_t sub_1AC189A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6;
  uint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7
                                                                       + 8
                                                                       * ((((((a6 - 1174617753) & 0x46033D5F) - 848) ^ (a6 - 1647455811) & 0x623229D6)
                                                                         * (v6 < 0x10)) ^ (a6 - 650)))
                                                           - 4))(a1, a2, 0);
}

uint64_t sub_1AC189A7C(int a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16x4_t v17;
  int8x16x4_t v18;

  v17.val[1].i64[0] = ((_BYTE)v7 + 6) & 0xF;
  v17.val[1].i64[1] = ((_BYTE)v7 + 5) & 0xF;
  v17.val[2].i64[0] = ((_BYTE)v7 + 4) & 0xF;
  v17.val[2].i64[1] = ((_BYTE)v7 + 3) & 0xF;
  v17.val[3].i64[0] = ((_BYTE)v7 + 2) & 0xF;
  v17.val[3].i64[1] = ((_BYTE)v7 + 1) & 0xF;
  v12 = a1 + v9 + a2;
  v13.i64[0] = 0x7777777777777777;
  v13.i64[1] = 0x7777777777777777;
  v17.val[0].i64[0] = v12 & 0xF;
  v17.val[0].i64[1] = ((_BYTE)v7 + 7) & 0xF;
  v14.i64[0] = vqtbl4q_s8(v17, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v18.val[0].i64[1] = ((_BYTE)v7 - 1) & 0xF;
  v18.val[1].i64[1] = ((_BYTE)v7 + 13) & 0xF;
  v18.val[2].i64[1] = (v7 + 11) & 0xF;
  v18.val[3].i64[1] = ((_BYTE)v7 + 9) & 0xF;
  v18.val[0].i64[0] = v7 & 0xF;
  v18.val[1].i64[0] = ((_BYTE)v7 + 14) & 0xF;
  v18.val[2].i64[0] = ((_BYTE)v7 + 12) & 0xF;
  v18.val[3].i64[0] = (v7 + 10) & 0xF;
  v14.i64[1] = vqtbl4q_s8(v18, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v15 = vrev64q_s8(vmulq_s8(v14, v13));
  *(int8x16_t *)(*(_QWORD *)(v11 - 120) - 15 + v12) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v5 + v17.val[0].i64[0] - 15), *(int8x16_t *)(*(_QWORD *)(v11 - 120) - 15 + v12)), veorq_s8(*(int8x16_t *)(v17.val[0].i64[0] + v4 - 13), *(int8x16_t *)(v17.val[0].i64[0] + v6 - 11))), vextq_s8(v15, v15, 8uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((((v8 & 0xFFFFFFF0) == 16) * (((a4 - 458) | 0x60) ^ 0x796)) ^ a4))
                            - 8))();
}

void sub_1AC189BD0()
{
  JUMPOUT(0x1AC189B50);
}

uint64_t sub_1AC189BDC(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (int)((((((v4 + 729108341) & 0xD48AB1FA) + 1523) ^ ((v4 + 1119) | 0x220))
                                               * (v3 != a3)) ^ v4))
                            - 8))();
}

uint64_t sub_1AC189C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  uint64_t v9;
  _BOOL4 v10;

  v10 = (((a7 + 332319781) ^ 0x13CECDF7) & v8) == 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9
                                                                                + 8 * (((8 * v10) | (32 * v10)) ^ a7))
                                                                    - ((a7 + 332319781) & 0xEC313707 ^ 0x50BLL)))(a1, a2, a3, (v7 - a3));
}

uint64_t sub_1AC189C78(int a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  char v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  int8x16x4_t v59;

  *(_DWORD *)(v50 - 128) = v51;
  v52 = a6 - 31;
  *(_DWORD *)(v50 - 136) = v47;
  v53 = (v52 ^ 0xFFFFFB10) & v47;
  v54 = *(_QWORD *)(v50 - 120) - 7;
  v55 = -a3;
  *(_DWORD *)(v50 - 144) = v53;
  v56 = v48 + a1 + v49;
  v57 = (v55 + a1 + v49 + a2);
  v59.val[0].i64[0] = ((_BYTE)v55 + (_BYTE)a1 + (_BYTE)v49 + (_BYTE)a2) & 0xF;
  v59.val[0].i64[1] = ((_BYTE)v55 + v56 + 7) & 0xF;
  v59.val[1].i64[0] = ((_BYTE)v55 + v46 + ((83 * (v52 ^ 0xEE)) ^ 4)) & 0xF;
  v59.val[1].i64[1] = ((_BYTE)v55 + v56 + 5) & 0xF;
  v59.val[2].i64[0] = ((_BYTE)v55 + v56 + 4) & 0xF;
  v59.val[2].i64[1] = ((_BYTE)v55 + v56 + 3) & 0xF;
  v59.val[3].i64[0] = ((_BYTE)v55 + v56 + 2) & 0xF;
  v59.val[3].i64[1] = ((_BYTE)v55 + v56 + 1) & 0xF;
  *(int8x8_t *)(v54 + v57) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v44 + (v57 & 0xF) - 7), *(int8x8_t *)(v54 + v57)), veor_s8(*(int8x8_t *)((v57 & 0xF) + v43 - 5), *(int8x8_t *)((v57 & 0xF) + v45 - 3))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v59, (int8x16_t)xmmword_1AC3B5870), (int8x8_t)0x7777777777777777)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a43 + 8 * ((495 * (v55 != 8 - v53)) ^ v52)) - 8))((__n128)xmmword_1AC3B5870);
}

void sub_1AC189DC0()
{
  JUMPOUT(0x1AC189CF0);
}

uint64_t sub_1AC189DE8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ (910 * (*(_DWORD *)(v2 - 136) == *(_DWORD *)(v2 - 144)))))
                            - 29 * (v0 ^ 0x1CFu)
                            + 1757))();
}

uint64_t sub_1AC189E28(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = (a4 - 104954744);
  *(_BYTE *)(*(_QWORD *)(v10 - 120) + v11) ^= *(_BYTE *)(v7 + (v11 & 0xF)) ^ *(_BYTE *)((v11 & 0xF) + v6 + 2) ^ *(_BYTE *)((v11 & 0xF) + v8 + 4) ^ (119 * (v11 & 0xF));
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((98 * (a4 - 1 == v5)) ^ (a5 - 1761))) - 8))();
}

void sub_1AC189E98()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 105647720)
    v1 = 1797235913;
  else
    v1 = -1797193967;
  *(_DWORD *)(v2 + 32) = v1;
}

void sub_1AC189EFC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) - 1759421093 * ((-870162447 - (a1 | 0xCC225FF1) + (a1 | 0x33DDA00E)) ^ 0x80A0105A);
  __asm { BR              X9 }
}

uint64_t sub_1AC189FC0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((110 * (*(_DWORD *)(*(_QWORD *)(a1 + 8) + v4) == ((v3 - 1405) ^ 0x3ED ^ v1))) ^ v3))
                            - ((v3 - 1405) | 0x241u)
                            + 623))();
}

uint64_t sub_1AC18A008@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  _DWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v7 = (v2 - 542) ^ (1734042137
                   * (((&v5 | 0x8A5BE56D) - &v5 + (&v5 & 0x75A41A90)) ^ 0xD6952620));
  v5 = a1;
  v6 = v1;
  result = sub_1AC16E3FC((uint64_t)&v5);
  *v3 = -1357576236 - *v3;
  return result;
}

void sub_1AC18A1A0(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20) - 1178560073 * ((2 * (a1 & 0xF0D1717) - a1 - 252516120) ^ 0xC2E4E8A8);
  __asm { BR              X9 }
}

uint64_t sub_1AC18A280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8)
{
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  v14 = (*(_DWORD *)(a1 + 16) ^ v12) + *(_DWORD *)(v8 - 0x685C86573AC75C4FLL) - 401567595;
  v15 = 3804331
      * (((&a5 | 0x8C86442E) - &a5 + (&a5 & 0x7379BBD0)) ^ 0x7618B778);
  a7 = v8;
  a8 = v15 + v13 + 237;
  a5 = v15 + 1521900521;
  a6 = (((v13 - 208) | 0x280) ^ 0xB99B9726) + v15 + v14;
  v16 = ((uint64_t (*)(unsigned int *))(*(_QWORD *)(a2 + 8 * (v13 ^ 0x271)) - 4))(&a5);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v11 + 8 * ((1227 * (*v9 == v10)) ^ v13)) - 8))(v16);
}

uint64_t sub_1AC18A370()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((v1 + 44) ^ (*(_QWORD *)(v0 + 8) == 0x12A1E18019D396D9)) & 1)
                                          * (((v1 - 952) | 0x208) - 535)) ^ v1))
                            - 8))();
}

uint64_t sub_1AC18A3CC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;

  *(_QWORD *)(v1 - 0x12A1E18019D396D9) = (*v3 + a1) + *(_QWORD *)(v4 - 0x685C86573AC75C5FLL) + 8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((362 * (*v5 == v6)) ^ v2)) - 8))();
}

void sub_1AC18A428(int a1@<W8>)
{
  unsigned int v1;
  _DWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(v3 - 0x685C86573AC75C5FLL);
  v6 = *v2 + a1;
  *(_BYTE *)(v5 + v6) = (HIBYTE(v1) ^ 0xBF) - ((2 * (HIBYTE(v1) ^ 0xBF)) & 0x94) + 74;
  *(_BYTE *)(v5 + v6 + 1) = (BYTE2(v1) ^ 0x90) - ((v1 >> 15) & 0x94) + 74;
  *(_BYTE *)(v5 + v6 + 2) = (BYTE1(v1) ^ 0xE7) - ((2 * (BYTE1(v1) ^ 0xE7)) & 0x94) + 74;
  *(_BYTE *)(v5 + v6 + 3) = v1 ^ 0x98;
  v7 = *(_QWORD *)(v3 - 0x685C86573AC75C5FLL);
  v8 = v4 - ((2 * v4 + 270606618) & 0x316E9FBE) - 2134384532;
  v9 = ((2 * (a1 + *v2 + 4)) & 0xFDED9B7E) + ((a1 + *v2 + 4) ^ 0x7EF6CDBF) - 2130103743;
  *(_BYTE *)(v7 + v9) = (HIBYTE(v8) ^ 0x98) - 2 * ((HIBYTE(v8) ^ 0x98) & 0x4B ^ HIBYTE(v8) & 1) + 74;
  *(_BYTE *)(v7 + v9 + 1) = (BYTE2(v8) ^ 0xB7) - ((2 * (BYTE2(v8) ^ 0xB7)) & 0x94) + 74;
  *(_BYTE *)(v7 + v9 + 2) = (BYTE1(v8) ^ 0x4F) - ((2 * (BYTE1(v8) ^ 0x4F)) & 0x94) + 74;
  *(_BYTE *)(v7 + v9 + 3) = (v4 - ((2 * v4 + 26) & 0xBE) + 108) ^ 0x95;
  *v2 = v10;
}

uint64_t sub_1AC18A680(_DWORD *a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(qword_1E5B52930[(63 * ((*a1 + *(_DWORD *)(a2 + 4) - 1112795437) < 0xC9)) ^ 0x119u]
                            - 4))();
}

uint64_t sub_1AC18A6C8@<X0>(uint64_t a1@<X8>)
{
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((37 * (v1 != 576264642)) ^ 0x69Bu)) - 12))();
}

uint64_t sub_1AC18A6F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  *(_BYTE *)(a1 + (v3 - 536530796) + 4) = (**(_BYTE **)(a2 + 8) ^ 0xF6)
                                                      + ((2 * **(_BYTE **)(a2 + 8)) & 0xEC)
                                                      + 110;
  v4 = *(_DWORD *)(a2 + 4) - 320034797;
  v5 = v4 < 0xF45C1D5;
  v6 = v4 > 0xF45C1D6;
  if (v5)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * ((1975 * !v6) ^ 0x12Cu)) - 12))();
}

void sub_1AC18A7AC()
{
  JUMPOUT(0x1AC18A730);
}

uint64_t sub_1AC18A7B4()
{
  return 4294925278;
}

uint64_t sub_1AC18A7BC(_DWORD *a1)
{
  int v1;
  int v2;

  *((_BYTE *)a1 + v1 + ((v2 + 604028652) | 0x908C30C8) + 729300939) = 100;
  *a1 = v1;
  return 0;
}

void sub_1AC18A7FC(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)a1 + 1734042137 * (((a1 ^ 0xA2C4A338 | 0x16634A81) - ((a1 ^ 0xA2C4A338) & 0x16634A81)) ^ 0xE8692AF4);
  v2 = *(_QWORD *)(a1 + 8);
  ((void (*)(char *, void (*)()))*(&off_1E5B56B60 + v1 - 1113))((char *)*(&off_1E5B56B60 + (v1 ^ 0x50E)) - 12, sub_1AC1ADF34);
  __asm { BR              X11 }
}

uint64_t sub_1AC18A8C0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((477 * (*(_QWORD *)(*(_QWORD *)(v2 + 8 * (a1 - 1171)) - 4) != 0)) ^ a1))
                            - (((a1 - 956) | 0x411u) ^ 0x531)))();
}

uint64_t sub_1AC18A904()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (v0 - 1105)))(v1);
}

uint64_t sub_1AC18A930(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v1 = 3804331 * (((a1 ^ 0x9A32C815 | 0x394EC663) - ((a1 ^ 0x9A32C815) & 0x394EC663)) ^ 0x59E2FD20);
  v2 = *(_DWORD *)a1 - v1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (*(_DWORD *)(a1 + 4) ^ v1) - 1206753083;
  v5 = v4
     + (*(_DWORD *)(v3 - 0x5800F43E2BD23B08) ^ 0x9178FF37)
     - ((2 * (v4 + (*(_DWORD *)(v3 - 0x5800F43E2BD23B08) ^ 0x9178FF37))) & 0x22F1FE6E)
     - 1854341321;
  *(_DWORD *)(v3 - 0x5800F43E2BD23B08) = v5;
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B56B60 + (v2 ^ 0x6EA)) + ((410 * ((v5 ^ 0x9178FF37) < v4)) ^ v2))
                            - 12))();
}

void sub_1AC18AA00(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x5800F43E2BD23B0CLL) = (*(_DWORD *)(a1 - 0x5800F43E2BD23B0CLL) ^ 0xDA617B28)
                                         - 631145688
                                         - ((2 * (*(_DWORD *)(a1 - 0x5800F43E2BD23B0CLL) ^ 0xDA617B28) + 2) & 0xB4C2F650)
                                         + 1;
}

void CFUnnB0JdUjJ5CNJMkDS()
{
  _DWORD v0[8];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[0] = 1734042137 * ((-520473560 - (v0 | 0xE0FA3428) + (v0 | 0x1F05CBD7)) ^ 0x43CB089A)
        - 504207030;
  sub_1AC1ADE7C(v0);
  __asm { BR              X8 }
}

uint64_t sub_1AC18AB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, int a13, unsigned int a14)
{
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  a12 = &STACK[0xD7CDE9D8B19903B];
  a14 = 514 - 460628867 * ((((2 * &a12) | 0x98B0CA2E) - &a12 - 1280861463) ^ 0xCEE76A);
  sub_1AC1A886C((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15
                                                                                          + 8
                                                                                          * ((1541 * (a13 == 1797235913)) ^ v14))
                                                                              - 4))(v16, v17, v18, v19, v20);
}

uint64_t sub_1AC18ABB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, uint64_t a15)
{
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;

  v22 = ((&a12 + 832624133 - 2 * (&a12 & 0x31A0D605)) ^ 0x6D6E1548) * v21;
  a12 = a11;
  LODWORD(a13) = 477 - v22;
  a14 = (v19 - ((2 * v19) & 0xDEE8F856) - 277578709) ^ v22;
  sub_1AC1A8084(&a12);
  v23 = 628203409
      * ((((&a12 | 0x3F0F3C7C) ^ 0xFFFFFFFE) - (~&a12 | 0xC0F0C383)) ^ 0x4278CFB0);
  a14 = (v18 ^ 0xFCEF1F7F) + ((2 * v18) & 0xF9DE3EFE) + 1941765815 + v23;
  a13 = v17;
  a15 = a11;
  LODWORD(a12) = 583 - v23;
  sub_1AC16D72C(&a12);
  v24 = 628203409
      * (((&a12 | 0x394CF50C) - &a12 + (&a12 & 0xC6B30AF0)) ^ 0xBBC4F93F);
  a15 = a11;
  a14 = (v16 ^ 0xFDEC3FF7) + ((2 * v16) & 0xFBD87FEE) + 1925176895 + v24;
  a13 = v15;
  LODWORD(a12) = 583 - v24;
  v25 = ((uint64_t (*)(uint64_t *))sub_1AC16D72C)(&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20 + 8 * ((108 * (HIDWORD(a12) == 1797235913)) ^ 0x33Fu))
                                          - 12))(v25);
}

uint64_t sub_1AC18ADAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, int a13, uint64_t a14, int a15, unsigned int a16, unint64_t *a17)
{
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;

  v20 = 1759421093 * ((((2 * &a12) | 0xDA735848) - &a12 - 1832496164) ^ 0xDE441C70);
  a12 = -512966209 - v20;
  a15 = v20 ^ 0x4B730259;
  a16 = v20 + v17 - 2024873914;
  a14 = a11;
  a17 = &STACK[0x3703560E774B811B];
  v21 = sub_1AC1ADC5C((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8 * (((a13 == v18) * (((v17 - 797) | 0x244) + 420)) ^ v17))
                                          - 12))(v21);
}

uint64_t sub_1AC18AE70()
{
  void (*v0)(unsigned int *);
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t *v8;
  unsigned int v9;
  unint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t *v14;

  v5 = (v2 - 763) | 0x222;
  v11 = (v2 + 298) ^ (1374699841
                    * ((2 * (&v11 & 0x70180268) - &v11 - 1880621676) ^ 0xE213E59D));
  v13 = &STACK[0x70D8B5D370459C1C];
  v14 = v8;
  ((void (*)(unsigned int *))(*(_QWORD *)(v4 + 8 * (v2 ^ 0x31Cu)) - 12))(&v11);
  v11 = v2 + 1225351577 * ((2 * (&v11 & 0x28379F0) - &v11 + 2105312781) ^ 0x5EE65E1B) + 194;
  v13 = v8;
  sub_1AC16E07C((uint64_t)&v11);
  if (v12 == v3 + v5 - 614)
    v6 = v9;
  else
    v6 = v12;
  v12 = v2 + ((2 * (&v11 & 0x4855FEB0) - &v11 - 1213595313) ^ 0xBD5E0F60) * v1 + 957;
  v13 = v8;
  v0(&v11);
  v12 = v5 + (&v11 ^ 0xAF40E2F) * v1 + 1174;
  v13 = v10;
  v0(&v11);
  return v6 ^ 0x6B1FA4C9;
}

void sub_1AC18B020(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20) - 235795823 * (((a1 | 0xEB3D4C35) - (a1 | 0x14C2B3CA) + 348304330) ^ 0x7F90056C);
  __asm { BR              X10 }
}

uint64_t sub_1AC18B14C()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v5;

  v5 = *(_DWORD *)(v2 + 16) + v0 != 182238939 && (*(_QWORD *)(v2 + 56) | *(_QWORD *)(v2 + 32)) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((v5 * (((v1 - 751321536) & 0x2CC84523) - 481)) ^ v1)) - 12))();
}

uint64_t sub_1AC18B1AC()
{
  int v0;
  _QWORD *v1;
  uint64_t v2;
  _BOOL4 v4;

  v4 = v1[1] == 0x2E08524DB1FD77B6 || (*v1 | v1[5]) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v0 + 20 * v4)) - ((3 * (v0 ^ 0x5B6u)) ^ 0x1B7)))();
}

uint64_t sub_1AC18B204(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v3
                                                     + 8
                                                     * (int)(((((89 * (v2 ^ 0x52F) + 95492801) & 0xFA4EE53E) - 945)
                                                            * (v1 == 0)) ^ v2 ^ 0x38B)))(a1, 1734042137);
}

uint64_t sub_1AC18B32C@<X0>(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  void (*v46)(uint64_t);
  void (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v31 = v22 - 702;
  v32 = ((((v30 - 144) | 0x6AE408BC) - (v30 - 144) + ((v30 - 144) & 0x951BF740)) ^ 0x362ACBF1) * a1;
  *(_DWORD *)(v30 - 116) = v23 - v32 + ((v22 - 702) ^ 0x5E4EECB);
  *(_QWORD *)(v30 - 144) = a2;
  *(_DWORD *)(v30 - 136) = v22 - v32 - 856;
  *(_QWORD *)(v30 - 128) = v20;
  v49 = a3 + v21;
  ((void (*)(uint64_t))(*(_QWORD *)(v24 + 8 * (v22 - 1031)) - 8))(v30 - 144);
  LODWORD(v48) = (v31 - 331) | 0x19C;
  HIDWORD(v48) = v31 + 81;
  v51 = a9;
  LODWORD(a9) = v31 + 246;
  *(_QWORD *)(v30 - 144) = v28;
  *(_QWORD *)(v30 - 136) = a20;
  *(_DWORD *)(v30 - 128) = (v31 + 246) ^ (((-243003403 - ((v30 - 144) | 0xF1840FF5) + ((v30 - 144) | 0xE7BF00A)) ^ 0x9AD6B953)
                                        * v26);
  v47 = (void (*)(uint64_t))(*(_QWORD *)(v24 + 8 * (v31 - 177)) - 8);
  v47(v30 - 144);
  HIDWORD(a7) = v31 + 1385;
  *(_QWORD *)(v30 - 136) = v27;
  *(_QWORD *)(v30 - 128) = a19;
  *(_QWORD *)(v30 - 112) = v28;
  *(_DWORD *)(v30 - 120) = v31
                         + 1385
                         + 1224239923 * ((((2 * (v30 - 144)) | 0x8E0681A8) - (v30 - 144) + 956088108) ^ 0x35B0BD03);
  *(_QWORD *)(v30 - 144) = a20;
  v46 = *(void (**)(uint64_t))(v24 + 8 * (int)(v31 & 0xCC08D812));
  v46(v30 - 144);
  HIDWORD(v45) = v31 + 1083;
  *(_QWORD *)(v30 - 128) = v28;
  *(_QWORD *)(v30 - 120) = v51;
  *(_QWORD *)(v30 - 112) = v27;
  *(_DWORD *)(v30 - 104) = (v31 + 1083) ^ (1759421093
                                         * ((2 * ((v30 - 144) & 0x2B596A10) - (v30 - 144) + 1420203497) ^ 0xE7DB25BD));
  *(_QWORD *)(v30 - 144) = a20;
  *(_QWORD *)(v30 - 136) = v27;
  v33 = (void (*)(uint64_t))(*(_QWORD *)(v24 + 8 * (v31 ^ 0x156)) - 4);
  v33(v30 - 144);
  LODWORD(v45) = v31 + 1237;
  *(_DWORD *)(v30 - 128) = (v31 + 1237) ^ (3804331
                                         * (((v30 - 144) & 0xB2991CB8 | ~((v30 - 144) | 0xB2991CB8)) ^ 0xB7F81011));
  *(_QWORD *)(v30 - 120) = a20;
  *(_QWORD *)(v30 - 112) = v27;
  *(_QWORD *)(v30 - 144) = v28;
  *(_QWORD *)(v30 - 136) = v27;
  v50 = v28;
  *(_QWORD *)(v30 - 104) = a11;
  v34 = v27;
  v35 = (void (*)(uint64_t))(*(_QWORD *)(v24 + 8 * (v31 ^ 0x171)) - 8);
  v35(v30 - 144);
  *(_DWORD *)(v30 - 128) = (v31 + 246) ^ (235795823 * ((v30 - 323564042 - 2 * ((v30 - 144) & 0xECB6CE86)) ^ 0x781B87DF));
  *(_QWORD *)(v30 - 144) = a14;
  *(_QWORD *)(v30 - 136) = a20;
  v47(v30 - 144);
  *(_QWORD *)(v30 - 112) = a14;
  *(_DWORD *)(v30 - 120) = v31 + 1385 + 1224239923 * ((v30 - 1979322361 - 2 * ((v30 - 144) & 0x8A05F097)) ^ 0x78B60D40);
  *(_QWORD *)(v30 - 136) = v29;
  *(_QWORD *)(v30 - 128) = a19;
  *(_QWORD *)(v30 - 144) = a20;
  v46(v30 - 144);
  *(_QWORD *)(v30 - 120) = v51;
  *(_QWORD *)(v30 - 112) = v29;
  *(_QWORD *)(v30 - 144) = a20;
  *(_QWORD *)(v30 - 136) = v29;
  *(_DWORD *)(v30 - 104) = (v31 + 1083) ^ (1759421093
                                         * ((((v30 - 144) | 0x87326FB7) - ((v30 - 144) & 0x87326FB7)) ^ 0x344FDFE3));
  *(_QWORD *)(v30 - 128) = a14;
  v33(v30 - 144);
  *(_QWORD *)(v30 - 112) = v29;
  *(_QWORD *)(v30 - 104) = a12;
  *(_DWORD *)(v30 - 128) = (v31 + 1237) ^ (3804331 * ((v30 - 144) ^ 0xFA9EF356));
  *(_QWORD *)(v30 - 144) = a14;
  *(_QWORD *)(v30 - 136) = v29;
  *(_QWORD *)(v30 - 120) = a20;
  v35(v30 - 144);
  *(_QWORD *)(v30 - 144) = v34;
  *(_QWORD *)(v30 - 136) = v29;
  *(_DWORD *)(v30 - 128) = v31 + 1759421093 * ((v30 - 144) ^ 0xB37DB054) + 617;
  ((void (*)(uint64_t))((char *)*(&off_1E5B56B60 + (v31 ^ 0x143)) - 8))(v30 - 144);
  *(_DWORD *)(v30 - 144) = v31 + 535753261 * ((v30 - 445287334 - 2 * ((v30 - 144) & 0xE57574EA)) ^ 0xEF817AC5) + 224;
  *(_QWORD *)(v30 - 136) = v29;
  sub_1AC196FB4(v30 - 144);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, void (*)(uint64_t), uint64_t, uint64_t, void (*)(uint64_t), char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 + 8 * ((1891 * (*(_DWORD *)(v30 - 128) < 0x8EF130Bu)) ^ v31)) - ((v31 + 81) ^ v48 ^ 0xCLL)))(v36, v37, v38, v39, v40, v41, v42, v43, a4, v45, v46, a7, v47, a9, v48, v33, (char *)*(&off_1E5B56B60 + (v31 ^ 0x1F4)) - 4, v49, a14,
           v50,
           a16,
           a17,
           a18);
}

uint64_t sub_1AC18B820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void (*a16)(uint64_t), void (*a17)(uint64_t), uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void (*v31)(uint64_t);
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  *(_DWORD *)(v37 - 136) = v33
                         - 3804331 * ((((v37 - 144) | 0x1DB24E5C) - ((v37 - 144) & 0x1DB24E5C)) ^ 0xE72CBD0A)
                         - 293;
  *(_QWORD *)(v37 - 128) = v32;
  *(_QWORD *)(v37 - 144) = v36;
  v31(v37 - 144);
  *(_QWORD *)(v37 - 120) = a31;
  *(_QWORD *)(v37 - 112) = v36;
  *(_QWORD *)(v37 - 144) = a25;
  *(_QWORD *)(v37 - 136) = v36;
  *(_DWORD *)(v37 - 104) = (v33 + 1002) ^ (1759421093 * ((v35 + 1631053746 - 2 * (v35 & 0x6137E7B2)) ^ 0xD24A57E6));
  *(_QWORD *)(v37 - 128) = v32;
  a16(v37 - 144);
  *(_QWORD *)(v37 - 120) = v36;
  *(_QWORD *)(v37 - 112) = v36;
  *(_QWORD *)(v37 - 144) = a25;
  *(_QWORD *)(v37 - 136) = a18;
  *(_QWORD *)(v37 - 128) = v32;
  *(_DWORD *)(v37 - 104) = (v33 + 1002) ^ (1759421093 * ((2 * (v35 & 0x65B19EF8) - v35 + 441344258) ^ 0xA933D156));
  a16(v37 - 144);
  *(_QWORD *)(v37 - 144) = a20;
  *(_DWORD *)(v37 - 136) = v33 + 1755732067 * ((v35 + 2048136042 - 2 * (v35 & 0x7A14136A)) ^ 0xA4D2AEB1) + 426522570;
  *(_QWORD *)(v37 - 128) = v36;
  sub_1AC1AE2E4(v37 - 144);
  *(_DWORD *)(v37 - 136) = v33 - 3804331 * ((2 * (v35 & 0x2EAC1DC0) - v35 - 783031752) ^ 0x2BCD116E) - 293;
  *(_QWORD *)(v37 - 144) = v36;
  *(_QWORD *)(v37 - 128) = a24;
  a17(v37 - 144);
  *(_DWORD *)(v37 - 128) = (v33 - 6) ^ (1734042137 * (((v35 | 0xAD709DC5) + (~v35 | 0x528F623A)) ^ 0xF1BE5E89));
  *(_QWORD *)(v37 - 144) = v36;
  *(_QWORD *)(v37 - 136) = a24;
  v38 = sub_1AC16E3FC(v37 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v34
                                                      + 8
                                                      * (((4 * (((a23 == 0) ^ (109 * (v33 ^ 0xAE))) & 1)) & 0xF7 | (8 * (((a23 == 0) ^ (109 * (v33 ^ 0xAE))) & 1))) ^ (v33 - 138)))
                                          - 109 * (v33 ^ 0x1AEu)
                                          + 1841))(v38);
}

uint64_t sub_1AC18BA84()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v5 = ((((v4 - 144) | 0xDB4EDC7B) + (~(v4 - 144) | 0x24B12384)) ^ 0x87801F37) * v3;
  *(_QWORD *)(v4 - 136) = v9;
  *(_QWORD *)(v4 - 128) = v2;
  *(_DWORD *)(v4 - 144) = (v1 - 985) ^ v5;
  *(_DWORD *)(v4 - 140) = v8 - v5 + 1606945124 + v1;
  result = ((uint64_t (*)(uint64_t))((char *)*(&off_1E5B56B60 + v1 - 1758) - 12))(v4 - 144);
  *(_DWORD *)(v7 - 0x2E08524DB1FD77B6) = v8;
  *(_DWORD *)(v0 + 48) = 1797235913;
  return result;
}

void ysE4jN2LzGiDiW(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X8 }
}

uint64_t sub_1AC18BC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((v4 + 1866542157) ^ (30 * (a4 == 0)))) - 12))();
}

uint64_t sub_1AC18BC98(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, int a20)
{
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  *a4 = 0;
  v24 = v20 + v21 + 1219;
  a19 = v21
      + 1734042137 * ((2 * (&a19 & 0x3FB13888) - &a19 + 1078904692) ^ 0x1C800439)
      + 1362334805;
  v25 = sub_1AC1ADE7C(&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23
                                                      + 8
                                                      * (((a20 == v22) * (((v21 + 1805267480) & 0x3A6FEF7) - 1306)) ^ v24))
                                          - 4))(v25);
}

uint64_t sub_1AC18BD6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, int a20,int a21)
{
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  a19 = &STACK[0xD7CDE9D8B199053];
  a21 = v23
      - 460628867 * ((&a19 - 828698224 - 2 * ((unint64_t)&a19 & 0xCE9B1190)) ^ 0x820D93ED)
      - 1027;
  sub_1AC1A886C((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 + 8 * (((a20 == 1797235913) * (v23 ^ (v21 - 517) ^ (v21 + ((v23 - 1525) | 0x2C4) - 758))) ^ v23)) - 4))(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12);
}

uint64_t sub_1AC18BE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v26 = ((&a19 & 0xF0CC7DD5 | ~(&a19 | 0xF0CC7DD5)) ^ 0x53FD4167) * v25;
  LODWORD(a21) = (v22 - ((2 * v22) & 0xDEE8F856) + ((v21 + 817) ^ 0xEF747A2E)) ^ v26;
  LODWORD(a20) = v21 - v26 - 247;
  a19 = a14;
  ((void (*)(uint64_t *))((char *)*(&off_1E5B56B60 + (v21 ^ 0x2FD)) - 8))(&a19);
  LODWORD(a19) = v21 + 1178560073 * (&a19 ^ 0x32160040) + 805;
  a20 = a13;
  a21 = a14;
  v27 = ((uint64_t (*)(uint64_t *))((char *)*(&off_1E5B56B60 + (v21 ^ 0x278)) - 8))(&a19);
  return (*(uint64_t (**)(uint64_t))(v24 + 8 * ((1571 * (HIDWORD(a19) == v23)) ^ v21)))(v27);
}

uint64_t sub_1AC18BF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21,unsigned int a22,int a23,unint64_t *a24)
{
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v27 = 1759421093 * ((&a19 - 1921443396 - 2 * ((unint64_t)&a19 & 0x8D7919BC)) ^ 0x3E04A9E8);
  a19 = -512966212 - v27;
  a24 = &STACK[0x3703560E774B814B];
  a21 = a14;
  a22 = v27 ^ 0xDB3F037F;
  a23 = v27 + v24 - 2024873807;
  v28 = sub_1AC1ADC5C((uint64_t)&a19);
  return (*(uint64_t (**)(uint64_t))(v26
                                            + 8
                                            * ((35 * (a20 == ((v25 + 23 * (v24 ^ 0x297) - 1737) ^ (51 * (v24 ^ 0x2D0))))) | v24)))(v28);
}

uint64_t sub_1AC18C00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, int a20,unint64_t *a21,unint64_t *a22,unint64_t *a23,unsigned int a24)
{
  uint64_t v24;
  int v25;
  void (*v26)(unsigned int *);
  uint64_t v27;

  a24 = (v25 + 26) ^ (1225351577 * (&a19 ^ 0x239AD816));
  a22 = &STACK[0x7A2643E541D57A88];
  a23 = &STACK[0x1706FB9DE6F6FC9C];
  a21 = a15;
  ((void (*)(unsigned int *))((char *)*(&off_1E5B56B60 + (v25 ^ 0x50)) - 8))(&a19);
  a21 = &STACK[0x70D8B5D370459CE8];
  a22 = a15;
  a19 = (v25 + 925) ^ (1374699841
                     * (((&a19 | 0xF86CA62A) - (&a19 & 0xF86CA62A)) ^ 0x9598BE23));
  v26 = (void (*)(unsigned int *))((char *)*(&off_1E5B56B60 + v25 - 169) - 12);
  v26(&a19);
  a21 = &STACK[0x70D8B5D370459CEC];
  a22 = a15;
  a19 = (v25 + 925) ^ (1374699841
                     * ((((2 * &a19) | 0xEC1A9DD8) - &a19 + 166899988) ^ 0x9BF956E5));
  v26(&a19);
  a19 = v25 + 1225351577 * (((&a19 | 0x37C6CE8F) - (&a19 & 0x37C6CE8F)) ^ 0x145C1699) + 821;
  a21 = a15;
  v27 = sub_1AC16E07C((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24
                                                      + 8
                                                      * (int)(((a20 == 1797235913)
                                                             * ((v25 + 135308050) & 0xF7EF5EF5 ^ 0x7CD)) ^ v25))
                                          - 4))(v27);
}

uint64_t sub_1AC18C1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  int v17;
  uint64_t v18;
  int v19;

  return ((uint64_t (*)(void))(*(_QWORD *)(v18 + 8 * ((28 * (a17 == v17)) ^ v19)) - (v19 ^ 0x218u) + 720))();
}

uint64_t sub_1AC18C21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v24;

  if (a11)
    v22 = a19 == v19;
  else
    v22 = 1;
  v24 = !v22 && a12 != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v20 + 8 * ((274 * v24) | v21)) - ((181 * (v21 ^ 0xC8u)) ^ 0x2D0)))();
}

uint64_t sub_1AC18C26C@<X0>(int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  int v4;
  _BOOL4 v5;

  v4 = 34 * (v3 ^ 0xF8);
  v5 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_1E5B56B60 + (v4 ^ 0x6F2)))(a1 ^ v1, 2064759104) != 0;
  return (*(uint64_t (**)(void))(v2 + 8 * ((v5 * ((83 * (v4 ^ 0x6EB)) ^ 0xE4)) ^ v4)))();
}

uint64_t sub_1AC18C2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;

  v22 = (a19 ^ v20) - ((2 * (a19 ^ v20)) & 0xA8274732) - 736910439;
  return (*(uint64_t (**)(void))(v21
                              + 8
                              * ((389
                                * ((((28 * (v19 ^ 0xEE)) ^ 0x77BF5F18) & (2 * v22) ^ 0x20274510)
                                 + (v22 ^ 0xEFCC0D57)
                                 - 1212490 != 1003302532)) ^ v19)))();
}

uint64_t sub_1AC18C368()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((38 * (v1 + v0 + (((v2 - 2) | 0x20) ^ (v2 - 1004515060)) < 8)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC18C3BC(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v2 ^ (1964 * ((unint64_t)(v1 - a1) > 0x1F))))
                            - 879 * ((v2 + 889282845) & 0xCAFE9ED9 ^ 0x29B)
                            + 1750))();
}

uint64_t sub_1AC18C410(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  unsigned int v11;
  uint64_t v12;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((63 * (v11 >= 3 * (a3 ^ 0x2A8u) - 115)) ^ a3))
                            - (a3 - a11 - 343)
                            + 2428425453))();
}

uint64_t sub_1AC18C45C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v17 = v14 + v13 + v15;
  v18 = v11 + v17;
  v19 = *(_OWORD *)(v18 - 31);
  v20 = a1 + v17;
  *(_OWORD *)(v20 - 15) = *(_OWORD *)(v18 - 15);
  *(_OWORD *)(v20 - 31) = v19;
  return (*(uint64_t (**)(void))(v16
                              + 8
                              * ((((v12 & 0xFFFFFFE0) != 32) * (((a11 + a2 + 1294) | 0x80) ^ 0x6A9)) ^ (a11 + a2 + 879))))();
}

void sub_1AC18C4BC()
{
  JUMPOUT(0x1AC18C478);
}

uint64_t sub_1AC18C4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, _DWORD *a12)
{
  int v12;
  int v13;
  uint64_t v14;

  *a11 = a1;
  *a12 = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((((68 * (v13 ^ 0xFA)) ^ 0xD3) * (a9 == 0)) ^ v13 ^ 0x57D)) - 8))();
}

uint64_t sub_1AC18C528(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((a4 ^ 0x449) - 616) * (v4 == v5)) ^ a4))
                            - (a4 - 1495)
                            + 245))();
}

uint64_t sub_1AC18C558(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((((7 * (a3 ^ 0x28C) - 123) & v3) == 0) * (6 * (a3 ^ 0x3BC) - 1699)) ^ a3))
                            - 8))();
}

uint64_t sub_1AC18C5A0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)(a1 - 7 + (v4 + v3 + v5 - v6)) = *(_QWORD *)(v1 - 7 + (v4 + v3 + v5 - v6));
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (((v6 - (v2 & 0xFFFFFFF8) == -8) * ((v7 ^ 0x231) - 622)) ^ v7))
                            - 4))();
}

uint64_t sub_1AC18C5F8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_QWORD *)(a2 + v4) = *(_QWORD *)(v3 + v4);
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((v5 == 0) * v2) ^ v6)) - 4))();
}

uint64_t sub_1AC18C628(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((((v4 - 590515625) & 0x23328BFF) + 1259) * (v3 == a3)) ^ v4))
                            - ((2 * v4) ^ 0x39Au)
                            + 1750))();
}

uint64_t sub_1AC18C66C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(_BYTE *)(a1 + (v4 - 1003302533)) = *(_BYTE *)(v3 + (v4 - 1003302533));
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((63 * (((83 * (a2 ^ 0x6DD)) ^ 0xFFFFFF06) + v4 == a3)) ^ a2)) - 4))();
}

uint64_t sub_1AC18C6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, int *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v19;
  int v20;
  uint64_t v21;

  *a11 = a1;
  *a12 = (v19 + 1163) ^ (v20 - 892) ^ a19;
  return ((uint64_t (*)(void))(*(_QWORD *)(v21
                                        + 8 * ((((68 * ((v19 + 1163) ^ 0x587)) ^ 0xD3) * (a8 == 0)) ^ (v19 + 1163)))
                            - 8))();
}

uint64_t sub_1AC18C724@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v6;
  void (*v7)(_BYTE *);
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[4];
  unsigned int v12;
  uint64_t v13;

  v4 = (a1 + 516807177) & 0xE13227FE;
  *v6 = v10 ^ (v3 + 340) ^ v4;
  v13 = v9;
  v12 = v4 + ((((2 * v11) | 0xE8105D64) - v11 + 200790350) ^ 0xFEFC209D) * v2 + 1064;
  v7(v11);
  v12 = v4 + 817 + ((v11 + 749825941 - 2 * ((unint64_t)v11 & 0x2CB16F95)) ^ 0x264561BA) * v2 + 247;
  v13 = v8;
  v7(v11);
  return v1 ^ v3;
}

void sub_1AC18C82C(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)a1 - 235795823 * ((-969832657 - (a1 | 0xC631872F) + (a1 | 0x39CE78D0)) ^ 0xAD633189);
  v2 = *(_QWORD *)(a1 + 8);
  ((void (*)(char *, void (*)()))*(&off_1E5B56B60 + v1 - 761))((char *)*(&off_1E5B56B60 + v1 - 930) - 12, sub_1AC1ADF34);
  __asm { BR              X11 }
}

uint64_t sub_1AC18C8FC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((737
                                          * (((a1 ^ (*(_QWORD *)(*(_QWORD *)(v2 + 8 * (a1 - 231)) - 4) == 0)) & 1) == 0)) ^ a1))
                            - 12))();
}

uint64_t sub_1AC18C938()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (v0 - 171)))(v1);
}

void sub_1AC18C964()
{
  unint64_t v0;
  uint64_t v1;
  _BYTE v2[1208];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = (unint64_t)&v2[qword_1EEC7B118 ^ qword_1EEC7B180];
  qword_1EEC7B180 = (56757557 * v0) ^ 0x89C68E6DECB4CE2ELL;
  qword_1EEC7B118 = 56757557 * (v0 ^ 0x89C68E6DECB4CE2ELL);
  *(_DWORD *)*(&off_1E5B56B60
             + ((53 * ((53 * v0) ^ qword_1EEC7B118)) ^ byte_1AC3C13E0[byte_1AC3BD400[(53 * ((53 * v0) ^ qword_1EEC7B118))] ^ 0x4B])
             + 128) = 1797235913;
  v1 = ((uint64_t (*)(uint64_t, uint64_t))*(&off_1E5B56B60
                                                  + ((53 * ((qword_1EEC7B118 - qword_1EEC7B180) ^ 0x2E)) ^ byte_1AC3BD200[byte_1AC3B99B0[(53 * ((qword_1EEC7B118 - qword_1EEC7B180) ^ 0x2E))] ^ 0x89])
                                                  - 8))(512, 1509315540);
  *(_QWORD *)*(&off_1E5B56B60
             + ((53 * ((qword_1EEC7B118 + qword_1EEC7B180) ^ 0x2E)) ^ byte_1AC3BD500[byte_1AC3B9CB0[(53 * ((qword_1EEC7B118 + qword_1EEC7B180) ^ 0x2E))] ^ 0xD8])
             - 13) = v1;
  __asm { BR              X8 }
}

uint64_t sub_1AC18CB14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v5 = v0;
  v4 = 1224239923
     * ((((v1 - 144) | 0x64C93076847FE56DLL) - (v1 - 144) + ((v1 - 144) & 0x9B36CF897B801A90)) ^ 0x4C93851F76CC18BALL);
  STACK[0x538] = 0x99061829000EA8F6;
  *(_QWORD *)(v1 - 120) = dword_1EEC7A540 - v4;
  *(_QWORD *)(v1 - 112) = v4 + 1460018998;
  *(_DWORD *)(v1 - 104) = v4;
  *(_DWORD *)(v1 - 140) = v4 - 1609157431;
  *(_DWORD *)(v1 - 136) = v4 ^ 0xA01634EE;
  *(_DWORD *)(v1 - 132) = v4 ^ 0xA016349C;
  *(_DWORD *)(v1 - 128) = v4 + 2104632390;
  v2 = sub_1AC1AE164(v1 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5 + 8 * *(int *)(v1 - 144)) - 4))(v2);
}

uint64_t sub_1AC18CDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t, uint64_t), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  int v42;
  int v43;
  uint64_t (*v44)(void);
  unsigned int *v45;
  int v46;
  unsigned int v47;
  int v48;

  a13(a12, 2965982036);
  v46 = v44();
  v47 = v42 + v43 - 1207019955 + v46 - ((2 * v46) & 0x701CA3EA) - 1111;
  *v45 = v47;
  v48 = 1812433253 * ((((v47 >> 30) ^ 2) - 1207021067 - ((v47 >> 29) & 2)) ^ v47);
  v45[1] = v48 - (((v48 + 1) << (((v42 + v43 - 64) & 0xCD) + 116)) & 0x701CA3EA) - 1207021066;
  return (*(uint64_t (**)(uint64_t))(a42 + 8 * ((v42 + v43 + 1112) ^ 0xF3)))(-1207021066);
}

void sub_1AC18CEEC()
{
  JUMPOUT(0x1AC18CE80);
}

uint64_t sub_1AC18CF00(double a1, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int8x16_t a19, int32x4_t a20,int8x16_t a21,int8x16_t a22,int8x16_t a23)
{
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;

  v25 = (int8x16_t)vld1q_dup_f32((const float *)v24);
  v26.i64[0] = 0x8000000080000000;
  v26.i64[1] = 0x8000000080000000;
  a2.i64[0] = *(_QWORD *)(v24 + 4);
  a2.i32[2] = *(_DWORD *)(v24 + 12);
  v27 = vextq_s8(v25, a2, 0xCuLL);
  v28 = a2;
  v28.i32[3] = *(_DWORD *)(v24 + 16);
  v29 = (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v28, a23), vandq_s8(v27, v26)), 1uLL), a22);
  v30.i32[0] = *(_DWORD *)(v23 + 4 * (~*(_DWORD *)(v24 + 4) & 1));
  v30.i32[1] = *(_DWORD *)(v23 + 4 * (~*(_DWORD *)(v24 + 8) & 1));
  v30.i32[2] = *(_DWORD *)(v23 + 4 * (~*(_DWORD *)(v24 + 12) & 1));
  v30.i32[3] = *(_DWORD *)(v23 + 4 * ((v28.i8[12] & 1) == 0));
  *(int8x16_t *)v24 = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v24 + 1588), v30), a19), (int8x16_t)vaddq_s32(vsubq_s32(v29, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v29, v29), a21)), a20));
  return ((uint64_t (*)(void))(*(_QWORD *)(a10 + 10592) - 4))();
}

void sub_1AC18D784()
{
  JUMPOUT(0x1AC18D6A4);
}

uint64_t sub_1AC18D78C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)(v14 + 4 * v10) = *(_DWORD *)(v14 + 4 * ((v8 - 997) + v10) + 356) ^ a7 ^ *(_DWORD *)(v13 + 4 * ((*(_DWORD *)(v14 + 4 * (v10 + 1)) & 1) == 0)) ^ ((a5 ^ ((*(_DWORD *)(v14 + 4 * (v10 + 1)) & 0x7FFFFFFE | v9 & 0x80000000) >> 1)) + v12 - (v11 & (2 * (a5 ^ ((*(_DWORD *)(v14 + 4 * (v10 + 1)) & 0x7FFFFFFE | v9 & 0x80000000) >> 1)))));
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * (((v10 != 226) * a3) ^ v8)) - 4))();
}

uint64_t sub_1AC18D7FC@<X0>(uint64_t a1@<X7>, int a2@<W8>, int8x16_t a3@<Q1>, int8x16_t a4@<Q4>, int8x16_t a5@<Q5>, int8x16_t a6@<Q6>, int32x4_t a7@<Q7>)
{
  unsigned int v7;
  int v8;
  uint64_t v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  const float *v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int32x4_t v17;
  int8x16_t v18;

  v13 = (const float *)&v10[56].i32[3];
  v14 = (int8x16_t)vld1q_dup_f32(v13);
  a3.i64[0] = v10[57].i64[0];
  a3.i32[2] = v10[57].i32[2];
  v15 = vextq_s8(v14, a3, 0xCuLL);
  v16 = a3;
  v16.i32[3] = v10[57].i32[3];
  v17 = (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v16, a4), vandq_s8(v15, v12)), 1uLL), a5);
  v18.i32[0] = *(_DWORD *)(v9 + 4 * ((v10[57].i32[0] & 1) == 0));
  v18.i32[1] = *(_DWORD *)(v9 + 4 * ((v10[57].i32[1] & 1) == 0));
  v18.i32[2] = *(_DWORD *)(v9 + 4 * (~v10[57].i32[2] & 1));
  v18.i32[3] = *(_DWORD *)(v9 + 4 * (~v16.i32[3] & 1));
  *(int8x16_t *)((char *)v10 + 4 * (a2 ^ v7) * v8 - 2220) = veorq_s8(veorq_s8(veorq_s8(*v10, v18), v11), (int8x16_t)vaddq_s32(vsubq_s32(v17, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v17, v17), a6)), a7));
  return (*(uint64_t (**)(void))(a1 + 8 * a2))();
}

void sub_1AC18D8D0()
{
  JUMPOUT(0x1AC18D80CLL);
}

uint64_t sub_1AC18D8DC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,unsigned int a45)
{
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  _DWORD *v49;
  unsigned int v50;

  v50 = a5 ^ (((((v45 - a4 + 2098356) & 0xFFDFF83C) + 44304330) & *v49 | v49[623] & 0x80000000) >> 1);
  v49[623] = v49[396] ^ a7 ^ *(_DWORD *)(v48 + 4 * ((*v49 & 1) == 0)) ^ (v50 + v47 - (v46 & (2 * v50)));
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * ((137 * (a45 > 0x26F)) ^ v45)) - 12))();
}

uint64_t sub_1AC18D96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_DWORD *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t (*a40)(uint64_t),uint64_t a41,uint64_t a42)
{
  int v42;
  uint64_t v43;
  uint64_t v44;

  *a33 = 675827633;
  *(_QWORD *)(v43 - 112) = (*a6 + 419885769) ^ a16;
  *(_QWORD *)(v43 - 128) = a14;
  *(_DWORD *)(v43 - 104) = (v42 - 1397066525) ^ a16;
  *(_DWORD *)(v43 - 100) = v42 - 1397066474 + a16;
  *(_DWORD *)(v43 - 120) = a16;
  *(_DWORD *)(v43 - 140) = (v42 - 1397066474) & 0x3A1FF4BE ^ a16;
  *(_DWORD *)(v43 - 136) = a16 + v42 - 81816322;
  v44 = a40(v43 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a42 + 8 * *(int *)(v43 - 144)) - 8))(v44);
}

uint64_t sub_1AC18DA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,unint64_t a35,int *a36)
{
  uint64_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;

  if (v39 >= 0x700D11FF)
    v41 = *a36 + 1;
  else
    v41 = v37;
  *a36 = v41;
  v42 = (((v38 >> 11) ^ 0x1701CA) - ((2 * ((v38 >> 11) ^ 0x1701CA)) & 0x1CA3EA) + a16) ^ v38;
  v43 = (((v42 << 7) & 0x9D2C5680 ^ v42) << 15) & 0xEFC60000 ^ (v42 << 7) & 0x9D2C5680 ^ v42;
  *(_DWORD *)(*a33 + a35) ^= v43 ^ (v43 >> 18);
  return ((uint64_t (*)(void))(*(_QWORD *)(v36 + 8 * ((v40 - 2103178477) ^ (166 * (a35 > 0x1FB)))) - 12))();
}

void sub_1AC18DAF4()
{
  JUMPOUT(0x1AC18CCC0);
}

void sub_1AC18DB08()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_1AC1940FC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) + 535753261 * (((a1 | 0x882D0BB0) - a1 + (a1 & 0x77D2F44F)) ^ 0x82D9059F);
  __asm { BR              X9 }
}

uint64_t sub_1AC1941AC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  BOOL v3;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8 * (v1 - 1361)))(200, 2354554103) == 0;
  return (*(uint64_t (**)(void))(v2 + 8 * ((845 * ((v3 ^ (v1 - 6)) & 1)) ^ v1)))();
}

uint64_t sub_1AC1941F4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  int v10;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(v6 + 8 * ((v7 - 7) ^ 0x519)))(a1, 0);
  if ((_DWORD)result == 16)
  {
    ++v3;
    goto LABEL_7;
  }
  if ((_DWORD)result == 12)
  {
LABEL_7:
    result = (*(uint64_t (**)(uint64_t))(v6 + 8 * (v4 ^ 0x586)))(a1);
    v10 = v3;
    goto LABEL_8;
  }
  if ((_DWORD)result)
  {
    v3 += 2;
    goto LABEL_7;
  }
  *v5 = a1;
  v10 = 1675009311;
LABEL_8:
  *(_DWORD *)(v1 + 12) = v10 ^ v2;
  return result;
}

void sub_1AC19427C(uint64_t a1)
{
  __asm { BR              X8 }
}

void sub_1AC194398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v13;

  v10 = ((2 * ((v9 - 384) ^ 0xCB0893D1)) ^ 0x38) - 454;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(a5 + 8 * (v9 ^ (v9 - 63))) - 1);
  v13 = ((**(unsigned __int8 **)(a6 + 80) - (v11 ^ 0x4A)) ^ 0xDFFFBF6C)
      + (((v10 - v7 - 242) ^ 0x74F7ED09) & (2 * (**(unsigned __int8 **)(a6 + 80) - (v11 ^ 0x4A))))
      + 1072299968 != v8
     || a3 == 113350838;
  __asm { BR              X15 }
}

uint64_t sub_1AC195430@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  *(_BYTE *)(v2 + (v4 - 1003302533)) = *(_BYTE *)(a2 + (v4 - 1003302533));
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((1221 * (v4 - 1 == ((a1 + 970) ^ v3))) ^ a1)) - 12))();
}

void sub_1AC195474(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (1755732067 * ((a1 - 2 * (a1 & 0x7A08EF3) + 127962867) ^ 0xD9663328));
  __asm { BR              X9 }
}

uint64_t sub_1AC195500@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8 * ((1484 * (*(_DWORD *)(v2 - 0x685C86573AC75C47) == 1797235913)) ^ v1))
                            - (v1 + 425)
                            + 1394))();
}

uint64_t sub_1AC195548@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;

  v3 = *(_DWORD *)(v1 - 0x685C86573AC75C4FLL) + 1445289353;
  v4 = *(_DWORD *)(v1 - 0x685C86573AC75C53) - 1700695593;
  v5 = v3 < 0xA26DD68D;
  v6 = v3 > v4;
  if (v5 != v4 < ((v2 - 371951005) & 0x162B83F3u) - 1569860932)
    v7 = v5;
  else
    v7 = v6;
  return (*(uint64_t (**)(void))(a1 + 8 * ((216 * v7) ^ v2)))();
}

uint64_t sub_1AC1955EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  v7 = *(_QWORD *)(v4 - 0x685C86573AC75C5FLL);
  v8 = *(unsigned __int8 *)(v7 + (v3 - 1279817993)) ^ 0x4A;
  v9 = ((*(unsigned __int8 *)(v7 + (v3 - 1279817996)) ^ 0x4A) << (-74 * ((v6 - 8) ^ 0x70) - 84)) | ((*(unsigned __int8 *)(v7 + (v3 - 1279817995)) ^ 0x4A) << 16) | ((*(unsigned __int8 *)(v7 + ((v6 - 425) ^ 0xB3B78527) + v3) ^ 0x4A) << 8) | v8;
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * ((14
                                * (((v2 + v9 - 2 * (v9 & (v2 + 18) ^ v8 & 0x12) + 0x1000000) & 0xFFFFFF ^ 0x1FA4C9)
                                 - (*(_DWORD *)(a1 + 32) ^ v5) != -724669151)) ^ (v6 + 248))))();
}

void sub_1AC1956D4()
{
  _DWORD *v0;

  *v0 = -1797193732;
}

uint64_t sub_1AC1958A0@<X0>(_QWORD *a1@<X0>, int a2@<W3>, uint64_t a3@<X8>)
{
  _DWORD *v3;
  int v4;

  *(_QWORD *)(*a1 - 0x181849F3B30904BALL) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * ((1811 * (*v3 == v4)) ^ (a2 + 841))) - 8))();
}

uint64_t sub_1AC1958E4@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = (a2 + 841);
  *(_QWORD *)(*a1 - 0x181849F3B30904BALL) = v5 + v6 + (v7 ^ 0x3D9);
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * (int)((1811 * (*v3 == v4)) ^ v7)) - 8))();
}

void sub_1AC195940(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  int v3;

  *(_DWORD *)(*(_QWORD *)(a1 + 24) - 0x3DC2AB9B7B522197) = v3;
  *v1 = v2;
  JUMPOUT(0x1AC195898);
}

void sub_1AC195960(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1AC1959B8()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((275 * (v1 != 576264642)) ^ 0x4D8u)) - 4))();
}

uint64_t sub_1AC1959E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = v3 - (**(_BYTE **)(a2 + 8) == 0);
  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 800) = 803242100;
  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 804) = 1468695530;
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 808) = *(_QWORD *)(a1 + 96) + 816;
  v5 = *(_QWORD *)(a2 + 8) + (*(_DWORD *)(a2 + 4) - v4);
  v6 = 1734042137 * ((-394319217 - (&v8 | 0xE87F2A8F) + (&v8 | 0x1780D570)) ^ 0x4B4E163D);
  v8 = *(_QWORD *)(a1 + 96) + 0x48247A3086942A9ELL;
  v12 = v4 - v6 - 295136066;
  v9 = 212 - v6;
  v10 = v5;
  ((void (*)(uint64_t *))(*(_QWORD *)(a3 + 296) - 8))(&v8);
  return v11 ^ 0x732F3CBu;
}

uint64_t sub_1AC195B30(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(qword_1E5B52930[((2 * (*(_DWORD *)(a2 + 4) == 576264643)) | (4
                                                                                         * (*(_DWORD *)(a2 + 4) == 576264643))) ^ 0x16Bu]
                            - 12))();
}

uint64_t sub_1AC195B6C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 88) = ((**(_BYTE **)(a2 + 8) != 0) | (2 * (**(_BYTE **)(a2 + 8) != 0))) ^ 0x4D;
  return 0;
}

uint64_t sub_1AC195BA4()
{
  return 4294925278;
}

void sub_1AC195BAC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) ^ (1225351577 * ((-2 - ((a1 | 0x21ABC784) + (~(_DWORD)a1 | 0xDE54387B))) ^ 0xFDCEE06D));
  __asm { BR              X10 }
}

uint64_t sub_1AC195C74@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v12 = 1755732067
      * (((&a4 ^ 0xE69D8F21 | 0x727E95CD)
        - (&a4 ^ 0xE69D8F21)
        + ((&a4 ^ 0xE69D8F21) & 0x8D816A30)) ^ 0x4A25A737);
  a6 = (v10 + 747) ^ v12;
  a7 = &STACK[0x3DC2AB9B7B52219B];
  a8 = v12 ^ 0x2B915367;
  a4 = &STACK[0x181849F3B30904C2];
  a5 = v11;
  v13 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * (v10 - 131)) - 8))(&a4);
  return (*(uint64_t (**)(uint64_t))(v9
                                            + 8
                                            * (((*(_DWORD *)(v11 - 0x685C86573AC75C47) == v8) * ((v10 + 952) ^ 0x19D)) ^ v10)))(v13);
}

uint64_t sub_1AC195D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  int v10;
  uint64_t v11;
  int v12;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((a10 == v10) | ((a10 == v10) << 6) | v12))
                            - ((v12 + 956489288) & 0xC6FD1DFF ^ 0xEELL)))();
}

uint64_t sub_1AC195DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11)
{
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = (v13 + v11);
  *(_BYTE *)(v12 + v17) = *(_BYTE *)(a11 + v17) ^ 0x4A;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15
                                        + 8
                                        * ((((int)v17 + 1 >= (a10 ^ v14)) | (((int)v17 + 1 >= (a10 ^ v14)) << 6)) ^ v16))
                            - 8))();
}

void sub_1AC195E0C(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(*(_QWORD *)(v3 + 24) - 0x1706FB9DE6F6FC5CLL) = v1;
  *(_DWORD *)(v4 - 0x7A2643E541D57A3CLL) = v2;
  *(_DWORD *)v3 = *a1;
}

uint64_t sub_1AC195E74(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(qword_1E5B52930[(317 * (*(_DWORD *)(a2 + 4) == 576264643)) ^ 0x471u] - 4))();
}

uint64_t sub_1AC195EB0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = (**(unsigned __int8 **)(a2 + 8) ^ 0x78E7B9FE)
                       - 281153668
                       + ((2 * **(unsigned __int8 **)(a2 + 8)) & 0x1FC);
  return 0;
}

uint64_t sub_1AC195EE8()
{
  return 4294925278;
}

void sub_1AC195EF0(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = 1224239923 * (((a1 | 0x53DFEB40) - (a1 & 0x53DFEB40)) ^ 0xA16C1697);
  v2 = *(_DWORD *)a1 ^ v1;
  v3 = (*(_BYTE *)(a1 + 32) ^ v1);
  ((void (*)(_QWORD, void (*)()))*(&off_1E5B56B60 + v2 - 555))(*(&off_1E5B56B60 + v2 - 596), sub_1AC1AE3E0);
  v4 = *(_QWORD *)*(&off_1E5B56B60 + v2 - 599);
  v5 = v2 + 235795823 * ((&v5 + 707848054 - 2 * ((unint64_t)&v5 & 0x2A30E776)) ^ 0xBE9DAE2F) + 206;
  v6 = v4;
  sub_1AC18C82C((uint64_t)&v5);
  __asm { BR              X8 }
}

uint64_t sub_1AC196020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16, char a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v20 = 603 * (v17 ^ 0x309);
  a16 = (v17 + 263) ^ (3804331
                     * (((&a16 | 0xB301206E) - &a16 + (&a16 & 0x4CFEDF90)) ^ 0x499FD338));
  a17 = 75 - -85 * (((&a16 | 0x6E) - &a16 + (&a16 & 0x90)) ^ 0x38);
  sub_1AC174218((uint64_t)&a16);
  v21 = **(_DWORD **)(v19 + 8 * (v20 - 1198)) != ((v20 - 773371400) & 0x2E18B7FB ^ 0x6AA);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18
                                                                                                  + 8 * ((v21 | (8 * v21)) ^ v20)))(v22, v23, v24, v25, v26, v27, v28);
}

uint64_t sub_1AC1960E0()
{
  uint64_t v0;
  _DWORD *v1;
  _DWORD *v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t (*v14)(uint64_t, _BYTE *, _DWORD *);
  int v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  unsigned int v20;
  uint64_t result;
  uint64_t v22;
  _BYTE v23[20];
  _BYTE v24[150];

  v8 = v7 - 427;
  v9 = *(unsigned int **)(v5 + 8 * ((v7 - 427) ^ 0x330));
  v10 = *(_QWORD **)(v5 + 8 * (v8 - 645));
  v11 = *v9;
  v12 = (_BYTE *)*v10;
  v24[0] = *(_BYTE *)*v10 - 70;
  v24[1] = v12[1] - 70;
  v24[2] = v12[2] - 70;
  v24[3] = v12[3] - 70;
  v24[4] = v12[4] - 70;
  v24[5] = v12[5] - 70;
  v24[6] = v12[6] - 70;
  v24[7] = v12[7] - 70;
  v24[8] = v12[8] - 70;
  v24[9] = v12[9] - 70;
  v24[10] = v12[10] - 70;
  v24[11] = v12[11] - 70;
  v24[12] = v12[12] - 70;
  v24[13] = v12[13] - 70;
  v24[14] = v12[14] - 70;
  v24[15] = v12[15] - 70;
  v24[16] = v12[16] - 70;
  v24[17] = v12[17] - 70;
  v24[18] = v12[18] - 70;
  v24[19] = v12[19] - 70;
  v24[20] = v12[20] - 70;
  v24[21] = v12[21] - 70;
  v13 = (_BYTE *)*v10;
  v24[22] = v13[22] - 70;
  v24[23] = v13[23] - 70;
  v24[24] = v13[24] - 70;
  v24[25] = v13[25] - 70;
  v24[26] = v13[26] - 70;
  v24[27] = v13[27] - 70;
  v24[28] = v13[28] - 70;
  v24[29] = v13[29] - 70;
  v14 = *(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(v5 + 8 * (v8 - 575));
  v15 = v14(v11, v24, v1);
  v16 = ((2 * v15) & 0xDC5F6BFE) + (v15 ^ 0xEE2FB5FF);
  if (v16 != -298863105)
  {
    if (v16 == -298862003)
    {
      v17 = *v9;
      v18 = **(_BYTE ***)(v5 + 8 * (v3 - 559));
      v23[0] = *v18 - 72;
      v23[1] = v18[1] - 72;
      v23[2] = v18[2] - 72;
      v23[3] = v18[3] - 72;
      v23[4] = v18[4] - 72;
      v23[5] = v18[5] - 72;
      v23[6] = v18[6] - 72;
      v23[7] = v18[7] - 72;
      v23[8] = v18[8] - 72;
      v23[9] = v18[9] - 72;
      v23[10] = v18[10] - 72;
      v23[11] = v18[11] - 72;
      v23[12] = v18[12] - 72;
      v23[13] = v18[13] - 72;
      v23[14] = v18[14] - 72;
      v23[15] = v18[15] - 72;
      v23[16] = v18[16] - 72;
      v23[17] = v18[17] - 72;
      v23[18] = v18[18] - 72;
      v23[19] = v18[19] - 72;
      v19 = v14(v17, v23, v1);
      v20 = (2 * v19) & 0xDDFEFE7E;
      v16 = (v19 ^ 0xEEFF7F3F) + 890090976;
    }
    else
    {
      v20 = 903708448;
    }
    __asm { BR              X8 }
  }
  *(_DWORD *)(v6 + 356) |= ((v3 + 925) | 2) ^ 0x6A0;
  *(_DWORD *)(v6 + 56) = 1218717361;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _DWORD *))(v5 + 8 * (v3 - 672)))(*v1, v6 + 344, v6 + 348, v6 + 352, v2);
  v22 = *(_QWORD *)(v0 + 24);
  *(_DWORD *)(*(_QWORD *)(v0 + 8) - 0x1F962A9297594DE9) = *v1;
  *(_DWORD *)(v22 - 0x589C7105EC0C7F2ALL) = *v2;
  *(_DWORD *)(v0 + 16) = 1797235913;
  return result;
}

void sub_1AC1964F4(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) + 3804331 * ((a1 & 0x618DD5DA | ~(a1 | 0x618DD5DA)) ^ 0x64ECD973);
  __asm { BR              X15 }
}

uint64_t sub_1AC1965A0(_QWORD *a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((*(_DWORD *)(*a1 + v4) == ((((v1 ^ 0x554) - 1486) | 0x9A) ^ v2))
                                          * (((v1 ^ 0x554) - 2057733775) & 0x7AA683E6 ^ 0x333)) ^ v1 ^ 0x554))
                            - 8))();
}

uint64_t sub_1AC1965FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v6 = (v2 + 287) ^ (1734042137 * ((((2 * &v4) | 0x46E5AF94) - &v4 - 594728906) ^ 0x7FBC1487));
  v4 = a1;
  v5 = v1;
  return sub_1AC16E3FC((uint64_t)&v4);
}

void sub_1AC196774(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;

  v1 = 535753261 * ((((2 * a1) | 0x48BC2786) - a1 - 610145219) ^ 0x2EAA1DEC);
  v2 = *(_DWORD *)a1 - v1;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x48247A308694277ALL);
  v4 = *(_DWORD *)(a1 + 16) + v1;
  v5 = v3 - 1468695530;
  if (v3 - 1468695530 < 0)
    v5 = 1468695530 - v3;
  __asm { BR              X12 }
}

uint64_t sub_1AC196854()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((((v2 - 27) ^ 0x3DC) * (v1 != 70636353)) ^ v2)) - 12))();
}

uint64_t sub_1AC196890(uint64_t a1)
{
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1
                                                                        + 8
                                                                        * ((114
                                                                          * ((((((v2 ^ 0x541) - 806704301) & 0x30154FF3)
                                                                             + 14) ^ 0x161) != 32)) ^ ((v2 ^ 0x541) - 806704301) & 0x30154FF3))
                                                            - ((40 * (((v2 ^ 0x541) - 806704301) & 0x30154FF3 ^ 0x136u)) ^ 0xC4)))(a1, 353, 1926029066);
}

uint64_t sub_1AC196968(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _BOOL4 v13;

  v13 = v5 > v8;
  if (v13 == a3 + v9 < v10)
    v13 = a3 + v9 < v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (v12 ^ (v13 * v11))) - ((v12 - 121) ^ a5)))();
}

uint64_t sub_1AC1969B8@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W5>, int a4@<W6>, int a5@<W7>, int a6@<W8>)
{
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  _QWORD *v10;
  int v11;
  int v12;

  *(_BYTE *)(*(_QWORD *)(a1 + 24) + (v7 + a6)) = *(_DWORD *)(*v10 + 4 * (a2 - 1926029066)) ^ v9;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((((((v12 ^ 0x189) - 27) ^ a5) + v7 != (((v12 ^ 0x189) + a3) & a4) + v8) * v11) ^ v12 ^ 0x189))
                            - 12))();
}

void sub_1AC196A34()
{
  JUMPOUT(0x1AC196934);
}

uint64_t sub_1AC196A40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 32) = v1;
  return result;
}

uint64_t sub_1AC196A60(uint64_t result)
{
  uint64_t v1;
  __int16 v2;
  int v3;
  int v4;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_DWORD *)(result + 8) - -24687 * (((result | 0xEC2B) - (result & 0xEC2B)) ^ 0xE018);
  *(_DWORD *)(v1 - 0x5800F43E2BD23AECLL) = ((v2 & 0x1FF ^ 0x157) - ((2 * (v2 & 0x1FF ^ 0x157)) & 0x10C) + 18054) ^ 0x4C23BB66;
  *(_QWORD *)(v1 - 0x5800F43E2BD23B0CLL) = 0x9178FF37DA617B28;
  *(_DWORD *)(v1 - 0x5800F43E2BD23AF0) = 849733684;
  v3 = v2 ^ 0xE1;
  if (v3 == 1)
  {
    v4 = 849733700;
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    *(_DWORD *)(v1 - 0x5800F43E2BD23AF4) = -394377736;
    v4 = 849733704;
LABEL_5:
    *(_QWORD *)(v1 - 0x5800F43E2BD23B04) = 0xC4610F814CE98709;
    *(_QWORD *)(v1 - 0x5800F43E2BD23AFCLL) = 0x3B9EF07EB31678F6;
    *(_DWORD *)(v1 - 0x5800F43E2BD23AF0) = v4;
  }
  *(_DWORD *)(result + 4) = 1124607462;
  return result;
}

void sub_1AC196BBC(uint64_t a1)
{
  int v1;

  v1 = 1734042137 * (a1 ^ 0x5CCEC34D);
  __asm { BR              X9 }
}

uint64_t sub_1AC196C34@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return (*(uint64_t (**)(void))(a1 + 8 * ((((v1 + 218) ^ 0x4CA ^ (41 * (v1 ^ 0xCA))) * (v2 == 281128576)) ^ v1)))();
}

uint64_t sub_1AC196C90@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(a2 + 8 * (a1 ^ 0x213)) - 12))();
}

uint64_t sub_1AC196D8C@<X0>(int a1@<W4>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a2
                                        + 8
                                        * ((((((v3 - 1180) | 0x100) + 1489) ^ ((v3 - 1041) | a1)) * (v2 == 0)) ^ v3))
                            - 4))();
}

uint64_t sub_1AC196DC4@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  int v2;

  return (*(uint64_t (**)(void))(a2 + 8 * ((((a1 + 168) ^ 0x339) * (v2 != 0)) ^ a1)))();
}

uint64_t sub_1AC196DE8@<X0>(int a1@<W6>, int a2@<W7>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v6 = v3 + v4;
  v7 = (a2 ^ 0x108) + v4;
  *(_DWORD *)(*(_QWORD *)(v5 - 0x48247A3086942776) + 4 * (v6 + 1)) = a1;
  v8 = ((a2 ^ 0xB8) - 2147334068) & 0x7FFDB7DB;
  *(_DWORD *)(v5 - 0x48247A308694277ALL) = v7;
  v9 = (v8 ^ (v3 + 442)) + v7;
  if (v9 < 0)
    v9 = -v9;
  return (*(uint64_t (**)(void))(a3
                              + 8
                              * ((((int)((v9 ^ 0x779A87FE) - 537920532 + ((2 * v9) & 0xEF350FFC) + v3) > (int)(((v8 - 313) | 0x111) ^ 0xFFFFFE4E))
                                * ((v8 - 808553725) & 0x30318BF7 ^ 0x711)) ^ v8)))();
}

uint64_t sub_1AC196EE8@<X0>(uint64_t a1@<X8>)
{
  int v1;
  _QWORD *v2;
  int v3;
  unsigned int v4;

  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((104 * (((v3 + 40) ^ (*(_DWORD *)(*v2 + 4 * v4) == v1)) & 1)) ^ v3)))();
}

uint64_t sub_1AC196F18@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  int v4;

  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (((v3 + v2 - 434 + v1 > (int)(((v4 - 313) | 0x111) ^ 0xFFFFFE4E))
                                * ((v4 - 808553725) & 0x30318BF7 ^ 0x711)) ^ v4)))();
}

uint64_t sub_1AC196F70(uint64_t result)
{
  int v1;
  int v2;
  _DWORD *v3;
  int v4;
  int v5;

  if ((v2 + v1) >= 0x7FFFFFFF)
    v5 = -1357576236 - v4;
  else
    v5 = v4;
  *v3 = v5;
  *(_DWORD *)(result + 24) = 120779723;
  return result;
}

void sub_1AC196FB4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _DWORD v3[2];
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)a1 - 535753261 * ((a1 + 317168069 - 2 * (a1 & 0x12E799C5)) ^ 0x181397EA);
  v2 = *(_QWORD *)(a1 + 8);
  v3[0] = v1 + 235795823 * (((~v3 & 0x980B8B58) - (~v3 | 0x980B8B59)) ^ 0xCA6C200) + 180;
  v4 = v2;
  sub_1AC1AA220((uint64_t)v3);
  __asm { BR              X8 }
}

void sub_1AC1970A8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;

  if ((*(_DWORD *)(v2 - 0x48247A308694277ALL) - 1468695531) >= 0x7FFFFFFF)
    v3 = v1;
  else
    v3 = v1 + 2;
  *(_DWORD *)(v0 + 16) = v3;
}

void sub_1AC197114(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v1 = 628203409 * (((a1 | 0x89B748DF) - a1 + (a1 & 0x7648B720)) ^ 0xB3F44EC);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 24) - 0x324CCD1CACB40BECLL) + 1376190232;
  v3 = *(_DWORD *)(a1 + 20) + v1 + 1871516637;
  v4 = v2 < 0x7BCFF524;
  v5 = v2 > v3;
  if (v3 < 0x7BCFF524 != v4)
    v5 = v4;
  __asm { BR              X12 }
}

uint64_t sub_1AC1971F4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40)
                          + v3
                          - 701036365
                          + 40 * (((v1 ^ 0x52E) - 1145515685) & 0x44472B76 ^ 0x148u));
  return (*(uint64_t (**)(void))(v2 + 8 * ((252 * (((v4 - ((2 * v4) & 0x16) + 1120374283) & 0x1F) != 20)) ^ v1 ^ 0x52E)))();
}

uint64_t sub_1AC197278(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  _BOOL4 v5;

  v5 = v3 - 1973911874 > (v1 - 1478585470);
  if ((v1 - 1478585470) < 0xB42174C9 != (v3 - 1973911874) < 0xB42174C9)
    v5 = (v3 - 1973911874) < 0xB42174C9;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * (v4 ^ (2041 * !v5))) - (v4 ^ 0x144)))(a1, 2497773335);
}

uint64_t sub_1AC1972F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * (((((v4 ^ 0x25A) << 6) - 268)
                                                        * (*(unsigned __int8 *)(v1 + (v3 + 321)) >> 7)) ^ v4))
                                          - 4))(a1);
}

uint64_t sub_1AC197360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5
                                                               + 8
                                                               * ((22
                                                                 * (((a5 - 220) & (2 * (v6 + 22)))
                                                                  + ((v6 + 22) & 0x7F ^ 0x3FDAFFB2u)
                                                                  - 1071316915 < 4)) ^ a5))
                                                   - 4))(a1, 2497773335);
}

uint64_t sub_1AC1973B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v10 = v9 + a7 - 551448218;
  v11 = ((((a5 + 814) ^ 0x52E) + 287) ^ 0x3C82A783) + v7;
  v12 = v10 < 0x48C58723;
  v13 = v10 > v11;
  if (v12 != v11 < 0x48C58723)
    v13 = v12;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8 * ((471 * !v13) ^ (a5 + 814))))(a1, 2497773335);
}

uint64_t sub_1AC197430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  int v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (v8 ^ (1161 * (a7 != 1071316915)))) - 4))();
}

uint64_t sub_1AC1974C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v8;
  int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((642 * (v9 - 1 == a6)) ^ a8)) - 12))();
}

uint64_t sub_1AC197544(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  _BOOL4 v11;

  v8 = a3 + v5 + v6 + v7 + 76083597 - 1212338892;
  v9 = v3 + 1006652665;
  v10 = (v9 < 0x48432E40) ^ (v8 < ((a2 + 814) ^ 0x48432A2Eu));
  v11 = v8 > v9;
  if (v10)
    v11 = v8 < ((a2 + 814) ^ 0x48432A2Eu);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8 * ((966 * !v11) ^ a2)) - 4))(a1, 2497773335);
}

uint64_t *sub_1AC1975D0@<X0>(uint64_t *result@<X0>, int a2@<W2>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = result[6];
  v10 = *result;
  v9 = result[1];
  *a3 = (((v6 - 878) | 0x40) ^ 0x9942F441) + v5;
  *(_DWORD *)(v10 - 0x5FA3F43A3B4E8EE2) = v4;
  *(_DWORD *)(v8 - 0x52155BFDA38671FDLL) = a2;
  *(_QWORD *)(v9 - 0x1F589EA4AC42BDE9) = v3 + (v7 - 1848436554);
  *((_DWORD *)result + 8) = 1797235913;
  return result;
}

uint64_t sub_1AC197654(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))(qword_1E5B52930[(857
                                                           * ((*(_DWORD *)(a2 + 4) - 576264642) < 0x15)) ^ 0x186u]
                                          - 4))(4294925278);
}

uint64_t sub_1AC1976B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;

  *(_DWORD *)(*(_QWORD *)(a2 + 96) + 24) = v4;
  v5 = *(_DWORD *)(a1 + 4) - ((2 * *(_DWORD *)(a1 + 4) - 1152529284) & 0xA8274732) - 1313175081;
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v2
                                                     + 8
                                                     * ((1105
                                                       * (((2 * v5) & 0x77BF5D9C ^ 0x20274510)
                                                        + (v5 ^ 0xEFCC0D57)
                                                        - 1212490 != 1003302532)) | v3))
                                         - 4))(0);
}

uint64_t sub_1AC197740()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((218 * ((v2 + v1 - 1004515022) > 7)) ^ 0x576)) - 8))();
}

uint64_t sub_1AC1977A0(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((v5 - a4 - (a2 ^ 0x340uLL) > 0x1F) * (a1 - 405)) ^ a1)) - 4))();
}

uint64_t sub_1AC1977D8(int a1)
{
  uint64_t v1;
  unsigned int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((25
                                          * ((((((a1 - 714214052) & 0xEFDE5DDB) + 984854291) ^ (v2 < 0x20)) & 1) == 0)) ^ (a1 + 453)))
                            - 12))();
}

uint64_t sub_1AC197834@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v8 = v6 + v5 + v7 + ((a1 + 146) | 0x200u);
  v9 = *(_OWORD *)(v3 + v8 - 15);
  v10 = *(_OWORD *)(v3 + v8 - 31);
  v11 = a2 + v8;
  *(_OWORD *)(v11 - 15) = v9;
  *(_OWORD *)(v11 - 31) = v10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((v4 & 0xFFFFFFE0) != 32) ^ a1)) - 12))();
}

void sub_1AC197880()
{
  JUMPOUT(0x1AC197844);
}

uint64_t sub_1AC19788C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v5
                                                     + 8
                                                     * (((((v6 == a2) ^ (a5 + 1)) & 1)
                                                       * (((a5 - 584) | 0x268) + 1039)) ^ a5))
                                         - 12))(0);
}

uint64_t sub_1AC1978C8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  char v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (a4 ^ (254 * ((v5 & 0x18) == 0)))) - ((a4 ^ 0x86u) - 170) + 824))();
}

uint64_t sub_1AC1978FC@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  v9 = (v8 + v7 + v6 - a2 + 840);
  *(_QWORD *)(a3 - 7 + v9) = *(_QWORD *)(v4 - 7 + v9);
  return (*(uint64_t (**)(void))(v3 + 8 * (((a2 - (v5 & 0xFFFFFFF8) == -8) * ((a1 ^ 0x268) + 1637)) ^ a1)))();
}

uint64_t sub_1AC19795C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;

  *(_QWORD *)(a6 + v9) = *(_QWORD *)(v8 + v9);
  return (*(uint64_t (**)(void))(v6 + 8 * (((a2 == 0) * v7) ^ a1)))();
}

uint64_t sub_1AC197988(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v5 + 8 * (v8 ^ (37 * (v7 != a5))))
                                         - ((v8 + 446) ^ (unint64_t)(v6 + 708) ^ (v8 + a4))))(0);
}

uint64_t sub_1AC1979C0@<X0>(int a1@<W2>, int a2@<W5>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  *(_BYTE *)(a3 + (a1 - 1003302533)) = *(_BYTE *)(v5 + (a1 - 1003302533));
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v3
                                                     + 8
                                                     * (((4 * (a2 + a1 - 837 == v4)) | (8 * (a2 + a1 - 837 == v4))) ^ a2))
                                         - 12))(0);
}

uint64_t sub_1AC197A04(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))(qword_1E5B52930[(91 * (*(_DWORD *)(a2 + 4) != 576264655)) ^ 0x4B7u] - 12))(4294925278);
}

uint64_t sub_1AC197A4C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(a2 + 96) + 468) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 12);
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v2 + 3968) - 12))(0);
}

void sub_1AC197AB8()
{
  JUMPOUT(0x1AC197A84);
}

void sub_1AC197AC0(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 44) - 1224239923 * (((a1 | 0x1FD8AEE4) - a1 + (a1 & 0xE027511B)) ^ 0xED6B5333);
  __asm { BR              X11 }
}

uint64_t sub_1AC197BB8()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((763 * ((v0 ^ ((v1 - 212) | 0x11A) ^ 0x596E084E) != 0)) ^ v1))
                            - 12))();
}

uint64_t sub_1AC197C0C()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;

  v9 = v3 > 0x7B533F06;
  *(_BYTE *)(*(_QWORD *)(v8 - 120) + (v2 ^ 0x9A6F5B89) + v5) = *(_BYTE *)(*(_QWORD *)(v6 + 8 * (v2 ^ 0x67A))
                                                                        + (((v2 ^ 0x9A6F5B89) + v5) & 0xFLL)) ^ *(_BYTE *)(v0 + (v2 ^ 0x9A6F5B89) + v5) ^ *(_BYTE *)(*(_QWORD *)(v6 + 8 * (v2 ^ 0x615)) + (((v2 ^ 0x89) + (_BYTE)v5) & 0xF) - 8) ^ (23 * (((v2 ^ 0x89) + v5) & 0xF)) ^ *(_BYTE *)(*(_QWORD *)(v6 + 8 * (v2 ^ 0x6AA)) + (((v2 ^ 0x89) + (_BYTE)v5) & 0xF) - 7);
  if (v9 == v5 + 521936532 < v1)
    v9 = v5 + 521936532 < v4;
  return (*(uint64_t (**)(void))(v7 + 8 * ((76 * v9) ^ v2)))();
}

uint64_t sub_1AC197CD4()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((251
                                          * (((2 * v1) & 0xAEBBEEB4 ^ 0xA2980220)
                                           + (v1 ^ 0x8E33FEEE)
                                           + ((2 * (v0 + 600)) ^ 0x7BFFF730) != ((v0 + 516) ^ 0x535DF553))) ^ (v0 + 600)))
                            - 8))();
}

uint64_t sub_1AC197D50()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((122
                                * (((v0 - 4) ^ (v2 + v1 + (((v0 - 407) | 0x53) ^ 0x28A20C71u) < 8)) & 1)) ^ v0)))();
}

uint64_t sub_1AC197DD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (a7 ^ (56 * ((a8 + a3) < 0xFFFFFFF0))))
                            - ((a7 ^ 0xC0u)
                             - 133)
                            + 902))();
}

uint64_t sub_1AC197E0C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v20;
  unint64_t v21;
  int v23;

  v12 = (a3 + v9 + v8 + 16);
  v13 = *(_QWORD *)(v11 - 120);
  v14 = v12 + v13;
  v15 = v12 & 0xF;
  v16 = v15 - v14 + v6;
  v17 = (v7 | v15) - v14;
  v18 = (v5 | v15) - v14;
  v20 = v16 >= 0x10
     && v4 - v13 >= (((a4 + 110) | 0x17) ^ ((a4 + 270) | 0x151u) ^ 0x1F6uLL)
     && (unint64_t)(v17 + 2) >= 0x10;
  v21 = v18 + 1;
  v23 = !v20 || v21 < 0x10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * (((2 * v23) | (8 * v23)) ^ a4)) - 8))();
}

uint64_t sub_1AC197EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8 * ((810 * (v7 >= ((32 * a7) ^ 0xFFFF4041) + ((a7 - 1352) | 0x106))) ^ a7))
                            - 12))();
}

uint64_t sub_1AC197EE0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int8x16_t v63;
  uint64_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16x4_t v68;
  int8x16x4_t v69;

  *(_DWORD *)(v62 - 124) = a2 + 13;
  v68.val[1].i64[0] = ((_BYTE)a2 + 5) & 0xF;
  v68.val[1].i64[1] = ((_BYTE)a2 + 4) & 0xF;
  v68.val[2].i64[0] = ((_BYTE)a2 + (a5 ^ 0x80) + 87 + 108) & 0xF;
  v68.val[2].i64[1] = ((_BYTE)a2 + 2) & 0xF;
  v68.val[3].i64[0] = ((_BYTE)a2 + 1) & 0xF;
  v68.val[3].i64[1] = a2 & 0xF;
  v63.i64[0] = 0xD1D1D1D1D1D1D1D1;
  v63.i64[1] = 0xD1D1D1D1D1D1D1D1;
  v64 = (a2 + v57);
  v68.val[0].i64[0] = ((_BYTE)a2 + (_BYTE)v57) & 0xF;
  v68.val[0].i64[1] = ((_BYTE)a2 + 6) & 0xF;
  v65.i64[0] = vqtbl4q_s8(v68, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v69.val[0].i64[1] = ((_BYTE)a2 + 14) & 0xF;
  v69.val[1].i64[1] = ((_BYTE)a2 + 12) & 0xF;
  v69.val[2].i64[1] = ((_BYTE)a2 + 10) & 0xF;
  v69.val[3].i64[1] = ((_BYTE)a2 + 8) & 0xF;
  v69.val[0].i64[0] = ((_BYTE)a2 - 1) & 0xF;
  v69.val[1].i64[0] = *(_DWORD *)(v62 - 124) & 0xF;
  v69.val[2].i64[0] = ((_BYTE)a2 + 11) & 0xF;
  v69.val[3].i64[0] = ((_BYTE)a2 + 9) & 0xF;
  v65.i64[1] = vqtbl4q_s8(v69, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v66 = vrev64q_s8(vmulq_s8(v65, v63));
  *(int8x16_t *)(*(_QWORD *)(v62 - 120) - 15 + v64) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v59 + (v64 & 0xF) - 15), *(int8x16_t *)(v56 - 15 + v64)), veorq_s8(*(int8x16_t *)((v64 & 0xF) + v60 - 13), *(int8x16_t *)((v64 & 0xF) + v58 - 14))), vextq_s8(v66, v66, 8uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a56
                                        + 8
                                        * ((55
                                          * ((((((a5 ^ 0xBD80) - 1618693033) & 0x607B4B9F) + 1999348774) & 0x88D459F6 ^ 0x1A4) != (v61 & 0xFFFFFFF0))) ^ ((a5 ^ 0xBD80) - 1618693033) & 0x607B4B9Fu))
                            - 4))();
}

uint64_t sub_1AC198080(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  int v22;
  uint64_t v23;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v23
                                                                       + 8
                                                                       * ((125 * (((a8 ^ (v22 == a4)) & 1) == 0)) ^ a8))
                                                           - ((a8 + 1920881483) & 0x8D81AFEF)
                                                           + 1251))(a22, a2, a8 ^ 0x4Eu);
}

uint64_t sub_1AC1980DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  char v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((((((v7 & 8) == 0) ^ (a7 + 40)) & 1) * ((a7 ^ 0x540) - 145)) ^ a7))
                            - 12))();
}

uint64_t sub_1AC198114(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  int8x16x4_t v69;

  v66 = v63 + v65 + v62;
  v67 = v66 + v57 - a4;
  v69.val[0].i64[0] = v67 & (a3 ^ 0x1A0);
  v69.val[0].i64[1] = ((_BYTE)v66 - (_BYTE)a4 + 6) & 0xF;
  v69.val[1].i64[0] = ((_BYTE)v66 - (_BYTE)a4 + 5) & 0xF;
  v69.val[1].i64[1] = ((_BYTE)v66 - (_BYTE)a4 + 4) & 0xF;
  v69.val[2].i64[0] = ((_BYTE)v66 - (_BYTE)a4 + 3) & 0xF;
  v69.val[2].i64[1] = ((_BYTE)v66 - (_BYTE)a4 + 2) & 0xF;
  v69.val[3].i64[0] = ((_BYTE)v66 - (_BYTE)a4 + 1) & 0xF;
  v69.val[3].i64[1] = ((_BYTE)v66 - (_BYTE)a4) & 0xF;
  *(int8x8_t *)(*(_QWORD *)(v64 - 120) - 7 + v67) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v59 + v69.val[0].i64[0] - 7), *(int8x8_t *)(v56 - 7 + v67)), veor_s8(*(int8x8_t *)(v69.val[0].i64[0] + v60 - 5), *(int8x8_t *)(v69.val[0].i64[0] + v58 - 6))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v69, (int8x16_t)xmmword_1AC3B5870), (int8x8_t)0xD1D1D1D1D1D1D1D1)));
  return (*(uint64_t (**)(__n128))(a56 + 8 * ((1443 * (a4 - (v61 & 0xFFFFFFF8) == -8)) ^ a3)))((__n128)xmmword_1AC3B5870);
}

void sub_1AC198230()
{
  JUMPOUT(0x1AC19816CLL);
}

uint64_t sub_1AC198238@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v15;
  int v16;
  uint64_t v17;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17 + 8 * (v16 ^ (1527 * (v15 == a1))))
                                          - ((v16 - 414) ^ 0x1F2)))(a15);
}

uint64_t sub_1AC198278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = (a6 + v8);
  *(_BYTE *)(*(_QWORD *)(v13 - 120) + v14) = *(_BYTE *)(v10 + (v14 & 0xF)) ^ *(_BYTE *)(v6 + v14) ^ *(_BYTE *)((v14 & 0xF) + v11 + 2) ^ (-47 * (v14 & 0xF)) ^ *(_BYTE *)(v9 + (v14 & 0xF) + ((46 * (a5 ^ 0x41Cu)) ^ 0x1FBLL));
  return (*(uint64_t (**)(void))(v12 + 8 * ((1018 * (a6 - 1 == v7)) ^ (a5 + 466))))();
}

uint64_t sub_1AC1982F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;

  v51 = *(_QWORD *)(a1 + 24);
  *(int8x16_t *)(v50 - 112) = veorq_s8(*(int8x16_t *)(*(_QWORD *)(a1 + 16) - 0x348906C994F8B44ELL), (int8x16_t)xmmword_1AC3B5890);
  if (*(_QWORD *)(v50 - 120))
    v52 = v51 == 0x38DF4D133EEC7284;
  else
    v52 = 1;
  v53 = !v52;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 + 8 * (int)((1197 * v53) ^ a3)) - 12))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49);
}

uint64_t sub_1AC19837C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57)
{
  uint64_t v57;
  unsigned int v58;
  _BOOL4 v60;

  v58 = HIDWORD(a23) - ((2 * HIDWORD(a23) + 1845074358) & 0xC32317A2) + 411981996;
  v60 = ((((a57 + 74) ^ (2 * (_BYTE)v58) & 0xDE) + (v58 ^ 0xBE) + 1) & 0xF) == 0
     && ((a57 + 1126301514) ^ (2 * v58) & 0x7FE2ECDE) + (v58 ^ 0x5E60FDBE) != 1072789103;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 + 8 * (int)(a3 ^ (1019 * v60))) - ((89 * (a3 ^ 0x1F8)) ^ 0x58A) + 1324))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49);
}

uint64_t sub_1AC19842C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  unsigned __int8 *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  char *v139;
  unsigned int v140;
  char *v141;
  uint64_t v142;
  int v143;
  char *v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  int v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  int v182;
  int v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  int v187;
  int v188;
  unsigned int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  unsigned int v205;
  int v206;
  int v207;
  unsigned int v208;
  int v209;
  int v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  int v220;
  unsigned __int8 *v221;
  unsigned __int8 v222;
  int v223;
  char v224;
  uint64_t v225;
  int v226;
  int v227;
  uint64_t v228;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  unsigned int v240;
  int v241;
  uint64_t v242;
  unsigned int v243;
  int v244;
  char *v245;
  unsigned int v246;
  char *v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  int v251;
  unsigned int v252;
  char *v253;
  int v254;
  int v255;
  int v256;
  unint64_t v257;
  int v258;
  char *v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  int v270;
  int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  int v277;
  int v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  int v284;
  int v285;
  int v286;
  unsigned int v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  unsigned int v310;
  unsigned int v311;
  int v312;
  int v313;
  int v314;
  unsigned int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  int v325;
  unsigned int v326;
  int v327;
  unsigned int v328;
  int v329;
  unsigned int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  unsigned int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  unsigned int v344;
  unsigned int v345;
  int v346;
  unsigned int v347;
  int v348;
  int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  unsigned int v361;
  int v362;
  int v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int v366;
  unsigned int v367;
  int v368;
  int v369;
  unsigned int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  unsigned int v376;
  int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  int v381;
  char *v382;
  char *v383;
  char *v384;
  int v385;
  int v386;
  int v387;
  int v388;
  char *v389;
  int v390;
  uint64_t v391;
  int v392;
  unsigned int v393;
  int v394;
  unsigned int v395;
  char *v396;
  int v397;
  unsigned int v398;
  unsigned int v399;
  char *v400;
  char *v401;
  int v402;
  uint64_t v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unsigned int v412;
  int v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  unsigned int v419;
  uint64_t v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  unsigned int v425;
  uint64_t v426;
  int v427;
  unsigned int v428;
  unsigned int v429;
  int v430;
  unsigned int v431;
  int v432;
  uint64_t v433;
  unsigned int v434;
  int v435;
  unsigned int v436;
  int v437;
  uint64_t v438;
  unsigned __int8 v439;
  int v440;
  int v441;
  int v442;
  unsigned int v443;
  int v444;
  uint64_t v445;
  int v446;
  unsigned int v447;
  int v448;
  unsigned int v449;
  unsigned int v450;
  uint64_t v451;
  int v452;
  unsigned int v453;
  int v454;
  unsigned int v455;
  int v456;
  uint64_t v457;
  int v458;
  int v459;
  unsigned int v460;
  unsigned int v461;
  uint64_t v462;
  unsigned __int8 v463;
  int v464;
  unsigned int v465;
  __int16 v466;
  int v467;
  uint64_t v468;
  int v469;
  unsigned int v470;
  unsigned int v471;
  unsigned int v472;
  uint64_t v473;
  __int16 v474;
  int v475;
  unsigned int v476;
  int v477;
  uint64_t v478;
  unsigned int v479;
  int v480;
  unsigned int v481;
  unsigned int v482;
  int v483;
  uint64_t v484;
  int v485;
  int v486;
  int v487;
  unsigned int v488;
  unsigned int v489;
  uint64_t v490;
  unsigned int v491;
  int v492;
  unsigned int v493;
  int v494;
  uint64_t v495;
  unsigned int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  uint64_t v501;
  int v502;
  int v503;
  int v504;
  unsigned int v505;
  int v506;
  uint64_t v507;
  unsigned int v508;
  unsigned int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  uint64_t v514;
  int v515;
  unsigned int v516;
  int v517;
  unsigned int v518;
  unsigned int v519;
  int v520;
  uint64_t v521;
  int v522;
  unsigned int v523;
  int v524;
  unsigned int v525;
  uint64_t v526;
  int v527;
  unsigned int v528;
  int v529;
  uint64_t v530;
  unsigned int v531;
  int v532;
  int v533;
  int v534;
  uint64_t v535;
  unsigned int v536;
  unsigned int v537;
  int v538;
  int v539;
  int v540;
  uint64_t v541;
  int v542;
  int v543;
  int v544;
  int v545;
  uint64_t v546;
  int v547;
  unsigned int v548;
  int v549;
  int v550;
  uint64_t v551;
  int v552;
  unsigned int v553;
  unsigned int v554;
  uint64_t v555;
  int v556;
  int v557;
  uint64_t v558;
  int v559;
  char *v560;
  uint64_t v561;
  uint64_t v562;
  unint64_t v563;
  uint64_t v564;
  int v565;
  int v566;
  unsigned int v567;
  int v568;
  int v569;
  unsigned int v570;
  int v571;
  int v572;
  unsigned int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  unsigned int v580;
  int v581;
  unsigned int v582;
  unsigned int v583;

  *(_DWORD *)(v61 - 124) = (v59 - 162) | 0x407;
  v62 = *(_QWORD *)(v60 + 8 * (v59 ^ 0x3D)) - 8;
  v63 = *(unsigned __int8 *)(v62 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC7282) ^ 0xD7));
  *(_DWORD *)(v61 - 200) = v58;
  v64 = v63 ^ 0x20;
  v65 = *(_QWORD *)(v60 + 8 * (v59 - 67)) - 12;
  v66 = *(_QWORD *)(v60 + 8 * (v59 ^ 0xC0)) - 12;
  v67 = *(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC7277) ^ 0x49));
  v68 = ((*(unsigned __int8 *)(v65 + (*v56 ^ 0xB1)) ^ 0x27) << (((v59 + 94) | 7) ^ 0xF)) | (v64 << 8);
  HIDWORD(v69) = v67 ^ 2;
  LODWORD(v69) = (v67 ^ 0x28) << 24;
  LOBYTE(v64) = v69 >> 26;
  v70 = *(_QWORD *)(v60 + 8 * (v59 ^ 0xA));
  v71 = *(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC7278) ^ 0xB8));
  v72 = v68 | (*(_BYTE *)(v70 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC7281) ^ 0xECLL)) - 121) ^ 9;
  v73 = *(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC727BLL) ^ 0x6BLL));
  HIDWORD(v69) = v73 ^ 2;
  LODWORD(v69) = (v73 ^ 0x28) << 24;
  LOBYTE(v73) = *(_BYTE *)(v62 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC7276) ^ 0x2ELL));
  v74 = ((v69 >> 26) ^ 0x53) << 16;
  v75 = *(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC7283) ^ 0x47));
  HIDWORD(v69) = v75 ^ 2;
  LODWORD(v69) = (v75 ^ 0x28) << 24;
  v76 = v72 | (((v69 >> 26) ^ 0x1E) << 16);
  v77 = (*(_BYTE *)(v70 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC7275) ^ 0x36)) - 121) ^ 0x2A | ((v73 ^ 0xE5) << 8) | ((v64 ^ 0xFB) << 16) | ((v71 ^ 0xFFFFFF9F) << 24);
  LODWORD(v66) = *(unsigned __int8 *)(v66 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC727FLL) ^ 0xCBLL));
  HIDWORD(v69) = v66 ^ 2;
  LODWORD(v69) = (v66 ^ 0x28) << 24;
  v78 = ((*(_BYTE *)(v70 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC727DLL) ^ 0xA9)) - 121) | ((*(unsigned __int8 *)(v62 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC727ELL) ^ 0x30)) ^ 0x15) << 8)) & 0xFF00FFFF | (((v69 >> 26) ^ 0xBA) << 16) | ((*(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC7280) ^ 0x35)) ^ 0xE8) << 24);
  v79 = v74 & 0xFFFFFF00 | ((*(unsigned __int8 *)(v62 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC727ALL) ^ 0x77)) ^ 0xEF) << 8) | (*(_BYTE *)(v70 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC7279) ^ 0xB5)) - 121) ^ 0xA8 | ((*(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC727CLL) ^ 0xBFLL)) ^ 0xFFFFFFF1) << 24);
  v80 = *(_QWORD *)(v60 + 8 * (int)(v59 & 0xA88A20AF)) - 4;
  v81 = *(_QWORD *)(v60 + 8 * (v59 - 177));
  v82 = *(_DWORD *)(v80
                  + 4
                  * ((*(_BYTE *)(v70 + (*(unsigned __int8 *)(v57 - 0x38DF4D133EEC7275) ^ 0x36))
                                     - 121) ^ 0xFDu)) ^ 0xCB4F8CDA ^ *(_DWORD *)(v81
                                                                               + 4 * (v64 ^ 0x61u));
  v83 = *(_QWORD *)(v60 + 8 * (v59 ^ 0xFE)) - 12;
  v84 = (v82 - ((2 * v82) & 0xBC0472E4) - 570279566) ^ *(_DWORD *)(v83 + 4 * (v71 ^ 0xAu));
  v85 = *(_QWORD *)(v60 + 8 * (v59 ^ 0xD3)) - 8;
  LODWORD(v62) = *(_DWORD *)(v85 + 4 * (v73 ^ 0xDDu));
  LODWORD(v564) = v76;
  v563 = __PAIR64__(v77, v78);
  v86 = v62 ^ v76 ^ (v84 - ((2 * v84) & 0x639B85B6) - 1311915301) ^ v78;
  v87 = v62 ^ v76 ^ (v84 - ((2 * v84) & 0x639B85B6) - 1311915301);
  v442 = v87;
  v88 = v86;
  *(_DWORD *)(v61 - 160) = v86;
  *(_DWORD *)(v61 - 176) = v86 ^ 0x4D ^ v79;
  v89 = v86 ^ 0x4D;
  v439 = v86 ^ 0x4D;
  v90 = v86 ^ 0x4D ^ v79 ^ (v77 - ((2 * v77) & 0x4C28A622) + 638866193);
  v452 = BYTE1(v90);
  v469 = BYTE2(v90);
  LODWORD(v62) = *(_DWORD *)(v81 + 4 * (BYTE2(v90) ^ 0xAAu)) ^ *(_DWORD *)(v85 + 4 * (BYTE1(v90) ^ 0xA9u));
  v455 = v89 ^ v79 ^ (v77 - ((2 * v77) & 0x4C28A622) + 638866193);
  v485 = (v89 ^ v79 ^ (v77 - ((2 * v77) & 0x22) + 17));
  LODWORD(v62) = ((v62 ^ 0x24215F73) - 2 * ((v62 ^ 0x24215F73) & 0x5EA3117A ^ v62 & 8) + 1587745138) ^ *(_DWORD *)(v80 + 4 * (v485 ^ 0x38u));
  v479 = (v455 ^ 0x9CE37EB8) >> 24;
  v91 = v87 ^ *(_DWORD *)(v83 + 4 * (v479 ^ 0x65)) ^ (v62 - ((2 * v62) & 0xBC0472E4) - 570279566);
  HIDWORD(v562) = v79;
  v570 = v91 ^ 0x841DCE26;
  *(_DWORD *)(v61 - 140) = v91;
  v92 = v91 ^ 0x841DCE26 ^ (v79 - ((2 * v79) & 0x83B9C4C) - 2078421466);
  LODWORD(v62) = v92 ^ v455 ^ 0x9CE37EB8;
  v93 = v92;
  *(_DWORD *)(v61 - 152) = v92;
  v498 = BYTE2(v62);
  v502 = BYTE1(v62);
  v94 = *(_DWORD *)(v85 + 4 * (BYTE1(v62) ^ 0x9Bu)) ^ *(_DWORD *)(v81 + 4 * (BYTE2(v62) ^ 0x2Eu));
  *(_DWORD *)(v61 - 224) = v62;
  v95 = ((v94 ^ 0x24215F73) - 2 * ((v94 ^ 0x24215F73) & 0x5EA3117A ^ v94 & 8) + 1587745138) ^ *(_DWORD *)(v80 + 4 * (v62 ^ 0xD2u));
  v96 = v62 ^ 0x22054E11;
  *(_DWORD *)(v61 - 208) = BYTE3(v62);
  LODWORD(v62) = (v95 - ((2 * v95) & 0xBC0472E4) - 570279566) ^ *(_DWORD *)(v83 + 4 * (BYTE3(v62) ^ 0x69));
  v97 = v62 ^ v89 ^ 0x617E981D;
  v98 = v62 ^ v89;
  v524 = v62 ^ v89;
  *(_DWORD *)(v61 - 132) = v97 ^ v93;
  v99 = v97 ^ v93 ^ 0x61168A93;
  v100 = ((v97 ^ v93 ^ 0xFBF895F7) - 2 * (v99 & 1 ^ (v97 ^ v93 ^ 0xFBF895F7) & 0x56A2EF59) + 1453518680) ^ v96 ^ 0x9547167F;
  v538 = BYTE2(v100);
  v552 = ((unsigned __int16)(((v97 ^ v93 ^ 0x95F7)
                                             - 2 * (v99 & 1 ^ (v97 ^ v93 ^ 0x95F7) & 0xEF59)
                                             - 4264) ^ v96 ^ 0x167F) >> 8);
  v101 = *(_DWORD *)(v81 + 4 * (BYTE2(v100) ^ 0x89u)) ^ *(_DWORD *)(v85 + 4 * (v552 ^ 0x3Au)) ^ 0x24215F73;
  v547 = (((v97 ^ v93 ^ 0xF7) - 2 * (v99 & 1 ^ (v97 ^ v93 ^ 0xF7) & 0x59) + 88) ^ v96);
  v102 = (v101 - ((2 * v101) & 0xBD4622E4) + 1587745138) ^ *(_DWORD *)(v80 + 4 * (v547 ^ 0xE4u));
  HIDWORD(v564) = HIBYTE(v100);
  v103 = (v102 - ((2 * v102) & 0xBC0472E4) - 570279566) ^ *(_DWORD *)(v83 + 4 * (HIBYTE(v100) ^ 0x1D));
  v508 = v62 ^ v91;
  v574 = (v103 - ((2 * v103) & 0xAF3E77C0) - 677430304) ^ v62 ^ v91;
  *(_DWORD *)(v61 - 248) = v574 ^ 0xD79F3BE0;
  v580 = v574 ^ 0xD79F3BE0 ^ v98;
  v104 = ((v580 ^ 0xFE25CD6D) - ((2 * (v580 ^ 0xFE25CD6D)) & 0xAD45DEB0) + 1453518680) ^ v96;
  *(_DWORD *)(v61 - 216) = ((unsigned __int16)(((v580 ^ 0xCD6D)
                                                               - ((2 * (v580 ^ 0xCD6D)) & 0xDEB0)
                                                               - 4264) ^ v96) >> 8);
  LODWORD(v62) = *(_DWORD *)(v85
                           + 4
                           * (((unsigned __int16)(((v580 ^ 0xCD6D)
                                                                  - ((2 * (v580 ^ 0xCD6D)) & 0xDEB0)
                                                                  - 4264) ^ v96) >> 8) ^ 0x6Fu));
  *(_DWORD *)(v61 - 232) = BYTE2(v104);
  v105 = (v88 ^ 0xBAF72DE4) - ((2 * (v88 ^ 0xBAF72DE4)) & 0x83B9C4C) - 2078421466;
  v106 = v62 ^ *(_DWORD *)(v81 + 4 * (BYTE2(v104) ^ 0xA8u)) ^ 0x24215F73;
  v567 = HIBYTE(v104);
  v107 = (v106 - ((2 * v106) & 0xBC0472E4) - 570279566) ^ *(_DWORD *)(v83 + 4 * (HIBYTE(v104) ^ 0x85));
  v566 = (((v580 ^ 0x6D) - ((2 * (v580 ^ 0x6D)) & 0xB0) + 88) ^ v96);
  v108 = (v107 - ((2 * v107) & 0xBD4622E4) + 1587745138) ^ *(_DWORD *)(v80 + 4 * (v566 ^ 0x25u));
  v109 = (v108 - ((2 * v108) & 0xB7136B68) - 611732044) ^ v97;
  LODWORD(v65) = v109 ^ v580 ^ v99;
  v434 = v109;
  *(_DWORD *)(v61 - 192) = v65;
  v110 = v104;
  v582 = v104;
  v111 = v104 ^ v65 ^ 0x8D9AA867;
  v471 = HIBYTE(v111);
  v458 = BYTE2(v111);
  v112 = *(_DWORD *)(v81 + 4 * (BYTE2(v111) ^ 0x89u)) ^ *(_DWORD *)(v83 + 4 * (HIBYTE(v111) ^ 0x1D));
  v113 = BYTE1(v111);
  *(_DWORD *)(v61 - 256) = v113;
  v114 = ((v112 ^ 0x4BEEA4DA) - 2 * ((v112 ^ 0x4BEEA4DA) & 0x31CDC2DF ^ v112 & 4) - 1311915301) ^ *(_DWORD *)(v85 + 4 * (v113 ^ 0x3Au));
  v578 = (v104 ^ v65);
  LODWORD(v62) = *(_DWORD *)(v80 + 4 * (v578 ^ 0xFCu));
  *(_DWORD *)(v61 - 184) = v574 ^ 0xD79F3BE0 ^ v108;
  v115 = v574 ^ 0xD79F3BE0 ^ v108 ^ v62 ^ (v114 - ((2 * v114) & 0xBD4622E4) + 1587745138);
  v463 = BYTE2(v109) ^ 0x16;
  v116 = v115 ^ v109 ^ 0x7C166C11;
  v533 = v115;
  v117 = (v116 ^ v110) >> 24;
  *(_DWORD *)(v61 - 240) = v117;
  v549 = (v116 ^ v110);
  v118 = *(_DWORD *)(v80 + 4 * (v549 ^ 0x31u)) ^ *(_DWORD *)(v83 + 4 * (v117 ^ 0x9B));
  v518 = ((v116 ^ v110) >> 8) ^ 0x86839A;
  v522 = ((unsigned __int16)(v116 ^ ((v580 ^ 0xCD6D) - ((2 * (v580 ^ 0xCD6D)) & 0xDEB0) - 4264) ^ v96) >> 8) ^ 0x9A;
  v119 = ((v118 ^ 0x80A12800) - 2 * ((v118 ^ 0x80A12800) & 0x31CDC2DF ^ v118 & 4) - 1311915301) ^ *(_DWORD *)(v85 + 4 * (((unsigned __int16)(v116 ^ ((v580 ^ 0xCD6D) - ((2 * (v580 ^ 0xCD6D)) & 0xDEB0) - 4264) ^ v96) >> 8) ^ 0xA0u));
  v120 = v119 - ((2 * v119) & 0x2BD93B50);
  v121 = v116 ^ v110 ^ 0x95745AFF;
  v515 = ((v116 ^ v110) >> 16);
  LODWORD(v62) = (v120 - 1779655256) ^ *(_DWORD *)(v81 + 4 * (v515 ^ 0xAu));
  v122 = (v62 - ((2 * v62) & 0xA3B84BBA) - 774101539) ^ v115;
  *(_DWORD *)(v61 - 128) = v122;
  v123 = v122 ^ 0x2C5FBF77;
  v487 = v122 ^ 0x2C5FBF77 ^ v116;
  v474 = v122 ^ 0xBF77;
  v531 = v116 ^ v65;
  v124 = v116;
  v504 = v116;
  v511 = v116 ^ v65 ^ 0x64A2356D;
  v125 = ((v487 ^ 0x5A137D54) - ((2 * (v487 ^ 0x5A137D54)) & 0xD70E9BD8) - 343454228) ^ v511;
  *(_DWORD *)(v61 - 136) = v125;
  v126 = ((v125 ^ 0x41710BFC) - 2 * ((v125 ^ 0x41710BFC) & 0x13F7C057 ^ v125 & 2) + 335003733) ^ v121 ^ 0x479AB031;
  v559 = (((v125 ^ 0xFC) - 2 * ((v125 ^ 0xFC) & 0x57 ^ v125 & 2) + 85) ^ ~(v116 ^ v110));
  v576 = ((unsigned __int16)(((v125 ^ 0xBFC) - 2 * ((v125 ^ 0xBFC) & 0xC057 ^ v125 & 2) - 16299) ^ v121 ^ 0xB031) >> 8);
  LODWORD(v62) = *(_DWORD *)(v85 + 4 * (v576 ^ 0x3Au)) ^ *(_DWORD *)(v80 + 4 * (v559 ^ 0xAAu)) ^ 0xEF6ED3A9;
  v127 = BYTE2(v126);
  LODWORD(v62) = (v62 - ((2 * v62) & 0x2BD93B50) - 1779655256) ^ *(_DWORD *)(v81 + 4 * (BYTE2(v126) ^ 0x89u));
  v481 = HIBYTE(v126);
  v128 = (v62 - ((2 * v62) & 0xBC0472E4) - 570279566) ^ *(_DWORD *)(v83 + 4 * (HIBYTE(v126) ^ 0x1D));
  v198 = v128 ^ v124;
  v129 = ((v128 ^ v124 ^ 0xA6C48CD5) - 2 * ((v128 ^ v124 ^ 0xA6C48CD5) & 0x13F7C075 ^ (v128 ^ v124) & 0x20) + 335003733) ^ v121;
  LODWORD(v62) = HIBYTE(v129);
  v130 = BYTE1(v129);
  v131 = *(_DWORD *)(v83 + 4 * (HIBYTE(v129) ^ 5)) ^ *(_DWORD *)(v85 + 4 * (BYTE1(v129) ^ 0x6Fu)) ^ 0x6FCFFBA9;
  v544 = v129;
  v132 = (v131 - ((2 * v131) & 0xBD4622E4) + 1587745138) ^ *(_DWORD *)(v80 + 4 * (v129 ^ 0x25u));
  v133 = v123 ^ v128;
  v134 = BYTE2(v129);
  v135 = (v132 - ((2 * v132) & 0x2BD93B50) - 1779655256) ^ *(_DWORD *)(v81 + 4 * (BYTE2(v129) ^ 0xA8u)) ^ v123 ^ v128;
  v136 = v125 ^ 0xC6EED3FC ^ v135;
  v137 = v136 ^ v129;
  *(_DWORD *)(v61 - 168) = v136;
  v572 = BYTE1(v137);
  v449 = HIBYTE(v137);
  v138 = v570 ^ v105;
  LODWORD(v83) = *(_DWORD *)(v85 + 4 * (BYTE1(v137) ^ 0x44u)) ^ *(_DWORD *)(v83 + 4 * (HIBYTE(v137) ^ 0x47)) ^ 0x6FCFFBA9;
  v446 = v137;
  LODWORD(v65) = (v83 - ((2 * v83) & 0xBD4622E4) + 1587745138) ^ *(_DWORD *)(v80 + 4 * (v137 ^ 0xD5u));
  v424 = BYTE2(v137);
  LODWORD(v65) = (v65 - ((2 * v65) & 0x2BD93B50) - 1779655256) ^ *(_DWORD *)(v81 + 4 * (BYTE2(v137) ^ 0xCBu));
  LODWORD(v562) = v135 ^ 0x32E9504C ^ (v65 - ((2 * v65) & 0x643CFBCA) - 1306624539);
  v427 = v135 ^ v198;
  v429 = v135;
  HIDWORD(v561) = v135 ^ v198 ^ 0x82BCD8B0 ^ (v562 - ((2 * v562) & 0x4C3C2F48) - 1507977308);
  LODWORD(v561) = v136 ^ 0x4018996 ^ HIDWORD(v561);
  HIDWORD(a50) = (v561 - 256652343 + (~(2 * v561) | 0x1E98686F)) ^ v137;
  v139 = (char *)*(&off_1E5B56B60 + (v59 ^ 0x17)) - 8;
  v140 = (((v133 ^ 0x1B9155BDu) >> 16)
        + 180680558
        + ((2 * ((v133 ^ 0x1B9155BDu) >> 16) + 88) & 0x282 ^ 0xF673EFFF)) ^ *(_DWORD *)&v139[4 * (((v133 ^ 0x1B9155BDu) >> 16) ^ 0x2D)];
  LODWORD(v81) = ((v134 ^ 0x89) + 180680558 + ((2 * (v134 ^ 0x89) + 88) & 0x282 ^ 0xF673EFFF)) ^ *(_DWORD *)&v139[4 * (v134 ^ 0xA4)];
  v141 = (char *)*(&off_1E5B56B60 + v59 - 165) - 12;
  LODWORD(v65) = (v140 - ((2 * v140) & 0x7BA535CC) - 1110271258) ^ *(_DWORD *)&v141[4 * (BYTE1(v133) ^ 0x47)];
  v557 = v59;
  v142 = (uint64_t)*(&off_1E5B56B60 + v59 + 49);
  v143 = (v81 - ((2 * v81) & 0xFD2C0630) - 23723240) ^ *(_DWORD *)(v142 + 4 * (v62 ^ 0xCC));
  v144 = (char *)*(&off_1E5B56B60 + (v59 ^ 0xF4)) - 12;
  v145 = *(_DWORD *)&v144[4 * (v125 ^ 0xFC ^ v198 ^ 0x53)];
  v419 = v125 ^ 0xC6EED3FC ^ v198;
  v146 = *(_DWORD *)&v139[4 * (BYTE2(v419) ^ 0xAA)] ^ *(_DWORD *)(v142 + 4 * (HIBYTE(v419) ^ 0x3E)) ^ ((BYTE2(v419) ^ 0x87) + 180680558 + ((2 * (BYTE2(v419) ^ 0x87) + 88) & 0x282 ^ 0xF673EFFF)) ^ (181304767 * v145 - ((362609534 * v145 + 945239308) & 0xFD2C0630) + 448896414);
  LODWORD(v62) = *(_DWORD *)&v144[4 * (v198 ^ 0x74)];
  LODWORD(v62) = (181304767 * v62 - ((362609534 * v62 + 945239308) & 0x7BA535CC) - 637651604) ^ *(_DWORD *)&v141[4 * (BYTE1(v198) ^ 0x5A)];
  v556 = v62 - ((2 * v62) & 0xFD2C0630);
  v554 = HIBYTE(v198) ^ 0xB2;
  v528 = v130 ^ 0xB0;
  v542 = v143 - ((2 * v143) & 0x7BA535CC);
  v536 = v146 - ((2 * v146) & 0x7BA535CC);
  v565 = (v65 - ((2 * v65) & 0xFD2C0630) - 23723240) ^ *(_DWORD *)(v142 + 4 * ((v133 ^ 0x1B9155BDu) >> 24)) ^ (181304767 * *(_DWORD *)&v144[4 * (v133 ^ 0x7D)] + 472619654);
  v147 = *(_DWORD *)&v139[4 * (((v138 ^ 0xE9B45E6C) >> 16) ^ 0xF5)] ^ ((((v138 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                      + 180680558
                                                                                      + ((2
                                                                                        * (((v138 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                        + 88) & 0x282 ^ 0xF673EFFF));
  v148 = *(_DWORD *)(v61 - 152) ^ 0x31676F78;
  LODWORD(v62) = *(_DWORD *)&v139[4 * (BYTE2(v148) ^ 0x7B)] ^ ((BYTE2(v148) ^ 0x56)
                                                             + 180680558
                                                             + ((2 * (BYTE2(v148) ^ 0x56) + 88) & 0x282 ^ 0xF673EFFF));
  v149 = (v62 - ((2 * v62) & 0xFD2C0630) - 23723240) ^ *(_DWORD *)(v142 + 4 * HIBYTE(v148));
  LODWORD(v62) = *(_DWORD *)&v139[4 * (v498 ^ 0x34)] ^ ((v498 ^ 0x19)
                                                      + 180680558
                                                      + ((2 * (v498 ^ 0x19) + 88) & 0x282 ^ 0xF673EFFF));
  LODWORD(v62) = (v62 - ((2 * v62) & 0x7BA535CC) - 1110271258) ^ *(_DWORD *)&v141[4 * (v502 ^ 5)];
  v499 = v149 - ((2 * v149) & 0x7BA535CC);
  v503 = v62 - ((2 * v62) & 0xFD2C0630);
  v150 = *(_DWORD *)&v144[4 * (*(_DWORD *)(v61 - 140) ^ 0xDF)];
  LODWORD(v62) = *(_DWORD *)(v61 - 140) ^ 0x5A18571F;
  v151 = *(_DWORD *)(v142 + 4 * BYTE3(v62)) ^ ((BYTE2(v62) ^ 0xC1)
                                               + 180680558
                                               + ((2 * (BYTE2(v62) ^ 0xC1) + 88) & 0x282 ^ 0xF673EFFF)) ^ *(_DWORD *)&v139[4 * (BYTE2(v62) ^ 0xEC)] ^ (181304767 * v150 - ((362609534 * v150 + 945239308) & 0xFD2C0630) + 448896414);
  v496 = v151 - ((2 * v151) & 0x7BA535CC);
  v152 = *(_DWORD *)(v142 + 4 * ((v138 ^ 0xE9B45E6C) >> 24)) ^ (v147 - ((2 * v147) & 0xFD2C0630) - 23723240);
  v476 = v138 ^ 0xAC;
  v491 = BYTE1(v138) ^ 0xB4;
  v493 = v152 - ((2 * v152) & 0x7BA535CC);
  v466 = v487 ^ 0x8EA4;
  v153 = v487 ^ 0x35C48CD5;
  v154 = *(_DWORD *)&v139[4 * (v127 ^ 0xDE)] ^ ((v127 ^ 0xF3)
                                              + 180680558
                                              + ((2 * (v127 ^ 0xF3) + 88) & 0x282 ^ 0xF673EFFF));
  LODWORD(v62) = *(_DWORD *)&v139[4 * (((v487 ^ 0x35C48CD5u) >> 16) ^ 0xFE)] ^ ((((v487 ^ 0x35C48CD5u) >> 16) ^ 0xD3)
                                                                                               + 180680558
                                                                                               + ((2
                                                                                                 * (((v487 ^ 0x35C48CD5u) >> 16) ^ 0xD3)
                                                                                                 + 88) & 0x282 ^ 0xF673EFFF));
  LODWORD(v65) = *(_DWORD *)&v144[4 * (v125 ^ 0x39)];
  v155 = (v154 - ((2 * v154) & 0xFD2C0630) - 23723240) ^ *(_DWORD *)(v142 + 4 * (v481 ^ 0x36));
  v156 = BYTE2(*(_DWORD *)(v61 - 128));
  v157 = *(_DWORD *)&v139[4 * (v156 ^ 0x73)] ^ ((v156 ^ 0x5E)
                                              + 180680558
                                              + ((2 * (v156 ^ 0x5E) + 88) & 0x282 ^ 0xF673EFFF));
  v158 = (v157 - ((2 * v157) & 0x7BA535CC) - 1110271258) ^ *(_DWORD *)&v141[4 * (HIBYTE(v474) ^ 0x8B)];
  v482 = v155 - ((2 * v155) & 0x7BA535CC);
  v488 = v158 - ((2 * v158) & 0xFD2C0630);
  v159 = *(_DWORD *)(v61 - 136) ^ 0xA4710BFC;
  v160 = *(_DWORD *)&v141[4 * (BYTE1(v159) ^ 0x20)] ^ ((BYTE2(v159) ^ 0xD7)
                                                     + 180680558
                                                     + ((2 * (BYTE2(v159) ^ 0xD7) + 88) & 0x282 ^ 0xF673EFFF)) ^ *(_DWORD *)&v139[4 * (BYTE2(v159) ^ 0xFA)] ^ (181304767 * v65 - ((362609534 * v65 + 945239308) & 0x7BA535CC) - 637651604);
  LODWORD(v62) = (v62 - ((2 * v62) & 0xFD2C0630) - 23723240) ^ *(_DWORD *)(v142 + 4 * HIBYTE(v153)) ^ (181304767 * *(_DWORD *)&v144[4 * (v466 ^ 0x99)] + 472619654);
  v431 = v474 ^ 0xA3;
  v464 = v62 - ((2 * v62) & 0x7BA535CC);
  v475 = v160 - ((2 * v160) & 0xFD2C0630);
  v161 = v452 ^ 0xC3;
  v162 = *(_DWORD *)(v61 - 176);
  v436 = BYTE1(v162) ^ 0xF5;
  v453 = v442 ^ 0x2BEAE26B;
  LODWORD(v62) = *(_DWORD *)&v139[4 * (((v442 ^ 0x2BEAE26Bu) >> 16) ^ 0xEC)] ^ ((((v442 ^ 0x2BEAE26Bu) >> 16) ^ 0xC1)
                                                                                               + 180680558
                                                                                               + ((2
                                                                                                 * (((v442 ^ 0x2BEAE26Bu) >> 16) ^ 0xC1)
                                                                                                 + 88) & 0x282 ^ 0xF673EFFF)) ^ (181304767 * *(_DWORD *)&v144[4 * (v442 ^ 0x1E)] + 472619654);
  v163 = (v62 - ((2 * v62) & 0x7BA535CC) - 1110271258) ^ *(_DWORD *)&v141[4 * (BYTE1(v442) ^ 8)];
  LODWORD(v65) = *(_DWORD *)&v139[4 * (v469 ^ 0x34)] ^ ((v469 ^ 0x19)
                                                      + 180680558
                                                      + ((2
                                                        * (((v469 ^ 0x19) + 44) & 0x143 ^ (HIWORD(v455) | 0xFFFFFFFD))) ^ 0x98C1005));
  v164 = *(_DWORD *)&v144[4 * (v439 ^ 0x55)];
  v456 = v163 - ((2 * v163) & 0xFD2C0630);
  v440 = BYTE2(v162);
  v470 = (BYTE2(v162) ^ 0xA7) + 180680558 + ((2 * (BYTE2(v162) ^ 0xA7) + 88) & 0x282 ^ 0xF673EFFF);
  v443 = v479 ^ 0x4B;
  v165 = (v65 - ((2 * v65) & 0x7BA535CC) - 1110271258) ^ *(_DWORD *)&v141[4 * v161] ^ (181304767
                                                                                     * *(_DWORD *)&v144[4 * (v485 ^ 0x4B)]
                                                                                     + 472619654);
  v480 = v165 - ((2 * v165) & 0xFD2C0630);
  v166 = *(_DWORD *)(v61 - 160);
  v167 = (181304767 * v164 - ((362609534 * v164 + 945239308) & 0xFD2C0630) + 448896414) ^ ((BYTE2(v166) ^ 0xBA)
                                                                                         + 180680558
                                                                                         + ((2 * (BYTE2(v166) ^ 0xBA)
                                                                                           + 88) & 0x282 ^ 0xF673EFFF)) ^ *(_DWORD *)(v142 + 4 * (HIBYTE(v166) ^ 0x2F)) ^ *(_DWORD *)&v139[4 * (BYTE2(v166) ^ 0x97)];
  v425 = v167 - ((2 * v167) & 0x7BA535CC);
  v168 = *(_DWORD *)(v61 - 192);
  v169 = *(_DWORD *)&v139[4 * (BYTE2(v168) ^ 0x6D)] ^ ((BYTE2(v168) ^ 0x40)
                                                     + 180680558
                                                     + ((2
                                                       * (((BYTE2(v168) ^ 0x40) + 44) & 0x143 ^ (HIWORD(v168) | 0xFFFFFFFD))) ^ 0x98C1005));
  LODWORD(v65) = *(_DWORD *)&v139[4 * (BYTE2(*(_DWORD *)(v61 - 184)) ^ 0x56)] ^ ((BYTE2(*(_DWORD *)(v61 - 184)) ^ 0x7B)
                                                                                                + 180680558
                                                                                                + ((2 * (BYTE2(*(_DWORD *)(v61 - 184)) ^ 0x7B)
                                                                                                  + 88) & 0x282 ^ 0xF673EFFF));
  v170 = (v169 - 1110271257 + (~(2 * v169) | 0x845ACA33)) ^ *(_DWORD *)&v141[4 * (BYTE1(v168) ^ 0xE8)] ^ (181304767 * *(_DWORD *)&v144[4 * (v168 ^ 0x14)] + 472619654);
  v171 = 181304767 * *(_DWORD *)&v144[4 * (v434 ^ 0xFB)];
  v172 = (v171 - 2 * ((v171 + 472619654) & 0x3DD29AE7 ^ v171 & 1) - 637651604) ^ *(_DWORD *)&v141[4
                                                                                                * (BYTE1(v434) ^ 0xEF)];
  LODWORD(v423) = v170 - ((2 * v170) & 0xFD2C0630);
  HIDWORD(v422) = v172 - ((2 * v172) & 0xFD2C0630);
  v173 = (v65 - ((2 * v65) & 0xFD2C0630) - 23723240) ^ *(_DWORD *)(v142 + 4 * (HIBYTE(*(_DWORD *)(v61 - 184)) ^ 0xD9u)) ^ (181304767 * *(_DWORD *)&v144[4 * (*(_DWORD *)(v61 - 184) ^ 0x79)] + 472619654);
  LODWORD(v65) = *(_DWORD *)&v139[4 * (v458 ^ 0x86)] ^ ((v458 ^ 0xAB)
                                                      + 180680558
                                                      + ((2 * (v458 ^ 0xAB) + 88) & 0x282 ^ 0xF673EFFF));
  LODWORD(v65) = (v65 - ((2 * v65) & 0xFD2C0630) - 23723240) ^ *(_DWORD *)(v142 + 4 * v471);
  v486 = v65 - 1110271257 + (~(2 * v65) | 0x845ACA33);
  v459 = v173 - ((2 * v173) & 0x7BA535CC);
  LODWORD(v422) = v463;
  v472 = (v463 ^ 0x65) + 180680558 + ((2 * (v463 ^ 0x65) + 88) & 0x282 ^ 0xF673EFFF);
  v174 = *(_DWORD *)&v139[4 * (v424 ^ 0x8B)] ^ ((v424 ^ 0xA6)
                                              + 180680558
                                              + ((2 * (v424 ^ 0xA6) + 88) & 0x282 ^ 0xF673EFFF));
  v421 = BYTE2(*(_DWORD *)(v61 - 168));
  v461 = (v421 ^ 0x8F) + 180680558 + ((2 * (v421 ^ 0x8F) + 88) & 0x282 ^ 0xF673EFFF);
  LODWORD(v65) = *(_DWORD *)&v139[4 * (BYTE2(v429) ^ 0xE8)] ^ ((BYTE2(v429) ^ 0xC5)
                                                             + 180680558
                                                             + ((2 * (BYTE2(v429) ^ 0xC5) + 88) & 0x282 ^ 0xF673EFFF));
  LODWORD(v65) = (181304767 * *(_DWORD *)&v144[4 * (v429 ^ 0xCA)] + 472619654) ^ *(_DWORD *)(v142 + 4 * (HIBYTE(v429) ^ 0x8E)) ^ (v65 - ((2 * v65) & 0xFD2C0630) - 23723240);
  HIDWORD(v423) = v135 ^ v198 ^ 0x44039AAA;
  v175 = (181304767 * *(_DWORD *)&v144[4 * (v427 ^ 0xDB)] + 472619654) ^ (((v427 ^ 0x44039AAAu) >> 16)
                                                                                         + 180680558
                                                                                         + ((2
                                                                                           * ((((v427 ^ 0x44039AAAu) >> 16)
                                                                                             + 44) & 0x143 ^ (((v427 ^ 0x44039AAAu) >> 16) | 0xFFFFFFFD))) ^ 0x98C1005)) ^ *(_DWORD *)&v139[4 * (((v427 ^ 0x44039AAAu) >> 16) ^ 0x2D)];
  v430 = v65 - ((2 * v65) & 0x7BA535CC);
  v176 = (v175 - ((2 * v175) & 0x7BA535CC) - 1110271258) ^ *(_DWORD *)&v141[4
                                                                          * (((unsigned __int16)(v135 ^ v198) >> 8) ^ 0xC0)];
  v177 = *(_DWORD *)(v142 + 4 * (v449 ^ 0x22)) ^ (181304767 * *(_DWORD *)&v144[4 * (v446 ^ 0xFE)] + 472619654) ^ (v174 - ((2 * v174) & 0xFD2C0630) - 23723240);
  v450 = v176 - ((2 * v176) & 0xFD2C0630);
  v178 = *(_DWORD *)&v144[4 * (v508 ^ 0xEC)];
  v447 = v177 - ((2 * v177) & 0x7BA535CC);
  v179 = 181304767 * v178 - ((362609534 * v178 + 945239308) & 0xFD2C0630);
  v180 = *(_DWORD *)&v139[4 * (v538 ^ 0x32)] ^ ((v538 ^ 0x1F)
                                              + 180680558
                                              + ((2 * (v538 ^ 0x1F) + 88) & 0x282 ^ 0xF673EFFF));
  LODWORD(v65) = *(_DWORD *)&v144[4 * (v524 ^ 0xE6)];
  v181 = *(_DWORD *)(v142 + 4 * (HIBYTE(v508) ^ 0xCA)) ^ ((BYTE2(v508) ^ 0x2F)
                                                          + 180680558
                                                          + ((2 * (BYTE2(v508) ^ 0x2F) + 88) & 0x282 ^ 0xF673EFFF)) ^ *(_DWORD *)&v139[4 * (BYTE2(v508) ^ 2)] ^ (v179 + 448896414);
  v182 = (v180 - ((2 * v180) & 0x7BA535CC) - 1110271258) ^ *(_DWORD *)&v141[4 * (v552 ^ 0x8C)] ^ (181304767
                                                                                                * *(_DWORD *)&v144[4 * (v547 ^ 0xD9)]
                                                                                                + 472619654);
  LODWORD(v62) = *(_DWORD *)(v142 + 4 * ((v524 ^ 0x49A657C7u) >> 24)) ^ *(_DWORD *)&v139[4
                                                                                         * (((v524 ^ 0x49A657C7u) >> 16) ^ 0x18)] ^ ((((v524 ^ 0x49A657C7u) >> 16) ^ 0x35) + 180680558 + ((2 * (((((v524 ^ 0x49A657C7u) >> 16) ^ 0x35) + 44) & 0x143 ^ (((v524 ^ 0x49A657C7u) >> 16) | 0xFFFFFFFD))) ^ 0x98C1005)) ^ (181304767 * v65 - ((362609534 * v65 + 945239308) & 0xFD2C0630) + 448896414);
  v183 = *(_DWORD *)&v139[4 * (((*(_DWORD *)(v61 - 132) ^ 0xC5058388) >> 16) ^ 0x2D)] ^ (((*(_DWORD *)(v61 - 132) ^ 0xC5058388) >> 16) + 180680558 + ~((2 * ((*(_DWORD *)(v61 - 132) ^ 0xC5058388) >> 16) + 160207960) & 0x98C1282));
  v553 = HIDWORD(v564) ^ 0xAA;
  HIDWORD(v564) = (v181 - ((2 * v181) & 0x7BA535CC) - 1110271258) ^ *(_DWORD *)&v141[4 * (BYTE1(v508) ^ 0x2E)];
  v548 = v182 - ((2 * v182) & 0xFD2C0630);
  v428 = BYTE1(v524) ^ 0xB9;
  v184 = (v183 - ((2 * v183) & 0xFD2C0630) - 23723240) ^ *(_DWORD *)(v142
                                                                   + 4 * ((*(_DWORD *)(v61 - 132) ^ 0xC5058388) >> 24)) ^ (181304767 * *(_DWORD *)&v144[4 * (*(_DWORD *)(v61 - 132) ^ 0x18)] + 472619654);
  v539 = v62 - ((2 * v62) & 0x7BA535CC);
  v509 = v184 - ((2 * v184) & 0x7BA535CC);
  LODWORD(v62) = *(_DWORD *)&v139[4 * (v515 ^ 0xC1)] ^ ((v515 ^ 0xEC)
                                                      + 180680558
                                                      + ((2 * (v515 ^ 0xEC) + 88) & 0x282 ^ 0xF673EFFF));
  v185 = (v62 - ((2 * v62) & 0x7BA535CC) - 1110271258) ^ *(_DWORD *)&v141[4
                                                                        * ((v522 - ((2 * v518) & 0x166) + 179) ^ 0x54)] ^ (181304767 * *(_DWORD *)&v144[4 * (v549 ^ 0xE2)] + 472619654);
  v516 = BYTE1(v533) ^ 0x77;
  LODWORD(v62) = *(_DWORD *)&v144[4 * (v511 ^ 0x44)];
  LODWORD(v62) = (181304767 * v62 - ((362609534 * v62 + 945239308) & 0xFD2C0630) + 448896414) ^ *(_DWORD *)(v142 + 4 * (HIBYTE(v531) ^ 0xDE));
  v417 = BYTE1(v511) ^ 0x4A;
  v550 = v185 - ((2 * v185) & 0xFD2C0630);
  v512 = v62 - ((2 * v62) & 0x7BA535CC);
  v519 = v504 ^ 0xEEA2BFA8;
  LODWORD(v62) = *(_DWORD *)&v139[4 * (((v504 ^ 0xEEA2BFA8) >> 16) ^ 0x86)] ^ ((((v504 ^ 0xEEA2BFA8) >> 16) ^ 0xAB)
                                                                                              + 180680558
                                                                                              + ((2
                                                                                                * (((v504 ^ 0xEEA2BFA8) >> 16) ^ 0xAB)
                                                                                                + 88) & 0x282 ^ 0xF673EFFF));
  LODWORD(v62) = (181304767 * *(_DWORD *)&v144[4 * (v504 ^ 0x68)] + 472619654) ^ *(_DWORD *)&v141[4 * (BYTE1(v504) ^ 0x55)] ^ (v62 - ((2 * v62) & 0x7BA535CC) - 1110271258);
  v505 = v533 ^ 0x231B9DB5;
  v415 = ((v533 ^ 0x231B9DB5u) >> 16);
  v525 = (v415 ^ 0xC1) + 180680558 + ((2 * (v415 ^ 0xC1) + 88) & 0x282 ^ 0xF673EFFF);
  HIDWORD(v416) = v62 - ((2 * v62) & 0xFD2C0630);
  v413 = BYTE2(v531);
  v523 = (BYTE2(v531) ^ 0xDE) + 180680558 + ((2 * (BYTE2(v531) ^ 0xDE) + 88) & 0x282 ^ 0xF673EFFF);
  v186 = v574 ^ 0x463DF4F4;
  v412 = v567 ^ 0x7B;
  v187 = *(_DWORD *)&v144[4 * (v566 ^ 0x74)];
  v188 = *(_DWORD *)(v61 - 152);
  v189 = v162;
  v190 = *(_DWORD *)&v144[4 * (v578 ^ 0x5A)];
  LODWORD(v83) = *(_DWORD *)(v61 - 168);
  v191 = *(_DWORD *)&v144[4 * (v83 ^ 0x78)];
  v192 = *(_DWORD *)&v144[4 * (v533 ^ 0x75)];
  v193 = *(_DWORD *)&v144[4 * ((v580 ^ v99) ^ 0x26)];
  LODWORD(v81) = *(_DWORD *)&v144[4 * (v580 ^ 0x2A)];
  LODWORD(v65) = *(_DWORD *)&v144[4 * (v574 ^ 0xCD)];
  v545 = 181304767 * *(_DWORD *)&v144[4 * (v544 ^ 0x60)] + 472619654;
  v579 = 181304767 * *(_DWORD *)&v144[4 * (*(_DWORD *)(v61 - 224) ^ 0xFB)] + 472619654;
  v568 = 181304767 * *(_DWORD *)&v144[4 * (v188 ^ 0xB8)] + 472619654;
  v575 = 181304767 * *(_DWORD *)&v144[4 * v476] + 472619654;
  v532 = 181304767 * *(_DWORD *)&v144[4 * v431] + 472619654;
  v534 = 181304767 * *(_DWORD *)&v144[4 * (v559 ^ 0xF0)] + 472619654;
  *(_DWORD *)(v61 - 224) = 181304767 * *(_DWORD *)&v144[4 * (*(_DWORD *)(v61 - 176) ^ 0x57)]
                         + 472619654;
  LODWORD(v416) = 181304767 * v191 + 472619654;
  v432 = 181304767 * v192 + 472619654;
  v477 = 181304767 * v65 + 472619654;
  LODWORD(v65) = (181304767 * v187 - ((362609534 * v187 + 945239308) & 0xFD2C0630) + 448896414) ^ *(_DWORD *)(v142 + 4 * v412);
  v194 = v580 ^ v99;
  v195 = *(_DWORD *)&v139[4 * (BYTE2(v194) ^ 0x33)] ^ ((BYTE2(v194) ^ 0x1E)
                                                     + 180680558
                                                     + ((2 * (BYTE2(v194) ^ 0x1E) + 88) & 0x282 ^ 0xF673EFFF)) ^ (181304767 * v193 + 472619654);
  v196 = (v195 - ((2 * v195) & 0x7BA535CC) - 1110271258) ^ *(_DWORD *)&v141[4
                                                                          * (((unsigned __int16)(v580 ^ v99) >> 8) ^ 0xBB)];
  v197 = *(_DWORD *)&v139[4 * (BYTE2(v186) ^ 0x3C)] ^ ((BYTE2(v186) ^ 0x11)
                                                     + 180680558
                                                     + ((2 * (BYTE2(v186) ^ 0x11) + 88) & 0x282 ^ 0xF673EFFF));
  LODWORD(v62) = (181304767 * v81 + 472619654) ^ ((BYTE2(v580) ^ 0x37)
                                                + 180680558
                                                + ((2 * (BYTE2(v580) ^ 0x37) + 88) & 0x282 ^ 0xF673EFFF)) ^ *(_DWORD *)&v139[4 * (BYTE2(v580) ^ 0x1A)];
  LODWORD(v144) = v65 - ((2 * v65) & 0x7BA535CC);
  BYTE1(v198) = BYTE1(v580);
  LODWORD(v62) = (v62 - ((2 * v62) & 0xFD2C0630) - 23723240) ^ *(_DWORD *)(v142 + 4 * (HIBYTE(v580) ^ 0xF9));
  v199 = v576 ^ 0x1A;
  LODWORD(v65) = *(_DWORD *)(v61 - 232);
  v527 = *(_DWORD *)&v139[4 * (BYTE2(v198) ^ 0x61)];
  *(_DWORD *)(v61 - 232) = *(_DWORD *)&v139[4 * (v440 ^ 0x8A)];
  v441 = *(_DWORD *)&v139[4 * (v422 ^ 0x48)];
  LODWORD(v411) = *(_DWORD *)&v139[4 * (v421 ^ 0xA2)];
  HIDWORD(v411) = *(_DWORD *)&v139[4 * (v415 ^ 0xEC)];
  HIDWORD(v414) = *(_DWORD *)&v139[4 * (v413 ^ 0xF3)];
  v577 = *(_DWORD *)&v139[4 * (v65 ^ 0x1A)];
  v200 = ((v582 >> 15) & 0x58 ^ 0x48) + (v65 ^ 0x4C64A1B);
  v583 = v200 + 100576578 + ((2 * v200) & 0x282 ^ 0xF673EFFF);
  LODWORD(v414) = *(_DWORD *)&v141[4 * v528];
  v529 = *(_DWORD *)&v141[4 * (BYTE1(v419) ^ 0x8E)];
  *(_DWORD *)(v61 - 152) = *(_DWORD *)&v141[4 * (BYTE1(v188) ^ 0x85)];
  HIDWORD(v420) = *(_DWORD *)&v141[4 * (BYTE1(*(_DWORD *)(v61 - 140)) ^ 0xBD)];
  LODWORD(v422) = *(_DWORD *)&v141[4 * v491];
  v492 = *(_DWORD *)&v141[4 * v199];
  LODWORD(v420) = *(_DWORD *)&v141[4 * (HIBYTE(v466) ^ 0x14)];
  v467 = *(_DWORD *)&v141[4 * v436];
  *(_DWORD *)(v61 - 160) = *(_DWORD *)&v141[4 * (BYTE1(*(_DWORD *)(v61 - 160)) ^ 0xD6)];
  LODWORD(v85) = v196 - ((2 * v196) & 0xFD2C0630);
  *(_DWORD *)(v61 - 256) = *(_DWORD *)&v141[4 * (*(_DWORD *)(v61 - 256) ^ 0xEE)];
  v437 = *(_DWORD *)&v141[4 * (BYTE1(*(_DWORD *)(v61 - 184)) ^ 0xD7)];
  LODWORD(v410) = *(_DWORD *)&v141[4 * (BYTE1(v83) ^ 0x76)];
  LODWORD(v65) = *(_DWORD *)&v141[4 * (BYTE1(v135) ^ 0x16)];
  HIDWORD(v409) = *(_DWORD *)&v141[4 * (v572 ^ 0xBE)];
  *(_DWORD *)(v61 - 184) = *(_DWORD *)&v141[4 * v428];
  v581 = *(_DWORD *)&v141[4 * (BYTE1(*(_DWORD *)(v61 - 132)) ^ 3)];
  HIDWORD(v410) = *(_DWORD *)&v141[4 * v516];
  v517 = *(_DWORD *)&v141[4 * v417];
  *(_DWORD *)(v61 - 216) = *(_DWORD *)&v141[4 * (*(_DWORD *)(v61 - 216) ^ 0x84)];
  HIDWORD(v426) = *(_DWORD *)&v141[4 * (BYTE1(v198) ^ 0x2E)];
  v201 = *(_DWORD *)&v141[4 * (BYTE1(*(_DWORD *)(v61 - 248)) ^ 0xC8)];
  v543 = v542 - 1110271258;
  v537 = v536 - 1110271258;
  *(_DWORD *)(v61 - 248) = v499 - 1110271258;
  HIDWORD(v418) = v496 - 1110271258;
  v573 = v493 - 1110271258;
  LODWORD(v418) = v482 - 1110271258;
  LODWORD(v409) = v464 - 1110271258;
  v465 = v425 - 1110271258;
  v497 = v459 - 1110271258;
  v202 = v430 - 1110271258;
  HIDWORD(v408) = v447 - 1110271258;
  v483 = v539 - 1110271258;
  v460 = v509 - 1110271258;
  v513 = v512 - 1110271258;
  v494 = (_DWORD)v144 - 1110271258;
  v500 = v62 - ((2 * v62) & 0x7BA535CC) - 1110271258;
  v540 = *(_DWORD *)(v142 + 4 * v554);
  *(_DWORD *)(v61 - 208) = *(_DWORD *)(v142 + 4 * (*(_DWORD *)(v61 - 208) ^ 7u));
  LODWORD(v426) = *(_DWORD *)(v142 + 4 * (HIBYTE(*(_DWORD *)(v61 - 128)) ^ 0xC0u));
  LODWORD(a21) = *(_DWORD *)(v142 + 4 * (HIBYTE(*(_DWORD *)(v61 - 136)) ^ 0xD3u));
  v448 = *(_DWORD *)(v142 + 4 * (HIBYTE(v189) ^ 0xB8));
  *(_DWORD *)(v61 - 176) = *(_DWORD *)(v142 + 4 * HIBYTE(v453));
  v454 = *(_DWORD *)(v142 + 4 * v443);
  v510 = *(_DWORD *)(v142 + 4 * (HIBYTE(*(_DWORD *)(v61 - 192)) ^ 0xC2u));
  v435 = *(_DWORD *)(v142 + 4 * (HIBYTE(v434) ^ 0xE8));
  v203 = *(_DWORD *)(v142 + 4 * (BYTE3(v83) ^ 0xA6));
  v204 = *(_DWORD *)(v142 + 4 * HIBYTE(HIDWORD(v423)));
  *(_DWORD *)(v61 - 192) = *(_DWORD *)(v142 + 4 * v553);
  LODWORD(v81) = HIBYTE(v519);
  *(_DWORD *)(v61 - 168) = *(_DWORD *)(v142 + 4 * HIBYTE(v505));
  v520 = *(_DWORD *)(v142 + 4 * (*(_DWORD *)(v61 - 240) ^ 0x38u));
  v506 = *(_DWORD *)(v142 + 4 * v81);
  HIDWORD(v423) = *(_DWORD *)(v142 + 4 * (HIBYTE(v194) ^ 0x30));
  LODWORD(v408) = *(_DWORD *)(v142 + 4 * HIBYTE(v186));
  v444 = v503 - 23723240;
  v205 = v488 - 23723240;
  *(_DWORD *)(v61 - 240) = v456 - 23723240;
  v569 = v480 - 23723240;
  v489 = v548 - 23723240;
  v206 = v550 - 23723240;
  v207 = v85 - 23723240;
  v208 = (v201 ^ (v197 - ((2 * v197) & 0x7BA535CC) - 1110271258))
       - ((2 * (v201 ^ (v197 - ((2 * v197) & 0x7BA535CC) - 1110271258))) & 0xFD2C0630)
       - 23723240;
  v209 = v565 ^ HIDWORD(v564) ^ 0x6285F181;
  v210 = v202 ^ v65 ^ v209;
  v211 = (char *)*(&off_1E5B56B60 + (v557 ^ 0xE5)) - 4;
  v212 = (uint64_t)*(&off_1E5B56B60 + (v557 ^ 0xEA));
  v213 = (char *)*(&off_1E5B56B60 + (v557 ^ 0x38)) - 4;
  v214 = (uint64_t)*(&off_1E5B56B60 + v557 - 84);
  v215 = (*(unsigned __int8 *)(v214 + (*(unsigned __int8 *)(v61 - 109) ^ 0x41)) ^ 0x37) & 0xFF00FFFF | (((v213[*(unsigned __int8 *)(v61 - 111) ^ 0x40] + 69) ^ 0x5A) << 16) | ((*(unsigned __int8 *)(v212 + (*(unsigned __int8 *)(v61 - 110) ^ 0xBBLL)) ^ 0x7D) << 8) | ((v211[*(unsigned __int8 *)(v61 - 112) ^ 0x1ELL] ^ (*(unsigned __int8 *)(v61 - 112) - ((2 * *(unsigned __int8 *)(v61 - 112)) & 0xB8) - 36) ^ 0x84) << 24);
  v558 = v212;
  v560 = v211;
  v216 = *(unsigned __int8 *)(v214 + (*(unsigned __int8 *)(v61 - 97) ^ 0x74)) ^ 0x90 | (((v213[*(unsigned __int8 *)(v61 - 99) ^ 0xF3] + 69) ^ 2) << 16) | ((*(unsigned __int8 *)(v212 + (*(unsigned __int8 *)(v61 - 98) ^ 0x20)) ^ 0x97) << 8) | ((v211[*(unsigned __int8 *)(v61 - 100) ^ 0xF3] ^ (*(unsigned __int8 *)(v61 - 100) - ((2 * *(unsigned __int8 *)(v61 - 100)) & 0xB8) - 36) ^ 0x85) << 24);
  v555 = v214;
  v217 = (*(unsigned __int8 *)(v214 + (*(unsigned __int8 *)(v61 - 105) ^ 0xE4)) ^ 1) & 0xFF00FFFF | ((v211[*(unsigned __int8 *)(v61 - 108) ^ 0x3ELL] ^ (*(unsigned __int8 *)(v61 - 108) - ((2 * *(unsigned __int8 *)(v61 - 108)) & 0xB8) - 36) ^ 0xFFFFFFE1) << 24) | (((v213[*(unsigned __int8 *)(v61 - 107) ^ 0x27] + 69) ^ 0x96) << 16) | ((*(unsigned __int8 *)(v212 + (*(unsigned __int8 *)(v61 - 106) ^ 9)) ^ 0x78) << 8);
  v218 = (*(unsigned __int8 *)(v214 + (*(unsigned __int8 *)(v61 - 101) ^ 0xF2)) ^ 0xB8) & 0xFF00FFFF | ((v211[*(unsigned __int8 *)(v61 - 104) ^ 0xD3] ^ (*(unsigned __int8 *)(v61 - 104) - ((2 * *(unsigned __int8 *)(v61 - 104)) & 0xB8) - 36) ^ 0xE0) << 24) | ((*(unsigned __int8 *)(v212 + (*(unsigned __int8 *)(v61 - 102) ^ 0xBELL)) ^ 0xDF) << 8) & 0xFF00FFFF | (((v213[*(unsigned __int8 *)(v61 - 103) ^ 0xE9] + 69) ^ 0x8A) << 16);
  if ((v210 & 0x80) != 0)
    v219 = -128;
  else
    v219 = 128;
  *(_DWORD *)(v61 - 128) = v216 ^ 0x2738E321;
  *(_DWORD *)(v61 - 132) = v215 ^ 0x9F8E8EBE;
  *(_DWORD *)(v61 - 136) = v217 ^ 0xDDD29885;
  *(_DWORD *)(v61 - 140) = v218 ^ 0x1261A929;
  HIDWORD(v551) = HIDWORD(v408) ^ HIDWORD(v409);
  LODWORD(v551) = v203 ^ v461 ^ v410 ^ v411 ^ v416;
  HIDWORD(v546) = (v450 - 23723240) ^ v204;
  LODWORD(v546) = v545 ^ v414 ^ v543;
  HIDWORD(v541) = v537 ^ v529;
  LODWORD(v541) = v540 ^ ((BYTE2(v198) ^ 0x4C) + 180680558 + ((2 * (BYTE2(v198) ^ 0x4C) + 88) & 0x282 ^ 0xF673EFFF)) ^ v527 ^ (v556 - 23723240);
  HIDWORD(v535) = v409 ^ v420;
  LODWORD(v535) = v418 ^ v492 ^ v534;
  HIDWORD(v530) = v205 ^ v426 ^ v532;
  LODWORD(v530) = (v475 - 23723240) ^ a21;
  HIDWORD(v526) = HIDWORD(v410) ^ *(_DWORD *)(v61 - 168) ^ v525 ^ HIDWORD(v411) ^ v432;
  LODWORD(v526) = v517 ^ v523 ^ HIDWORD(v414) ^ v513;
  HIDWORD(v521) = (HIDWORD(v416) - 23723240) ^ v506;
  LODWORD(v521) = v206 ^ v520;
  HIDWORD(v514) = v497 ^ v437;
  LODWORD(v514) = v435 ^ v472 ^ v441 ^ (HIDWORD(v422) - 23723240);
  HIDWORD(v507) = (v423 - 23723240) ^ v510;
  LODWORD(v507) = (181304767 * v190 + 472619654) ^ *(_DWORD *)(v61 - 256) ^ v486;
  HIDWORD(v501) = v477 ^ v408 ^ v208;
  LODWORD(v501) = v500 ^ HIDWORD(v426);
  HIDWORD(v495) = v207 ^ HIDWORD(v423);
  LODWORD(v495) = *(_DWORD *)(v61 - 216) ^ v583 ^ v577 ^ v494;
  HIDWORD(v490) = v489 ^ *(_DWORD *)(v61 - 192);
  LODWORD(v490) = *(_DWORD *)(v61 - 184) ^ v483;
  HIDWORD(v484) = v460 ^ v581;
  LODWORD(v484) = HIDWORD(v418) ^ HIDWORD(v420);
  HIDWORD(v478) = *(_DWORD *)(v61 - 248) ^ *(_DWORD *)(v61 - 152) ^ v568;
  LODWORD(v478) = v575 ^ v422 ^ v573;
  HIDWORD(v473) = v579 ^ *(_DWORD *)(v61 - 208) ^ v444;
  LODWORD(v473) = v465 ^ *(_DWORD *)(v61 - 160);
  HIDWORD(v468) = v467 ^ v470 ^ v448 ^ *(_DWORD *)(v61 - 232) ^ *(_DWORD *)(v61 - 224);
  LODWORD(v468) = v569 ^ v454;
  HIDWORD(v462) = *(_DWORD *)(v61 - 240) ^ *(_DWORD *)(v61 - 176);
  LODWORD(v462) = *(_DWORD *)(v61 - 200) - 1072789103;
  HIDWORD(v457) = (v219 + (v210 ^ 0x2497E332)) ^ v209;
  v220 = *(_DWORD *)(v61 - 124);
  LODWORD(v457) = v220 + 1048482662;
  HIDWORD(v451) = v220 ^ 0x467;
  LODWORD(v451) = v220 ^ 0x4BF;
  HIDWORD(v445) = v220 ^ 0x48C;
  LODWORD(v445) = v220 ^ 0x41D;
  HIDWORD(v438) = v220 ^ 0x477;
  LODWORD(v438) = v220 ^ 0x49F;
  HIDWORD(v433) = v220 & 0xD0F330BD;
  LODWORD(v433) = v220 & 0x2E445ACD;
  *(_QWORD *)(v61 - 168) = 13;
  v221 = *(unsigned __int8 **)(v61 - 120);
  v222 = v213[(v221[13] ^ (((v220 + 102) & 0xBA) - 69))] + 69;
  *(_QWORD *)(v61 - 152) = 1;
  v223 = (v222 ^ 2) << 16;
  v224 = v213[v221[1] ^ 0x57];
  *(_QWORD *)(v61 - 160) = 10;
  v225 = v221[10] ^ 0xB6;
  v226 = ((v224 + 69) ^ 0xF6) << 16;
  *(_QWORD *)(v61 - 192) = 4;
  v227 = *(unsigned __int8 *)(v558 + v225) ^ 0xF2;
  v228 = v221[4];
  v229 = v560[v228 ^ 0x9A];
  v230 = v227 << 8;
  *(_QWORD *)(v61 - 240) = 7;
  v231 = v229 ^ (v228 - ((2 * v228) & 0xB8) - 36) ^ 0xFFFFFFCF;
  v232 = v221[7] ^ 0xD6;
  *(_QWORD *)(v61 - 216) = 2;
  v233 = *(unsigned __int8 *)(v555 + v232) ^ 0x52 | (v231 << 24);
  LODWORD(v232) = *(unsigned __int8 *)(v558 + v221[2]) ^ 0xE0;
  *(_QWORD *)(v61 - 184) = 3;
  LODWORD(v232) = v226 | ((_DWORD)v232 << 8);
  v234 = *(unsigned __int8 *)(v555 + (v221[3] ^ 0x74));
  *(_QWORD *)(v61 - 176) = 12;
  LODWORD(v232) = v232 | v234 ^ 0x90;
  v235 = v560[v221[12] ^ 0x6ELL] ^ (v221[12] - ((2 * v221[12]) & 0xB8) - 36) ^ 0x51;
  *(_QWORD *)(v61 - 208) = 0;
  v236 = v223 | (v235 << 24);
  v237 = v232 | ((v560[*v221 ^ 0x15] ^ (*v221 - ((2 * *v221) & 0xB8) - 36) ^ 0xAE) << 24);
  LODWORD(v232) = v230 | ((v560[v221[8] ^ 0x46] ^ (v221[8] - ((2 * v221[8]) & 0xB8) - 36) ^ 0xFFFFFFE7) << 24);
  *(_QWORD *)(v61 - 200) = 14;
  v238 = *(unsigned __int8 *)(v558 + (v221[14] ^ 0xD5)) ^ 0x68;
  *(_QWORD *)(v61 - 232) = 5;
  v239 = v236 | (v238 << 8);
  v240 = v233 & 0xFF00FFFF | (((v213[v221[5] ^ 0x9DLL] + 69) ^ 0xF7) << 16);
  v241 = *(unsigned __int8 *)(v555 + (v221[11] ^ 0xC2)) ^ 0xB5 | v232;
  *(_QWORD *)(v61 - 256) = 9;
  *(_QWORD *)(v61 - 248) = 11;
  v242 = v221[6] ^ 0xA4;
  v243 = v241 & 0xFF00FFFF | (((v213[v221[9] ^ 0x3ELL] + 69) ^ 0xDF) << 16);
  *(_QWORD *)(v61 - 224) = 15;
  v244 = *(unsigned __int8 *)(v555 + (v221[15] ^ 0x47)) ^ 0x90 | v239;
  v571 = v240 | ((*(unsigned __int8 *)(v558 + v242) ^ 0x38) << 8);
  v245 = (char *)*(&off_1E5B56B60 + *(_DWORD *)(v61 - 124) - 1007) - 4;
  v246 = *(_DWORD *)&v245[4 * (((unsigned __int16)(v571 ^ WORD2(v561)) >> 8) ^ 0x21)] ^ ((((unsigned __int16)(v571 ^ WORD2(v561)) >> 8) ^ 0x4C) + 1191984866 - ((2 * (((v571 ^ HIDWORD(v561)) >> 8) ^ 0xB71C4C)) & 0x1C4));
  v247 = (char *)*(&off_1E5B56B60 + (v220 ^ 0x467)) - 4;
  v248 = v237 ^ v562 ^ 0x730032AA;
  v249 = (v246 + 1338733386 + ~((2 * v246) & 0x9F96E692)) ^ *(_DWORD *)&v247[4 * ((v237 ^ v562) ^ 0xAA)];
  v250 = ((((unsigned __int16)(WORD2(a50) ^ v244) >> 8) ^ 0xAA)
        + 1191984866
        - 2
        * ((((HIDWORD(a50) ^ v244) >> 8) ^ 0xA643AA) & 0xF3 ^ ((HIDWORD(a50) ^ v244) >> 8) & 0x11)) ^ *(_DWORD *)&v245[4 * (((unsigned __int16)(WORD2(a50) ^ v244) >> 8) ^ 0xC7)];
  v251 = v250 + 997494017 - ((2 * v250) & 0x76E91A02);
  v252 = v243 ^ v561;
  v253 = (char *)*(&off_1E5B56B60 + (v220 ^ 0x48C)) - 8;
  v254 = *(_DWORD *)&v253[4 * (((v243 ^ v561) >> 16) ^ 0x68)];
  v255 = v249 + 997494017 - ((2 * v249) & 0x76E91A02);
  HIDWORD(v257) = v254 ^ 0x635;
  LODWORD(v257) = v254 ^ 0x3028000;
  v256 = v257 >> 12;
  v258 = *(_DWORD *)&v253[4 * ((v237 ^ v562) >> 16)];
  HIDWORD(v257) = v258 ^ 0x635;
  LODWORD(v257) = v258 ^ 0x3028000;
  v259 = (char *)*(&off_1E5B56B60 + (v220 ^ 0x4BF)) - 4;
  LODWORD(v242) = v251 ^ *(_DWORD *)&v259[4 * (((v571 ^ HIDWORD(v561)) >> 24) ^ 0xB7)] ^ (v257 >> 12);
  v260 = *(_DWORD *)&v253[4 * (((HIDWORD(a50) ^ v244) >> 16) ^ 0x43)];
  HIDWORD(v257) = v260 ^ 0x635;
  LODWORD(v257) = v260 ^ 0x3028000;
  v261 = ((unsigned __int16)(v243 ^ v561) >> 8) ^ *(_DWORD *)&v247[4
                                                                                  * ((v571 ^ BYTE4(v561)) ^ 0xFB)] ^ *(_DWORD *)&v245[4 * (((unsigned __int16)(v243 ^ v561) >> 8) ^ 0x23)] ^ (v257 >> 12);
  v262 = *(_DWORD *)&v253[4 * (((v571 ^ HIDWORD(v561)) >> 16) ^ 0x1C)];
  HIDWORD(v257) = v262 ^ 0x635;
  LODWORD(v257) = v262 ^ 0x3028000;
  v263 = *(_DWORD *)&v259[4 * (HIBYTE(v252) ^ 0xF6)] ^ (BYTE1(v248) + 1191984866 - ((v248 >> 7) & 0x1C4)) ^ *(_DWORD *)&v245[4 * (BYTE1(v248) ^ 0x6D)] ^ ((v257 >> 12) + 997494017 - ((2 * (v257 >> 12)) & 0x76E91A02));
  v264 = HIDWORD(v408) ^ HIDWORD(v409) ^ v256 ^ *(_DWORD *)&v259[4
                                                               * (((HIDWORD(a50) ^ v244) >> 24) ^ 0xA6)] ^ v255;
  v265 = v551 ^ *(_DWORD *)&v247[4 * ((BYTE4(a50) ^ v244) ^ 0x87)] ^ (v263
                                                                                     + 1338733385
                                                                                     - ((2 * v263) & 0x9F96E692));
  v266 = HIDWORD(v546) ^ *(_DWORD *)&v247[4 * (v252 ^ 0x5F)] ^ (v242
                                                                               + 1338733385
                                                                               - ((2 * v242) & 0x9F96E692));
  v267 = HIDWORD(v457) ^ *(_DWORD *)&v259[4 * HIBYTE(v248)] ^ ((v261 ^ 0x8C74DE5)
                                                             + 997494018
                                                             + ((2 * ((v261 ^ 0x8C74DE5) & 0x3B748D15 ^ v261 & 0x14)) ^ 0xFFFFFFF7));
  v268 = v264 ^ 0xF9388C2F;
  LODWORD(v242) = *(_DWORD *)&v253[4 * ((v264 ^ 0xF9388C2F) >> 16)];
  HIDWORD(v257) = v242 ^ 0x635;
  LODWORD(v257) = v242 ^ 0x3028000;
  v269 = v257 >> 12;
  LODWORD(v242) = *(_DWORD *)&v253[4 * (BYTE2(v265) ^ 0x3C)];
  HIDWORD(v257) = v242 ^ 0x635;
  LODWORD(v257) = v242 ^ 0x3028000;
  LODWORD(v242) = v257 >> 12;
  v270 = *(_DWORD *)&v253[4 * (BYTE2(v266) ^ 0x66)];
  HIDWORD(v257) = v270 ^ 0x635;
  LODWORD(v257) = v270 ^ 0x3028000;
  v271 = (v257 >> 12) ^ *(_DWORD *)&v245[4 * (BYTE1(v267) ^ 5)] ^ ((BYTE1(v267) ^ 0x68)
                                                                 + 1191984866
                                                                 - ((2 * ((v267 >> 8) ^ 0x42BD68)) & 0x1C4));
  v272 = (v269 + 1338733385 - ((2 * v269) & 0x9F96E692)) ^ *(_DWORD *)&v247[4 * (v266 ^ 0xB6)];
  v273 = (v271 + 1338733385 - ((2 * v271) & 0x9F96E692)) ^ *(_DWORD *)&v247[4 * (v264 ^ 0x61)];
  v274 = (((unsigned __int16)(v264 ^ 0x8C2F) >> 8) + 1191984866 - (((v264 ^ 0xF9388C2F) >> 7) & 0x1C4)) ^ 0xD678EAEF ^ *(_DWORD *)&v245[4 * (((unsigned __int16)(v264 ^ 0x8C2F) >> 8) ^ 0x6D)];
  v275 = *(_DWORD *)&v259[4 * (HIBYTE(v266) ^ 0x43)] ^ 0x996ED6BF;
  v276 = v274 + v275;
  v277 = v274 & v275;
  v278 = *(_DWORD *)&v253[4 * (BYTE2(v267) ^ 0xBD)];
  HIDWORD(v257) = v278 ^ 0x635;
  LODWORD(v257) = v278 ^ 0x3028000;
  v279 = (v276 - 2 * v277) ^ (v257 >> 12);
  LODWORD(v242) = *(_DWORD *)&v259[4 * HIBYTE(v268)] ^ (v242 + 997494017 - ((2 * v242) & 0x76E91A02));
  LODWORD(v242) = (v242 + 1338733385 - ((2 * v242) & 0x9F96E692)) ^ *(_DWORD *)&v247[4 * (v267 ^ 0xAB)];
  v280 = *(_DWORD *)&v259[4 * (HIBYTE(v267) ^ 0x42)] ^ v565 ^ *(_DWORD *)&v245[4 * (BYTE1(v265) ^ 0x6F)] ^ ((BYTE1(v265) ^ 2) + 1191984866 - 2 * (((v265 >> 8) ^ 0x963C02) & 0xF3 ^ (v265 >> 8) & 0x11)) ^ (v272 + 997494017 - ((2 * v272) & 0x76E91A02));
  LOBYTE(v267) = BYTE1(v266) ^ 0x54;
  v281 = v546 ^ *(_DWORD *)&v245[4 * (BYTE1(v266) ^ 0x39)] ^ (v242 + 1191984866 - ((2 * v242) & 0x8E187DC4));
  v282 = HIDWORD(v541) ^ *(_DWORD *)&v259[4 * (HIBYTE(v265) ^ 0x96)] ^ (v273 + 997494017 - ((2 * v273) & 0x76E91A02));
  v283 = v541 ^ *(_DWORD *)&v247[4 * (v265 ^ 0x96)] ^ (v279 + 1338733385 - ((2 * v279) & 0x9F96E692));
  v284 = *(_DWORD *)&v253[4 * (BYTE2(v283) ^ 0x79)];
  HIDWORD(v257) = v284 ^ 0x635;
  LODWORD(v257) = v284 ^ 0x3028000;
  BYTE1(v265) = ((unsigned __int16)(WORD2(v541) ^ *(_WORD *)&v259[4 * (HIBYTE(v265) ^ 0x96)] ^ (v273
                                                                                              - 29439
                                                                                              - ((2 * v273) & 0x1A02))) >> 8) ^ 0x68;
  v285 = ((v257 >> 12) + 997494017 - ((2 * (v257 >> 12)) & 0x76E91A02)) ^ *(_DWORD *)&v259[4
                                                                                         * ((v282 ^ 0x2261685Eu) >> 24)];
  v286 = ((BYTE1(v283) ^ 0xD0) + 1191984866 - ((2 * ((v283 >> 8) ^ 0x679D0)) & 0x1C4)) ^ *(_DWORD *)&v245[4 * (BYTE1(v283) ^ 0xBD)];
  v287 = (v286 + 1338733385 - ((2 * v286) & 0x9F96E692)) ^ *(_DWORD *)&v247[4 * (v280 ^ 0x76)];
  LODWORD(v242) = ((BYTE1(v281) ^ 0xEC) + 1191984866 - ((2 * ((v281 >> 8) ^ 0xE5FEC)) & 0x1C4)) ^ *(_DWORD *)&v245[4 * (BYTE1(v281) ^ 0x81)];
  v288 = *(_DWORD *)&v253[4 * (BYTE2(v281) ^ 0x5F)];
  HIDWORD(v257) = v288 ^ 0x635;
  LODWORD(v257) = v288 ^ 0x3028000;
  v289 = v257 >> 12;
  HIDWORD(v257) = *(_DWORD *)&v247[4 * (v282 ^ 0x5E)] ^ 0xA6DC54C1;
  LODWORD(v257) = HIDWORD(v257);
  LODWORD(v242) = (v257 >> 28) ^ __ROR4__(*(_DWORD *)&v259[4 * (HIBYTE(v283) ^ 6)] ^ 0x7462B151 ^ (v242+ 997494017- ((2 * v242) & 0x76E91A02)), 28);
  v290 = (v289 + 997494017 - ((2 * v289) & 0x76E91A02)) ^ *(_DWORD *)&v259[4 * (HIBYTE(v280) ^ 0xD2)];
  v291 = (v290 + 1338733385 - ((2 * v290) & 0x9F96E692)) ^ *(_DWORD *)&v247[4 * (v283 ^ 0x4C)];
  v292 = *(_DWORD *)&v253[4 * (BYTE2(v282) ^ 0x1B)];
  HIDWORD(v257) = v292 ^ 0x635;
  LODWORD(v257) = v292 ^ 0x3028000;
  v293 = v257 >> 12;
  v294 = BYTE1(v280) ^ 0xC0;
  v295 = v294 + 1191984866 - 2 * (((v280 >> 8) ^ 0xD2CCC0) & 0xEF ^ (v280 >> 8) & 0xD);
  v296 = *(_DWORD *)&v253[4 * (BYTE2(v280) ^ 0xCC)];
  HIDWORD(v257) = v296 ^ 0x635;
  LODWORD(v257) = v296 ^ 0x3028000;
  v297 = v409 ^ v420 ^ (v257 >> 12) ^ __ROR4__(v242 ^ 0x78071371, 4);
  v298 = v535 ^ *(_DWORD *)&v259[4 * (HIBYTE(v281) ^ 0xE)] ^ v293 ^ (v287 + 997494017 - ((2 * v287) & 0x76E91A02));
  v299 = BYTE1(v265);
  v300 = HIDWORD(v530) ^ *(_DWORD *)&v245[4 * (BYTE1(v265) ^ 0x6D)] ^ (v291 + 1191984866 - ((2 * v291) & 0x8E187DC4));
  v301 = v530 ^ v295 ^ *(_DWORD *)&v247[4 * ((v281 ^ v267) ^ 0xCA)] ^ *(_DWORD *)&v245[4 * (v294 ^ 0x6D)] ^ (v285 + 1338733385 - ((2 * v285) & 0x9F96E692));
  v302 = v299 ^ 0x4552953C ^ v300;
  v303 = *(_DWORD *)&v253[4 * BYTE2(v302)];
  HIDWORD(v257) = v303 ^ 0x635;
  LODWORD(v257) = v303 ^ 0x3028000;
  v304 = v257 >> 12;
  BYTE1(v303) = BYTE1(v297) ^ 0xE7;
  v305 = *(_DWORD *)&v253[4 * ((v297 ^ 0x99FEE750) >> 16)];
  HIDWORD(v257) = v305 ^ 0x635;
  LODWORD(v257) = v305 ^ 0x3028000;
  v306 = *(_DWORD *)&v253[4 * (BYTE2(v301) ^ 2)];
  v307 = (BYTE1(v302) + 1191984866 - ((v302 >> 7) & 0x1C4)) ^ *(_DWORD *)&v247[4 * (v298 ^ 0x72)] ^ *(_DWORD *)&v245[4 * (BYTE1(v302) ^ 0x6D)] ^ ((v257 >> 12) + 1338733385 - ((2 * (v257 >> 12)) & 0x9F96E692));
  HIDWORD(v257) = v306 ^ 0x635;
  LODWORD(v257) = v306 ^ 0x3028000;
  v308 = *(_DWORD *)&v247[4 * v302] ^ *(_DWORD *)&v259[4 * (HIBYTE(v298) ^ 0xA7)] ^ (v257 >> 12) ^ 0x74BFFE48;
  v309 = *(_DWORD *)&v253[4 * (BYTE2(v298) ^ 0x3B)];
  HIDWORD(v257) = v309 ^ 0x635;
  LODWORD(v257) = v309 ^ 0x3028000;
  LODWORD(v242) = HIDWORD(v526) ^ ((BYTE1(v301) ^ 0xD9) + 1191984866 - ((2 * ((v301 >> 8) ^ 0x9802D9)) & 0x1C4)) ^ *(_DWORD *)&v247[4 * (v297 ^ 0x1E)] ^ *(_DWORD *)&v245[4 * (BYTE1(v301) ^ 0xB4)] ^ (v257 >> 12) ^ *(_DWORD *)&v259[4 * (HIBYTE(v300) ^ 0x61)];
  v310 = v526 ^ *(_DWORD *)&v259[4 * (HIBYTE(v301) ^ 0x98)] ^ (v307 + 997494017 - ((2 * v307) & 0x76E91A02));
  v311 = HIDWORD(v521) ^ *(_DWORD *)&v247[4 * (v301 ^ 0x3D)] ^ ((BYTE1(v298) ^ 0x29)
                                                                               + 1191984866
                                                                               - 2
                                                                               * (((v298 >> 8) ^ 0xA73B29) & 0xF2 ^ (v298 >> 8) & 0x10)) ^ *(_DWORD *)&v259[4 * ((v297 ^ 0x99FEE750) >> 24)] ^ *(_DWORD *)&v245[4 * (BYTE1(v298) ^ 0x44)] ^ v304;
  v312 = *(_DWORD *)&v253[4 * (BYTE2(v242) ^ 0x1D)];
  HIDWORD(v257) = v312 ^ 0x635;
  LODWORD(v257) = v312 ^ 0x3028000;
  v313 = v257 >> 12;
  v314 = *(_DWORD *)&v253[4 * (BYTE2(v311) ^ 0x57)];
  HIDWORD(v257) = v314 ^ 0x635;
  LODWORD(v257) = v314 ^ 0x3028000;
  v315 = v521 ^ *(_DWORD *)&v245[4 * (((unsigned __int16)(v297 ^ 0xE750) >> 8) ^ 0x6D)] ^ (v308 + 1191984866 - ((2 * v308) & 0x8E187DC4));
  v316 = BYTE1(v311);
  v317 = (BYTE1(v311) ^ 1) + 1191984866 - ((v311 >> 7) & 0x1C4);
  LOBYTE(v314) = v242 ^ 0x16;
  v318 = *(_DWORD *)&v247[4 * ((v315 ^ BYTE1(v303)) ^ 0x41)] ^ (((unsigned __int16)(v242 ^ 0xFF16) >> 8)
                                                                               + 1191984866
                                                                               - (((v242 ^ 0xA167FF16) >> 7) & 0x1C4)) ^ *(_DWORD *)&v245[4 * (((unsigned __int16)(v242 ^ 0xFF16) >> 8) ^ 0x6D)] ^ ((v257 >> 12) + 1338733385 - ((2 * (v257 >> 12)) & 0x9F96E692));
  v319 = *(_DWORD *)&v253[4 * (BYTE2(v315) ^ 0x81)];
  HIDWORD(v257) = v319 ^ 0x635;
  LODWORD(v257) = v319 ^ 0x3028000;
  v320 = ((v257 >> 12) + 997494017 - ((2 * (v257 >> 12)) & 0x76E91A02)) ^ *(_DWORD *)&v259[4
                                                                                         * ((v242 ^ 0xA167FF16) >> 24)];
  v321 = (v320 + 1338733385 - ((2 * v320) & 0x9F96E692)) ^ *(_DWORD *)&v247[4 * (v311 ^ 0x4D)];
  LODWORD(v242) = ((BYTE1(v315) ^ 0xA0) + 1191984866 - 2 * (((v315 >> 8) ^ 0x6881A0) & 0xF6 ^ (v315 >> 8) & 0x14)) ^ (v313 + 1338733385 - ((2 * v313) & 0x9F96E692)) ^ *(_DWORD *)&v247[4 * (v310 ^ 0xFC)] ^ *(_DWORD *)&v245[4 * (BYTE1(v315) ^ 0xCD)];
  v322 = *(_DWORD *)&v253[4 * (BYTE2(v310) ^ 0xC6)];
  LODWORD(v257) = __ROR4__((v322 >> 12) ^ 0x26DED0A, 17) ^ 0xEE910136;
  HIDWORD(v257) = v257;
  v323 = HIDWORD(v514) ^ *(_DWORD *)&v245[4 * (BYTE1(v310) ^ 0x75)] ^ (v321 + 1191984866 - ((2 * v321) & 0x8E187DC4));
  v324 = v514 ^ *(_DWORD *)&v259[4 * (HIBYTE(v311) ^ 0xA1)] ^ (v242 + 997494017 - ((2 * v242) & 0x76E91A02));
  v325 = HIDWORD(v507) ^ *(_DWORD *)&v259[4 * (HIBYTE(v310) ^ 0x5A)] ^ (v318 + 997494017 - ((2 * v318) & 0x76E91A02));
  v326 = v507 ^ v317 ^ *(_DWORD *)&v247[4 * v314] ^ *(_DWORD *)&v245[4 * (v316 ^ 0x6C)] ^ *(_DWORD *)&v259[4 * (HIBYTE(v315) ^ 0x68)] ^ ((v257 >> 15) + (v322 << 20));
  v327 = ((BYTE1(v323) ^ 0x9D) + 1191984866 - ((2 * ((v323 >> 8) ^ 0xC2489D)) & 0x1C4)) ^ *(_DWORD *)&v245[4 * (BYTE1(v323) ^ 0xF0)];
  v328 = *(_DWORD *)&v253[4 * (BYTE2(v324) ^ 0x8F)];
  v329 = *(_DWORD *)&v253[4 * ((v325 ^ 0xCFB8D782) >> 16)];
  HIDWORD(v257) = v329 ^ 0x635;
  LODWORD(v257) = v329 ^ 0x3028000;
  v330 = *(_DWORD *)&v247[4 * (v326 ^ 0xC2)] ^ (v328 << 20) ^ (v328 >> 12) ^ 0x63503028 ^ (v327 + 1338733386 + ~((2 * v327) & 0x9F96E692));
  v331 = ((v257 >> 12) + 1338733385 - ((2 * (v257 >> 12)) & 0x9F96E692)) ^ *(_DWORD *)&v247[4
                                                                                          * ((v323 ^ BYTE1(v310)) ^ 0x3F)];
  v332 = *(_DWORD *)&v253[4 * (BYTE2(v323) ^ 0x48)];
  HIDWORD(v257) = v332 ^ 0x635;
  LODWORD(v257) = v332 ^ 0x3028000;
  v333 = ((BYTE1(v326) ^ 0x9E) + 1191984866 - ((2 * ((v326 >> 8) ^ 0x31649E)) & 0x1C4)) ^ *(_DWORD *)&v247[4 * (v325 ^ 0xCC)] ^ *(_DWORD *)&v245[4 * (BYTE1(v326) ^ 0xF3)] ^ ((v257 >> 12) + 1338733385 - ((2 * (v257 >> 12)) & 0x9F96E692));
  v334 = *(_DWORD *)&v253[4 * (BYTE2(v326) ^ 0x64)];
  HIDWORD(v257) = v334 ^ 0x635;
  LODWORD(v257) = v334 ^ 0x3028000;
  v335 = HIDWORD(v501) ^ (((unsigned __int16)(v325 ^ 0xD782) >> 8)
                        + 1191984866
                        - (((v325 ^ 0xCFB8D782) >> 7) & 0x1C4)) ^ *(_DWORD *)&v247[4 * (v324 ^ 0x50)] ^ *(_DWORD *)&v245[4 * (((unsigned __int16)(v325 ^ 0xD782) >> 8) ^ 0x6D)] ^ *(_DWORD *)&v259[4 * (HIBYTE(v323) ^ 0xC2)] ^ (v257 >> 12);
  v336 = v501 ^ *(_DWORD *)&v259[4 * (HIBYTE(v324) ^ 0xC7)] ^ (v333 + 997494017 - ((2 * v333) & 0x76E91A02));
  v337 = v207 ^ HIDWORD(v423) ^ *(_DWORD *)&v259[4 * ((v325 ^ 0xCFB8D782) >> 24)] ^ (v330
                                                                                   + 997494017
                                                                                   - ((2 * v330) & 0x76E91A02));
  v338 = v495 ^ ((BYTE1(v324) ^ 0xD9) + 1191984866 - ((2 * ((v324 >> 8) ^ 0xC78FD9)) & 0x1C4)) ^ *(_DWORD *)&v245[4 * (BYTE1(v324) ^ 0xB4)] ^ *(_DWORD *)&v259[4 * (HIBYTE(v326) ^ 0x31)] ^ (v331 + 997494017 - ((2 * v331) & 0x76E91A02));
  v339 = (((unsigned __int16)(v338 ^ 0xCCA2) >> 8) + 1191984866 - (((v338 ^ 0x33C8CCA2) >> 7) & 0x1C4)) ^ *(_DWORD *)&v245[4 * (((unsigned __int16)(v338 ^ 0xCCA2) >> 8) ^ 0x6D)];
  v340 = *(_DWORD *)&v253[4 * (BYTE2(v336) ^ 0xE6)];
  HIDWORD(v257) = v340 ^ 0x635;
  LODWORD(v257) = v340 ^ 0x3028000;
  v341 = v257 >> 12;
  v342 = *(_DWORD *)&v253[4 * (BYTE2(v337) ^ 0x1C)];
  HIDWORD(v257) = v342 ^ 0x635;
  LODWORD(v257) = v342 ^ 0x3028000;
  v343 = (v257 >> 12) ^ *(_DWORD *)&v245[4 * (BYTE1(v336) ^ 0xD9)] ^ ((BYTE1(v336) ^ 0xB4)
                                                                    + 1191984866
                                                                    - ((2 * ((v336 >> 8) ^ 0x4FE6B4)) & 0x1C4));
  v344 = (v343 + 1338733385 - ((2 * v343) & 0x9F96E692)) ^ *(_DWORD *)&v247[4 * (v335 ^ 0xA2)];
  v345 = (v339 + 1338733385 - ((2 * v339) & 0x9F96E692)) ^ *(_DWORD *)&v247[4 * (v337 ^ 0x3A)];
  v346 = *(_DWORD *)&v247[4 * (v336 ^ 0x96)];
  v347 = *(_DWORD *)&v247[4 * (v338 ^ 0xA2)] ^ (((unsigned __int16)(v335 ^ 0xEAA2) >> 8)
                                                               + 1191984866
                                                               - (((v335 ^ 0x6D8CEAA2) >> 7) & 0x1C4)) ^ *(_DWORD *)&v245[4 * (((unsigned __int16)(v335 ^ 0xEAA2) >> 8) ^ 0x6D)] ^ (v341 + 1338733385 - ((2 * v341) & 0x9F96E692));
  HIDWORD(v257) = v346 ^ 0xFCB7349;
  LODWORD(v257) = v346 ^ 0x40000000;
  HIDWORD(v257) = (v257 >> 29) ^ 0x6615DA09;
  LODWORD(v257) = HIDWORD(v257);
  v348 = (v257 >> 3) + 1191984866 - ((2 * (v257 >> 3)) & 0x8E187DC4);
  LODWORD(v242) = *(_DWORD *)&v253[4 * ((v335 ^ 0x6D8CEAA2) >> 16)];
  HIDWORD(v257) = v242 ^ 0x635;
  LODWORD(v257) = v242 ^ 0x3028000;
  LODWORD(v242) = v257 >> 12;
  v349 = *(_DWORD *)&v253[4 * ((v338 ^ 0x33C8CCA2) >> 16)];
  HIDWORD(v257) = v349 ^ 0x635;
  LODWORD(v257) = v349 ^ 0x3028000;
  v350 = HIDWORD(v490) ^ *(_DWORD *)&v259[4 * (HIBYTE(v338) ^ 0x17)] ^ (v344 + 997494017 - ((2 * v344) & 0x76E91A02));
  v351 = v348 ^ *(_DWORD *)&v245[4 * (BYTE1(v337) ^ 0xD1)] ^ (v257 >> 12);
  v352 = *(_DWORD *)&v259[4 * (HIBYTE(v335) ^ 0x49)] ^ HIDWORD(v564) ^ (v351 + 997494017 - ((2 * v351) & 0x76E91A02));
  v353 = v490 ^ *(_DWORD *)&v259[4 * (HIBYTE(v336) ^ 0x4F)] ^ v242 ^ (v345 + 997494017 - ((2 * v345) & 0x76E91A02));
  v354 = HIDWORD(v484) ^ *(_DWORD *)&v259[4 * (HIBYTE(v337) ^ 0x1B)] ^ (v347 + 997494017 - ((2 * v347) & 0x76E91A02));
  v355 = *(_DWORD *)&v253[4 * (BYTE2(v354) ^ 0x7E)];
  HIDWORD(v257) = v355 ^ 0x635;
  LODWORD(v257) = v355 ^ 0x3028000;
  v356 = v257 >> 12;
  v357 = *(_DWORD *)&v253[4 * (BYTE2(v353) ^ 1)];
  HIDWORD(v257) = v357 ^ 0x635;
  LODWORD(v257) = v357 ^ 0x3028000;
  v358 = ((v257 >> 12) + 1338733385 - ((2 * (v257 >> 12)) & 0x9F96E692)) ^ *(_DWORD *)&v247[4
                                                                                          * (v350 ^ 0xC6)];
  LODWORD(v242) = ((BYTE1(v350) ^ 0x71) + 1191984866 - 2 * (((v350 >> 8) ^ 0xF25B71) & 0xEE ^ (v350 >> 8) & 0xC)) ^ *(_DWORD *)&v245[4 * (BYTE1(v350) ^ 0x1C)];
  LODWORD(v242) = (v242 + 997494017 - ((2 * v242) & 0x76E91A02)) ^ *(_DWORD *)&v259[4 * (HIBYTE(v353) ^ 0x1F)];
  v359 = *(_DWORD *)&v253[4 * (BYTE2(v350) ^ 0x5B)];
  HIDWORD(v257) = v359 ^ 0x635;
  LODWORD(v257) = v359 ^ 0x3028000;
  v360 = v257 >> 12;
  v361 = BYTE1(v337) ^ 0x73F4E0AF ^ v352;
  v362 = *(_DWORD *)&v253[4 * BYTE2(v361)];
  HIDWORD(v257) = v362 ^ 0x635;
  LODWORD(v257) = v362 ^ 0x3028000;
  v363 = v257 >> 12;
  HIDWORD(v257) = v356 ^ ((BYTE1(v353) ^ 0x81) + 1191984866 - 2 * (((v353 >> 8) ^ 0x1F0181) & 0xFA ^ (v353 >> 8) & 0x18)) ^ 0xD678EAEF ^ *(_DWORD *)&v245[4 * (BYTE1(v353) ^ 0xEC)];
  LODWORD(v257) = HIDWORD(v257);
  LODWORD(v257) = (v257 >> 11) ^ __ROR4__(*(_DWORD *)&v259[4 * (HIBYTE(v350) ^ 0xF2)] ^ 0x996ED6BF, 11) ^ 0xD490839A;
  HIDWORD(v257) = v257;
  v364 = HIDWORD(v418) ^ HIDWORD(v420) ^ *(_DWORD *)&v247[4 * (v353 ^ 0xB8)] ^ ((BYTE1(v354) ^ 0xAA)
                                                                                               + 1191984866
                                                                                               - 2
                                                                                               * (((v354 >> 8) ^ 0x967EAA) & 0xE7 ^ (v354 >> 8) & 5)) ^ *(_DWORD *)&v259[4 * (HIBYTE(v352) ^ 0x57)] ^ *(_DWORD *)&v245[4 * (BYTE1(v354) ^ 0xC7)] ^ v360;
  v365 = HIDWORD(v478) ^ *(_DWORD *)&v259[4 * (HIBYTE(v354) ^ 0x96)] ^ (BYTE1(v361) + 1191984866 - ((v361 >> 7) & 0x1C4)) ^ *(_DWORD *)&v245[4 * (BYTE1(v361) ^ 0x6D)] ^ (v358 + 997494018 + ~((2 * v358) & 0x76E91A02));
  v366 = v478 ^ *(_DWORD *)&v247[4 * (v354 ^ 0x88)] ^ v363 ^ (v242
                                                                             + 1338733385
                                                                             - ((2 * v242) & 0x9F96E692));
  v367 = HIDWORD(v473) ^ *(_DWORD *)&v247[4 * (BYTE1(v337) ^ 0xAF ^ v352)] ^ ((v257 >> 21)
                                                                                             + 1338733385
                                                                                             - ((2 * (v257 >> 21)) & 0x9F96E692));
  LODWORD(v242) = *(_DWORD *)&v253[4 * (BYTE2(v364) ^ 0x54)];
  BYTE2(v360) = BYTE2(v366) ^ 0x4A;
  HIDWORD(v257) = v242 ^ 0x635;
  LODWORD(v257) = v242 ^ 0x3028000;
  LODWORD(v242) = v257 >> 12;
  v368 = *(_DWORD *)&v245[4 * (BYTE1(v365) ^ 0x96)] ^ ((BYTE1(v365) ^ 0xFB)
                                                     + 1191984866
                                                     - ((2 * ((v365 >> 8) ^ 0x3EA2FB)) & 0x1C4));
  v369 = *(_DWORD *)&v253[4 * (BYTE2(v365) ^ 0xA2)];
  v370 = (v368 + 1338733385 - ((2 * v368) & 0x9F96E692)) ^ *(_DWORD *)&v247[4 * (v366 ^ 0x75)];
  HIDWORD(v257) = v369 ^ 0x635;
  LODWORD(v257) = v369 ^ 0x3028000;
  v371 = (((unsigned __int16)(v366 ^ 0xF075) >> 8) + 1191984866 - (((v366 ^ 0xB54AF075) >> 7) & 0x1C4)) ^ (v257 >> 12) ^ *(_DWORD *)&v245[4 * (((unsigned __int16)(v366 ^ 0xF075) >> 8) ^ 0x6D)];
  v372 = (v371 + 997494017 - ((2 * v371) & 0x76E91A02)) ^ *(_DWORD *)&v259[4 * (HIBYTE(v367) ^ 0xED)];
  v373 = *(_DWORD *)&v259[4 * (HIBYTE(v366) ^ 0x91)];
  v374 = *(_DWORD *)&v259[4 * (HIBYTE(v365) ^ 0x3E)];
  LODWORD(v259) = *(_DWORD *)&v259[4 * (HIBYTE(v364) ^ 0xB3)];
  v375 = *(_DWORD *)&v247[4 * (v367 ^ 0x8F)];
  v376 = *(_DWORD *)&v253[4 * ((v367 ^ 0xC9AF1D8F) >> 16)];
  v377 = *(_DWORD *)&v253[4 * BYTE2(v360)];
  HIDWORD(v257) = v377 ^ 0x635;
  LODWORD(v257) = v377 ^ 0x3028000;
  v378 = v473 ^ *(_DWORD *)&v247[4 * (v365 ^ 0x9A)] ^ v242 ^ (((unsigned __int16)(v367 ^ 0x1D8F) >> 8)
                                                                             + 1191984866
                                                                             - ((v367 >> 7) & 0x1C4)) ^ v373 ^ *(_DWORD *)&v245[4 * (((unsigned __int16)(v367 ^ 0x1D8F) >> 8) ^ 0x6D)];
  LODWORD(v245) = HIDWORD(v468) ^ ((BYTE1(v364) ^ 0x3E) + 1191984866 - ((2 * ((v364 >> 8) ^ 0xB3543E)) & 0x1C4)) ^ v374 ^ *(_DWORD *)&v245[4 * (BYTE1(v364) ^ 0x53)] ^ v375 ^ (v257 >> 12);
  v379 = v468 ^ *(_DWORD *)&v247[4 * (v364 ^ 0x27)] ^ (v372 + 1338733385 - ((2 * v372) & 0x9F96E692));
  v380 = HIDWORD(v462) ^ v259 ^ (v376 >> 12) ^ (v376 << 20) ^ (v370 + 997494017 - ((2 * v370) & 0x76E91A02));
  v381 = *(_DWORD *)(v61 - 124);
  v382 = (char *)*(&off_1E5B56B60 + v381 - 1032) - 8;
  v383 = (char *)*(&off_1E5B56B60 + (int)v445) - 4;
  LODWORD(v259) = *(_DWORD *)&v382[4 * (v379 ^ 7)] ^ *(_DWORD *)&v383[4
                                                                                     * (((unsigned __int16)(WORD2(v462) ^ (unsigned __int16)v259 ^ (v376 >> 12) ^ (v370 - 29439 - ((2 * v370) & 0x1A02))) >> 8) ^ 0x13)] ^ 0xF1936C5F;
  LODWORD(v242) = (_DWORD)v259 - 564691568 - ((2 * (_DWORD)v259) & 0xBCAEFB20);
  LODWORD(v259) = *(_DWORD *)&v383[4 * (BYTE1(v378) ^ 0x8F)];
  v384 = (char *)*(&off_1E5B56B60 + v381 - 1033) - 12;
  v385 = *(_DWORD *)&v383[4 * ((unsigned __int16)(v379 ^ 0x6F07) >> 8)];
  v386 = *(_DWORD *)&v384[4 * ((v245 >> 24) ^ 0xC9)] ^ v242;
  v387 = *(_DWORD *)&v383[4 * (BYTE1(v245) ^ 0x22)];
  LODWORD(v383) = *(_DWORD *)&v384[4 * (HIBYTE(v379) ^ 0xEF)];
  LODWORD(v253) = *(_DWORD *)&v384[4 * (HIBYTE(v380) ^ 0xFE)];
  v388 = *(_DWORD *)&v384[4 * (HIBYTE(v378) ^ 0x45)];
  v389 = (char *)*(&off_1E5B56B60 + SHIDWORD(v438)) - 12;
  v390 = *(_DWORD *)&v389[4 * (BYTE2(v380) ^ 0xEC)];
  v391 = *(unsigned int *)&v389[4 * (BYTE2(v379) ^ 0x2A)];
  v392 = *(_DWORD *)&v389[4 * (BYTE2(v245) ^ 0x71)];
  v393 = *(_DWORD *)&v389[4 * (BYTE2(v378) ^ 0x34)] ^ (v386 + 1176788107 - ((2 * v386) & 0x8C48B916));
  LODWORD(v242) = *(_DWORD *)&v382[4 * (v378 ^ 0x94)];
  LODWORD(v245) = *(_DWORD *)&v382[4 * (v245 ^ 0x91)];
  v394 = *(_DWORD *)&v382[4 * (v380 ^ 0xF3)];
  v395 = *(_DWORD *)(v61 - 140) ^ HIDWORD(v562) ^ (v393 - ((2 * v393) & 0x21C65756) - 1864160341);
  v396 = (char *)*(&off_1E5B56B60 + v381 - 986) - 12;
  v221[8] = v396[HIBYTE(v395) ^ 0xD7] ^ 0xEA;
  v397 = ((v385 ^ v390 ^ 0x3BA40A5) - 564691568 - 2 * ((v385 ^ v390 ^ 0x3BA40A5) & 0x5E577D9A ^ (v385 ^ v390) & 0xA)) ^ v388;
  v398 = (v397 - 1274187663 - ((2 * v397) & 0x681AE0E2)) ^ v245;
  v399 = *(_DWORD *)(v61 - 136) ^ v563 ^ (v398 - ((2 * v398) & 0xBEA0340E) + 1599085063);
  v400 = (char *)*(&off_1E5B56B60 + (int)v438) - 8;
  v221[*(_QWORD *)(v61 - 240)] = (v400[v399 ^ 0xC7] - 96) ^ 0x5F;
  v401 = (char *)*(&off_1E5B56B60 + SHIDWORD(v433)) - 8;
  v402 = v401[BYTE1(v399) ^ 0x13];
  HIDWORD(v257) = v402 ^ 5;
  LODWORD(v257) = (v402 ^ 0x40) << 24;
  v221[6] = (v257 >> 30) ^ 0x40;
  LODWORD(v242) = ((v242 ^ 0xF2292CFA ^ v391) - 564691568 - ((2 * (v242 ^ 0xF2292CFA ^ v391)) & 0xBCAEFB20)) ^ v253;
  LODWORD(v242) = (v242 - ((2 * v242) & 0x8B3C385C) + 1167989806) ^ v387;
  v403 = *(_DWORD *)(v61 - 132) ^ v564 ^ ((_DWORD)v242 - ((2 * (_DWORD)v242) & 0x3A181878) + 487328828);
  LODWORD(v242) = v401[BYTE1(v403)];
  HIDWORD(v257) = v242 ^ 5;
  LODWORD(v257) = (v242 ^ 0x40) << 24;
  v221[*(_QWORD *)(v61 - 216)] = (v257 >> 30) ^ 0x7E;
  v404 = (uint64_t)*(&off_1E5B56B60 + v433);
  v221[*(_QWORD *)(v61 - 256)] = *(_BYTE *)(v404 - 12 + (BYTE2(v395) ^ 0xFBLL)) ^ 0xA2;
  LODWORD(v259) = ((v259 ^ 0x9BC961BE ^ v383)
                 + 1176788107
                 - ((2 * (v259 ^ 0x9BC961BE ^ v383)) & 0x8C48B916)) ^ v392;
  LODWORD(v259) = v394 ^ ((_DWORD)v259 - 1274187663 - ((2 * (_DWORD)v259) & 0x681AE0E2));
  LODWORD(v259) = *(_DWORD *)(v61 - 128) ^ HIDWORD(v563) ^ ((_DWORD)v259 - ((2 * (_DWORD)v259) & 0x4B74C200) - 1514512128);
  v221[*(_QWORD *)(v61 - 168)] = *(_BYTE *)(v404 - 12 + (BYTE2(v259) ^ 0xB8)) ^ 0x71;
  v221[*(_QWORD *)(v61 - 248)] = (v400[v395 ^ 0x1BLL] - 96) ^ 0x7D;
  v221[*(_QWORD *)(v61 - 232)] = *(_BYTE *)(v404 - 12 + (BYTE2(v399) ^ 3)) ^ 0xF;
  v221[*(_QWORD *)(v61 - 192)] = v396[HIBYTE(v399) ^ 0x6DLL] ^ 0x12;
  v405 = v401[BYTE1(v395) ^ 0x92];
  HIDWORD(v257) = v405 ^ 5;
  LODWORD(v257) = (v405 ^ 0x40) << 24;
  v221[*(_QWORD *)(v61 - 160)] = (v257 >> 30) ^ 0xD2;
  v406 = *(_QWORD *)(v61 - 208);
  v221[v406] = v396[BYTE3(v403) ^ 0x53] ^ 0xFE;
  v221[*(_QWORD *)(v61 - 184)] = (v400[v403 ^ 0x95] - 96) ^ 0xAF;
  v221[*(_QWORD *)(v61 - 224)] = (v400[v259 ^ 0x64] - 96) ^ 0x27;
  v221[*(_QWORD *)(v61 - 176)] = v396[(v259 >> 24) ^ 0x6ELL] ^ 0x68;
  LODWORD(v259) = v401[BYTE1(v259) ^ 0x1FLL];
  HIDWORD(v257) = v259 ^ 5;
  LODWORD(v257) = (v259 ^ 0x40) << 24;
  v221[*(_QWORD *)(v61 - 200)] = (v257 >> 30) ^ 0x58;
  v221[*(_QWORD *)(v61 - 152)] = *(_BYTE *)(v404 - 12 + (BYTE2(v403) ^ 0xC8)) ^ 0x20;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)(a56 + 8 * ((1176 * ((((_DWORD)v406 - 606209353 - ((2 * (_DWORD)v406 + 32) & 0xB7BBF56E) + 16) ^ 0xDBDDFAB7) < v462)) ^ (v381 - 541))) - 12))(v404, 5, v403, 3020779633, 1746591970, v391, 3165584160, 5, a9, v408, v409, v410, v411, v414, v416, v418, v420, v422, v423,
           v426,
           a21,
           a22,
           a23,
           v433,
           v438,
           v445,
           v451,
           v457,
           v462,
           v468,
           v473,
           v478,
           v484,
           v490,
           v495,
           v501,
           v507,
           v514,
           v521,
           v526,
           v530,
           v535,
           v541,
           v546,
           v551,
           v555,
           v213,
           v558,
           v560,
           a50,
           v561,
           v562,
           v563,
           v564);
}

void sub_1AC19CBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,int a59,int a60,int a61)
{
  uint64_t v61;

  *(_DWORD *)(v61 - 128) = a58 ^ 0x7E883A2C;
  *(_DWORD *)(v61 - 140) = a60 ^ 0x2BBA4A04;
  *(_DWORD *)(v61 - 132) = a61 ^ 0x691AC5C4;
  *(_DWORD *)(v61 - 136) = a59 ^ 0xA60C851B;
  JUMPOUT(0x1AC19AEA4);
}

uint64_t sub_1AC19CC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,uint64_t a23,int a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59)
{
  uint64_t v59;
  int v60;

  v60 = a25 - ((a22 << ((a59 - 56) | 0x41)) & 0x7959F586) - 206977122;
  return ((uint64_t (*)(void))(*(_QWORD *)(v59
                                        + 8
                                        * ((179
                                          * (((2 * v60) & 0x3F7FFFFE ^ 0x3959F586) + (v60 ^ 0xA313053C) + 2146617532 != 531810491)) ^ a59))
                            - 4))();
}

uint64_t sub_1AC19CCF4(int a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1050
                                          * (((a2 + a1 + 1614807041 < (((v3 ^ 0x242) * v2) ^ 0x41Fu)) ^ (41 * (v3 ^ 0x4D) + 1)) & 1)) | v3))
                            - 12))();
}

uint64_t sub_1AC19CD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7
                                                                                 + 8
                                                                                 * (int)((941
                                                                                        * ((a6 & 0xFFFFFFF0) != (((_DWORD)a3 - 1614806485) ^ a3 ^ 0x5FB))) ^ a3))
                                                                     - 12))(a1, a2, a3, v6);
}

uint64_t sub_1AC19CDBC(int a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v22;
  int v25;

  v8 = a3 + 1360;
  v9 = (a2 + a1 + 1614807040);
  v10 = *(_QWORD *)(v7 - 120);
  v11 = v9 + v10 + 1;
  v12 = (a2 + a1) & 0xF;
  v13 = v12 - v9;
  v14 = v3 + v13;
  v15 = v12 + (v8 ^ 0x32Bu) - 190 - 856;
  v16 = v3 + v15;
  v17 = v4 + v13;
  v18 = v4 + v15;
  v19 = v5 + v13;
  v20 = v5 + v15;
  v22 = v14 < v11 && v16 > v10;
  if (v17 < v11 && v18 > v10)
    v22 = 1;
  v25 = v19 < v11 && v20 > v10 || v22;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((102 * v25) ^ v8)) - 8))();
}

uint64_t sub_1AC19CE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v7;
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v8
                                                             + 8
                                                             * ((1608
                                                               * (((a7 + 34) ^ (v7 < (((a7 + 11) | 0x80) ^ 0x3F4u))) & 1)) ^ a7)))(a1, a2, 0);
}

uint64_t sub_1AC19CEA0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16x4_t v19;
  int8x16x4_t v20;

  v19.val[1].i64[0] = ((_BYTE)v9 + 4) & 0xF;
  v19.val[1].i64[1] = ((_BYTE)v9 + 3) & 0xF;
  v19.val[2].i64[0] = ((_BYTE)v9 + 2) & 0xF;
  v19.val[2].i64[1] = ((_BYTE)v9 + 1) & 0xF;
  v19.val[3].i64[0] = v9 & 0xF;
  v19.val[3].i64[1] = ((_BYTE)v9 - 1) & 0xF;
  v20.val[0].i64[0] = ((_BYTE)v9 + 14) & 0xF;
  v20.val[0].i64[1] = ((_BYTE)v9 + 13) & 0xF;
  v12 = *(_QWORD *)(v11 - 120) - 15;
  v20.val[1].i64[0] = (v9 + 12) & 0xF;
  v20.val[1].i64[1] = (v9 + 11) & 0xF;
  v20.val[2].i64[0] = ((_BYTE)v9 + 10) & 0xF;
  v20.val[2].i64[1] = ((_BYTE)v9 + 9) & 0xF;
  v20.val[3].i64[0] = ((_BYTE)v9 + 8) & 0xF;
  v20.val[3].i64[1] = ((_BYTE)v9 + 7) & 0xF;
  v13.i64[0] = 0x505050505050505;
  v13.i64[1] = 0x505050505050505;
  v14.i64[0] = 0x4A4A4A4A4A4A4A4ALL;
  v14.i64[1] = 0x4A4A4A4A4A4A4A4ALL;
  v19.val[0].i64[0] = ((_BYTE)v9 + (_BYTE)v5) & 0xF;
  v19.val[0].i64[1] = ((_BYTE)v9 + 5) & 0xF;
  v15.i64[0] = vqtbl4q_s8(v19, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v15.i64[1] = vqtbl4q_s8(v20, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v16 = vrev64q_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v12 + (v9 + v5)), *(int8x16_t *)(v6 + v19.val[0].i64[0] - 15)), veorq_s8(*(int8x16_t *)(v7 + v19.val[0].i64[0] - 15), *(int8x16_t *)(v8 + v19.val[0].i64[0] - 15))));
  v17 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v16, v16, 8uLL), v14), vmulq_s8(v15, v13)));
  *(int8x16_t *)(v12 + (v9 + v5)) = vextq_s8(v17, v17, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8 * ((1791 * ((((a4 + 64) | 0x101) ^ 0x535) == (v4 & 0xFFFFFFF0))) ^ a4))
                            - 4))();
}

uint64_t sub_1AC19D010(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (v4 ^ (29 * (v3 == a3))))
                            - ((v4 - 1196785100) & 0x47557BFF)
                            - ((v4 - 1487027718) & 0x58A23CF7)
                            + 1900))();
}

uint64_t sub_1AC19D068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  char v7;
  int v8;
  uint64_t v9;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9
                                                                      + 8
                                                                      * (((((a7 - 788976570) & 0x2F06D477) - 803)
                                                                        * ((v7 & 8) == 0)) ^ a7)))(a1, a2, a3, (v8 - a3));
}

uint64_t sub_1AC19D0A4@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  int8x16x4_t v65;

  *(_DWORD *)(v59 - 128) = v52;
  *(_DWORD *)(v59 - 124) = v58;
  v60 = *(_QWORD *)(v59 - 120) - 7;
  *(_DWORD *)(v59 - 132) = v52 & 0xFFFFFFF8;
  v61 = -8 - a3;
  v62 = a2 + a1 + v57;
  v63 = (a2 + a1 + 1614807040 + v61 + 8);
  v65.val[0].i64[0] = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)v61 + 8) & 0xF;
  v65.val[0].i64[1] = (v62 + 19 + (_BYTE)v61 + 8) & 0xF;
  v65.val[1].i64[0] = (v62 + 18 + (_BYTE)v61 + 8) & 0xF;
  v65.val[1].i64[1] = (v62 + 17 + (_BYTE)v61 + 8) & 0xF;
  v65.val[2].i64[0] = (v62 + (_BYTE)v61 + (a4 ^ 0x33) + 8) & 0xF;
  v65.val[2].i64[1] = (v62 + 15 + (_BYTE)v61 + 8) & 0xF;
  v65.val[3].i64[0] = (v56 + (_BYTE)v61 + 8) & 0xF;
  v65.val[3].i64[1] = (v62 + 29 + (_BYTE)v61 + 8) & 0xF;
  *(int8x8_t *)(v60 + v63) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(v60 + v63), *(int8x8_t *)(v53 + (v63 & 0xF) - 7)), veor_s8(*(int8x8_t *)(v54 + (v63 & 0xF) - 7), *(int8x8_t *)(v55 + (v63 & 0xF) - 7)))), (int8x8_t)0x4A4A4A4A4A4A4A4ALL), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v65, (int8x16_t)xmmword_1AC3B5870), (int8x8_t)0x505050505050505)));
  return (*(uint64_t (**)(__n128))(a52 + 8 * ((15 * (-(v52 & 0xFFFFFFF8) == v61)) ^ a4)))((__n128)xmmword_1AC3B5870);
}

void sub_1AC19D200()
{
  JUMPOUT(0x1AC19D10CLL);
}

uint64_t sub_1AC19D208()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)(((((v0 + 809761455) & 0xCFBC0757) - 966)
                                               * (*(_DWORD *)(v2 - 128) != *(_DWORD *)(v2 - 132))) ^ v0))
                            - 12))();
}

uint64_t sub_1AC19D248(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = (a4 + v6);
  *(_BYTE *)(*(_QWORD *)(v11 - 120) + v12) ^= *(_BYTE *)(v7 + (v12 & 0xF)) ^ *(_BYTE *)(v8 + (v12 & 0xF)) ^ *(_BYTE *)(v9 + (v12 & 0xF)) ^ (5 * (v12 & 0xF)) ^ 0x4A;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((46 * (a4 - 1 != v5)) | (a5 - 519))) - 12))();
}

void sub_1AC19D2AC()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 1577905240)
    v1 = 1797235913;
  else
    v1 = -1797193967;
  *(_DWORD *)(v2 + 40) = v1;
}

void sub_1AC19D310(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  char v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = 3804331 * ((a1 & 0x499EDE0F | ~(a1 | 0x499EDE0F)) ^ 0x4CFFD2A6);
  v2 = *(_DWORD *)(a1 + 32) + v1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 68) - v1;
  v11 = 803242037;
  v12 = 1468695530;
  v13 = &v8;
  v9 = 0x578A83EA2FE080B6;
  v10 = &v14;
  if (v3 | v4)
    v6 = v5 == 206429006;
  else
    v6 = 1;
  v7 = !v6;
  __asm { BR              X8 }
}

uint64_t sub_1AC19D468()
{
  int v0;
  _QWORD *v1;
  uint64_t v2;
  _BOOL4 v4;

  v4 = v1[7] == 0x53090DC2622003FCLL || (v1[3] | v1[6]) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v0 | (2 * v4)))
                            - (((v0 - 362) ^ 0xFFFFFFFFFFFFFE96)
                             + ((v0 - 548) | 0x226u))))();
}

uint64_t sub_1AC19D4C4@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *v2;
  *(_DWORD *)(a1 - 0x53090DC2622003FCLL) = 0;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * ((1935 * (v4 == 0x48247A308694277ELL)) ^ v1))
                                          - ((v1 + 364) ^ v1 ^ 0x16Cu ^ 0xCLL)))(460628867);
}

uint64_t sub_1AC19D58C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;

  v37 = ((((2 * (v36 - 144)) | 0x9025B290) - (v36 - 144) - 1209194824) ^ 0x4845B35) * a1;
  *(_DWORD *)(v36 - 128) = v37 + v33 + 637;
  *(_DWORD *)(v36 - 144) = 690800408 - v37;
  *(_QWORD *)(v36 - 136) = &a32 + v32;
  sub_1AC1A0890((_DWORD *)(v36 - 144));
  return (*(uint64_t (**)(uint64_t))(v35
                                            + 8
                                            * ((((((v33 + 67) ^ (v34 == 0)) & 1) == 0)
                                              * (((v33 - 2084515761) & 0x7C3F2FF3) - 758)) ^ (v33 + 496))))(460628867);
}

uint64_t sub_1AC19D650(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v32;

  v27 = (v18 + 74) | 0x42;
  v28 = ((((v26 - 144) | 0x787CBED1) - (v26 - 144) + ((v26 - 144) & 0x87834128)) ^ 0x34EA3CAC) * a1;
  *(_QWORD *)(v26 - 144) = v22;
  *(_DWORD *)(v26 - 136) = v28 + v18 - 104;
  *(_DWORD *)(v26 - 128) = v20 + v28 - 170122700 + v27;
  *(_QWORD *)(v26 - 120) = v25;
  v32 = v23 != 0;
  v29 = v19;
  ((void (*)(uint64_t))(*(_QWORD *)(v19 + 8 * (v18 - 839)) - 8))(v26 - 144);
  *(_QWORD *)(v26 - 144) = v21;
  *(_QWORD *)(v26 - 136) = a17;
  *(_DWORD *)(v26 - 128) = (v27 - 490) ^ (235795823
                                        * (((v26 - 144) & 0xEA18056 | ~((v26 - 144) | 0xEA18056)) ^ 0x65F336F0));
  ((void (*)(uint64_t))(*(_QWORD *)(v29 + 8 * (v27 ^ 0x4F3)) - 8))(v26 - 144);
  *(_DWORD *)(v26 - 120) = v27
                         + 1374699841 * ((((2 * (v26 - 144)) | 0x1FE71C14) - (v26 - 144) + 1879863798) ^ 0xE2079603)
                         - 816;
  *(_QWORD *)(v26 - 144) = v21;
  *(_QWORD *)(v26 - 112) = a17;
  *(_QWORD *)(v26 - 104) = a16;
  *(_QWORD *)(v26 - 136) = a18;
  *(_QWORD *)(v26 - 128) = a12;
  v30 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v29 + 8 * (v27 ^ 0x497)) - 8))(v26 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24 + 8 * (((((v27 - 1100) | 0x370) ^ 0x3B7) * v32) ^ v27))
                                          - ((147 * (v27 ^ 0x448u)) ^ 0x37ALL)))(v30);
}

uint64_t sub_1AC19D8E0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  _DWORD *v11;

  v6 = (((v5 - 144) & 0x80439F6D | ~((v5 - 144) | 0x80439F6D)) ^ 0x2372A3DF) * v9;
  *(_DWORD *)(v5 - 144) = (v4 - 14) ^ v6;
  *(_DWORD *)(v5 - 140) = v1 - v6 + (((v4 - 779) | 0x318) ^ 0x5E56F751);
  *(_QWORD *)(v5 - 136) = v8;
  *(_QWORD *)(v5 - 128) = v2;
  result = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * (v4 ^ 0x32D)) - 12))(v5 - 144);
  *v11 = v10;
  *(_DWORD *)(v0 + 64) = 1797235913;
  return result;
}

void sub_1AC19DA38(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 40) ^ (1759421093 * ((-746607788 - (a1 | 0xD37FAB54) + (a1 | 0x2C8054AB)) ^ 0x9FFDE4FF));
  __asm { BR              X13 }
}

uint64_t sub_1AC19DB50()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v4 = v2 + 510;
  v5 = (v2 + 682571950) & 0xD750C7F9;
  if (v1 >= 0)
    v6 = v1;
  else
    v6 = -v1;
  if (v0 >= 0)
    v7 = v0;
  else
    v7 = -v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((((v4 - 342) ^ 0x451) * (v6 > v7)) ^ v4)) - v5 + 1445))();
}

uint64_t sub_1AC19DBA8()
{
  int v0;
  uint64_t v1;
  unsigned int v2;

  return (*(uint64_t (**)(void))(v1 + 8 * ((492 * (v2 > ((v0 - 849) ^ 0x2DAu))) ^ (v0 - 188))))();
}

void sub_1AC19DBD4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a1 + a2) = 1468695530;
}

void sub_1AC19EAB0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8) + 535753261 * ((2 * (a1 & 0x5E99CC2A) - a1 - 1587137579) ^ 0xAB923DFA);
  if (*(_DWORD *)(*(_QWORD *)a1 - 0x48247A308694277ALL) - 1468695530 >= 0)
    v3 = *(_DWORD *)(*(_QWORD *)a1 - 0x48247A308694277ALL) - 1468695530;
  else
    v3 = 1468695530 - *(_DWORD *)(*(_QWORD *)a1 - 0x48247A308694277ALL);
  v2 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v2 - 0x48247A308694277ALL) - 1468695530 >= 0)
    v4 = *(_DWORD *)(v2 - 0x48247A308694277ALL) - 1468695530;
  else
    v4 = 1468695530 - *(_DWORD *)(v2 - 0x48247A308694277ALL);
  v7 = *(_QWORD *)a1;
  v6 = v1 + 535753261 * (((~&v6 & 0xF9B5D77A) - (~&v6 | 0xF9B5D77B)) ^ 0xF341D954) - 77;
  sub_1AC196FB4((uint64_t)&v6);
  if (v3 >= v4)
    v5 = v4;
  else
    v5 = v3;
  __asm { BR              X15 }
}

uint64_t sub_1AC19EC30@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  _BOOL4 v17;

  v12 = v4 - 1274692220;
  v13 = v5 ^ 0xF5;
  v14 = 4 * (v8 + 1 + v6);
  v15 = v10
      + 449986149
      + (*(_DWORD *)(*(_QWORD *)(v11 - 0x48247A3086942776) + v14) ^ v7)
      - (*(_DWORD *)(*(_QWORD *)(a3 - 0x48247A3086942776) + v14) ^ v7);
  *(_DWORD *)(*(_QWORD *)(a1 - 0x48247A3086942776) + v14) = v15
                                                            + (((v13 + 589) | 0x20) ^ (v7 - 179))
                                                            - (v9 & (2 * v15));
  v17 = v8 - 1700894951 < 872791428 && v8 - 1700894951 >= v12;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v3 + 8 * ((989 * v17) ^ v13)))(0xE3DFFB6C3BD27FF4, 0x7DACE6D7DEFFBE70, 2594072345, 872791428);
}

uint64_t sub_1AC19ED28()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  _BOOL4 v5;

  v5 = v2 + 2104525768 > ((v1 - 816) | 0x60) + 383244624 || v2 + 2104525768 < v3 - 1764238796;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((2017 * v5) ^ v1)) - ((v1 - 983067660) & 0x3A986C7F ^ 0x42FLL)))();
}

uint64_t sub_1AC19ED98@<X0>(int a1@<W4>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _BOOL4 v17;

  v13 = 4 * (v9 + (v5 ^ 0x4C4 ^ (v7 + 1056)));
  v14 = v3 + v11 + (*(_DWORD *)(*(_QWORD *)(v12 - 0x48247A3086942776) + v13) ^ v8);
  *(_DWORD *)(*(_QWORD *)(a2 - 0x48247A3086942776) + v13) = v14 + v8 - (v10 & (2 * v14));
  v15 = v9 + 1 + v4;
  v17 = v15 <= a1 + 227 && v15 >= v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v2 + 8
                                                                                               * ((848 * v17) ^ v5))
                                                                              - 8))(1220, 0x7BCCF6D6DAFAFF65, 0x1B5F5FECALL, 0xE5BFEB6D3FD73EFFLL);
}

uint64_t sub_1AC19EE60()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  _BOOL4 v6;

  v4 = (v1 ^ 0x747B72B1) + v2;
  v6 = v4 > ((5 * (v1 ^ 0x4B2)) ^ 0xDE2CFE8) || v4 < v3 - 1914516222;
  return (*(uint64_t (**)(void))(v0 + 8 * (v1 ^ (16 * v6))))();
}

uint64_t sub_1AC19EEB8@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _BOOL4 v17;

  v13 = 4 * (v11 + 1 + v9);
  v14 = v4 - 449986148 + (*(_DWORD *)(*(_QWORD *)(a3 - 0x48247A3086942776) + v13) ^ 0x6F70F58C);
  *(_DWORD *)(*(_QWORD *)(a1 - 0x48247A3086942776) + v13) = v14 + v10 - ((v14 << ((v7 + 55) ^ 0x21)) & v12);
  v15 = v5 + v11 + 1249;
  v17 = v15 <= v6 && v15 >= v8;
  return (*(uint64_t (**)(void))(v3 + 8 * ((1742 * v17) ^ v7)))();
}

uint64_t sub_1AC19EF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * (a8 | (4 * ((a8 ^ 0xBB ^ (v9 == 0x618CE2441AD23E64)) & 1))))
                            - (a8 ^ 0x3F5u)
                            + 1225))();
}

uint64_t sub_1AC19EFDC()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((186
                                          * ((((v3 + v2) < 0x7FFFFFFF) ^ (3 * (v1 ^ 0xB2))) & 1)) ^ (v1 + 154)))
                            - 4))();
}

uint64_t sub_1AC19F080@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((1623
                                          * (*(_DWORD *)(*(_QWORD *)(a1 - 0x48247A3086942776)
                                                       + 4 * (v5 + v3)) == v4)) ^ v2 ^ 0x3F4))
                            - ((((v2 ^ 0x3F4) - 900) | 0x70u) ^ 0x7FLL)))();
}

uint64_t sub_1AC19F0D8()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((((((v2 - 96) | 0x280) ^ (v4 + 374)) + v3 > 0x7FFFFFFE) * v1) ^ v2))
                            - 4))();
}

uint64_t sub_1AC19F134()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8 * ((1623 * (*(_DWORD *)(v1 + 4 * (v5 + v3)) == v4)) ^ v2))
                            - (((v2 - 900) | 0x70u) ^ 0x7FLL)))();
}

void sub_1AC19F16C(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  int v4;

  v4 = v1 - 149885707 + (v1 - 149885707) * (v2 + v3);
  *(_DWORD *)(a1 - 0x48247A308694277ALL) = (v4 ^ 0x57EEBBEE) - 6567940 + ((2 * v4) & 0xAFDD77DC);
}

void sub_1AC19F2D8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1AC19F33C()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((2030 * (v1 == 576264642)) ^ 0x3FDu)) - 12))();
}

uint64_t sub_1AC19F370@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  *(_DWORD *)(*(_QWORD *)(v1 + 96) + 528) = 803242100;
  *(_DWORD *)(*(_QWORD *)(v1 + 96) + 532) = 1468695530;
  *(_QWORD *)(*(_QWORD *)(v1 + 96) + 536) = *(_QWORD *)(v1 + 96) + 544;
  v4 = *(_QWORD *)(v1 + 96) + 0x48247A308694298ELL;
  v9 = *(_QWORD *)(v2 + 8) + (*(_DWORD *)(v2 + 4) - v3);
  v11 = 553
      - 1734042137 * (((&v7 | 0x9DCB4523) - (&v7 & 0x9DCB4523)) ^ 0xC105866E)
      + v3
      - 295136619;
  v7 = v4;
  v8 = 212 - 1734042137 * (((&v7 | 0x9DCB4523) - (&v7 & 0x9DCB4523)) ^ 0xC105866E);
  ((void (*)(uint64_t *))(*(_QWORD *)(a1 + 296) - 8))(&v7);
  v5 = v10;
  *(_QWORD *)(*(_QWORD *)(v1 + 96) + 512) = *(_QWORD *)(v2 + 8) + (*(_DWORD *)(v2 + 4) - v3);
  return v5 ^ 0x732F3CBu;
}

void sub_1AC19F4D4()
{
  uint64_t v0;
  int v1;

  v0 = MEMORY[0x1E0C80A78]();
  v1 = *(_DWORD *)(v0 + 16) ^ (3804331 * (v0 ^ 0xFA9EF356));
  __asm { BR              X13 }
}

uint64_t sub_1AC19F62C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;

  v41 = &a34 + v36;
  v55 = &a32 + v36;
  v54 = &a36 + v36;
  v53 = &a30 + v36;
  v52 = &a26 + v36;
  v51 = &a28 + v36;
  v50 = &a24 + v36;
  v42 = &a20 + v36;
  v43 = *a1;
  v56 = a1[5];
  v44 = a1[3];
  v45 = *(_QWORD *)(v44 - 0x5BFD90C18C6562AALL);
  *(_DWORD *)(v40 - 104) = (v39 + 1111) ^ (1759421093 * ((v40 - 440558450 - 2 * ((v40 - 144) & 0xE5BD9D1E)) ^ 0x56C02D4A));
  *(_QWORD *)(v40 - 128) = v43;
  *(_QWORD *)(v40 - 120) = v45;
  *(_QWORD *)(v40 - 144) = v44;
  *(_QWORD *)(v40 - 136) = a2;
  *(_QWORD *)(v40 - 112) = &a34 + v36;
  v46 = (void (*)(uint64_t))(*(_QWORD *)(v37 + 8 * (v39 ^ 0x16A)) - 4);
  v46(v40 - 144);
  *(_QWORD *)(v40 - 112) = v42;
  *(_QWORD *)(v40 - 144) = v43;
  *(_QWORD *)(v40 - 136) = v41;
  *(_QWORD *)(v40 - 128) = v44;
  *(_DWORD *)(v40 - 120) = v39
                         + 535753261 * ((((2 * (v40 - 144)) | 0x70DF0EA6) - (v40 - 144) - 946833235) ^ 0x329B897C)
                         + 1385;
  ((void (*)(uint64_t))((char *)*(&off_1E5B56B60 + v39 - 273) - 8))(v40 - 144);
  *(_QWORD *)(v40 - 120) = v41;
  *(_QWORD *)(v40 - 112) = v55;
  *(_QWORD *)(v40 - 144) = v44;
  *(_QWORD *)(v40 - 136) = v42;
  *(_DWORD *)(v40 - 104) = (v39 + 1111) ^ (1759421093 * ((v40 - 144) ^ 0xB37DB054));
  *(_QWORD *)(v40 - 128) = v43;
  v46(v40 - 144);
  *(_QWORD *)(v40 - 120) = v55;
  *(_QWORD *)(v40 - 112) = v54;
  *(_DWORD *)(v40 - 104) = (v39 + 1111) ^ (1759421093
                                         * ((((v40 - 144) | 0xFED2E386) - (v40 - 144) + ((v40 - 144) & 0x12D1C78)) ^ 0x4DAF53D2));
  *(_QWORD *)(v40 - 136) = v42;
  *(_QWORD *)(v40 - 128) = v43;
  *(_QWORD *)(v40 - 144) = v44;
  v46(v40 - 144);
  *(_DWORD *)(v40 - 104) = (v39 + 1111) ^ (1759421093
                                         * ((1192167507 - ((v40 - 144) | 0x470F0853) + ((v40 - 144) | 0xB8F0F7AC)) ^ 0xB8D47F8));
  *(_QWORD *)(v40 - 120) = v54;
  *(_QWORD *)(v40 - 112) = v53;
  *(_QWORD *)(v40 - 136) = v42;
  *(_QWORD *)(v40 - 128) = v43;
  *(_QWORD *)(v40 - 144) = v44;
  v46(v40 - 144);
  *(_QWORD *)(v40 - 128) = v43;
  *(_QWORD *)(v40 - 120) = v53;
  *(_DWORD *)(v40 - 104) = (v39 + 1111) ^ (1759421093
                                         * ((((v40 - 144) | 0x738EEFBD) + (~(v40 - 144) | 0x8C711042)) ^ 0xC0F35FE8));
  *(_QWORD *)(v40 - 144) = v44;
  *(_QWORD *)(v40 - 136) = v42;
  *(_QWORD *)(v40 - 112) = v52;
  v46(v40 - 144);
  *(_QWORD *)(v40 - 120) = v52;
  *(_QWORD *)(v40 - 112) = v51;
  *(_DWORD *)(v40 - 104) = (v39 + 1111) ^ (1759421093
                                         * ((((v40 - 144) | 0xEC5B9577) + (~(v40 - 144) | 0x13A46A88)) ^ 0x5F262522));
  *(_QWORD *)(v40 - 144) = v44;
  *(_QWORD *)(v40 - 136) = v42;
  *(_QWORD *)(v40 - 128) = v43;
  v46(v40 - 144);
  *(_QWORD *)(v40 - 120) = v51;
  *(_QWORD *)(v40 - 112) = v50;
  *(_DWORD *)(v40 - 104) = (v39 + 1111) ^ (1759421093
                                         * ((((2 * (v40 - 144)) | 0xAC7F21A) - (v40 - 144) - 90437901) ^ 0xB61E4959));
  *(_QWORD *)(v40 - 144) = v44;
  *(_QWORD *)(v40 - 136) = v42;
  *(_QWORD *)(v40 - 128) = v43;
  v46(v40 - 144);
  *(_DWORD *)(v40 - 104) = (v39 + 1111) ^ (1759421093
                                         * ((v40 + 1718522719 - 2 * ((v40 - 144) & 0x666E93EF)) ^ 0xD51323BB));
  *(_QWORD *)(v40 - 144) = v44;
  *(_QWORD *)(v40 - 136) = v42;
  *(_QWORD *)(v40 - 120) = v50;
  *(_QWORD *)(v40 - 112) = v42;
  *(_QWORD *)(v40 - 128) = v43;
  v46(v40 - 144);
  v47 = *(_QWORD *)(v44 - 0x5BFD90C18C6562B2);
  *(_DWORD *)(v40 - 128) = (v39 + 103) ^ (1734042137
                                        * ((((v40 - 144) | 0x81FFDE0) - ((v40 - 144) & 0x81FFDE0)) ^ 0x54D13EAD));
  *(_QWORD *)(v40 - 144) = v47;
  *(_QWORD *)(v40 - 136) = v38;
  sub_1AC16E3FC(v40 - 144);
  *(_QWORD *)(v40 - 136) = v56;
  *(_DWORD *)(v40 - 140) = v39 + 460628867 * ((v40 - 144) ^ 0x4C96827D) + 63;
  v48 = sub_1AC16E584(v40 - 144);
  return (*(uint64_t (**)(uint64_t))(a19
                                            + 8
                                            * ((233
                                              * (*(_DWORD *)(v40 - 144) + (((v39 - 250) | 0x83) ^ 0x95E96035) < ((v39 - 250) ^ 0x37Au) + 2147482845)) ^ v39)))(v48);
}

uint64_t sub_1AC19FAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v25;
  int v26;
  int v27;

  return (*(uint64_t (**)(void))(a25
                              + 8
                              * ((233 * (v26 + v25 + (((v27 ^ 0x698) + 354087864) & 0xEAE506DF) - 217 < 0x7FFFFFFF)) ^ ((v27 ^ 0x698) - 1265))))();
}

uint64_t sub_1AC19FB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void (*a23)(uint64_t),uint64_t a24,uint64_t a25)
{
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  *(_QWORD *)(v30 - 136) = v26;
  *(_QWORD *)(v30 - 128) = v27;
  *(_QWORD *)(v30 - 144) = v28;
  *(_DWORD *)(v30 - 120) = v29
                         + 535753261 * ((((v30 - 144) | 0x2DE115EC) - ((v30 - 144) & 0x2DE115EC)) ^ 0x27151BC3)
                         + 1504;
  *(_QWORD *)(v30 - 112) = v26;
  a23(v30 - 144);
  v31 = 1225351577 * ((((v30 - 144) | 0x1068A157) + (~(v30 - 144) | 0xEF975EA8)) ^ 0x33F27940);
  *(_QWORD *)(v30 - 136) = a24;
  *(_DWORD *)(v30 - 128) = (v25 - 1779867410) ^ v31;
  *(_DWORD *)(v30 - 140) = (v29 + 1113) ^ v31;
  v32 = sub_1AC1A4FCC(v30 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a25
                                                      + 8
                                                      * (((*(_DWORD *)(v30 - 144) != 1158179193)
                                                        * (((v29 + 1067) | 0x10) - 352)) ^ v29))
                                          - 12))(v32);
}

uint64_t sub_1AC19FC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v25;
  int v26;

  return ((uint64_t (*)(void))(*(_QWORD *)(a25
                                        + 8
                                        * (int)(((((v25 + 1019832479) & 0xC336977F) - 1279)
                                               * ((v26 - 1) < 0x7FFFFFFD)) ^ v25))
                            - ((v25 - 1203) | 0x30Cu)
                            + 867))();
}

uint64_t sub_1AC19FCB0@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v20 = 1225351577 * ((v19 - 144) ^ 0x239AD816);
  *(_QWORD *)(v19 - 136) = a17;
  *(_DWORD *)(v19 - 140) = (v18 + 453) ^ v20;
  *(_DWORD *)(v19 - 128) = a1 ^ v20;
  v21 = sub_1AC1A4FCC(v19 - 144);
  return (*(uint64_t (**)(uint64_t))(a18
                                            + 8
                                            * (((*(_DWORD *)(v19 - 144) == 1158179193) * (((v18 - 300) | 0x400) - 1402)) ^ v18)))(v21);
}

uint64_t sub_1AC19FD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v30 = ((((v29 - 144) | 0x57D1B2BD) + (~(v29 - 144) | 0xA82E4D42)) ^ 0x744B6AAA) * v28;
  *(_QWORD *)(v29 - 136) = v27;
  *(_DWORD *)(v29 - 128) = (v25 - 1779867412) ^ v30;
  *(_DWORD *)(v29 - 140) = (v26 - 271) ^ v30;
  v31 = sub_1AC1A4FCC(v29 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a25
                                                      + 8
                                                      * ((79
                                                        * (*(_DWORD *)(v29 - 144) != ((v26 - 1410123336) & 0x540CC476)
                                                                                   + 1158178055)) ^ (v26 - 647)))
                                          - 8))(v31);
}

uint64_t sub_1AC19FE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void (*a23)(uint64_t),uint64_t a24,uint64_t a25)
{
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;

  v31 = v27 - 974;
  *(_DWORD *)(v30 - 120) = v31
                         + 1094
                         + 535753261 * ((2 * ((v30 - 144) & 0x5FD672B8) - (v30 - 144) + 539594051) ^ 0x2ADD836C);
  *(_QWORD *)(v30 - 112) = v26;
  *(_QWORD *)(v30 - 136) = v26;
  *(_QWORD *)(v30 - 128) = v28;
  *(_QWORD *)(v30 - 144) = a21;
  a23(v30 - 144);
  *(_QWORD *)(v30 - 144) = a21;
  *(_QWORD *)(v30 - 136) = v26;
  *(_QWORD *)(v30 - 128) = v28;
  *(_DWORD *)(v30 - 120) = v31
                         + 1094
                         + 535753261 * ((2 * ((v30 - 144) & 0x98E9AE0) - (v30 - 144) + 1987142940) ^ 0x7C856B33);
  *(_QWORD *)(v30 - 112) = v26;
  a23(v30 - 144);
  v32 = 1225351577 * ((v30 + 250314850 - 2 * ((v30 - 144) & 0xEEB80F2)) ^ 0x2D7158E4);
  *(_QWORD *)(v30 - 136) = v29;
  *(_DWORD *)(v30 - 140) = (v31 + 703) ^ v32;
  *(_DWORD *)(v30 - 128) = (v25 - 1779867411) ^ v32;
  v33 = sub_1AC1A4FCC(v30 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a25
                                                      + 8
                                                      * (((*(_DWORD *)(v30 - 144) == 1158179193)
                                                        * ((73 * (v31 ^ 0x276)) ^ 0x22)) ^ v31))
                                          - ((v31 - 498) | 0x58u)
                                          + 211))(v33);
}

uint64_t sub_1AC19FFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t (*a22)(uint64_t),uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  *(_QWORD *)(v29 - 144) = a20;
  *(_QWORD *)(v29 - 136) = a15;
  *(_QWORD *)(v29 - 120) = v26;
  *(_QWORD *)(v29 - 112) = v26;
  *(_DWORD *)(v29 - 104) = (v25 + 1230) ^ (1759421093
                                         * ((-2001794876 - ((v29 - 144) | 0x88AF08C4) + ((v29 - 144) | 0x7750F73B)) ^ 0xC42D476F));
  v30 = v25 + 1384;
  *(_QWORD *)(v29 - 128) = v28;
  v31 = a22(v29 - 144);
  return (*(uint64_t (**)(uint64_t))(a25
                                            + 8
                                            * ((233
                                              * (v27 - 1779867412 + ((v30 + 354087864) & 0xEAE506DF) - 217 < 0x7FFFFFFF)) ^ (v30 - 1265))))(v31);
}

uint64_t sub_1AC1A0730()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);

  v5 = 460628867 * ((((v4 - 144) | 0x70A3BF97) - (v4 - 144) + ((v4 - 144) & 0x8F5C4068)) ^ 0x3C353DEA);
  *(_DWORD *)(v4 - 128) = v5 + v1 + 730;
  *(_QWORD *)(v4 - 136) = v8;
  *(_DWORD *)(v4 - 144) = 690734872 - v5;
  sub_1AC1A0890((_DWORD *)(v4 - 144));
  *(_QWORD *)(v4 - 120) = v0;
  *(_QWORD *)(v4 - 112) = v0;
  *(_QWORD *)(v4 - 136) = v8;
  *(_QWORD *)(v4 - 128) = v3;
  *(_DWORD *)(v4 - 104) = (v1 + 647) ^ (1759421093
                                      * ((((v4 - 144) | 0x1491497) + (~(v4 - 144) | 0xFEB6EB68)) ^ 0xB234A4C2));
  *(_QWORD *)(v4 - 144) = v2;
  v9(v4 - 144);
  *(_DWORD *)(v4 - 128) = (((v1 - 32973615) & 0x1F7264F) - 1162) ^ (1734042137 * ((v4 - 144) ^ 0x5CCEC34D));
  *(_QWORD *)(v4 - 144) = v0;
  *(_QWORD *)(v4 - 136) = v7;
  return sub_1AC16E3FC(v4 - 144);
}

uint64_t sub_1AC1A0890(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;

  v1 = 460628867 * ((2 * (a1 & 0x1FF5D3B4) - (_DWORD)a1 - 536204213) ^ 0xAC9CAE36);
  v2 = a1[4] - v1;
  v3 = v1 + *a1;
  v5 = v3 - 690734871;
  v4 = (int)(v3 - 690734871) < 0;
  LODWORD(v6) = 690734871 - v3;
  if (v4)
    v6 = v6;
  else
    v6 = v5;
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B56B60 + (int)(v2 ^ 0x586))
                              + (int)((746 * (v6 != ((2 * (_DWORD)v6) & 0xFCFBCE06))) ^ v2))
                            - 4))();
}

void sub_1AC1A0944(int a1@<W8>)
{
  uint64_t v1;
  int v2;

  **(_DWORD **)(v1 - 0x48247A3086942776) = (v2 - 25303293) ^ 0x6EF2ED70;
  *(_DWORD *)(v1 - 0x48247A308694277ALL) = a1 + 1;
}

void sub_1AC1A099C(uint64_t a1)
{
  unint64_t v2;
  void (*v3)(char *, void (*)());
  _BYTE v4[8];

  v2 = (unint64_t)&v4[qword_1EEC7B118 ^ qword_1EEC7B120];
  qword_1EEC7B120 = 56757557 * v2 + 0x76397192134B31D2;
  qword_1EEC7B118 = 56757557 * (v2 ^ 0x89C68E6DECB4CE2ELL);
  v3 = (void (*)(char *, void (*)()))*(&off_1E5B56B60
                                                + ((53
                                                                                 * ((qword_1EEC7B118 - (53 * v2 - 46)) ^ 0x2E)) ^ byte_1AC3BD300[byte_1AC3B9AB0[(53 * ((qword_1EEC7B118 - (53 * v2 - 46)) ^ 0x2E))] ^ 0xF3])
                                                + 11);
  LOBYTE(v2) = 53 * ((53 * v2 - 46) ^ 0x2E ^ qword_1EEC7B118);
  v3((char *)*(&off_1E5B56B60 + (v2 ^ byte_1AC3BD200[byte_1AC3B99B0[v2] ^ 0x99]) - 54)- 12, sub_1AC1ADF34);
  __asm { BR              X10 }
}

uint64_t sub_1AC1A0AC0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 648) - 4) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((32 * v2) | (v2 << 9) | 0x157u)) - 4))();
}

uint64_t sub_1AC1A0AFC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 - 686)))(v1);
}

void sub_1AC1A0B18(uint64_t a1)
{
  int v1;

  v1 = 1224239923 * (((a1 | 0xC16B5AED) - (a1 & 0xC16B5AED)) ^ 0x33D8A73A);
  __asm { BR              X14 }
}

uint64_t sub_1AC1A0BD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v7;
  uint64_t v8;
  int v9;

  v5 = 1178560073 * ((((2 * &v7) | 0x86FADB5C) - &v7 - 1132293550) ^ 0x716B6DEE);
  v9 = v5 - v2 - ((689740942 - v4) & 0x78D97DBC) - 1862595996 + v3;
  v8 = v1;
  v7 = v3 - v5 - 465;
  return ((uint64_t (*)(int *))(*(_QWORD *)(a1 + 8 * (v3 - 563)) - 8))(&v7);
}

void sub_1AC1A0D3C(_DWORD *a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  _QWORD v9[3];
  unsigned int v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  unint64_t *v18;
  int32x4_t v19;
  int32x4_t v20;
  unsigned int v21;
  uint64_t v22;
  int32x4_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  uint64_t v39;
  _DWORD v40[4];
  unint64_t *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = a1[7] + 3804331 * ((((2 * (_DWORD)a1) | 0x5B2BA828) - (_DWORD)a1 - 764793876) ^ 0xD70B2742);
  v32 = a1[8] ^ (3804331 * ((((2 * (_DWORD)a1) | 0x5B2BA828) - (_DWORD)a1 - 764793876) ^ 0xD70B2742));
  v3 = 628203409 * ((v40 & 0x191DCCAC | ~(v40 | 0x191DCCAC)) ^ 0x646A3F60);
  v4 = a1[2];
  v13 = 3804331
      * ((((2 * (_QWORD)a1) | 0xC140CD485B2BA828) - (_QWORD)a1 + 0x1F5F995BD26A2BECLL) ^ 0x892B1DF1D70B2742);
  v5 = v4 + 3804331 * ((((2 * (_DWORD)a1) | 0x5B2BA828) - (_DWORD)a1 - 764793876) ^ 0xD70B2742);
  v40[0] = v2 + v3 - 1882357543;
  v40[2] = v3 + 1252841699;
  v18 = &STACK[0x5800F43E2BD23C78];
  v41 = &STACK[0x5800F43E2BD23C78];
  sub_1AC196A60((uint64_t)v40);
  v6 = a1;
  v7 = (uint64_t)*(&off_1E5B56B60 + (int)(v2 ^ 0x35));
  v30 = v5 - 1390276696;
  v29 = (v2 + 1117) ^ 0x23F7110E;
  v12 = v5 + 1546287817;
  v15 = v5 - 1693894127;
  v14 = v5 - 786919103;
  v26 = &v39;
  v9[2] = (char *)&v9[-127237087] + 5;
  v9[1] = &STACK[0x3CABE14C];
  v16 = (v2 + 171865282) & 0xF5C18BEF;
  v11 = v2 + 633431980;
  v24 = v2 + 940160928;
  v21 = ((v2 + 940160927) & 0xC7F64ABB) + 1623056453;
  v23 = vdupq_n_s32(0x6B1FA4C9u);
  v28 = 603395490;
  v33 = (v2 - 1269733720) & 0x4BAE9B9E;
  v19 = vdupq_n_s32(0x6B1FA4D9u);
  v20 = vdupq_n_s32(0x6B1FA4DBu);
  v10 = v2 + 2018965412;
  v31 = v2 + 2018965412;
  v22 = v31;
  v17 = v6;
  v25 = v2;
  v27 = *((_QWORD *)v6 + 2);
  v8 = v32 - ((2 * v32 + 67064728) & 0x316E9FBE) + 1521940907;
  v34 = (HIBYTE(v8) ^ (v2 + 73)) - 2 * ((HIBYTE(v8) ^ (v2 + 73)) & (((v2 + 17) | 0x11) ^ 0x3A) ^ HIBYTE(v8) & 1) + 74;
  v35 = (BYTE2(v8) ^ 0xB7) - ((2 * (BYTE2(v8) ^ 0xB7)) & 0x94) + 74;
  v36 = (BYTE1(v8) ^ 0x4F) - ((2 * (BYTE1(v8) ^ 0x4F)) & 0x94) + 74;
  v37 = (v32 - ((2 * v32 - 104) & 0xBE) - 85) ^ 0x95;
  __asm { BR              X14 }
}

uint64_t sub_1AC1A11B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,char a43)
{
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;

  v47 = (v43 + 31) | 4;
  *(_BYTE *)(a4 + (v44 + v47 - 149)) = a43;
  *(_BYTE *)(a4 + (a9 - 805678351)) = *(_BYTE *)(v46 + 1);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 + 8 * ((v47 + 220) ^ v47)) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12);
}

uint64_t sub_1AC1A1238@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(a1 + ((v3 - 1704549045) & 0x65995A6F ^ (v5 - 52)) + a2) = *(_BYTE *)(v7
                                                                                              + (v4 - 1180739295));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (v3 ^ (1327 * ((v2 + 1102) < 4)))) - 8))();
}

uint64_t sub_1AC1A1298@<X0>(uint64_t a1@<X3>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t), uint64_t a14)
{
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  *(_BYTE *)(a1 + (v16 + a2 + 2)) = *(_BYTE *)(v17 + (v15 ^ 0xB99F596D) + v14);
  v19 = 3804331 * ((((2 * (v18 - 168)) | 0x6F9E3C84) - (v18 - 168) + 1211163070) ^ 0x4D51ED14);
  *(_QWORD *)(v18 - 160) = a14;
  *(_DWORD *)(v18 - 168) = v19 + v15 + 1601;
  *(_DWORD *)(v18 - 164) = v19 ^ 0x47ED973F;
  v20 = sub_1AC18A930(v18 - 168);
  return a13(v20);
}

uint64_t sub_1AC1A1328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58)
{
  uint64_t v58;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 + 8 * ((1347 * (a14 + ((a18 - 135) & (2 * a58) ^ 0x6A) + (a58 & 0x3F ^ 0x2D007ECAu) < 0xFFFFFFC0)) ^ (a33 + 114))) - 8))(a1, 4136038050, a3, &a49, 148, 932, 1633, a35);
}

uint64_t sub_1AC1A13D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;

  v33 = v31 - 755007228;
  if (v33 <= 0x40)
    v34 = 64;
  else
    v34 = v33;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 + 8 * (HIDWORD(a16) ^ (593 * ((755007228 - v29 - v30 + v34) > 0xE)))) - (((13 * (HIDWORD(a16) ^ 0x182) - 1683) | 0x181u) ^ 0x19DLL)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29);
}

uint64_t sub_1AC1A1468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  _BOOL4 v36;

  v34 = v30 + v29 - 755007228;
  if (v34 <= 0x40)
    v35 = 64;
  else
    v35 = v34;
  v36 = __CFADD__(v34 - 1, v32 + v35);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 + 8 * (((((2 * v31) ^ 0xB88) - 1713) * v36) ^ v31)) - ((v31 - 1298) ^ 0x199)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29);
}

uint64_t sub_1AC1A14CC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int8x16_t *a7@<X7>, int a8@<W8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;

  *(int8x16_t *)(a3 + a8 + v31 + ((v29 - 1666) | 0x81u)) = vaddq_s8(vsubq_s8(*a7, vandq_s8(vaddq_s8(*a7, *a7), v33)), v34);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int8x16_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 + 8 * ((457 * (((v30 + 1) & 0x1FFFFFFF0) == 16)) ^ v29)) - 4))(457, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29);
}

void sub_1AC1A153C()
{
  JUMPOUT(0x1AC1A14F4);
}

uint64_t sub_1AC1A1548(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,char a42)
{
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;

  v47 = v42 + a1;
  if (v47 <= 0x40)
    v47 = 64;
  return ((uint64_t (*)(uint64_t, uint64_t, char *))(*(_QWORD *)(v46
                                                                       + 8
                                                                       * ((57
                                                                         * ((((a3 - 660) ^ (v45 - v43 - v44 + v47 < 0xF)) & 1) == 0)) ^ (a3 - 660)))
                                                           - 12))(3489288944, 4136038050, &a42);
}

uint64_t sub_1AC1A15D0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _BOOL4 v7;

  v5 = v2 + v1 - 2055728631;
  if (v5 <= 0x40)
    v6 = 64;
  else
    v6 = v5;
  v7 = __CFADD__(v5 - 1, v3 + v6);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((((v0 + 14) ^ v7) & 1) == 0) | (4 * ((((v0 + 14) ^ v7) & 1) == 0)) | v0))
                            - 12))();
}

uint64_t sub_1AC1A162C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,arg36_1AC1A162C a36)
{
  int v36;
  uint64_t v37;
  uint64_t v38;

  *(_OWORD *)(a2 + (((v36 + 700) ^ 0xFFFFFB2BLL) & (a3 + a1))) = *(_OWORD *)&a36.arr[4];
  return (*(uint64_t (**)(void))(v38 + 8 * ((755 * (((v37 + 1) & 0x1FFFFFFF0) == 16)) ^ (v36 + 700))))();
}

void sub_1AC1A168C()
{
  JUMPOUT(0x1AC1A1658);
}

uint64_t sub_1AC1A1698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,char a42)
{
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;

  return ((uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 + 8 * (((((v44 ^ 0x36) - 481) ^ 0x26) * (v42 == v43)) ^ v44)) - 12))(a1, a2, &a42, a4, a5, a6, a7, -1180739297);
}

uint64_t sub_1AC1A16E8@<X0>(int a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X7>, int a5@<W8>)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  *(_BYTE *)(a3 + (a5 + a1)) = *(_BYTE *)(v6 + a2 + a4);
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((((a5 + v7) > 0x3F) * v9) ^ v5)) - 12))();
}

uint64_t sub_1AC1A172C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,int a55,int a56,int a57,int a58,int a59,int a60,int a61,int a62,unsigned __int8 a63)
{
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  _BOOL4 v72;
  BOOL v75;
  uint64_t (*v76)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v76 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 8 * v63);
  v70 = a63 ^ 0x56u;
  if ((_DWORD)v70 == 2)
  {
    v75 = (unint64_t)&a46 + 4 < a32 && v67 < (unint64_t)&a55;
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v65
                                                        + 8
                                                        * ((((v75 ^ BYTE4(a30)) & 1) * (((v69 + 475) | 0x80) ^ 0x9F)) ^ (v69 + 1100)))
                                            - 12))(671088640);
  }
  else if ((_DWORD)v70 == 1)
  {
    v72 = (unint64_t)&a46 + 4 >= a32 || v67 >= (unint64_t)&a55;
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v65 + 8 * (((v69 + 5) * v72) ^ (v69 + 583))) - a39 + 654))(143612842);
  }
  else
  {
    a57 = 2 * (a57 ^ v66) + v66 - (v68 & (4 * (a57 ^ v66)));
    a58 = 2 * (a58 ^ v66) + v66 - (v68 & (4 * (a58 ^ v66)));
    a59 = 2 * (a59 ^ v66) + v66 - (v68 & (4 * (a59 ^ v66)));
    a60 = 2 * (a60 ^ v66) + v66 - (v68 & (4 * (a60 ^ v66)));
    LODWORD(a36) = a63 ^ 0x56;
    return v76(v70, a2, (char *)&a46 + 4, a4, a5, a6, a7, a33, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             v64,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             v76,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48);
  }
}

uint64_t sub_1AC1A25B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,unsigned int a35,unsigned int a36,unsigned int a37,uint64_t a38,int a39)
{
  uint64_t v39;
  int v40;
  _BOOL4 v41;

  if (a37 < a36 != a39 + 444466308 < a35)
    v41 = a39 + 444466308 < a35;
  else
    v41 = a39 + 444466308 > a37;
  return ((uint64_t (*)(void))(*(_QWORD *)(v39 + 8 * ((!v41 * (v40 - 76)) ^ (v40 + 114)))
                            - ((v40 + 312) ^ 0x18FLL)))();
}

uint64_t sub_1AC1A2634(uint64_t a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (int)((((v3 + 629584500) & 0xDA794DF7 ^ 0x187)
                                               * (v2 + a2 + 63 < (v2 + a2))) ^ v3))
                            - (v3 ^ 0x1C8u)
                            + 75))();
}

uint64_t sub_1AC1A2688(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, int a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  *(_BYTE *)(a4 + v9) = *(_BYTE *)(a8 + (v8 + a2))
                      - ((*(_BYTE *)(a8 + (v8 + a2)) << ((v10 + 38) ^ 0x18)) & a5)
                      + 74;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * (((v9 == 63) * a6) ^ v10)) - 4))();
}

uint64_t sub_1AC1A26D4(uint64_t a1, int a2, uint64_t a3, int8x16_t *a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;

  *a4 = vaddq_s8(vsubq_s8(*(int8x16_t *)(a8 + (v8 + a2)), vandq_s8(vaddq_s8(*(int8x16_t *)(a8 + (v8 + a2)), *(int8x16_t *)(a8 + (v8 + a2))), v11)), v12);
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * (((v9 != 127) * a7) ^ (v9 + 520))) - 4))();
}

uint64_t sub_1AC1A272C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26)
{
  uint64_t v26;
  int v27;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26
                                                                       + 8
                                                                       * ((91
                                                                         * ((a26 - 1180739238) < 0xFFFFFFFB)) ^ (v27 + 1120))))(a1, a2, a3, a4);
}

void sub_1AC1A27A0()
{
  JUMPOUT(0x1AC1A1834);
}

uint64_t sub_1AC1A27C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  int v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;

  v19 = a16 < 0x11DE400B;
  if (v19 == v16 + 140848813 < (v17 ^ 0x2E0u) + 299777968)
    v19 = v16 + 140848813 < a16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v18 + 8 * ((112 * v19) ^ v17)) - 4))();
}

uint64_t sub_1AC1A2830@<X0>(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X7>, int a7@<W8>)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _BOOL4 v12;
  unsigned int v13;
  int v14;
  _BOOL4 v15;

  v12 = a3 < v10;
  *(_BYTE *)(a4 + (a7 + v9)) = *(_BYTE *)(a6 + (v7 + a2))
                                           - (a5 & (2 * *(_BYTE *)(a6 + (v7 + a2))))
                                           + 74;
  v13 = v8 - 608 + a1 + v7;
  v14 = v12 ^ (v13 < v10);
  v15 = v13 < a3;
  if (!v14)
    v12 = v15;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((112 * v12) ^ v8)) - 4))();
}

uint64_t sub_1AC1A289C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;

  v60 = 3804331 * ((((v59 - 168) | 0x8871EB15) - (v59 - 168) + ((v59 - 168) & 0x778E14E8)) ^ 0x72EF1843);
  *(_DWORD *)(v59 - 168) = v60 + v58 + 1589;
  *(_DWORD *)(v59 - 164) = v60 ^ a16;
  *(_QWORD *)(v59 - 160) = a21;
  v61 = sub_1AC18A930(v59 - 168);
  v62 = a57 & 0x3F;
  *(&a48 + (v62 ^ 0x37)) = -54;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v57
                                                               + 8
                                                               * ((1218
                                                                 * ((v62 ^ 0x37) > 289 * (v58 ^ 0x59u)
                                                                                               - 523)) ^ v58))
                                                   - (((v58 ^ 0x59u) + 77) ^ 0x4BLL)))(v61, 4136038050);
}

uint64_t sub_1AC1A29A0@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v1 | (8 * (a1 == 63)) | (16 * (a1 == 63))))
                            - (v1 + 1142)
                            - ((v1 - 1380608323) & 0x524A675B)
                            + 1803))();
}

uint64_t sub_1AC1A29F0()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((112 * ((v0 ^ 8u) >= ((v1 - 379) ^ 0x535u))) ^ v1)) - 4))();
}

uint64_t sub_1AC1A2A30@<X0>(unsigned int a1@<W8>, uint64_t a2, uint64_t a3)
{
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a3 + a1 + ((301 * (v4 ^ 0x53Fu)) ^ (unint64_t)(v5 - 550))) = v7;
  return (*(uint64_t (**)(void))(v6 + 8 * ((853 * ((v3 & 0x38) == 8)) ^ v4)))();
}

void sub_1AC1A2A7C()
{
  JUMPOUT(0x1AC1A2A44);
}

uint64_t sub_1AC1A2A88()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (((16 * ((v0 - 1017896991) < 0x38)) | (((v0 - 1017896991) < 0x38) << 6)) ^ (v2 + 1517)))
                            - ((v2 + 1450903376) & 0xA984FCFF)
                            + 1179))();
}

uint64_t sub_1AC1A2AE4@<X0>(unsigned int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v4 = ((a1 + 1579041472) & 0xA1E1B8EF ^ (unint64_t)(v2 - 52)) + v1;
  if (v4 <= 0x38)
    v4 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((385 * (v4 - v1 + 1017896991 >= (a1 ^ 0x497uLL))) ^ a1)) - 4))();
}

uint64_t sub_1AC1A2B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(a11 + v12) = v15;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14
                                        + 8
                                        * ((((((v13 - 1117241270) & 0x4297BF9D ^ 0xFFFFFFFFFFFFFE65) & v11) != 8)
                                          * (((v13 - 1117241270) & 0x4297BF9D ^ 0x502) - 1143)) ^ (v13 - 1117241270) & 0x4297BF9D))
                            - 4))();
}

uint64_t sub_1AC1A2BC4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + v4) = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((v2 != v4) * v3) ^ v0)) - 4))();
}

uint64_t sub_1AC1A2BE8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v2 ^ (675 * (v0 == v1))))
                            - ((v2 + 1030546240) & 0xC293186F)
                            + 75))();
}

uint64_t sub_1AC1A2C38@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(a1 + a2 + v3) = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((unint64_t)(a2 + 1 + v3) < 0x38) * v5) ^ (v2 + 1517)))
                            - 4))();
}

void sub_1AC1A2C68()
{
  JUMPOUT(0x1AC1A1830);
}

uint64_t sub_1AC1A2EA8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1227 * (v1 != v0)) ^ v2))
                            - ((v2 - 1681885019) & 0x643F855B ^ 0x53)))();
}

uint64_t sub_1AC1A2EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  *(_BYTE *)(a4 + v4 + v8) = v9;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * (((v4 + v8 + (unint64_t)(v5 ^ v6) - 90 < 0x40) * v7) ^ (v5 + 523)))
                            - 8))();
}

void sub_1AC1A2F34()
{
  JUMPOUT(0x1AC1A182CLL);
}

uint64_t sub_1AC1A2F58()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((708 * (v1 + v0 - 35 + 986 < (((v0 - 84) | 0xF) ^ 0x4Bu))) ^ v0))
                            - 8))();
}

uint64_t sub_1AC1A2F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  int v38;
  uint64_t v39;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 + 8 * (a9 ^ (229 * ((v38 & 0xFFFFFFFC) != 1180739296)))) - ((a9 - 34) ^ 0x47)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38);
}

void sub_1AC1A2FDC()
{
  JUMPOUT(0x1AC1A11ECLL);
}

uint64_t sub_1AC1A2FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,int a61)
{
  uint64_t v61;
  int v62;
  uint64_t v64;
  unint64_t v65;

  if (a36 == 2)
    return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v61
                                                                 + 8
                                                                 * (((a61 == 849733684) | (32 * (a61 == 849733684))) ^ (v62 + 376)))
                                                     - (v62 ^ 0x188u)
                                                     + 443))(a1, a18);
  if (a36 == 1)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61
                                                                          + 8
                                                                          * ((1939
                                                                            * (((a61 == 849733684) ^ ((v62 ^ 0xA9) + 1)) & 1)) ^ (v62 + 407)))
                                                              - 12))(a1, a2, a18);
  v64 = (v62 + 215) | 0x4D8u;
  v65 = ((v64 + 0x6FFC9FF69BE723FCLL) ^ (unint64_t)&a40)
      + ((2 * (_QWORD)&a40) & 0xDFF93FED37CE53F0)
      - 0x2F0080840961FFFALL;
  a60 = (v65 ^ 0xBA) * (v65 + 17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61
                                                              + 8
                                                              * (int)((963 * ((((_DWORD)v64 - 1526) | 0x12) != 117)) ^ v64)))(a1, a2, a18);
}

void sub_1AC1A3320()
{
  JUMPOUT(0x1AC1A32F8);
}

uint64_t sub_1AC1A332C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,int a44,char a45)
{
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;

  v49 = *a17;
  memset((void *)(v48 - 184), 74, 16);
  v50 = 235795823 * ((v48 - 168) ^ 0x94AD4959);
  *(_DWORD *)(v48 - 160) = v50 + 1903733929;
  *(_QWORD *)(v48 - 168) = &a45;
  *(_DWORD *)(v48 - 132) = (v46 + 1743) ^ v50;
  *(_QWORD *)(v48 - 152) = &a42;
  *(_QWORD *)(v48 - 144) = v49;
  *(_QWORD *)(v48 - 128) = v48 + 0x4BBB3C48FF632A78;
  v51 = ((uint64_t (*)(uint64_t))*(&off_1E5B56B60 + (v46 ^ 0xAC)))(v48 - 168);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v45
                                                      + 8
                                                      * (((*(_DWORD *)(v48 - 136) == v47)
                                                        * (((v46 + 53) ^ 0x53) + (v46 ^ 0x700))) ^ v46))
                                          - 4))(v51);
}

uint64_t sub_1AC1A3424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BOOL4 v9;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 40) + v0 - 0x6A7061692F7B7EB4)
     - *(unsigned __int8 *)(v5 + v0 - 0x6A7061692F7B7EB4);
  v7 = v0 + 1;
  v9 = ((v4 - 1739) ^ 0xF92FFFE6 ^ v6) + 1876033527 + ((2 * v6) & 0xF25FFF52) == 1761738656 && v7 != v2 + 16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((54 * v9) ^ v4)) - 4))();
}

uint64_t sub_1AC1A34AC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;

  v4 = 1178560073
     * (((~(v3 - 168) | 0x312ACB43FB8FA2DCLL) + ((v3 - 168) | 0xCED534BC04705D23)) ^ 0xF36C37FC36665D62);
  *(_QWORD *)(v3 - 152) = v1 - v4;
  v5 = (a1 - 339835998) ^ v4;
  *(_DWORD *)(v3 - 136) = v5;
  *(_DWORD *)(v3 - 132) = v5 ^ 0x4C;
  *(_QWORD *)(v3 - 168) = v4 ^ 0x6901FFA0;
  *(_DWORD *)(v3 - 160) = v4 + a1 - 339835998 - 6;
  *(_DWORD *)(v3 - 156) = -1178560073 * (((~(v3 - 168) | 0xFB8FA2DC) + ((v3 - 168) | 0x4705D23)) ^ 0x36665D62);
  *(_DWORD *)(v3 - 144) = (a1 - 1501685923) ^ v4;
  v6 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E5B56B60 + a1 + 79) - 8))(v3 - 168);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * *(int *)(v3 - 140)) - 4))(v6);
}

void sub_1AC1A358C()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 12) = 1797235913;
}

void sub_1AC1A35D8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_1AC1A3630(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((902 * (**(_BYTE **)(a2 + 8) == 0)) ^ 0x181u))
                            - ((v3 + 16) ^ 0xFFB105C0)))();
}

uint64_t sub_1AC1A367C()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  int v4;

  v3 = v2 + 782;
  v4 = v1 - ((2 * v1 + 994954362) & 0x78C03262) + (((v3 ^ 0x29B) - 1171) ^ 0x1A06FEEF);
  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((60
                                          * (((2 * v4) & 0x7FDFFEF2 ^ 0x78C03262) + (v4 ^ 0x38FE648) - 704648192 != 368044921)) ^ v3))
                            - 4))();
}

uint64_t sub_1AC1A370C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;

  return (*(uint64_t (**)(void))(v4 + 8 * (((a4 + a3 - 1072693113 < ((v5 - 532) ^ 0x408u)) * (v5 - 1523)) | v5)))();
}

uint64_t sub_1AC1A3764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * ((((37 * (a6 ^ 0x42B)) ^ 0x671) * ((unint64_t)(v8 - a7 - 1167) > 0x1F)) ^ a6))
                            - 8))();
}

uint64_t sub_1AC1A37A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  unsigned int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * (int)((((a8 - 4198975) & 0xFFF117D3 ^ 0xFFB1062D) * (v9 < 0x20)) ^ (a8 + 1492)))
                            - (a8 + 439)
                            + 474))();
}

uint64_t sub_1AC1A37F4(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v10 = a4 + a3 + a5;
  v11 = v6 + v10;
  v12 = *(_OWORD *)(v11 - 31);
  v13 = v7 + v10;
  *(_OWORD *)(v13 - 15) = *(_OWORD *)(v11 - 15);
  *(_OWORD *)(v13 - 31) = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((((v8 & 0xFFFFFFE0) == 32) * (((v9 + 5175880) | 0x223) - 12)) ^ (v9 + 5177013)))
                            - 8))();
}

void sub_1AC1A3854()
{
  JUMPOUT(0x1AC1A3818);
}

uint64_t sub_1AC1A3860(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 1424) = v2 - 547396640 + ((v3 + 522257023) | 0xE09001C0);
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 520) = *(_QWORD *)(a2 + 8) + 1;
  return 0;
}

void sub_1AC1A3A30(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 24) - 460628867 * (((a1 | 0x4A5B5FFB) - (a1 & 0x4A5B5FFB)) ^ 0x6CDDD86);
  v3 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 - 0x48247A308694277ALL) - 1468695530 >= 0)
    v4 = *(_DWORD *)(*(_QWORD *)a1 - 0x48247A308694277ALL) - 1468695530;
  else
    v4 = 1468695530 - *(_DWORD *)(*(_QWORD *)a1 - 0x48247A308694277ALL);
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 - 0x48247A308694277ALL) - 1468695530 >= 0)
    v5 = *(_DWORD *)(v2 - 0x48247A308694277ALL) - 1468695530;
  else
    v5 = 1468695530 - *(_DWORD *)(v2 - 0x48247A308694277ALL);
  v7 = v1 + 535753261 * ((((2 * &v7) | 0xAFB699A2) - &v7 - 1473989841) ^ 0x5D2F42FE) - 629;
  v8 = v3;
  sub_1AC196FB4((uint64_t)&v7);
  if (v4 >= v5)
    v6 = v5;
  else
    v6 = v4;
  __asm { BR              X15 }
}

uint64_t sub_1AC1A3BB0()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  _BOOL4 v4;

  v4 = v2 - 364192860 < (int)(v3 + 1632572761);
  if (v3 > 0x1EB0EAA6 != v2 - 364192860 < v1 - 514911335)
    v4 = v3 > 0x1EB0EAA6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((v4 * ((23 * (v1 ^ 0x1F5)) ^ 0x1F0)) ^ v1)) - 12))();
}

uint64_t sub_1AC1A3C2C@<X0>(int a1@<W1>, int a2@<W6>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  int v20;
  _BOOL4 v21;

  v15 = a1 - 699;
  v16 = a1 - 771;
  v17 = v14 > v7;
  v18 = 4 * (v11 + v8);
  v19 = ((v15 | 0x20) ^ (v12 - 536)) + v4 + (*(_DWORD *)(*(_QWORD *)(v10 - 0x48247A3086942776) + v18) ^ v13);
  *(_DWORD *)(*(_QWORD *)(a3 - 0x48247A3086942776) + v18) = v19 + v13 - (v9 & (2 * v19));
  LODWORD(v18) = v11 + 1 + v5;
  v20 = v17 ^ ((int)v18 < a2 + 552);
  v21 = (int)v18 < v6;
  if (!v20)
    v17 = v21;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((14 * v17) ^ v16)) - 12))();
}

uint64_t sub_1AC1A3D0C()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  _BOOL4 v4;

  v4 = v2 - 532252458 < (int)(v3 + 1464513163);
  if (v3 > 0x28B54D74 != v2 - 532252458 < (int)(((v1 - 488) | 0x520) ^ 0xD74AB7EB))
    v4 = v3 > 0x28B54D74;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((1702 * v4) ^ v1)) - 4))();
}

uint64_t sub_1AC1A3D88@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  int v20;
  _BOOL4 v21;

  v16 = v7 - 14;
  v17 = v15 > v9;
  v18 = 4 * (v12 + v10);
  v19 = v4 + v13 + (*(_DWORD *)(*(_QWORD *)(a3 - 0x48247A3086942776) + v18) ^ v14);
  *(_DWORD *)(*(_QWORD *)(a1 - 0x48247A3086942776) + v18) = v19 + v14 - (v11 & (2 * v19));
  v20 = v12 + 1 + v5;
  LODWORD(v18) = v17 ^ (v20 < v6);
  v21 = v20 < v8;
  if (!(_DWORD)v18)
    v17 = v21;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((50 * !v17) ^ v16)) - 4))();
}

uint64_t sub_1AC1A3E6C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((14 * (((v2 ^ (v1 == 0x5C37298372F6318ELL)) & 1) == 0)) ^ v2))
                            - 8))();
}

void sub_1AC1A3EA8(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  *(_DWORD *)(*(_QWORD *)(a1 - 0x48247A3086942776) + 4 * (v6 + v4)) = v2 - ((2 * v2 + 437492964) & v5) + 496556261;
  *(_DWORD *)(a1 - 0x48247A308694277ALL) = (((((v3 - 1615206273) & 0x604616E3 ^ 0x4C2) + v6 + v4) * (v1 - 149885707)) ^ 0x57FBBFEA)
                                         - 7420928
                                         + ((2 * (((v3 - 1615206273) & 0x604616E3 ^ 0x4C2) + v6 + v4) * (v1 - 149885707)) & 0xAFF77FD4);
}

void sub_1AC1A40A0(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_1AC1A40E0()
{
  return 4294925273;
}

void sub_1AC1A415C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  _BOOL4 v4;

  v1 = 235795823 * (((a1 | 0xDF39865F) - a1 + (a1 & 0x20C679A0)) ^ 0x4B94CF06);
  v2 = *(_DWORD *)(a1 + 24) - v1;
  v3 = *(_DWORD *)(a1 + 8) + v1;
  v4 = (v3 & 0x30000000) == 0x20000000;
  if ((v3 & 0x3F000000) == 0)
    v4 = 1;
  __asm { BR              X11 }
}

uint64_t sub_1AC1A4230@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, int a4, unint64_t *a5, char a6, unsigned int a7, unint64_t *a8, unint64_t *a9, int a10, uint64_t a11)
{
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v15 = *v12;
  v16 = 1374699841 * ((-2 - ((~&a4 | 0x67E19C01) + (&a4 | 0x981E63FE))) ^ 0xA158408);
  a7 = (v11 ^ 0x35608F76) + ((2 * v11) & 0xE82DF7E4 ^ 0x802CE100) - v16 + 2147306878;
  a6 = v16 + 121;
  a10 = v14 - v16 + 1172344942;
  a5 = &STACK[0x2DEB3A05C2E48BC0];
  a11 = v15;
  a8 = &STACK[0x79D937EF4F9B0BFA];
  a9 = &STACK[0x20D1CC090DE78D6D];
  v17 = (*(uint64_t (**)(int *))(a1 + 8 * (int)(v14 & 0xA3D7DA16)))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v13 + 8 * (((a4 == 1797235913) * (v14 + 276)) ^ v14)) - 12))(v17);
}

uint64_t sub_1AC1A4364()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((((v1 - 157) ^ 0x414 ^ (v1 - 2070288962) & 0x7B661F75) * (v2 == 0)) ^ (v1 - 283)))
                            - 4))();
}

uint64_t sub_1AC1A43AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  unsigned int v10;
  uint64_t v11;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v11 + 8 * ((107 * (a10 + 4 >= a10)) ^ v10)) - 4))(a1);
}

uint64_t sub_1AC1A4414()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((((v0 - 210) | 0x150) ^ 0x245) * (v1 != 0xEFE8C7D4)) ^ v0)) - 4))();
}

uint64_t sub_1AC1A4464@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _BOOL4 v8;
  unsigned int v9;
  int v10;
  _BOOL4 v11;

  v8 = v4 > 0xD6317321;
  *(_BYTE *)(a1 + (v6 - 124387817)) = *(_BYTE *)(v1 + (v6 - 124387817));
  v9 = ((v2 - 217413468) & 0xCF577D9 ^ 0x22648BA6) + v6;
  v10 = v8 ^ (v9 < v3);
  v11 = v9 < v5;
  if (!v10)
    v8 = v11;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((789 * v8) ^ v2)) - 4))();
}

uint64_t sub_1AC1A44E8()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((51
                                          * (((v1 << (((v0 + 31) | 0x10) - 79)) & 0x3EB6DAF6 ^ 0x1E908AA0)
                                           + (v1 ^ 0xF0B3AAAF)
                                           + v0
                                           - 419
                                           - 269165990 != 256920915)) ^ (v0 - 1615)))
                            - 4))();
}

uint64_t sub_1AC1A4560()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((242 * (v1 + v0 + ((v2 - 1890075535) & 0x70A83FFDu) - 526085992 > 0xB)) ^ v2))
                            - 12))();
}

uint64_t sub_1AC1A45B8(int a1, int a2)
{
  char v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((55
                                          * ((((((v3 - 699) ^ 0x3C9) + 227) ^ 0xFFFFFE11) & (a1 + a2 - (v2 & 3) + 489)) > a1 + a2 + 492)) ^ (v3 - 699)))
                            - 12))();
}

uint64_t sub_1AC1A4610@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)(a1 - 3 + (v2 + v3 + 1406)) = *(_DWORD *)(v1 - 3 + (v2 + v3 + 1406));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((230 * ((((v5 + 913) ^ (v4 == 4)) & 1) == 0)) ^ (v5 - 138))) - 8))();
}

uint64_t sub_1AC1A466C@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>, uint8x8_t a3@<D0>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  a3.i32[0] = *(_DWORD *)(a2 + a1 + 1);
  *(_DWORD *)(a2 - 3 + v5 + v3 + ((v4 - 1812658955) & 0x6C0AFF7Eu)) = vmovn_s16((int16x8_t)vmovl_u8(a3)).u32[0];
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((105 * (v6 == 4)) ^ v4)) - 8))();
}

uint64_t sub_1AC1A46D4(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((((a1 - 1070) ^ 0xDF) + (a1 ^ 0x493)) * (v1 == v2)) ^ a1)) - 12))();
}

uint64_t sub_1AC1A4708@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = (v3 + v4 + v5 - 157 + 1070);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(v1 + v7);
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((453 * (v4 - 1 != v2)) ^ (v5 - 283))) - 4))();
}

uint64_t sub_1AC1A4748()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)((57 * (*(_QWORD *)(v1 + 16) != 0x13CB99128B0A4D7BLL)) ^ v0))
                            - (v0 ^ 0x154)))();
}

uint64_t sub_1AC1A478C@<X0>(uint64_t a1@<X8>, int a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(a1 - 0x13CB99128B0A4D7BLL) = a3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (((*(_QWORD *)(v4 + 32) == 0x252BBBF887A1D529) * ((v3 + 157) ^ 0x1EB)) ^ (v3 + 155)))
                            - ((v3 + 697466031) & 0xD66D83ED)
                            + 481))();
}

void sub_1AC1A4808(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 - 0x252BBBF887A1D529) = v2;
  *(_DWORD *)(v1 + 40) = 1797235913;
}

uint64_t sub_1AC1A48C0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  char v6;

  qword_1EEC7B128 = 56757557 * ((qword_1EEC7B128 - (_QWORD)&v6 + qword_1EEC7B118) ^ 0x89C68E6DECB4CE2ELL);
  qword_1EEC7B118 = qword_1EEC7B128;
  v2 = *(_DWORD *)(a2 + 4);
  v3 = (uint64_t)*(&off_1E5B56B60
                + ((53 * ((2 * qword_1EEC7B128) ^ 0x2E)) ^ byte_1AC3BD200[byte_1AC3B99B0[(53 * ((2 * qword_1EEC7B128) ^ 0x2E))] ^ 0xB0])
                + 115);
  if (v2 == 576264645)
    __asm { BR              X16 }
  if (v2 == 576264652)
  {
    v4 = **(unsigned __int8 **)(a2 + 8) - 9;
    __asm { BR              X1 }
  }
  return 4294925278;
}

uint64_t sub_1AC1A4FCC(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v1 = 1225351577 * ((-1431559688 - (a1 ^ 0x637B64C4 | 0xAAAC21F8) + (a1 ^ 0x637B64C4 | 0x5553DE07)) ^ 0x15B262D5);
  v2 = *(_DWORD *)(a1 + 4) ^ v1;
  v3 = *(_DWORD *)(a1 + 16) ^ v1;
  if (v3 < 0)
    v3 = -v3;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x48247A308694277ALL);
  v6 = v4 - 1468695530;
  v5 = v4 - 1468695530 < 0;
  v7 = 1468695530 - v4;
  if (!v5)
    v7 = v6;
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B56B60 + v2 - 1210)
                              + (((v3 >> 5 >= v7) * (((v2 - 308) | 0x152) ^ 0x534)) ^ v2))
                            - 8))();
}

_DWORD *sub_1AC1A50A8(_DWORD *result)
{
  *result = 1158179193;
  return result;
}

unsigned int *sub_1AC1A50B8@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  v5 = ((*(_DWORD *)(*(_QWORD *)(a2 - 0x48247A3086942776) + 4 * v3) ^ 0x908F0A73) >> v2) ^ 0x5DE4E331;
  v6 = (((((v4 - 34) | 4) + 392112) & (2 * v5)) - (v5 & 0x802301F7) + 1476159373) ^ v5 & 0x802301F6;
  *result = ((v6 & 0x85F12812 ^ 0x80210803) + (v6 & 0x1A0E17ED) - 1) ^ 0xD2D546F7;
  return result;
}

void sub_1AC1A5168(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1AC1A5210()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2 + 8 * (((*(_QWORD *)(v1 + 8) == 0) * ((v0 - 281) ^ 0x72A)) ^ v0)))();
}

uint64_t sub_1AC1A5278@<X0>(int a1@<W8>)
{
  uint64_t (*v1)(_QWORD *);
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  _QWORD v8[2];
  int v9;
  int v10;
  int v11;

  v6 = (v8 ^ 0x32160040) * a1;
  v11 = v2 - v6;
  v8[0] = v5;
  v8[1] = 0x12A1E18019D396D9;
  v9 = v6 ^ 0x17EF6F73;
  v10 = v6 + v3 + 426;
  result = v1(v8);
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(v5 - 0x685C86573AC75C47);
  return result;
}

void sub_1AC1A54FC(uint64_t a1)
{
  unint64_t v2;
  void (*v3)(char *, void (*)());
  char v4;

  v2 = (qword_1EEC7B118 + qword_1EEC7AF88) ^ (unint64_t)&v4;
  qword_1EEC7AF88 = 56757557 * v2 - 0x76397192134B31D2;
  qword_1EEC7B118 = 56757557 * (v2 ^ 0x89C68E6DECB4CE2ELL);
  v3 = (void (*)(char *, void (*)()))*(&off_1E5B56B60
                                                + ((53
                                                                                 * ((53 * v2 + 46) ^ 0x2E ^ qword_1EEC7B118)) ^ byte_1AC3B9BB0[byte_1AC3C4BD0[(53 * ((53 * v2 + 46) ^ 0x2E ^ qword_1EEC7B118))] ^ 0x15])
                                                + 88);
  LOBYTE(v2) = 53 * ((qword_1EEC7B118 - (53 * v2 + 46)) ^ 0x2E);
  v3((char *)*(&off_1E5B56B60 + (v2 ^ byte_1AC3C4CD0[byte_1AC3C12E0[v2] ^ 0x41]) - 131)- 12, sub_1AC1ADF34);
  __asm { BR              X9 }
}

uint64_t sub_1AC1A5614@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(void))(a1 + 8 * ((587 * (*(_QWORD *)(*(_QWORD *)(v1 + 648) - 4) != 0)) ^ 0xFAu)))();
}

uint64_t sub_1AC1A563C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(v1 + 1176))(v0);
}

void jumT7rcoieclCtxS2rgJ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X8 }
}

uint64_t sub_1AC1A56EC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  int v5;
  uint64_t v6;

  *a4 = 0;
  return (*(uint64_t (**)(void))(v6 + 8 * ((v5 + 1017210532) ^ (1763 * (a5 != 0)))))();
}

uint64_t sub_1AC1A5718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, int a20)
{
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;

  *a5 = 0;
  v23 = (v21 - 1451720250) & 0x9328E7C3;
  v24 = v20 + v21 + 742;
  a19 = v21
      + 1734042137 * ((2 * (&a19 & 0x45E37E58) - &a19 + 974946727) ^ 0x66D242EA)
      + 513002769;
  v25 = sub_1AC1ADE7C(&a19);
  return (*(uint64_t (**)(uint64_t))(a14 + 8 * ((37 * (a20 == v22 + v23 - 1475)) ^ v24)))(v25);
}

uint64_t sub_1AC1A57FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, int a20,unsigned int a21)
{
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  a21 = v21 - 460628867 * (((&a19 | 0xB65DA74D) + (~&a19 | 0x49A258B2)) ^ 0xFACB2531) - 961;
  a19 = &STACK[0xD7CDE9D8B19905B];
  sub_1AC1A886C((uint64_t)&a19);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a14 + 8 * ((644 * (a20 == ((v22 + (v21 ^ 0xE) - 1485) ^ 0xA84138F0))) ^ v21)))(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12);
}

uint64_t sub_1AC1A589C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21,uint64_t a22)
{
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v28 = (((&a19 ^ 0x227EE9EA) & 0x95A0AE03 | ~(&a19 ^ 0x227EE9EA | 0x95A0AE03)) ^ 0x14EF7B5B)
      * v27;
  LODWORD(a20) = v25 - v28 - 1008;
  a21 = v28 ^ (v23 - ((2 * v23) & 0xDEE8F856) - 277578709);
  a19 = a15;
  ((void (*)(uint64_t *))(*(_QWORD *)(v24 + 8 * (v25 - 1444)) - 8))(&a19);
  v29 = 628203409 * ((((2 * &a19) | 0xF1DB8CC) - &a19 + 2020680602) ^ 0x506D055);
  a20 = a13;
  a22 = a15;
  LODWORD(a19) = v25 - v29 - 902;
  a21 = (v22 ^ 0xF7BCBE77)
      + ((v25 - 1224) | 0x4BA)
      + v29
      + 2028952064
      + ((v22 << (25 * (v25 ^ 0xF6) + 62)) & 0xEF797CEE);
  v30 = (*(uint64_t (**)(uint64_t *))(v24 + 8 * (v25 ^ 0x5F9)))(&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a14 + 8 * (v25 | (2 * (HIDWORD(a19) == v26)))) - 4))(v30);
}

uint64_t sub_1AC1A5A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, int a20,uint64_t a21,unsigned int a22,unsigned int a23,unint64_t *a24)
{
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  v26 = 1759421093 * ((&a19 & 0xB88B6601 | ~(&a19 | 0xB88B6601)) ^ 0xF40929AA);
  a21 = a15;
  a24 = &STACK[0x3703560E774B8153];
  a22 = v26 ^ 0xDB3F037F;
  a23 = v26 + v24 - 2024874554;
  a19 = -512966209 - v26;
  v27 = sub_1AC1ADC5C((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a14
                                                      + 8
                                                      * ((114 * (((v24 + 36) ^ (a20 == v25)) & 1)) ^ v24))
                                          - 4))(v27);
}

uint64_t sub_1AC1A5AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, uint64_t a17, uint64_t a18, unsigned int a19, int a20,unint64_t *a21,unint64_t *a22,unint64_t *a23,unsigned int a24)
{
  int v24;
  uint64_t v25;
  uint64_t v26;

  a21 = a16;
  a22 = &STACK[0x7A2643E541D57A7C];
  a23 = &STACK[0x1706FB9DE6F6FCA4];
  a24 = (v24 - 1245) ^ (1225351577
                      * ((((&a19 | 0x2B2818A2) ^ 0xFFFFFFFE) - (~&a19 | 0xD4D7E75D)) ^ 0xF74D3F4B));
  ((void (*)(unsigned int *))(*(_QWORD *)(v25 + 8 * ((v24 + 291) ^ 0x67A)) - 8))(&a19);
  a21 = &STACK[0x70D8B5D370459CF4];
  a22 = a16;
  a19 = (v24 - 346) ^ (1374699841
                     * ((2 * (&a19 & 0x69BA0620) - &a19 - 1773798946) ^ 0xFBB1E1D7));
  ((void (*)(unsigned int *))(*(_QWORD *)(v25 + 8 * (v24 - 1440)) - 12))(&a19);
  a19 = v24 + 291 + 1225351577 * (&a19 ^ 0x239AD816) - 741;
  a21 = a16;
  v26 = sub_1AC16E07C((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a14
                                                      + 8
                                                      * (((a20 == 1797235913) * ((v24 - 439) ^ (v24 + 291) ^ 0x32B)) ^ (v24 + 291)))
                                          - 4))(v26);
}

uint64_t sub_1AC1A5C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  uint64_t v18;
  int v19;
  int v20;

  return ((uint64_t (*)(void))(*(_QWORD *)(v18 + 8 * (((((v19 - 1766) | 0x601) - 573) * (a18 != v20)) ^ (v19 - 289)))
                            - 12))();
}

uint64_t sub_1AC1A5C98@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  BOOL v13;
  char v15;

  if (a4)
    v13 = a10 == v12;
  else
    v13 = 1;
  v15 = v13 || a5 == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * ((((v11 ^ v15) & 1) * (((a1 - 961) | 0x4A6) ^ 0x660)) ^ a1))
                            - 12))();
}

uint64_t sub_1AC1A5CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;

  v18 = (*(uint64_t (**)(_QWORD, uint64_t))(v17 + 8 * (v15 ^ 0x6FC)))(v14 ^ v16, 921157844) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(a14
                                        + 8
                                        * ((((v15 ^ 0x2B ^ v18) & 1)
                                          * (((v15 - 608350439) & 0x2442AB3B) + 186)) ^ v15))
                            - 4))();
}

uint64_t sub_1AC1A5D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  unsigned int v17;
  int v18;
  unsigned int v19;

  v19 = (a17 ^ v18) + 201 * ((v17 + 133273182) & 0x780E6E67 ^ 0x608) - ((2 * (a17 ^ v18)) & 0xA8274732) - 736912248;
  return ((uint64_t (*)(void))(*(_QWORD *)(a8
                                        + 8
                                        * ((1653
                                          * (((2 * v19) & 0x77BF5D9C ^ 0x20274510) + (v19 ^ 0xEFCC0D57) - 1212490 != 1003302532)) ^ v17))
                            - 4))();
}

uint64_t sub_1AC1A5E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;

  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (v10 ^ (4
                                      * ((((v9 + v8 - 1004515022) < 8) ^ (v10 - 77 + v10)) & 1)))))();
}

uint64_t sub_1AC1A5E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * (int)((84 * (v8 - a1 < (v9 ^ 0x731uLL))) ^ v9 ^ 0x380))
                            - 19 * (v9 ^ 0x74D)
                            + 1740))();
}

uint64_t sub_1AC1A5E94(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * ((v8 > 0x1F) | (8 * (v8 > 0x1F)) | a3))
                            - ((a3 - 278923289) & 0xD3FE9D7D ^ 0xC35E9C31)))();
}

uint64_t sub_1AC1A5EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v17 = v14 + v13 + v15;
  v18 = v11 + v17;
  v19 = *(_OWORD *)(v18 - 31);
  v20 = a1 + v17;
  *(_OWORD *)(v20 - 15) = *(_OWORD *)(v18 - 15);
  *(_OWORD *)(v20 - 31) = v19;
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * ((7 * ((v12 & 0xFFFFFFE0) != 32)) ^ (a11 + v16 + 27)))
                            - (v16 + 1017211579)
                            + 1768))();
}

void sub_1AC1A5F50()
{
  JUMPOUT(0x1AC1A5F08);
}

uint64_t sub_1AC1A5F5C(uint64_t a1)
{
  int v1;
  int v2;
  void (*v3)(_BYTE *);
  int v4;
  int v5;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[4];
  unsigned int v12;
  uint64_t v13;

  *v7 = a1;
  *v8 = v2;
  v5 = 295 * (v1 ^ 0x604);
  v13 = v10;
  v12 = (v1 ^ 0x3CC) + (((v11 | 0x72FB31C9) + (~v11 | 0x8D04CE36)) ^ 0x780F3FE7) * v4 + 303;
  v3(v11);
  v13 = v9;
  v12 = v5 + (v11 ^ 0xAF40E2F) * v4 + 313;
  v3(v11);
  return 0;
}

void sub_1AC1A61C8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) - 1224239923 * (((a1 | 0xDD953B90) - (a1 & 0xDD953B90)) ^ 0x2F26C647);
  __asm { BR              X15 }
}

uint64_t sub_1AC1A62FC@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  _BOOL4 v18;

  v16 = v14 - 332945537;
  *(_DWORD *)(a11 + 4 * (v11 + a1)) = *(_DWORD *)(*(_QWORD *)(v13 - 0x48247A3086942776) + 4 * (v11 + a1));
  v18 = v11 - 2052336324 < 1814538111 && v11 - 2052336324 >= v16;
  return (*(uint64_t (**)(void))(v15 + 8 * ((821 * v18) ^ (v12 - 455))))();
}

uint64_t sub_1AC1A6380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v10;
  uint64_t (*v11)(_QWORD, uint64_t, uint64_t);

  v10 = v6 + 1392298169 > v7 + 964204288 || v6 + 1392298169 < a6 - 1183278339;
  v11 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v8 + 8 * ((2042 * v10) ^ v7));
  return v11(v11, a2, 2425293427);
}

uint64_t sub_1AC1A63E8@<X0>(int a1@<W2>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  _BOOL4 v21;

  *(_DWORD *)(a12 + 4 * (v12 + a2)) = a1;
  v19 = v14 + v12 + 1;
  v21 = v19 > v15 + 103 || v19 < v16;
  return (*(uint64_t (**)(void))(v18 + 8 * ((v21 * v17) ^ v13)))();
}

uint64_t sub_1AC1A6440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7
                                                                                          + 8
                                                                                          * (((((v6 - 2045499508) & 0x79EBDB4F)
                                                                                             - 620)
                                                                                            * (v5 == 0)) ^ v6))
                                                                              - 8))(a1, a2, a3, a4, a5);
}

uint64_t sub_1AC1A6484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, int a11, int a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v17 = 1224239923 * ((1269078856 - ((v16 - 128) | 0x4BA49B48) + ((v16 - 128) | 0xB45B64B7)) ^ 0x46E89960);
  *(_DWORD *)(v16 - 112) = (((a12 << 6) & 0xFB5EDC80) + ((32 * a12) ^ 0xFDAF6E4F) + 1457446904) ^ v17;
  *(_DWORD *)(v16 - 128) = v15 - v17 - 357;
  *(_QWORD *)(v16 - 120) = a14;
  sub_1AC1A0B18(v16 - 128);
  return (*(uint64_t (**)(void))(v14 + 8 * ((((*a10 - 1468695531) < 0x7FFFFFFF) * (v15 ^ 0x536)) ^ v15)))();
}

uint64_t sub_1AC1A6558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 - 128) = a14;
  *(_QWORD *)(v17 - 120) = &STACK[0x48247A30869427AE];
  *(_DWORD *)(v17 - 112) = (v16 - 776) ^ (1734042137
                                        * ((((v17 - 128) | 0x72BE3ED3) - ((v17 - 128) & 0x72BE3ED3)) ^ 0x2E70FD9E));
  sub_1AC16E3FC(v17 - 128);
  *(_QWORD *)(v17 - 120) = v15;
  *(_QWORD *)(v17 - 112) = a14;
  *(_DWORD *)(v17 - 128) = (v16 - 1025) ^ (1374699841
                                         * ((8117679 - ((v17 - 128) | 0x7BDDAF) + ((v17 - 128) | 0xFF842250)) ^ 0x92703A59));
  v18 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E5B56B60 + (v16 ^ 0x4CA)) - 12))(v17 - 128);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * (((*(_DWORD *)(v17 - 124) > 0x15526DB7u) * ((v16 - 422) ^ 0x300)) ^ v16)))(v18);
}

uint64_t sub_1AC1A6678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;

  v20 = v18 - 1468695537 + a18;
  v22 = v20 - 788;
  v21 = v20 - 788 < 0;
  v23 = 788 - v20;
  if (!v21)
    v23 = v22;
  return (*(uint64_t (**)(void))(v19
                              + 8
                              * ((1893
                                * ((int)((v23 ^ 0x77BAB3EB) - 540028929 + ((2 * v23) & 0xEF7567D6) - 1468695531) > (int)(((v18 + 310) | 0x286) ^ 0xFFFFF928))) ^ (v18 - 6))))();
}

uint64_t sub_1AC1A6708()
{
  int v0;
  uint64_t v1;
  unsigned int v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4 + 8 * ((14 * (*(_DWORD *)(v1 + 4 * v2) == v3)) ^ v0)))();
}

uint64_t sub_1AC1A6734(int a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8 * ((1893 * ((v3 ^ v4) + v2 + a1 > (int)(((v1 + 316) | 0x286) ^ 0xFFFFF928))) ^ v1)))();
}

uint64_t sub_1AC1A6770()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(v5 + 8);
  *(_DWORD *)(v2 - 112) = (v0 - 1310) ^ (1734042137 * ((v2 - 128) ^ 0x5CCEC34D));
  *(_QWORD *)(v2 - 128) = v1;
  *(_QWORD *)(v2 - 120) = v3;
  return sub_1AC16E3FC(v2 - 128);
}

void sub_1AC1A6CA8(uint64_t a1)
{
  int v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)a1 + 1178560073 * ((-693187448 - (a1 | 0xD6AECC88) + (a1 | 0x29513377)) ^ 0x1B473337);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x48247A308694277ALL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = v1 + 535753261 * (((&v3 | 0xB0DB09EA) - (&v3 & 0xB0DB09EA)) ^ 0xBA2F07C5) + 350;
  sub_1AC196FB4((uint64_t)&v3);
  __asm { BR              X9 }
}

uint64_t sub_1AC1A6DE0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (v1 ^ (244 * (((v3 - v2) & 0x1F) == 0x1E)))) - 12))();
}

uint64_t sub_1AC1A6E38@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((((v2 & 0xFBED3FBE)
                                           + (v3 ^ 0x7DF69FDF)
                                           + ((2 * v1) ^ 0xCA5DF390)
                                           - 1213505358 >= ((2 * v1) ^ 0x89Eu) + 2147482527)
                                          * (((2 * v1) ^ 0x89E) - 1105)) | (2 * v1) ^ 0x89E))
                            - 8))();
}

uint64_t sub_1AC1A6EB4@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((1760 * (v1 + ((v2 - 883200997) & 0x34A4971Fu) - 1744565250 < 0x7FFFFFFF)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC1A6F0C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  unsigned int v2;
  int v3;
  uint64_t v4;

  *(_DWORD *)(*(_QWORD *)(v4 - 0x48247A3086942776) + 4 * (((v3 - 1854676101) & 0x6E8C1FBF ^ v2) + v1)) = -1869673869;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a1 + 8 * ((105 * (v2 + v1 + 1545 > 0x7FFFFFFE)) ^ (v3 - 25)))
                                          - 8))(2147483646);
}

void sub_1AC1A6F88()
{
  JUMPOUT(0x1AC1A6F4CLL);
}

uint64_t sub_1AC1A6F90@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * (v1 ^ 0x511 ^ (1283
                                                       * ((int)((v3 ^ 0x5F7BFECB)
                                                              - 31752
                                                              + (v2 & 0xBEF7FD96)
                                                              - 1601929924) >= 0))))
                            - (((v1 ^ 0x511) + 718964817) & 0xD52577D9)
                            + 913))();
}

uint64_t sub_1AC1A7050@<X0>(int a1@<W2>, int a2@<W5>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;

  v10 = (a1 - 2087404570) & 0x7C6B43EE;
  v11 = v8 - 1;
  v12 = *(_DWORD *)(*(_QWORD *)(v9 - 0x48247A3086942776) + 4 * (v8 + v7)) ^ v5;
  *(_DWORD *)(*(_QWORD *)(v9 - 0x48247A3086942776) + 4 * (v3 + v4)) = ((v12 >> (32 - v6)) | a2 ^ v5)
                                                                        + (((v10 + 260) | 4) ^ (v5 + 914))
                                                                        - ((2 * ((v12 >> (32 - v6)) | a2 ^ v5)) & 0x211E14E6);
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * ((247 * (v11 + v7 >= 0)) ^ v10)) - 8))();
}

void sub_1AC1A7110()
{
  JUMPOUT(0x1AC1A7094);
}

void sub_1AC1A7118()
{
  int v0;
  int v1;
  int v2;
  int v3;
  _DWORD *v4;
  int v5;

  v5 = 28 * (v3 ^ 0x604) - v0 - 1917995347;
  if (*v4 + 678788118 < 0)
    v5 = v1;
  *v4 += v2 + v5 + 1547;
}

void sub_1AC1A72EC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) - 1225351577 * (((a1 | 0x5CD61F00) - (a1 | 0xA329E0FF) - 1557536513) ^ 0x7F4CC716);
  __asm { BR              X15 }
}

uint64_t sub_1AC1A73EC()
{
  int v0;
  uint64_t v1;
  int v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;
  BOOL v6;

  v4 = v2 ^ 0x545;
  v5 = v3 > (v2 ^ 0x545u) + 807770966;
  v6 = v0 - 128983310 < (int)(v3 + 1339712220);
  if (v5 != v0 - 128983310 < -807771428)
    v6 = v5;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1
                                                      + 8
                                                      * ((967 * (((v4 + 61 + v4 - 69 + 1) ^ v6) & 1)) ^ v4))
                                          - 4))(0x18F94B13178823EDLL);
}

uint64_t sub_1AC1A751C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W3>, _QWORD *a4@<X7>, int a5@<W8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BOOL4 v18;

  v16 = (v7 ^ v12 ^ 0xE706B4ECE877DEC4)
      + a1
      + (v8 ^ 0x908F0A73)
      + v10 * (unint64_t)(*(_DWORD *)(*a4 + 4 * a2) ^ v8);
  *(_DWORD *)(v9 + 4 * v6) = v8 + ((v7 - 959) | v11) + v16 - ((2 * v16) & 0x211E14E6) - 461;
  v18 = a2 - 1686729504 < a5 && a2 - 1686729504 >= a3;
  return ((uint64_t (*)(unint64_t))(*(_QWORD *)(v5 + 8 * (v7 | (2 * v18) | (16 * v18))) - 4))((v13 ^ HIDWORD(v16)) + (v14 & (v16 >> 31)) + v15);
}

uint64_t sub_1AC1A75E4(uint64_t a1)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((a1 == 0x18F94B13178823EDLL) ^ v1) & 1) * (v1 ^ 0x337)) ^ v1))
                            - 4))();
}

uint64_t sub_1AC1A7638()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  _BOOL4 v8;

  v4 = (v1 ^ 0x3C4) + 765;
  v5 = v3 + v4 - 2034100863;
  v6 = (((v1 ^ 0x3C4) + 791) ^ 0x2F37909E ^ v4 ^ 0x503) + v0;
  v8 = v6 < 113383825 && v6 >= v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((58 * v8) ^ v4)) - 8))();
}

uint64_t sub_1AC1A770C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v18 = a1 - 0x18F94B13178823EDLL + (v12 ^ 0x908F0A73);
  *(_DWORD *)(v8 + 4 * v10) = v12 + ((v11 + a8) & v13) + v18 - (((_DWORD)v18 << ((v11 ^ a7) + 11)) & 0x211E14E6) - 1040;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8 * ((((v14 ^ HIDWORD(v18)) + (v15 & (v18 >> 31)) + v16 == v17) * a2) ^ v11))
                            - 4))();
}

uint64_t sub_1AC1A77A8()
{
  int v0;
  uint64_t v1;
  int v2;
  _DWORD *v3;
  int v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;

  v4 = ((v2 + 63747305) & 0xFC334BF7 ^ 0x5469D680) + v0;
  v5 = *v3 + 1416221783;
  v6 = v4 < 737433665;
  v7 = v4 > v5;
  if (v5 < 737433665 != v6)
    v7 = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((v7 * (((v2 + 26) | 0xC7) ^ 0x118)) ^ v2)) - 12))();
}

void sub_1AC1A7830()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_1AC1A7854(uint64_t a1)
{
  int v1;
  _BOOL4 v3;

  v3 = *(_DWORD *)(*(_QWORD *)a1 - 0x48247A308694277ALL) == 1468695530
    || *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x48247A308694277ALL) == 1468695530;
  v1 = *(_DWORD *)(a1 + 8) + 1178560073 * ((2 * (a1 & 0x476169A4) - a1 - 1197566373) ^ 0x8A88961B);
  __asm { BR              X13 }
}

void sub_1AC1A7970()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void sub_1AC1A8084(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8)
     + 1734042137 * (((a1 ^ 0xE6425DAD | 0xA65DFB69) - ((a1 ^ 0xE6425DAD) & 0xA65DFB69)) ^ 0x1CD16589);
  __asm { BR              X10 }
}

uint64_t sub_1AC1A816C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, int a5, int a6, unsigned int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v10 = 1178560073 * (&a3 ^ 0x32160040);
  a3 = v8;
  a4 = &STACK[0x12A1E18019D396D9];
  a6 = v10 + v7 + 200;
  a7 = -1083441526 - v10;
  a5 = v10 ^ 0x17EF6F77;
  v11 = ((uint64_t (*)(uint64_t *))(*(_QWORD *)(a1 + 8 * (v7 - 262)) - 8))(&a3);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * ((140
                                                        * (*(_DWORD *)(v8 - 0x685C86573AC75C47) != 53 * (v7 ^ 0x158) + 1797235436)) | v7))
                                          - ((v7 ^ 0x158u)
                                           + 468)
                                          + 473))(v11);
}

void sub_1AC1A8238(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  _BYTE *v4;

  v3 = *(_DWORD *)(v1 + 16) ^ v2;
  *v4 = (HIBYTE(v3) ^ 0xEF) - ((2 * (HIBYTE(v3) ^ 0xEF)) & 0x94) + 74;
  v4[1] = (BYTE2(v3) ^ 0x74) - ((2 * (BYTE2(v3) ^ 0x74)) & 0x94) + 74;
  v4[2] = (BYTE1(v3) ^ 0x7C) - ((2 * (BYTE1(v3) ^ 0x7C)) & 0x94) + 74;
  v4[3] = v3 ^ 0x61;
  *(_DWORD *)(v1 + 12) = *a1;
}

void sub_1AC1A82DC(uint64_t a1)
{
  int v1;
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unsigned int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 24) - 1374699841 * ((-2 - ((a1 | 0x5548FCDC) + (~(_DWORD)a1 | 0xAAB70323))) ^ 0xC7431B2A);
  v2 = *(unint64_t **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(unint64_t **)(a1 + 40);
  v5 = *(_QWORD *)(v3 - 0x5BFD90C18C6562AALL);
  v8 = *(_QWORD *)a1;
  v9 = v5;
  v10 = &STACK[0x48247A30869427AE];
  v6 = v3;
  v7 = v2;
  v11 = (1759421093
       * (((&v6 | 0xDFD3DF00) - &v6 + (&v6 & 0x202C20F8)) ^ 0x6CAE6F54)) ^ (v1 + 1163);
  ((void (*)(uint64_t *))((char *)*(&off_1E5B56B60 + v1 - 230) - 4))(&v6);
  v6 = *(_QWORD *)(v3 - 0x5BFD90C18C6562B2);
  v7 = &STACK[0x48247A308694279E];
  LODWORD(v8) = (1734042137 * (((&v6 | 0xC811C25D) + (~&v6 | 0x37EE3DA2)) ^ 0x94DF0111)) ^ (v1 + 155);
  sub_1AC16E3FC((uint64_t)&v6);
  HIDWORD(v6) = v1
              + 460628867 * ((((2 * &v6) | 0x49CA5D62) - &v6 + 1528484175) ^ 0xE873ACCC)
              + 115;
  v7 = v4;
  sub_1AC16E584((uint64_t)&v6);
  __asm { BR              X8 }
}

uint64_t sub_1AC1A8518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t), uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  *(_DWORD *)(v17 - 104) = (v15 + 642) ^ (1759421093 * ((v17 - 144) ^ 0xB37DB054));
  *(_QWORD *)(v17 - 128) = v13;
  *(_QWORD *)(v17 - 120) = v12;
  *(_QWORD *)(v17 - 144) = v14;
  *(_QWORD *)(v17 - 136) = a11;
  *(_QWORD *)(v17 - 112) = v12;
  v18 = a10(v17 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v11
                                                      + 8
                                                      * ((v15 - 521) ^ ((4
                                                                       * ((v16 - 1779867411) < 0x7FFFFFFF)) | (32 * ((v16 - 1779867411) < 0x7FFFFFFF)))))
                                          - (v15 - 16)
                                          + 783))(v18);
}

uint64_t sub_1AC1A85A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  *(_DWORD *)(v18 - 120) = v13
                         + 535753261 * ((~((v18 - 144) | 0xFD65ADB9) + ((v18 - 144) & 0xFD65ADB9)) ^ 0x86E5C69)
                         + 932;
  *(_QWORD *)(v18 - 112) = v14;
  *(_QWORD *)(v18 - 136) = v14;
  *(_QWORD *)(v18 - 128) = v16;
  *(_QWORD *)(v18 - 144) = v15;
  ((void (*)(uint64_t))((char *)*(&off_1E5B56B60 + (v13 ^ 0x356)) - 8))(v18 - 144);
  v19 = 1225351577 * ((v18 + 1601168125 - 2 * ((v18 - 144) & 0x5F6FE38D)) ^ 0x7CF53B9B);
  *(_QWORD *)(v18 - 136) = a12;
  *(_DWORD *)(v18 - 140) = (v13 + 541) ^ v19;
  *(_DWORD *)(v18 - 128) = (v17 - 1779867696 + ((v13 - 789) | 0x11C)) ^ v19;
  v20 = sub_1AC1A4FCC(v18 - 144);
  return (*(uint64_t (**)(uint64_t))(v12
                                            + 8
                                            * (((*(_DWORD *)(v18 - 144) == 1158179193)
                                              * ((v13 - 1319524328) & 0x4EA657F7 ^ 0x317)) ^ v13)))(v20);
}

uint64_t sub_1AC1A86D0()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (v1 ^ ((4 * ((v2 - 1779867411) < 0x7FFFFFFF)) | (32 * ((v2 - 1779867411) < 0x7FFFFFFF)))))
                            - (v1 + 505)
                            + 783))();
}

uint64_t sub_1AC1A8710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;

  v5 = *(_QWORD *)(v8 + 8);
  v6 = 460628867 * ((2 * ((v4 - 144) & 0x14EB5CC0) - (v4 - 144) - 350969028) ^ 0xA7822141);
  *(_DWORD *)(v4 - 128) = v6 + v3 + 1246;
  *(_QWORD *)(v4 - 136) = v10;
  *(_DWORD *)(v4 - 144) = 690734872 - v6;
  sub_1AC1A0890((_DWORD *)(v4 - 144));
  *(_QWORD *)(v4 - 144) = v2;
  *(_QWORD *)(v4 - 136) = v10;
  *(_QWORD *)(v4 - 128) = v1;
  *(_QWORD *)(v4 - 120) = v0;
  *(_DWORD *)(v4 - 104) = (v3 + 1163) ^ (1759421093
                                       * ((((v4 - 144) | 0x5E818490) - ((v4 - 144) & 0x5E818490)) ^ 0xEDFC34C4));
  *(_QWORD *)(v4 - 112) = v0;
  v9(v4 - 144);
  *(_QWORD *)(v4 - 144) = v0;
  *(_QWORD *)(v4 - 136) = v5;
  *(_DWORD *)(v4 - 128) = (v3 + 155) ^ (1734042137
                                      * ((((v4 - 144) ^ 0x5ADF16E7)
                                        + 1656396633
                                        - 2 * (((v4 - 144) ^ 0x5ADF16E7) & 0x62BA9B59)) ^ 0x64AB4EF3));
  return sub_1AC16E3FC(v4 - 144);
}

void sub_1AC1A886C(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 12) + 460628867 * ((a1 & 0x73B15F3F | ~(a1 | 0x73B15F3F)) ^ 0xC0D822BD);
  v2 = *((_QWORD *)*(&off_1E5B56B60 + (v1 ^ 0x278))
       + ((23
         * (((uint64_t (*)(uint64_t, uint64_t))*(&off_1E5B56B60 + v1 - 488))(32, 0x101004023FF3BD5) == 0)) ^ v1))
     - 13 * (v1 ^ 0x22Bu)
     + 521;
  __asm { BR              X8 }
}

void sub_1AC1A8920()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 8) = -1797193955;
}

void X5EvIJWqdcALcjaxX6Pl(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_1AC1A89D8@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void))(a1 + 1808))();
  return 0;
}

void sub_1AC1A89EC(uint64_t a1)
{
  BOOL v1;
  char v2;

  if (*(_QWORD *)(a1 + 24))
    v1 = *(_DWORD *)(a1 + 20) - 1759421093 * (a1 ^ 0xB37DB054) == 130835638;
  else
    v1 = 1;
  v2 = v1;
  __asm { BR              X8 }
}

uint64_t sub_1AC1A8A90()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8 * (v1 - 731)))(32, 0x101004023FF3BD5) == 0;
  return (*(uint64_t (**)(void))(v2 + 8 * ((v3 * ((v1 + 207) ^ 0x11E ^ (v1 - 1713521662) & 0x662243FD)) ^ (v1 - 27))))();
}

uint64_t sub_1AC1A8B08()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((30 * (v1 != ((v3 - 207) ^ (v0 + 397)))) ^ v3)) - 12))();
}

uint64_t sub_1AC1A8B4C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v11 = v2 - 130835639;
  v12 = v2 - 1;
  v13 = *(unsigned __int8 *)(v6 + v11);
  if (v13 == 74)
    __asm { BR              X11 }
  if (v13 == 202)
  {
    v14 = 1797235913;
    v15 = *(_QWORD *)(v4 + 8);
    v16 = *(unsigned __int8 *)(v4 + 16) ^ v5;
    *(_QWORD *)result = v6;
    *(_DWORD *)(result + 8) = v7;
    *(_DWORD *)(result + 12) = v12;
    if (v16 == 96)
      v17 = 1801343115;
    else
      v17 = 1801343114;
    *(_DWORD *)(result + 16) = 1279817996;
    *(_DWORD *)(result + 20) = v17;
    *(_DWORD *)(result + 24) = 1797235913;
    *(_QWORD *)(v15 - 0x335F4D7B17DD4E17) = a2;
  }
  else
  {
    result = (*(uint64_t (**)(void))(v8 + 8 * (v9 ^ 0x217)))();
    v14 = -1797193968;
  }
  *(_DWORD *)v4 = v14;
  return result;
}

void sub_1AC1A8C30(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) - 535753261 * (((a1 | 0xB23F3C90) - (a1 & 0xB23F3C90)) ^ 0xB8CB32BF);
  __asm { BR              X14 }
}

void sub_1AC1A8D38()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v2 + v1) = v0;
}

void sub_1AC1A9A94(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;

  v1 = 3804331 * (((a1 | 0x841A70C4) - (a1 & 0x841A70C4)) ^ 0x7E848392);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x685C86573AC75C53) - 494925005;
  v3 = *(_DWORD *)(a1 + 4) - v1 - 462921234;
  v4 = (v3 < 0xEA4C6FE9) ^ (v2 < 0xEA4C6FE9);
  v5 = v2 < v3;
  if (v4)
    v5 = v3 < 0xEA4C6FE9;
  __asm { BR              X11 }
}

uint64_t sub_1AC1A9B98()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = (((v0 ^ 0x65F) - 685) & *(_DWORD *)(v1 - 0x685C86573AC75C4BLL)) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((2 * v3) | (8 * v3) | v0)) - 8))();
}

uint64_t sub_1AC1A9BD8@<X0>(int a1@<W8>, uint64_t a2, ...)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  va_list va;

  va_start(va, a2);
  v5 = v2 + 1085;
  v6 = (*(uint64_t (**)(_QWORD, char *, _QWORD, uint64_t))(v4 + 8 * (v2 - 481)))(**(unsigned int **)(v4 + 8 * ((v2 + 1085) ^ 0x639)), va, ((((v2 + 748090293) & 0xD3690BBE) - 1610816291) ^ (a1 - 98827772) & 0xFFFFF000)+ ((2 * (a1 - 98827772)) & 0x3FF9C000)+ 1610815745, 1) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((v6 | (16 * v6)) ^ v5)) - 12))();
}

uint64_t sub_1AC1A9C70()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)(((*(_QWORD *)(v0 - 0x685C86573AC75C5FLL) == 0)
                                     * (((v2 + 354806387) ^ 0x1525EE3B) + ((v2 + 354806387) & 0xEADA17EA) - 1813)) ^ v2)))();
}

void sub_1AC1A9CD8()
{
  uint64_t v0;
  _DWORD *v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;

  *v4 = v3;
  *(_DWORD *)(v0 - 0x685C86573AC75C57) = v2;
  *v1 = v2;
}

uint64_t sub_1AC1AA220(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x48247A308694277ALL);
  v4 = v2 - 1468695530;
  v3 = v2 - 1468695530 < 0;
  v5 = 1468695530 - v2;
  if (!v3)
    v5 = v4;
  v1 = (*(_DWORD *)a1 - 235795823 * ((a1 - 590343418 - 2 * (a1 & 0xDCD01306)) ^ 0x487D5A5F) - 766) | 0x491;
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B56B60 + v1 - 1051)
                              + ((46 * ((v5 ^ (v1 - 67249880)) + ((2 * v5) & 0xF7FBBB7A) + 67248706 > 0x7FFFFFFE)) ^ v1))
                            - 8))();
}

uint64_t sub_1AC1AA328()
{
  _QWORD *v0;
  unsigned int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((1977
                                          * (((v2 - 109) ^ (*(_DWORD *)(*v0 + 4 * v1) == -1869673869)) & 1)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC1AA36C()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(*(_QWORD *)(v1 + 8 * (v2 - 1051))
                                        + 8 * ((46 * ((v0 - 1) > 0x7FFFFFFE)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC1AA3B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 4) = v1;
  return result;
}

void sub_1AC1AA3B8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1AC1AA440@<X0>(uint64_t a1@<X1>, unsigned int a2@<W8>)
{
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((769 * (**(_BYTE **)(a1 + 8) == 0)) ^ a2)) - 12))();
}

uint64_t sub_1AC1AA470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  *(_QWORD *)(*(_QWORD *)(a17 + 96) + 504) = v19 + 1;
  *(_DWORD *)(*(_QWORD *)(a17 + 96) + 496) = a19 - 1;
  v22 = 628203409 * ((2 * ((v21 - 152) & 0x2C413658) - (v21 - 152) - 742471261) ^ 0x5136C590);
  *(_QWORD *)(v21 - 136) = v21 + 0x5800F43E2BD23A50;
  *(_DWORD *)(v21 - 152) = v22 - 1882357464;
  *(_DWORD *)(v21 - 144) = v22 + 1252841699;
  v23 = sub_1AC196A60(v21 - 152);
  return (*(uint64_t (**)(uint64_t))(v20
                                            + 8
                                            * ((2038
                                              * (a19
                                               - 22346038
                                               + (~(2 * *(_DWORD *)(v21 - 184)) & 0x66)
                                               + (*(_DWORD *)(v21 - 184) & 0x3F ^ 0xDEFBDF04) < 0xFFFFFFC0)) ^ 0x16Fu)))(v23);
}

uint64_t sub_1AC1AA658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;

  v31 = v27 + 553918670;
  if (v31 <= 0x40)
    v31 = 64;
  return ((uint64_t (*)(void))(*(_QWORD *)(v30 + 8 * (a27 ^ (55 * (a7 - v28 - v29 + v31 > 0xE))))
                            - ((((a27 + 805) | 0x21u) - 538) ^ 0x24FLL)))();
}

uint64_t sub_1AC1AA6DC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;

  v14 = v9 + v8;
  v15 = ((v11 - 1979931302) & 0x7603575F ^ (v10 + 1455)) + v14;
  if (v15 <= 0x40)
    v15 = v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v13 + 8 * ((242 * ((v7 ^ (a7 - 441)) - v14 < a1 + v15)) ^ v11))
                            - 8))();
}

uint64_t sub_1AC1AA73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  return ((uint64_t (*)(void))(*(_QWORD *)(v22
                                        + 8
                                        * ((185
                                          * (~a19 + v23 - 252 + (unint64_t)(v19 + v20 + ((v21 + 747) | 0xA1)) > 0xF)) ^ v21))
                            - 4))();
}

uint64_t sub_1AC1AA788@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int8x16_t *v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;

  v7.i64[0] = 0x9494949494949494;
  v7.i64[1] = 0x9494949494949494;
  v8.i64[0] = 0x4A4A4A4A4A4A4A4ALL;
  v8.i64[1] = 0x4A4A4A4A4A4A4A4ALL;
  *(int8x16_t *)(v4 + (a1 + v1)) = vaddq_s8(vsubq_s8(*v5, vandq_s8(vaddq_s8(*v5, *v5), v7)), v8);
  return ((uint64_t (*)(int8x16_t *))(*(_QWORD *)(v6
                                                          + 8
                                                          * (((((v2 + 1) & 0x1FFFFFFF0) == 16) * (v3 - 529)) ^ v3))
                                              - 4))(&v5[1]);
}

void sub_1AC1AA7E8()
{
  JUMPOUT(0x1AC1AA7B4);
}

uint64_t sub_1AC1AA7F4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((a1 - 238 + a1 + 300 - 401) * (v1 == v2)) ^ a1)) - 4))();
}

uint64_t sub_1AC1AA824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int32x4_t a33,int32x4_t a34,int32x4_t a35,int32x4_t a36)
{
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128);
  const char *v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint8x16_t v56;
  uint16x8_t v57;
  int8x16_t v58;
  int8x16_t v59;
  uint16x8_t v60;
  int8x16_t v61;
  int8x16_t v62;
  uint8x16_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint8x16_t v66;
  int8x16_t v69;
  int8x16_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  uint8x16_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  uint8x16_t v83;
  uint8x16_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  _DWORD *v95;
  int v96;
  int v97;
  unint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  int8x16x4_t v102;
  int8x16x4_t v103;

  v44 = (uint64_t (*)(uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128))(*(_QWORD *)(v41 + 8 * v36)
                                                                                         - 12);
  v45 = (const char *)(v43 - 252);
  v46.n128_u64[0] = 0x4A4A4A4A4A4A4A4ALL;
  v46.n128_u64[1] = 0x4A4A4A4A4A4A4A4ALL;
  v47 = (__n128)vdupq_n_s32(0x6B1FA4DBu);
  LODWORD(a26) = -700495507;
  a27 = v39 - 16;
  v48 = (__n128)vdupq_n_s32(0x6B1FA4C9u);
  LODWORD(v101) = -877675651;
  v49 = (__n128)vdupq_n_s32(0x6B1FA4D9u);
  v50.n128_u64[0] = 0x9494949494949494;
  v50.n128_u64[1] = 0x9494949494949494;
  v51 = *(_DWORD *)(v43 - 180);
  v52 = *(unsigned int *)(v43 - 176);
  a25 = __PAIR64__(v52, v51);
  v54 = *(_DWORD *)(v43 - 172);
  v53 = *(_DWORD *)(v43 - 168);
  HIDWORD(a22) = *(unsigned __int8 *)(v43 - 156) ^ 0x56;
  v55 = *(_BYTE *)(v43 - 156) ^ 0x56;
  if (v55 == 2)
  {
    v103 = vld4q_s8(v45);
    v80 = (uint8x16_t)veorq_s8(v103.val[0], (int8x16_t)v46);
    v81 = vmovl_u8(*(uint8x8_t *)v80.i8);
    v82 = vmovl_high_u8(v80);
    v83 = (uint8x16_t)veorq_s8(v103.val[1], (int8x16_t)v46);
    _Q22 = vmovl_u8(*(uint8x8_t *)v83.i8);
    _Q21 = vmovl_high_u8(v83);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    v88 = (uint8x16_t)veorq_s8(v103.val[2], (int8x16_t)v46);
    v89 = vmovl_high_u8(v88);
    v90 = vmovl_u8(*(uint8x8_t *)v88.i8);
    v103.val[0] = veorq_s8(v103.val[3], (int8x16_t)v46);
    v103.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v103.val[0]);
    v103.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v103.val[1]);
    v103.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v103.val[1].i8);
    v103.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v103.val[0].i8);
    v103.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v103.val[0]);
    v103.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v103.val[0].i8);
    v91 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v90.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v81.i8), 0x18uLL)), v103.val[0]);
    v92 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v90, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v81), 0x18uLL)), v103.val[3]);
    v93 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v89.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8), 0x18uLL)), v103.val[1]);
    v94 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v89, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v82), 0x18uLL)), v103.val[2]);
    v103.val[0] = veorq_s8(vandq_s8((int8x16_t)v91, (int8x16_t)v47), (int8x16_t)(*(_OWORD *)v103.val & __PAIR128__(0xFFFFFF12FFFFFF12, 0xFFFFFF12FFFFFF12)));
    v103.val[3] = veorq_s8(vandq_s8((int8x16_t)v92, (int8x16_t)v47), (int8x16_t)(*(_OWORD *)&v103.val[3] & __PAIR128__(0xFFFFFF12FFFFFF12, 0xFFFFFF12FFFFFF12)));
    v103.val[1] = veorq_s8(vandq_s8((int8x16_t)v93, (int8x16_t)v47), (int8x16_t)(*(_OWORD *)&v103.val[1] & __PAIR128__(0xFFFFFF12FFFFFF12, 0xFFFFFF12FFFFFF12)));
    v103.val[2] = veorq_s8(vandq_s8((int8x16_t)v94, (int8x16_t)v47), (int8x16_t)(*(_OWORD *)&v103.val[2] & __PAIR128__(0xFFFFFF12FFFFFF12, 0xFFFFFF12FFFFFF12)));
    a35 = vaddq_s32(vsubq_s32(v93, vaddq_s32((int32x4_t)v103.val[1], (int32x4_t)v103.val[1])), (int32x4_t)v48);
    a36 = vaddq_s32(vsubq_s32(v94, vaddq_s32((int32x4_t)v103.val[2], (int32x4_t)v103.val[2])), (int32x4_t)v48);
    a33 = vaddq_s32(vsubq_s32(v91, vaddq_s32((int32x4_t)v103.val[0], (int32x4_t)v103.val[0])), (int32x4_t)v48);
    a34 = vaddq_s32(vsubq_s32(v92, vaddq_s32((int32x4_t)v103.val[3], (int32x4_t)v103.val[3])), (int32x4_t)v48);
    v95 = (_DWORD *)&a33 + v42 + 688481772;
    v96 = *(v95 - 8) ^ *(v95 - 3);
    v97 = *(v95 - 16) ^ *(v95 - 14) ^ (v96 + v37 - ((a26 ^ 0xFF) & (2 * v96)));
    HIDWORD(v98) = v97 ^ v37;
    LODWORD(v98) = v97;
    *v95 = (v98 >> 31) + v37 - ((2 * (v98 >> 31)) & 0xD63F4992);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t))(v41 + 8 * ((1815 * (v39 == 688481709)) ^ 0x12E)))(3594471826, 1100707007, v44, 175, a27);
  }
  else if (v55 == 1)
  {
    v102 = vld4q_s8(v45);
    v56 = (uint8x16_t)veorq_s8(v102.val[0], (int8x16_t)v46);
    v57 = vmovl_u8(*(uint8x8_t *)v56.i8);
    v58 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v57.i8);
    v59 = (int8x16_t)vmovl_high_u16(v57);
    v60 = vmovl_high_u8(v56);
    v61 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v60.i8);
    v62 = (int8x16_t)vmovl_high_u16(v60);
    v63 = (uint8x16_t)veorq_s8(v102.val[1], (int8x16_t)v46);
    v64 = vmovl_high_u8(v63);
    v65 = vmovl_u8(*(uint8x8_t *)v63.i8);
    v66 = (uint8x16_t)veorq_s8(v102.val[2], (int8x16_t)v46);
    _Q26 = (int8x16_t)vmovl_high_u8(v66);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v66.i8);
    v69 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }
    v74 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v102.val[0] = veorq_s8(v102.val[3], (int8x16_t)v46);
    v102.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v102.val[0]);
    v102.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v102.val[1]);
    v102.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v102.val[0].i8);
    v102.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v102.val[0]);
    v102.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v102.val[0].i8), 0x18uLL), v69), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v65.i8, 8uLL), v58));
    v102.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v102.val[3], 0x18uLL), _Q25), vorrq_s8((int8x16_t)vshll_high_n_u16(v65, 8uLL), v59));
    v102.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v102.val[1].i8), 0x18uLL), v74), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v64.i8, 8uLL), v61));
    v102.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v102.val[2], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v64, 8uLL), v62));
    v75 = (int32x4_t)veorq_s8(vandq_s8(v102.val[0], (int8x16_t)v49), (int8x16_t)(*(_OWORD *)&v58 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
    v76 = (int32x4_t)veorq_s8(vandq_s8(v102.val[3], (int8x16_t)v49), (int8x16_t)(*(_OWORD *)&v59 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
    v77 = (int32x4_t)veorq_s8(vandq_s8(v102.val[1], (int8x16_t)v49), (int8x16_t)(*(_OWORD *)&v61 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
    v78 = (int32x4_t)veorq_s8(vandq_s8(v102.val[2], (int8x16_t)v49), (int8x16_t)(*(_OWORD *)&v62 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
    a35 = vaddq_s32(vsubq_s32((int32x4_t)v102.val[1], vaddq_s32(v77, v77)), (int32x4_t)v48);
    a36 = vaddq_s32(vsubq_s32((int32x4_t)v102.val[2], vaddq_s32(v78, v78)), (int32x4_t)v48);
    a33 = vaddq_s32(vsubq_s32((int32x4_t)v102.val[0], vaddq_s32(v75, v75)), (int32x4_t)v48);
    a34 = vaddq_s32(vsubq_s32((int32x4_t)v102.val[3], vaddq_s32(v76, v76)), (int32x4_t)v48);
    HIDWORD(v101) = HIDWORD(a18) + 1829889280;
    return ((uint64_t (*)(uint64_t, uint64_t (**)(int, int, int, int, int, int, int, int, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 + 8 * ((358 * (a27 + 1 == v39)) ^ 0x2E5)) - 4))(0x1AC3C15F6, &off_1E5B56B60, 3745507261, 175, v52, 0x1AC3BD0A2, 0x1AC3C3C40, 0x1AC3C15F2, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a4,
             v44,
             a22,
             v101,
             __PAIR64__(v53, v54),
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32);
  }
  else
  {
    v99 = *(_DWORD *)(v43 - 172);
    v100 = (v52 ^ v38) + (HIDWORD(a25) ^ v38) + v38 - (v40 & (2 * ((v52 ^ v38) + (HIDWORD(a25) ^ v38))));
    *(_DWORD *)(v43 - 180) = (v51 ^ v38) + (a25 ^ v38) + v38 - (v40 & (2 * ((v51 ^ v38) + (a25 ^ v38))));
    *(_DWORD *)(v43 - 176) = v100;
    *(_DWORD *)(v43 - 172) = (v99 ^ v38) + (v54 ^ v38) + v38 - (v40 & (2 * ((v99 ^ v38) + (v54 ^ v38))));
    *(_DWORD *)(v43 - 168) = 2 * (v53 ^ v38) + v38 - (v40 & (4 * (v53 ^ v38)));
    a28 = 0;
    return v44(3594471826, 1100707007, v46, v47, v48, v49, v50);
  }
}

uint64_t sub_1AC1AB424(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,int a23,unsigned int a24)
{
  uint64_t v24;
  _BOOL4 v25;

  if (a24 < 0x8F6AFEC3 != (a20 + 1996487489) < 0x8F6AFEC3)
    v25 = (a20 + 1996487489) < 0x8F6AFEC3;
  else
    v25 = a20 + 1996487489 > a24;
  return (*(uint64_t (**)(void))(v24 + 8 * ((v25 * (((a23 & 0x345045F3) + 493) ^ 0x369)) ^ (a6 + a2 + 219))))();
}

uint64_t sub_1AC1AB4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8
                                                                        + 8
                                                                        * (((a6 + ((v7 + 1099636062) | 0x105403) + 991)
                                                                          * (v6 + a5 + 63 >= (v6 + a5))) ^ v7))
                                                            - 8))(1100707007, 89, 148);
}

uint64_t sub_1AC1AB518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  return ((uint64_t (*)(void))(*(_QWORD *)(v22
                                        + 8
                                        * (v20 ^ (63 * ((unint64_t)(~a19 + v19 - v21) > 0xF))))
                            - ((v20 - 203687071) & 0x4DBF75FF)
                            - ((v20 - 203687071) ^ 0xFFFFFFFF4DBF75F6)))();
}

uint64_t sub_1AC1AB584(int a1, int8x16_t a2, double a3, double a4, double a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12)
{
  int v12;
  int8x16_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  *v13 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v15 + (v12 + a10)), vandq_s8(vaddq_s8(*(int8x16_t *)(v15 + (v12 + a10)), *(int8x16_t *)(v15 + (v12 + a10))), a6)), a2);
  return ((uint64_t (*)(void))(*(_QWORD *)(v16 + 8 * (a11 + v14 + 95)) - (((v14 ^ (a1 - 4)) * a12) ^ v17)))();
}

uint64_t sub_1AC1AB5E8@<X0>(unint64_t a1@<X1>, char a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W5>, uint64_t a6@<X8>)
{
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_BYTE *)(v8 + a6) = *(_BYTE *)(v10 + (v6 + a4))
                      - (a2 & (2 * *(_BYTE *)(v10 + (v6 + a4))))
                      + 74;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * (((((v7 + v12) & v9 ^ a1) + a6 != 64) * a3) ^ (a5 + v7 + 1504)))
                            - 12))();
}

uint64_t sub_1AC1AB63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v19;
  uint64_t v20;
  int v21;
  _BOOL4 v22;

  if (a19 + 1117323431 < ((v21 - 308) ^ 0x64F21A57u) != (v19 + 1283921576) < 0x64F21A6A)
    v22 = a19 + 1117323431 < ((v21 - 308) ^ 0x64F21A57u);
  else
    v22 = v19 + 1283921576 < (a19 + 1117323431);
  return ((uint64_t (*)(void))(*(_QWORD *)(v20 + 8 * ((242 * v22) ^ v21)) - 8))();
}

uint64_t sub_1AC1AB6B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  v21 = (a3 + 1083327464) | 0x109309A;
  v22 = 3804331 * ((((2 * (v20 - 152)) | 0xAC7E5376) - (v20 - 152) - 1446980027) ^ 0xACA1DAED);
  *(_QWORD *)(v20 - 144) = a16;
  *(_DWORD *)(v20 - 152) = v22 + a3 + 1619;
  *(_DWORD *)(v20 - 148) = (a19 + 630488440) ^ v22;
  sub_1AC18A930(v20 - 152);
  v23 = *(_DWORD *)(v20 - 184) & 0x3F;
  *(_BYTE *)(v20 - 252 + (v23 ^ 0x37)) = -54;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v19
                                                               + 8
                                                               * ((((v23 ^ 0x37) > 0x37)
                                                                 * (v21 - 1100705776)) ^ a3))
                                                   - 12))(3594471826, 1100707007);
}

uint64_t sub_1AC1AB7D4(uint64_t a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((v2 != ((v3 + 411247914) & 0xE77CDFFD) - 1653)
                                          * (v3 ^ (a2 + 116) ^ (a2 + 643))) ^ v3))
                            - 4))();
}

uint64_t sub_1AC1AB81C(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8 * ((87 * (((((v3 - 509642485) & 0x5FFBF4FF) - a2 + 8) ^ v2) > 7)) ^ v3))
                            - 8))();
}

uint64_t sub_1AC1AB864@<X0>(uint64_t a1@<X8>)
{
  char v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 252 + a1 - 2126718133) = 0x4A4A4A4A4A4A4A4ALL;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((727 * ((v1 & 0x38) == 8)) ^ (v2 + 1498)))
                            - ((v2 + 12) & 0xFFFFFE7F)))();
}

uint64_t sub_1AC1AB8C0(double a1)
{
  int v1;
  double *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *v2 = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((v5 == 0) * v4) ^ v1)) - (v3 & 0xFFFFFE7F)))();
}

uint64_t sub_1AC1AB8EC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3 + 8 * (a1 | (19 * (v2 != v1))))
                                          - (((a1 + 589463) | 0x4192749Cu) ^ 0x419B74BBLL)))(3594471826);
}

void sub_1AC1AB938()
{
  JUMPOUT(0x1AC1AA8B0);
}

uint64_t sub_1AC1AB948@<X0>(unsigned int a1@<W0>, int a2@<W1>, int a3@<W4>, int a4@<W8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BOOL4 v13;
  char v14;
  unsigned int v15;
  int v16;
  _BOOL4 v17;

  v13 = v5 < v6;
  v14 = *(_BYTE *)(v9 + a3 + v4 + ((v11 - 356) | 0x30u) - 61);
  *(_BYTE *)(v12 - 252 + (a4 + v8)) = v14 - ((2 * v14) & 0x94) + 74;
  v15 = v4 + 1 + a2;
  v16 = v13 ^ (v15 < a1);
  v17 = v15 < v5;
  if (!v16)
    v13 = v17;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((v13 * v7) ^ v11)) - 8))();
}

uint64_t sub_1AC1AB9C0@<X0>(int a1@<W5>, int a2@<W8>)
{
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8
                                             * ((114 * ((a2 - 2126718133) > 0x37)) ^ (a1 + v3 + 673)))
                            - (((a1 + v3 - 68) | 0x340u) ^ 0x371)))();
}

uint64_t sub_1AC1ABA08@<X0>(unsigned int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1;
  v4 = a1 - 2126718133;
  if ((unint64_t)(v4 + 1) > 0x38)
    v5 = v4 + 1;
  else
    v5 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((228 * (v5 - v3 + (unint64_t)(v1 ^ 0x272u) + 2126717866 > 7)) ^ v1))
                            - (((v1 + 1091780789) | 0x883091u) ^ 0x419B74B7)))();
}

uint64_t sub_1AC1ABA8C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 252 + v2 - 2126718133) = 0x4A4A4A4A4A4A4A4ALL;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((55 * ((a1 & 0xFFFFFFFFFFFFFFF8) == 8)) ^ v1))
                            - ((v1 - 2101943582) & 0x7D491F7E)
                            + 864))();
}

void sub_1AC1ABAF0()
{
  JUMPOUT(0x1AC1ABACCLL);
}

uint64_t sub_1AC1ABAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v9 - 252 + v6 - 2126718133) = 74;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((1094 * ((unint64_t)(v6 - 2126718132) < 0x40)) ^ (a6 + v7 + 271)))
                            - 4))();
}

uint64_t sub_1AC1ABB40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((21 * (a1 != v1)) ^ v2))
                            - ((v2 - 442796973) & 0x5BFFFCFF ^ 0x419B74B7)))();
}

void sub_1AC1ABBA4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  int v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;

  v7 = *(unsigned __int8 *)(v6 - 156) ^ 0x56;
  if (v7 == 1)
  {
    v14 = *(_DWORD *)(v6 - 188);
    v13 = *(_DWORD *)(v6 - 184);
    *(_BYTE *)(v6 - 196) = ((a6 + a2 + 59) ^ (8 * v13)) - ((2 * ((a6 + a2 + 59) ^ (8 * v13))) & 0x90) + 74;
    v11 = -108;
    *(_BYTE *)(v6 - 195) = ((v13 >> 5) ^ 0xF9) - ((2 * ((v13 >> 5) ^ 0xF9)) & 0x94) + 74;
    *(_BYTE *)(v6 - 194) = ((v13 >> 13) ^ 0xC7) + (~(2 * ((v13 >> 13) ^ 0xC7)) | 0x6B) + 75;
    HIDWORD(v15) = v14 ^ 8;
    LODWORD(v15) = v13 ^ 0x80000000;
    *(_BYTE *)(v6 - 193) = ((v13 >> 21) ^ 0x8B) - ((2 * ((v13 >> 21) ^ 0x8B)) & 0x94) + 74;
    *(_BYTE *)(v6 - 192) = (v15 >> 29) - ((2 * (v15 >> 29)) & 0x94) + 74;
    *(_BYTE *)(v6 - 191) = ((v14 >> 5) ^ 0xD9) - ((2 * ((v14 >> 5) ^ 0xD9)) & 0x94) + 74;
    *(_BYTE *)(v6 - 190) = ((v14 >> 13) ^ 0xB) - 2 * (((v14 >> 13) ^ 0xB) & 0x4E ^ (v14 >> 13) & 4) + 74;
    v8 = a6 + a2 + 43;
    v12 = (v14 >> 21) ^ 0xFFFFFFD3;
  }
  else
  {
    if (v7 != 2)
      goto LABEL_6;
    v8 = 56 * (a2 ^ (a2 - 3));
    v12 = *(_DWORD *)(v6 - 188);
    v9 = *(_DWORD *)(v6 - 184);
    *(_BYTE *)(v6 - 196) = ((v12 >> 21) ^ 0xD3) - ((2 * ((v12 >> 21) ^ 0xD3)) & 0x94) + 74;
    *(_BYTE *)(v6 - 195) = v8 + ((v12 >> 13) ^ 0xB) + (~(2 * ((v12 >> 13) ^ 0xB)) | 0x6B) - 93;
    HIDWORD(v10) = v12 ^ 8;
    LODWORD(v10) = v9 ^ 0x80000000;
    *(_BYTE *)(v6 - 194) = ((v12 >> 5) ^ 0xD9) - ((2 * ((v12 >> 5) ^ 0xD9)) & 0x94) + 74;
    *(_BYTE *)(v6 - 193) = (v10 >> 29) - ((2 * (v10 >> 29)) & 0x94) + 74;
    *(_BYTE *)(v6 - 192) = ((v9 >> 21) ^ 0x8B) - 2 * (((v9 >> 21) ^ 0x8B) & 0x4E ^ (v9 >> 21) & 4) + 74;
    *(_BYTE *)(v6 - 191) = ((v9 >> 13) ^ 0xC7) - ((2 * ((v9 >> 13) ^ 0xC7)) & 0x94) + 74;
    *(_BYTE *)(v6 - 190) = ((v9 >> 5) ^ 0xF9) - ((2 * ((v9 >> 5) ^ 0xF9)) & 0x94) + 74;
    v11 = -112;
    LOBYTE(v12) = (8 * v9) ^ 0xB8;
  }
  *(_BYTE *)(v6 - 189) = v12 - (v11 & (2 * v12)) + (((v8 - 106) | 0x81) ^ 0xF5);
LABEL_6:
  JUMPOUT(0x1AC1AA8B0);
}

uint64_t sub_1AC1AC000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  _BOOL4 v16;

  v12 = (v9 + v6);
  v13 = *(_DWORD *)(v11 - 252 + v12 + 72);
  v14 = (v13 >> (a6 + ((v8 + 98) & 0xBF) - 101)) ^ 0x2B;
  *(_BYTE *)(a1 + v12) = v14 - ((2 * v14) & 0x94) + 74;
  *(_BYTE *)(a1 + (v12 + 1)) = (BYTE2(v13) ^ 0xAC) - ((2 * (BYTE2(v13) ^ 0xAC)) & 0x94) + 74;
  *(_BYTE *)(a1 + (v12 + 2)) = (BYTE1(v13) ^ 0xA4) - ((v13 >> 7) & 0x94) + 74;
  *(_BYTE *)(a1 + (v12 + 3)) = v13 ^ 0x42;
  v15 = *(_DWORD *)(v11 - 160) + 330791694;
  v16 = v9 + 1084230054 < v15;
  if (v9 + 1084230054 < v7 != v15 < v7)
    v16 = v15 < v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * (v8 ^ (2 * !v16))) - 12))();
}

void sub_1AC1AC19C()
{
  JUMPOUT(0x1AC1AC164);
}

uint64_t sub_1AC1AC1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  int v33;
  uint64_t v34;

  *(_DWORD *)(&a33 + a28) = 312522783;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 + 8 * ((v33 - 164) ^ 0x3FD)) - 12))(947025936, a2, a3, a4, &a33 + a28, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

uint64_t sub_1AC1AC25C(int a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (v2 ^ (236 * (v3 == a1))))
                            + 1100706995
                            - ((v2 - 38) ^ (a2 - 962))
                            + 8))();
}

uint64_t sub_1AC1AC2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v19;
  int v20;
  uint64_t v21;

  return ((uint64_t (*)(void))(*(_QWORD *)(v21
                                        + 8
                                        * (((((((v19 - 61632067) & 0x3AC6A7D) - 129) & (v20 - 576264639)) - a19 == -576264643)
                                          * (v19 - 1054)) | v19))
                            - 12))();
}

uint64_t sub_1AC1AC304@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((((v1 ^ 0x44C) - 841) * (a1 != 312522783)) ^ v1)) - 12))();
}

uint64_t sub_1AC1AC33C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,int a30)
{
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  _BOOL4 v35;

  v33 = a6 + v30 + 901;
  v34 = v31 + ((v30 - a2 + 125) ^ 0x8F39B0ED);
  v35 = a30 - 2016816059 < v34;
  if ((a30 - 2016816059) < 0xB192CA52 != v34 < 0xB192CA52)
    v35 = v34 < 0xB192CA52;
  return ((uint64_t (*)(void))(*(_QWORD *)(v32 + 8 * (v35 | (8 * v35) | v33)) - 4))();
}

uint64_t sub_1AC1AC4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v20 = (v18 - a6);
  v21 = 628203409 * ((2 * ((v19 - 152) & 0x70BF9FC0) - (v19 - 152) - 1891606465) ^ 0xDC86C0C);
  *(_QWORD *)(v19 - 144) = a11;
  *(_QWORD *)(v19 - 152) = a13;
  *(_QWORD *)(v19 - 112) = v14;
  *(_QWORD *)(v19 - 104) = a12;
  *(_DWORD *)(v19 - 136) = v18 - v21 + 195;
  *(_DWORD *)(v19 - 132) = v16 - v21 + ((v18 + 1158) ^ 0xE9E9C286);
  *(_QWORD *)(v19 - 128) = a14;
  ((void (*)(uint64_t))((char *)*(&off_1E5B56B60 + v18 + 5) - 8))(v19 - 152);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v17
                                                               + 8 * ((536 * (*(_DWORD *)(v19 - 120) == v15)) ^ v18))
                                                   - (v20 ^ 0x419B74B3)))(947025936, 1100707007);
}

uint64_t sub_1AC1AC5B4(uint64_t a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((42
                                          * (*(_DWORD *)(v4 + 48 * (v3 + v2)) == ((a2
                                                                                   + ((v6 + 65622908) & 0xFC16A7FD)
                                                                                   - 125) ^ 0x1CAEBA1A))) ^ v6))
                            - 4))();
}

uint64_t sub_1AC1AC61C@<X0>(int a1@<W1>, int a2@<W5>, int a3@<W8>)
{
  int v4;

  if ((a3 - 1120374279) <= 0x18 && ((1 << (a3 - 7)) & 0x1034001) != 0)
    __asm { BR              X10 }
  return v4 ^ 0x94E0FF17;
}

void sub_1AC1ACA8C(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (1374699841 * ((((2 * (_DWORD)a1) | 0x97E9331C) - (_DWORD)a1 + 873162354) ^ 0xA6008187));
  __asm { BR              X10 }
}

uint64_t sub_1AC1ACB5C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v12 = 1755732067 * ((&a4 & 0x7E1935 | ~(&a4 | 0x7E1935)) ^ 0x21475B11);
  a6 = (v10 - 152) ^ v12;
  a8 = v12 ^ 0x2C2CAC37;
  a4 = &STACK[0x181849F3B30904BA];
  a5 = v11;
  a7 = &STACK[0x3DC2AB9B7B5221A3];
  v13 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * (v10 - 1030)) - 8))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * (((*(_DWORD *)(v11 - 0x685C86573AC75C47) == v8)
                                                        * ((v10 - 441) ^ 0x199)) ^ v10))
                                          - 12))(v13);
}

uint64_t sub_1AC1ACC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  int v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8
                                        * (((a11 != ((v13 + 662471353) & 0xD8837EFF ^ (v11 - 1061)))
                                          * (((v13 - 679) | 0x460) ^ 0x466)) ^ v13))
                            - 8))();
}

void sub_1AC1ACC90(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;

  *a1 = v2;
  *(_DWORD *)(v1 + 4) = -1797193732;
}

void sub_1AC1ACD4C(uint64_t a1)
{
  int v1;

  v1 = 460628867 * ((((2 * a1) | 0x69ED4642) - a1 - 888578849) ^ 0x7860215C);
  __asm { BR              X9 }
}

uint64_t sub_1AC1ACDE0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return (*(uint64_t (**)(void))(a1 + 8 * (((((v1 - 626) | 0x82) + 1728) * (v2 != 36307408)) ^ v1)))();
}

uint64_t sub_1AC1ACE34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;

  v6 = 21 * (v4 ^ 0x95);
  v7 = *(unsigned __int8 *)(*a1 + (v3 + v5 + 256)) ^ 0x4A | (v2 + (v6 ^ 0x3C) - 435) ^ 0x908F0A73;
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(a2 + 8 * (v6 ^ 0x3C)))(a1, 67, v2 + 67 * (v6 ^ 0x18D) + v7 - ((2 * v7) & 0x211E14E6) - 134, 74, 555619558, 134);
}

uint64_t sub_1AC1ACF48@<X0>(int a1@<W5>, int a2@<W7>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  _BOOL4 v5;

  v5 = a2 == ((v4 + 131) | a1) + v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * (((4 * v5) | (32 * v5)) ^ v4)) - 8))();
}

uint64_t sub_1AC1ACF78@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return (*(uint64_t (**)(void))(a1 + 8 * ((232 * (v1 != ((v2 + 106) ^ 0x2E0))) ^ v2)))();
}

uint64_t sub_1AC1ACFA0@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;

  v6 = (v5 + 1094096256) & 0xBEC96AE9;
  v7 = (v6 ^ (v2 + 736)) + v3;
  v8 = v3 + 1;
  *(_DWORD *)(*(_QWORD *)(v4 - 0x48247A3086942776) + 4 * v7) = a1;
  *(_DWORD *)(v4 - 0x48247A308694277ALL) = v8;
  v9 = v8 + v2;
  if (v8 + v2 < 0)
    v9 = -v9;
  return ((uint64_t (*)(void))(*(_QWORD *)(a2
                                        + 8
                                        * (int)((((int)((v9 ^ (((v6 - 190357234) & 0xB589EB9) - 4275881))
                                                      + ((2 * v9) & 0xFF7D87FE)
                                                      + 4275200) >= 0)
                                               * (((v6 - 190357234) & 0xB589EB9 ^ 0x1F2) - 482)) ^ (v6 - 190357234) & 0xB589EB9))
                            - 8))();
}

uint64_t sub_1AC1AD090@<X0>(uint64_t a1@<X8>)
{
  int v1;
  unsigned int v2;
  _QWORD *v3;
  unsigned int v4;
  int v5;

  v5 = *(_DWORD *)(*v3 + 4 * v4) == v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (((8 * v5) | (v5 << 6)) ^ v2)) - 143 * (v2 ^ 0x2AE) + 850))();
}

uint64_t sub_1AC1AD0CC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (((v2 - 1 >= 0) * ((v1 ^ 0x1F2) - 482)) ^ v1)) - 8))();
}

uint64_t sub_1AC1AD100(uint64_t result)
{
  int v1;
  int v2;
  int v3;
  int *v4;
  int v5;
  int v6;

  if ((v1 + v2 - 1) >= 0x7FFFFFFF)
    v6 = -v3;
  else
    v6 = v5;
  *v4 = v6;
  *(_DWORD *)(result + 12) = 403330907;
  return result;
}

uint64_t sub_1AC1AD13C(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))(qword_1E5B52930[(492 * (*(_DWORD *)(a2 + 4) == 576264655)) ^ 0x6E5u] - 8))(4294925278);
}

uint64_t sub_1AC1AD180@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(a2 + 96) + 448) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 12);
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v2 + 10472) - 8))(0);
}

uint64_t sub_1AC1AD1D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;

  *(_BYTE *)(a1 + (v6 + v4)) = *(_BYTE *)(v3 + (v6 + v4));
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v1 + 8 * ((1016 * (v6 - 1 == v2)) ^ v5)) - 8))(0);
}

void sub_1AC1AD210(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)a1 ^ (1759421093 * ((a1 - 2 * (a1 & 0xF4FD5159) - 184725159) ^ 0x4780E10D));
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = &v8 | 0x29B9FB8;
  v5 = 1224239923 * ((&v8 & 0x29B9FB8 | ~v4) ^ 0xFD79D90);
  v6 = -1224239923 * ((&v8 & 0x29B9FB8 | ~v4) ^ 0xFD79D90)
     + 1824576651 * (*(_DWORD *)(a1 + 24) - 1759421093 * ((a1 - 2 * (a1 & 0xF4FD5159) - 184725159) ^ 0x4780E10D));
  v7 = (*(_DWORD *)(a1 + 48) ^ (1759421093 * ((a1 - 2 * (a1 & 0xF4FD5159) - 184725159) ^ 0x4780E10D))) - v5;
  v15 = *(_QWORD *)(a1 + 8);
  v8 = v3;
  v14 = v6 - 1232728751;
  v10 = v5 ^ (v1 + 1695026943);
  v11 = v7 - 318000879;
  v12 = v3;
  v13 = v2;
  sub_1AC1AE5E8((uint64_t)&v8);
  __asm { BR              X8 }
}

uint64_t sub_1AC1AD374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unint64_t *a12, char a13, int a14, uint64_t a15, int a16)
{
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v24 = *(_BYTE *)(v16 + 28) - v17;
  v25 = (((&a11 | 0xB8431E8) - (&a11 | 0xF47BCE17) - 193212905) ^ 0xB8F981BC) * v22;
  a14 = v23 + v25 - 1110458507;
  a12 = &STACK[0x335F4D7B17DD4E1F];
  a16 = v20 - v25 + 248;
  a15 = v21;
  a13 = ((((v20 ^ 0xFA) + 19 * v24 - 116) ^ 0x76) + ((2 * ((v20 ^ 0xFA) + 19 * v24 - 116)) & 0xEC) - 22) ^ ((((&a11 | 0xE8) - (&a11 | 0x17) + 23) ^ 0xBC) * v22);
  sub_1AC1A89EC((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 + 8 * ((1869 * (a11 == v18)) ^ v20))
                                                                                       - 12))(v26, v27, v28, v29, v30, v31);
}

uint64_t sub_1AC1AD458()
{
  int v0;
  int v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = v1 - 1704312719 < ((v0 - 1034) ^ 0x468u) - 1431;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((8 * v3) | (16 * v3)) ^ v0)) - 12))();
}

uint64_t sub_1AC1AD498@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  a4 = (v9 - 300) ^ (1374699841 * (((&a4 | 0x498218C7) - (&a4 & 0x498218C7)) ^ 0x247600CE));
  a6 = a1;
  a7 = a3;
  v10 = ((uint64_t (*)(unsigned int *))((char *)*(&off_1E5B56B60 + (v9 ^ 0x5B6)) - 12))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v8 + 8 * (((a5 == v7) * (((v9 - 1132) | 0xD4) ^ 0x1F0)) ^ v9))
                                          - 12))(v10);
}

void sub_1AC1AD538(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)(v1 + 32) - 0x3703560E774B811BLL) = a1;
  *(_DWORD *)(v1 + 4) = 1797235913;
}

uint64_t sub_1AC1AD614(_DWORD *a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t result;
  unsigned int v6;
  _BOOL4 v7;
  unsigned int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = 1374699841 * (((a1 | 0xEA022A98) - (a1 & 0xEA022A98)) ^ 0x87F63291);
  v3 = a1[10] + v2;
  v4 = a1[5] + v2;
  v8 = v3 + 460628867 * ((2 * (&v8 & 0x5CCA69C) - &v8 - 97298078) ^ 0xB6A5DB1F) - 1404134225;
  result = nullsub_1(&v8);
  if (v4 > 1964263797)
  {
    if (v4 == 1964263798)
    {
      v6 = 2;
    }
    else
    {
      if (v4 != 1964263799)
        goto LABEL_11;
      v6 = 1;
    }
LABEL_10:
    v7 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_1E5B56B60 + (int)(v3 - 1172345409)))((*((_DWORD *)*(&off_1E5B56B60 + (int)(v3 ^ 0x45E09227)) + 6 * v6 + 1) - 576264642), 3511634213) == 0;
    __asm { BR              X9 }
  }
  if (v4 == -2045490826)
  {
    v6 = 3;
    goto LABEL_10;
  }
  if (v4 == 1964263795)
  {
    v6 = 0;
    goto LABEL_10;
  }
LABEL_11:
  *a1 = -1797193867;
  return result;
}

uint64_t sub_1AC1ADC5C(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = 1759421093 * (((a1 | 0x72C27792) - (a1 & 0x72C27792)) ^ 0xC1BFC7C6);
  v3 = *(_DWORD *)(a1 + 20) - v2;
  v4 = *(_DWORD *)a1 + v2;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = 1374699841 * ((&v9 + 1892788145 - 2 * ((unint64_t)&v9 & 0x70D1A7B1)) ^ 0x1D25BFB8);
  v14 = (v2 ^ *(_DWORD *)(a1 + 16) ^ 0xD7CE4973) - v7;
  v9 = v5;
  v11 = v6;
  v12 = v3 - v7 + 2024873269;
  v13 = (v4 ^ 0xFFB5DC58) + v7 - 402654244 + ((2 * v4) & 0x3DB23BCC ^ 0x90034C);
  result = ((uint64_t (*)(uint64_t *))((char *)*(&off_1E5B56B60 + (int)(v3 ^ 0x874EE3F1)) - 12))(&v9);
  *(_DWORD *)(a1 + 4) = v10;
  return result;
}

uint64_t sub_1AC1ADDC8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 88) = 77;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_1AC1ADDE8(uint64_t result)
{
  unint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;

  v1 = 1759421093 * ((result - 2 * (result & 0xCE10C030FCF42454) - 0x31EF3FCF030BDBACLL) ^ 0xE0AE01604F899400);
  v2 = *(_DWORD *)result - v1;
  v3 = *(_DWORD *)(result + 24) ^ v1;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + v1;
  v6 = *(_QWORD *)(result + 16);
  v7 = v6 + v1;
  v8 = *(_DWORD *)(result + 4) + v1;
  v9 = *(_DWORD *)(result + 44) + v1;
  v10 = v6 == v4;
  v11 = v7 > v5;
  if ((v8 & 1) != 0)
    v12 = v11;
  else
    v12 = v10;
  if (!v12)
    v9 = v3;
  *(_DWORD *)(result + 40) = v9 ^ v2;
  return result;
}

uint64_t sub_1AC1ADE7C(_DWORD *a1)
{
  unsigned int v2;
  uint64_t result;
  int v4;

  v2 = *a1 - 1734042137 * ((a1 & 0x8260E9F2 | ~(a1 | 0x8260E9F2)) ^ 0x2151D540);
  result = ((uint64_t (*)(char *, _QWORD))*(&off_1E5B56B60 + (int)(v2 ^ 0xE1F269AA)))((char *)*(&off_1E5B56B60 + (int)(v2 ^ 0xE1F269DA)) - 8, *(&off_1E5B56B60 + (int)(v2 ^ 0xE1F26954)));
  v4 = *(_DWORD *)*(&off_1E5B56B60 + (int)(v2 ^ 0xE1F269EA));
  if ((_DWORD)result)
    v4 = -1797194121;
  a1[1] = v4;
  return result;
}

void sub_1AC1ADF34()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unsigned int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = qword_1EEC7B118 - qword_1EEC7B188 - (_QWORD)&v1;
  qword_1EEC7B188 = 56757557 * v0 + 0x6B31CD68A7830586;
  qword_1EEC7B118 = 56757557 * (v0 ^ 0x89C68E6DECB4CE2ELL);
  LOBYTE(v0) = 53 * ((qword_1EEC7B118 + 53 * v0 - 122) ^ 0x2E);
  v2 = (char *)*(&off_1E5B56B60
               + (v0 ^ byte_1AC3C13E0[byte_1AC3BD400[v0] ^ 0x7E])
               - 157)
     - 4;
  v3 = 1380 - 535753261 * (((&v2 | 0x1C15E18E) - (&v2 & 0x1C15E18E)) ^ 0x16E1EFA1);
  sub_1AC1940FC((uint64_t)&v2);
}

_BYTE *sub_1AC1AE058(_BYTE *result, char a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = -(int)result & 7;
  if (v3 > a3)
    LODWORD(v3) = a3;
  switch((int)v3)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_6;
    case 6:
      goto LABEL_5;
    case 7:
      *result++ = a2;
LABEL_5:
      *result++ = a2;
LABEL_6:
      *result++ = a2;
LABEL_7:
      *result++ = a2;
LABEL_8:
      *result++ = a2;
LABEL_9:
      *result++ = a2;
LABEL_10:
      *result++ = a2;
      break;
    default:
      break;
  }
  v4 = a3 - v3;
  v6 = v4;
  v5 = v4 & 7;
  switch(v6)
  {
    case 0uLL:
      return result;
    case 1uLL:
      goto LABEL_20;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      goto LABEL_18;
    case 4uLL:
      goto LABEL_17;
    case 5uLL:
      goto LABEL_16;
    case 6uLL:
      goto LABEL_15;
    case 7uLL:
      *result++ = a2;
LABEL_15:
      *result++ = a2;
LABEL_16:
      *result++ = a2;
LABEL_17:
      *result++ = a2;
LABEL_18:
      *result++ = a2;
LABEL_19:
      *result++ = a2;
LABEL_20:
      *result = a2;
      break;
    default:
      result = (_BYTE *)((uint64_t (*)(void))((char *)&loc_1AC1AE0E8 + 4 * byte_1AC3B9DB7[(v5 >> 3) & 7]))();
      break;
  }
  return result;
}

uint64_t sub_1AC1AE14C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_1AC1AE164(uint64_t result)
{
  unint64_t v1;
  int v2;
  int v3;
  unint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  _BOOL4 v9;
  int v10;
  int v11;

  v1 = 1224239923
     * ((-2 - ((~result | 0xA9794F52C0023E71) + (result | 0x5686B0AD3FFDC18ELL))) ^ 0x8123FA3B32B1C3A6);
  v2 = *(_DWORD *)(result + 40) - v1;
  v3 = *(_DWORD *)(result + 8) ^ v1;
  v4 = *(_QWORD *)(result + 24) + v1;
  v5 = *(_DWORD *)(result + 4) - v1;
  v6 = *(_DWORD *)(result + 12) ^ v1;
  v7 = *(_QWORD *)(result + 32) - v1;
  v8 = v7 > v4;
  v9 = v7 == v4;
  v10 = v8;
  if ((v2 & 1) != 0)
    v9 = v10;
  if (v9)
    v11 = v5;
  else
    v11 = v3;
  *(_DWORD *)result = v6 ^ v11;
  return result;
}

uint64_t sub_1AC1AE20C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_1AC1AE224(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 24);
  return 0;
}

uint64_t sub_1AC1AE23C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_1AC1AE254(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  int v6;
  uint64_t v7;

  v1 = 1178560073 * (((result | 0x39CAC1B204E59057) - (result & 0x39CAC1B204E59057)) ^ 0x473C2F236F39017);
  v2 = *(_QWORD *)(result + 16) + v1;
  v3 = *(_QWORD *)result ^ v1;
  v4 = v2 == v3;
  v5 = v2 >= v3;
  v6 = !v4;
  if (((*(_DWORD *)(result + 12) + (_DWORD)v1) & 1) == 0)
    v5 = v6;
  v4 = !v5;
  v7 = 36;
  if (!v4)
    v7 = 32;
  *(_DWORD *)(result + 28) = *(_DWORD *)(result + v7) ^ v1 ^ (*(_DWORD *)(result + 8) - v1);
  return result;
}

uint64_t sub_1AC1AE2E4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8) - 1755732067 * ((-2 - ((a1 | 0x71A11D05) + (~(_DWORD)a1 | 0x8E5EE2FA))) ^ 0x50985F21);
  v2 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 16);
  v4 = v2;
  v1 -= 426523008;
  v5 = v1
     - 1178560073
     * (((&v4 | 0xB9E09D61) - &v4 + (&v4 & 0x461F6298)) ^ 0x8BF69D21)
     + 292;
  return ((uint64_t (*)(uint64_t *))((char *)*(&off_1E5B56B60 + v1) - 4))(&v4);
}

void sub_1AC1AE3E0()
{
  unint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = qword_1EEC7A568 ^ (unint64_t)&v2 ^ qword_1EEC7B118;
  qword_1EEC7A568 = 56757557 * v0 + 0x76397192134B31D2;
  qword_1EEC7B118 = 56757557 * (v0 ^ 0x89C68E6DECB4CE2ELL);
  v4 = 1380 - 535753261 * (&v3 ^ 0xAF40E2F);
  LOBYTE(v0) = 53 * ((qword_1EEC7B118 + 53 * v0 - 46) ^ 0x2E);
  v3 = (uint64_t)*(&off_1E5B56B60
                + (v0 ^ byte_1AC3BD300[byte_1AC3B9AB0[v0] ^ 0xD3])
                + 96);
  sub_1AC1940FC((uint64_t)&v3);
  v3 = (uint64_t)*(&off_1E5B56B60
                + ((53 * ((qword_1EEC7B118 + qword_1EEC7A568) ^ 0x2E)) ^ byte_1AC3C4CD0[byte_1AC3C12E0[(53 * ((qword_1EEC7B118 + qword_1EEC7A568) ^ 0x2E))] ^ 0x25])
                - 39);
  v4 = 1380 - 535753261 * (((&v3 | 0x307CB9A4) - (&v3 & 0x307CB9A4)) ^ 0x3A88B78B);
  sub_1AC1940FC((uint64_t)&v3);
  v1 = 3804331 * ((~&v3 & 0x2C427A4A | &v3 & 0xD3BD85B5) ^ 0xD6DC891C);
  BYTE4(v3) = 74 - v1;
  LODWORD(v3) = v1 ^ 0x412;
  sub_1AC174218((uint64_t)&v3);
}

uint64_t sub_1AC1AE5E8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = 1224239923 * (((a1 | 0x54F5E249) - a1 + (a1 & 0xAB0A1DB6)) ^ 0xA6461F9E);
  v3 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)a1;
  v7 = 1224239923
     * (((&v10 | 0xE2EFC804) - &v10 + (&v10 & 0x1D1037F8)) ^ 0x105C35D3);
  v8 = (*(_DWORD *)(a1 + 12) ^ v2) - 1695027313;
  v11 = v2 + *(_DWORD *)(a1 + 16) - v7 + 301653203;
  v13 = v4;
  v14 = v5;
  v12 = v3;
  v16 = v8 + v7 + 908;
  v10 = v6;
  result = ((uint64_t (*)(uint64_t *))*(&off_1E5B56B60 + v8))(&v10);
  *(_DWORD *)(a1 + 8) = v15;
  return result;
}

uint64_t sub_1AC1AE710(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = 1755732067 * (a1 ^ 0xDEC6BDDB);
  v3 = *(_DWORD *)(a1 + 20) - v2;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = 2060617089 * (*(_DWORD *)(a1 + 16) - v2) + 1462342123;
  v3 -= 368399995;
  v9 = 235795823 * (((&v11 | 0x91AE193F) + (~&v11 | 0x6E51E6C0)) ^ 0x5035067);
  v16 = v9 ^ (v3 + 1587);
  v17 = v5;
  v12 = v9 + (v8 ^ 0xF3F9FC9D) + ((2 * v8) & 0xE7F3F93A) + 2105454588;
  v13 = v6;
  v14 = v4;
  v11 = v7;
  result = ((uint64_t (*)(uint64_t *))*(&off_1E5B56B60 + v3))(&v11);
  *(_DWORD *)(a1 + 40) = v15;
  return result;
}

uint64_t sub_1AC1AE84C(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  _BOOL4 v9;
  int v10;
  int v11;

  v1 = 235795823 * ((((2 * result) | 0xAE1C50A9AAB8544) - result - 0x570E2854D55C2A2) ^ 0xDC0587BD9F88BFBLL);
  v2 = *(_DWORD *)(result + 44) - v1;
  v3 = *(_QWORD *)(result + 16) - v1;
  v4 = *(_DWORD *)(result + 4) ^ v1;
  v5 = *(_DWORD *)(result + 40) ^ v1;
  v6 = *(_DWORD *)(result + 24) - v1;
  v7 = *(_QWORD *)(result + 32) ^ v1;
  v8 = v7 < v3;
  v9 = v7 < (unint64_t)v3;
  v10 = v8;
  if ((v6 & 1) != 0)
    v9 = v10;
  if (v9)
    v11 = v2;
  else
    v11 = v4;
  *(_DWORD *)result = v5 ^ v11;
  return result;
}

void sub_1AC1AE8EC(_DWORD *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *a1 - 1225351577 * (((a1 | 0xD6503E34) - (a1 & 0xD6503E34)) ^ 0xF5CAE622);
  v2 = *(_QWORD *)*(&off_1E5B56B60 + (int)(v1 ^ 0x7F7DFD14));
  v3 = v1
     - 1734042137 * ((&v3 & 0xE0962FD3 | ~(&v3 | 0xE0962FD3)) ^ 0x43A71361)
     - 2138962023;
  v4 = v2;
  sub_1AC18A7FC((uint64_t)&v3);
}

uint64_t sub_1AC1AE9D8(mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, _QWORD *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v17;
  mach_port_t reply_port;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  mach_msg_header_t msg;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v30 = 1;
  v31 = a4;
  v32 = 16777472;
  v33 = a5;
  v34 = *MEMORY[0x1E0C804E8];
  v17 = *a3;
  v35 = a2;
  v36 = v17;
  v37 = a5;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B000000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v19)
    {
      if (msg.msgh_id == 71)
      {
        v20 = 4294966988;
      }
      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v20 = 4294966996;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            v21 = v33;
            if (v33 == v47)
            {
              v20 = 0;
              v22 = v34;
              *a3 = v38;
              v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v20 = 4294966996;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port)
              v20 = 4294966996;
            else
              v20 = HIDWORD(v31);
          }
        }
        else
        {
          v20 = 4294966996;
        }
      }
      else
      {
        v20 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v20;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v20;
}

uint64_t sub_1AC1AEC30(mach_port_t a1, unsigned int a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  mach_port_t reply_port;
  uint64_t v9;
  uint64_t v10;
  mach_msg_header_t msg;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3[5];
  v19 = a3[4];
  v20 = v4;
  v5 = a3[7];
  v21 = a3[6];
  v22 = v5;
  v6 = a3[1];
  v15 = *a3;
  v16 = v6;
  v7 = a3[3];
  v17 = a3[2];
  v13 = *MEMORY[0x1E0C804E8];
  v14 = a2;
  v18 = v7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B100000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }
  if ((_DWORD)v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (msg.msgh_id == 71)
  {
    v10 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }
  if (msg.msgh_id != 1301)
  {
    v10 = 4294966995;
    goto LABEL_17;
  }
  v10 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0)
    goto LABEL_17;
  if (msg.msgh_size != 36)
    goto LABEL_17;
  if (msg.msgh_remote_port)
    goto LABEL_17;
  v10 = v14;
  if (v14)
    goto LABEL_17;
  return v10;
}

uint64_t sub_1AC1AEDBC(mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, _QWORD *a9, _DWORD *a10)
{
  mach_port_t reply_port;
  uint64_t v13;
  uint64_t v14;
  int v15;
  mach_msg_header_t msg;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _BYTE v23[28];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v18 = 1;
  v19 = a6;
  v20 = 16777472;
  v21 = a7;
  v22 = *MEMORY[0x1E0C804E8];
  *(_DWORD *)v23 = a2;
  *(_DWORD *)&v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  v24 = a7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B200000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v13)
    {
      if (msg.msgh_id == 71)
      {
        v14 = 4294966988;
      }
      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v14 = 4294966996;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              v14 = 0;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port)
              v14 = 4294966996;
            else
              v14 = HIDWORD(v19);
          }
        }
        else
        {
          v14 = 4294966996;
        }
      }
      else
      {
        v14 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v14;
}

uint64_t sub_1AC1AEFA8(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v15;
  int v16;
  mach_msg_header_t msg;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B300000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }
    if (msg.msgh_id == 71)
    {
      v12 = 4294966988;
    }
    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            v12 = v18;
            if (!v18)
            {
              v15 = v20;
              *a2 = v19;
              *a3 = v15;
              v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }
            goto LABEL_23;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port)
            v13 = 1;
          else
            v13 = v18 == 0;
          if (v13)
            v12 = 4294966996;
          else
            v12 = v18;
          goto LABEL_23;
        }
      }
      v12 = 4294966996;
    }
    else
    {
      v12 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(&msg);
    return v12;
  }
  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

void sub_1AC1AF120(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)a1 + 1374699841 * ((a1 + 1891232920 - 2 * (a1 & 0x70B9EC98)) ^ 0x1D4DF491);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unint64_t **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unint64_t **)(v3 - 0x6C02322A16757C5DLL);
  v11 = v1 + 1225351577 * ((&v8 & 0x2DCAFBC8 | ~(&v8 | 0x2DCAFBC8)) ^ 0xF1AFDC21) + 673;
  v8 = &STACK[0x4E242FFD6E716463];
  v9 = v6;
  v12 = v5;
  v13 = v2;
  v10 = v3;
  ((void (*)(unint64_t **))((char *)*(&off_1E5B5B480 + (v1 ^ 0x274)) - 4))(&v8);
  v7 = *(unint64_t **)(v3 - 0x6C02322A16757C65);
  LODWORD(v10) = (535753261
                * ((-2006167131 - (&v8 | 0x886C51A5) + (&v8 | 0x7793AE5A)) ^ 0x7D67A075)) ^ (v1 + 1340);
  v8 = v7;
  v9 = &STACK[0x4E242FFD6E716453];
  sub_1AC1AFE5C((uint64_t)&v8);
  LODWORD(v8) = (1178560073 * ((((2 * &v8) | 0x723D27DA) - &v8 + 1189178387) ^ 0x38AEB8F)) ^ (v1 + 871);
  v9 = v4;
  sub_1AC1D5BB4((uint64_t)&v8);
  __asm { BR              X8 }
}

uint64_t sub_1AC1AF358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t), uint64_t a12)
{
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 - 136) = v14;
  *(_QWORD *)(v18 - 128) = v15;
  *(_DWORD *)(v18 - 120) = v13
                         + 1225351577 * ((2 * ((v18 - 144) & 0x5F851580) - (v18 - 144) + 544926330) ^ 0x3E0326C)
                         + 588;
  *(_QWORD *)(v18 - 112) = v16;
  *(_QWORD *)(v18 - 104) = a12;
  *(_QWORD *)(v18 - 144) = v14;
  v19 = a11(v18 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17
                                                      + 8
                                                      * (((v13 - 479) * ((v12 - 1) < 0x7FFFFFFF)) ^ (v13 - 85)))
                                          - 12))(v19);
}

uint64_t sub_1AC1AF3E8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  *(_QWORD *)(v7 - 136) = v2;
  *(_QWORD *)(v7 - 128) = v3;
  *(_QWORD *)(v7 - 112) = v2;
  *(_DWORD *)(v7 - 120) = v0 + 460628867 * ((~((v7 - 144) | 0xCAFFCADD) + ((v7 - 144) & 0xCAFFCADD)) ^ 0x7996B75F) + 305;
  *(_QWORD *)(v7 - 144) = v4;
  ((void (*)(uint64_t))((char *)*(&off_1E5B5B480 + (v0 & 0x5367C071)) - 8))(v7 - 144);
  v8 = 1759421093 * ((((v7 - 144) | 0x5FD26FEB) + (~(v7 - 144) | 0xA02D9014)) ^ 0xECAFDFBE);
  *(_QWORD *)(v7 - 144) = v1;
  *(_DWORD *)(v7 - 132) = v8 + v0 - 23;
  *(_DWORD *)(v7 - 128) = v8 + v6 - 867425886;
  v9 = sub_1AC1DCF5C(v7 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5
                                                      + 8
                                                      * ((1424
                                                        * ((((v0 ^ 0xD5) + 1) ^ (*(_DWORD *)(v7 - 136) == -529970100)) & 1)) ^ v0))
                                          - 12))(v9);
}

uint64_t sub_1AC1AF500()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (((v2 - 394) * ((v0 - 1) < 0x7FFFFFFF)) ^ v2)) - 12))();
}

uint64_t sub_1AC1AF52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;

  v5 = *(_QWORD *)(v8 + 8);
  v6 = 108757529 * (((v4 - 144) & 0x3203ED9B | ~((v4 - 144) | 0x3203ED9B)) ^ 0x2D60704F);
  *(_DWORD *)(v4 - 128) = (v3 - 213) ^ v6;
  *(_DWORD *)(v4 - 144) = v6 ^ 0x8AD8EA4;
  *(_QWORD *)(v4 - 136) = v10;
  sub_1AC1DC940((_DWORD *)(v4 - 144));
  *(_QWORD *)(v4 - 144) = v0;
  *(_QWORD *)(v4 - 136) = v0;
  *(_QWORD *)(v4 - 128) = v1;
  *(_DWORD *)(v4 - 120) = v3
                        + 1225351577
                        * ((366398014 - ((v4 - 144) | 0x15D6CA3E) + ((v4 - 144) | 0xEA2935C1)) ^ 0xC9B3EDD7)
                        + 673;
  *(_QWORD *)(v4 - 112) = v2;
  *(_QWORD *)(v4 - 104) = v10;
  v9(v4 - 144);
  *(_DWORD *)(v4 - 128) = (v3 + 1340) ^ (535753261
                                       * ((((v4 - 144) | 0xD392A014) - (v4 - 144) + ((v4 - 144) & 0x2C6D5FE8)) ^ 0xD966AE3B));
  *(_QWORD *)(v4 - 144) = v0;
  *(_QWORD *)(v4 - 136) = v5;
  return sub_1AC1AFE5C(v4 - 144);
}

void sub_1AC1AF684(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) ^ (1225351577 * ((-2 - ((a1 | 0x21ABC784) + (~(_DWORD)a1 | 0xDE54387B))) ^ 0xFDCEE06D));
  __asm { BR              X10 }
}

uint64_t sub_1AC1AF750@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v12 = 1755732067 * ((&a4 - 986430956 - 2 * ((unint64_t)&a4 & 0xC5344214)) ^ 0x1BF2FFCF);
  a8 = v12 ^ 0x3E614600;
  a6 = (v10 + 154) ^ v12;
  a7 = &STACK[0x224C51092B41EA86];
  a4 = &STACK[0x305A3E6975AF783];
  a5 = v11;
  v13 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * (v10 - 56)) - 4))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * ((1439
                                                        * (*(_DWORD *)(v11 - 0x55F9EC3874D1DF27) == ((v10 + 688347391) & 0xD6F8A7FE ^ (v8 - 386)))) ^ v10))
                                          - 12))(v13);
}

uint64_t sub_1AC1AF848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  int v13;

  return (*(uint64_t (**)(void))(v12 + 8 * ((57 * (a11 != v13 + v11 - 414)) ^ v13)))();
}

uint64_t sub_1AC1AF88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11)
{
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;

  *(_BYTE *)(v11 + (v14 + v12)) = *(_BYTE *)(a9 + (v14 + v12)) ^ 0x75;
  return (*(uint64_t (**)(void))(v16 + 8 * (((v14 + 1 + v12 < ((v17 - 254) ^ (v15 - 96) ^ a11)) * v13) ^ v17)))();
}

void sub_1AC1AF8D8(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(*(_QWORD *)(v3 + 24) - 0x6E853F5AFCAB5936) = v1;
  *(_DWORD *)(v4 - 0x75270371B30603F7) = v2;
  *(_DWORD *)v3 = *a1;
}

void sub_1AC1AF940(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) - 3804331 * (((a1 | 0x51A664) - (a1 & 0x51A664)) ^ 0x7E848392);
  __asm { BR              X10 }
}

uint64_t sub_1AC1AFA24@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  v14 = v8 & 0x271BC6BB;
  v15 = 1759421093 * ((-674533834 - (&a5 | 0xD7CB6E36) + (&a5 | 0x283491C9)) ^ 0x9B49219D);
  a5 = ((((v14 - 1436447445) & 0x559E72FF) + 1466631455) ^ ((v14 - 54) | 0xB))
     - v15
     + *a1
     - v13
     + *(_DWORD *)(v9 - 0x55F9EC3874D1DF2FLL)
     - 152734923;
  a6 = v15 + 991294845;
  a8 = (v8 & 0x271BC6BB) - v15 + 1148;
  a7 = v9;
  v16 = ((uint64_t (*)(int *))(*(_QWORD *)(a2 + 8 * ((v8 & 0x271BC6BB) - 303)) - 8))(&a5);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v12 + 8 * ((499 * (*v10 == v11)) ^ v14)) - 4))(v16);
}

uint64_t sub_1AC1AFB40()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((15 * (*(_QWORD *)(v0 + 8) == 0x74F0547AE6FE7488)) ^ v2))
                            - (((v2 + 542) ^ 0xFFFFFFFFFFFFFAADLL)
                             + 5 * (v2 ^ 0x27B))))();
}

uint64_t sub_1AC1AFB98()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((v1 != ((10 * (v0 ^ 0x47C)) ^ 0x91A8DE5)) * (v0 - 899)) ^ v0))
                            - 8))();
}

void sub_1AC1AFBD4()
{
  _DWORD *v0;

  *v0 = -2000486839;
}

uint64_t sub_1AC1AFE5C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (535753261 * (((a1 | 0xB23F3C90) - (a1 & 0xB23F3C90)) ^ 0xB8CB32BF));
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B5B480 + v1 - 1880)
                              + ((29 * (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))) ^ v1))
                            - ((121 * (v1 ^ 0x7ADu)) ^ 0x53BLL)))();
}

uint64_t sub_1AC1AFEE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;

  v4 = *(_DWORD *)(v2 - 0x4E242FFD6E71642FLL);
  v5 = v4 + 89 * (v3 ^ 0x525);
  v7 = v5 - 1115731922;
  v6 = v5 - 1115731922 < 0;
  v8 = 1115731922 - v5;
  if (!v6)
    v8 = v7;
  *(_DWORD *)(v1 - 0x4E242FFD6E71642FLL) = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * (v3 ^ (4
                                               * ((v8 ^ 0xDDD77FDD) + 2134672128 + ((2 * v8) & 0xBBAEFFBA) == 1561592541))))
                            - ((v3 - 46) | 0x200u)
                            + 1785))();
}

uint64_t sub_1AC1AFF84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  *(_DWORD *)(*(_QWORD *)(v1 - 0x4E242FFD6E71642BLL) + 4 * (v4 - 1561592542)) = *(_DWORD *)(*(_QWORD *)(v2 - 0x4E242FFD6E71642BLL)
                                                                                            + 4 * (v4 - 1561592542));
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((562 * (v4 - 1 != ((v5 - 462) ^ 0x291) + v3)) ^ (v5 - 462))) - 12))();
}

void sub_1AC1AFFF0()
{
  JUMPOUT(0x1AC1AFFB8);
}

uint64_t sub_1AC1AFFF8(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v1 = 108757529 * ((a1 & 0x9335B0F8 | ~(a1 | 0x9335B0F8)) ^ 0x8C562D2C);
  v2 = *(_DWORD *)(a1 + 12) + v1;
  v3 = *(_DWORD *)(a1 + 8) ^ v1;
  v4 = *(_DWORD *)(*(_QWORD *)a1 - 0x4E242FFD6E71642FLL);
  v6 = v4 - 1115729964;
  v5 = v4 - 1115729964 < 0;
  v7 = 1115729964 - v4;
  if (!v5)
    v7 = v6;
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B5B480 + (v2 ^ 0x4DC))
                              + ((((v3 - 2129748955) < 4 * (unint64_t)v7) * ((v2 - 974) ^ 0x97)) ^ v2))
                            - 12))();
}

uint64_t sub_1AC1B00C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2
                                                                        + 8
                                                                        * (((v3 != ((78 * (v4 ^ 0xCB)) ^ 0x7EF16749))
                                                                          * ((v4 ^ 0xCB) + 861)) ^ v4))
                                                            - 4))(a1, a2, 988611573);
}

uint64_t sub_1AC1B0108(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1
                                                                                        + 8 * ((v3 + 1244) ^ 0x18A))
                                                                            - ((5 * ((v3 + 1244) ^ 0x4C9u)) ^ 0xA6)))(a1, 5 * ((v3 + 1244) ^ 0x4C9u), (v3 + 1244), 3238230742, v2);
}

uint64_t sub_1AC1B0188@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W3>, int a4@<W4>, int a5@<W8>)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  char v8;

  *(_BYTE *)(*(_QWORD *)(a1 + 16) + (a4 + a5)) = ((a3 ^ v7) >> v8)
                                                             - ((2 * ((a3 ^ v7) >> v8)) & 0xEA)
                                                             + 117;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((110 * (a4 + ((a2 + 1546001453) & 0xA3D9E7BA) - 1171 == v6)) ^ a2))
                            - 4))();
}

uint64_t sub_1AC1B01F4(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * ((394 * (v3 + (((a2 + 1024) | 0x41) ^ 0x4E3) == 32)) ^ ((a2 + 1024) | 0x41)))
                                          - ((5 * (((a2 + 1024) | 0x41) ^ 0x4C9u)) ^ 0xA6)))(a1);
}

uint64_t sub_1AC1B0244(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;
  _BOOL4 v7;

  v7 = v3 > 0x7321D640;
  if (v7 == v6 - 1097952822 < -1931597377)
    v7 = v6 - 1097952822 < v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((((a3 - 1089) ^ 0x31C) * v7) ^ a3)) - 12))();
}

uint64_t sub_1AC1B02B4@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W8>)
{
  int v3;
  _QWORD *v4;
  int v5;

  return sub_1AC1B0188(a1, a2, *(_DWORD *)(*v4 + 4 * (v5 - 1313839093)), v3, a3);
}

uint64_t sub_1AC1B02E0(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 24) = a3;
  return result;
}

void sub_1AC1B02E8(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;

  v1 = 535753261 * (((a1 | 0xB0E1CD18) - a1 + (a1 & 0x4F1E32E7)) ^ 0xBA15C337);
  v2 = *(_DWORD *)(a1 + 36) ^ v1;
  if (*(_QWORD *)(a1 + 40) | *(_QWORD *)a1)
    v3 = *(_DWORD *)(a1 + 16) + v1 == 1186336461;
  else
    v3 = 1;
  v4 = v3;
  __asm { BR              X8 }
}

uint64_t sub_1AC1B0448()
{
  int v0;
  _QWORD *v1;
  uint64_t v2;
  _BOOL4 v4;

  v4 = v1[8] == 0x3C817DD9AE37998 || (v1[1] | v1[6]) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((v4 * (v0 - 985)) ^ v0))
                            - ((v0 - 675090414) & 0x283D0F27 ^ 0x323)))();
}

uint64_t sub_1AC1B04B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unsigned int a8@<W8>, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *(_QWORD *)(v12 + 56);
  *(_DWORD *)(v10 - 0x3C817DD9AE37998) = 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 + 8 * (((v14 == 0x4E242FFD6E716433) * ((a8 + 124) ^ 0x3EC)) ^ a8)) - (a8 ^ 0x323)))(a1, v14, a2, a3, a4, a5, a6, a7, a9, a10, v11);
}

uint64_t sub_1AC1B0580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v30 = ((v29 - 1386298682 - 2 * ((v29 - 144) & 0xAD5EC356)) ^ 0x4DC2A17D) * v25;
  *(_DWORD *)(v29 - 144) = v30 ^ 0x8AE8EA4;
  *(_QWORD *)(v29 - 136) = &a24 + v24;
  *(_DWORD *)(v29 - 128) = (v27 - 526) ^ v30;
  sub_1AC1DC940((_DWORD *)(v29 - 144));
  return (*(uint64_t (**)(uint64_t))(v28
                                            + 8
                                            * (((((v26 == 0) ^ (3 * (v27 ^ 0xFA))) & 1)
                                              * ((601 * (v27 ^ 0x3A0)) ^ 0x7A2)) ^ (v27 + 397))))(a1);
}

uint64_t sub_1AC1B0644@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;

  v19 = (a1 - 647) | 0x30A;
  v20 = 1224239923 * ((2 * ((v18 - 144) & 0x28B277F8) - (v18 - 144) + 1464698880) ^ 0xA5FE75D7);
  *(_QWORD *)(v18 - 136) = v11;
  *(_DWORD *)(v18 - 128) = v12 - v20 + (v19 ^ 0xEFE086C6);
  *(_DWORD *)(v18 - 140) = (a1 - 736) ^ v20;
  *(_QWORD *)(v18 - 120) = v17;
  ((void (*)(uint64_t))(*(_QWORD *)(v15 + 8 * (a1 - 1586)) - 8))(v18 - 144);
  *(_DWORD *)(v18 - 136) = v19 - 235795823 * ((v18 - 1535003166 - 2 * ((v18 - 144) & 0xA481B672)) ^ 0x302CFF2B) - 781;
  *(_QWORD *)(v18 - 128) = a10;
  *(_QWORD *)(v18 - 144) = v13;
  (*(void (**)(uint64_t))(v15 + 8 * (int)(v19 & 0xDE6D1853)))(v18 - 144);
  *(_QWORD *)(v18 - 136) = a11;
  *(_QWORD *)(v18 - 128) = a5;
  *(_QWORD *)(v18 - 112) = a9;
  *(_QWORD *)(v18 - 104) = v13;
  *(_QWORD *)(v18 - 120) = a10;
  *(_DWORD *)(v18 - 144) = v19
                         - 1374699841 * (((v18 - 144) & 0xF661D896 | ~((v18 - 144) | 0xF661D896)) ^ 0x646A3F60)
                         - 1316;
  v21 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15 + 8 * (v19 - 1923)) - 4))(v18 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v16 + 8 * (v19 ^ (28 * (v14 == 0)))) - (v19 ^ 0x548u) + 702))(v21);
}

uint64_t sub_1AC1B08B0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  _DWORD *v10;

  v6 = 1759421093 * ((v5 - 504908027 - 2 * ((v5 - 144) & 0xE1E7B795)) ^ 0x529A07C1);
  *(_QWORD *)(v5 - 128) = v8;
  *(_QWORD *)(v5 - 120) = v4;
  *(_DWORD *)(v5 - 144) = (v1 + 859079435 + ((v3 - 1125746381) & 0x431987FF)) ^ v6;
  *(_DWORD *)(v5 - 136) = v3 - v6 - 257;
  result = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * (v3 ^ 0x2FE)) - 4))(v5 - 144);
  *v10 = v9;
  *(_DWORD *)(v0 + 32) = 2000528784;
  return result;
}

void gDmCYFQnze(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __asm { BR              X8 }
}

uint64_t sub_1AC1B0A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, int a18)
{
  uint64_t v18;
  uint64_t v19;

  a17 = (535753261 * ((&a17 & 0xC060732F | ~(&a17 | 0xC060732F)) ^ 0x356B82FF)) ^ 0xE1F2694A;
  v19 = sub_1AC1F43A8(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * ((2006 * (a18 == 2000528784)) ^ 0x17Du)) - 12))(v19);
}

uint64_t sub_1AC1B0B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, int a18, unsigned int a19)
{
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  a17 = &STACK[0x5DFEEBD0571B6252];
  a19 = 1084 - 460628867 * (&a17 ^ 0x4C96827D);
  sub_1AC1C27D8((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 + 8 * ((893 * (a18 == 2000528784)) ^ v19)) - 12))(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10);
}

uint64_t sub_1AC1B0BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, unsigned int a20,uint64_t a21)
{
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;

  v28 = 1178560073 * (&a17 ^ 0xBA947862);
  a20 = v28 ^ 0x41F;
  a19 = a15;
  a18 = v28 + 1510368783 * v26 + 858567209;
  sub_1AC1BA9E8(&a17);
  v29 = 1178560073
      * ((((&a17 | 0xDF15DF52) ^ 0xFFFFFFFE) - (~&a17 | 0x20EA20AD)) ^ 0x9A7E58CF);
  a18 = v29 + 1510368783 * v25 + 858567209;
  a20 = v29 ^ 0x41F;
  a19 = a15;
  sub_1AC1BA9E8(&a17);
  v30 = 1178560073
      * (((&a17 | 0x1512CA7D) - &a17 + (&a17 & 0xEAED3580)) ^ 0xAF86B21F);
  a18 = v30 + 327;
  a21 = v23;
  a19 = a15;
  a20 = ((v24 ^ 0xB9EFF6D9) + 1586720104 + ((2 * v24) & 0x73DFEDB2)) ^ v30;
  sub_1AC1D0F44(&a17);
  v31 = 1178560073
      * (((&a17 | 0x2D3C8000) - &a17 + (&a17 & 0xD2C37FF8)) ^ 0x97A8F862);
  a20 = v31 ^ ((v22 ^ 0x7DFBE455) - 1702395924 + ((2 * v22) & 0xFBF7C8AA));
  a19 = a15;
  a18 = v31 + 327;
  a21 = v21;
  sub_1AC1D0F44(&a17);
  v32 = 1178560073 * ((-46026529 - (&a17 | 0xFD41B0DF) + (&a17 | 0x2BE4F20)) ^ 0xB82A3742);
  a18 = v32 + 1510368783 * *a12 + 858567209;
  a20 = v32 ^ 0x41F;
  a19 = a15;
  v33 = sub_1AC1BA9E8(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v27 + 8 * ((190 * (a17 == 2000528784)) ^ 0x351u)) - 8))(v33);
}

uint64_t sub_1AC1B0E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unsigned int a18, int a19, uint64_t a20,int a21,unsigned int a22)
{
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;

  v25 = 628203409 * (((&a17 | 0xDFD5A239) - (&a17 & 0xDFD5A239)) ^ 0x5D5DAE0A);
  a20 = a15;
  a17 = &STACK[0x4414279470ECFEC6];
  a18 = 150565725 - v25;
  a19 = v24 - v25 - 2024873932;
  a22 = v25 ^ 0xD39AD405;
  v26 = sub_1AC1F4558((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23
                                                      + 8
                                                      * (((a21 == v22)
                                                        * (((v24 - 520) | 0x34) + ((v24 - 753) | 0x81) + 1046)) ^ v24))
                                          - 8))(v26);
}

uint64_t sub_1AC1B0F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, unsigned int a17, unint64_t *a18, unint64_t *a19, unint64_t *a20,unsigned int a21)
{
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  a21 = (v23 - 65) ^ (1225351577
                    * ((2 * (&a17 & 0x1AED1870) - &a17 + 1695737736) ^ 0x46883F9E));
  a18 = a16;
  a19 = &STACK[0x75270371B306041B];
  a20 = &STACK[0x6E853F5AFCAB595E];
  (*(void (**)(unsigned int *))(v21 + 8 * (v23 ^ 0xD5)))(&a17);
  a17 = (v23 + 240) ^ (1374699841
                     * ((((2 * &a17) | 0x4DE91C44) - &a17 - 653561378) ^ 0x4B00962B));
  a18 = &STACK[0x33553D115EA78D3E];
  a19 = a16;
  ((void (*)(unsigned int *))(*(_QWORD *)(v21 + 8 * (v23 - 126)) - 12))(&a17);
  a17 = (v23 - 38) ^ (1755732067 * ((&a17 & 0x7F19FE2D | ~(&a17 | 0x7F19FE2D)) ^ 0x5E20BC09));
  a18 = a16;
  v24 = sub_1AC1BE024((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t))(v22
                                            + 8
                                            * ((((_DWORD)a19 == 2000528784) * ((3 * (v23 ^ 0x1FA)) ^ 0x6E4)) ^ v23)))(v24);
}

uint64_t sub_1AC1B1104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  int v13;
  uint64_t v14;
  int v15;

  return (*(uint64_t (**)(void))(v14
                              + 8
                              * (((a13 == (((v15 + 32) | 0x2D0) ^ (v13 + 177))) * (((v15 + 304) | 0x140) ^ 0x4E3)) ^ v15)))();
}

uint64_t sub_1AC1B1148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v14;
  int v15;
  uint64_t v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8
                                        * ((1811
                                          * (((((a14 ^ v15) - ((2 * (a14 ^ v15)) & 0x50AA1872) - 1470821319) << ((v14 + 16) ^ 0xE0)) & 0xE76FF3F6 ^ 0x402A1072)
                                           + (((a14 ^ v15) - ((2 * (a14 ^ v15)) & 0x50AA1872) - 1470821319) ^ 0x5BE2F5C2)
                                           + 1870557120 != 1664510395)) ^ v14))
                            - 8))();
}

uint64_t sub_1AC1B11E0(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((((a3 ^ 0x320) - 1249278529) ^ (v6 + 1934) ^ 0x602)
                                * ((v4 + v3 + 206046725) > 7)) ^ a3 ^ 0x320)))();
}

uint64_t sub_1AC1B123C(int a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (int)(((v1 + ((a1 - 36845662) & 0xB7BBBBCC) + 60)
                                               * ((unint64_t)(v2 - v3) > 0x1F)) ^ a1))
                            - ((a1 - 1269) | 0x4A1u)
                            + 1461))();
}

uint64_t sub_1AC1B1290(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v5
                                                     + 8
                                                     * (((4 * (a4 ^ (v6 + 1082) ^ (v6 + 508)) + 425) * (v4 < 0x20)) ^ a4))
                                         - 4))(0);
}

uint64_t sub_1AC1B12C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;

  v13 = v10 + v9 + v8 + 508;
  v14 = *(_OWORD *)(v6 + v13 - 31);
  v15 = v11 + v13;
  *(_OWORD *)(v15 - 15) = *(_OWORD *)(v6 + v13 - 15);
  *(_OWORD *)(v15 - 31) = v14;
  return (*(uint64_t (**)(void))(v12 + 8 * ((863 * (v5 + a5 - (v7 & 0xFFFFFFE0) == -32)) ^ (v5 + a5 + 1452))))();
}

void sub_1AC1B132C()
{
  JUMPOUT(0x1AC1B12F4);
}

uint64_t sub_1AC1B1334(int a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (int)(((((a3 + 1219) ^ 0xFFFFFB55) + a3 + 225) * (v3 == a1)) ^ (a3 + 934)))
                            - 8))();
}

uint64_t sub_1AC1B1368(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8 * ((((v4 & 0x18) == a4 - 1219) | (4 * ((v4 & 0x18) == a4 - 1219))) ^ a4))
                            - ((2 * a4) ^ 0x87Au)
                            + 496))();
}

uint64_t sub_1AC1B13A4(int a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = (a3 + v6 + v5 + v7 - a1);
  *(_QWORD *)(v8 - 7 + v10) = *(_QWORD *)(v3 - 7 + v10);
  return (*(uint64_t (**)(_QWORD))(v9 + 8 * ((931 * (a1 - (v4 & 0xFFFFFFF8) == -8)) ^ a3)))(a1 - (v4 & 0xFFFFFFF8) + 16);
}

uint64_t sub_1AC1B13F8(int a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)(a2 + v5) = *(_QWORD *)(v4 + v5);
  return (*(uint64_t (**)(_QWORD))(v6 + 8 * (((a1 == 0) * v3) ^ a3)))((a1 + 8));
}

uint64_t sub_1AC1B1424(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v6 + 8 * (((v4 != a4) * (v5 ^ 0x3C1)) ^ v5)))(a1, (v5 - 137766719) & 0xBDBFAD8C, v5 ^ 0x3D3u);
}

uint64_t sub_1AC1B1464(uint64_t a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v9 = ((15 * (a2 ^ (v8 + 396))) ^ 0x9CC996A5) + v5;
  *(_BYTE *)(v6 + v9) = *(_BYTE *)(v4 + v9);
  return (*(uint64_t (**)(void))(v7 + 8 * ((82 * (v5 - 1 != v2)) ^ (v3 + a2 + 818))))();
}

uint64_t sub_1AC1B14B4@<X0>(int a1@<W2>, int a2@<W8>)
{
  void (*v2)(_BYTE *);
  int v3;
  int v4;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[4];
  unsigned int v10;
  uint64_t v11;

  v4 = 3 * (a1 ^ 0x1FA);
  *v6 = a2;
  v11 = v8;
  v10 = v4
      + (((v9 | 0x65632D70) - v9 + (v9 & 0x9A9CD288)) ^ 0x6F97235F) * v3
      - 443;
  v2(v9);
  v11 = v7;
  v10 = 127 * (v4 ^ 0x352) + (v9 ^ 0xAF40E2F) * v3 + 25;
  v2(v9);
  return 0;
}

void sub_1AC1B15A0(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) - 460628867 * (((a1 | 0x6C5795E7) - a1 + (a1 & 0x93A86A18)) ^ 0x20C1179A);
  __asm { BR              X15 }
}

void sub_1AC1B16AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  *(_DWORD *)(a3 + v4) = v3;
}

void sub_1AC1B24B8(_DWORD *a1)
{
  int v1;

  v1 = *a1 - 535753261 * ((((2 * (_DWORD)a1) | 0x35D4A2DA) - (_DWORD)a1 - 451563885) ^ 0x101E5F42);
  __asm { BR              X13 }
}

uint64_t sub_1AC1B25A8()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  _BOOL4 v5;

  v5 = v0 - 1481951704 > (v2 ^ 0x28D) + 1781261298 || v0 - 1481951704 < v3 - 366221740;
  return (*(uint64_t (**)(uint64_t))(v1 + 8 * ((460 * v5) ^ ((v2 ^ 0x28D) + 512))))(0x49870576963E6276);
}

void sub_1AC1B2690(int a1, unsigned int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  _BOOL4 v19;

  v16 = v9 + a1 + (v10 ^ 0xC1037AD6) + v12 * (*(_DWORD *)(*a8 + 4 * a3) ^ v10) + 1087;
  *(_DWORD *)(v14 + 4 * v15) = v16 + v10 - (v11 & (2 * v16));
  v17 = a3 + 1 + a4;
  v18 = (a2 > 0x7495F0C7) ^ (v17 < -1955983560);
  v19 = v17 < a5;
  if (v18)
    v19 = a2 > 0x7495F0C7;
  __asm { BR              X24 }
}

void sub_1AC1B29C0(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_1AC1B2A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t v68;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *))(v68 + 12688))(a1, a2, a3, a4, a5, 3577632589, 717334968, 3012113085, a9, &a68, a11, &STACK[0x16B2644187E7E4F1]);
}

uint64_t sub_1AC1B2B68()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((28 * (v1 != ((v0 - 1592323) & 0x2AD9EFFD ^ 0x66B764FE))) ^ v0))
                            - 4))();
}

uint64_t sub_1AC1B2BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20)
{
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BOOL4 v28;

  v24 = v20 ^ (v23 + 214);
  v25 = v24 + 879;
  v26 = 5 * v24;
  v27 = a6 + v20 + 241;
  v28 = a20 + 1099089112 < (v21 - 1358597691);
  if (a20 + 1099089112 < (v26 + 679582026) != (v21 - 1358597691) < 0x28819A53)
    v28 = (v21 - 1358597691) < 0x28819A53;
  return ((uint64_t (*)(void))(*(_QWORD *)(v22 + 8 * ((v28 * (v25 ^ 0x6F)) ^ v27)) - 8))();
}

uint64_t sub_1AC1B2E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  v21 = v18 - a6;
  v22 = 628203409 * ((((v20 - 152) | 0x8533020C) - ((v20 - 152) & 0x8533020C)) ^ 0x7BB0E3F);
  *(_DWORD *)(v20 - 136) = v18 - v22 + 267;
  *(_DWORD *)(v20 - 132) = v17 - v22 - 345587121;
  *(_QWORD *)(v20 - 128) = a15;
  *(_QWORD *)(v20 - 112) = a17;
  *(_QWORD *)(v20 - 104) = a13;
  *(_QWORD *)(v20 - 152) = a14;
  *(_QWORD *)(v20 - 144) = a12;
  v23 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(a5 + 8 * (v18 ^ 0x12A)) - 4))(v20 - 152);
  return (*(uint64_t (**)(uint64_t))(v19
                                            + 8
                                            * (((*(_DWORD *)(v20 - 120) == (v21 ^ 0x5DFC0C2C)) * ((v18 + 512) ^ 0x147)) ^ v18)))(v23);
}

uint64_t sub_1AC1B2EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10
                                                                                          + 8
                                                                                          * ((23
                                                                                            * (*(_DWORD *)(v13 + 48 * (v8 + a8)) != 1751408452)) ^ v9))
                                                                              - ((5 * (v9 ^ 0x33C)) ^ (v11 + 2) ^ a7)))(a1, a2, a3, a4, v12);
}

uint64_t sub_1AC1B2F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  return (*(uint64_t (**)(void))(v9
                              + 8
                              * (int)((((v6 ^ 0x3716F97E) == v8 + ((v7 - 270029644) & 0x3AD9FBFE) + 1809446656)
                                     * (a6 + ((v7 + 1072540404) & 0xEAD3FDBE) + 1580)) ^ v7)))();
}

uint64_t sub_1AC1B2FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((*(_DWORD *)(v12 + 48 * (v9 + a8) + 36) != v9) ^ v8))
                            - ((v11 + v8 + 477910440) & 0xB8C1FF09)
                            + 257))();
}

uint64_t sub_1AC1B3014@<X0>(int a1@<W5>, int a2@<W8>)
{
  int v2;
  int v4;
  int v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  int v10;
  int v11;

  if ((v2 - 924252512) <= 0x12 && ((1 << (v2 - 96)) & 0x42405) != 0)
  {
    v8 = v5 + 265;
    v9 = a2 & 0xFFFFFFFFFFFFFFFLL;
    if (v9)
    {
      if (v9 == 3)
      {
        v10 = v8 + a1;
        v11 = (*(uint64_t (**)())(v6 + 48 * a2 + 8))();
        __asm { BR              X8 }
      }
      __asm { BR              X0 }
    }
    __asm { BR              X12 }
  }
  return v4 ^ 0x88C2FE4E;
}

void sub_1AC1B35D4(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 44) - 1224239923 * (((a1 | 0x1FD8AEE4) - a1 + (a1 & 0xE027511B)) ^ 0xED6B5333);
  __asm { BR              X16 }
}

uint64_t sub_1AC1B370C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (v3 ^ (124
                                               * (((2 * a3) & 0xFD7F7CE2 ^ 0x2D025462) + (a3 ^ 0x697ED5C2) + 1743910467 == 1722922164))))
                            - ((v3 - 112) ^ 0x64FLL)))();
}

uint64_t sub_1AC1B3780(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  int v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((214 * (v6 + v4 + 20988303 < ((((a4 - 1599) | 0x433) + 110) ^ 0x4ADu))) ^ a4))
                            - 4))();
}

uint64_t sub_1AC1B37D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  uint64_t v7;

  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (((a2 + a7 - 16 < ((a5 - 1920122342) & 0x7272BD77 ^ 0xFFFFFBC7)) * (a5 - 1113)) ^ a5)))();
}

uint64_t sub_1AC1B3820(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v19;
  unint64_t v20;
  int v22;

  v12 = *(_QWORD *)(v11 - 120);
  v13 = a2 + v10 + v8 + 13 * (a4 ^ 0x3E8) - 1807 + v12;
  v14 = ((_BYTE)a2 + (_BYTE)v10 + (_BYTE)v8 + 13 * (a4 ^ 0xE8) - 15) & 0xF;
  v15 = v14 + v7 - v13;
  v16 = (v14 | v5) - v13;
  v17 = (v14 | v6) - v13;
  v19 = v4 - v12 >= (a4 ^ 0x373uLL) && v15 >= 0x10 && v16 >= 0x10;
  v20 = v17 + 1;
  v22 = !v19 || v20 < 0x10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (int)((244 * v22) ^ a4)) - 8))();
}

uint64_t sub_1AC1B38B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 + 8 * (v4 ^ (26 * (v3 < 0x10))))
                                                                    - (v4 - 880)
                                                                    - ((v4 - 1383) ^ 0xFFFFFFFFFFFFFDCDLL)))(a1, a2, a3, 0);
}

uint64_t sub_1AC1B38E8(uint64_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16x4_t v69;
  int8x16x4_t v70;

  v69.val[1].i64[0] = ((_BYTE)a3 + 13) & 0xF;
  v69.val[1].i64[1] = ((_BYTE)a3 + 12) & 0xF;
  v69.val[2].i64[0] = ((_BYTE)a3 + 11) & 0xF;
  v69.val[2].i64[1] = ((_BYTE)a3 + 10) & 0xF;
  v69.val[3].i64[0] = ((_BYTE)a3 + 9) & 0xF;
  v69.val[3].i64[1] = ((_BYTE)a3 + 8) & 0xF;
  v65.i64[0] = 0x1717171717171717;
  v65.i64[1] = 0x1717171717171717;
  v69.val[0].i64[0] = ((_BYTE)v63 + (_BYTE)v62 + (_BYTE)a2) & 0xF;
  v69.val[0].i64[1] = ((_BYTE)a3 + 14) & 0xF;
  v66.i64[0] = vqtbl4q_s8(v69, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v70.val[0].i64[1] = ((_BYTE)a3 + 6) & 0xF;
  v70.val[1].i64[1] = ((_BYTE)a3 + 4) & 0xF;
  v70.val[2].i64[1] = ((_BYTE)a3 + 2) & 0xF;
  v70.val[3].i64[1] = a3 & 0xF;
  v70.val[0].i64[0] = ((_BYTE)a3 + 7) & 0xF;
  v70.val[1].i64[0] = ((_BYTE)a3 + 5) & 0xF;
  v70.val[2].i64[0] = (a3 + 3) & 0xF;
  v70.val[3].i64[0] = ((_BYTE)a3 + 1) & 0xF;
  v66.i64[1] = vqtbl4q_s8(v70, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v67 = vrev64q_s8(vmulq_s8(v66, v65));
  *(int8x16_t *)(*(_QWORD *)(v64 - 120) - 15 + (v63 + v62 + a2)) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v60 + v69.val[0].i64[0] - 15), *(int8x16_t *)(v57 - 15 + (v63 + v62 + a2))), veorq_s8(*(int8x16_t *)(v58 + v69.val[0].i64[0] - 15), *(int8x16_t *)(v69.val[0].i64[0] + v59 - 14))), vextq_s8(v67, v67, 8uLL));
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a57
                                                      + 8 * ((((v61 & 0xFFFFFFF0) == 16) * ((a5 ^ 0x225) - 393)) ^ a5))
                                          - 4))(v61);
}

void sub_1AC1B3A44()
{
  JUMPOUT(0x1AC1B39D0);
}

uint64_t sub_1AC1B3A50(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4
                                                                        + 8
                                                                        * (v3 ^ (1941 * (a3 != 0x97C16BB3))))
                                                            - 8))(a1, 1941, 1552326570);
}

uint64_t sub_1AC1B3AA0(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  _BOOL4 v18;

  v14 = v9 > v11;
  v15 = (a3 - 1552326570);
  *(_BYTE *)(*(_QWORD *)(v13 - 120) + v15) = *(_BYTE *)(v6 + (v15 & 0xF)) ^ *(_BYTE *)(v3 + v15) ^ *(_BYTE *)(v4 + (v15 & 0xF)) ^ *(_BYTE *)((v15 & 0xF) + v5 + 1) ^ (23 * ((a3 + 86) & 0xF));
  v16 = v7 + 43 + a3 + 1286210371;
  v17 = v14 ^ (v16 < v8);
  v18 = v16 < v10;
  if (!v17)
    v14 = v18;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v12 + 8 * ((v14 * a2) ^ v7)) - 8))(a1);
}

uint64_t sub_1AC1B3B34(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v24;
  uint64_t v25;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v25 + 8 * ((((v24 + 59) ^ 0x185) * (a1 == a4)) ^ v24)) - 8))(a24);
}

uint64_t sub_1AC1B3B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((38 * (((((a5 ^ 0x5D) + 655) ^ 0x43F) & v5) == 0)) ^ a5 ^ 0x7F6))
                            - 12))();
}

uint64_t sub_1AC1B3BA4@<X0>(int a1@<W1>, int a2@<W3>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  int8x16x4_t v65;

  *(_DWORD *)(v60 - 144) = v56;
  *(_QWORD *)(v60 - 128) = v52 - 7;
  *(_QWORD *)(v60 - 136) = *(_QWORD *)(v60 - 120) - 7;
  *(_DWORD *)(v60 - 148) = v56 & 0xFFFFFFF8;
  *(_DWORD *)(v60 - 140) = -(v56 & 0xFFFFFFF8);
  v61 = -8 - a2;
  v62 = v59 + v58 + v57;
  v63 = (v59 + v58 + a1 + v61 + 8);
  v65.val[0].i64[0] = ((_BYTE)v59 + (_BYTE)v58 + (_BYTE)a1 + (_BYTE)v61 + 8) & 0xF;
  v65.val[0].i64[1] = (v62 + (_BYTE)v61 + (((_BYTE)a3 + 35) & 0xFE) + 8) & 0xF;
  v65.val[1].i64[0] = (v62 - 55 + (_BYTE)v61 + 8) & 0xF;
  v65.val[1].i64[1] = (v62 - 56 + (_BYTE)v61 + 8) & 0xF;
  v65.val[2].i64[0] = (v62 - 57 + (_BYTE)v61 + 8) & 0xF;
  v65.val[2].i64[1] = (v62 - 58 + (_BYTE)v61 + 8) & 0xF;
  v65.val[3].i64[0] = (v62 - 59 + (_BYTE)v61 + 8) & 0xF;
  v65.val[3].i64[1] = (v62 - 60 + (_BYTE)v61 + 8) & 0xF;
  *(int8x8_t *)(*(_QWORD *)(v60 - 136) + v63) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v55 + (v63 & 0xF) - 7), *(int8x8_t *)(*(_QWORD *)(v60 - 128) + v63)), veor_s8(*(int8x8_t *)(v53 + (v63 & 0xF) - 7), *(int8x8_t *)((v63 & 0xF) + v54 - 6))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v65, (int8x16_t)xmmword_1AC3B5870), (int8x8_t)0x1717171717171717)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a52 + 8 * ((1473 * (*(_DWORD *)(v60 - 140) == v61)) ^ a3)) - 8))((__n128)xmmword_1AC3B5870);
}

void sub_1AC1B3D24()
{
  JUMPOUT(0x1AC1B3C2CLL);
}

uint64_t sub_1AC1B3D2C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v24
                                                                                         + 8
                                                                                         * ((605
                                                                                           * (*(_DWORD *)(v25 - 144) != *(_DWORD *)(v25 - 148))) ^ a1))
                                                                             - ((a1 - 457) | 0x436u)
                                                                             + 1071))(a24, a2, a3, a4, (a1 - 170) | 0xD5u);
}

uint64_t sub_1AC1B3D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)(*(_QWORD *)(v14 - 120) + (a8 ^ 0x994E4DB8) + a6) = *(_BYTE *)(v11 + (((a8 ^ 0x994E4DB8) + a6) & 0xFLL)) ^ *(_BYTE *)(v8 + (a8 ^ 0x994E4DB8) + a6) ^ *(_BYTE *)(v9 + (((a8 ^ 0xB8) + (_BYTE)a6) & 0xF)) ^ *(_BYTE *)((((a8 ^ 0xB8) + (_BYTE)a6) & 0xF) + v10 + 1) ^ (23 * (((a8 ^ 0xB8) + a6) & 0xF));
  return ((uint64_t (*)(void))(*(_QWORD *)(v13 + 8 * ((1076 * (a6 - 1 != v12)) ^ (a8 - 621))) - 8))();
}

uint64_t sub_1AC1B3DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;

  v51 = *(_QWORD *)(a1 + 24);
  *(int8x16_t *)(v50 - 112) = veorq_s8(*(int8x16_t *)*(_QWORD *)(a1 + 16), (int8x16_t)xmmword_1AC3C4DD0);
  if (*(_QWORD *)(v50 - 120))
    v52 = v51 == 0x48B243EBB599686FLL;
  else
    v52 = 1;
  v53 = !v52;
  LODWORD(a25) = 2 * v48;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 + 8 * (int)((v53 * (((a5 + 779) | 0x69) - 207)) ^ a5)) - 12))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48);
}

uint64_t sub_1AC1B3E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  int v48;
  uint64_t v49;
  int v50;
  _BOOL4 v52;

  v50 = (a25 & 0xFFF57CBA) + (v48 ^ 0x7FFABE5D);
  v52 = ((((a5 + 52) ^ 0xA) + (_BYTE)v50) & 0xF) == 0 && v50 != 2147139165;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 + 8 * (int)((v52 * (((a5 - 357) | 0x45) - 203)) | a5)) - 12))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48);
}

uint64_t sub_1AC1B3ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  char *v63;
  int v64;
  char *v65;
  int v66;
  int v67;
  char v68;
  char *v69;
  int v70;
  int v71;
  unint64_t v72;
  char *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  char *v83;
  int v84;
  uint64_t v85;
  char *v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  char *v137;
  char *v138;
  char *v139;
  int v140;
  int v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  unsigned int v156;
  int v157;
  int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  unsigned int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  unsigned int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  int v197;
  int v198;
  int v199;
  unsigned int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  unsigned int v208;
  int v209;
  int v210;
  int v211;
  unsigned int v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  unsigned int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  int v222;
  unsigned __int8 *v223;
  unsigned __int8 v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  int v233;
  int v234;
  int v235;
  unsigned int v236;
  int v237;
  int v238;
  int v239;
  uint64_t v240;
  unsigned int v241;
  int v242;
  char *v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  int v248;
  int v249;
  int v250;
  unint64_t v251;
  int v252;
  char *v253;
  int v254;
  int v255;
  int v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  unsigned int v276;
  unsigned int v277;
  int v278;
  unsigned int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  unsigned int v289;
  int v290;
  unsigned int v291;
  int v292;
  unsigned int v293;
  int v294;
  unsigned int v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  int v309;
  int v310;
  int v311;
  unsigned int v312;
  int v313;
  int v314;
  unsigned int v315;
  int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  int v342;
  int v343;
  int v344;
  unsigned int v345;
  int v346;
  int v347;
  unsigned int v348;
  unsigned int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  unsigned int v357;
  int v358;
  int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  int v363;
  int v364;
  unsigned int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  unsigned int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  unsigned int v376;
  unsigned int v377;
  int v378;
  char *v379;
  char *v380;
  int v381;
  int v382;
  uint64_t v383;
  int v384;
  int v385;
  char *v386;
  int v387;
  int v388;
  uint64_t v389;
  int v390;
  int v391;
  int v392;
  uint64_t v393;
  char *v394;
  unsigned int v395;
  int v396;
  unsigned int v397;
  char *v398;
  char *v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unsigned int v414;
  uint64_t v415;
  unsigned __int8 v416;
  uint64_t v417;
  unsigned int v418;
  uint64_t v419;
  unsigned int v420;
  int v421;
  int v422;
  uint64_t v423;
  unsigned int v424;
  unsigned int v425;
  __int16 v426;
  uint64_t v427;
  int v428;
  unsigned int v429;
  uint64_t v430;
  unsigned __int8 v431;
  uint64_t v432;
  int v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  int v437;
  uint64_t v438;
  unsigned int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  uint64_t v444;
  int v445;
  int v446;
  int v447;
  int v448;
  uint64_t v449;
  unsigned __int8 v450;
  int v451;
  int v452;
  unsigned __int8 v453;
  int v454;
  int v455;
  uint64_t v456;
  unsigned int v457;
  unsigned int v458;
  __int16 v459;
  int v460;
  uint64_t v461;
  int v462;
  int v463;
  unsigned int v464;
  int v465;
  int v466;
  uint64_t v467;
  int v468;
  unsigned int v469;
  int v470;
  unsigned int v471;
  int v472;
  uint64_t v473;
  int v474;
  int v475;
  int v476;
  uint64_t v477;
  int v478;
  unsigned __int8 v479;
  int v480;
  int v481;
  uint64_t v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  uint64_t v488;
  int v489;
  int v490;
  unsigned int v491;
  int v492;
  uint64_t v493;
  int v494;
  unsigned int v495;
  int v496;
  int v497;
  uint64_t v498;
  int v499;
  int v500;
  int v501;
  uint64_t v502;
  int v503;
  unsigned int v504;
  unsigned int v505;
  int v506;
  uint64_t v507;
  unsigned int v508;
  int v509;
  int v510;
  int v511;
  unsigned int v512;
  int v513;
  uint64_t v514;
  int v515;
  unsigned int v516;
  int v517;
  int v518;
  uint64_t v519;
  int v520;
  int v521;
  unsigned int v522;
  int v523;
  uint64_t v524;
  int v525;
  int v526;
  int v527;
  uint64_t v528;
  int v529;
  unsigned int v530;
  int v531;
  int v532;
  uint64_t v533;
  unsigned int v534;
  int v535;
  uint64_t v536;
  int v537;
  int v538;
  int v539;
  int v540;
  uint64_t v541;
  int v542;
  int v543;
  int v544;
  char *v545;
  unsigned int v546;
  char *v547;
  unsigned int v548;
  char *v549;
  int v550;
  char *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  int v556;
  unsigned int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  unsigned int v563;
  int v564;
  unsigned int v565;
  int v566;
  int v567;
  int v568;
  unsigned __int8 v569;
  unsigned int v570;
  int v571;
  int v572;
  int v573;
  int v574;
  int v575;
  unsigned int v576;
  int v577;

  v62 = (v59 - 443301014) & 0x1A6C3FF7;
  *(_DWORD *)(v61 - 128) = v62;
  v63 = (char *)*(&off_1E5B5B480 + v59 + 2) - 8;
  v64 = (v63[*(unsigned __int8 *)(v57 - 0x48B243EBB599686DLL) ^ 0xD7] ^ 0x58) << 8;
  v65 = (char *)*(&off_1E5B5B480 + v59 - 91) - 12;
  v66 = v59;
  v67 = v65[*v58 ^ 0xB1] ^ 0xAE;
  v68 = *(_BYTE *)(v57 - 0x48B243EBB5996862);
  *(_DWORD *)(v61 - 248) = v60;
  v69 = (char *)*(&off_1E5B5B480 + (v66 ^ 0xAD)) - 8;
  v70 = v69[(v68 ^ (v62 + 18))];
  v71 = v64 | (v67 << 24);
  HIDWORD(v72) = v70 ^ 2;
  LODWORD(v72) = (v70 ^ 0x14) << 24;
  LOBYTE(v64) = v72 >> 26;
  v73 = (char *)*(&off_1E5B5B480 + v66 - 89) - 4;
  v74 = v65[*(unsigned __int8 *)(v57 - 0x48B243EBB5996863) ^ 0xB8];
  v75 = v69[*(unsigned __int8 *)(v57 - 0x48B243EBB5996866) ^ 0x6BLL];
  HIDWORD(v72) = v75 ^ 2;
  LODWORD(v72) = (v75 ^ 0x14) << 24;
  v76 = ((v72 >> 26) ^ 0x53) << 16;
  LOBYTE(v70) = v63[*(unsigned __int8 *)(v57 - 0x48B243EBB5996861) ^ 0x2ELL];
  v77 = v69[*(unsigned __int8 *)(v57 - 0x48B243EBB599686ELL) ^ 0x47];
  HIDWORD(v72) = v77 ^ 2;
  LODWORD(v72) = (v77 ^ 0x14) << 24;
  v78 = v71 & 0xFF00FF00 | (v73[*(unsigned __int8 *)(v57 - 0x48B243EBB599686CLL) ^ 0xECLL] - 126) ^ 9 | (((v72 >> 26) ^ 0x1E) << 16);
  v79 = ((v64 ^ 0xFB) << 16) | ((v74 ^ 0x16) << 24) | ((v70 ^ 0x9D) << 8);
  LODWORD(v69) = v69[*(unsigned __int8 *)(v57 - 0x48B243EBB599686ALL) ^ 0xCBLL];
  HIDWORD(v72) = v69 ^ 2;
  LODWORD(v72) = (v69 ^ 0x14) << 24;
  LOBYTE(v75) = v73[*(unsigned __int8 *)(v57 - 0x48B243EBB5996864) ^ 0xB5];
  v80 = ((v73[*(unsigned __int8 *)(v57 - 0x48B243EBB5996868) ^ 0xA9] - 126) | ((v63[*(unsigned __int8 *)(v57 - 0x48B243EBB5996869) ^ 0x30] ^ 0x6D) << 8)) & 0xFF00FFFF | (((v72 >> 26) ^ 0xBA) << 16) | ((v65[*(unsigned __int8 *)(v57 - 0x48B243EBB599686BLL) ^ 0x35] ^ 0x61) << 24);
  v81 = v76 | ((v63[*(unsigned __int8 *)(v57 - 0x48B243EBB5996865) ^ 0x77] ^ 0x97) << 8) | ((v65[*(unsigned __int8 *)(v57 - 0x48B243EBB5996867) ^ 0xBFLL] ^ 0x78) << 24);
  LOBYTE(v65) = v73[*(unsigned __int8 *)(v57 - 0x48B243EBB5996860) ^ 0x36] - 126;
  v82 = (uint64_t)*(&off_1E5B5B480 + v66 - 189);
  v83 = (char *)*(&off_1E5B5B480 + (v66 ^ 0x57)) - 12;
  v84 = *(_DWORD *)&v83[4 * (v64 ^ 0x61)] ^ *(_DWORD *)(v82 + 4 * (v65 ^ 0xFDu));
  *(_DWORD *)(v61 - 168) = v66;
  v85 = (uint64_t)*(&off_1E5B5B480 + v66 + 18);
  LODWORD(v73) = ((v84 ^ 0xA5B18000) - 2 * ((v84 ^ 0xA5B18000) & 0x475EDEBF ^ v84 & 6) - 950083911) ^ *(_DWORD *)(v85 + 4 * (v74 ^ 0x83u));
  v86 = (char *)*(&off_1E5B5B480 + v66 - 65) - 8;
  HIDWORD(v555) = v78;
  v87 = *(_DWORD *)&v86[4 * (v70 ^ 0xA5)] ^ v78 ^ ((_DWORD)v73
                                                                  - ((2 * (_DWORD)v73) & 0xEDF410FC)
                                                                  - 151385986);
  LOBYTE(v65) = v65 ^ 0x2A;
  LODWORD(v555) = v79 & 0xFFFFFF00 | v65;
  v88 = v555 - 2 * ((v79 & 0x4C33B00 | v65 & 0xDF) ^ v65 & 0x11) + 79903694;
  LOBYTE(v79) = (v75 - 126) ^ 0xA8;
  v89 = v81 & 0xFFFFFF00 | v79;
  HIDWORD(v554) = v80;
  v90 = v87 ^ v80;
  v91 = v87;
  v435 = v87;
  v92 = v87 ^ v80 ^ 0x4D;
  *(_DWORD *)(v61 - 140) = v92 ^ v89;
  v431 = v92;
  v93 = v92 ^ v89 ^ v88;
  v475 = BYTE1(v93);
  v468 = ((v93 ^ 0xBE341667) >> 16);
  v94 = v93 ^ 0xBE341667;
  v95 = *(_DWORD *)&v86[4 * (BYTE1(v93) ^ 0xC1)] ^ 0x441D714E ^ *(_DWORD *)&v83[4 * (v468 ^ 0x49)];
  v470 = v93;
  v96 = (v95 - ((2 * v95) & 0x2EADF260) + 391575856) ^ *(_DWORD *)(v82 + 4 * (v93 ^ 0xE7u));
  v436 = v94;
  v464 = HIBYTE(v94);
  v97 = v91 ^ *(_DWORD *)(v85 + 4 * (HIBYTE(v94) ^ 0x65)) ^ (v96 - ((2 * v96) & 0x8EBDBD72) - 950083911);
  *(_DWORD *)(v61 - 208) = v90;
  v98 = v90 ^ 0xBAF72DE4;
  v99 = (v90 ^ 0xBAF72DE4) & 0x32FA483E ^ v90 & 0x10;
  LODWORD(v554) = v89;
  v100 = v89 - 2 * (v89 & 0x32FA483E ^ v79 & 0x10) + 855263278;
  *(_DWORD *)(v61 - 192) = v97;
  LODWORD(v65) = v97 ^ 0x32FA482E ^ v100;
  v101 = v65 ^ v94;
  *(_DWORD *)(v61 - 136) = (_DWORD)v65;
  v489 = ((v65 ^ v94) >> 16);
  v485 = ((unsigned __int16)((unsigned __int16)v65 ^ v94) >> 8);
  v102 = *(_DWORD *)&v86[4 * (v485 ^ 0x9B)] ^ *(_DWORD *)&v83[4 * (v489 ^ 0x2E)];
  v559 = (v65 ^ v94);
  v103 = ((v102 ^ 0x441D714E) - 2 * ((v102 ^ 0x441D714E) & 0x1756F931 ^ v102 & 1) + 391575856) ^ *(_DWORD *)(v82 + 4 * (v559 ^ 0xD2u));
  v104 = v65 ^ v94 ^ 0xDF4E5BC7;
  *(_DWORD *)(v61 - 256) = (v65 ^ v94) >> 24;
  v105 = (v103 - ((2 * v103) & 0x8EBDBD72) - 950083911) ^ *(_DWORD *)(v85
                                                                    + 4 * (((v65 ^ v94) >> 24) ^ 0x69));
  v106 = v105 ^ v92 ^ 0x793F68C5;
  *(_DWORD *)(v61 - 184) = v105 ^ v92;
  LODWORD(v65) = v106 ^ v65;
  *(_DWORD *)(v61 - 176) = (_DWORD)v65;
  v107 = ((v65 ^ 0xE3B9652F) - ((2 * (v65 ^ 0xE3B9652F)) & 0x57D3F51C) - 1410729330) ^ v101 ^ 0xDF4E5BC7;
  v520 = ((v107 ^ 0x9547167F) >> 16);
  v531 = ((unsigned __int16)(v107 ^ 0x167F) >> 8);
  LODWORD(v65) = *(_DWORD *)&v83[4 * (v520 ^ 0x89)] ^ *(_DWORD *)&v86[4 * (v531 ^ 0x3A)] ^ 0x441D714E;
  v556 = v107;
  LODWORD(v65) = ((_DWORD)v65 - ((2 * (_DWORD)v65) & 0x2EADF260) + 391575856) ^ *(_DWORD *)(v82
                                                                                          + 4
                                                                                          * (v107 ^ 0xE4u));
  v576 = (v107 ^ 0x9547167F) >> 24;
  LODWORD(v65) = ((_DWORD)v65 - ((2 * (_DWORD)v65) & 0x8EBDBD72) - 950083911) ^ *(_DWORD *)(v85 + 4 * (v576 ^ 0x1D));
  v495 = v105 ^ v97;
  v548 = ((_DWORD)v65 - ((2 * (_DWORD)v65) & 0xD2696942) + 1765061793) ^ v105 ^ v97;
  v569 = ((unsigned __int16)(((_WORD)v65 - ((2 * (_WORD)v65) & 0x6942) - 19295) ^ v105 ^ v97) >> 8) ^ 0xB4;
  v563 = v548 ^ 0x6934B4A1 ^ v105 ^ v92;
  v108 = ((v563 ^ 0xFE25CD6D) - ((2 * (v563 ^ 0xFE25CD6D)) & 0x57D3F51C) - 1410729330) ^ v104;
  v574 = BYTE1(v108);
  v572 = BYTE2(v108);
  LODWORD(v65) = *(_DWORD *)&v86[4 * (BYTE1(v108) ^ 0x6F)] ^ *(_DWORD *)&v83[4 * (BYTE2(v108) ^ 0xA8)] ^ 0x441D714E;
  v546 = HIBYTE(v108);
  LODWORD(v65) = ((_DWORD)v65 - ((2 * (_DWORD)v65) & 0x8EBDBD72) - 950083911) ^ *(_DWORD *)(v85
                                                                                          + 4 * (HIBYTE(v108) ^ 0x85));
  v544 = (((v563 ^ 0x6D) - ((2 * (v563 ^ 0x6D)) & 0x1C) - 114) ^ v104);
  LODWORD(v65) = ((_DWORD)v65 - ((2 * (_DWORD)v65) & 0x2EADF260) + 391575856) ^ *(_DWORD *)(v82 + 4 * (v544 ^ 0x25u));
  v109 = ((_DWORD)v65 - ((2 * (_DWORD)v65) & 0x87908AD8) - 1010285204) ^ v106;
  v561 = v563 ^ v106 ^ v97 ^ 0x32FA482E ^ v100;
  v110 = v109 ^ v561;
  *(_DWORD *)(v61 - 144) = v109 ^ v561;
  v111 = v109;
  *(_DWORD *)(v61 - 216) = v109;
  v112 = v108 ^ v109 ^ v561 ^ 0x5CCF0C0E;
  v113 = v110 ^ 0x5CCF0C0E;
  v426 = v110 ^ 0xC0E;
  v565 = v108;
  v457 = (v112 ^ 0xA802DE22) >> 24;
  v441 = ((v112 ^ 0xA802DE22) >> 16);
  v114 = *(_DWORD *)(v85 + 4 * (v457 ^ 0x1D)) ^ *(_DWORD *)&v83[4 * (v441 ^ 0x89)] ^ 0x75B9A789;
  v445 = ((unsigned __int16)(v112 ^ 0xDE22) >> 8);
  v115 = (v114 - ((2 * v114) & 0xEDF410FC) - 151385986) ^ *(_DWORD *)&v86[4 * (v445 ^ 0x3A)];
  v539 = v112;
  v116 = *(_DWORD *)(v82 + 4 * (v112 ^ 0xB9u));
  *(_DWORD *)(v61 - 224) = v548 ^ 0x6934B4A1 ^ v65;
  v117 = v548 ^ 0x6934B4A1 ^ v65 ^ v116 ^ (v115 - ((2 * v115) & 0x2EADF260) + 391575856);
  v453 = BYTE2(v111) ^ 0x16;
  v118 = v117 ^ v111 ^ 0x7C166C11;
  v522 = v117;
  v570 = (v118 ^ v108) >> 24;
  v529 = (v118 ^ v108);
  LODWORD(v65) = *(_DWORD *)(v85 + 4 * (v570 ^ 0x9B)) ^ *(_DWORD *)(v82 + 4 * (v529 ^ 0x31u)) ^ 0xD0082789;
  v504 = ((v118 ^ v108) >> 8) ^ 0x86839A;
  v515 = ((unsigned __int16)(v118 ^ v108) >> 8) ^ 0x9A;
  LODWORD(v65) = ((_DWORD)v65 - ((2 * (_DWORD)v65) & 0xEDF410FC) - 151385986) ^ *(_DWORD *)&v86[4
                                                                                              * (((unsigned __int16)(v118 ^ v108) >> 8) ^ 0xA0)];
  v511 = ((v118 ^ v108) >> 16);
  v119 = v118 ^ v108;
  v491 = v118 ^ v108;
  LODWORD(v65) = ((_DWORD)v65 - ((2 * (_DWORD)v65) & 0x65CEF260) - 1293453008) ^ *(_DWORD *)&v83[4 * (v511 ^ 0xA)];
  v120 = ((_DWORD)v65 - ((2 * (_DWORD)v65) & 0xE36DCC2) + 119238241) ^ v117;
  *(_DWORD *)(v61 - 200) = v120;
  v121 = v120 ^ 0xFA98F4CB ^ v118;
  v122 = v120 ^ 0xFA98F4CB;
  v459 = v120 ^ 0xF4CB;
  v508 = v117 ^ v111 ^ 0x7C166C11 ^ v113;
  v499 = v117 ^ v111 ^ 0x7C166C11;
  *(_DWORD *)(v61 - 148) = v508 ^ 0xDF2C2ADB;
  v123 = ((v121 ^ 0x5A137D54) - 2 * ((v121 ^ 0x5A137D54) & 0x6F48603B ^ v121 & 2) - 280469447) ^ v508 ^ 0xDF2C2ADB;
  *(_DWORD *)(v61 - 160) = v123;
  v124 = v123 ^ 0x5C3797DA;
  v125 = ((v123 ^ 0xDBA84FDA) - 2 * ((v123 ^ 0x5C3797DA) & 8 ^ (v123 ^ 0xDBA84FDA) & 0x6A36B8CC) + 1781971140) ^ v119 ^ 0xECB5226E ^ 0x479AB031;
  v537 = (((v123 ^ 0xDA) - 2 * ((v123 ^ 0xDA) & 8 ^ (v123 ^ 0xDA) & 0xCC) - 60) ^ v119 ^ 0x6E);
  v550 = ((unsigned __int16)(((v123 ^ 0x4FDA)
                                             - 2 * ((v123 ^ 0x97DA) & 8 ^ (v123 ^ 0x4FDA) & 0xB8CC)
                                             - 18236) ^ v119 ^ 0x226E ^ 0xB031) >> 8);
  LODWORD(v65) = *(_DWORD *)&v86[4 * (v550 ^ 0x3A)] ^ *(_DWORD *)(v82 + 4 * (v537 ^ 0xAAu)) ^ 0xE1ACF14E;
  LODWORD(v65) = ((_DWORD)v65 - ((2 * (_DWORD)v65) & 0x65CEF260) - 1293453008) ^ *(_DWORD *)&v83[4
                                                                                               * (BYTE2(v125) ^ 0x89)];
  LODWORD(v65) = ((_DWORD)v65 - ((2 * (_DWORD)v65) & 0x8EBDBD72) - 950083911) ^ *(_DWORD *)(v85
                                                                                          + 4 * (HIBYTE(v125) ^ 0x1D));
  v126 = v65 ^ v499;
  v127 = ((v126 ^ 0xA6C48CD5) - ((2 * (v126 ^ 0xA6C48CD5)) & 0xD46D7188) + 1781971140) ^ v119 ^ 0xECB5226E;
  v128 = (v98 - 2 * v99 + 855263278) ^ v97 ^ 0x32FA482E;
  v129 = *(_DWORD *)(v85 + 4 * (HIBYTE(v127) ^ 5)) ^ *(_DWORD *)&v86[4 * (BYTE1(v127) ^ 0x6F)] ^ 0x31A4D6C7;
  v130 = (v129 - ((2 * v129) & 0x2EADF260) + 391575856) ^ *(_DWORD *)(v82 + 4 * (v127 ^ 0x25u));
  v131 = v122 ^ v65;
  v132 = v122 ^ v65 ^ *(_DWORD *)&v83[4 * (BYTE2(v127) ^ 0xA8)] ^ (v130
                                                                               - ((2 * v130) & 0x65CEF260)
                                                                               - 1293453008);
  LODWORD(v65) = v124 ^ v132 ^ v127;
  *(_DWORD *)(v61 - 232) = v124 ^ v132;
  v542 = BYTE1(v65);
  v434 = v65 >> 24;
  LODWORD(v85) = *(_DWORD *)&v86[4 * (BYTE1(v65) ^ 0x44)] ^ *(_DWORD *)(v85 + 4 * ((v65 >> 24) ^ 0x47)) ^ 0x31A4D6C7;
  v433 = (v124 ^ v132 ^ v127);
  LODWORD(v82) = (v85 - ((2 * v85) & 0x2EADF260) + 391575856) ^ *(_DWORD *)(v82 + 4 * (v433 ^ 0xD5u));
  v424 = (v65 >> 16) ^ 0x5A42;
  v421 = BYTE2(v65) ^ 0x42;
  v133 = (v82 - ((2 * v82) & 0x65CEF260) - 1293453008) ^ *(_DWORD *)&v83[4 * (BYTE2(v65) ^ 0xCB)];
  HIDWORD(v553) = v132 ^ 0x41621878 ^ (v133 - ((2 * v133) & 0x832A6BA2) - 1047185967);
  v428 = v132 ^ v126;
  LODWORD(v553) = v132 ^ v126 ^ 0xB331A10C ^ (HIDWORD(v553) - ((2 * HIDWORD(v553)) & 0x2F26DC30) - 1751945704);
  HIDWORD(v552) = v124 ^ v132 ^ 0x4018996 ^ v553;
  LODWORD(v552) = (HIDWORD(v552) - 716187413 + (~(2 * HIDWORD(v552)) | 0x55604E2B)) ^ v65;
  v134 = *(_DWORD *)(v61 - 168);
  v135 = (uint64_t)*(&off_1E5B5B480 + v134 - 107);
  LODWORD(v65) = (((v131 ^ 0x1B9155BD) >> 16)
                - 2 * ((((v131 ^ 0x1B9155BD) >> 16) + 412204) ^ ((v131 ^ 0x1B9155BD) >> 16) & 3)
                + 80595496) ^ *(_DWORD *)(v135 + 4 * (((v131 ^ 0x1B9155BD) >> 16) ^ 0x2Du));
  v136 = ((BYTE2(v127) ^ 0x89) - 2 * (((BYTE2(v127) ^ 0x89) + 412204) ^ (BYTE2(v127) ^ 0x21) & 3) + 80595496) ^ *(_DWORD *)(v135 + 4 * (BYTE2(v127) ^ 0xA4u));
  v137 = (char *)*(&off_1E5B5B480 + (v134 ^ 0x70)) - 4;
  LODWORD(v86) = ((_DWORD)v65 - ((2 * (_DWORD)v65) & 0x38D85ECA) - 1670631579) ^ *(_DWORD *)&v137[4
                                                                                                * (BYTE1(v131) ^ 0x47)];
  v138 = (char *)*(&off_1E5B5B480 + v134 - 139) - 8;
  LODWORD(v85) = (v136 - ((2 * v136) & 0x99BC4B8) - 2066881956) ^ *(_DWORD *)&v138[4 * (HIBYTE(v127) ^ 0xCC)];
  v139 = (char *)*(&off_1E5B5B480 + (v134 & 0x31F1EB40)) - 4;
  LODWORD(v82) = *(_DWORD *)&v139[4 * ((v124 ^ v126) ^ 0x53)];
  v416 = BYTE1(v124) ^ BYTE1(v126);
  v140 = *(_DWORD *)(v135 + 4 * (((v124 ^ v126) >> 16) ^ 0xAAu)) ^ *(_DWORD *)&v138[4 * (((v124 ^ v126) >> 24) ^ 0x3E)] ^ ((((v124 ^ v126) >> 16) ^ 0x87) - ((2 * (((v124 ^ v126) >> 16) ^ 0x87) + 824408) & 0xFFFFFFF9) + 80595496) ^ (181304767 * v82 - ((94174078 * v82 + 133371500) & 0x99BC4B8) + 147287442);
  v141 = *(_DWORD *)&v139[4 * (v126 ^ 0x74)];
  v534 = v126;
  v142 = (181304767 * v141 - ((362609534 * v141 + 133371500) & 0x38D85ECA) + 543537819) ^ *(_DWORD *)&v137[4 * (BYTE1(v126) ^ 0x5A)];
  v535 = v142 - ((2 * v142) & 0x99BC4B8);
  *(_DWORD *)(v61 - 240) = 824408;
  v525 = v85 - ((2 * v85) & 0x38D85ECA);
  v517 = v140 - ((2 * v140) & 0x38D85ECA);
  v558 = ((_DWORD)v86 - ((2 * (_DWORD)v86) & 0x99BC4B8) - 2066881956) ^ *(_DWORD *)&v138[4 * ((v131 ^ 0x1B9155BD) >> 24)] ^ (181304767 * *(_DWORD *)&v139[4 * (v131 ^ 0x7D)] - 2080797898);
  v479 = BYTE1(v128);
  LODWORD(v85) = *(_DWORD *)(v135 + 4 * (((v128 ^ 0xE9B45E6C) >> 16) ^ 0xF5u)) ^ ((((v128 ^ 0xE9B45E6C) >> 16) ^ 0xD8) - 2 * (((((v128 ^ 0xE9B45E6C) >> 16) ^ 0xD8) + 412204) ^ ((v128 ^ 0xE9B45E6C) >> 16) & 3) + 80595496);
  v143 = *(_DWORD *)(v61 - 136) ^ 0x31676F78;
  v144 = *(_DWORD *)(v135 + 4 * (BYTE2(v143) ^ 0x7Bu)) ^ ((BYTE2(v143) ^ 0x56)
                                                          - ((2 * (BYTE2(v143) ^ 0x56) + 824408) & 0xFFFFFFF9)
                                                          + 80595496);
  v145 = (v144 - ((2 * v144) & 0x99BC4B8) - 2066881956) ^ *(_DWORD *)&v138[4 * HIBYTE(v143)];
  v146 = *(_DWORD *)(v135 + 4 * (v489 ^ 0x34u)) ^ ((v489 ^ 0x19)
                                                   - 2 * ((v489 ^ 0x19) & 3 ^ ((v489 ^ 0x19) + 412204))
                                                   + 80595496);
  v147 = (v146 - ((2 * v146) & 0x38D85ECA) - 1670631579) ^ *(_DWORD *)&v137[4 * (v485 ^ 5)];
  v486 = v145 - ((2 * v145) & 0x38D85ECA);
  v490 = v147 - ((2 * v147) & 0x99BC4B8);
  v148 = *(_DWORD *)&v139[4 * (*(_DWORD *)(v61 - 192) ^ 0xDF)];
  v149 = *(_DWORD *)(v61 - 192) ^ 0x5A18571F;
  LODWORD(v86) = *(_DWORD *)&v138[4 * HIBYTE(v149)] ^ *(_DWORD *)(v135 + 4 * (BYTE2(v149) ^ 0xECu)) ^ ((BYTE2(v149) ^ 0xC1) + 80595497 + ((2 * (((BYTE2(v149) ^ 0xC1) + 44) & 0x1FE ^ (HIWORD(v149) | 0xFFFFFFFD))) ^ 0xC9405)) ^ (181304767 * v148 - ((94174078 * v148 + 133371500) & 0x99BC4B8) + 147287442);
  v483 = (_DWORD)v86 - ((2 * (_DWORD)v86) & 0x38D85ECA);
  LODWORD(v85) = *(_DWORD *)&v138[4 * ((v128 ^ 0xE9B45E6C) >> 24)] ^ (v85 - ((2 * v85) & 0x99BC4B8) - 2066881956);
  v429 = v128 ^ 0xAC;
  v480 = v85 - ((2 * v85) & 0x38D85ECA);
  v450 = BYTE1(v121) ^ 0x8E;
  v150 = *(_DWORD *)(v135 + 4 * (BYTE2(v125) ^ 0xDEu)) ^ ((BYTE2(v125) ^ 0xF3)
                                                          - 2
                                                          * ((BYTE2(v125) ^ 0xF3) & 3 ^ ((BYTE2(v125) ^ 0xF3) + 412204))
                                                          + 80595496);
  v151 = ((v121 ^ 0x35C48CD5) >> 16);
  LODWORD(v82) = *(_DWORD *)(v135 + 4 * (v151 ^ 0xFEu)) ^ ((v151 ^ 0xD3)
                                                           + 80595497
                                                           + ((2
                                                             * (((v151 ^ 0xD3) + 44) & 0xFFFFFFFD ^ (v151 ^ 0xD3 | 0x7FFFFFFE))) ^ 0xC9403));
  v152 = *(_DWORD *)&v139[4 * (v124 ^ 0xC5)];
  v153 = 181304767 * v152 - ((362609534 * v152 + 133371500) & 0x38D85ECA);
  v154 = (v150 - ((2 * v150) & 0x99BC4B8) - 2066881956) ^ *(_DWORD *)&v138[4 * (HIBYTE(v125) ^ 0x36)];
  v155 = BYTE2(*(_DWORD *)(v61 - 200));
  v156 = *(_DWORD *)(v135 + 4 * (v155 ^ 0xB4u)) ^ ((v155 ^ 0x99)
                                                   + 80595497
                                                   + ((2
                                                     * (((v155 ^ 0x99) + 44) & 0xFFFFFFFD ^ (v155 ^ 0x99 | 0x7FFFFFFE))) ^ 0xC9403));
  v157 = (v156 - ((2 * v156) & 0x38D85ECA) - 1670631579) ^ *(_DWORD *)&v137[4 * (HIBYTE(v459) ^ 0x8B)];
  v462 = v154 - ((2 * v154) & 0x38D85ECA);
  v474 = v157 - ((2 * v157) & 0x99BC4B8);
  v158 = *(_DWORD *)(v61 - 160) ^ 0x3EA84FDA;
  v159 = *(_DWORD *)&v137[4 * (BYTE1(v158) ^ 0x20)] ^ ((BYTE2(v158) ^ 0xD7)
                                                     - 2 * ((BYTE2(v158) ^ 0xD7) & 3 ^ ((BYTE2(v158) ^ 0xD7) + 412204))
                                                     + 80595496) ^ *(_DWORD *)(v135 + 4 * (BYTE2(v158) ^ 0xFAu)) ^ (v153 + 543537819);
  LODWORD(v82) = (v82 - ((2 * v82) & 0x99BC4B8) - 2066881956) ^ *(_DWORD *)&v138[4 * ((v121 ^ 0x35C48CD5) >> 24)] ^ (181304767 * *(_DWORD *)&v139[4 * (v121 ^ 0x3D)] - 2080797898);
  v420 = v459 ^ 0xA3;
  v454 = v82 - ((2 * v82) & 0x38D85ECA);
  v460 = v159 - ((2 * v159) & 0x99BC4B8);
  v160 = *(_DWORD *)(v61 - 140);
  v439 = v435 ^ 0x2BEAE26B;
  LODWORD(v82) = *(_DWORD *)(v135 + 4 * (((v435 ^ 0x2BEAE26B) >> 16) ^ 0xECu)) ^ ((((v435 ^ 0x2BEAE26B) >> 16) ^ 0xC1) - 2 * ((((v435 ^ 0x2BEAE26B) >> 16) ^ 0xC1) & 3 ^ ((((v435 ^ 0x2BEAE26B) >> 16) ^ 0xC1) + 412204)) + 80595496) ^ (181304767 * *(_DWORD *)&v139[4 * (v435 ^ 0x1E)] - 2080797898);
  LODWORD(v82) = (v82 - ((2 * v82) & 0x38D85ECA) - 1670631579) ^ *(_DWORD *)&v137[4 * (BYTE1(v435) ^ 8)];
  v161 = *(_DWORD *)(v135 + 4 * (v468 ^ 0xD7u)) ^ ((v468 ^ 0xFA)
                                                   + 80595497
                                                   + ((2
                                                     * (((v468 ^ 0xFA) + 44) & 0xFFFFFFFD ^ (HIWORD(v436) | 0x7FFFFFFE))) ^ 0xC9403));
  LODWORD(v85) = *(_DWORD *)&v139[4 * (v431 ^ 0x55)];
  v437 = v82 - ((2 * v82) & 0x99BC4B8);
  LODWORD(v82) = v470 ^ 0x94;
  v469 = (BYTE2(v160) ^ 0xA7)
       + 80595497
       + ((2 * (((BYTE2(v160) ^ 0xA7) + 44) & 0xFFFFFFFD ^ (HIWORD(v160) ^ 0xBAF7 | 0x7FFFFFFE))) ^ 0xC9403);
  v471 = v464 ^ 0x4B;
  v162 = (v161 - ((2 * v161) & 0x38D85ECA) - 1670631579) ^ *(_DWORD *)&v137[4 * (v475 ^ 0xAB)] ^ (181304767
                                                                                                * *(_DWORD *)&v139[4 * v82]
                                                                                                - 2080797898);
  LODWORD(v65) = *(_DWORD *)(v61 - 208);
  v476 = v162 - ((2 * v162) & 0x99BC4B8);
  v163 = *(_DWORD *)(v61 - 240);
  v164 = (181304767 * v85 - ((94174078 * v85 + 133371500) & 0x99BC4B8) + 147287442) ^ ((BYTE2(v65) ^ 0xBA)
                                                                                     - ((v163 + 2 * (BYTE2(v65) ^ 0xBA)) & 0xFFFFFFF9)
                                                                                     + 80595496) ^ *(_DWORD *)&v138[4 * ((v65 >> 24) ^ 0x2F)] ^ *(_DWORD *)(v135 + 4 * (BYTE2(v65) ^ 0x97u));
  v465 = v164 - ((2 * v164) & 0x38D85ECA);
  v165 = BYTE2(*(_DWORD *)(v61 - 144));
  v166 = *(_DWORD *)(v135 + 4 * (v165 ^ 0x3Au)) ^ ((v165 ^ 0x17) - ((v163 + 2 * (v165 ^ 0x17)) & 0xFFFFFFF9) + 80595496);
  v167 = *(_DWORD *)(v61 - 224);
  LODWORD(v82) = *(_DWORD *)(v135 + 4 * (BYTE2(v167) ^ 0x56u)) ^ ((BYTE2(v167) ^ 0x7B)
                                                                  - 2
                                                                  * ((BYTE2(v167) ^ 0x7B) & 3 ^ ((BYTE2(v167) ^ 0x7B)
                                                                                               + 412204))
                                                                  + 80595496);
  v168 = (v166 - ((2 * v166) & 0x38D85ECA) - 1670631579) ^ *(_DWORD *)&v137[4 * (HIBYTE(v426) ^ 0x9E)] ^ (181304767 * *(_DWORD *)&v139[4 * (v426 ^ 0x51)] - 2080797898);
  LODWORD(v85) = *(_DWORD *)&v139[4 * (*(_DWORD *)(v61 - 216) ^ 0xFB)];
  LODWORD(v85) = (181304767 * v85 - ((362609534 * v85 + 133371500) & 0x38D85ECA) + 543537819) ^ *(_DWORD *)&v137[4 * (BYTE1(*(_DWORD *)(v61 - 216)) ^ 0xEF)];
  LODWORD(v432) = v168 - ((2 * v168) & 0x99BC4B8);
  LODWORD(v427) = v85 - ((2 * v85) & 0x99BC4B8);
  v169 = (v82 - ((2 * v82) & 0x99BC4B8) - 2066881956) ^ *(_DWORD *)&v138[4 * (HIBYTE(v167) ^ 0xD9)] ^ (181304767 * *(_DWORD *)&v139[4 * (v167 ^ 0x79)] - 2080797898);
  LODWORD(v82) = *(_DWORD *)(v135 + 4 * (v441 ^ 0x86u)) ^ ((v441 ^ 0xAB)
                                                           - 2 * ((v441 ^ 0xAB) & 3 ^ ((v441 ^ 0xAB) + 412204))
                                                           + 80595496);
  LODWORD(v82) = (v82 - ((2 * v82) & 0x99BC4B8) - 2066881956) ^ *(_DWORD *)&v138[4 * v457];
  v418 = v445 ^ 0xEE;
  v446 = v82 - ((2 * v82) & 0x38D85ECA);
  v442 = v169 - ((2 * v169) & 0x38D85ECA);
  v451 = v453;
  v170 = *(_DWORD *)(v135 + 4 * (v421 ^ 0xC9u)) ^ ((v421 ^ 0xE4)
                                                   + 80595497
                                                   + ((2
                                                     * ((((unsigned __int16)v421 ^ 0xE4) + 44) & 0x1FE ^ (v424 | 0xFFFFFFFD))) ^ 0xC9405));
  v171 = *(_DWORD *)(v61 - 232);
  v458 = (BYTE2(v171) ^ 0x8F)
       + 80595497
       + ((2 * (((BYTE2(v171) ^ 0x8F) + 44) & 0xFFFFFFFD ^ (HIWORD(v171) ^ 0x4263 | 0x7FFFFFFE))) ^ 0xC9403);
  LODWORD(v85) = *(_DWORD *)(v135 + 4 * (BYTE2(v132) ^ 0xE8u)) ^ ((BYTE2(v132) ^ 0xC5)
                                                                  + 80595497
                                                                  + ((2
                                                                    * (((BYTE2(v132) ^ 0xC5) + 44) & 0x1FE ^ (HIWORD(v132) | 0xFFFFFFFD))) ^ 0xC9405));
  v172 = (181304767 * *(_DWORD *)&v139[4 * (v132 ^ 0xCA)] - 2080797898) ^ *(_DWORD *)&v138[4 * (HIBYTE(v132) ^ 0x8E)] ^ (v85 - ((2 * v85) & 0x99BC4B8) - 2066881956);
  v425 = v132 ^ v126 ^ 0x44039AAA;
  LODWORD(v82) = (181304767 * *(_DWORD *)&v139[4 * (v428 ^ 0xDB)] - 2080797898) ^ (((v428 ^ 0x44039AAAu) >> 16)
                                                                                                  + 80595497
                                                                                                  + ((2 * ((((v428 ^ 0x44039AAAu) >> 16) + 44) & 0xFFFFFFFD ^ (((v428 ^ 0x44039AAAu) >> 16) | 0x7FFFFFFE))) ^ 0xC9403)) ^ *(_DWORD *)(v135 + 4 * (((v428 ^ 0x44039AAAu) >> 16) ^ 0x2Du));
  *(_DWORD *)(v61 - 200) = HIBYTE(*(_DWORD *)(v61 - 200)) ^ 0x16;
  v414 = BYTE1(v132) ^ 0x16;
  v422 = v172 - ((2 * v172) & 0x38D85ECA);
  v173 = (v82 - ((2 * v82) & 0x38D85ECA) - 1670631579) ^ *(_DWORD *)&v137[4
                                                                        * (((unsigned __int16)(v132 ^ v126) >> 8) ^ 0xC0)];
  v174 = *(_DWORD *)&v138[4 * (v434 ^ 0x22)] ^ (181304767 * *(_DWORD *)&v139[4 * (v433 ^ 0xFE)] - 2080797898) ^ (v170 - ((2 * v170) & 0x99BC4B8) - 2066881956);
  LODWORD(a23) = v173 - ((2 * v173) & 0x99BC4B8);
  HIDWORD(v432) = v174 - ((2 * v174) & 0x38D85ECA);
  v175 = *(_DWORD *)&v139[4 * (v495 ^ 0xEC)];
  v176 = *(_DWORD *)(v135 + 4 * (v520 ^ 0x32u)) ^ ((v520 ^ 0x1F)
                                                   + 80595497
                                                   + ((2
                                                     * ((((unsigned __int16)v520 ^ 0x1F) + 44) & 0x1FE ^ (v520 ^ 0x1F | 0xFFFFFFFD))) ^ 0xC9405));
  v177 = 181304767 * *(_DWORD *)&v139[4 * (*(_DWORD *)(v61 - 184) ^ 0xE6)];
  v178 = *(_DWORD *)&v138[4 * (HIBYTE(v495) ^ 0xCA)] ^ ((BYTE2(v495) ^ 0x2F)
                                                      - ((v163 + 2 * (BYTE2(v495) ^ 0x2F)) & 0xFFFFFFF9)
                                                      + 80595496) ^ *(_DWORD *)(v135 + 4 * (BYTE2(v495) ^ 2u)) ^ (181304767 * v175 - ((94174078 * v175 + 133371500) & 0x99BC4B8) + 147287442);
  v179 = (v176 - ((2 * v176) & 0x38D85ECA) - 1670631579) ^ *(_DWORD *)&v137[4 * (v531 ^ 0x8C)] ^ (181304767
                                                                                                * *(_DWORD *)&v139[4 * (v556 ^ 0xD9)]
                                                                                                - 2080797898);
  LODWORD(v82) = *(_DWORD *)(v61 - 184) ^ 0x49A657C7;
  v180 = *(_DWORD *)&v138[4 * BYTE3(v82)] ^ ((BYTE2(v82) ^ 0x35)
                                           - 2 * ((BYTE2(v82) ^ 0x35) & 3 ^ ((BYTE2(v82) ^ 0x35) + 412204))
                                           + 80595496) ^ *(_DWORD *)(v135 + 4 * (BYTE2(v82) ^ 0x18u)) ^ (v177 - 2 * ((v177 + 66685750) & 0x4CDE25D ^ v177 & 1) + 147287442);
  LODWORD(v65) = *(_DWORD *)(v61 - 176);
  LODWORD(v85) = *(_DWORD *)(v135 + 4 * (((v65 ^ 0xDD447350) >> 16) ^ 0x2Du)) ^ (((v65 ^ 0xDD447350) >> 16) + 80595497 + ((2 * ((((v65 ^ 0xDD447350) >> 16) + 44) & 0x1FE ^ (((v65 ^ 0xDD447350) >> 16) | 0xFFFFFFFD))) ^ 0xC9405));
  v557 = (v178 - 1670631578 + (~(2 * v178) | 0xC727A135)) ^ *(_DWORD *)&v137[4 * (BYTE1(v495) ^ 0x2E)];
  v532 = v179 - ((2 * v179) & 0x99BC4B8);
  v181 = (v85 - ((2 * v85) & 0x99BC4B8) - 2066881956) ^ *(_DWORD *)&v138[4 * ((v65 ^ 0xDD447350) >> 24)] ^ (181304767 * *(_DWORD *)&v139[4 * (v65 ^ 0xC0)] - 2080797898);
  v496 = v180 - ((2 * v180) & 0x38D85ECA);
  HIDWORD(v427) = v181 - ((2 * v181) & 0x38D85ECA);
  v182 = *(_DWORD *)(v135 + 4 * (v511 ^ 0xC1u)) ^ ((v511 ^ 0xEC)
                                                   - 2 * (((v511 ^ 0xEC) + 412204) ^ HIWORD(v491) & 3)
                                                   + 80595496);
  v183 = (v182 - 1670631578 + (~(2 * v182) | 0xC727A135)) ^ (181304767 * *(_DWORD *)&v139[4 * (v529 ^ 0xE2)] - 2080797898) ^ *(_DWORD *)&v137[4 * ((v515 - ((2 * v504) & 0x166) + 179) ^ 0x54)];
  v505 = BYTE1(v522) ^ 0x77;
  LOBYTE(v181) = BYTE2(v508) ^ 0x53;
  v184 = *(_DWORD *)&v139[4 * (*(_DWORD *)(v61 - 148) ^ 0xB7)];
  v185 = (181304767 * v184 - ((94174078 * v184 + 133371500) & 0x99BC4B8) + 147287442) ^ *(_DWORD *)&v138[4 * (HIBYTE(v508) ^ 0xFB)];
  v530 = v183 - ((2 * v183) & 0x99BC4B8);
  v509 = v185 - ((2 * v185) & 0x38D85ECA);
  v512 = v499 ^ 0xEEA2BFA8;
  v186 = *(_DWORD *)(v135 + 4 * (((v499 ^ 0xEEA2BFA8) >> 16) ^ 0x86u)) ^ ((((v499 ^ 0xEEA2BFA8) >> 16) ^ 0xAB)
                                                                                           - 2
                                                                                           * ((((v499 ^ 0xEEA2BFA8) >> 16) ^ 0xAB) & 3 ^ ((((v499 ^ 0xEEA2BFA8) >> 16) ^ 0xAB) + 412204))
                                                                                           + 80595496);
  v187 = (181304767 * *(_DWORD *)&v139[4 * (v499 ^ 0x68)] - 2080797898) ^ *(_DWORD *)&v137[4 * (BYTE1(v499) ^ 0x55)] ^ (v186 - ((2 * v186) & 0x38D85ECA) - 1670631579);
  v188 = v522 ^ 0x231B9DB5;
  LODWORD(v85) = ((v522 ^ 0x231B9DB5) >> 16);
  v521 = (v85 ^ 0xC1)
       + 80595497
       + ((2 * ((((unsigned __int16)v85 ^ 0xC1) + 44) & 0x1FE ^ (((v522 ^ 0x231B9DB5) >> 16) | 0xFFFFFFFD))) ^ 0xC9405);
  v492 = v187 - ((2 * v187) & 0x99BC4B8);
  v189 = v181;
  v516 = (v181 ^ 0x15)
       + 80595497
       + ((2 * (((v181 ^ 0x15) + 44) & 0x1FE ^ (v181 | 0xFFFFFFFD))) ^ 0xC9405);
  v190 = *(_DWORD *)&v139[4 * (v544 ^ 0x74)];
  LODWORD(v83) = *(_DWORD *)&v139[4 * v429];
  v191 = *(_DWORD *)&v139[4 * v420];
  v192 = *(_DWORD *)&v139[4 * (v522 ^ 0x75)];
  HIDWORD(v411) = 181304767 * *(_DWORD *)&v139[4 * (v127 ^ 0x60)] - 2080797898;
  LODWORD(v430) = 181304767 * *(_DWORD *)&v139[4 * (v559 ^ 0xFB)] - 2080797898;
  HIDWORD(v419) = 181304767 * (_DWORD)v83 - 2080797898;
  v523 = 181304767 * v191 - 2080797898;
  v527 = 181304767 * *(_DWORD *)&v139[4 * (v537 ^ 0xF0)] - 2080797898;
  v560 = 181304767 * *(_DWORD *)&v139[4 * (*(_DWORD *)(v61 - 140) ^ 0x57)] - 2080797898;
  v500 = 181304767 * *(_DWORD *)&v139[4 * (v539 ^ 0x1F)] - 2080797898;
  v540 = 181304767 * *(_DWORD *)&v139[4 * (v171 ^ 0x78)] - 2080797898;
  LODWORD(v412) = 181304767 * v192 - 2080797898;
  HIDWORD(v412) = 181304767 * *(_DWORD *)&v139[4 * (v548 ^ 0x8C)] - 2080797898;
  LODWORD(v413) = 181304767 * *(_DWORD *)&v139[4 * (*(_DWORD *)(v61 - 136) ^ 0xB8)] - 2080797898;
  LODWORD(v65) = (181304767 * v190 - ((94174078 * v190 + 133371500) & 0x99BC4B8) + 147287442) ^ *(_DWORD *)&v138[4 * (v546 ^ 0x7B)];
  v193 = v561;
  v194 = *(_DWORD *)(v135 + 4 * (BYTE2(v561) ^ 0x64u)) ^ ((BYTE2(v561) ^ 0x49)
                                                          + 80595497
                                                          + ((2
                                                            * (((BYTE2(v561) ^ 0x49) + 44) & 0xFFFFFFFD ^ (BYTE2(v561) ^ 0x49 | 0x7FFFFFFE))) ^ 0xC9403)) ^ (181304767 * *(_DWORD *)&v139[4 * (v561 ^ 0x6D)] - 2080797898);
  v195 = (v194 - ((2 * v194) & 0x38D85ECA) - 1670631579) ^ *(_DWORD *)&v137[4 * (BYTE1(v561) ^ 0xC1)];
  v196 = *(_DWORD *)(v135 + 4 * (BYTE2(v548) ^ 0xAAu)) ^ ((BYTE2(v548) ^ 0x87)
                                                          - ((*(_DWORD *)(v61 - 240) + 2 * (BYTE2(v548) ^ 0x87)) & 0xFFFFFFF9)
                                                          + 80595496);
  LODWORD(v417) = (BYTE2(v126) ^ 0x4C) - ((2 * (BYTE2(v126) ^ 0x4C) + 824408) & 0xFFFFFFF9) + 80595496;
  v494 = (v451 ^ 0x65) - 2 * ((v451 ^ 0x65) & 3 ^ ((v451 ^ 0x65) + 412204)) + 80595496;
  v197 = (181304767 * *(_DWORD *)&v139[4 * (v563 ^ 0x2A)] - 2080797898) ^ ((BYTE2(v563) ^ 0x37)
                                                                                          - 2
                                                                                          * ((BYTE2(v563) ^ 0x37) & 3 ^ ((BYTE2(v563) ^ 0x37) + 412204))
                                                                                          + 80595496) ^ *(_DWORD *)(v135 + 4 * (BYTE2(v563) ^ 0x1Au));
  LODWORD(v86) = (_DWORD)v65 - ((2 * (_DWORD)v65) & 0x38D85ECA);
  v198 = (v197 - ((2 * v197) & 0x99BC4B8) - 2066881956) ^ *(_DWORD *)&v138[4 * (HIBYTE(v563) ^ 0xF9)];
  HIDWORD(v417) = *(_DWORD *)(v135 + 4 * (BYTE2(v126) ^ 0x61u));
  *(_DWORD *)(v61 - 240) = *(_DWORD *)(v135 + 4 * (BYTE2(v160) ^ 0x8Au));
  v501 = *(_DWORD *)(v135 + 4 * (v451 ^ 0x48u));
  v538 = *(_DWORD *)(v135 + 4 * (BYTE2(v171) ^ 0xA2u));
  HIDWORD(a25) = *(_DWORD *)(v135 + 4 * (v85 ^ 0xEC));
  v199 = v572 ^ 0x4C64A1B;
  HIDWORD(v413) = *(_DWORD *)(v135 + 4 * (v189 ^ 0x38u));
  v573 = *(_DWORD *)(v135 + 4 * (v572 ^ 0x1Au));
  LODWORD(v411) = *(_DWORD *)&v137[4 * (BYTE1(v127) ^ 0xB0)];
  v503 = *(_DWORD *)&v137[4 * (v416 ^ 0x8E)];
  LODWORD(v82) = ((v565 >> 15) & 0x58 ^ 0x48) + v199;
  v566 = *(_DWORD *)&v137[4 * (BYTE1(*(_DWORD *)(v61 - 136)) ^ 0x85)];
  *(_DWORD *)(v61 - 192) = *(_DWORD *)&v137[4 * (BYTE1(*(_DWORD *)(v61 - 192)) ^ 0xBD)];
  HIDWORD(v415) = v82 - ((2 * v82) & 0x7FFFF8);
  v452 = *(_DWORD *)&v137[4 * (v479 ^ 0xB4)];
  LODWORD(v82) = HIBYTE(*(_DWORD *)(v61 - 160)) ^ 0x49;
  v478 = *(_DWORD *)&v137[4 * (v550 ^ 0x1A)];
  v448 = *(_DWORD *)&v137[4 * (v450 ^ 0x14)];
  *(_DWORD *)(v61 - 160) = *(_DWORD *)&v137[4 * (BYTE1(v160) ^ 0xF5)];
  *(_DWORD *)(v61 - 208) = *(_DWORD *)&v137[4 * (BYTE1(*(_DWORD *)(v61 - 208)) ^ 0xD6)];
  v562 = *(_DWORD *)&v137[4 * v418];
  *(_DWORD *)(v61 - 224) = *(_DWORD *)&v137[4 * (BYTE1(*(_DWORD *)(v61 - 224)) ^ 0xD7)];
  v200 = *(_DWORD *)(v61 - 232);
  HIDWORD(v410) = *(_DWORD *)&v137[4 * (BYTE1(v200) ^ 0x76)];
  v201 = *(_DWORD *)&v137[4 * v414];
  v202 = v195 - ((2 * v195) & 0x99BC4B8);
  v543 = *(_DWORD *)&v137[4 * (v542 ^ 0xBE)];
  *(_DWORD *)(v61 - 184) = *(_DWORD *)&v137[4 * (BYTE1(*(_DWORD *)(v61 - 184)) ^ 0xB9)];
  *(_DWORD *)(v61 - 176) = *(_DWORD *)&v137[4 * (BYTE1(*(_DWORD *)(v61 - 176)) ^ 0xF3)];
  v506 = *(_DWORD *)&v137[4 * v505];
  LODWORD(v415) = *(_DWORD *)&v137[4 * (BYTE1(*(_DWORD *)(v61 - 148)) ^ 0x23)];
  *(_DWORD *)(v61 - 232) = *(_DWORD *)&v137[4 * (v574 ^ 0x84)];
  LODWORD(v419) = *(_DWORD *)&v137[4 * (BYTE1(v563) ^ 0x2E)];
  v203 = *(_DWORD *)&v137[4 * (v569 ^ 0xC8)];
  LODWORD(v410) = v525 - 1670631579;
  HIDWORD(v409) = v517 - 1670631579;
  v575 = v486 - 1670631579;
  HIDWORD(v430) = v483 - 1670631579;
  v568 = v480 - 1670631579;
  v526 = v462 - 1670631579;
  LODWORD(v409) = v454 - 1670631579;
  v564 = v465 - 1670631579;
  v447 = v446 - 1670631579;
  v443 = v442 - 1670631579;
  LODWORD(v65) = v422 - 1670631579;
  HIDWORD(v408) = HIDWORD(v432) - 1670631579;
  v487 = v496 - 1670631579;
  v484 = HIDWORD(v427) - 1670631579;
  v518 = v509 - 1670631579;
  v481 = (_DWORD)v86 - 1670631579;
  v497 = v198 - ((2 * v198) & 0x38D85ECA) - 1670631579;
  LODWORD(v423) = *(_DWORD *)&v138[4 * (HIBYTE(v534) ^ 0xB2)];
  v466 = *(_DWORD *)&v138[4 * (*(_DWORD *)(v61 - 256) ^ 7)];
  HIDWORD(v427) = *(_DWORD *)&v138[4 * *(unsigned int *)(v61 - 200)];
  v510 = *(_DWORD *)&v138[4 * v82];
  v455 = *(_DWORD *)&v138[4 * (HIBYTE(*(_DWORD *)(v61 - 140)) ^ 0xB8)];
  *(_DWORD *)(v61 - 256) = *(_DWORD *)&v138[4 * HIBYTE(v439)];
  v204 = v203 ^ (v196 - ((2 * v196) & 0x38D85ECA) - 1670631579);
  v463 = *(_DWORD *)&v138[4 * v471];
  v440 = *(_DWORD *)&v138[4 * (HIBYTE(*(_DWORD *)(v61 - 144)) ^ 0xBB)];
  HIDWORD(v432) = *(_DWORD *)&v138[4 * (HIBYTE(*(_DWORD *)(v61 - 216)) ^ 0xE8)];
  v205 = *(_DWORD *)&v138[4 * (HIBYTE(v200) ^ 0xA6)];
  v206 = *(_DWORD *)&v138[4 * HIBYTE(v425)];
  v577 = *(_DWORD *)&v138[4 * (v576 ^ 0xAA)];
  LODWORD(v407) = *(_DWORD *)&v138[4 * HIBYTE(v188)];
  HIDWORD(v407) = *(_DWORD *)&v138[4 * (v570 ^ 0x38)];
  v513 = *(_DWORD *)&v138[4 * HIBYTE(v512)];
  HIDWORD(v423) = *(_DWORD *)&v138[4 * (HIBYTE(v193) ^ 0x49)];
  LODWORD(v408) = *(_DWORD *)&v138[4 * ((v548 ^ 0xF8967BB5) >> 24)];
  v207 = v535 - 2066881956;
  v472 = v490 - 2066881956;
  *(_DWORD *)(v61 - 216) = v437 - 2066881956;
  v571 = v476 - 2066881956;
  *(_DWORD *)(v61 - 200) = v532 - 2066881956;
  v208 = v530 - 2066881956;
  v209 = v202 - 2066881956;
  v210 = v204 - ((2 * v204) & 0x99BC4B8) - 2066881956;
  v211 = v558 ^ v557 ^ 0x6285F181;
  v212 = v65 ^ v201 ^ v211;
  v213 = (char *)*(&off_1E5B5B480 + (*(_DWORD *)(v61 - 168) ^ 0x96)) - 8;
  LODWORD(v65) = *(_DWORD *)(v61 - 168);
  v214 = (char *)*(&off_1E5B5B480 + (int)(v65 ^ 0x7E)) - 4;
  v215 = (char *)*(&off_1E5B5B480 + (int)(v65 ^ 0x65)) - 8;
  v216 = (char *)*(&off_1E5B5B480 + (int)(v65 ^ 0x87)) - 12;
  v217 = (v216[*(unsigned __int8 *)(v61 - 109) ^ 0x41] ^ 0xAD) & 0xFF00FFFF | (((v214[*(unsigned __int8 *)(v61 - 111) ^ 0x40] + 67) ^ 0x5A) << 16) | ((v215[*(unsigned __int8 *)(v61 - 110) ^ 0xBBLL] ^ 6) << 8) | ((v213[*(unsigned __int8 *)(v61 - 112) ^ 0x1ELL] ^ (*(unsigned __int8 *)(v61 - 112) - ((2 * *(unsigned __int8 *)(v61 - 112)) & 0xFFE7) + 115) ^ 0x84) << 24);
  v551 = v213;
  v218 = v216[*(unsigned __int8 *)(v61 - 97) ^ 0x74] ^ 0xA | (((v214[*(unsigned __int8 *)(v61 - 99) ^ 0xF3]
                                                                                                  + 67) ^ 2) << 16) | ((v215[*(unsigned __int8 *)(v61 - 98) ^ 0x20] ^ 0xEC) << 8) | ((v213[*(unsigned __int8 *)(v61 - 100) ^ 0xF3] ^ (*(unsigned __int8 *)(v61 - 100) + (~(2 * *(unsigned __int8 *)(v61 - 100)) | 0x19) + 116) ^ 0x85) << 24);
  v545 = v216;
  v547 = v215;
  v219 = (v216[*(unsigned __int8 *)(v61 - 105) ^ 0xE4] ^ 0x9B) & 0xFF00FFFF | ((v213[*(unsigned __int8 *)(v61 - 108) ^ 0x3ELL] ^ (*(unsigned __int8 *)(v61 - 108) - ((2 * *(unsigned __int8 *)(v61 - 108)) & 0xE6) + 115) ^ 0xFFFFFFE1) << 24) | (((v214[*(unsigned __int8 *)(v61 - 107) ^ 0x27] + 67) ^ 0x96) << 16) | ((v215[*(unsigned __int8 *)(v61 - 106) ^ 9] ^ 3) << 8);
  v549 = v214;
  v220 = (v216[*(unsigned __int8 *)(v61 - 101) ^ 0xF2] ^ 0x22) & 0xFF00FFFF | ((v213[*(unsigned __int8 *)(v61 - 104) ^ 0xD3] ^ (*(unsigned __int8 *)(v61 - 104) - ((2 * *(unsigned __int8 *)(v61 - 104)) & 0xFFE7) + 115) ^ 0xE0) << 24) | ((v215[*(unsigned __int8 *)(v61 - 102) ^ 0xBELL] ^ 0xA4) << 8) & 0xFF00FFFF | (((v214[*(unsigned __int8 *)(v61 - 103) ^ 0xE9] + 67) ^ 0x8A) << 16);
  if ((v212 & 0x80) != 0)
    v221 = -128;
  else
    v221 = 128;
  *(_DWORD *)(v61 - 140) = v217 ^ 0xBDCFE2B9;
  *(_DWORD *)(v61 - 136) = v218 ^ 0x87A8C868;
  *(_DWORD *)(v61 - 144) = v219 ^ 0x42DC6B69;
  *(_DWORD *)(v61 - 148) = v220 ^ 0x9DE8D2E9;
  HIDWORD(v541) = HIDWORD(v408) ^ v543;
  LODWORD(v541) = v205 ^ HIDWORD(v410) ^ v538 ^ v458 ^ v540;
  HIDWORD(v536) = (a23 - 2066881956) ^ v206;
  LODWORD(v536) = HIDWORD(v411) ^ v411 ^ v410;
  HIDWORD(v533) = HIDWORD(v409) ^ v503;
  LODWORD(v533) = v423 ^ v417 ^ HIDWORD(v417) ^ v207;
  HIDWORD(v528) = v409 ^ v448;
  LODWORD(v528) = v526 ^ v478 ^ v527;
  HIDWORD(v524) = (v474 - 2066881956) ^ HIDWORD(v427) ^ v523;
  LODWORD(v524) = (v460 - 2066881956) ^ v510;
  HIDWORD(v519) = v506 ^ v407 ^ HIDWORD(a25) ^ v521 ^ v412;
  LODWORD(v519) = v415 ^ v516 ^ HIDWORD(v413) ^ v518;
  HIDWORD(v514) = (v492 - 2066881956) ^ v513;
  LODWORD(v514) = v208 ^ HIDWORD(v407);
  HIDWORD(v507) = v443 ^ *(_DWORD *)(v61 - 224);
  LODWORD(v507) = HIDWORD(v432) ^ v494 ^ v501 ^ (v427 - 2066881956);
  HIDWORD(v502) = (v432 - 2066881956) ^ v440;
  LODWORD(v502) = v500 ^ v562 ^ v447;
  HIDWORD(v498) = HIDWORD(v412) ^ v408 ^ v210;
  LODWORD(v498) = v497 ^ v419;
  HIDWORD(v493) = v209 ^ HIDWORD(v423);
  LODWORD(v493) = *(_DWORD *)(v61 - 232) ^ (HIDWORD(v415) + 491516) ^ v573 ^ v481;
  HIDWORD(v488) = *(_DWORD *)(v61 - 200) ^ v577;
  LODWORD(v488) = v487 ^ *(_DWORD *)(v61 - 184);
  HIDWORD(v482) = v484 ^ *(_DWORD *)(v61 - 176);
  LODWORD(v482) = HIDWORD(v430) ^ *(_DWORD *)(v61 - 192);
  HIDWORD(v477) = v575 ^ v566 ^ v413;
  LODWORD(v477) = HIDWORD(v419) ^ v452 ^ v568;
  HIDWORD(v473) = v430 ^ v466 ^ v472;
  LODWORD(v473) = v564 ^ *(_DWORD *)(v61 - 208);
  HIDWORD(v467) = *(_DWORD *)(v61 - 160) ^ v455 ^ *(_DWORD *)(v61 - 240) ^ v469 ^ v560;
  LODWORD(v467) = v571 ^ v463;
  HIDWORD(v461) = *(_DWORD *)(v61 - 216) ^ *(_DWORD *)(v61 - 256);
  LODWORD(v461) = *(_DWORD *)(v61 - 248) - 2147139165;
  HIDWORD(v456) = (v221 + (v212 ^ 0x2497E332)) ^ v211;
  v222 = *(_DWORD *)(v61 - 128);
  LODWORD(v456) = v222 ^ 0x41D;
  HIDWORD(v449) = v222 ^ 0x4FF;
  LODWORD(v449) = v222 & 0x13380865;
  HIDWORD(v444) = v222 ^ 0x48C;
  LODWORD(v444) = v222 & 0x1E017246;
  HIDWORD(v438) = v222 ^ 0x40D;
  LODWORD(v438) = v222 ^ 0x4F9;
  HIDWORD(a25) = v222 & 0x14575138;
  *(_QWORD *)(v61 - 200) = 13;
  v223 = *(unsigned __int8 **)(v61 - 120);
  v224 = v214[v223[13] ^ 0xF3] + 67;
  *(_QWORD *)(v61 - 160) = 1;
  v225 = (v224 ^ 2) << (((v222 + 49) | 1) - 89);
  v226 = v223[1] ^ 0x57;
  *(_QWORD *)(v61 - 168) = 10;
  v227 = v223[10] ^ 0xB6;
  v228 = ((v214[v226] + 67) ^ 0xF6) << 16;
  *(_QWORD *)(v61 - 192) = 4;
  v229 = (v547[v227] ^ 0x89) << 8;
  v230 = v223[4];
  v231 = v551[v230 ^ 0x9A];
  *(_QWORD *)(v61 - 240) = 7;
  LODWORD(v230) = v231 ^ (v230 - ((2 * v230) & 0xE6) + 115) ^ 0xFFFFFFCF;
  v232 = v223[7] ^ 0xD6;
  *(_QWORD *)(v61 - 224) = 2;
  LODWORD(v230) = v216[v232] ^ 0xC8 | ((_DWORD)v230 << 24);
  LODWORD(v232) = v547[v223[2]] ^ 0x9B;
  *(_QWORD *)(v61 - 184) = 3;
  v233 = v216[v223[3] ^ 0x74];
  *(_QWORD *)(v61 - 176) = 12;
  v234 = v228 | ((_DWORD)v232 << 8) | v233 ^ 0xA;
  LODWORD(v232) = v551[v223[12] ^ 0x6ELL] ^ (v223[12] - ((2 * v223[12]) & 0xFFE7) + 115) ^ 0x51;
  *(_QWORD *)(v61 - 208) = 0;
  v235 = v234 | ((v551[*v223 ^ 0x15] ^ (*v223 - ((2 * *v223) & 0xFFE7) + 115) ^ 0xAE) << 24);
  v236 = v551[v223[8] ^ 0x46] ^ (v223[8] - ((2 * v223[8]) & 0xE6) + 115) ^ 0xFFFFFFE7;
  *(_QWORD *)(v61 - 216) = 14;
  v237 = v229 | (v236 << 24);
  v238 = v547[v223[14] ^ 0xD5] ^ 0x13;
  *(_QWORD *)(v61 - 256) = 11;
  *(_QWORD *)(v61 - 248) = 5;
  LODWORD(v230) = v230 & 0xFF00FFFF | (((v214[v223[5] ^ 0x9DLL] + 67) ^ 0xF7) << 16);
  v239 = v216[v223[11] ^ 0xC2] ^ 0x2F | v237;
  v240 = v223[6] ^ 0xA4;
  v241 = v239 & 0xFF00FFFF | (((v214[v223[9] ^ 0x3ELL] + 67) ^ 0xDF) << 16);
  *(_QWORD *)(v61 - 232) = 15;
  v242 = v225 | ((_DWORD)v232 << 24) | (v238 << 8) | v216[v223[15] ^ 0x47] ^ 0xA;
  v567 = v230 | ((v547[v240] ^ 0x43) << 8);
  v243 = (char *)*(&off_1E5B5B480 + (v222 ^ 0x4FFu)) - 12;
  v244 = ((((unsigned __int16)(v567 ^ v553) >> 8) ^ 0x4C)
        - 1088681404
        - 2 * ((((v567 ^ v553) >> 8) ^ 0xB71C4C) & 0x55 ^ ((v567 ^ v553) >> 8) & 0x11)) ^ *(_DWORD *)&v243[4 * (((unsigned __int16)(v567 ^ v553) >> 8) ^ 0x21)];
  v245 = (uint64_t)*(&off_1E5B5B480 + (v222 ^ 0x41Du));
  v246 = (v244 - 796794566 - ((2 * v244) & 0xA103C274)) ^ *(_DWORD *)(v245
                                                                    + 4
                                                                    * ((v235 ^ BYTE4(v553)) ^ 0xAAu));
  LODWORD(v226) = *(_DWORD *)&v243[4 * (((unsigned __int16)(v552 ^ v242) >> 8) ^ 0xD4)] ^ ((((unsigned __int16)(v552 ^ v242) >> 8) ^ 0xB9) - 1088681404 - (((v552 ^ v242) >> 7) & 0x88));
  LODWORD(v240) = v226 - 1209862494 - ((2 * v226) & 0x6FC5ED44);
  v247 = (uint64_t)*(&off_1E5B5B480 + (v222 ^ 0x48Cu));
  v248 = *(_DWORD *)(v247 + 4 * (((v241 ^ HIDWORD(v552)) >> 16) ^ 0x68u));
  v249 = v246 - 1209862494 - ((2 * v246) & 0x6FC5ED44);
  HIDWORD(v251) = v248 ^ 0x29D;
  LODWORD(v251) = v248 ^ 0xADCEA000;
  v250 = v251 >> 12;
  v252 = *(_DWORD *)(v247 + 4 * ((v235 ^ HIDWORD(v553)) >> 16));
  HIDWORD(v251) = v252 ^ 0x29D;
  LODWORD(v251) = v252 ^ 0xADCEA000;
  v253 = (char *)*(&off_1E5B5B480 + (v222 & 0x13380865)) - 8;
  LODWORD(v240) = v240 ^ *(_DWORD *)&v253[4 * (((v567 ^ v553) >> 24) ^ 0xB7)] ^ (v251 >> 12);
  v254 = *(_DWORD *)(v247 + 4 * (((v552 ^ v242) >> 16) ^ 0xBFu));
  HIDWORD(v251) = v254 ^ 0x29D;
  LODWORD(v251) = v254 ^ 0xADCEA000;
  v255 = *(_DWORD *)(v245 + 4 * ((v567 ^ v553) ^ 0xFBu)) ^ ((unsigned __int16)(v241 ^ WORD2(v552)) >> 8) ^ *(_DWORD *)&v243[4 * (((unsigned __int16)(v241 ^ WORD2(v552)) >> 8) ^ 0x23)] ^ 0x6F9DEB30 ^ (v251 >> 12);
  v256 = *(_DWORD *)(v247 + 4 * (((v567 ^ v553) >> 16) ^ 0x1Cu));
  HIDWORD(v251) = v256 ^ 0x29D;
  LODWORD(v251) = v256 ^ 0xADCEA000;
  LODWORD(v230) = *(_DWORD *)&v253[4 * (((v241 ^ HIDWORD(v552)) >> 24) ^ 0xF6)] ^ (((unsigned __int16)(v235 ^ WORD2(v553) ^ 0x32AA) >> 8)
                                                                                 - 1088681404
                                                                                 - (((v235 ^ HIDWORD(v553)) >> 7) & 0x88)) ^ *(_DWORD *)&v243[4 * (((unsigned __int16)(v235 ^ WORD2(v553) ^ 0x32AA) >> 8) ^ 0x6D)] ^ ((v251 >> 12) - 1209862494 - ((2 * (v251 >> 12)) & 0x6FC5ED44));
  v257 = HIDWORD(v541) ^ *(_DWORD *)&v253[4 * (((v552 ^ v242) >> 24) ^ 0x83)] ^ v250 ^ v249;
  v258 = v541 ^ *(_DWORD *)(v245 + 4 * ((v552 ^ v242) ^ 0xA5u)) ^ (v230
                                                                                    - 796794566
                                                                                    - ((2 * v230) & 0xA103C274));
  v259 = HIDWORD(v536) ^ *(_DWORD *)(v245 + 4 * ((v241 ^ BYTE4(v552)) ^ 0x5Fu)) ^ (v240 - 796794566 - ((2 * v240) & 0xA103C274));
  LODWORD(v230) = HIDWORD(v456) ^ *(_DWORD *)&v253[4 * ((v235 ^ HIDWORD(v553) ^ 0x730032AAu) >> 24)] ^ (v255 - 1209862494 - ((2 * v255) & 0x6FC5ED44));
  v260 = v257 ^ 0xF9388C2F;
  v261 = *(_DWORD *)(v247 + 4 * ((v257 ^ 0xF9388C2F) >> 16));
  HIDWORD(v251) = v261 ^ 0x29D;
  LODWORD(v251) = v261 ^ 0xADCEA000;
  v262 = v251 >> 12;
  v263 = *(_DWORD *)(v247 + 4 * (BYTE2(v258) ^ 0xD9u));
  HIDWORD(v251) = v263 ^ 0x29D;
  LODWORD(v251) = v263 ^ 0xADCEA000;
  v264 = v251 >> 12;
  v265 = *(_DWORD *)(v247 + 4 * (BYTE2(v259) ^ 0x66u));
  HIDWORD(v251) = v265 ^ 0x29D;
  LODWORD(v251) = v265 ^ 0xADCEA000;
  v266 = (v251 >> 12) ^ *(_DWORD *)&v243[4 * (BYTE1(v230) ^ 5)] ^ ((BYTE1(v230) ^ 0x68)
                                                                 - 1088681404
                                                                 - 2
                                                                 * (((v230 >> 8) ^ 0x42BD68) & 0x47 ^ (v230 >> 8) & 3));
  v267 = (v262 - 796794566 - ((2 * v262) & 0xA103C274)) ^ *(_DWORD *)(v245 + 4 * (v259 ^ 0xB6u));
  v268 = (v266 - 796794566 - ((2 * v266) & 0xA103C274)) ^ *(_DWORD *)(v245 + 4 * (v257 ^ 0x61u));
  v269 = (((unsigned __int16)(v257 ^ 0x8C2F) >> 8) - 1088681404 - (((v257 ^ 0xF9388C2F) >> 7) & 0x88)) ^ 0xD678EAEF ^ *(_DWORD *)&v243[4 * (((unsigned __int16)(v257 ^ 0x8C2F) >> 8) ^ 0x6D)];
  v270 = *(_DWORD *)&v253[4 * (HIBYTE(v259) ^ 0x43)] ^ 0x15F8AD1C;
  v271 = v269 + v270;
  v272 = v269 & v270;
  v273 = *(_DWORD *)(v247 + 4 * (BYTE2(v230) ^ 0xBDu));
  HIDWORD(v251) = v273 ^ 0x29D;
  LODWORD(v251) = v273 ^ 0xADCEA000;
  v274 = (v271 - 2 * v272) ^ (v251 >> 12);
  v275 = *(_DWORD *)&v253[4 * HIBYTE(v260)] ^ (v264 - 1209862494 - ((2 * v264) & 0x6FC5ED44));
  v276 = (v275 - 796794566 - ((2 * v275) & 0xA103C274)) ^ *(_DWORD *)(v245 + 4 * (v230 ^ 0xABu));
  LODWORD(v230) = *(_DWORD *)&v253[4 * (BYTE3(v230) ^ 0x42)] ^ v558 ^ *(_DWORD *)&v243[4 * (BYTE1(v258) ^ 0x3B)] ^ ((BYTE1(v258) ^ 0x56) - 1088681404 - ((2 * ((v258 >> 8) ^ 0xCDD956)) & 0x88)) ^ (v267 - 1209862494 - ((2 * v267) & 0x6FC5ED44));
  v277 = v536 ^ *(_DWORD *)&v243[4 * (BYTE1(v259) ^ 0x39)] ^ (v276 - 1088681404 - ((2 * v276) & 0x7E381488));
  v278 = HIDWORD(v533) ^ *(_DWORD *)&v253[4 * (HIBYTE(v258) ^ 0xCD)] ^ (v268 - 1209862494 - ((2 * v268) & 0x6FC5ED44));
  v279 = v533 ^ *(_DWORD *)(v245 + 4 * (v258 ^ 0x51u)) ^ (v274 - 796794566 - ((2 * v274) & 0xA103C274));
  v280 = *(_DWORD *)(v247 + 4 * (BYTE2(v279) ^ 0x79u));
  HIDWORD(v251) = v280 ^ 0x29D;
  LODWORD(v251) = v280 ^ 0xADCEA000;
  BYTE1(v280) = BYTE1(v278) ^ 0x68;
  v281 = ((v251 >> 12) - 1209862494 - ((2 * (v251 >> 12)) & 0x6FC5ED44)) ^ *(_DWORD *)&v253[4
                                                                                          * ((v278 ^ 0x2261685Eu) >> 24)];
  v282 = ((BYTE1(v279) ^ 0xD0) - 1088681404 - 2 * (((v279 >> 8) ^ 0x679D0) & 0x4C ^ (v279 >> 8) & 8)) ^ *(_DWORD *)&v243[4 * (BYTE1(v279) ^ 0xBD)];
  v283 = (v282 - 796794566 - ((2 * v282) & 0xA103C274)) ^ *(_DWORD *)(v245 + 4 * (v230 ^ 0x76u));
  LODWORD(v240) = ((BYTE1(v277) ^ 0xEC) - 1088681404 - ((2 * ((v277 >> 8) ^ 0xE5FEC)) & 0x88)) ^ *(_DWORD *)&v243[4 * (BYTE1(v277) ^ 0x81)];
  v284 = *(_DWORD *)(v247 + 4 * (BYTE2(v277) ^ 0x5Fu));
  HIDWORD(v251) = v284 ^ 0x29D;
  LODWORD(v251) = v284 ^ 0xADCEA000;
  v285 = v251 >> 12;
  HIDWORD(v251) = *(_DWORD *)(v245 + 4 * (v278 ^ 0x5Eu)) ^ 0x3996C6B2;
  LODWORD(v251) = HIDWORD(v251);
  LODWORD(v240) = (v251 >> 28) ^ __ROR4__(*(_DWORD *)&v253[4 * (HIBYTE(v279) ^ 6)] ^ 0x7462B151 ^ (v240- 1209862494- ((2 * v240) & 0x6FC5ED44)), 28);
  v286 = (v285 - 1209862494 - ((2 * v285) & 0x6FC5ED44)) ^ *(_DWORD *)&v253[4 * (BYTE3(v230) ^ 0xD2)];
  v287 = *(_DWORD *)(v245 + 4 * (v279 ^ 0x4Cu));
  v288 = *(_DWORD *)(v247 + 4 * (BYTE2(v278) ^ 0x1Bu));
  v289 = (v286 - 796794566 - ((2 * v286) & 0xA103C274)) ^ v287;
  HIDWORD(v251) = v288 ^ 0x29D;
  LODWORD(v251) = v288 ^ 0xADCEA000;
  v290 = v251 >> 12;
  v291 = v281 - 796794566 - ((2 * v281) & 0xA103C274);
  v292 = BYTE1(v230) ^ 0xC0;
  v293 = v292 - 1088681404 - 2 * (((v230 >> 8) ^ 0xD2CCC0) & 0x56 ^ (v230 >> 8) & 0x12);
  LODWORD(v230) = *(_DWORD *)(v247 + 4 * (BYTE2(v230) ^ 0xCCu));
  HIDWORD(v251) = v230 ^ 0x29D;
  LODWORD(v251) = v230 ^ 0xADCEA000;
  v294 = HIDWORD(v528) ^ (v251 >> 12) ^ __ROR4__(v240 ^ 0x78071371, 4);
  LOBYTE(v230) = v277 ^ BYTE1(v259) ^ 0x54;
  v295 = v528 ^ *(_DWORD *)&v253[4 * (HIBYTE(v277) ^ 0xE)] ^ v290 ^ (v283 - 1209862494 - ((2 * v283) & 0x6FC5ED44));
  v296 = BYTE1(v280);
  v297 = HIDWORD(v524) ^ *(_DWORD *)&v243[4 * (BYTE1(v280) ^ 0x6D)] ^ (v289 - 1088681404 - ((2 * v289) & 0x7E381488));
  v298 = v524 ^ v293 ^ *(_DWORD *)(v245 + 4 * (v230 ^ 0xCAu)) ^ *(_DWORD *)&v243[4 * (v292 ^ 0x6D)] ^ v291;
  LODWORD(v240) = v296 ^ 0x4552953C ^ v297;
  LODWORD(v230) = *(_DWORD *)(v247 + 4 * BYTE2(v240));
  HIDWORD(v251) = v230 ^ 0x29D;
  LODWORD(v251) = v230 ^ 0xADCEA000;
  v299 = v251 >> 12;
  v300 = *(_DWORD *)(v247 + 4 * ((v294 ^ 0x99FEE750) >> 16));
  HIDWORD(v251) = v300 ^ 0x29D;
  LODWORD(v251) = v300 ^ 0xADCEA000;
  v301 = *(_DWORD *)(v247 + 4 * (BYTE2(v298) ^ 2u));
  v302 = (BYTE1(v240) - 1088681404 - ((v240 >> 7) & 0x88)) ^ *(_DWORD *)(v245
                                                                                     + 4
                                                                                     * (v295 ^ 0x72u)) ^ *(_DWORD *)&v243[4 * (BYTE1(v240) ^ 0x6D)] ^ ((v251 >> 12) - 796794566 - ((2 * (v251 >> 12)) & 0xA103C274));
  HIDWORD(v251) = v301 ^ 0x29D;
  LODWORD(v251) = v301 ^ 0xADCEA000;
  LODWORD(v240) = *(_DWORD *)(v245 + 4 * (v296 ^ 0x3Cu ^ v297)) ^ *(_DWORD *)&v253[4 * (HIBYTE(v295) ^ 0xA7)] ^ (v251 >> 12) ^ 0x67631798;
  v303 = *(_DWORD *)(v247 + 4 * (BYTE2(v295) ^ 0x3Bu));
  HIDWORD(v251) = v303 ^ 0x29D;
  LODWORD(v251) = v303 ^ 0xADCEA000;
  v304 = HIDWORD(v519) ^ ((BYTE1(v298) ^ 0xD9) - 1088681404 - ((2 * ((v298 >> 8) ^ 0x9802D9)) & 0x88)) ^ *(_DWORD *)(v245 + 4 * (v294 ^ 0x1Eu)) ^ *(_DWORD *)&v243[4 * (BYTE1(v298) ^ 0xB4)] ^ (v251 >> 12) ^ *(_DWORD *)&v253[4 * (HIBYTE(v297) ^ 0x61)];
  v305 = v302 - 1209862494 - ((2 * v302) & 0x6FC5ED44);
  v306 = *(_DWORD *)(v245 + 4 * (v298 ^ 0x3Du));
  v307 = v519 ^ *(_DWORD *)&v253[4 * (HIBYTE(v298) ^ 0x98)] ^ v305;
  v308 = HIDWORD(v514) ^ v306 ^ ((BYTE1(v295) ^ 0x29) - 1088681404 - ((v295 >> 7) & 0x88)) ^ *(_DWORD *)&v253[4 * ((v294 ^ 0x99FEE750) >> 24)] ^ *(_DWORD *)&v243[4 * (BYTE1(v295) ^ 0x44)] ^ v299;
  v309 = *(_DWORD *)(v247 + 4 * (BYTE2(v304) ^ 0x24u));
  HIDWORD(v251) = v309 ^ 0x29D;
  LODWORD(v251) = v309 ^ 0xADCEA000;
  v310 = v251 >> 12;
  v311 = *(_DWORD *)(v247 + 4 * (BYTE2(v308) ^ 0x8Bu));
  HIDWORD(v251) = v311 ^ 0x29D;
  LODWORD(v251) = v311 ^ 0xADCEA000;
  v312 = v514 ^ *(_DWORD *)&v243[4 * (((unsigned __int16)(v294 ^ 0xE750) >> 8) ^ 0x6D)] ^ (v240 - 1088681404 - ((2 * v240) & 0x7E381488));
  v313 = BYTE1(v308) ^ 0xE8;
  v314 = v313 - 1088681404 - ((2 * ((v308 >> 8) ^ 0xB28BE8)) & 0x88);
  v315 = v304 ^ 0xE95E4201;
  LODWORD(v230) = *(_DWORD *)(v245
                            + 4
                            * ((v514 ^ v243[4
                                                           * (((unsigned __int16)(v294 ^ 0xE750) >> 8) ^ 0x6D)] ^ (v240 + 68 - ((2 * v240) & 0x88)) ^ ((unsigned __int16)(v294 ^ 0xE750) >> 8)) ^ 0x41u)) ^ (((unsigned __int16)(v304 ^ 0x4201) >> 8) - 1088681404 - (((v304 ^ 0xE95E4201) >> 7) & 0x88)) ^ *(_DWORD *)&v243[4 * (((unsigned __int16)(v304 ^ 0x4201) >> 8) ^ 0x6D)] ^ ((v251 >> 12) - 796794566 - ((2 * (v251 >> 12)) & 0xA103C274));
  v316 = *(_DWORD *)(v247 + 4 * (BYTE2(v312) ^ 0x81u));
  HIDWORD(v251) = v316 ^ 0x29D;
  LODWORD(v251) = v316 ^ 0xADCEA000;
  LODWORD(v240) = v230 - 1209862494 - ((2 * v230) & 0x6FC5ED44);
  LODWORD(v230) = ((v251 >> 12) - 1209862494 - ((2 * (v251 >> 12)) & 0x6FC5ED44)) ^ *(_DWORD *)&v253[4 * HIBYTE(v315)];
  LODWORD(v230) = (v230 - 796794566 - ((2 * v230) & 0xA103C274)) ^ *(_DWORD *)(v245
                                                                             + 4 * (v308 ^ 0x9Du));
  v317 = ((BYTE1(v312) ^ 0xA0) - 1088681404 - ((v312 >> 7) & 0x88)) ^ (v310 - 796794566 - ((2 * v310) & 0xA103C274)) ^ *(_DWORD *)(v245 + 4 * (v307 ^ 0xFCu)) ^ *(_DWORD *)&v243[4 * (BYTE1(v312) ^ 0xCD)];
  v318 = *(_DWORD *)(v247 + 4 * (BYTE2(v307) ^ 0xC6u));
  LODWORD(v251) = __ROR4__((v318 >> 12) ^ 0x26701C8, 17) ^ 0xEE910136;
  HIDWORD(v251) = v251;
  LODWORD(v230) = HIDWORD(v507) ^ *(_DWORD *)&v243[4 * (BYTE1(v307) ^ 0x75)] ^ (v230
                                                                              - 1088681404
                                                                              - ((2 * v230) & 0x7E381488));
  v319 = v507 ^ *(_DWORD *)&v253[4 * (HIBYTE(v308) ^ 0xB2)] ^ (v317 - 1209862494 - ((2 * v317) & 0x6FC5ED44));
  v320 = HIDWORD(v502) ^ *(_DWORD *)&v253[4 * (HIBYTE(v307) ^ 0x5A)] ^ v240;
  v321 = v502 ^ v314 ^ *(_DWORD *)(v245 + 4 * v315) ^ *(_DWORD *)&v253[4 * (HIBYTE(v312) ^ 0x68)] ^ *(_DWORD *)&v243[4 * (v313 ^ 0x6D)] ^ ((v251 >> 15) + (v318 << 20));
  v322 = ((BYTE1(v230) ^ 0x9D) - 1088681404 - ((2 * ((v230 >> 8) ^ 0xC2489D)) & 0x88)) ^ *(_DWORD *)&v243[4 * (BYTE1(v230) ^ 0xF0)];
  v323 = *(_DWORD *)(v247 + 4 * (BYTE2(v319) ^ 0x8Fu));
  v324 = *(_DWORD *)(v245 + 4 * (v321 ^ 0x12u)) ^ (v323 << 20) ^ (v323 >> 12) ^ (v322
                                                                                                  - 796794566
                                                                                                  - ((2 * v322) & 0xA103C274));
  LODWORD(v240) = *(_DWORD *)(v247 + 4 * ((v320 ^ 0xCFB8D782) >> 16));
  HIDWORD(v251) = v240 ^ 0x29D;
  LODWORD(v251) = v240 ^ 0xADCEA000;
  v325 = ((v251 >> 12) - 796794566 - ((2 * (v251 >> 12)) & 0xA103C274)) ^ *(_DWORD *)(v245
                                                                                    + 4
                                                                                    * ((v230 ^ BYTE1(v307)) ^ 0x3Fu));
  LODWORD(v240) = v325 - 1209862494 - ((2 * v325) & 0x6FC5ED44);
  v326 = BYTE1(v319) ^ 0xD9;
  v327 = v326 - 1088681404 - ((2 * ((v319 >> 8) ^ 0xC78FD9)) & 0x88);
  v328 = *(_DWORD *)(v247 + 4 * (BYTE2(v230) ^ 0x48u));
  HIDWORD(v251) = v328 ^ 0x29D;
  LODWORD(v251) = v328 ^ 0xADCEA000;
  v329 = ((BYTE1(v321) ^ 0x77) - 1088681404 - ((2 * ((v321 >> 8) ^ 0x683877)) & 0x88)) ^ *(_DWORD *)(v245 + 4 * (v320 ^ 0xCCu)) ^ *(_DWORD *)&v243[4 * (BYTE1(v321) ^ 0x1A)] ^ ((v251 >> 12) - 796794566 - ((2 * (v251 >> 12)) & 0xA103C274));
  v330 = *(_DWORD *)(v247 + 4 * (BYTE2(v321) ^ 0x38u));
  HIDWORD(v251) = v330 ^ 0x29D;
  LODWORD(v251) = v330 ^ 0xADCEA000;
  v331 = HIDWORD(v498) ^ (((unsigned __int16)(v320 ^ 0xD782) >> 8)
                        - 1088681404
                        - (((v320 ^ 0xCFB8D782) >> 7) & 0x88)) ^ *(_DWORD *)(v245 + 4
                                                                                  * (v319 ^ 0x50u)) ^ *(_DWORD *)&v243[4 * (((unsigned __int16)(v320 ^ 0xD782) >> 8) ^ 0x6D)] ^ *(_DWORD *)&v253[4 * (BYTE3(v230) ^ 0xC2)] ^ (v251 >> 12);
  v332 = v498 ^ *(_DWORD *)&v253[4 * (HIBYTE(v319) ^ 0xC7)] ^ (v329 - 1209862494 - ((2 * v329) & 0x6FC5ED44));
  LODWORD(v230) = HIDWORD(v493) ^ *(_DWORD *)&v253[4 * ((v320 ^ 0xCFB8D782) >> 24)] ^ ((v324 ^ 0x29DADCEA)
                                                                                     - 1209862494
                                                                                     - 2
                                                                                     * ((v324 ^ 0x29DADCEA) & 0x37E2F6B6 ^ v324 & 0x14));
  v333 = v493 ^ v327 ^ *(_DWORD *)&v243[4 * (v326 ^ 0x6D)] ^ *(_DWORD *)&v253[4 * (HIBYTE(v321) ^ 0x68)] ^ v240;
  v334 = (((unsigned __int16)(v333 ^ 0xCCA2) >> 8) - 1088681404 - (((v333 ^ 0x33C8CCA2) >> 7) & 0x88)) ^ *(_DWORD *)&v243[4 * (((unsigned __int16)(v333 ^ 0xCCA2) >> 8) ^ 0x6D)];
  v335 = *(_DWORD *)(v247 + 4 * (BYTE2(v332) ^ 0xE6u));
  HIDWORD(v251) = v335 ^ 0x29D;
  LODWORD(v251) = v335 ^ 0xADCEA000;
  v336 = v251 >> 12;
  v337 = *(_DWORD *)(v247 + 4 * (BYTE2(v230) ^ 0x1Cu));
  HIDWORD(v251) = v337 ^ 0x29D;
  LODWORD(v251) = v337 ^ 0xADCEA000;
  v338 = (v251 >> 12) ^ *(_DWORD *)&v243[4 * (BYTE1(v332) ^ 0xD9)] ^ ((BYTE1(v332) ^ 0xB4)
                                                                    - 1088681404
                                                                    - ((2 * ((v332 >> 8) ^ 0x4FE6B4)) & 0x88));
  v339 = (v338 - 796794566 - ((2 * v338) & 0xA103C274)) ^ *(_DWORD *)(v245 + 4 * (v331 ^ 0x72u));
  v340 = (v334 - 796794566 - ((2 * v334) & 0xA103C274)) ^ *(_DWORD *)(v245 + 4 * (v230 ^ 0x3Au));
  v341 = *(_DWORD *)(v245 + 4 * (v333 ^ 0xA2u)) ^ (((unsigned __int16)(v331 ^ 0x372) >> 8)
                                                                    - 1088681404
                                                                    - ((v331 >> 7) & 0x88)) ^ *(_DWORD *)&v243[4 * (((unsigned __int16)(v331 ^ 0x372) >> 8) ^ 0x6D)] ^ (v336 - 796794566 - ((2 * v336) & 0xA103C274));
  v342 = *(_DWORD *)(v245 + 4 * (v332 ^ 0x96u));
  HIDWORD(v251) = v342 ^ 0x1081E13A;
  LODWORD(v251) = v342 ^ 0xC0000000;
  HIDWORD(v251) = (v251 >> 29) ^ 0x6615DA09;
  LODWORD(v251) = HIDWORD(v251);
  v343 = (v251 >> 3) - 1088681404 - ((2 * (v251 >> 3)) & 0x7E381488);
  LODWORD(v240) = *(_DWORD *)(v247 + 4 * ((v331 ^ 0x7E500372) >> 16));
  HIDWORD(v251) = v240 ^ 0x29D;
  LODWORD(v251) = v240 ^ 0xADCEA000;
  LODWORD(v240) = v251 >> 12;
  v344 = *(_DWORD *)(v247 + 4 * ((v333 ^ 0x33C8CCA2) >> 16));
  HIDWORD(v251) = v344 ^ 0x29D;
  LODWORD(v251) = v344 ^ 0xADCEA000;
  v345 = HIDWORD(v488) ^ *(_DWORD *)&v253[4 * (HIBYTE(v333) ^ 0x17)] ^ (v339 - 1209862494 - ((2 * v339) & 0x6FC5ED44));
  v346 = BYTE1(v230);
  v347 = v343 ^ *(_DWORD *)&v243[4 * (BYTE1(v230) ^ 0xD1)] ^ (v251 >> 12);
  v348 = *(_DWORD *)&v253[4 * (HIBYTE(v331) ^ 0x5A)] ^ v557 ^ (v347 - 1209862494 - ((2 * v347) & 0x6FC5ED44));
  v349 = v488 ^ *(_DWORD *)&v253[4 * (HIBYTE(v332) ^ 0x4F)] ^ v240 ^ (v340 - 1209862494 - ((2 * v340) & 0x6FC5ED44));
  LODWORD(v230) = HIDWORD(v482) ^ *(_DWORD *)&v253[4 * (BYTE3(v230) ^ 0x1B)] ^ (v341
                                                                              - 1209862494
                                                                              - ((2 * v341) & 0x6FC5ED44));
  v350 = *(_DWORD *)(v247 + 4 * (BYTE2(v230) ^ 0x7Eu));
  HIDWORD(v251) = v350 ^ 0x29D;
  LODWORD(v251) = v350 ^ 0xADCEA000;
  LODWORD(v240) = v251 >> 12;
  v351 = *(_DWORD *)(v247 + 4 * (BYTE2(v349) ^ 1u));
  HIDWORD(v251) = v351 ^ 0x29D;
  LODWORD(v251) = v351 ^ 0xADCEA000;
  v352 = ((v251 >> 12) - 796794566 - ((2 * (v251 >> 12)) & 0xA103C274)) ^ *(_DWORD *)(v245
                                                                                    + 4
                                                                                    * (v345 ^ 0xC6u));
  v353 = ((BYTE1(v345) ^ 0x71) - 1088681404 - ((2 * ((v345 >> 8) ^ 0xF25B71)) & 0x88)) ^ *(_DWORD *)&v243[4 * (BYTE1(v345) ^ 0x1C)];
  v354 = (v353 - 1209862494 - ((2 * v353) & 0x6FC5ED44)) ^ *(_DWORD *)&v253[4 * (HIBYTE(v349) ^ 0x1F)];
  v355 = *(_DWORD *)(v247 + 4 * (BYTE2(v345) ^ 0x5Bu));
  HIDWORD(v251) = v355 ^ 0x29D;
  LODWORD(v251) = v355 ^ 0xADCEA000;
  v356 = v251 >> 12;
  v357 = v346 ^ 0x73F4E0AF ^ v348;
  v358 = *(_DWORD *)(v247 + 4 * BYTE2(v357));
  HIDWORD(v251) = v358 ^ 0x29D;
  LODWORD(v251) = v358 ^ 0xADCEA000;
  v359 = v251 >> 12;
  HIDWORD(v251) = v240 ^ ((BYTE1(v349) ^ 0x81) - 1088681404 - ((v349 >> 7) & 0x88)) ^ 0xD678EAEF ^ *(_DWORD *)&v243[4 * (BYTE1(v349) ^ 0xEC)];
  LODWORD(v251) = HIDWORD(v251);
  LODWORD(v251) = (v251 >> 11) ^ __ROR4__(*(_DWORD *)&v253[4 * (HIBYTE(v345) ^ 0xF2)] ^ 0x15F8AD1C, 11) ^ 0xD490839A;
  HIDWORD(v251) = v251;
  v360 = v482 ^ *(_DWORD *)(v245 + 4 * (v349 ^ 0xB8u)) ^ ((BYTE1(v230) ^ 0xAA)
                                                                           - 1088681404
                                                                           - ((v230 >> 7) & 0x88)) ^ *(_DWORD *)&v253[4 * (HIBYTE(v348) ^ 0x57)] ^ *(_DWORD *)&v243[4 * (BYTE1(v230) ^ 0xC7)] ^ v356;
  v361 = HIDWORD(v477) ^ *(_DWORD *)&v253[4 * (BYTE3(v230) ^ 0x96)] ^ (BYTE1(v357) - 1088681404 - ((v357 >> 7) & 0x88)) ^ *(_DWORD *)&v243[4 * (BYTE1(v357) ^ 0x6D)] ^ (v352 - 1209862494 - ((2 * v352) & 0x6FC5ED44));
  v362 = v477 ^ *(_DWORD *)(v245 + 4 * (v230 ^ 0x88u)) ^ v359 ^ (v354
                                                                                  - 796794566
                                                                                  - ((2 * v354) & 0xA103C274));
  LODWORD(v230) = HIDWORD(v473) ^ *(_DWORD *)(v245 + 4 * v357) ^ ((v251 >> 21)
                                                                                   - 796794566
                                                                                   - ((2 * (v251 >> 21)) & 0xA103C274));
  LODWORD(v240) = *(_DWORD *)(v247 + 4 * (BYTE2(v360) ^ 0x88u));
  BYTE2(v354) = BYTE2(v362) ^ 0x4A;
  HIDWORD(v251) = v240 ^ 0x29D;
  LODWORD(v251) = v240 ^ 0xADCEA000;
  LODWORD(v240) = v251 >> 12;
  v363 = *(_DWORD *)&v243[4 * (BYTE1(v361) ^ 0x96)] ^ ((BYTE1(v361) ^ 0xFB)
                                                     - 1088681404
                                                     - ((2 * ((v361 >> 8) ^ 0x3EA2FB)) & 0x88));
  v364 = *(_DWORD *)(v247 + 4 * (BYTE2(v361) ^ 0xA2u));
  v365 = (v363 - 796794566 - ((2 * v363) & 0xA103C274)) ^ *(_DWORD *)(v245 + 4 * (v362 ^ 0x75u));
  HIDWORD(v251) = v364 ^ 0x29D;
  LODWORD(v251) = v364 ^ 0xADCEA000;
  v366 = (((unsigned __int16)(v362 ^ 0xF075) >> 8) - 1088681404 - (((v362 ^ 0xB54AF075) >> 7) & 0x88)) ^ (v251 >> 12) ^ *(_DWORD *)&v243[4 * (((unsigned __int16)(v362 ^ 0xF075) >> 8) ^ 0x6D)];
  v367 = (v366 - 1209862494 - ((2 * v366) & 0x6FC5ED44)) ^ *(_DWORD *)&v253[4 * (BYTE3(v230) ^ 0xED)];
  v368 = *(_DWORD *)&v253[4 * (HIBYTE(v362) ^ 0x91)];
  v369 = *(_DWORD *)&v253[4 * (HIBYTE(v361) ^ 0x3E)];
  LODWORD(v253) = *(_DWORD *)&v253[4 * (HIBYTE(v360) ^ 0xA0)];
  v370 = BYTE1(v230) ^ 0x1D;
  v371 = v370 - 1088681404 - 2 * (((v230 >> 8) ^ 0xC9AF1D) & 0x64 ^ (v230 >> 8) & 0x20);
  v372 = *(_DWORD *)(v245 + 4 * (v230 ^ 0x8Fu));
  v373 = *(_DWORD *)(v245 + 4 * (v361 ^ 0x9Au));
  LODWORD(v245) = *(_DWORD *)(v245 + 4 * (v360 ^ 0xF7u));
  LODWORD(v230) = *(_DWORD *)(v247 + 4 * (BYTE2(v230) ^ 0xAFu));
  LODWORD(v247) = *(_DWORD *)(v247 + 4 * BYTE2(v354));
  HIDWORD(v251) = v247 ^ 0x29D;
  LODWORD(v251) = v247 ^ 0xADCEA000;
  LODWORD(v247) = (v360 >> 8) ^ 0xA088D7;
  v374 = *(_DWORD *)&v243[4 * (v370 ^ 0x6D)];
  LODWORD(v243) = *(_DWORD *)&v243[4 * (v247 ^ 0x6D)];
  v375 = v247 - 1088681404 - ((2 * v247) & 0x88);
  LODWORD(v247) = v473 ^ v373 ^ v240 ^ v368 ^ v371 ^ v374;
  v376 = HIDWORD(v467) ^ v375 ^ v369 ^ v243 ^ v372 ^ (v251 >> 12);
  v377 = v467 ^ v245 ^ (v367 - 796794566 - ((2 * v367) & 0xA103C274));
  LODWORD(v243) = HIDWORD(v461) ^ v253 ^ (v230 >> 12) ^ ((_DWORD)v230 << 20) ^ (v365 - 1209862494 - ((2 * v365) & 0x6FC5ED44));
  v378 = *(_DWORD *)(v61 - 128);
  v379 = (char *)*(&off_1E5B5B480 + v378 - 920) - 12;
  v380 = (char *)*(&off_1E5B5B480 + v378 - 990) - 4;
  v381 = *(_DWORD *)&v379[4 * ((v467 ^ v245 ^ (v367 + 58 - ((2 * v367) & 0x74))) ^ 7)] ^ *(_DWORD *)&v380[4 * ~(v243 >> 8)] ^ 0x2D52A471;
  LODWORD(v253) = *(_DWORD *)&v380[4 * (BYTE1(v247) ^ 0x66)];
  v382 = *(_DWORD *)&v380[4 * ((unsigned __int16)(v377 ^ 0x6F07) >> 8)];
  LODWORD(v245) = *(_DWORD *)&v380[4 * (BYTE1(v376) ^ 0x9F)];
  v383 = (uint64_t)*(&off_1E5B5B480 + v378 - 900);
  LODWORD(v230) = *(_DWORD *)(v383 + 4 * (HIBYTE(v377) ^ 0xEF));
  v384 = *(_DWORD *)(v383 + 4 * ((v243 >> 24) ^ 0xB4));
  v385 = *(_DWORD *)(v383 + 4 * (BYTE3(v247) ^ 0x56));
  v386 = (char *)*(&off_1E5B5B480 + (v222 & 0x1E017246)) - 4;
  v387 = *(_DWORD *)&v386[4 * (BYTE2(v243) ^ 0x66)];
  v388 = *(_DWORD *)&v386[4 * (BYTE2(v377) ^ 0x2A)];
  v389 = *(unsigned int *)&v386[4 * (BYTE2(v376) ^ 0x48)];
  v390 = *(_DWORD *)(v383 + 4 * (HIBYTE(v376) ^ 0x81)) ^ (v381 - 1984589002 - ((2 * v381) & 0x136B266C));
  LODWORD(v383) = *(_DWORD *)&v379[4 * (v247 ^ 0x44)];
  v391 = *(_DWORD *)&v379[4 * (v376 ^ 0x86)];
  LODWORD(v247) = *(_DWORD *)&v386[4 * (BYTE2(v247) ^ 0xE8)] ^ (v390 - 1872812864 - ((2 * v390) & 0x20BE4980));
  v392 = *(_DWORD *)&v379[4 * (v243 ^ 0x31)];
  v393 = *(_DWORD *)(v61 - 148) ^ v554 ^ ((_DWORD)v247 - ((2 * (_DWORD)v247) & 0x3ED4A0D6) + 527061099);
  v394 = (char *)*(&off_1E5B5B480 + (v222 ^ 0x40Du)) - 4;
  *(_BYTE *)(*(_QWORD *)(v61 - 120) + 8) = v394[BYTE3(v393) ^ 0xD7] ^ 0xEA;
  v395 = ((v387 ^ 0x997A330D ^ v382) - 1984589002 - ((2 * (v387 ^ 0x997A330D ^ v382)) & 0x136B266C)) ^ v385;
  v396 = (v395 + 611824572 - ((2 * v395) & 0x48EF6778)) ^ v391;
  v397 = *(_DWORD *)(v61 - 144) ^ HIDWORD(v554) ^ (v396 - ((2 * v396) & 0x80BDD3D6) - 1067521557);
  v398 = (char *)*(&off_1E5B5B480 + (v222 ^ 0x4F9u)) - 12;
  *(_BYTE *)(*(_QWORD *)(v61 - 120) + *(_QWORD *)(v61 - 240)) = (v398[(*(_BYTE *)(v61 - 144) ^ BYTE4(v554) ^ (v396 - ((2 * v396) & 0xD6) - 21)) ^ 0xC7]
                                                               - 100) ^ 0x5F;
  v399 = (char *)*(&off_1E5B5B480 + v378 - 967) - 4;
  v400 = v399[BYTE1(v397) ^ 0x13];
  HIDWORD(v251) = v400 ^ 1;
  LODWORD(v251) = (v400 ^ 0x40) << 24;
  *(_BYTE *)(*(_QWORD *)(v61 - 120) + 6) = (v251 >> 30) ^ 0x40;
  LODWORD(v383) = v388 ^ v383;
  v401 = (v383 ^ 0xB428977C) & 0x9B59337;
  LODWORD(v383) = ((v383 ^ 0xB428977C) - 1984589002 - 2 * (v401 ^ v383 & 1)) ^ v384;
  LODWORD(v383) = (v383 - ((2 * v383) & 0x124A2F9A) + 153425869) ^ v245;
  v402 = *(_DWORD *)(v61 - 140) ^ HIDWORD(v555) ^ (v383 - ((2 * (_DWORD)v383) & 0x7E9AC076) + 1062035515);
  LODWORD(v383) = v399[BYTE1(v402)];
  HIDWORD(v251) = v383 ^ 1;
  LODWORD(v251) = (v383 ^ 0x40) << 24;
  *(_BYTE *)(*(_QWORD *)(v61 - 120) + *(_QWORD *)(v61 - 224)) = (v251 >> 30) ^ 0x7E;
  v403 = (uint64_t)*(&off_1E5B5B480 + (v222 & 0x14575138));
  *(_BYTE *)(*(_QWORD *)(v61 - 120) + 9) = *(_BYTE *)(v403 + (BYTE2(v393) ^ 0xFBLL)) ^ 0xCD;
  LODWORD(v253) = ((v253 ^ 0x809084FB ^ v230)
                 - 1872812864
                 - ((2 * (v253 ^ 0x809084FB ^ v230)) & 0x20BE4980)) ^ v389;
  LODWORD(v253) = v392 ^ ((_DWORD)v253 + 611824572 - ((2 * (_DWORD)v253) & 0x48EF6778));
  LODWORD(v253) = *(_DWORD *)(v61 - 136) ^ v555 ^ ((_DWORD)v253 - ((2 * (_DWORD)v253) & 0xA549492) + 86657609);
  *(_BYTE *)(*(_QWORD *)(v61 - 120) + *(_QWORD *)(v61 - 200)) = *(_BYTE *)(v403 + (BYTE2(v253) ^ 0xB8)) ^ 0x1E;
  *(_BYTE *)(*(_QWORD *)(v61 - 120) + *(_QWORD *)(v61 - 256)) = (v398[v393 ^ 0x1BLL] - 100) ^ 0x7D;
  *(_BYTE *)(*(_QWORD *)(v61 - 120) + *(_QWORD *)(v61 - 248)) = *(_BYTE *)(v403 + (BYTE2(v397) ^ 3)) ^ 0x60;
  v404 = *(_QWORD *)(v61 - 120);
  *(_BYTE *)(v404 + *(_QWORD *)(v61 - 192)) = v394[HIBYTE(v397) ^ 0x6DLL] ^ 0x12;
  LODWORD(v230) = v399[BYTE1(v393) ^ 0x92];
  HIDWORD(v251) = v230 ^ 1;
  LODWORD(v251) = (v230 ^ 0x40) << 24;
  *(_BYTE *)(v404 + *(_QWORD *)(v61 - 168)) = (v251 >> 30) ^ 0xD2;
  v405 = *(_QWORD *)(v61 - 208);
  *(_BYTE *)(v404 + v405) = v394[BYTE3(v402) ^ 0x53] ^ 0xFE;
  *(_BYTE *)(v404 + *(_QWORD *)(v61 - 184)) = (v398[v402 ^ 0x95] - 100) ^ 0xAF;
  *(_BYTE *)(v404 + *(_QWORD *)(v61 - 232)) = (v398[v253 ^ 0x64] - 100) ^ 0x27;
  *(_BYTE *)(v404 + *(_QWORD *)(v61 - 176)) = v394[(v253 >> 24) ^ 0x6ELL] ^ 0x68;
  LODWORD(v253) = v399[BYTE1(v253) ^ 0x1FLL];
  HIDWORD(v251) = v253 ^ 1;
  LODWORD(v251) = (v253 ^ 0x40) << 24;
  *(_BYTE *)(v404 + *(_QWORD *)(v61 - 216)) = (v251 >> 30) ^ 0x58;
  *(_BYTE *)(v404 + *(_QWORD *)(v61 - 160)) = *(_BYTE *)(v403 + (BYTE2(v402) ^ 0xC8)) ^ 0x4F;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a57 + 8 * ((1559 * ((((_DWORD)v405 - 424572247 - ((2 * (_DWORD)v405 + 32) & 0xCD631552) + 16) ^ 0xE6B18AA9) < v461)) ^ (v378 - 578))) - 12))(1223649144, v389, v402, v393, 9, v401, 2310378294, 611824572, v407, v408, v409, v410, v411, v412, v413, v415, v417, v419, v423,
           v427,
           v430,
           v432,
           a23,
           a24,
           a25,
           v438,
           v444,
           v449,
           v456,
           v461,
           v467,
           v473,
           v477,
           v482,
           v488,
           v493,
           v498,
           v502,
           v507,
           v514,
           v519,
           v524,
           v528,
           v533,
           v536,
           v541,
           v545,
           v547,
           v549,
           v551,
           v552,
           v553,
           v554,
           v555);
}

void sub_1AC1B8654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,int a59,int a60,int a61)
{
  uint64_t v61;

  *(_DWORD *)(v61 - 136) = a58 ^ 0xDE181165;
  *(_DWORD *)(v61 - 148) = a60 ^ 0xA43331C4;
  *(_DWORD *)(v61 - 140) = a61 ^ 0x4B5BA9C3;
  *(_DWORD *)(v61 - 144) = a59 ^ 0x390276F7;
  JUMPOUT(0x1AC1B6A00);
}

uint64_t sub_1AC1B86A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24,uint64_t a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,int a58)
{
  uint64_t v58;
  unsigned int v59;

  v59 = a24 - (a26 & 0x32A07BC8) + ((13 * (((a58 - 736) | 0x500) ^ 0x7DA)) ^ 0x8DDC86AC);
  return ((uint64_t (*)(void))(*(_QWORD *)(v58
                                        + 8
                                        * ((241
                                          * (((2 * v59) & 0xDD5DFFDE ^ 0x10007BC8) + (v59 ^ 0xF7FEC20B) - 680413696 == 1176548847)) ^ a58))
                            - 4))();
}

uint64_t sub_1AC1B8778(int a1, int a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((59 * (a2 + a1 + ((((v2 - 1881) | 0x208) + 511) ^ 0x91510426) < 8)) ^ v2))
                            - 4))();
}

uint64_t sub_1AC1B87F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7)
{
  uint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v7 + 8 * (((a6 + 902) * (a7 >> 4 == 116060159)) ^ a6))
                                                   - ((197 * (a6 ^ 0x232u)) ^ 0x7BALL)))(a1, a2);
}

uint64_t sub_1AC1B8838(int a1, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v22;
  int v25;

  v9 = (a2 + a1 + v6);
  v10 = *(_QWORD *)(v8 - 120);
  v11 = v9 + v10 + 1;
  v12 = (a2 + a1) & 0xF;
  v13 = v12 - v9;
  v14 = v4 + v13;
  v15 = (a3 ^ 0xFFFFFFFFFFFFFC78) + ((a3 - 1921) | 0x406) + v12;
  v16 = v4 + v15;
  v17 = v5 + v13;
  v18 = v5 + v15;
  v19 = v3 + v13;
  v20 = v3 + v15;
  v22 = v14 < v11 && v16 > v10;
  if (v17 < v11 && v18 > v10)
    v22 = 1;
  v25 = v19 < v11 && v20 > v10 || v22;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (int)((117 * (v25 ^ 1)) ^ a3)) - 4))();
}

uint64_t sub_1AC1B88D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6;
  uint64_t v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v7
                                                             + 8
                                                             * (((((v6 < 0x10) ^ (a6 - 35)) & 1)
                                                               * (a6 - 1294)) ^ a6)))(a1, a2, 0);
}

uint64_t sub_1AC1B8904(int a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16x4_t v20;
  int8x16x4_t v21;

  v20.val[1].i64[0] = ((_BYTE)v7 + 14) & 0xF;
  v20.val[1].i64[1] = ((_BYTE)v7 + 13) & 0xF;
  v20.val[2].i64[0] = ((_BYTE)v7 + 12) & 0xF;
  v20.val[2].i64[1] = ((_BYTE)v7 + 11) & 0xF;
  v20.val[3].i64[0] = ((_BYTE)v7 + 10) & 0xF;
  v20.val[3].i64[1] = ((_BYTE)v7 + 9) & 0xF;
  v21.val[0].i64[0] = ((_BYTE)v7 + 8) & 0xF;
  v21.val[0].i64[1] = ((_BYTE)v7 + 7) & 0xF;
  v12 = *(_QWORD *)(v11 - 120) - 15;
  v21.val[1].i64[0] = (v7 + 6) & 0xF;
  v21.val[1].i64[1] = (v7 + 5) & 0xF;
  v21.val[2].i64[0] = (v7 + 4) & 0xF;
  v21.val[2].i64[1] = ((_BYTE)v7 + 3) & 0xF;
  v21.val[3].i64[0] = ((_BYTE)v7 + 2) & 0xF;
  v21.val[3].i64[1] = ((_BYTE)v7 + 1) & 0xF;
  v13 = a2 + a1 + v9;
  v14.i64[0] = 0x505050505050505;
  v14.i64[1] = 0x505050505050505;
  v15.i64[0] = 0x7575757575757575;
  v15.i64[1] = 0x7575757575757575;
  v20.val[0].i64[0] = v13 & 0xF;
  v20.val[0].i64[1] = ((_BYTE)v7 - 1) & 0xF;
  v16.i64[0] = vqtbl4q_s8(v20, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v16.i64[1] = vqtbl4q_s8(v21, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v17 = vrev64q_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v12 + v13), *(int8x16_t *)(v5 + v20.val[0].i64[0] - 15)), veorq_s8(*(int8x16_t *)(v6 + v20.val[0].i64[0] - 15), *(int8x16_t *)(v4 + v20.val[0].i64[0] - 15))));
  v18 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v17, v17, 8uLL), v15), vmulq_s8(v16, v14)));
  *(int8x16_t *)(v12 + v13) = vextq_s8(v18, v18, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * ((((v8 & 0xFFFFFFF0) == 16) * (((a4 | 0xC) + 283) ^ 0x44B)) ^ (a4 | 0xC)))
                            - 8))();
}

void sub_1AC1B8A6C()
{
  JUMPOUT(0x1AC1B89E4);
}

uint64_t sub_1AC1B8A78(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5 + 8 * ((121 * (v3 == a3)) ^ v4)))();
}

uint64_t sub_1AC1B8A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6
                                                                                + 8
                                                                                * ((((((13 * (v5 ^ 0x57B)) ^ 0x43F) & v4) != 0)
                                                                                  * ((v5 ^ 0x770) - 198)) ^ v5 ^ 0x710))
                                                                    - 8))(a1, a2, a3, (v3 - a3));
}

uint64_t sub_1AC1B8ADC(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  char v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  char v70;
  uint64_t v71;
  int8x16x4_t v73;

  *(_DWORD *)(v65 - 128) = v64;
  v66 = a8 ^ 0x47;
  v67 = (a8 ^ 0xFFFFFDA0) & v61;
  v68 = *(_QWORD *)(v65 - 120) - 7;
  v69 = -a3;
  *(_DWORD *)(v65 - 140) = v67;
  *(_DWORD *)(v65 - 136) = v61;
  v70 = v62 + a2 + a1;
  v71 = (v69 + a2 + a1 + v63);
  v73.val[0].i64[0] = ((_BYTE)v69 + (_BYTE)a2 + (_BYTE)a1 + (_BYTE)v63) & 0xF;
  v73.val[0].i64[1] = ((_BYTE)v69 + v70 + 15) & 0xF;
  v73.val[1].i64[0] = ((_BYTE)v69 + v70 + 14) & 0xF;
  v73.val[1].i64[1] = ((_BYTE)v69 + v70 + 13) & 0xF;
  v73.val[2].i64[0] = ((_BYTE)v69 + v70 + 12) & 0xF;
  v73.val[2].i64[1] = ((_BYTE)v69 + v70 + 11) & 0xF;
  v73.val[3].i64[0] = ((_BYTE)v69 + v70 + 10) & 0xF;
  v73.val[3].i64[1] = ((_BYTE)v69 + v60 + (v66 ^ 6)) & 0xF;
  *(int8x8_t *)(v68 + v71) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(v68 + v71), *(int8x8_t *)(v58 + (v71 & 0xF) - 7)), veor_s8(*(int8x8_t *)(v59 + (v71 & 0xF) - 7), *(int8x8_t *)(v57 + (v71 & 0xF) - 7)))), (int8x8_t)0x7575757575757575), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v73, (int8x16_t)xmmword_1AC3B5870), (int8x8_t)0x505050505050505)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a57 + 8 * ((71 * (v69 != 8 - v67)) ^ v66)) - 4))((__n128)xmmword_1AC3B5870);
}

void sub_1AC1B8C24()
{
  JUMPOUT(0x1AC1B8B4CLL);
}

uint64_t sub_1AC1B8C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W8>)
{
  uint64_t v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5
                                                                                         + 8
                                                                                         * (int)(((((*(_DWORD *)(v6 - 136) == *(_DWORD *)(v6 - 140)) ^ (a5 + 41)) & 1)
                                                                                                * ((a5 + 641385643) & 0xD9C53D7F ^ 0x403)) ^ a5))
                                                                             - 8))(a1, a2, a3, a4, (a5 - 471) | 0x402u);
}

uint64_t sub_1AC1B8CA8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = (a4 - 1176548848);
  *(_BYTE *)(*(_QWORD *)(v10 - 120) + v11) ^= *(_BYTE *)(v7 + (v11 & 0xF)) ^ *(_BYTE *)(v8 + (v11 & 0xF)) ^ *(_BYTE *)(v6 + (v11 & 0xF)) ^ (5 * (v11 & 0xF)) ^ 0x75;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((4 * (a4 - 1 != v5)) | (32 * (a4 - 1 != v5))) ^ (a5 - 555))) - 8))();
}

void sub_1AC1B8D14()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 183177132)
    v1 = 2000528784;
  else
    v1 = -2000486840;
  *(_DWORD *)(v2 + 40) = v1;
}

void sub_1AC1B8D78(uint64_t a1)
{
  int v1;
  _BOOL4 v3;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x4E242FFD6E71642FLL) == 1115729964
    || *(_DWORD *)(*(_QWORD *)a1 - 0x4E242FFD6E71642FLL) == 1115729964;
  v1 = *(_DWORD *)(a1 + 8) ^ (535753261 * ((((2 * a1) | 0xDEFAB094) - a1 + 276998070) ^ 0xE5895665));
  __asm { BR              X14 }
}

void sub_1AC1B8E84()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void IPaI1oem5iL(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_1AC1B9568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, int a13)
{
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  a12 = (535753261 * ((&a12 & 0xFADC6C40 | ~(&a12 | 0xFADC6C40)) ^ 0xFD79D90)) ^ 0xE1F2694A;
  v16 = sub_1AC1F43A8(&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v14 + 8 * ((1775 * (a13 == ((v13 - 32) ^ 0x2BC))) ^ v15)) - 4))(v16);
}

uint64_t sub_1AC1B95EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, int a13, unsigned int a14)
{
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  a14 = v15 - 460628867 * ((2 * (&a12 & 0x65FAE758) - &a12 - 1710942046) ^ 0xD6939ADF) + 384;
  a12 = &STACK[0x5DFEEBD0571B6232];
  sub_1AC1C27D8((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16
                                                                                          + 8
                                                                                          * (((a13 != v14 + (v15 ^ 0x2DB) - 547)
                                                                                            * (2 * (v15 ^ 0x2DB) - 110)) ^ v15))
                                                                              - 4))(v17, v18, v19, v20, v21);
}

uint64_t sub_1AC1B968C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15)
{
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;

  v20 = 1178560073
      * (((&a12 | 0x95414EA5) - &a12 + (&a12 & 0x6ABEB158)) ^ 0x2FD536C7);
  a14 = a11;
  a13 = v20 + 1510368783 * v15 + 168 * (v19 ^ 0xCC) + 858566873;
  a15 = (v19 + 849) ^ v20;
  v21 = ((uint64_t (*)(int *))(*(_QWORD *)(v17 + 8 * (v19 ^ 0x86)) - 8))(&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18
                                                      + 8 * ((414 * (a12 != v16 + (v19 ^ 0xCC) + 730 - 1176)) ^ v19))
                                          - 12))(v21);
}

uint64_t sub_1AC1B9760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, unsigned int a13, int a14, uint64_t a15, int a16, int a17)
{
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;

  v20 = 628203409
      * (((&a12 | 0x55A11BEF) - &a12 + (&a12 & 0xAA5EE410)) ^ 0xD72917DC);
  a15 = a11;
  a12 = &STACK[0x4414279470ECFE8E];
  a17 = v20 ^ 0x6334E5D7;
  a13 = 150565725 - v20;
  a14 = v19 - v20 - 2024873419;
  v21 = sub_1AC1F4558((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18
                                                      + 8 * ((1642 * (a16 == (((v19 + 324) | 0x48) ^ v17))) ^ v19))
                                          - 12))(v21);
}

uint64_t sub_1AC1B982C()
{
  void (*v0)(unsigned int *);
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  unint64_t *v7;
  int v8;
  unint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t *v13;

  v10 = (v4 + 129) ^ (1374699841
                    * ((((2 * &v10) | 0x6A3AD96A) - &v10 - 891120821) ^ 0x58E974BC));
  v12 = &STACK[0x33553D115EA78C8A];
  v13 = v7;
  ((void (*)(unsigned int *))(*(_QWORD *)(v3 + 8 * (v4 ^ 0x133u)) - 12))(&v10);
  v12 = v7;
  v10 = (v4 - 149) ^ (1755732067
                    * (((&v10 ^ 0x96199D4)
                      + 874547561
                      - 2 * ((&v10 ^ 0x96199D4) & 0x34208969)) ^ 0xE387AD66));
  sub_1AC1BE024((uint64_t)&v10);
  if ((_DWORD)v13 == (v4 ^ 0x38C ^ v1))
    v5 = v8;
  else
    v5 = (int)v13;
  v11 = v4
      + ((2 * ((&v10 ^ 0xDD206B1B) & 0x570861) - (&v10 ^ 0xDD206B1B) - 5703778) ^ 0x287C92AA)
      * v2
      + 70;
  v12 = v7;
  v0(&v10);
  v12 = v9;
  v11 = (v4 ^ 0x38C)
      + ((2 * (&v10 & 0x3E516768) - &v10 - 1045522284) ^ 0xCB5A96BB) * v2
      - 326;
  v0(&v10);
  return v5 ^ (v1 - 444);
}

void sub_1AC1B9A00(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_1AC1B9A40()
{
  return 4294925273;
}

void sub_1AC1B9A9C(uint64_t a1)
{
  int v1;

  v1 = 535753261 * (a1 ^ 0xAF40E2F);
  __asm { BR              X9 }
}

uint64_t sub_1AC1B9B14@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a2 + 8 * (((((a1 - 172) | 0x200) - 624) * (v2 == 162189279)) | a1)) - 12))();
}

uint64_t sub_1AC1B9B64@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(void))(*(_QWORD *)(a2 + 136 * (a1 ^ 0x2CD)) - 8))();
}

uint64_t sub_1AC1B9C64@<X0>(unsigned int a1@<W4>, int a2@<W5>, uint64_t a3@<X8>)
{
  int v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(a3 + 8 * (v4 | ((v3 == 0) * a2))) - ((v4 - 324) ^ a1) + 1301))();
}

uint64_t sub_1AC1B9C90@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a2 + 8 * ((1354 * (((v2 == 0) ^ a1 ^ 0xF9) & 1)) ^ a1))
                            - 12))();
}

uint64_t sub_1AC1B9CC0@<X0>(int a1@<W6>, int a2@<W7>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v6 = ((a2 + 1673) ^ v4) + v5;
  v7 = v5 + 1;
  *(_DWORD *)(*(_QWORD *)(v3 - 0x4E242FFD6E71642BLL) + 4 * v6) = a1;
  *(_DWORD *)(v3 - 0x4E242FFD6E71642FLL) = v7;
  v8 = v4 + v7;
  v9 = v8 + 1987;
  if (v8 + 1987 < 0)
    v9 = -1987 - v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3
                                        + 8
                                        * ((26
                                          * ((int)((v9 ^ 0x4ECABEAF)
                                                 + ((v9 << ((a2 - 118) & 0xFD ^ 0xC5)) & 0x9D957D5E)
                                                 - 1321909936) >= 0)) ^ (a2 - 1855631990) & 0x6E9AB5FDu))
                            - ((a2 - 1855631990) & 0x6E9AB5FD ^ 0xE1u)
                            + 1057))();
}

uint64_t sub_1AC1B9DB8@<X0>(uint64_t a1@<X8>)
{
  int v1;
  unsigned int v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((769 * (*(_DWORD *)(*v3 + 4 * v4) == v1)) | v2)) - v5 + 1057))();
}

uint64_t sub_1AC1B9DE4@<X0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((26 * (v2 - 1 >= 0)) ^ v1)) - (v1 ^ 0xE1) + 1057))();
}

uint64_t sub_1AC1B9E1C(uint64_t result)
{
  int v1;
  int v2;
  int v3;
  int *v4;
  int v5;

  if ((v2 + 1986) >= 0x7FFFFFFF)
    v5 = -v1;
  else
    v5 = v3;
  *v4 = v5;
  *(_DWORD *)(result + 28) = -1711483262;
  return result;
}

uint64_t sub_1AC1B9E54(_DWORD *a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;

  v1 = 1225351577 * (((a1 | 0xD6503E34) - (a1 & 0xD6503E34)) ^ 0xF5CAE622);
  v2 = a1[1] ^ v1;
  v3 = *((_DWORD *)*(&off_1E5B5B480 + (v2 ^ 0x274)) + 85);
  v4 = *a1 - v1 - 1131250002;
  v5 = v3 + 35401467 > v4;
  if (v4 < 0x21C2EFB != v3 > 0xFDE3D104)
    v5 = v3 > 0xFDE3D104;
  return (*((uint64_t (**)(void))*(&off_1E5B5B480 + (v2 ^ 0x262)) + ((!v5 * ((2 * (v2 ^ 0x2D7)) ^ 0x70D)) ^ v2)))();
}

uint64_t sub_1AC1B9F38()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v4 = (v1 ^ 0xECA724A8) + v2;
  v5 = v4 < 0x3230D5AB;
  v6 = v3 + 842061227 < v4;
  if (v3 > (v1 ^ 0xCDCF2BA2) != v5)
    v6 = v5;
  return (*(uint64_t (**)(void))(v0 + 8 * ((986 * v6) ^ v1)))();
}

uint64_t sub_1AC1B9FA0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;

  v5 = *(_DWORD *)(v3 + 344);
  v6 = (*(_DWORD *)(a1 + 12) ^ v1) - 1976340462;
  if (v5 > 0x26F4AF46 != v6 < 0xD90B50B9)
    v7 = v5 > 0x26F4AF46;
  else
    v7 = v5 + (v4 ^ 0xD90B514F) > v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((56 * v7) ^ v4 ^ 0x4E5)) - (((v4 ^ 0x4E5u) - 743) ^ 0x220)))();
}

uint64_t sub_1AC1BA034()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v4 = ((v1 - 1539833929) & 0x5BC7FFBB ^ 0x61146677) + v2;
  v5 = v4 < 0xAFEC4403;
  v6 = ((2 * (v1 ^ 0x4AE)) ^ 0xAFEC462F) + v3 < v4;
  if (v3 > 0x5013BBFC != v5)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((120 * v6) ^ v1)) - 8))();
}

uint64_t sub_1AC1BA0C8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;

  v5 = *(_DWORD *)(v3 + 352);
  v6 = *(_DWORD *)(a1 + 16) - v1 + 1578218228;
  if (v5 > 0x4AD2DCEC != v6 < 0xB52D2313)
    v7 = v5 > 0x4AD2DCEC;
  else
    v7 = v5 - 1255333101 > v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((158 * !v7) ^ v4))
                            - (((v4 ^ 0x5A0) + 1333 - 928) ^ (4 * (v4 ^ 0x5A0)))))();
}

uint64_t sub_1AC1BA150@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  int v10;

  v5 = v3 - 1319350602;
  v6 = v2 + 1514200727;
  v7 = v3 > ((v4 + 1696147838) & 0x9AE6D2ED) + 1319350045;
  v8 = v6 < 0xB15C4EB6;
  v9 = v5 < v6;
  if (v8 != v7)
    v9 = v8;
  if (v9)
    v10 = a2;
  else
    v10 = a2 + 1;
  *(_DWORD *)(result + 8) = v10;
  return result;
}

void sub_1AC1BA1C0(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = 1759421093 * ((-2 - ((~(_DWORD)a1 | 0x72EDF858) + (a1 | 0x8D1207A7))) ^ 0xC190480C);
  v2 = *(_DWORD *)(a1 + 8) - v1;
  v3 = (*(_BYTE *)(a1 + 28) - v1);
  ((void (*)(char *, void (*)()))*(&off_1E5B5B480 + (v2 ^ 0x2EF)))((char *)*(&off_1E5B5B480 + (v2 ^ 0x270)) - 12, sub_1AC1F4D38);
  v5 = *(_QWORD *)*(&off_1E5B5B480 + v2 - 304);
  v4 = (1374699841 * ((-1643461889 - (&v4 | 0x9E0AC2FF) + (&v4 | 0x61F53D00)) ^ 0xC012509)) ^ (v2 - 187);
  sub_1AC1BDBC0((uint64_t)&v4);
  __asm { BR              X8 }
}

uint64_t sub_1AC1BA318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v20 = 1224239923
      * (((&a16 ^ 0x280F4004) & 0x293F5204 | (&a16 ^ 0x86C00D20) & 0xD6C0ADF9) ^ 0x5C7CB0F3);
  a17 = v20 + v17 + 96;
  a16 = v20 + 41;
  sub_1AC1BA844(&a16);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 + 8 * ((13 * (((**(_DWORD **)(v19 + 8 * (13 * (v17 ^ 0x22A) - 463)) == ((13 * (v17 ^ 0x22A) + 503) ^ 0x3D8)) ^ (31 * ((13 * (v17 ^ 0x2A)) ^ 0xF0))) & 1)) ^ (13 * (v17 ^ 0x22A)))) - 8))(v21, v22, v23, v24, v25, v26, v27, v28);
}

uint64_t sub_1AC1BA3F8@<X0>(int a1@<W8>)
{
  uint64_t *v1;
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t (*v13)(uint64_t, _BYTE *, _DWORD *);
  int v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  _BYTE v23[30];
  _BYTE v24[140];

  v8 = *(unsigned int **)(v6 + 8 * (a1 - 337));
  v9 = *(_QWORD *)(v6 + 8 * (a1 ^ 0x22B));
  v10 = *v8;
  v11 = *(_BYTE **)(v9 - 4);
  v23[0] = *v11 - 102;
  v23[1] = v11[1] - 102;
  v23[2] = v11[2] - 102;
  v23[3] = v11[3] - 102;
  v23[4] = v11[4] - 102;
  v23[5] = v11[5] - 102;
  v23[6] = v11[6] - 102;
  v23[7] = v11[7] - 102;
  v23[8] = v11[8] - 102;
  v23[9] = v11[9] - 102;
  v23[10] = v11[10] - 102;
  v23[11] = v11[11] - 102;
  v23[12] = v11[12] - 102;
  v23[13] = v11[13] - 102;
  v23[14] = v11[14] - 102;
  v23[15] = v11[15] - 102;
  v23[16] = v11[16] - 102;
  v23[17] = v11[17] - 102;
  v23[18] = v11[18] - 102;
  v23[19] = v11[19] - 102;
  v23[20] = v11[20] - 102;
  v23[21] = v11[21] - 102;
  v12 = *(_BYTE **)(v9 - 4);
  v23[22] = v12[22] - 102;
  v23[23] = v12[23] - 102;
  v23[24] = v12[24] - 102;
  v23[25] = v12[25] - 102;
  v23[26] = v12[26] - 102;
  v23[27] = v12[27] - 102;
  v23[28] = v12[28] - 102;
  v23[29] = v12[29] - 102;
  v13 = *(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(v6 + 8 * (a1 - 294));
  v14 = v13(v10, v23, v2);
  v15 = ((2 * v14) & 0xF1DFBE7E) + (v14 ^ 0x78EFDF3F);
  if (v15 != 2028986175)
  {
    if (v15 == 2028987277)
    {
      v16 = *v8;
      v17 = *(_BYTE **)(*(_QWORD *)(v6 + 8 * (v4 - 318)) - 4);
      v24[0] = *v17 - 14;
      v24[1] = v17[1] - 14;
      v24[2] = v17[2] - 14;
      v24[3] = v17[3] - 14;
      v24[4] = v17[4] - 14;
      v24[5] = v17[5] - 14;
      v24[6] = v17[6] - 14;
      v24[7] = v17[7] - 14;
      v24[8] = v17[8] - 14;
      v24[9] = v17[9] - 14;
      v24[10] = v17[10] - 14;
      v24[11] = v17[11] - 14;
      v24[12] = v17[12] - 14;
      v24[13] = v17[13] - 14;
      v24[14] = v17[14] - 14;
      v24[15] = v17[15] - 14;
      v24[16] = v17[16] - 14;
      v24[17] = v17[17] - 14;
      v24[18] = v17[18] - 14;
      v24[19] = v17[19] - 14;
      v18 = v13(v16, v24, v2);
      v19 = (2 * v18) & 0xF35DFEEA;
      v15 = (v18 ^ 0xF9AEFF75) + 1593826752;
    }
    else
    {
      v19 = -541131274;
    }
    __asm { BR              X8 }
  }
  v20 = (v4 + 257) | 0xC8;
  *(_DWORD *)(v7 + 352) |= v20 - 974;
  *(_DWORD *)(v7 + 52) = 2095618606;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _DWORD *))(v6 + 8 * (v4 - 420)))(*v2, v7 + 340, v7 + 344, v7 + 348, v3);
  v22 = *v1;
  *(_DWORD *)(v1[2] - 0x43003A8C38BB7407) = *v2;
  *(_DWORD *)(v22 - 0x6B445CC5BC59DDA8) = *v3
                                          - (v20 ^ 0x3C9)
                                          + 32 * (v20 ^ 0x3C9)
                                          - ((2 * *v3) & 0xBAE5CB48)
                                          - 579673195;
  *((_DWORD *)v1 + 6) = 2000528784;
  return result;
}

void sub_1AC1BA844(_BYTE *a1)
{
  unsigned int v1;
  _BOOL4 v2;

  v1 = 1224239923 * ((((2 * (_DWORD)a1) | 0x5312CE6) - (_DWORD)a1 - 43554419) ^ 0xF02B6BA4);
  v2 = (*a1 - v1) == 40;
  __asm { BR              X11 }
}

uint64_t sub_1AC1BA8F0@<X0>(int a1@<W8>)
{
  _DWORD *v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((976 * (*v1 != 0)) ^ a1)) - ((a1 - 625) ^ 0x277)))();
}

uint64_t sub_1AC1BA930@<X0>(int a1@<W8>)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  unsigned int *v4;
  int v5;
  uint64_t v6;

  v5 = (a1 - 399773037) & 0x17D40AFB;
  v6 = v3(*v4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8 * ((2020 * (((*v1 == 0) ^ v5) & 1)) ^ v5))
                                          - 12))(v6);
}

uint64_t sub_1AC1BA97C()
{
  uint64_t v0;
  _DWORD *v1;
  uint64_t (*v2)(_QWORD);
  unsigned int *v3;
  uint64_t result;

  result = v2(*v3);
  *v1 = 0;
  *(_DWORD *)v0 = 0;
  *(_QWORD *)(v0 + 344) = 0;
  *(_QWORD *)(v0 + 352) = 0;
  *(_DWORD *)(v0 + 360) = 1096421779;
  *(_DWORD *)(v0 + 56) = 2095618606;
  return result;
}

uint64_t sub_1AC1BA9BC()
{
  int v0;
  _DWORD *v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((2020 * (((*v1 == 0) ^ v0) & 1)) ^ v0)) - 12))();
}

void sub_1AC1BA9E8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (1178560073 * ((2 * (a1 & 0x878F6F35) - a1 + 2020643018) ^ 0xC2E4E8A8));
  __asm { BR              X10 }
}

uint64_t sub_1AC1BAABC@<X0>(uint64_t a1@<X8>, uint64_t a2, unsigned int a3, int a4, unint64_t *a5, uint64_t a6, unsigned int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v10 = 3804331 * (&a3 ^ 0x7ED525F6);
  a7 = v10 + 1271592301;
  a3 = v10 + 152734935;
  a4 = v10 + v7 - 560;
  a5 = &STACK[0x74F0547AE6FE7488];
  a6 = v8;
  v11 = ((uint64_t (*)(unsigned int *))(*(_QWORD *)(a1 + 8 * (v7 ^ 0x49B)) - 8))(&a3);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * ((42 * (*(_DWORD *)(v8 - 0x55F9EC3874D1DF27) == 2000528784)) ^ v7))
                                          - 12))(v11);
}

void sub_1AC1BAB74(_DWORD *a1@<X8>)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  _BYTE *v4;

  v3 = -1442461457 * (v1[1] - v2) - ((1410044382 * (v1[1] - v2) + 848381810) & 0xB3476788) - 219392131;
  *v4 = (HIBYTE(v3) ^ 0x59) - ((2 * (HIBYTE(v3) ^ 0x59)) & 0xEA) + 117;
  v4[1] = (BYTE2(v3) ^ 0xA3) - ((2 * (BYTE2(v3) ^ 0xA3)) & 0xEA) + 117;
  v4[2] = (BYTE1(v3) ^ 0xB3) - ((2 * (BYTE1(v3) ^ 0xB3)) & 0xEA) + 117;
  v4[3] = v3 ^ 0xB1;
  *v1 = *a1;
}

void sub_1AC1BAC50()
{
  uint64_t v0;
  int v1;

  v0 = MEMORY[0x1E0C80A78]();
  v1 = *(_DWORD *)(v0 + 40) - 108757529 * ((2 * (v0 & 0x68386F78) - v0 - 1748529017) ^ 0x775BF2AC);
  __asm { BR              X14 }
}

uint64_t sub_1AC1BADB8()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(v4 + v1) = v0;
  *(_QWORD *)(v6 - 144) = v5;
  *(_QWORD *)(v6 - 136) = v4;
  *(_DWORD *)(v6 - 128) = (v2 + 1614) ^ (((((v6 - 144) | 0xB6904353) - (v6 - 144) + ((v6 - 144) & 0x496FBCA8)) ^ 0xBC644D7C)
                                       * v3);
  return sub_1AC1AFE5C(v6 - 144);
}

void sub_1AC1BC050(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE v6[8];

  v2 = (unint64_t)&v6[qword_1EEC7B1D8 ^ qword_1EEC7B1E0];
  v3 = (536075833 * v2) ^ 0x86C548EE6B3237FCLL;
  v4 = 536075833 * (v2 ^ 0x86C548EE6B3237FCLL);
  qword_1EEC7B1E0 = v3;
  v5 = byte_1AC3D0DB0[(57 * (v3 ^ 0xFC ^ v4))];
  qword_1EEC7B1D8 = v4;
  ((void (*)(char *, void (*)()))*(&off_1E5B5B480
                                            + ((57 * (v3 ^ 0xFC ^ v4)) ^ byte_1AC3D50B0[v5])
                                            + 116))((char *)*(&off_1E5B5B480+ ((57 * ((v4 + v3) ^ 0xFC)) ^ byte_1AC3CDE40[byte_1AC3C8970[(57 * ((v4 + v3) ^ 0xFC))] ^ 0x27])- 27)- 8, sub_1AC1F4A94);
  __asm { BR              X10 }
}

uint64_t sub_1AC1BC168()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v0 + 8 * ((59 * (**(_QWORD **)(v1 + 1840) == 0)) ^ 0x49Du)))();
}

uint64_t sub_1AC1BC1A0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0x46Fu)))(v1);
}

uint64_t sub_1AC1BC1C0(uint64_t a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;

  v1 = 628203409 * (((a1 | 0xC21FEC2B) - (a1 & 0xC21FEC2B)) ^ 0x4097E018);
  v2 = *(_DWORD *)(a1 + 8) - v1;
  v3 = v1 + *(_DWORD *)(a1 + 12) - 2062944453;
  v4 = (*(_DWORD *)(*(_QWORD *)a1 - 0x1786E53DF64A86D0) ^ 0x15B86EAC) + v3;
  v5 = v4 - ((2 * v4) & 0x2B70DD58) + 364408492;
  *(_DWORD *)(*(_QWORD *)a1 - 0x1786E53DF64A86D0) = v5;
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B5B480 + (v2 ^ 0x2AF)) + ((26 * ((v5 ^ 0x15B86EACu) >= v3)) | v2))
                            - ((v2 - 1598165986) & 0x5F4213FB ^ 0x2F7)))();
}

void sub_1AC1BC2A4(uint64_t a1@<X8>)
{
  int v1;

  *(_DWORD *)(a1 - 0x1786E53DF64A86D4) = (*(_DWORD *)(a1 - 0x1786E53DF64A86D4) ^ 0x13F54069)
                                         + 334839913
                                         - ((((v1 - 26) ^ 0x2E3)
                                           + 2 * (*(_DWORD *)(a1 - 0x1786E53DF64A86D4) ^ 0x13F54069)) & 0x27EA80D2)
                                         + 1;
}

void sub_1AC1BC2F4(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) - 1225351577 * (a1 ^ 0x239AD816);
  __asm { BR              X15 }
}

void sub_1AC1BC3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)(a2 + v2) = 1115729964;
}

void sub_1AC1BD230(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (1374699841 * ((((2 * (_DWORD)a1) | 0x97E9331C) - (_DWORD)a1 + 873162354) ^ 0xA6008187));
  __asm { BR              X10 }
}

uint64_t sub_1AC1BD2F8@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v12 = 1755732067 * ((&a4 + 1514539051 - 2 * ((unint64_t)&a4 & 0x5A46082B)) ^ 0x8480B5F0);
  a8 = v12 ^ 0x3EFC9ED0;
  a7 = &STACK[0x224C51092B41EA7E];
  a4 = &STACK[0x305A3E6975AF78B];
  a5 = v11;
  a6 = (v10 - 151) ^ v12;
  v13 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * (v10 ^ 0x1B9)) - 4))(&a4);
  return (*(uint64_t (**)(uint64_t))(v9
                                            + 8
                                            * (((*(_DWORD *)(v11 - 0x55F9EC3874D1DF27) == v8) * ((v10 ^ 0x3F5) + 1255)) ^ v10)))(v13);
}

uint64_t sub_1AC1BD3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  int v10;
  uint64_t v11;
  int v12;

  return (*(uint64_t (**)(void))(v11 + 8 * (((a10 == v10 + v12 - 83 - 461) * ((v12 - 83) ^ 0x197)) ^ v12)))();
}

void sub_1AC1BD408(_DWORD *a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  unsigned __int8 *v5;

  v3 = v5[3] ^ 0x75;
  v4 = ((*v5 ^ 0x75) << 24) | ((v5[1] ^ 0x75) << 16) | ((v5[2] ^ 0x75) << 8) | v3;
  *(_DWORD *)(*(_QWORD *)(v1 + 8) - 0x33553D115EA78D1ELL) = v4 + v2 - 2 * (v4 & (v2 + 32) ^ v3 & 0x20);
  *(_DWORD *)(v1 + 4) = *a1;
}

void zLTj()
{
  _DWORD v0[8];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[0] = (535753261
         * ((1565227511 - (v0 ^ 0xF442B3F9 | 0x5D4B79F7) + (v0 ^ 0xF442B3F9 | 0xA2B48608)) ^ 0x5C023BDE)) ^ 0xE1F2694A;
  sub_1AC1F43A8(v0);
  __asm { BR              X8 }
}

uint64_t sub_1AC1BD5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, int a17, unsigned int a18)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  a16 = &STACK[0x5DFEEBD0571B624A];
  a18 = 1084 - 460628867 * (&a16 ^ 0x4C96827D);
  sub_1AC1C27D8((uint64_t)&a16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 8 * ((6 * (a17 == 2000528784)) ^ v18)))(v20, v21, v22, v23, v24, v25, v26, v27, a9);
}

uint64_t sub_1AC1BD638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, unsigned int a20,uint64_t a21)
{
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;

  v28 = 1178560073 * ((743035438 - (&a17 | 0x2C49D22E) + (&a17 | 0xD3B62DD1)) ^ 0x692255B3);
  a20 = v28 ^ 0x41F;
  a19 = a15;
  a18 = v28 + 1510368783 * v26 + 858567209;
  sub_1AC1BA9E8((uint64_t)&a17);
  v29 = 1178560073 * ((&a17 & 0x68507647 | ~(&a17 | 0x68507647)) ^ 0x2D3BF1DA);
  a20 = v29 ^ 0x41F;
  a19 = a15;
  a18 = v29 + 1510368783 * v25 + 858567209;
  sub_1AC1BA9E8((uint64_t)&a17);
  v30 = 1178560073 * ((&a17 + 949611407 - 2 * (&a17 & 0x3899EB8F)) ^ 0x820D93ED);
  a21 = v23;
  a18 = v30 + 327;
  a19 = a15;
  a20 = ((v24 ^ 0x5EC7F6D7) - 1178899094 + ((2 * v24) & 0xBD8FEDAE)) ^ v30;
  sub_1AC1D0F44(&a17);
  v31 = 1178560073 * ((&a17 & 0xFC120CA | ~(&a17 | 0xFC120CA)) ^ 0x4AAAA757);
  a19 = a15;
  a18 = v31 + 327;
  a21 = a11;
  a20 = v31 ^ ((v22 ^ 0xBCFB77D7) + 1535634538 + ((2 * v22) & 0x79F6EFAE));
  sub_1AC1D0F44(&a17);
  v32 = 1178560073 * ((&a17 + 1839421071 - 2 * (&a17 & 0x6DA3568F)) ^ 0xD7372EED);
  a18 = v32 + 327;
  a19 = a15;
  a21 = v21;
  a20 = v32 ^ ((a13 ^ 0x5AEBEF7D) - 1114147644 + ((2 * a13) & 0xB5D7DEFA));
  v33 = sub_1AC1D0F44(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v27 + 8 * ((232 * (a17 == 2000528784)) ^ 0x26Du)) - 4))(v33);
}

uint64_t sub_1AC1BD92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t *a16, unsigned int a17, int a18, uint64_t a19, int a20,int a21)
{
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;

  v24 = 628203409 * ((((2 * &a16) | 0x706BC376) - &a16 + 1204428357) ^ 0x3ABDED88);
  a16 = &STACK[0x4414279470ECFEAE];
  a19 = a14;
  a21 = v24 ^ 0x3ACFC141;
  a17 = 150565725 - v24;
  a18 = v21 - v24 - 2024873704;
  v25 = sub_1AC1F4558((uint64_t)&a16);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23
                                                      + 8
                                                      * ((1955 * (a20 == ((59 * (v21 ^ 0x264)) ^ (v22 + 499)))) ^ v21))
                                          - 4))(v25);
}

uint64_t sub_1AC1BD9FC()
{
  void (*v0)(unsigned int *);
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t *v14;

  v11 = (v4 - 156) ^ (1374699841
                    * ((((2 * &v11) | 0x109CD300) - &v11 + 2008127104) ^ 0xE5BA7189));
  v13 = &STACK[0x33553D115EA78C92];
  v14 = v8;
  ((void (*)(unsigned int *))(*(_QWORD *)(v1 + 8 * (v4 - 522)) - 12))(&v11);
  v11 = (v4 - 434) ^ (1755732067 * ((&v11 & 0x83B82CC5 | ~(&v11 | 0x83B82CC5)) ^ 0xA2816EE1));
  v13 = v8;
  sub_1AC1BE024((uint64_t)&v11);
  if ((_DWORD)v14 == v5 + v3 - 531)
    v6 = v10;
  else
    v6 = (int)v14;
  v12 = v4 + (((&v11 | 0x7A3BC9FC) - (&v11 & 0x7A3BC9FC)) ^ 0x70CFC7D3) * v2 - 215;
  v13 = v8;
  v0(&v11);
  v13 = v9;
  v12 = v3
      + ((174149367 - (&v11 | 0xA614EF7) + (&v11 | 0xF59EB108)) ^ 0xFF6ABF27) * v2
      - 125;
  v0(&v11);
  return v6 ^ 0x773DA590u;
}

void sub_1AC1BDBC0(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)a1 ^ (1374699841 * (a1 ^ 0x6DF41809));
  v2 = *(_QWORD *)(a1 + 8);
  ((void (*)(char *, void (*)()))*(&off_1E5B5B480 + v1 - 116))((char *)*(&off_1E5B5B480 + v1 - 317) - 8, sub_1AC1F4A94);
  __asm { BR              X10 }
}

uint64_t sub_1AC1BDC4C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (((**(_QWORD **)(v1 + 8 * (v2 ^ 0x1B2)) == 0) * (((v2 - 307) | 0x402) + 340)) ^ v2)))();
}

uint64_t sub_1AC1BDC94@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 ^ 0x4AE)))(v1);
}

void sub_1AC1BDCB4(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  unint64_t *v7;
  int v8;
  unint64_t *v9;
  int v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = 1759421093 * ((((2 * a1) | 0x1851ADD4) - a1 - 204003050) ^ 0xBF5566BE);
  v2 = *(_DWORD *)(a1 + 12) - v1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = 1890792391 * (*(_DWORD *)(a1 + 36) - v1) + 141543788;
  v5 = 535753261
     * ((-1402127699 - (&v7 ^ 0xE703BA3B | 0xAC6D3AAD) + (&v7 ^ 0xE703BA3B | 0x5392C552)) ^ 0xBE657146);
  v6 = v5 ^ (2050800995 * ((*(_DWORD *)(a1 + 32) + v1) ^ 0x32A83B3D) + 1310458963);
  v7 = &STACK[0x5E8381E6C8546BF8];
  v13 = v3;
  v9 = &STACK[0x2B713C514868F975];
  v10 = v6;
  v12 = (v4 ^ 0xEDEDFE6F) + ((2 * v4) & 0xDBDBFCDE) - v5 + 2145042400;
  v8 = v2 - v5 + 228;
  ((void (*)(unint64_t **))((char *)*(&off_1E5B5B480 + (v2 ^ 0x38)) - 4))(&v7);
  __asm { BR              X9 }
}

uint64_t sub_1AC1BDEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16, unsigned int a17, uint64_t a18, uint64_t a19)
{
  uint64_t *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;

  v26 = v19[2];
  v27 = (&a12 ^ 0xAF40E2F) * v21;
  a13 = *v19;
  a14 = v26;
  a12 = v24 - v27 + 368399643;
  a16 = ((v22 ^ 0x785F773F) - 537350207 + ((((v24 - 401) | 8) ^ 0xF0BEEEF3) & v23)) ^ v27;
  a17 = (a10 ^ 0xF973D73F) - v27 + 249331704 + ((((v24 - 401) ^ 8) - 219697679) & (2 * a10));
  a18 = a11;
  a19 = a11;
  v28 = sub_1AC1F46B8((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v25 + 8 * ((85 * (a15 == v20)) ^ v24)) - 4))(v28);
}

void sub_1AC1BDF80()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(*(_QWORD *)(v0 + 40) - 0x7C9DCAE9AE5EB61ELL) = v2;
  *(_DWORD *)(v3 - 0x2122F23C1B635875) = v4;
  *(_DWORD *)(v0 + 8) = v1;
}

uint64_t sub_1AC1BE024(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)a1 ^ (1755732067 * ((a1 & 0xECFD530 | ~(a1 | 0xECFD530)) ^ 0x2FF69714));
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B5B480 + (v1 ^ 0xF5))
                              + ((968 * (*(_QWORD *)(a1 + 8) != 0x55F9EC3874D1DF3FLL)) ^ v1))
                            - 8))();
}

uint64_t sub_1AC1BE0B4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8 * ((1010 * (*(_DWORD *)(v2 - 0x55F9EC3874D1DF27) == 2000528784)) ^ v0))
                            - 8))();
}

uint64_t sub_1AC1BE0F4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v3 = *(_DWORD *)(v2 - 0x55F9EC3874D1DF2FLL) - 1042796734;
  v4 = *(_DWORD *)(v2 - 0x55F9EC3874D1DF33) + 2122818026;
  v5 = v4 < 0xE0B2E5DA;
  v6 = v3 < v4;
  if (v3 < 0xE0B2E5DA != v5)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((91 * v6) ^ v0)) - 8))();
}

uint64_t sub_1AC1BE180@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  _DWORD *v2;

  *v2 = a2;
  *(_DWORD *)(result + 16) = -2000486747;
  return result;
}

void cp2g1b9ro(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;

  if (a1)
    v2 = a2 == 0;
  else
    v2 = 1;
  v3 = !v2;
  __asm { BR              X8 }
}

uint64_t sub_1AC1BE208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, int a15)
{
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  a14 = (535753261 * (&a14 ^ 0xAF40E2F)) ^ 0xE1F2694A;
  v18 = sub_1AC1F43A8(&a14);
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * ((994 * (a15 == v15)) ^ v17)))(v18);
}

uint64_t sub_1AC1BE264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, int a15, int a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a14 = &STACK[0x5DFEEBD0571B623A];
  a16 = 1084 - 460628867 * ((&a14 - 174720130 - 2 * ((unint64_t)&a14 & 0xF595FB7E)) ^ 0xB9037903);
  sub_1AC1C27D8((uint64_t)&a14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16
                                                                                                  + 8 * ((106 * (a15 != 2000528784)) ^ 0x4B5u)))(v17, v18, v19, v20, v21, v22, v23);
}

uint64_t sub_1AC1BE310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, unsigned int a16, uint64_t a17)
{
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v22 = v20 - 996;
  a17 = v17;
  a16 = v22
      + 1224239923
      * (((&a14 | 0xE661C4EB) - &a14 + (&a14 & 0x199E3B10)) ^ 0x14D2393C)
      + 621;
  a15 = a12;
  v23 = (*(uint64_t (**)(int *))(v21 + 8 * (v22 - 37)))(&a14);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * (((a14 == v18) * (v22 + 1797)) ^ v22)) - 12))(v23);
}

uint64_t sub_1AC1BE3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, unsigned int a15, int a16, uint64_t a17, int a18, int a19)
{
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v21 = 628203409 * (&a14 ^ 0x82880C33);
  a15 = 150565725 - v21;
  a16 = v20 - v21 - 2024873292;
  a17 = a12;
  a19 = v21 ^ 0x58A174C0;
  a14 = &STACK[0x4414279470ECFE9E];
  v22 = sub_1AC1F4558((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8
                                                      * ((1685 * (a18 == ((v20 + 937276126) & 0xFBEFFF71) + 1131410031)) ^ v20))
                                          - 257 * (v20 ^ 0xD2u)
                                          + 759))(v22);
}

uint64_t sub_1AC1BE498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unint64_t *a16)
{
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void (*v21)(unsigned int *);
  uint64_t v22;

  a14 = (v20 - 306) ^ (1374699841 * ((&a14 & 0x77BAA81D | ~(&a14 | 0x77BAA81D)) ^ 0xE5B14FEB));
  a15 = &STACK[0x33553D115EA78D3E];
  a16 = a11;
  v21 = (void (*)(unsigned int *))(*(_QWORD *)(v19 + 8 * (v20 - 672)) - 12);
  v21(&a14);
  a15 = &STACK[0x33553D115EA78D42];
  a16 = a11;
  a14 = (v20 - 306) ^ (1374699841
                     * ((&a14 + 1375784868 - 2 * (&a14 & 0x5200CFA4)) ^ 0x3FF4D7AD));
  v21(&a14);
  a15 = a11;
  a14 = (v20 - 584) ^ (1755732067
                     * (((&a14 | 0x8C52E80E) - &a14 + (&a14 & 0x73AD17F0)) ^ 0x529455D5));
  v22 = sub_1AC1BE024((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18
                                                      + 8
                                                      * ((((_DWORD)a16 == v16) * (v17 + v20 + 869117982 - 400)) ^ v20))
                                          - 8))(v22);
}

uint64_t sub_1AC1BE600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v14;
  uint64_t v15;
  int v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((1103 * (a14 == (v16 ^ 0x33CDB022) + v14)) ^ v16)) - 8))();
}

uint64_t sub_1AC1BE638()
{
  int v0;
  int v1;
  _QWORD *v2;
  void (*v3)(_BYTE *);
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BYTE v12[4];
  unsigned int v13;
  uint64_t v14;

  v7 = (v6 - 1065826) & 0x33DDF37F;
  *v2 = (v7 + v0) ^ v11;
  v14 = v9;
  v13 = v1
      + 535753261 * ((-1144322031 - (v12 | 0xBBCB0811) + (v12 | 0x4434F7EE)) ^ 0x4EC0F9C1)
      + v7;
  v3(v12);
  v14 = v10;
  v13 = v5 + 535753261 * ((v12 - 152771804 - 2 * ((unint64_t)v12 & 0xF6E4E324)) ^ 0xFC10ED0B) + v7;
  v3(v12);
  return v4 ^ 0x773DA590u;
}

void sub_1AC1BE750(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 4) ^ (1755732067 * (((a1 | 0x83D72B3C) - (a1 & 0x83D72B3C)) ^ 0x5D1196E7));
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x4E242FFD6E71642FLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = v1
     - 628203409 * ((-29150171 - (&v3 | 0xFE433425) + (&v3 | 0x1BCCBDA)) ^ 0x8334C7E9)
     + 876;
  sub_1AC1C3488((uint64_t)&v3);
  __asm { BR              X9 }
}

uint64_t sub_1AC1BE888@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  _BOOL4 v4;

  v4 = ((v3 ^ v2) & 0x1F) != 3;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (v1 | v4 | (2 * v4))) - 8))();
}

uint64_t sub_1AC1BE8F4@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((((int)((v3 ^ 0xEDF5D7B7)
                                       + 1588330111
                                       + (v1 & 0xDBEBAF6E)
                                       - 1285675994
                                       + ((v2 - 1407701045) & 0x53E7CFEB)) >= 0)
                                * (((v2 - 1449) | 0x90) ^ 0x398)) ^ v2)))();
}

uint64_t sub_1AC1BE9A0@<X0>(int a1@<W0>, int a2@<W3>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;

  v10 = *(_DWORD *)(*(_QWORD *)(v9 - 0x4E242FFD6E71642BLL) + 4 * (v7 + ((a1 - 1232) ^ (v8 + 1268)))) ^ v5;
  *(_DWORD *)(*(_QWORD *)(v9 - 0x4E242FFD6E71642BLL) + 4 * (v4 + v3 + 1)) = ((v10 >> (32 - v6)) | a2 ^ v5)
                                                                            + v5
                                                                            - ((2 * ((v10 >> (32 - v6)) | a2 ^ v5)) & 0x8206F5AC);
  return (*(uint64_t (**)(void))(a3 + 8 * ((79 * ((v8 + v7 + 1442) >> 31)) ^ a1)))();
}

void sub_1AC1BEA3C()
{
  JUMPOUT(0x1AC1BE9D0);
}

uint64_t sub_1AC1BEA44@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((((v3 ^ 0x597DF6DC)
                                           - 524416
                                           + (((13 * (v2 ^ 0x581)) ^ 0xB2FBE831) & v1)
                                           + 13 * (v2 ^ 0x581)
                                           - 1500904422 < 0x7FFFFFFF)
                                          * (13 * (v2 ^ 0x581) - 1371)) ^ (13 * (v2 ^ 0x581))))
                            - 4))();
}

uint64_t sub_1AC1BEAC0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  *(_DWORD *)(*(_QWORD *)(v5 - 0x4E242FFD6E71642BLL) + 4 * (v1 - 678744339 + v2)) = *(_DWORD *)(*(_QWORD *)(v5 - 0x4E242FFD6E71642BLL)
                                                                                                + 4
                                                                                                * (v3 + v2 + 1024));
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a1
                                                      + 8
                                                      * ((((v3 + v2 + 1023) > 0x7FFFFFFE)
                                                        * ((v4 - 878) ^ 0x11B)) ^ v4))
                                          - 4))(2147483646);
}

void sub_1AC1BEB28()
{
  JUMPOUT(0x1AC1BEAF0);
}

uint64_t sub_1AC1BEB30@<X0>(int a1@<W3>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  *(_DWORD *)(*(_QWORD *)(v5 - 0x4E242FFD6E71642BLL) + 4 * (v2 + v4 + (v3 ^ 0x5BB) - 1383)) = a1;
  return (*(uint64_t (**)(void))(a2 + 8 * (int)((57 * ((v4 + v2) >> 31)) ^ v3)))();
}

uint64_t sub_1AC1BEB7C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  _QWORD *v3;
  int v4;
  int v5;
  int v6;

  *(_DWORD *)(*v3 + 4 * (v5 + v1)) = v2;
  return (*(uint64_t (**)(void))(a1 + 8 * (int)((((v5 + v1 + 173 * (v4 ^ 0xDBu) - 1385) >> 31) * v6) ^ v4)))();
}

void sub_1AC1BEBB8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  _QWORD *v4;
  int v5;
  _DWORD *v6;
  _BOOL4 v7;

  v7 = *(_DWORD *)(*v4 + 4 * (v2 + v0 + 1)) == v3 + v5 - 1163 - 221;
  *v6 = (v2 + v0 - v7 + 2) * v1 - 1385840825 * (v0 - v7) + 1747272753;
}

void sub_1AC1BED60(uint64_t a1)
{
  int v1;

  v1 = 3804331 * (((a1 | 0x6D309AEE) - a1 + (a1 & 0x92CF6511)) ^ 0x13E5BF18);
  __asm { BR              X14 }
}

uint64_t sub_1AC1BEE28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v7;
  uint64_t v8;
  int v9;

  v5 = 628203409
     * (((&v7 | 0xE48DBFD8) - &v7 + (&v7 & 0x1B724020)) ^ 0x6605B3EB);
  v7 = v5 + v3 - 581;
  v9 = v2 - ((v4 + 1299197070) & 0x776CD304) - v5 + ((v3 + 169) ^ 0x626E7A4B);
  v8 = a1;
  return ((uint64_t (*)(int *))(*(_QWORD *)(v1 + 8 * (v3 - 1019)) - 8))(&v7);
}

void jEHf8Xzsv8K(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_1AC1BEFA8()
{
  return 4294925273;
}

uint64_t sub_1AC1BEFB4@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void))(a1 + 208))();
  return 0;
}

void OowSGu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  int v8;

  if (a1)
    v5 = a2 == 0;
  else
    v5 = 1;
  v8 = !v5 && a4 != 0 && a5 != 0;
  __asm { BR              X9 }
}

uint64_t sub_1AC1BF058(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  *a4 = 0;
  *a5 = 0;
  a17 = (535753261 * ((&a17 + 2015678485 - 2 * ((unint64_t)&a17 & 0x7824D015)) ^ 0x72D0DE3A)) ^ 0xE1F2694A;
  v20 = sub_1AC1F43A8(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * ((1158 * (a18 == 2000528784)) ^ v18)) - 4))(v20);
}

uint64_t sub_1AC1BF104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, int a18, int a19, unsigned int a20)
{
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v22 = 1225351577
      * (((&a17 ^ 0xB9CEDEF4) + 646493074 - 2 * ((&a17 ^ 0xB9CEDEF4) & 0x2688B392)) ^ 0xBCDCB570);
  a19 = v22 ^ 0x4ED7E0EF;
  a20 = v22 + 1461415967;
  LODWORD(a17) = v22 + 1166651523;
  HIDWORD(a17) = v22 ^ 0x22C;
  (*(void (**)(unint64_t **))(v21 + 360))(&a17);
  a17 = &STACK[0x5DFEEBD0571B625A];
  a19 = 1084 - 460628867 * ((&a17 + 1214857683 - 2 * (&a17 & 0x486941D3)) ^ 0x4FFC3AE);
  sub_1AC1C27D8((uint64_t)&a17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 + 8 * ((203 * (a18 == 2000528784)) ^ 0x26Eu)) - 4))(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

uint64_t sub_1AC1BF22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, unsigned int a20,uint64_t a21)
{
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;

  v26 = 1178560073 * (&a17 ^ 0xBA947862);
  a18 = v26 + 1510368783 * v23 + 858567209;
  a19 = a16;
  a20 = (v24 + 202) ^ v26;
  ((void (*)(int *))((char *)*(&off_1E5B5B480 + (v24 ^ 0x31D)) - 8))(&a17);
  v27 = 1178560073 * ((2 * (&a17 & 0x6149DE40) - &a17 + 515252665) ^ 0xA42259DB);
  a21 = v21;
  a20 = ((v22 ^ 0xDDDFEFF7) + 983790666 + ((v22 << ((2 * (v24 ^ 0x62)) ^ 0x6F)) & (208 * (v24 ^ 0x351) - 1145054034))) ^ v27;
  a18 = v27 + v24 - 526;
  a19 = a16;
  v28 = ((uint64_t (*)(int *))((char *)*(&off_1E5B5B480 + (int)(v24 - 708)) - 8))(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v25 + 8 * ((1984 * (a17 == 2000528784)) ^ v24)) - 12))(v28);
}

uint64_t sub_1AC1BF3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12, unsigned int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t *a18, unsigned int a19, int a20,uint64_t a21,int a22,unsigned int a23)
{
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  if (a13 < 0x16C268B8)
    v25 = 150565725;
  else
    v25 = 150565726;
  v26 = 628203409 * ((&a18 & 0x565D80B1 | ~(&a18 | 0x565D80B1)) ^ 0x2B2A737D);
  a23 = v26 ^ 0xA8A66540;
  a18 = &STACK[0x4414279470ECFEAE];
  a21 = a17;
  a19 = v25 - v26;
  a20 = a12 - v26 - 2024873915;
  v27 = sub_1AC1F4558((uint64_t)&a18);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24 + 8 * ((21 * (a22 != v23)) ^ a12)) - 12))(v27);
}

uint64_t sub_1AC1BF488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, unsigned int a13)
{
  uint64_t v13;
  unsigned int v14;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v13
                                                               + 8 * (a12 ^ 0x6BF ^ (585 * (a13 < v14))))
                                                   - (a12 ^ 0x67Au)
                                                   + 1334))(a1, a2);
}

uint64_t sub_1AC1BF52C@<X0>(uint64_t a1@<X8>, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, int a7, char a8, uint64_t a9, uint64_t a10, unsigned int a11, char *a12, _BYTE *a13, uint64_t a14, unsigned int a15)
{
  int v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(unsigned int *);
  _BYTE *v22;
  int v23;
  uint64_t v24;

  v22 = v16;
  a11 = (v15 - 1070) ^ (((2 * (&a11 & 0x4295DD50) - &a11 - 1117117778) ^ 0xD09E3AA7) * v17);
  v23 = 6 * (v15 ^ 0x520);
  a12 = &a8 + a1;
  a13 = a6;
  v21(&a11);
  a13 = v22;
  a14 = v18;
  a15 = (v23 - 1178) ^ (1225351577
                      * (((&a11 | 0x3538A075) - &a11 + (&a11 & 0xCAC75F88)) ^ 0x16A27863));
  a12 = a6;
  (*(void (**)(unsigned int *))(v20 + 8 * (v23 - 1286)))(&a11);
  a11 = (v23 - 873) ^ (1374699841
                     * ((-1380882350 - (&a11 | 0xADB16852) + (&a11 | 0x524E97AD)) ^ 0x3FBA8FA4));
  a13 = a6;
  a12 = a2;
  v21(&a11);
  a11 = (v23 - 1151) ^ (1755732067
                      * ((((2 * &a11) | 0x7F475C2) - &a11 + 2080752927) ^ 0x5D3C873A));
  a12 = a6;
  v24 = sub_1AC1BE024((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8
                                                      * (((2 * ((_DWORD)a13 == 2000528784)) | (4
                                                                                             * ((_DWORD)a13 == 2000528784))) ^ v23))
                                          - (((v23 - 1269) | 0x310u) ^ 0x35DLL)))(v24);
}

uint64_t sub_1AC1BF700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  int v14;
  int v15;
  uint64_t v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v16 + 8 * (((a14 == v14) * (v15 - 1216)) ^ v15)) - 8))();
}

uint64_t sub_1AC1BF728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v13;
  int v14;
  int v15;
  uint64_t v16;

  return ((uint64_t (*)(void))(*(_QWORD *)(v16 + 8 * (((a13 != v13) * (v15 ^ 0x1AD)) ^ v14)) - 8))();
}

uint64_t sub_1AC1BF758@<X0>(unsigned int a1@<W8>)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(v4 + 8 * (v2 ^ 0x5D8)))((v1 + (v2 ^ 0x66F) - 853) ^ a1, 74971987) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((655 * ((v5 ^ (v2 - 1)) & 1)) ^ v2)) - 8))();
}

uint64_t sub_1AC1BF7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v16 = (v14 - 826) | 0x42;
  v17 = (v16 ^ 0x436) - 314 + (a13 ^ v13) - ((2 * (a13 ^ v13)) & 0x50AA1872) - 1470822657;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15
                                        + 8
                                        * ((228
                                          * (((2 * v17) & 0xE76FF3F6 ^ 0x402A1072) + (v17 ^ 0x5BE2F5C2) + 1870557120 != 1664510395)) ^ v16))
                            - 4))();
}

uint64_t sub_1AC1BF85C(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v5
                                                             + 8
                                                             * (((v4 - 1293) * ((v2 + v1 + 206046725) > 7)) ^ v4)))(a1, v3, (v4 - 1285839753));
}

uint64_t sub_1AC1BF8A8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v5
                                                             + 8
                                                             * ((((38 * (v4 ^ 0x672)) ^ 0x26)
                                                               * ((unint64_t)(v2 - a1) > 0x1F)) ^ v4)))(a1, v3, v1 + (v4 ^ 0x672u) + 283);
}

uint64_t sub_1AC1BF8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  unsigned int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * (((v6 >= ((a5 + 36411667) & 0xFDD46729 ^ 0x101))
                                          * ((v5 + a5 + 61) ^ (v5 + 325))) ^ a5))
                            - 8))();
}

uint64_t sub_1AC1BF934(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v9 = v7 + v6 + v5 + 1652;
  v10 = v3 + v9;
  v11 = *(_OWORD *)(v10 - 31);
  v12 = a1 + v9;
  *(_OWORD *)(v12 - 15) = *(_OWORD *)(v10 - 15);
  *(_OWORD *)(v12 - 31) = v11;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((((v4 & 0xFFFFFFE0) == 32) * (((v2 + a2 - 1642) | 0x664) ^ 0x66C)) | (v2 + a2 - 1268)))
                            - 12))();
}

void sub_1AC1BF99C()
{
  JUMPOUT(0x1AC1BF964);
}

uint64_t sub_1AC1BF9A8(uint64_t a1)
{
  int v1;
  int v2;
  _DWORD *v3;
  _QWORD *v4;
  int v5;
  void (*v7)(_BYTE *);
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[4];
  unsigned int v11;
  uint64_t v12;

  v5 = (v1 - 45646307) & 0x2B87FFD;
  *v4 = a1;
  *v3 = v2;
  v12 = v8;
  v11 = v5
      + 535753261 * ((v10 + 2115814188 - 2 * ((unint64_t)v10 & 0x7E1CC32C)) ^ 0x74E8CD03)
      - 447;
  v7(v10);
  v11 = 2 * (v5 ^ 0x262)
      + 535753261 * ((((2 * v10) | 0xAD83A968) - v10 + 691940172) ^ 0xDC35DA9B)
      - 216;
  v12 = v9;
  v7(v10);
  return 0;
}

void sub_1AC1BFC64(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v3;

  v1 = 1759421093 * (a1 ^ 0xB37DB054);
  if (*(_QWORD *)(a1 + 24))
    v2 = *(_DWORD *)(a1 + 20) - v1 == 1647002608;
  else
    v2 = 1;
  v3 = !v2;
  __asm { BR              X8 }
}

uint64_t sub_1AC1BFD00()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  _BOOL4 v3;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8 * (v2 ^ 0x7B2)))(32, 0x101004023FF3BD5) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((53 * v3) ^ v2)) - ((v2 + 193443951) & 0xF478424D) + 521))();
}

uint64_t sub_1AC1BFD74()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((75
                                          * (((v3 - 84) ^ (v1 == ((v3 + 1852080620) & 0x919B7FBF ^ (v0 - 935)))) & 1)) ^ v3))
                            - 8))();
}

uint64_t sub_1AC1BFDEC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v11 = v2 - 1647002609;
  v12 = v2 - 1;
  v13 = *(unsigned __int8 *)(v6 + v11);
  if (v13 == 117)
    __asm { BR              X11 }
  if (v13 == 245)
  {
    v14 = 2000528784;
    v15 = *(_QWORD *)(v4 + 8);
    v16 = *(unsigned __int8 *)(v4 + 16) ^ v5;
    *(_QWORD *)result = v6;
    *(_DWORD *)(result + 8) = v7;
    *(_DWORD *)(result + 12) = v12;
    if (v16 == 96)
      v17 = 1629332737;
    else
      v17 = 1629332736;
    *(_DWORD *)(result + 16) = 517650072;
    *(_DWORD *)(result + 20) = v17;
    *(_DWORD *)(result + 24) = 2000528784;
    *(_QWORD *)(v15 - 0x7F69814B0519E59BLL) = a2;
  }
  else
  {
    result = (*(uint64_t (**)(void))(v8 + 8 * (v9 - 927)))();
    v14 = -2000486839;
  }
  *(_DWORD *)v4 = v14;
  return result;
}

void sub_1AC1BFECC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1AC1BFF3C@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((52
                                          * (((a1 - 2038179982) ^ 0xEEAF797DEEAEFFDDLL)
                                           + 0x115086823DEBB453
                                           + ((2 * (a1 - 2038179982)) & 0x1DD5DFFBALL) != 748336176)) ^ 0x1D7u))
                            - 8))();
}

uint64_t sub_1AC1BFFD8()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v6 = *(unsigned __int8 *)(v3 + v4 - 0x18A220DE39DEE772) - *(unsigned __int8 *)(v1 + v4 - 0x18A220DE39DEE772);
  v7 = ((2 * v6) & 0x7FBEBDFC) + (v6 ^ v0) == (((v2 - 752) | 0x86) ^ (v0 + 43));
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5 + 8 * ((8 * v7) | (v7 << 9) | v2)) - 12))(4294925278);
}

uint64_t sub_1AC1C0044()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _BOOL4 v5;
  unint64_t v6;
  int v7;
  _BOOL4 v8;

  v5 = v1 < v0;
  v6 = ((9 * (v3 ^ 0x1AEu)) ^ 0xE75DDF21F2BBC8FELL) + v2;
  v7 = v5 ^ (v6 < ((99 * (v3 ^ 0x1DCu)) ^ (v0 - 959)));
  v8 = v6 < v1;
  if (!v7)
    v5 = v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((52 * v5) ^ v3)) - 8))();
}

uint64_t sub_1AC1C00C0@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * (((a1 == ((v1 + 1407133605) & 0xAC20D61F ^ 0x797C2A91))
                                                        * (((v1 - 1001911233) | 0x20A6C63C) + 454109539)) ^ v1))
                                          - 12))(4294925278);
}

uint64_t sub_1AC1C0130(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4
                                                                        + 8
                                                                        * (int)((2016
                                                                               * (((2 * (*v2 - 42)) & 0xEF4FCB6E)
                                                                                + ((*v2 - 42) ^ 0xF7A7E5B7) == -139991625)) ^ v3))
                                                            - (v3 ^ 0x20ALL)))(a1, a2, 3840857788);
}

uint64_t sub_1AC1C0198()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1626
                                          * ((((*(unsigned __int8 *)(v2 + 1) - 134) << ((9 * (v3 ^ 0x26)) ^ 0x21)) & v0)
                                           + ((*(unsigned __int8 *)(v2 + 1) - 134) ^ v1) == v1)) ^ v3))
                            - 12))();
}

uint64_t sub_1AC1C01E8()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1195
                                          * ((v0 & (2 * (*(unsigned __int8 *)(v2 + 2) - 72)))
                                           + ((*(unsigned __int8 *)(v2 + 2) - 72) ^ v1) == v1)) ^ v3))
                            - ((v3 - 1133810320) & 0x439491A9)
                            + 276))();
}

uint64_t sub_1AC1C023C()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((408
                                          * ((((v3 - 959046151) & 0x3929E1EB ^ (v0 - 233)) & (2
                                                                                            * (*(unsigned __int8 *)(v2 + 3)
                                                                                             - 134)))
                                           + ((*(unsigned __int8 *)(v2 + 3) - 134) ^ v1) == v1 + 24 * (v3 ^ 0x20A) - 288)) | v3))
                            - 12))();
}

uint64_t sub_1AC1C02AC()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;

  v5 = *(unsigned __int8 *)(v2 + 4) + ((v3 - 62) ^ 0xFFFFFEA4);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (int)((((v0 & (2 * v5)) + (v5 ^ v1) != v1)
                                               * ((v3 + 2140787131) & 0x80662D79 ^ 0x2CD)) ^ v3))
                            - 12))();
}

uint64_t sub_1AC1C030C()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((939
                                          * ((((v3 ^ 0x8D) + 1) ^ ((v0 & (2
                                                                                         * (*(unsigned __int8 *)(v2 + 5)
                                                                                          - 13)))
                                                                                  + ((*(unsigned __int8 *)(v2 + 5) - 13) ^ v1) == v1)) & 1)) ^ v3))
                            - (v3 + 89)
                            + 506))();
}

uint64_t sub_1AC1C0360()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((133
                                          * ((v0 & (2 * (*(unsigned __int8 *)(v2 + 6) - 1)))
                                           + ((*(unsigned __int8 *)(v2 + 6) - 1) ^ v1) == ((32 * v3) ^ 0x41E0 ^ (v1 - 288)))) ^ v3))
                            - 12))();
}

uint64_t sub_1AC1C03A8()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((54
                                          * ((v0 & (2 * (*(unsigned __int8 *)(v2 + 7) - 1)))
                                           + ((*(unsigned __int8 *)(v2 + 7) - 1) ^ v1) == v1)) ^ v3))
                            - ((v3 - 1534282850) & 0x5B734B7B)
                            + 276))();
}

uint64_t sub_1AC1C03FC()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1232
                                          * ((((*(unsigned __int8 *)(v2 + 8) - 4) << (((v3 + 26) ^ 0xDC) + 5)) & v0)
                                           + ((*(unsigned __int8 *)(v2 + 8) - 4) ^ v1) == v1)) ^ v3))
                            - 12))();
}

uint64_t sub_1AC1C0448(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(*(_QWORD *)(v4 + 96) + 1428) = 1647926426;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((*(_DWORD *)(a2 + 4) == v2) * ((v3 + 36) ^ 0x726)) ^ v3))
                            - ((v3 - 1038685009) & 0x3DE917FE ^ 0x5A2)))();
}

uint64_t sub_1AC1C04B0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  v6 = **(unsigned __int8 **)(a2 + 8) - 42;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1731
                                          * ((((v4 - 99839283) & 0x5F36D73 ^ (v2 - 351)) & (2 * v6)) + (v6 ^ v3) == v3)) ^ v4))
                            - 8))();
}

uint64_t sub_1AC1C0508()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v0 & (2 * (*(unsigned __int8 *)(v3 + 1) - 134)))
                                           + ((*(unsigned __int8 *)(v3 + 1) - 134) ^ v1) == v1)
                                          * (v2 ^ 0x708)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC1C0548()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((2343
                                          * ((((*(unsigned __int8 *)(v3 + 2) - 72) << (((v2 + 1) | 0x40) ^ 0x60)) & v0)
                                           + ((*(unsigned __int8 *)(v3 + 2) - 72) ^ v1) == v1)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC1C0594()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v5 = (v2 ^ 0x41) + *(unsigned __int8 *)(v3 + 3) - 487;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((676 * ((v0 & (2 * v5)) + (v5 ^ v1) == v1)) ^ v2)) - 8))();
}

uint64_t sub_1AC1C05D4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v5 = *(unsigned __int8 *)(v3 + 4) + ((v2 + 65) ^ 0xFFFFFE68);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((2020 * ((v0 & (2 * v5)) + (v5 ^ v1) == v1)) ^ v2)) - 8))();
}

uint64_t sub_1AC1C0614()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;

  v5 = (((*(unsigned __int8 *)(v3 + 5) - 13) << ((v2 + 32) | 0x21)) & v0) + ((*(unsigned __int8 *)(v3 + 5) - 13) ^ v1) == v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((v5 | (16 * v5)) ^ v2)) - 8))();
}

uint64_t sub_1AC1C0654()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1456
                                          * (((v0 + v2 + 65 - 353) & (2 * (*(unsigned __int8 *)(v3 + 6) - 1)))
                                           + ((*(unsigned __int8 *)(v3 + 6) - 1) ^ v1) == v1)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC1C0694()
{
  int v0;
  int v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((69
                                          * ((((*(unsigned __int8 *)(v4 + 7) - 1) << (v3 ^ 0x60)) & v0)
                                           + ((*(unsigned __int8 *)(v4 + 7) - 1) ^ v1) == v1)) | v2))
                            - 8))();
}

uint64_t sub_1AC1C06D4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v0 & (2 * (*(unsigned __int8 *)(v3 + 8) - 5)))
                                           + ((*(unsigned __int8 *)(v3 + 8) - 5) ^ v1) == v1)
                                          * (((v2 - 152) | 0x74) + (v2 ^ 0x5D5))) ^ v2))
                            - 8))();
}

uint64_t sub_1AC1C0724(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(*(_QWORD *)(v4 + 96) + 1428) = 1647926430;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((476 * (*(_DWORD *)(a2 + 4) == v2)) ^ v3))
                            - ((v3 ^ 0x556u)
                             - 1097)
                            + 345))();
}

uint64_t sub_1AC1C0778(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  v6 = **(unsigned __int8 **)(a2 + 8) - 42;
  v7 = ((v2 + v4 - 101 - 252) & (2 * v6)) + (v6 ^ v3) == v3;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((v7 | (v7 << 7)) ^ v4)) - 8))();
}

uint64_t sub_1AC1C07BC()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((((v0 & (2 * (*(unsigned __int8 *)(v2 + 1) - 134)))
                                           + ((*(unsigned __int8 *)(v2 + 1) - 134) ^ v1) == v1)
                                          * ((v3 ^ 0x19D) + 557)) ^ v3))
                            - 8))();
}

uint64_t sub_1AC1C07F8()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((1116
                                          * (((v0 + ((v3 - 169) | 0x44) - 252) & (2 * (*(unsigned __int8 *)(v2 + 2) - 72)))
                                           + ((*(unsigned __int8 *)(v2 + 2) - 72) ^ v1) == v1)) ^ v3))
                            - 8))();
}

uint64_t sub_1AC1C0840()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1825
                                          * ((v0 & (2 * (*(unsigned __int8 *)(v2 + 3) - 134)))
                                           + ((*(unsigned __int8 *)(v2 + 3) - 134) ^ v1) == (v4 ^ (v1 - 108)))) ^ v3))
                            - 8))();
}

uint64_t sub_1AC1C0880()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1426
                                          * ((v0 & (2 * (*(unsigned __int8 *)(v2 + 4) - 247)))
                                           + (v4 ^ (*(unsigned __int8 *)(v2 + 4) - 247)) == v1)) ^ v3))
                            - 8))();
}

uint64_t sub_1AC1C08B8()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((11
                                          * ((((*(unsigned __int8 *)(v2 + 5) - 13) << ((3 * (v3 ^ 0x35)) ^ 0xFD)) & v0)
                                           + ((*(unsigned __int8 *)(v2 + 5) - 13) ^ v1) == v1)) ^ v3))
                            - 8))();
}

uint64_t sub_1AC1C0904()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (int)((1587
                                               * ((v0 & (2 * (*(unsigned __int8 *)(v2 + 6) - 1)))
                                                + ((*(unsigned __int8 *)(v2 + 6) - 1) ^ v1) == v1)) ^ v3))
                            - (v3 ^ 0x169)))();
}

uint64_t sub_1AC1C0948()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;

  v5 = ((v3 + 1156300700) & 0xBB143FFE ^ 0xFFFFFF03) + *(unsigned __int8 *)(v2 + 7);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((1613 * ((v0 & (2 * v5)) + (v5 ^ v1) == v1)) ^ v3)) - 8))();
}

uint64_t sub_1AC1C0998()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((525
                                          * ((v0 & (2 * (*(unsigned __int8 *)(v2 + 8) - 11)))
                                           + ((*(unsigned __int8 *)(v2 + 8) - 11) ^ ((v3 ^ 0x11F) + 126 + v1 - 252)) == 2 * (v3 ^ 0x11F) + v1 - 252)) ^ v3))
                            - 8))();
}

void sub_1AC1C09E8()
{
  int v0;
  uint64_t v1;
  uint64_t v3;
  int v4;
  char v5;

  v4 = v0 + 1198;
  *(_DWORD *)(*(_QWORD *)(v1 + 96) + 1428) = 1647926442;
  v5 = (v0 + 24) | 0x40;
  *(_QWORD *)(v3 - 112) = &STACK[0x1786E53DF64A84A0];
  *(_DWORD *)(v3 - 120) = -1178560073
                        * ((2 * (((v3 - 120) ^ 0xE222760B) & 0x13B37B4B) - ((v3 - 120) ^ 0xE222760B) + 1816954032) ^ 0x34FA8AD9)
                        - 1283442748
                        - ((-270834412 * (((v0 + 1198) ^ 0x7A0) - 719529104) - 1728081794) & 0xED860006)
                        + 1128450114;
  *(_DWORD *)(v3 - 104) = v0
                        + 1198
                        - 1178560073
                        * ((2 * (((v3 - 120) ^ 0xE222760B) & 0x13B37B4B) - ((v3 - 120) ^ 0xE222760B) + 1816954032) ^ 0x34FA8AD9)
                        - 1882358914;
  sub_1AC1C68B8(v3 - 120);
  __asm { BR              X10 }
}

uint64_t sub_1AC1C0C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;

  v24 = v21 - 2146383000;
  if (v24 <= 0x40)
    v24 = 64;
  return (*(uint64_t (**)(void))(v23
                              + 8
                              * ((1066 * ((((a20 - 1063239658) ^ (a5 - v20 - v22 + v24 + 1908 < 0xF)) & 1) == 0)) ^ a20)))();
}

uint64_t sub_1AC1C0CB8(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  v13 = v8 + v7;
  v14 = v13 + v9;
  if ((v13 + v9) <= 0x40)
    v14 = a2;
  return (*(uint64_t (**)(void))(v12
                              + 8
                              * ((13 * (((a7 - 3) ^ (a4 - 513) ^ 0x9B01E224) - v13 < v10 + a5 + v11 + a7 + 1386 + v14)) ^ (a7 - 3))))();
}

uint64_t sub_1AC1C0D1C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23)
{
  int v23;
  int v24;
  uint64_t v25;
  _BOOL4 v26;

  v26 = (unint64_t)(&a23 + a13 + (v24 + v23 - 1)) < (((a1 - 1516) | 6u) ^ 0x19EuLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v25 + 8 * ((v26 | (2 * v26)) ^ a1)) - 12))();
}

uint64_t sub_1AC1C0D68@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;

  v7.i64[0] = 0xEAEAEAEAEAEAEAEALL;
  v7.i64[1] = 0xEAEAEAEAEAEAEAEALL;
  v8.i64[0] = 0x7575757575757575;
  v8.i64[1] = 0x7575757575757575;
  *(int8x16_t *)(v4 + (a1 + v1)) = vaddq_s8(vsubq_s8(*v5, vandq_s8(vaddq_s8(*v5, *v5), v7)), v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((1646 * (((2 * v2) ^ 0x116u) - 506 == ((v3 + 1) & 0x1FFFFFFF0))) ^ v2))
                            - 12))();
}

uint64_t sub_1AC1C0DD8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)(((((v2 + 613056554) | 0xC0645488) ^ (v2 - 269484619) & 0xF4FED6FC ^ 0x92)
                                     * (v0 == v1)) ^ v2)))();
}

uint64_t sub_1AC1C0E34@<X0>(int a1@<W2>, int a2@<W5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  *(&a18 + (a3 + v18)) = *(_BYTE *)(v19 + v21 - 1012779676)
                                     - ((2 * *(_BYTE *)(v19 + v21 - 1012779676)) & 0xEA)
                                     + 117;
  return (*(uint64_t (**)(void))(v22 + 8 * ((1917 * ((a1 + a3 + 1) < 0x40)) ^ (a2 + v20 - 204))))();
}

uint64_t sub_1AC1C0E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,int a33,int a34,int a35,int a36,int a37,int a38,unsigned __int8 a39,int32x4_t a40,int32x4_t a41,int32x4_t a42,int32x4_t a43)
{
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  uint64_t v53;
  __n128 v54;
  __n128 v55;
  int v56;
  uint8x16_t v57;
  uint16x8_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint16x8_t v61;
  int8x16_t v62;
  int8x16_t v63;
  uint8x16_t v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint8x16_t v67;
  int8x16_t v70;
  int8x16_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  uint8x16_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint8x16_t v84;
  uint8x16_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  _DWORD *v96;
  int v97;
  unsigned int v98;
  unint64_t v99;
  uint64_t (*v100)(uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128);
  int8x16x4_t v101;
  int8x16x4_t v102;

  v50.n128_u64[0] = 0x7575757575757575;
  v50.n128_u64[1] = 0x7575757575757575;
  v51 = (__n128)vdupq_n_s32(0x773DA5B0u);
  v52 = (__n128)vdupq_n_s32(0x773DA590u);
  v53 = (v45 - 1);
  v54 = (__n128)vdupq_n_s32(0x773DA597u);
  v55.n128_u64[0] = 0xEAEAEAEAEAEAEAEALL;
  v55.n128_u64[1] = 0xEAEAEAEAEAEAEAEALL;
  v56 = a39 ^ 6;
  v100 = (uint64_t (*)(uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128))(*(_QWORD *)(v44 + 8 * (a6 + v43 - 790))
                                                                                          - 8);
  if (v56 == 2)
  {
    v102 = vld4q_s8(&a23);
    v81 = (uint8x16_t)veorq_s8(v102.val[0], (int8x16_t)v50);
    v82 = vmovl_u8(*(uint8x8_t *)v81.i8);
    v83 = vmovl_high_u8(v81);
    v84 = (uint8x16_t)veorq_s8(v102.val[1], (int8x16_t)v50);
    _Q22 = vmovl_u8(*(uint8x8_t *)v84.i8);
    _Q21 = vmovl_high_u8(v84);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    v89 = (uint8x16_t)veorq_s8(v102.val[2], (int8x16_t)v50);
    v90 = vmovl_high_u8(v89);
    v91 = vmovl_u8(*(uint8x8_t *)v89.i8);
    v102.val[0] = veorq_s8(v102.val[3], (int8x16_t)v50);
    v102.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v102.val[0]);
    v102.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v102.val[1]);
    v102.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v102.val[1].i8);
    v102.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v102.val[0].i8);
    v102.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v102.val[0]);
    v102.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v102.val[0].i8);
    v92 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v91.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8), 0x18uLL)), v102.val[0]);
    v93 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v91, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v82), 0x18uLL)), v102.val[3]);
    v94 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v90.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v83.i8), 0x18uLL)), v102.val[1]);
    v95 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v90, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v83), 0x18uLL)), v102.val[2]);
    v102.val[0] = veorq_s8(vandq_s8((int8x16_t)v92, (int8x16_t)v51), (int8x16_t)(*(_OWORD *)v102.val & __PAIR128__(0xFFFFFF20FFFFFF20, 0xFFFFFF20FFFFFF20)));
    v102.val[3] = veorq_s8(vandq_s8((int8x16_t)v93, (int8x16_t)v51), (int8x16_t)(*(_OWORD *)&v102.val[3] & __PAIR128__(0xFFFFFF20FFFFFF20, 0xFFFFFF20FFFFFF20)));
    v102.val[1] = veorq_s8(vandq_s8((int8x16_t)v94, (int8x16_t)v51), (int8x16_t)(*(_OWORD *)&v102.val[1] & __PAIR128__(0xFFFFFF20FFFFFF20, 0xFFFFFF20FFFFFF20)));
    v102.val[2] = veorq_s8(vandq_s8((int8x16_t)v95, (int8x16_t)v51), (int8x16_t)(*(_OWORD *)&v102.val[2] & __PAIR128__(0xFFFFFF20FFFFFF20, 0xFFFFFF20FFFFFF20)));
    a42 = vaddq_s32(vsubq_s32(v94, vaddq_s32((int32x4_t)v102.val[1], (int32x4_t)v102.val[1])), (int32x4_t)v52);
    a43 = vaddq_s32(vsubq_s32(v95, vaddq_s32((int32x4_t)v102.val[2], (int32x4_t)v102.val[2])), (int32x4_t)v52);
    a40 = vaddq_s32(vsubq_s32(v92, vaddq_s32((int32x4_t)v102.val[0], (int32x4_t)v102.val[0])), (int32x4_t)v52);
    a41 = vaddq_s32(vsubq_s32(v93, vaddq_s32((int32x4_t)v102.val[3], (int32x4_t)v102.val[3])), (int32x4_t)v52);
    v96 = (_DWORD *)&a40 + v48 + 2068755021;
    v97 = *(v96 - 8) ^ *(v96 - 3);
    v98 = *(v96 - 16) ^ *(v96 - 14) ^ (v97 + v47 - ((2 * v97) & 0xEE7B4B20));
    HIDWORD(v99) = v98 ^ v47;
    LODWORD(v99) = v98;
    *v96 = (v99 >> 31) + v47 - ((2 * (v99 >> 31)) & 0xEE7B4B20);
    return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v44
                                                                 + 8
                                                                 * (((v49 != 2068754958) | (32 * (v49 != 2068754958))) ^ 0x90))
                                                     - 4))(v53, 3840857788);
  }
  else if (v56 == 1)
  {
    v101 = vld4q_s8(&a23);
    v57 = (uint8x16_t)veorq_s8(v101.val[0], (int8x16_t)v50);
    v58 = vmovl_u8(*(uint8x8_t *)v57.i8);
    v59 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v58.i8);
    v60 = (int8x16_t)vmovl_high_u16(v58);
    v61 = vmovl_high_u8(v57);
    v62 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v61.i8);
    v63 = (int8x16_t)vmovl_high_u16(v61);
    v64 = (uint8x16_t)veorq_s8(v101.val[1], (int8x16_t)v50);
    v65 = vmovl_high_u8(v64);
    v66 = vmovl_u8(*(uint8x8_t *)v64.i8);
    v67 = (uint8x16_t)veorq_s8(v101.val[2], (int8x16_t)v50);
    _Q26 = (int8x16_t)vmovl_high_u8(v67);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v67.i8);
    v70 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }
    v75 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v101.val[0] = veorq_s8(v101.val[3], (int8x16_t)v50);
    v101.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v101.val[0]);
    v101.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v101.val[1]);
    v101.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v101.val[0].i8);
    v101.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v101.val[0]);
    v101.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v101.val[0].i8), 0x18uLL), v70), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v66.i8, 8uLL), v59));
    v101.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v101.val[3], 0x18uLL), _Q25), vorrq_s8((int8x16_t)vshll_high_n_u16(v66, 8uLL), v60));
    v101.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v101.val[1].i8), 0x18uLL), v75), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v65.i8, 8uLL), v62));
    v101.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v101.val[2], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v65, 8uLL), v63));
    v76 = (int32x4_t)veorq_s8(vandq_s8(v101.val[0], (int8x16_t)v54), (int8x16_t)(*(_OWORD *)&v59 & __PAIR128__(0xFFFFFF07FFFFFF07, 0xFFFFFF07FFFFFF07)));
    v77 = (int32x4_t)veorq_s8(vandq_s8(v101.val[3], (int8x16_t)v54), (int8x16_t)(*(_OWORD *)&v60 & __PAIR128__(0xFFFFFF07FFFFFF07, 0xFFFFFF07FFFFFF07)));
    v78 = (int32x4_t)veorq_s8(vandq_s8(v101.val[1], (int8x16_t)v54), (int8x16_t)(*(_OWORD *)&v62 & __PAIR128__(0xFFFFFF07FFFFFF07, 0xFFFFFF07FFFFFF07)));
    v79 = (int32x4_t)veorq_s8(vandq_s8(v101.val[2], (int8x16_t)v54), (int8x16_t)(*(_OWORD *)&v63 & __PAIR128__(0xFFFFFF07FFFFFF07, 0xFFFFFF07FFFFFF07)));
    a42 = vaddq_s32(vsubq_s32((int32x4_t)v101.val[1], vaddq_s32(v78, v78)), (int32x4_t)v52);
    a43 = vaddq_s32(vsubq_s32((int32x4_t)v101.val[2], vaddq_s32(v79, v79)), (int32x4_t)v52);
    a40 = vaddq_s32(vsubq_s32((int32x4_t)v101.val[0], vaddq_s32(v76, v76)), (int32x4_t)v52);
    a41 = vaddq_s32(vsubq_s32((int32x4_t)v101.val[3], vaddq_s32(v77, v77)), (int32x4_t)v52);
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v44 + 5432) - 12))(v53);
  }
  else
  {
    a33 = 2 * (a33 ^ v45) + v45 - (v46 & (4 * (a33 ^ v45)));
    a34 = 2 * (a34 ^ v45) + v45 - (v46 & (4 * (a34 ^ v45)));
    a35 = 2 * (a35 ^ v45) + v45 - (v46 & (4 * (a35 ^ v45)));
    a36 = 2 * (a36 ^ v45) + v45 - (v46 & (4 * (a36 ^ v45)));
    return v100(v53, 3840857788, v50, v51, v52, v54, v55);
  }
}

void sub_1AC1C0F44()
{
  JUMPOUT(0x1AC1C0F74);
}

void sub_1AC1C11E0()
{
  JUMPOUT(0x1AC1C10E4);
}

uint64_t sub_1AC1C11EC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((317 * (v0 + 1 == v3 + 16)) ^ v2)) - 12))();
}

uint64_t sub_1AC1C12D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((30 * (v7 + 1 != v9 + 32)) ^ a7)) - 8))();
}

uint64_t sub_1AC1C1390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((495 * (v8 + 1 == v9 + 48)) ^ a7)) - 8))();
}

void sub_1AC1C1464()
{
  JUMPOUT(0x1AC1C19E8);
}

uint64_t sub_1AC1C1650@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1763 * (a1 + 1 == v3 + 4)) ^ v1)) - 4))();
}

uint64_t sub_1AC1C1728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  return (*(uint64_t (**)(void))(v5 + 8 * ((v7 + 1 != v6 + 24) | (8 * (v7 + 1 != v6 + 24)) | a5)))();
}

uint64_t sub_1AC1C17E0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((90 * (v1 + 1 == v3 + 44)) ^ a1)) - 4))();
}

uint64_t sub_1AC1C18B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((1805 * (v4 + 1 == v6 + 64)) ^ a4)) - 4))();
}

void sub_1AC1C197C()
{
  JUMPOUT(0x1AC1C19E4);
}

uint64_t sub_1AC1C1A70(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, int a16, unsigned int a17)
{
  uint64_t v17;
  _BOOL4 v18;

  if (a17 < 0x7875A224 != (a14 + 1008195528) < 0x7875A224)
    v18 = (a14 + 1008195528) < 0x7875A224;
  else
    v18 = a14 + 1008195528 > a17;
  return (*(uint64_t (**)(void))(v17 + 8 * ((v18 * ((((a6 + a2 + 224) | 0x210) - 926) ^ 0x2B4)) | (a6 + a2 + 580))))();
}

uint64_t sub_1AC1C1AF4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (((a6 + (v7 ^ (a2 - 690)) + 993) * (v6 + v9 + 63 >= (v6 + v9))) ^ v7)))();
}

uint64_t sub_1AC1C1B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v13;
  int v14;
  uint64_t v15;

  return (*(uint64_t (**)(void))(v15
                              + 8
                              * ((484
                                * (a13 + a5 - (unint64_t)(((v14 - 2134765578) ^ 0x436027C8u) + v13) >= (((v14 - 2134765578) | 0x642CC410u) ^ 0xE4EED6ACuLL))) ^ v14)))();
}

uint64_t sub_1AC1C1BA0(int8x16_t a1, double a2, double a3, double a4, int8x16_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int8x16_t *a10, int a11, int a12, int a13)
{
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;

  *a10 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v15 + (v13 + v17)), vandq_s8(vaddq_s8(*(int8x16_t *)(v15 + (v13 + v17)), *(int8x16_t *)(v15 + (v13 + v17))), a5)), a1);
  return ((uint64_t (*)(void))(*(_QWORD *)(v16 + 8 * (a13 ^ (a11 + v14 - 621))) - ((v14 + a12) & v19 ^ v18)))();
}

uint64_t sub_1AC1C1C00@<X0>(int a1@<W1>, char a2@<W3>, uint64_t a3@<X4>, int a4@<W5>, uint64_t a5@<X8>)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;

  v11 = *(_BYTE *)(v8 + (v10 + v5 + v7 - a1));
  *(_BYTE *)(a3 + a5) = v11 - (a2 & (2 * v11)) + 117;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((a5 != 63) * v6) ^ (a4 + v7 - 621))) - 8))();
}

uint64_t sub_1AC1C1C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _BOOL4 v17;

  v16 = (v15 ^ 0xD55881EE) + a13;
  v17 = v13 - 820234972 < v16;
  if (v16 < 0xB79FFC0 != (v13 - 820234972) < 0xB79FFC0)
    v17 = v16 < 0xB79FFC0;
  return (*(uint64_t (**)(uint64_t))(v14 + 8 * ((37 * !v17) ^ v15)))(2624637927);
}

uint64_t sub_1AC1C1CCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v35 = 628203409 * (((~(v34 - 120) & 0x98B074C0) - (~(v34 - 120) | 0x98B074C1)) ^ 0x1A3878F2);
  *(_DWORD *)(v34 - 112) = v35 + a3 + 689;
  *(_DWORD *)(v34 - 108) = a13 - v35 + a3 + 80 + ((a3 - 268509491) & 0xF4EFF7BE) + 1608890755;
  *(_QWORD *)(v34 - 120) = a10;
  v36 = sub_1AC1BC1C0(v34 - 120);
  v37 = a33 & 0x3F;
  *(&a24 + (v37 ^ 0x2C)) = -11;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v33
                                                               + 8
                                                               * ((1673 * ((v37 ^ 0x2C) > 0x37)) | a3))
                                                   - 4))(v36, 3840857788);
}

uint64_t sub_1AC1C1DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  int v19;
  uint64_t v20;

  return (*(uint64_t (**)(void))(v20 + 8 * ((46 * (v19 != ((a19 - a6 - 1022931963) & 0x5809E7B7) - 1878)) | a19)))();
}

uint64_t sub_1AC1C1E1C(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4 + 8 * ((54 * (((2 * (v3 ^ (a2 - 1427) ^ (a2 + 51)) - 147) ^ v2) < 8)) ^ v3)))();
}

uint64_t sub_1AC1C1E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23)
{
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;

  *(_QWORD *)(&a23 + v23 + 1) = 0x7575757575757575;
  return (*(uint64_t (**)(void))(v26 + 8 * ((37 * (((v25 - 110) & v24) != 8)) ^ (v25 - 35))))();
}

uint64_t sub_1AC1C1EB8(double a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)(v2 + v5) = a1;
  return (*(uint64_t (**)(void))(v6 + 8 * (((v3 != v5) * v4) ^ v1)))();
}

uint64_t sub_1AC1C1ED8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  return (*(uint64_t (**)(void))(v9 + 8 * (((((v6 - a6 - 1147539928) | 0x446614BC) ^ (a2 - 1309)) * (v8 != v7)) ^ v6)))();
}

void sub_1AC1C1F20()
{
  JUMPOUT(0x1AC1C0F74);
}

uint64_t sub_1AC1C1F30@<X0>(int a1@<W0>, unsigned int a2@<W1>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _BOOL4 v26;
  unsigned int v27;
  int v28;
  _BOOL4 v29;

  v26 = v19 < a2;
  *(&a18 + (a3 + a1)) = *(_BYTE *)(v22 + (v18 + v24))
                                    + ((v25 - 36) ^ 0x45)
                                    - ((2 * *(_BYTE *)(v22 + (v18 + v24))) & 0xEA);
  v27 = v18 + 1 + v21;
  v28 = v26 ^ (v27 < a2);
  v29 = v27 < v19;
  if (!v28)
    v26 = v29;
  return (*(uint64_t (**)(void))(v23 + 8 * ((!v26 * v20) ^ v25)))();
}

uint64_t sub_1AC1C1FA4@<X0>(int a1@<W5>, int a2@<W8>)
{
  uint64_t v2;
  int v3;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((23 * (((a1 + v3 - 1) ^ ((a2 - 183207495) < 0x38)) & 1)) ^ (a1 + v3 - 566))))();
}

uint64_t sub_1AC1C1FE0@<X0>(int a1@<W5>, unsigned int a2@<W8>)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;

  v4 = (v2 - 334) | 0x120;
  v5 = a2;
  v6 = ((8 * v4) ^ 0xFFFFFFFFF514600ALL) + a2;
  if (v6 <= 0x38)
    v6 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((184 * (((v4 - a1 + 46) ^ 0xEE0550FBLL) - v5 + v6 > 7)) ^ v4))
                            - 8))();
}

uint64_t sub_1AC1C2054@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16)
{
  int v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(&a16 + v17 - 183207495) = 0x7575757575757575;
  return ((uint64_t (*)(void))(*(_QWORD *)(v18 + 8 * ((53 * ((a1 & 0xFFFFFFFFFFFFFFF8) == 8)) ^ v16))
                            - 137 * (v16 ^ 0x45Eu)
                            + 814))();
}

void sub_1AC1C20B0()
{
  JUMPOUT(0x1AC1C208CLL);
}

uint64_t sub_1AC1C20B8@<X0>(int a1@<W5>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  int v17;
  uint64_t v18;

  *(&a17 + a2 - 183207495) = 117;
  return (*(uint64_t (**)(void))(v18 + 8 * ((1379 * ((unint64_t)(a2 - 183207494) < 0x40)) ^ (a1 + v17 - 740))))();
}

uint64_t sub_1AC1C2100@<X0>(int a1@<W1>, int a2@<W5>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (v4 ^ (1866 * (a3 == v3))))
                            - (((v4 ^ (a1 - 306)) - 8) ^ (v4 - a2 + 46))))();
}

void sub_1AC1C213C()
{
  JUMPOUT(0x1AC1C0F74);
}

uint64_t sub_1AC1C2560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _BOOL4 v43;

  v41 = (v39 + v35);
  v42 = *(_DWORD *)(&a23 + v41 + 72);
  *(_BYTE *)(a3 + v41) = (HIBYTE(v42) ^ 0x4F) - (((HIBYTE(v42) ^ 0x4F) << ((v37 - a6) ^ 0xBD)) & 0xEA) + 117;
  *(_BYTE *)(a3 + (v41 + 1)) = (BYTE2(v42) ^ 0x4F) - ((2 * (BYTE2(v42) ^ 0x4F)) & 0xEA) + 117;
  *(_BYTE *)(a3 + (v41 + 2)) = (BYTE1(v42) ^ 0x74)
                                           - 2 * ((BYTE1(v42) ^ 0x74) & 0xF7 ^ BYTE1(v42) & 2)
                                           + 117;
  *(_BYTE *)(a3 + (v41 + 3)) = v42 ^ 0xCC;
  v43 = v39 - 682659140 < (a35 - 823985921);
  if (v39 - 682659140 < v36 != a35 - 823985921 < v36)
    v43 = a35 - 823985921 < v36;
  return ((uint64_t (*)(void))(*(_QWORD *)(v40 + 8 * ((v43 * v38) | v37)) - 12))();
}

void sub_1AC1C2708()
{
  JUMPOUT(0x1AC1C26D0);
}

uint64_t sub_1AC1C2710(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(qword_1E5B57340[(156 * (*(_DWORD *)(a2 + 4) != 2038179995)) ^ 0x6Cu] - 12))();
}

uint64_t sub_1AC1C2764@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_1AC1C276C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(*(_QWORD *)(a1 + 96) + 468) = *(_BYTE *)(*(_QWORD *)(a2 + 8) + 12);
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 1736) - (v3 ^ 0xA4D0A073)))();
}

void sub_1AC1C27D0()
{
  JUMPOUT(0x1AC1C27A0);
}

void sub_1AC1C27D8(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 12) + 460628867 * ((a1 & 0x73B15F3F | ~(a1 | 0x73B15F3F)) ^ 0xC0D822BD);
  v2 = *((_QWORD *)*(&off_1E5B5B480 + (v1 ^ 0x472))
       + ((713
         * (((uint64_t (*)(uint64_t, uint64_t))*(&off_1E5B5B480 + v1 - 858))(32, 0x101004023FF3BD5) != 0)) ^ v1))
     - 8;
  __asm { BR              X8 }
}

uint64_t sub_1AC1C2878(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0x622B43F0622B43F0;
  *(_QWORD *)(result + 16) = 0x611DA5021EDAB698;
  *(_DWORD *)(result + 24) = 2000528784;
  *(_QWORD *)(v2 - 0x5DFEEBD0571B6222) = result + 0x55F9EC3874D1DF3FLL;
  *((_DWORD *)v1 + 2) = 2000528784;
  return result;
}

uint64_t sub_1AC1C28F8(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))(qword_1E5B57340[(1444 * (*(_DWORD *)(a2 + 4) == 2038179995)) ^ 0x23Fu] - 4))(4294925278);
}

uint64_t sub_1AC1C294C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  *(_BYTE *)(*(_QWORD *)(a2 + 96) + 448) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 12);
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v2 + 4576) - ((v3 + 868) ^ 0x2FB1E482)))(0);
}

void sub_1AC1C29B0()
{
  JUMPOUT(0x1AC1C2980);
}

uint64_t sub_1AC1C29BC(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;

  v1 = 3804331 * ((2 * (a1 & 0x520CC9FF) - (_DWORD)a1 - 1376569856) ^ 0xD32613F6);
  v2 = a1[1] - v1;
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B5B480 + (int)(v2 - 1549))
                              + (int)(((((*a1 + v1) ^ 0x773DA590) - 1 < 0x63) * ((9 * (v2 ^ 0x64C)) ^ 0xED)) ^ v2))
                            - 3 * (v2 ^ 0x61E)
                            + 195))();
}

uint64_t sub_1AC1C2A60@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  char v2;

  *(_DWORD *)(*(_QWORD *)(result + 8) - 0x56F7F77643384EBELL) = (a2 ^ 0x88C25A6F)
                                                              - ((((a2 ^ 0x88C25A6F) << ((v2 - 116) ^ 0x5A)) - 85198) & 0xEE7B4B20)
                                                              + 2000486185;
  return result;
}

uint64_t sub_1AC1C2B14(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  char v7;

  v2 = (unint64_t)&v7 ^ qword_1EEC7B1E8 ^ qword_1EEC7B1D8;
  qword_1EEC7B1E8 = (536075833 * v2) ^ 0x86C548EE6B3237FCLL;
  qword_1EEC7B1D8 = 536075833 * (v2 ^ 0x86C548EE6B3237FCLL);
  v3 = *(_DWORD *)(a2 + 4);
  v4 = (uint64_t)*(&off_1E5B5B480
                + ((57 * ((qword_1EEC7B1D8 - ((57 * v2) ^ 0xFC)) ^ 0xFC)) ^ byte_1AC3D4FB0[byte_1AC3D0CB0[(57 * ((qword_1EEC7B1D8 - ((57 * v2) ^ 0xFC)) ^ 0xFC))] ^ 0xC2])
                - 25);
  if (v3 == 2038179985)
    __asm { BR              X17 }
  if (v3 == 2038179992)
  {
    v5 = **(unsigned __int8 **)(a2 + 8) - 9;
    __asm { BR              X1 }
  }
  return 4294925278;
}

void sub_1AC1C31FC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (1755732067 * (((a1 | 0x8AD08517) - (a1 & 0x8AD08517)) ^ 0x541638CC));
  __asm { BR              X15 }
}

uint64_t sub_1AC1C32B0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((*(_DWORD *)(*(_QWORD *)(a1 + 8) + v4) != v3) * ((((v1 + 1309) | 0x108) - 692) ^ 0x414)) ^ ((v1 + 1309) | 0x108))))();
}

uint64_t sub_1AC1C32E8()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((((v3 - 1115730193 + v2 - 881) * (v1 - 1115729964) >= 0)
                                          * ((v2 - 1023220569) & 0x3CFD17E7 ^ 0xD7)) ^ v2))
                            - 12))();
}

uint64_t sub_1AC1C3344@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _QWORD v5[2];
  unsigned int v6;
  uint64_t v7;

  v7 = v1;
  v6 = v3 + 1225351577 * ((((2 * v5) | 0x13800448) - v5 - 163578404) ^ 0x2A5ADA32) + 657;
  v5[0] = v1;
  v5[1] = a1;
  return (*(uint64_t (**)(_QWORD *))(v2 + 8 * (v3 - 190)))(v5);
}

void sub_1AC1C3488(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _DWORD v3[2];
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 12) + 628203409 * (((a1 | 0x5AF39D7A) - a1 + (a1 & 0xA50C6285)) ^ 0xD87B9149);
  v2 = *(_QWORD *)a1;
  v3[1] = (460628867 * (v3 ^ 0x4C96827D)) ^ (v1 - 789);
  v4 = v2;
  sub_1AC1C80D0((uint64_t)v3);
  __asm { BR              X8 }
}

void sub_1AC1C3568()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;

  if ((*(_DWORD *)(v2 - 0x4E242FFD6E71642FLL) - 1115729965) >= 0x7FFFFFFF)
    v3 = v1;
  else
    v3 = v1 + 2;
  *(_DWORD *)(v0 + 8) = v3;
}

void sub_1AC1C35D4(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;

  v1 = 1759421093 * (a1 ^ 0xB37DB054);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x55F9EC3874D1DF33) - 1065084524;
  v3 = *(_DWORD *)a1 + v1 - 1402363807;
  v4 = (v3 < 0x22AF5D84) ^ (v2 < 0x22AF5D84);
  v5 = v2 < v3;
  if (v4)
    v5 = v3 < 0x22AF5D84;
  __asm { BR              X11 }
}

uint64_t sub_1AC1C36B0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)((((*(_BYTE *)(v1 - 0x55F9EC3874D1DF2BLL) & 1) == 0)
                                               * (((v0 + 1464501794) & 0xA8B57B67) - 146)) ^ v0))
                            - ((v0 - 214) | 0x200u)
                            + 513))();
}

uint64_t sub_1AC1C370C@<X0>(int a1@<W8>, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL4 v5;
  va_list va;

  va_start(va, a2);
  v5 = (*(uint64_t (**)(_QWORD, char *, _QWORD, uint64_t))(v3 + 8 * (v4 - 408)))(**(unsigned int **)(v3 + 8 * (v4 - 385)), va, (((a1 - 1984277796) << (((v4 + 106) & 0xBB) + 118)) & 0xD6DFC000)+ ((((v4 - 612) | 0x204) - 344988168) ^ (a1 - 1984277796) & 0xFFFFF000)+ 344987651, 1) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((183 * v5) ^ v4)) - 4))();
}

uint64_t sub_1AC1C37B4()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((100
                                          * (((v2 + 16) ^ (*(_QWORD *)(v0 - 0x55F9EC3874D1DF3FLL) == 0)) & 1)) | v2))
                            - (v2 ^ 0x58E)
                            + 505))();
}

uint64_t sub_1AC1C3814()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;

  v3 = *(_DWORD *)(v1 - 0x55F9EC3874D1DF2FLL)
     - (((*(_DWORD *)(v1 - 0x55F9EC3874D1DF2FLL) << (((v0 + 110) | 0x82) + 118)) + 38441680) & 0x132D7C58)
     + 1790707604;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((50
                                * (((v3 << (((v0 + 100) & 0xCF) + 50)) & 0xFB787AF2 ^ 0x13287850)
                                 + (v3 ^ 0xF42A8355)
                                 - 85721088 == 2023767417)) ^ v0)))();
}

uint64_t sub_1AC1C38DC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v5 + 8 * (v2 - 1694)))(*v6, a2, *(_DWORD *)(v3 - 0x55F9EC3874D1DF37) + (v2 ^ 0x9DD4BB9B));
  *v9 = v8;
  *(_DWORD *)(v3 - 0x55F9EC3874D1DF37) = v7;
  *v4 = v7;
  return result;
}

uint64_t sub_1AC1C3DA0(_DWORD *a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = 1755732067
     * ((2 * ((a1 ^ 0xFDCA5AD1) & 0x4699B354) - (a1 ^ 0xFDCA5AD1) - 1184478037) ^ 0x9A6AABA1);
  v3 = a1[8] - v2;
  v4 = a1[2] ^ v2;
  v8 = v3
     + 628203409 * (((&v8 | 0x99E9B941) + (~&v8 | 0x661646BE)) ^ 0x1B61B573)
     - 1404134225;
  result = nullsub_1(&v8);
  if (v4 > 2096580996)
  {
    if (v4 == 2096580997)
    {
      v6 = 2;
    }
    else
    {
      if (v4 != 2096580998)
        goto LABEL_11;
      v6 = 1;
    }
LABEL_10:
    v7 = *((_QWORD *)*(&off_1E5B5B480 + (int)(v3 - 1172345357))
         + (int)((1329
                * ((((v3 - 1172345145) ^ (((uint64_t (*)(_QWORD, uint64_t))*(&off_1E5B5B480
                                                                                    + (int)(v3 ^ 0x45E092B9)))((*((_DWORD *)*(&off_1E5B5B480 + (int)(v3 ^ 0x45E092E1))+ 6 * v6+ 1)- 2038179982), 3511634213) == 0)) & 1) == 0)) ^ (v3 - 1172344426)))- 8;
    __asm { BR              X9 }
  }
  if (v4 == -1913173627)
  {
    v6 = 3;
    goto LABEL_10;
  }
  if (v4 == 2096580994)
  {
    v6 = 0;
    goto LABEL_10;
  }
LABEL_11:
  a1[13] = -2000486868;
  return result;
}

void sub_1AC1C43C8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v5;
  unint64_t *v6;
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  **(_DWORD **)(a1 + 96) = *(_DWORD *)(a2 + 16);
  v3 = 1178560073 * (((&v5 | 0x5999BFA4) - (&v5 & 0x5999BFA4)) ^ 0xE30DC7C6);
  v7 = -1882357464 - v3;
  v6 = &STACK[0x1786E53DF64A8948];
  v5 = -154992639 - v3;
  sub_1AC1C68B8((uint64_t)&v5);
  __asm { BR              X9 }
}

uint64_t sub_1AC1C4570(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  v8 = v6 - 1609233406;
  if (v8 <= 0x40)
    v8 = 64;
  return (*(uint64_t (**)(void))(v7 + 8 * ((106 * (-v4 - v5 + ((a4 - 414) ^ 0x341) + v8 + 733 < 0xF)) ^ 0x622u)))();
}

uint64_t sub_1AC1C45E4(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  _BOOL4 v12;

  v10 = v6 + v5;
  v11 = v10 + v4;
  if ((v10 + v4) <= 0x40)
    v11 = a2;
  v12 = a4 - v10 < (v7 + a4 + v8 + v11);
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((16 * v12) | (32 * v12)) ^ 0x2DDu)) - 4))();
}

uint64_t sub_1AC1C463C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8
                                        * ((((a1 + 84) ^ 0x7BF)
                                          * (a14 + v17 - 220 + (unint64_t)(v14 + v15 - 1) > 0xF)) ^ a1))
                            - 4))();
}

uint64_t sub_1AC1C467C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t *v6;
  int v7;
  int8x16_t v8;
  int8x16_t v9;

  v7 = v2 ^ 0x226;
  v8.i64[0] = 0xEAEAEAEAEAEAEAEALL;
  v8.i64[1] = 0xEAEAEAEAEAEAEAEALL;
  v9.i64[0] = 0x7575757575757575;
  v9.i64[1] = 0x7575757575757575;
  *(int8x16_t *)(v3 + (((v7 + 390) ^ 0xFFFFFD12) & (v1 + a1 + 64))) = vaddq_s8(vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v8)), v9);
  return (*(uint64_t (**)(void))(v5 + 8 * ((1619 * (((v4 + 1) & 0x1FFFFFFF0) == 16)) ^ v7)))();
}

void sub_1AC1C46F0()
{
  JUMPOUT(0x1AC1C46B4);
}

uint64_t sub_1AC1C46FC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((49 * (a3 ^ 0x2FC) - 403) * (v3 == v4)) ^ a3))
                            - (((a3 - 749) | 0x40u) ^ 0x44)))();
}

uint64_t sub_1AC1C4744@<X0>(int a1@<W5>, int a2@<W8>)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v7 - 220 + (a2 + v2 + v4 - 769)) = *(_BYTE *)(v3 + v6 - 400146842)
                                                            - ((2 * *(_BYTE *)(v3 + v6 - 400146842)) & 0xEA)
                                                            + 117;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (v4 ^ (2 * ((a1 + a2 + 1) > 0x3F)))) - 4))();
}

uint64_t sub_1AC1C47A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t (*a21)(__n128, __n128, __n128, __n128, __n128),uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int32x4_t a29,int32x4_t a30,int32x4_t a31,int32x4_t a32)
{
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t (*v42)(__n128, __n128, __n128, __n128, __n128);
  const char *v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  uint8x16_t v55;
  uint16x8_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint16x8_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint8x16_t v65;
  int8x16_t v68;
  int8x16_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  uint64_t v78;
  int v79;
  int v80;
  char *v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t (*v86)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint8x16_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  uint8x16_t v91;
  uint8x16_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  _DWORD *v103;
  int v104;
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int8x16x4_t v111;
  int8x16x4_t v112;

  v42 = (uint64_t (*)(__n128, __n128, __n128, __n128, __n128))(*(_QWORD *)(v35 + 8 * v32) - 4);
  v43 = (const char *)(v41 - 220);
  v44.n128_u64[0] = 0x7575757575757575;
  v44.n128_u64[1] = 0x7575757575757575;
  v45 = (__n128)vdupq_n_s32(0x773DA5B0u);
  v107 = v39 - 16;
  v46 = (__n128)vdupq_n_s32(0x773DA590u);
  v47 = (__n128)vdupq_n_s32(0x773DA597u);
  v48.n128_u64[0] = 0xEAEAEAEAEAEAEAEALL;
  v48.n128_u64[1] = 0xEAEAEAEAEAEAEAEALL;
  v49 = *(_DWORD *)(v41 - 148);
  v50 = *(_DWORD *)(v41 - 144);
  v52 = *(_DWORD *)(v41 - 140);
  v51 = *(_DWORD *)(v41 - 136);
  v53 = *(_BYTE *)(v41 - 124) ^ 6;
  LODWORD(v108) = *(unsigned __int8 *)(v41 - 124) ^ 6;
  if (v53 == 2)
  {
    a21 = v42;
    v112 = vld4q_s8(v43);
    v88 = (uint8x16_t)veorq_s8(v112.val[0], (int8x16_t)v44);
    v89 = vmovl_u8(*(uint8x8_t *)v88.i8);
    v90 = vmovl_high_u8(v88);
    v91 = (uint8x16_t)veorq_s8(v112.val[1], (int8x16_t)v44);
    _Q22 = vmovl_u8(*(uint8x8_t *)v91.i8);
    _Q21 = vmovl_high_u8(v91);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    v96 = (uint8x16_t)veorq_s8(v112.val[2], (int8x16_t)v44);
    v97 = vmovl_high_u8(v96);
    v98 = vmovl_u8(*(uint8x8_t *)v96.i8);
    v112.val[0] = veorq_s8(v112.val[3], (int8x16_t)v44);
    v112.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v112.val[0]);
    v112.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v112.val[1]);
    v112.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v112.val[1].i8);
    v112.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v112.val[0].i8);
    v112.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v112.val[0]);
    v112.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v112.val[0].i8);
    v99 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v98.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v89.i8), 0x18uLL)), v112.val[0]);
    v100 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v98, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v89), 0x18uLL)), v112.val[3]);
    v101 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v97.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v90.i8), 0x18uLL)), v112.val[1]);
    v102 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v97, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v90), 0x18uLL)), v112.val[2]);
    v112.val[0] = veorq_s8(vandq_s8((int8x16_t)v99, (int8x16_t)v45), (int8x16_t)(*(_OWORD *)v112.val & __PAIR128__(0xFFFFFF20FFFFFF20, 0xFFFFFF20FFFFFF20)));
    v112.val[3] = veorq_s8(vandq_s8((int8x16_t)v100, (int8x16_t)v45), (int8x16_t)(*(_OWORD *)&v112.val[3] & __PAIR128__(0xFFFFFF20FFFFFF20, 0xFFFFFF20FFFFFF20)));
    v112.val[1] = veorq_s8(vandq_s8((int8x16_t)v101, (int8x16_t)v45), (int8x16_t)(*(_OWORD *)&v112.val[1] & __PAIR128__(0xFFFFFF20FFFFFF20, 0xFFFFFF20FFFFFF20)));
    v112.val[2] = veorq_s8(vandq_s8((int8x16_t)v102, (int8x16_t)v45), (int8x16_t)(*(_OWORD *)&v112.val[2] & __PAIR128__(0xFFFFFF20FFFFFF20, 0xFFFFFF20FFFFFF20)));
    a31 = vaddq_s32(vsubq_s32(v101, vaddq_s32((int32x4_t)v112.val[1], (int32x4_t)v112.val[1])), (int32x4_t)v46);
    a32 = vaddq_s32(vsubq_s32(v102, vaddq_s32((int32x4_t)v112.val[2], (int32x4_t)v112.val[2])), (int32x4_t)v46);
    a29 = vaddq_s32(vsubq_s32(v99, vaddq_s32((int32x4_t)v112.val[0], (int32x4_t)v112.val[0])), (int32x4_t)v46);
    a30 = vaddq_s32(vsubq_s32(v100, vaddq_s32((int32x4_t)v112.val[3], (int32x4_t)v112.val[3])), (int32x4_t)v46);
    v103 = (_DWORD *)&a29 + v37 + 191550622;
    v104 = *(v103 - 8) ^ *(v103 - 3);
    v105 = *(v103 - 16) ^ *(v103 - 14) ^ (v104 + v34 - ((2 * v104) & 0xEE7B4B20));
    HIDWORD(v106) = v105 ^ v34;
    LODWORD(v106) = v105;
    *v103 = (v106 >> 31) + v34 - ((2 * (v106 >> 31)) & 0xEE7B4B20);
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v35 + 8 * ((379 * (v39 != 191550559)) ^ (a7 + a5 - 287)))
                                            - 8))(v107);
  }
  else if (v53 == 1)
  {
    v109 = __PAIR64__(v50, v49);
    v110 = __PAIR64__(v51, v52);
    a21 = v42;
    v111 = vld4q_s8(v43);
    v54 = a7 + a5 - 518;
    v55 = (uint8x16_t)veorq_s8(v111.val[0], (int8x16_t)v44);
    v56 = vmovl_u8(*(uint8x8_t *)v55.i8);
    v57 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v56.i8);
    v58 = (int8x16_t)vmovl_high_u16(v56);
    v59 = vmovl_high_u8(v55);
    v60 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v59.i8);
    v61 = (int8x16_t)vmovl_high_u16(v59);
    v62 = (uint8x16_t)veorq_s8(v111.val[1], (int8x16_t)v44);
    v63 = vmovl_high_u8(v62);
    v64 = vmovl_u8(*(uint8x8_t *)v62.i8);
    v65 = (uint8x16_t)veorq_s8(v111.val[2], (int8x16_t)v44);
    _Q26 = (int8x16_t)vmovl_high_u8(v65);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v65.i8);
    v68 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }
    v73 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v111.val[0] = veorq_s8(v111.val[3], (int8x16_t)v44);
    v111.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v111.val[0]);
    v111.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v111.val[1]);
    v111.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v111.val[0].i8);
    v111.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v111.val[0]);
    v111.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v111.val[0].i8), 0x18uLL), v68), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v64.i8, 8uLL), v57));
    v111.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v111.val[3], 0x18uLL), _Q25), vorrq_s8((int8x16_t)vshll_high_n_u16(v64, 8uLL), v58));
    v111.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v111.val[1].i8), 0x18uLL), v73), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v63.i8, 8uLL), v60));
    v111.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v111.val[2], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v63, 8uLL), v61));
    v74 = (int32x4_t)veorq_s8(vandq_s8(v111.val[0], (int8x16_t)v47), (int8x16_t)(*(_OWORD *)&v57 & __PAIR128__(0xFFFFFF07FFFFFF07, 0xFFFFFF07FFFFFF07)));
    v75 = (int32x4_t)veorq_s8(vandq_s8(v111.val[3], (int8x16_t)v47), (int8x16_t)(*(_OWORD *)&v58 & __PAIR128__(0xFFFFFF07FFFFFF07, 0xFFFFFF07FFFFFF07)));
    v76 = (int32x4_t)veorq_s8(vandq_s8(v111.val[1], (int8x16_t)v47), (int8x16_t)(*(_OWORD *)&v60 & __PAIR128__(0xFFFFFF07FFFFFF07, 0xFFFFFF07FFFFFF07)));
    v77 = (int32x4_t)veorq_s8(vandq_s8(v111.val[2], (int8x16_t)v47), (int8x16_t)(*(_OWORD *)&v61 & __PAIR128__(0xFFFFFF07FFFFFF07, 0xFFFFFF07FFFFFF07)));
    a31 = vaddq_s32(vsubq_s32((int32x4_t)v111.val[1], vaddq_s32(v76, v76)), (int32x4_t)v46);
    a32 = vaddq_s32(vsubq_s32((int32x4_t)v111.val[2], vaddq_s32(v77, v77)), (int32x4_t)v46);
    a29 = vaddq_s32(vsubq_s32((int32x4_t)v111.val[0], vaddq_s32(v74, v74)), (int32x4_t)v46);
    a30 = vaddq_s32(vsubq_s32((int32x4_t)v111.val[3], vaddq_s32(v75, v75)), (int32x4_t)v46);
    v78 = *((unsigned int *)*(&off_1E5B5B480 + a7 + a5 - 706) + v107 + v37);
    v79 = (v49 ^ v40)
        + v38
        + ((v52 ^ v40) & (v50 ^ v40) | (v50 ^ 0xB0B08B46) & (v51 ^ v40))
        + v78
        + (a29.i32[(*((_BYTE *)*(&off_1E5B5B480 + v54 - 115) + v107 + v37 - 8) - 20)] ^ v34);
    v80 = v79 + v40 - (v36 & (2 * v79));
    v81 = (char *)*(&off_1E5B5B480 + v54 - 89) - 12;
    v82 = v80 ^ v40;
    v83 = v82 << (v81[v107 + v37] - 62);
    v84 = (v83 | (v82 >> (62 - v81[v107 + v37]))) + (v50 ^ v40);
    v85 = v84 + v40 - (v36 & (2 * v84));
    v86 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 + 8 * (v54 ^ 0x469)) - 8);
    HIDWORD(v108) = HIDWORD(a13) + 469336527;
    return v86(v86, v39 - 15, 191550622, v83, -(v81[v39 - 16 + v37] - 62), v50, v78, v85, a9, a10, a11, a12, a13, a14, v33, a16, v39 - 16, v108, v109,
             v110,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28);
  }
  else
  {
    *(_DWORD *)(v41 - 148) = 2 * (v49 ^ v40) + v40 - (v36 & (4 * (v49 ^ v40)));
    *(_DWORD *)(v41 - 144) = v40 + 2 * (v50 ^ v40) - (v36 & (4 * (v50 ^ v40)));
    *(_DWORD *)(v41 - 140) = 2 * (v52 ^ v40) + v40 - (v36 & (4 * (v52 ^ v40)));
    *(_DWORD *)(v41 - 136) = 2 * (v51 ^ v40) + v40 - (v36 & (4 * (v51 ^ v40)));
    return v42(v44, v45, v46, v47, v48);
  }
}

uint64_t sub_1AC1C5334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, int a18, unsigned int a19)
{
  unsigned int v19;
  uint64_t v20;
  BOOL v21;

  if (a19 < v19 != a15 + 977352827 < v19)
    v21 = a15 + 977352827 < v19;
  else
    v21 = a15 + 977352827 > a19;
  return ((uint64_t (*)(void))(*(_QWORD *)(v20
                                        + 8 * ((29 * (((a7 + a5 - 34) ^ v21) & 1)) ^ (a7 + a5 + 67)))
                            - 4))();
}

uint64_t sub_1AC1C53CC(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((432 * (a3 + v3 + 63 >= (((v4 + 67115006) | 0x21802040) ^ 0xCDA60507) + v3)) ^ (v4 - 565))))();
}

uint64_t sub_1AC1C5428(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  return (*(uint64_t (**)(void))(v17
                              + 8
                              * ((1248
                                * (((a14 + v15 - (unint64_t)(v14 + a3) < 0x10) ^ (v16 + 83)) & 1)) ^ v16)))();
}

uint64_t sub_1AC1C5478@<X0>(int a1@<W2>, int a2@<W6>, int a3@<W8>, int8x16_t a4@<Q0>, int8x16_t a5@<Q4>)
{
  int v5;
  int8x16_t *v6;
  uint64_t v7;
  uint64_t v8;

  *v6 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v8 + (v5 + a1)), vandq_s8(vaddq_s8(*(int8x16_t *)(v8 + (v5 + a1)), *(int8x16_t *)(v8 + (v5 + a1))), a5)), a4);
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (a2 + a3 - 566)) - 8))();
}

uint64_t sub_1AC1C54D8@<X0>(int a1@<W2>, char a2@<W3>, char a3@<W4>, int a4@<W5>, int a5@<W6>, int a6@<W8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v7 + v8) = *(_BYTE *)(v10 + (v6 + a1))
                      - (a2 & (2 * *(_BYTE *)(v10 + (v6 + a1))))
                      + 117;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * (((((a6 - a3 + 53) ^ (v8 == 63)) & 1) * a4) ^ (a5 + a6 - 507)))
                            - 8))();
}

uint64_t sub_1AC1C5530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  int v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;

  v17 = v14 + 2069568404 < (a14 + 1561552168);
  if ((a14 + 1561552168) < 0x9334DD2E != (v14 + 2069568404) < 0x9334DD2E)
    v17 = (a14 + 1561552168) < 0x9334DD2E;
  return ((uint64_t (*)(void))(*(_QWORD *)(v16 + 8 * ((7 * v17) ^ v15)) - (v15 - 1308) + 67))();
}

uint64_t sub_1AC1C5598(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v20;

  v16 = 628203409 * ((((v15 - 120) | 0x1BC83C0B) - ((v15 - 120) & 0x1BC83C0B)) ^ 0x99403038);
  v20 = 3 * (a2 ^ 0xCC);
  *(_DWORD *)(v15 - 112) = v16 + a2 + 666;
  *(_DWORD *)(v15 - 108) = a14 - v16 + ((a2 + 83900442) | 0x20800300) + 525620574;
  *(_QWORD *)(v15 - 120) = a11;
  v17 = sub_1AC1BC1C0(v15 - 120);
  v18 = v20 ^ 0x18D ^ *(_DWORD *)(v15 - 152) & 0x3F;
  *(_BYTE *)(v15 - 220 + v18) = -11;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v14 + 8 * ((943 * (v18 > 0x37)) ^ a2)) - 8))(v17);
}

uint64_t sub_1AC1C56B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8 * (int)((((a5 + v6 + 30971901) & 0xD8A72FED ^ 0x622) * (v5 != 63)) ^ v6))
                            - 8))();
}

uint64_t sub_1AC1C570C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  uint64_t v9;

  return (*(uint64_t (**)(void))(v9
                              + 8 * ((25 * ((v7 ^ 0x13u) >= (((a7 + a5 + v8 - 1261 + 997) | 0x45) ^ 0x745u))) ^ v8)))();
}

uint64_t sub_1AC1C575C@<X0>(uint64_t a1@<X8>)
{
  char v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 220 + a1 + v3) = 0x7575757575757575;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((((v1 & 0x38) == 8) * ((v2 - 1459) ^ 0x116)) ^ v2)) - 8))();
}

uint64_t sub_1AC1C57A4(double a1)
{
  double *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *v1 = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((v4 == 0) * v3) ^ v2)) - 8))();
}

uint64_t sub_1AC1C57C8@<X0>(int a1@<W4>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (a2 ^ (59 * (v3 == v2))))
                            + 629160793
                            - ((a1 + a2 + 410435318) & 0xE7893F6F)))();
}

void sub_1AC1C5824()
{
  JUMPOUT(0x1AC1C47BCLL);
}

uint64_t sub_1AC1C5834@<X0>(int a1@<W0>, char a2@<W1>, int a3@<W2>, int a4@<W8>)
{
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  unsigned int v12;
  int v13;
  _BOOL4 v14;

  v11 = v4 < v7;
  *(_BYTE *)(v10 - 220 + (a4 - 55210604)) = *(_BYTE *)(v9 + (v5 + a3))
                                                        - ((*(unsigned __int8 *)(v9 + (v5 + a3)) << (a2 ^ 0x46)) & 0xEA)
                                                        + 117;
  v12 = v5 + 1 + a1;
  v13 = v11 ^ (v12 < v7);
  v14 = v12 < v4;
  if (!v13)
    v11 = v14;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((7 * v11) ^ v6)) - 4))();
}

uint64_t sub_1AC1C58B4@<X0>(int a1@<W6>, int a2@<W8>)
{
  uint64_t v2;
  int v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2
                                                     + 8
                                                     * ((((a2 - 594633358) < 0x38)
                                                       * ((a1 + v3 + 875) ^ 0x743)) ^ (a1 + v3 - 90))))(-594633358, 629160793);
}

uint64_t sub_1AC1C5904@<X0>(uint64_t a1@<X0>, unsigned int a2@<W8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2;
  v5 = a1 + a2;
  if ((unint64_t)(v5 + 1) > 0x38)
    v6 = v5 + 1;
  else
    v6 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((((v2 - 6) ^ 0x6C5) * ((unint64_t)(v6 - v4 + 594633358) < 8)) ^ v2))
                            - 4))();
}

uint64_t sub_1AC1C5954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v6 = v2 ^ 0x442;
  *(_QWORD *)(v5 - 220 + v3 + ((v6 - 334209791) & 0x13EBA6F7 ^ (unint64_t)(a1 - 449))) = 0x7575757575757575;
  return (*(uint64_t (**)(void))(v4 + 8 * ((63 * ((a2 & 0xFFFFFFFFFFFFFFF8) == 8)) ^ v6)))();
}

void sub_1AC1C59B4()
{
  JUMPOUT(0x1AC1C5994);
}

uint64_t sub_1AC1C59C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v11 - 220 + v7 + v9) = 117;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8 * ((989 * ((unint64_t)(v7 + 1 + v9) < 0x40)) ^ (a7 + v8 - 386)))
                            - 8))();
}

uint64_t sub_1AC1C5A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;

  if (a18 == 2)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22
                                                                                   + 8
                                                                                   * ((1629
                                                                                     * (*(_DWORD *)(v23 - 128) != 1961237157)) ^ (a7 + a5 + 5)))
                                                                       - 12))(a1, a2, a10, 629160801);
  if (a18 == 1)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22
                                                                                   + 8
                                                                                   * ((450
                                                                                     * (*(_DWORD *)(v23 - 128) == 1961237157)) ^ (a7 + a5 - 57)))
                                                                       - 12))(a1, a2, a3, 629160801);
  v25 = ((unint64_t)&a22 ^ 0xFDC95FEC9F9EFDF7)
      + ((2 * (_QWORD)&a22) & 0xFB92BFD93F3DFBE0)
      + 0x2FBFA7D7EDFBB009;
  *(_BYTE *)(v23 - 129) = (v25 ^ 0xBA) * (v25 + 17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22
                                                                                 + 8
                                                                                 * ((252 * (a5 == 629160892)) ^ 0x468))
                                                                     - 12))(a1, a2, a3, 629160801);
}

void sub_1AC1C6068()
{
  JUMPOUT(0x1AC1C6038);
}

uint64_t sub_1AC1C6074()
{
  return 0;
}

uint64_t sub_1AC1C60B4(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  _BOOL4 v5;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 16) - 0x4E242FFD6E71642FLL) - 1996346938;
  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x4E242FFD6E71642FLL) - 1996346938;
  v4 = (v2 < 1266866674) ^ (v3 < 1266866674);
  v5 = v2 > v3;
  if (v4)
    v5 = v2 < 1266866674;
  v1 = *(_DWORD *)a1 - 108757529 * ((2 * (a1 & 0x5EAB9BD4) - a1 - 1588304853) ^ 0x41C80600);
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B5B480 + v1 - 1441) + ((684 * !v5) ^ v1)) - 8))();
}

uint64_t sub_1AC1C6180(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;

  v5 = v3 - 711784701;
  v6 = v5 < 3 * (v2 ^ 0x42E) - 1743539732;
  v7 = v4 - 711784701 < v5;
  if (v4 - 711784701 < -1743538385 != v6)
    v7 = v6;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 8 * (((8 * !v7) | (16 * !v7)) ^ v2)) - 8))(a1, 1323451849);
}

uint64_t sub_1AC1C61F4@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v5 = v4 ^ 0x5BD;
  if (v3 + 1031753684 <= (int)(v4 ^ 0xFFFFFABC))
    v6 = v3;
  else
    v6 = -2063507368 - v3;
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v2
                                                              + 8
                                                              * ((809
                                                                * ((int)((((v5 + 879) | 0x182) ^ 0xBD7F4A3C) + v6) >= 0)) ^ v5))
                                                  - 4))(a1, (a2 + 1));
}

uint64_t sub_1AC1C6290(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v1
                                                               + 8
                                                               * (((((v4 + 69) ^ ((*(_DWORD *)(*v5 + 4 * v7) ^ v2) > (*(_DWORD *)(*v6 + 4 * v7) ^ v2))) & 1)
                                                                 * ((v4 ^ 0x511) - 358)) ^ v4))
                                                   - 4))(a1, v3);
}

uint64_t sub_1AC1C62E4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v5 | (692 * (v4 < a3))))
                            - (v5 ^ 0x5BDu)
                            - ((v5 + 1192327612) & 0xB8EE81FE)
                            + 504))();
}

uint64_t sub_1AC1C632C@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  int v3;
  int v4;

  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v2
                                                              + 8
                                                              * ((809
                                                                * ((int)((((v3 + 879) | 0x182) ^ 0xBD7F4A3C) + v4) >= 0)) ^ v3))
                                                  - 4))(a1, (a2 + 1));
}

uint64_t sub_1AC1C6370(uint64_t result, int a2)
{
  int v2;

  *(_DWORD *)(result + 4) = ((a2 + 1265) ^ 0x9DC48E7B) - v2;
  return result;
}

void sub_1AC1C638C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1AC1C63D4@<X0>(uint64_t a1@<X8>)
{
  int v1;

  return (*(uint64_t (**)(void))(a1 + 8 * ((4078 * (v1 == 2038179982)) ^ 0x7FAu)))();
}

uint64_t sub_1AC1C6400(_DWORD *a1)
{
  int v1;
  int v2;

  *((_BYTE *)a1 + (v2 + v1 - 1377659563) + 4) = 42;
  *a1 = v1;
  return 0;
}

uint64_t sub_1AC1C6438@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  unsigned int v4;
  _BOOL4 v5;

  *(_BYTE *)(a1 + (v3 - 1377658268) + 4) = **(_BYTE **)(a2 + 8) + 42;
  v4 = *(_DWORD *)(a2 + 4) - 1089871047;
  v5 = v4 > 0x38860BC8;
  if (v4 < 0x38860BC7)
    v5 = 1;
  return (*(uint64_t (**)(void))(a3 + 8 * ((3545 * !v5) ^ 0x5CDu)))();
}

void sub_1AC1C64E8()
{
  JUMPOUT(0x1AC1C6478);
}

void sub_1AC1C64F0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1AC1C653C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;

  *(_DWORD *)(*(_QWORD *)(a2 + 96) + 24) = v3;
  v4 = *(_DWORD *)(a1 + 4) - ((2 * *(_DWORD *)(a1 + 4) + 218607332) & 0x50AA1872) + 785965995;
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v2
                                                     + 8
                                                     * ((1614
                                                       * (((2 * v4) & 0xE76FF3F6 ^ 0x402A1072)
                                                        + (v4 ^ 0x5BE2F5C2)
                                                        + 1870557120 != 1664510395)) ^ 0xA7u))
                                         - 12))(0);
}

uint64_t sub_1AC1C65D4()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((352 * ((v2 + v1 + 206046725) > 7)) ^ 0xB9u)) - 12))();
}

uint64_t sub_1AC1C6634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((250 * (v6 - a1 - (unint64_t)((a5 ^ 0x5C4u) - 179) + 1222 < 0x20)) ^ a5 ^ 0x5C4u))
                            - 4))();
}

uint64_t sub_1AC1C6674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;
  unsigned int v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((((a5 - 1028) | 0x20) - 207) * (v7 < 0x20)) ^ a5))
                            - (a5 ^ (v6 + 1377))
                            + 1448856324))();
}

uint64_t sub_1AC1C66B4@<X0>(int a1@<W3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v6 = (v5 - 1664510396);
  v7 = *(_OWORD *)(v3 + v6 - 15);
  v8 = *(_OWORD *)(v3 + v6 - 31);
  v9 = a2 + v6;
  *(_OWORD *)(v9 - 15) = v7;
  *(_OWORD *)(v9 - 31) = v8;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((38 * (((a1 - 1448855230) | 0x100) - 1322 == (v4 & 0xFFFFFFE0))) ^ (a1 - 1448854771))))();
}

uint64_t sub_1AC1C6720(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v4
                                                     + 8
                                                     * (((2 * ((((a4 - 1230) ^ (v5 == a2)) & 1) == 0)) & 0xFB | (4 * (((a4 + 50) ^ ~(v5 == a2)) & 1))) ^ a4))
                                         + a3
                                         - ((a4 + 2147210786) & 0xD65FEF9B)))(0);
}

uint64_t sub_1AC1C6774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  char v6;
  int v7;

  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v5
                                                                      + 8
                                                                      * ((((409 * (a5 ^ 0x7F)) ^ 0x40E)
                                                                        * ((v6 & 0x18) == 0)) ^ a5))
                                                          - 12))(a5 ^ 0x9Au, a2, (v7 - a2));
}

uint64_t sub_1AC1C67B0@<X0>(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)(a3 - 7 + (v7 + v6 + v8 - a2)) = *(_QWORD *)(v4 - 7 + (v7 + v6 + v8 - a2));
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((412 * (a2 - (v5 & 0xFFFFFFF8) == -8)) ^ a1)) - (a1 ^ 0xE2)))();
}

void sub_1AC1C6810()
{
  JUMPOUT(0x1AC1C67E8);
}

uint64_t sub_1AC1C681C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  char v5;
  int v6;
  int v7;

  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v4
                                                                               + 8
                                                                               * ((30
                                                                                 * (((v6 == a4) ^ (v7 + v5 + 1)) & 1)) ^ v7))
                                                                   - ((409 * (v7 ^ 0xA4u)) ^ 0x4C7)))(0, a2, a3, 409 * (v7 ^ 0xA4u));
}

uint64_t sub_1AC1C686C@<X0>(int a1@<W2>, int a2@<W3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;

  *(_BYTE *)(a3 + (a2 ^ (v6 + 1378)) + a1 + 1181600572) = *(_BYTE *)(v5
                                                                                 + (a2 ^ (v6 + 1378))
                                                                                 + a1
                                                                                 + 1181600572);
  return (*(uint64_t (**)(_QWORD))(v3 + 8 * ((856 * (a1 - 1 == v4)) ^ a2)))(0);
}

uint64_t sub_1AC1C68B8(uint64_t result)
{
  uint64_t v1;
  __int16 v2;
  unsigned int v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_DWORD *)result + 26185 * ((2 * (result & 0x1A68) - result - 6761) ^ 0x9DF5);
  v3 = (((2 * (v2 & 0x1FF ^ 0x18B)) | 0xA38634A) - (v2 & 0x1FF ^ 0x18B) + 2061749851) ^ 0xA41CA22D;
  *(_DWORD *)(v1 - 0x1786E53DF64A86B4) = (((2 * v3) & 0x6B3CF0CA) - v3 - 1973319782) ^ 0x19C71B9C;
  *(_QWORD *)(v1 - 0x1786E53DF64A86D4) = 0x15B86EAC13F54069;
  *(_DWORD *)(v1 - 0x1786E53DF64A86B8) = 1961237157;
  v4 = v2 ^ 3;
  if (v4 == 1)
  {
    v5 = 1961237173;
    goto LABEL_5;
  }
  if (v4 == 2)
  {
    *(_DWORD *)(v1 - 0x1786E53DF64A86BCLL) = -1935829687;
    v5 = 1961237177;
LABEL_5:
    *(_QWORD *)(v1 - 0x1786E53DF64A86CCLL) = 0xA082DF30280A57B8;
    *(_QWORD *)(v1 - 0x1786E53DF64A86C4) = 0x5F7D20CFD7F5A847;
    *(_DWORD *)(v1 - 0x1786E53DF64A86B8) = v5;
  }
  *(_DWORD *)(result + 4) = 262597618;
  return result;
}

uint64_t sub_1AC1C6A48(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v1 = 1759421093 * (a1 ^ 0xB37DB054);
  v2 = *(_DWORD *)(a1 + 8) + v1;
  v3 = *(_DWORD *)a1 ^ v1;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) - 0x4E242FFD6E71642FLL);
  v6 = v4 - 1115729964;
  v5 = v4 - 1115729964 < 0;
  v7 = 1115729964 - v4;
  if (v5)
    v8 = v7;
  else
    v8 = v6;
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B5B480 + (v2 ^ 0x18B))
                              + ((634 * ((v3 - 2045416913) >= 4 * (unint64_t)v8)) ^ v2))
                            - 4))();
}

uint64_t sub_1AC1C6AEC(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v2
                                                               + 8
                                                               * (v3 ^ ((4 * (v1 != 2045416913)) | (8
                                                                                                  * (v1 != 2045416913)))))
                                                   - ((v3 + 1043621305) & 0xC1CB9AF9)
                                                   + 628))(a1, 2140256608);
}

uint64_t sub_1AC1C6B38()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8 * ((1670 * (((151 * ((v1 - 290) ^ 0x155)) ^ 0x1E5) == 32)) ^ (v1 - 290)))
                            - 12))();
}

uint64_t sub_1AC1C6BB8@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W8>)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  char v8;

  *(_BYTE *)(*(_QWORD *)(a1 + 16) + ((a2 - 111) ^ (a5 + 329)) + a4) = (a3 ^ v7) >> v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (a2 ^ (957 * (a4 - 1 != v6)))) - 4))();
}

uint64_t sub_1AC1C6C04()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((1670 * (v1 + 8 == ((151 * (v2 ^ 0x155)) ^ 0x1E5))) ^ v2)) - 12))();
}

uint64_t sub_1AC1C6C44()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  _BOOL4 v6;

  v4 = ((v3 + 1165673585) & 0xBA853BFD ^ 0x8D088154) + v2;
  v6 = v4 > 1862045303 || v4 < v1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((1780 * v6) ^ v3)) - 12))();
}

uint64_t sub_1AC1C6CA8@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  _QWORD *v3;
  int v4;
  int v5;

  return sub_1AC1C6BB8(a1, v5 + 111, *(_DWORD *)(*v3 + 4 * (int)(((v5 + 111) ^ 0x9E0BF3DC) + v4)), v2, a2);
}

uint64_t sub_1AC1C6CD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

void sub_1AC1C6CDC(uint64_t a1)
{
  int v1;

  v1 = 108757529 * ((-2 - ((a1 | 0x1E625E8E) + (~(_DWORD)a1 | 0xE19DA171))) ^ 0x101C35A);
  __asm { BR              X13 }
}

uint64_t sub_1AC1C6D98@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  _DWORD v7[2];
  uint64_t v8;

  v5 = 1755732067 * ((2 * (v7 & 0xB288B38) - v7 - 187206461) ^ 0x2A11C918);
  v7[0] = (v3 - ((v4 + v1 + 740267739) & 0x8EDD0206) + 1568558977) ^ v5;
  v7[1] = (v1 - 1372) ^ v5;
  v8 = v2;
  return ((uint64_t (*)(_DWORD *))(*(_QWORD *)(a1 + 8 * (v1 ^ 0x69D)) - 8))(v7);
}

void sub_1AC1C6EE8(uint64_t a1)
{
  __asm { BR              X8 }
}

void sub_1AC1C7018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  _BOOL4 v12;

  v12 = ((**(unsigned __int8 **)(a8 + 80) - (*(unsigned __int8 *)(*(_QWORD *)(v8 + 1528) - 1) ^ 0x75)) ^ 0xF7A7E5B7)
      + 695983100
      + ((2 * (**(unsigned __int8 **)(a8 + 80) - (*(unsigned __int8 *)(*(_QWORD *)(v8 + 1528) - 1) ^ 0x75))) & 0xEF4FCB6E) != v9
     || a7 == 4280999458;
  __asm { BR              X15 }
}

uint64_t sub_1AC1C808C@<X0>(int a1@<W0>, int a2@<W4>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(v3 + (a1 - 1664510396)) = *(_BYTE *)(a3 + (a1 - 1664510396));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((1062 * (a1 - 1 == v4)) ^ (a2 + v5 - 263))) - 8))();
}

void sub_1AC1C80D0(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;
  _BOOL4 v6;

  v1 = *(_DWORD *)(a1 + 4) ^ (460628867 * (((a1 | 0x4A5B5FFB) - (a1 & 0x4A5B5FFB)) ^ 0x6CDDD86));
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x4E242FFD6E71642FLL);
  v4 = v2 - 1115729964;
  v3 = v2 - 1115729964 < 0;
  v5 = 1115729964 - v2;
  if (!v3)
    v5 = v4;
  v6 = (v5 ^ (v1 + 2112157248)) - 1744868100 + ((2 * v5) & 0xFBC9EEB8) - 367289433 > 0x7FFFFFFE;
  __asm { BR              X20 }
}

uint64_t sub_1AC1C81F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, uint64_t a8)
{
  int v8;
  _QWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;

  return (*(uint64_t (**)(void))(a8
                              + 8 * (((*(_DWORD *)(*v9 + 4 * a7) != a5) * a6) ^ ((v12 + (v8 ^ v10) * v11) | v13))))();
}

void sub_1AC1C8224()
{
  JUMPOUT(0x1AC1C81C8);
}

_DWORD *sub_1AC1C8234(_DWORD *result)
{
  int v1;

  *result = v1;
  return result;
}

void sub_1AC1C8240(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  BOOL v5;

  v1 = 1374699841 * (((a1 | 0xED37A84B) - (a1 | 0x12C857B4) + 315119540) ^ 0x80C3B042);
  v2 = *(_DWORD *)a1 - v1;
  v3 = (unsigned __int16)(*(_WORD *)(a1 + 16) - v1);
  v5 = *(_QWORD *)(a1 + 8) == 0x72CD57E269BD2F42 || v3 == 12123;
  __asm { BR              X8 }
}

uint64_t sub_1AC1C832C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;

  v54 = (((v51 + 1832794399) & 0x92C1C7DD) - 1676) | 0x648;
  HIDWORD(v57) = v51 - 500543010;
  LODWORD(v57) = v51 ^ 0x69E;
  LODWORD(v56) = (v51 ^ 0x683) + 1812433097;
  HIDWORD(v56) = v51 ^ 0x683;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v52 + 8 * (int)v54) - ((((_DWORD)v54 - 1735) | 0x60Eu) ^ 0x61BLL)))(&a32, 1224239923, v48 - 0x72CD57E269BD2F42, (unsigned __int16)(v49 - 12123), 1550, 42, 1563, 438, a9, v56, &a48, (unint64_t)&a30 % (v54 ^ 0x6FDuLL) + 16, (((2 * (v53 - 152)) | 0x5E3FA160938DE4DCLL) - (v53 - 152) + 0x50E02F4FB6390D92) ^ 0xA1134EBC2432EA67, v48 - 0x72CD57E269BD2F42, a15, a16, a17, v57, *(_QWORD *)(v50 + 8 * ((int)v54 - 1554)) - 4,
           *(_QWORD *)(v50 + 8 * ((int)v54 - 1590)));
}

uint64_t sub_1AC1C8558@<X0>(uint64_t a1@<X2>, int a2@<W3>, int a3@<W6>, int a4@<W7>, unsigned int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, _DWORD *a17)
{
  int v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  unsigned int v24;
  unint64_t v25;
  char v26;

  v23 = (_BYTE *)(a1 + (a2 - 1));
  v24 = -857180639 * ((*(_DWORD *)(*a16 + (*a17 & v20)) ^ v23) & 0x7FFFFFFF);
  v25 = (v24 ^ HIWORD(v24)) * ((((v17 - 185) ^ a3) * a4) ^ 0xCCE870F9);
  v26 = *(_BYTE *)(*(_QWORD *)(v19 + 8 * ((v17 - 185) ^ v22)) + (v25 >> 24) - 8) ^ (a5 >> v18) ^ *(_BYTE *)(*(_QWORD *)(v19 + 8 * (v17 - 1633)) + (v25 >> 24)) ^ *(_BYTE *)(*(_QWORD *)(v19 + 8 * ((v17 - 185) ^ 0x626)) + (v25 >> 24) - 3) ^ v25 ^ (-69 * BYTE3(v25));
  *v23 = v26;
  return ((uint64_t (*)(void))(*(_QWORD *)(v21 + 8 * ((259 * (a2 != (v26 != 0))) ^ (v17 - 185))) - 8))();
}

void sub_1AC1C8F2C()
{
  JUMPOUT(0x1AC1C8518);
}

void sub_1AC1C8F34()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 + 20) = v0;
}

void sub_1AC1C8F78()
{
  unint64_t v0;
  uint64_t v1;
  _BYTE v2[1208];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = (unint64_t)&v2[qword_1EEC7B1D8 ^ qword_1EEC7B210];
  qword_1EEC7B210 = 536075833 * (v0 + 0x793AB71194CDC804);
  qword_1EEC7B1D8 = 536075833 * (v0 ^ 0x86C548EE6B3237FCLL);
  *(_DWORD *)*(&off_1E5B5B480
             + ((57 * ((qword_1EEC7B1D8 + qword_1EEC7B210) ^ 0xFC)) ^ byte_1AC3CDF40[byte_1AC3C8A70[(57 * ((qword_1EEC7B1D8 + qword_1EEC7B210) ^ 0xFC))] ^ 0xAB])
             - 135) = 2000528784;
  v1 = ((uint64_t (*)(uint64_t, uint64_t))*(&off_1E5B5B480
                                                  + ((57
                                                                                   * ((qword_1EEC7B1D8 + qword_1EEC7B210) ^ 0xFC)) ^ byte_1AC3D4FB0[byte_1AC3D0CB0[(57 * ((qword_1EEC7B1D8 + qword_1EEC7B210) ^ 0xFC))] ^ 0x91])
                                                  + 89))(512, 1509315540);
  *(_QWORD *)*(&off_1E5B5B480
             + ((57 * ((qword_1EEC7B1D8 - qword_1EEC7B210) ^ 0xFC)) ^ byte_1AC3CDF40[byte_1AC3C8A70[(57 * ((qword_1EEC7B1D8 - qword_1EEC7B210) ^ 0xFC))] ^ 0xC0])
             - 197) = v1;
  __asm { BR              X8 }
}

uint64_t sub_1AC1C9114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,int a47,uint64_t a48,int a49,int a50)
{
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  uint64_t v66;

  v66 = v50;
  LODWORD(a24) = 1175121227;
  LODWORD(a39) = 1498928437;
  LODWORD(a40) = 1498928384;
  LODWORD(a38) = 1498928466;
  LODWORD(a34) = -1924071681;
  HIDWORD(a13) = -1754948898;
  LODWORD(a33) = 996485887;
  v64 = vdupq_n_s32(0x577BD6EEu);
  v65 = vdupq_n_s32(0x7FFFFFFEu);
  v63 = vdupq_n_s32(0x2BBDEB77u);
  a49 = 733866871;
  a50 = -1296737368;
  a47 = dword_1EEC7BEB8;
  v53 = dword_1EEC7C8A0;
  v54 = 1374699841
      * ((((v52 - 152) | 0xFCB602E90F3071B5) - ((v52 - 152) & 0xFCB602E90F3071B5)) ^ 0xF2BA9CE562C469BCLL);
  *(_QWORD *)(v52 - 120) = -1374699841
                         * ((((v52 - 152) | 0xFCB602E90F3071B5) - ((v52 - 152) & 0xFCB602E90F3071B5)) ^ 0xF2BA9CE562C469BCLL);
  *(_QWORD *)(v52 - 144) = v53 + v54;
  *(_DWORD *)(v52 - 112) = v54;
  *(_DWORD *)(v52 - 132) = v54 ^ 0x460AED4B;
  *(_DWORD *)(v52 - 128) = 2021363777 - v54;
  *(_DWORD *)(v52 - 136) = v54 + 1175121277;
  *(_DWORD *)(v52 - 152) = v54 + 1175121202;
  sub_1AC1F4250(v52 - 152);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, int *, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 + 8 * *(int *)(v52 - 148)) - 4))(v66, v55, v56, v57, v58, v59, v60, v61, v51, v52 - 240, 1755732067* ((((v52 - 152) | 0x8481D95746852997) - (v52 - 152) + ((v52 - 152) & 0x7B7E26A8B97AD668)) ^ 0x592A7E689843944CLL), 3613622433, a13, (unint64_t)&a47 % 0x25 + 16, a15, (1755732067* ((((v52 - 152) | 0x8481D95746852997) - (v52 - 152) + ((v52 - 152) & 0x7B7E26A8B97AD668)) ^ 0x592A7E689843944CLL)) ^ 0x13FF, v63.i64[0],
           v63.i64[1],
           v64.i64[0],
           v64.i64[1],
           v65.i64[0],
           v65.i64[1],
           a23,
           a24,
           a25,
           0x18A07B580,
           0x1AC1F4250,
           0x18A076E3CLL,
           0x191D68428,
           0,
           &dword_1EEC7BEB8,
           &dword_1EEC7C8A0,
           a33,
           a34,
           a35,
           a36,
           (v52 - 152) | 0x602BAAA869C5F903,
           a38,
           a39,
           a40);
}

uint64_t sub_1AC1C9434@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  unsigned int *v36;
  uint64_t (*v37)(void);
  int v38;
  unsigned int v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v38 = a1 + 1439;
  a8(a7, 2965982036);
  v39 = v37();
  *v36 = v39;
  v40 = 1812433253 * (v39 ^ (v39 >> 30)) + 1;
  v36[1] = v40;
  v41 = ((v38 - 251721542) & 0xF00F2FF ^ 0x10u) > 1;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a36 + 8 * (((4 * v41) | (8 * v41)) ^ v38)) - 4))(v40, v42, v43, v44, v45, v46, v47, v48, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21);
}

uint64_t sub_1AC1C94B8(uint64_t a1, double a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int32x4_t a19, int8x16_t a20,int8x16_t a21)
{
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int32x4_t v27;

  v23 = (int8x16_t)vld1q_dup_f32((const float *)v21);
  v24.i64[0] = 0x8000000080000000;
  v24.i64[1] = 0x8000000080000000;
  a3.i64[0] = *(_QWORD *)(v21 + 4);
  a3.i32[2] = *(_DWORD *)(v21 + 12);
  v25 = vextq_s8(v23, a3, 0xCuLL);
  v26 = a3;
  v26.i32[3] = *(_DWORD *)(v21 + 16);
  v27 = (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v26, a21), vandq_s8(v25, v24)), 1uLL), *(int8x16_t *)(v21 + 1588));
  v25.i32[0] = *(_DWORD *)(v22 + 4 * (*(_DWORD *)(v21 + 4) & 1));
  v25.i32[1] = *(_DWORD *)(v22 + 4 * (*(_DWORD *)(v21 + 8) & 1));
  v25.i32[2] = *(_DWORD *)(v22 + 4 * (*(_DWORD *)(v21 + 12) & 1));
  v25.i32[3] = *(_DWORD *)(v22 + 4 * (v26.i8[12] & 1));
  *(int8x16_t *)v21 = veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v27, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v27, v27), a20)), a19), v25);
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 7296) - 12))();
}

uint64_t sub_1AC1C9B1C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W8>)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;

  v10 = (unsigned int *)(v7 + 4 * v5);
  v11 = v5 + 1;
  v12 = *(_DWORD *)(v7 + 4 * v11);
  v13 = v10[397] ^ ((v12 & 0x7FFFFFFE | v4 & 0x80000000) >> 1);
  *v10 = (v13 + v8 - ((((a4 - 294) | v6) ^ a2) & (2 * v13))) ^ *(_DWORD *)(v9 + 4 * (v12 & 1));
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * (((v11 == 227) * a3) ^ a4)) - 12))();
}

uint64_t sub_1AC1C9B84(uint64_t a1, double a2, int8x16_t a3, double a4, double a5, int8x16_t a6, int8x16_t a7, int8x16_t a8, int32x4_t a9)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  const float *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int32x4_t v16;

  v12 = (const float *)(v10 + 908);
  v13 = (int8x16_t)vld1q_dup_f32(v12);
  a3.i64[0] = *(_QWORD *)(v10 + 912);
  a3.i32[2] = *(_DWORD *)(v10 + 920);
  v14 = vextq_s8(v13, a3, 0xCuLL);
  v15 = a3;
  v15.i32[3] = *(_DWORD *)(v10 + 924);
  v16 = (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v15, a6), vandq_s8(v14, a8)), 1uLL), *(int8x16_t *)v10);
  v14.i32[0] = *(_DWORD *)(v11 + 4 * (*(unsigned int *)(v10 + 912) & ((v9 + 56) ^ 0x232)));
  v14.i32[1] = *(_DWORD *)(v11 + 4 * (*(_DWORD *)(v10 + 916) & 1));
  v14.i32[2] = *(_DWORD *)(v11 + 4 * (*(_DWORD *)(v10 + 920) & 1));
  v14.i32[3] = *(_DWORD *)(v11 + 4 * (v15.i8[12] & 1));
  *(int8x16_t *)(v10 + 908) = veorq_s8((int8x16_t)vaddq_s32(vsubq_s32(v16, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v16, v16), a7)), a9), v14);
  return (*(uint64_t (**)(void))(a1 + 8 * v9))();
}

void sub_1AC1C9C40()
{
  JUMPOUT(0x1AC1C9B98);
}

uint64_t sub_1AC1C9C4C@<X0>(uint64_t a1@<X0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,unsigned int a41)
{
  _DWORD *v41;
  int v42;
  uint64_t v43;
  unsigned int v44;

  v44 = v41[396] ^ (((((a2 + 2168418) | 0x97448320) - 392534967) & *v41 | v41[623] & 0x80000000) >> 1);
  v41[623] = (v44 + v42 - ((((a2 - 2059338003) | 0x12249A95) ^ 0xC01E4D5B) & (2 * v44))) ^ *(_DWORD *)(v43 + 4 * (*v41 & 1));
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((1430 * (a41 > 0x26F)) ^ a2)) - 8))();
}

uint64_t sub_1AC1C9CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,_DWORD *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t (*a41)(uint64_t),uint64_t a42,uint64_t a43)
{
  int v43;
  unint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  *a31 = 1;
  *(_QWORD *)(v46 + 120) = *v45 ^ v44;
  v48 = v43 - 1933409412 + v44;
  *(_DWORD *)(v47 - 152) = v48 + 38;
  *(_DWORD *)(v47 - 148) = (v43 - 435386223) ^ v44;
  *(_QWORD *)(v46 + 144) = a16;
  *(_DWORD *)(v47 - 128) = ((v43 - 1933409412) ^ 0xF7) + v44;
  *(_DWORD *)(v47 - 144) = v44;
  *(_DWORD *)(v47 - 120) = v48;
  v49 = a41(v47 - 152);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a43 + 8 * *(int *)(v47 - 124)) - 12))(v49);
}

uint64_t sub_1AC1C9D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,_DWORD *a32)
{
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;

  *a32 = 0;
  v35 = ((v33 ^ (v33 >> 11)) << 7) & 0x9D2C5680 ^ v33 ^ (v33 >> 11);
  *(_DWORD *)(*a25 + a30) ^= (v35 << 15) & 0xEFC60000 ^ v35 ^ (((v35 << 15) & 0xEFC60000 ^ v35) >> 18);
  return ((uint64_t (*)(void))(*(_QWORD *)(v32 + 8 * ((29 * (a30 >= (v34 ^ 0xD763815DuLL))) ^ 0x32C)) - 4))();
}

void sub_1AC1C9E1C()
{
  JUMPOUT(0x1AC1C92DCLL);
}

void sub_1AC1C9E28()
{
  int v0;
  _DWORD *v1;

  *v1 = v0 + 21;
}

void sub_1AC1D027C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1AC1D02E0()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((31 * (v1 == 2038179982)) | 0x480u)) - 8))();
}

uint64_t sub_1AC1D0318@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  *(_DWORD *)(*(_QWORD *)(v1 + 96) + 528) = 2125550890;
  *(_DWORD *)(*(_QWORD *)(v1 + 96) + 532) = 1115729964;
  *(_QWORD *)(*(_QWORD *)(v1 + 96) + 536) = *(_QWORD *)(v1 + 96) + 544;
  v4 = *(_QWORD *)(v1 + 96) + 0x4E242FFD6E716643;
  v5 = *(_QWORD *)(v2 + 8) + (*(_DWORD *)(v2 + 4) - v3);
  v6 = 535753261
     * (((&v9 | 0xC8F0DEF3) - &v9 + (&v9 & 0x370F2108)) ^ 0xC204D0DC);
  v9 = v6 + 1061;
  v10 = v4;
  v11 = v5;
  v12 = v3 - v6 - 1875990703;
  ((void (*)(unsigned int *))(*(_QWORD *)(a1 + 1456) - 4))(&v9);
  v7 = v13;
  *(_QWORD *)(*(_QWORD *)(v1 + 96) + 512) = *(_QWORD *)(v2 + 8) + (*(_DWORD *)(v2 + 4) - v3);
  return v7 ^ 0x99FCD682;
}

void sub_1AC1D0488(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (1178560073 * ((-2 - ((a1 | 0xBDAC54F5) + (~(_DWORD)a1 | 0x4253AB0A))) ^ 0xF8C7D368));
  __asm { BR              X14 }
}

uint64_t sub_1AC1D05BC@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;

  v14 = v11 > 0x2072CCCF;
  *(_DWORD *)(a9 + 4 * (v9 + a1)) = *(_DWORD *)(*(_QWORD *)(v12 - 0x4E242FFD6E71642BLL) + 4 * (v9 + a1));
  if (v14 == v9 - 328928303 < -544394448)
    v14 = v9 - 328928303 < (int)(v11 + 1603089200);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8 * ((94 * !v14) ^ (v10 - 66))))(3966038993, 3750572848);
}

uint64_t sub_1AC1D0664()
{
  int v0;
  unsigned int v1;
  int v2;
  uint64_t v3;
  _BOOL4 v5;

  v5 = v0 + 219089882 <= 3623737 && v0 + 219089882 >= v2 - 2143859910;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 + 8 * (int)((2025 * v5) ^ v1))
                                                            - (v1 ^ 0x3F6)))(v1 ^ 0x3F6, 3238230742, 0x4E242FFD6E716433);
}

uint64_t sub_1AC1D06D8@<X0>(int a1@<W1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  _BOOL4 v18;

  *(_DWORD *)(a10 + 4 * (v10 + a2)) = a1;
  v16 = v10 + 1 + v12;
  v18 = v16 <= v13 && v16 >= v14;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((v18 * (v11 + 1015)) ^ v11)) - 4))();
}

uint64_t sub_1AC1D0714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7
                                                                                + 8
                                                                                * (((((v6 - 202) | 0x220) + 922)
                                                                                  * (v5 != 0)) ^ v6)))(a1, a2, a3, a4, a5);
}

uint64_t sub_1AC1D0744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;

  v20 = (v17 - 227976722) & 0xD96A5FC;
  v21 = (*(_DWORD *)(*(_QWORD *)(a13 + 8) - 0x6C02322A16757C55) - 173403933) * (*a17 ^ 0xC1037AD6);
  v22 = 535753261 * ((((v19 - 128) | 0x3F718813) - (v19 - 128) + ((v19 - 128) & 0xC08E77E8)) ^ 0x3585863C);
  *(_DWORD *)(v19 - 128) = v22 + v20 + 52;
  *(_DWORD *)(v19 - 124) = 1115729964 - v22;
  *(_QWORD *)(v19 - 112) = a14;
  *(_QWORD *)(v19 - 120) = a15;
  *(_DWORD *)(v19 - 104) = ((v20 + 363) ^ 0xFFFC3D7D ^ v21) - v22 + ((2 * v21) & 0xFFF87EBC) + 1843908526;
  v23 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E5B5B480 + (v20 ^ 0x25u)) - 8))(v19 - 128);
  return (*(uint64_t (**)(uint64_t))(v18
                                            + 8
                                            * ((117 * ((int)((v20 ^ 0xF58536AB) + a12) <= -175819244)) ^ v20)))(v23);
}

void sub_1AC1D08BC()
{
  JUMPOUT(0x1AC1D07ACLL);
}

uint64_t sub_1AC1D08C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, int a11, int a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v17 = 3804331 * ((((2 * (v16 - 128)) | 0x661ADA48) - (v16 - 128) + 1290965724) ^ 0xCDD848D2);
  *(_QWORD *)(v16 - 120) = a14;
  *(_DWORD *)(v16 - 128) = (v14 + 863) ^ v17;
  *(_DWORD *)(v16 - 124) = v17
                         + ((a12 << 6) & 0xFF9FFBC0)
                         + ((((v14 - 35) | 0xBD) + 2144336704) ^ (32 * a12))
                         - 646452292;
  sub_1AC1BED60(v16 - 128);
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((506 * (*a10 - 1115729965 < ((v14 - 1) ^ 0x7FFFFDDDu))) ^ v14))
                            - 4))();
}

uint64_t sub_1AC1D099C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)(v16 - 112) = (v14 + 1412) ^ (535753261
                                         * ((2 * ((v16 - 128) & 0x6D555D0) - (v16 - 128) - 114644437) ^ 0xF3DEA404));
  *(_QWORD *)(v16 - 128) = a14;
  *(_QWORD *)(v16 - 120) = &STACK[0x4E242FFD6E716473];
  sub_1AC1AFE5C(v16 - 128);
  *(_QWORD *)(v16 - 120) = a14;
  *(_QWORD *)(v16 - 112) = a13;
  *(_DWORD *)(v16 - 128) = v14
                         + 108757529 * ((((v16 - 128) | 0x2946C5F8) - ((v16 - 128) & 0x2946C5F8)) ^ 0xC9DAA7D3)
                         + 973;
  v17 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E5B5B480 + (v14 ^ 0x2A9)) - 8))(v16 - 128);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15
                                                      + 8
                                                      * (((v14 + 107) ^ (*(_DWORD *)(v16 - 124) > (v14 + 1323451303))) & 1 | v14))
                                          - 4))(v17);
}

uint64_t sub_1AC1D0ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  uint64_t v16;
  int v17;
  int v18;

  if (a16 - 1115729964 >= 0)
    v18 = a16 - 1115729964;
  else
    v18 = ~(a16 - 1115729965);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v16
                                                      + 8
                                                      * ((1694
                                                        * ((int)((v18 ^ 0xFF8EFDBC)
                                                               + ((v17 - 11) ^ 0x42F1B0C2)
                                                               + ((2 * v18) & 0xFF1DFB78)
                                                               - 1115729965) > v17 - 702)) ^ (v17 - 11)))
                                          - 8))(3238230742);
}

uint64_t sub_1AC1D0B44(int a1)
{
  int v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((15 * (*(_DWORD *)(v2 + 4 * v4) == (v3 ^ (a1 + 945)))) ^ v1))
                            - 8))();
}

uint64_t sub_1AC1D0B74(uint64_t a1, int a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((1694 * (v3 - 1 + a2 > v4)) ^ v2)) - 8))();
}

uint64_t sub_1AC1D0BA0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;

  v3 = *v5;
  *(_DWORD *)(v2 - 112) = (v0 + 853) ^ (535753261
                                      * ((((2 * ((v2 - 128) ^ 0x7587E918)) | 0xC547EBD2)
                                        - ((v2 - 128) ^ 0x7587E918)
                                        + 492571159) ^ 0x9DD012DE));
  *(_QWORD *)(v2 - 128) = v1;
  *(_QWORD *)(v2 - 120) = v3;
  return sub_1AC1AFE5C(v2 - 128);
}

void sub_1AC1D0F44(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) - 1178560073 * (a1 ^ 0xBA947862);
  __asm { BR              X11 }
}

uint64_t sub_1AC1D0FE8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * ((((v0 - 1345325482) & 0x50300C6E ^ 0x41A) * (v1 != 0)) ^ (v0 + 1726)))
                            - ((v0 - 4) | 4u)
                            + 323))();
}

uint64_t sub_1AC1D1048()
{
  int v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _BOOL4 v7;

  v5 = (*(_DWORD *)(v2 + 16) ^ v0) - 411264130;
  v7 = ((((v1 - 907) | 0x40A) - 1162) & *(_DWORD *)(v3 - 0x55F9EC3874D1DF2BLL)) != 0 || v5 > 0xFFFFFFBE;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((28 * v7) ^ v1)) - (v1 - 883) + 141))();
}

uint64_t sub_1AC1D10C8@<X0>(uint64_t (*a1)(unsigned int *)@<X8>, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  v12 = 3804331 * ((2 * (&a3 & 0x4D71FD88) - &a3 + 848167539) ^ 0x4C5B2785);
  a3 = v12 + v10 - 258529134;
  a4 = v12 + v11 - 668;
  a7 = v12 + 1265511613;
  a5 = v7;
  a6 = v8;
  v13 = a1(&a3);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * ((1019
                                                        * (*(_DWORD *)(v8 - 0x55F9EC3874D1DF27) == ((17 * ((v11 + 707076804) & 0xD5DAD9F7 ^ 0x172)) ^ 0x773DA615))) ^ v11))
                                          - 8))(v13);
}

uint64_t sub_1AC1D11A4()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  v3 = v1 - ((((v2 + 911030746) & 0x49B2C3E7) + 2 * v1 + 1324955191) & 0x704F5C92) - 1616623096;
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((52
                                * (((2 * v3) & 0xF03FE79A ^ 0x700F4492) + (v3 ^ 0xC0385D84) - 402677772 == 1612682177)) ^ v2)))();
}

uint64_t sub_1AC1D1240()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(v2
                                                     + 8
                                                     * ((447 * ((v1 + v0 - 2015359949) > 7)) ^ (v3 + 315)))
                                         - 8))((v3 - 650));
}

uint64_t sub_1AC1D1288()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((((((unint64_t)(v2 - v0) < 0x20) ^ (((v1 + 47) & 0x7A) + 69)) & 1)
                                          * (((v1 - 1570418385) & 0x5D9AAF7A ^ 0x591) + 694)) ^ (v1 - 1570418385) & 0x5D9AAF7A))
                            - 4))();
}

uint64_t sub_1AC1D12DC(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((27 * (v3 < ((3 * (a3 ^ 0x3C2)) ^ 0x167u))) ^ a3))
                            - (a3 + 516)
                            + 1455))();
}

uint64_t sub_1AC1D131C()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;

  v7.i64[0] = 0xEAEAEAEAEAEAEAEALL;
  v7.i64[1] = 0xEAEAEAEAEAEAEAEALL;
  v8.i64[0] = 0x7575757575757575;
  v8.i64[1] = 0x7575757575757575;
  v9 = v3 + ((v4 - 501372488) & 0x1DE25599 ^ (v1 + 1010));
  v10 = vrev64q_s8(*(int8x16_t *)(v5 + v9 - 15));
  v11 = vextq_s8(v10, v10, 8uLL);
  v12 = vrev64q_s8(*(int8x16_t *)(v5 + v9 - 31));
  v13 = vextq_s8(v12, v12, 8uLL);
  v14 = v0 + v9;
  v15 = vrev64q_s8(vaddq_s8(vsubq_s8(v11, vandq_s8(vaddq_s8(v11, v11), v7)), v8));
  *(int8x16_t *)(v14 - 15) = vextq_s8(v15, v15, 8uLL);
  v16 = vrev64q_s8(vaddq_s8(vsubq_s8(v13, vandq_s8(vaddq_s8(v13, v13), v7)), v8));
  *(int8x16_t *)(v14 - 31) = vextq_s8(v16, v16, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((51 * ((v2 & 0xFFFFFFE0) != 32)) ^ (v4 + 1624))) - 4))();
}

void sub_1AC1D13D0()
{
  JUMPOUT(0x1AC1D134CLL);
}

void sub_1AC1D13DC()
{
  _DWORD *v0;

  *v0 = -2000486839;
}

void sub_1AC1D18D4(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD v9[2];
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = 1374699841 * (((a1 | 0x3B067EF8) - (a1 & 0x3B067EF8)) ^ 0x56F266F1);
  v2 = *(_DWORD *)(a1 + 4) ^ v1;
  v3 = *(_DWORD *)(a1 + 24) ^ v1;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_DWORD *)a1 - v1 - 2 * ((*(_DWORD *)a1 - v1 + 81407080) & 0x6DA0A4DD ^ (*(_DWORD *)a1 - v1) & 4);
  v8 = 3804331 * ((2 * (v9 & 0x765B1DE0) - v9 + 161800734) ^ 0x7771C7E8);
  v13 = v2 - v8 + 1695026878;
  v14 = v8 ^ (v3 - 783056149);
  v11 = v5;
  v12 = v4;
  v9[0] = v6;
  v9[1] = v6;
  v15 = (v7 + 1920651585) ^ v8;
  sub_1AC1F4BD0((uint64_t)v9);
  __asm { BR              X8 }
}

uint64_t sub_1AC1D1A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unint64_t *a12, char a13, int a14, uint64_t a15, int a16)
{
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  uint64_t v26;

  v24 = *(_BYTE *)(v16 + 48) ^ v18;
  v25 = 1759421093 * ((((2 * &a11) | 0x139BAC78) - &a11 - 164484668) ^ 0xBAB06668);
  a15 = v22;
  a13 = (v24 - 30) ^ (-91 * ((((2 * &a11) | 0x78) - &a11 - 60) ^ 0x68));
  a12 = &STACK[0x7F69814B0519E5A3];
  a14 = v23 + v25 - 419073960;
  a16 = v21 - v25 + 379;
  v26 = ((uint64_t (*)(int *))(*(_QWORD *)(v19 + 8 * (v21 ^ 0x2A4)) - 12))(&a11);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20 + 8 * ((117 * (a11 == (v21 ^ 0x8D ^ (v17 + 403)))) ^ v21))
                                          - 12))(v26);
}

uint64_t sub_1AC1D1B20()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((100 * (v1 - 1983678581 < ((v0 + 368) | 0x308u) - 1837)) ^ v0))
                            - 8))();
}

uint64_t sub_1AC1D1B60@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  a4 = (v10 - 1370) ^ (1374699841
                     * ((((2 * &a4) | 0x3A443308) - &a4 + 1658709628) ^ 0xF0D6018D));
  a6 = a1;
  a7 = a3;
  v11 = ((uint64_t (*)(unsigned int *))(*(_QWORD *)(v8 + 8 * (v10 ^ 0x748)) - 12))(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v9
                                                      + 8
                                                      * (((a5 != v7) * (((v10 - 734165101) & 0x2BC2737F) - 569)) ^ v10))
                                          - 8))(v11);
}

uint64_t sub_1AC1D1C04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  _DWORD v6[2];
  uint64_t v7;

  v6[1] = v2
        + 535753261
        * ((837786014 - (v6 ^ 0xC34CDF0 | 0x31EF999E) + (v6 ^ 0xC34CDF0 | 0xCE106661)) ^ 0xC8D0A5BE)
        - 168;
  v7 = a1;
  result = ((uint64_t (*)(_DWORD *))(*(_QWORD *)(v3 + 8 * (v2 ^ 0x22Eu)) - 12))(v6);
  *(_DWORD *)(v1 + 52) = v4;
  return result;
}

void sub_1AC1D1CF8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) + 1759421093 * (((a1 | 0x9EBEB665) - a1 + (a1 & 0x6141499A)) ^ 0x2DC30631);
  __asm { BR              X14 }
}

uint64_t sub_1AC1D1DA4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * ((4072 * (*(_DWORD *)(*(_QWORD *)(a1 + 8) + v4) != v3)) ^ (v1 + 1308)))
                            - ((((v1 + 1308) ^ 0x707u) + 441 + 55) ^ (3 * ((v1 + 1308) ^ 0x707u)))))();
}

uint64_t sub_1AC1D1DEC()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  return (*(uint64_t (**)(void))(v0
                              + 8
                              * (int)((126 * (((((v2 - 1115731321) ^ v2 ^ 0x4Du) + v3) * (v1 - 1115729964)) >> 31)) ^ v2)))();
}

uint64_t sub_1AC1D1E30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _QWORD v5[2];
  unsigned int v6;
  uint64_t v7;

  v5[0] = v1;
  v5[1] = a1;
  v7 = v1;
  v6 = v3 + 1225351577 * (v5 ^ 0x239AD816) + 148;
  return (*(uint64_t (**)(_QWORD *))(v2 + 8 * (v3 - 699)))(v5);
}

void sub_1AC1D1F68(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) - 1224239923 * ((a1 & 0x9A8552A9 | ~(a1 | 0x9A8552A9)) ^ 0x97C95081);
  __asm { BR              X10 }
}

uint64_t sub_1AC1D2020()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ (448 * (v2 == 0)))) - ((8 * v0) ^ 0x2620)))();
}

uint64_t sub_1AC1D2064@<X0>(uint64_t (*a1)(_DWORD *)@<X8>)
{
  int v1;
  _DWORD *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  _DWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v4 = 3804331 * ((((v6 | 0x7BD67590) ^ 0xFFFFFFFE) - (~v6 | 0x84298A6F)) ^ 0xFAFCAF99);
  v9 = v4 + 1270422385;
  v6[0] = v4 + 152734931;
  v6[1] = v4 + (v1 ^ 0x7FB) - 335;
  v7 = 0x74F0547AE6FE7488;
  v8 = v3;
  result = a1(v6);
  *v2 = *(_DWORD *)(v3 - 0x55F9EC3874D1DF27);
  return result;
}

void U4HBs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  int v8;

  if (a1)
    v5 = a2 == 0;
  else
    v5 = 1;
  v8 = !v5 && a4 != 0 && a5 != 0;
  __asm { BR              X9 }
}

uint64_t sub_1AC1D2708(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, int a18)
{
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  *a4 = 0;
  *a5 = 0;
  a17 = (535753261 * ((2 * (&a17 & 0x59698DE8) - &a17 + 647393808) ^ 0x2C627C3F)) ^ 0xE1F2694A;
  v21 = sub_1AC1F43A8(&a17);
  return (*(uint64_t (**)(uint64_t))(v20 + 8 * ((106 * (a18 == v19)) ^ v18)))(v21);
}

uint64_t sub_1AC1D27B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, int a18, int a19, unsigned int a20)
{
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v22 = 1225351577 * ((2 * (&a17 & 0x4A650948) - &a17 + 899348149) ^ 0x16002EA3);
  a19 = v22 ^ 0x4ED7E0EF;
  a20 = v22 + 1461415967;
  LODWORD(a17) = v22 + 1166651523;
  HIDWORD(a17) = v22 ^ 0x22C;
  (*(void (**)(unint64_t **))(v21 + 360))(&a17);
  a19 = 1084 - 460628867 * (&a17 ^ 0x4C96827D);
  a17 = &STACK[0x5DFEEBD0571B6242];
  sub_1AC1C27D8((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8 * ((1238 * (a18 == 2000528784)) ^ 0x2A9u)))(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10);
}

uint64_t sub_1AC1D28AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, int a20,uint64_t a21)
{
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;

  v26 = 1178560073 * ((2 * (&a17 & 0xFE33470) - &a17 + 1880935304) ^ 0xCA88B3EA);
  a18 = v26 + 1510368783 * v23 + 858567209;
  a19 = a13;
  a20 = v26 ^ 0x41F;
  ((void (*)(int *))(*(_QWORD *)(v25 + 576) - 8))(&a17);
  v27 = 1178560073 * ((&a17 - 1111803618 - 2 * (&a17 & 0xBDBB391E)) ^ 0x72F417C);
  a19 = a13;
  a21 = v21;
  a18 = v27 + 327;
  a20 = v27 ^ ((v22 ^ 0x38C37F6B) - 541072170 + ((2 * v22) & 0x7186FED6));
  v28 = ((uint64_t (*)(int *))(*(_QWORD *)(v25 + 1160) - 8))(&a17);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24 + 8 * ((51 * (a17 == 2000528784)) ^ 0x459u)) - 12))(v28);
}

uint64_t sub_1AC1D2A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t *a18, unsigned int a19, int a20,uint64_t a21,int a22,int a23)
{
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;

  if (a12 < 0x16C268B8)
    v27 = 150565725;
  else
    v27 = 150565726;
  v28 = 628203409 * (((&a18 | 0x8624EE2B) - (&a18 & 0x8624EE2B)) ^ 0x4ACE218);
  a18 = &STACK[0x4414279470ECFEA6];
  a21 = a14;
  a23 = v28 ^ 0x4CDCCD62;
  a19 = v27 - v28;
  a20 = v24 - v28 - 2024874196;
  v29 = sub_1AC1F4558((uint64_t)&a18);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v26 + 8 * (((a22 == (v23 ^ (v25 + 425))) * (v24 - 815)) ^ v24))
                                          - 12))(v29);
}

uint64_t sub_1AC1D2AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12)
{
  unsigned int v12;
  int v13;
  uint64_t v14;

  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8 * (((33 * ((v13 - 524) ^ 0x244) - 38) * (a12 < v12)) ^ (v13 - 524))))(a1);
}

uint64_t sub_1AC1D2B70@<X0>(uint64_t a1@<X8>, char *a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, unsigned int a11, char *a12, _BYTE *a13, uint64_t a14, unsigned int a15)
{
  int v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(unsigned int *);
  int v21;
  uint64_t v22;

  a11 = (v15 - 124) ^ ((((&a11 | 0xADF4F21E) - (&a11 & 0xADF4F21E)) ^ 0xC000EA17) * v16);
  v21 = (v15 - 1827068644) & 0x6CE6D9BF;
  a12 = &a10 + a1;
  a13 = a5;
  v20(&a11);
  a13 = v17;
  a14 = v18;
  a12 = a5;
  a15 = (v21 - 137) ^ (1225351577
                     * (((&a11 | 0xD904AA4B) - &a11 + (&a11 & 0x26FB55B0)) ^ 0xFA9E725D));
  ((void (*)(unsigned int *))*(&off_1E5B5B480 + v21 - 245))(&a11);
  a11 = (v21 + 168) ^ (1374699841
                     * ((((2 * &a11) | 0xD066AE2C) - &a11 + 399288554) ^ 0x85C74F1F));
  a12 = a2;
  a13 = a5;
  v20(&a11);
  a11 = (v21 - 110) ^ (1755732067
                     * (((&a11 | 0x41B60507) + (~&a11 | 0xBE49FAF8)) ^ 0x9F70B8DD));
  a12 = a5;
  v22 = sub_1AC1BE024((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * ((1931 * ((_DWORD)a13 == 2000528784)) ^ v21))
                                          - (v21 ^ 0x570u)
                                          + 1101))(v22);
}

uint64_t sub_1AC1D2D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v15;
  int v16;
  uint64_t v17;

  return ((uint64_t (*)(void))(*(_QWORD *)(v17 + 8 * (((a15 == v16) * ((v15 + 816) ^ 0x2CD)) | v15)) - 12))();
}

uint64_t sub_1AC1D2D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  int v14;
  int v15;
  int v16;
  uint64_t v17;

  return ((uint64_t (*)(void))(*(_QWORD *)(v17 + 8 * (((a14 != v16) * (v14 ^ 0x413)) ^ v15)) - 12))();
}

uint64_t sub_1AC1D2D8C@<X0>(unsigned int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;
  _BOOL4 v4;

  v4 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_1E5B5B480 + (v1 ^ 0x1CB)))((v2 + ((v1 + 816) ^ 0x170) - 1321) ^ a1, 1812636846) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1454 * v4) ^ v1)) - 12))();
}

uint64_t sub_1AC1D2DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  int v14;
  int v15;
  uint64_t v16;
  int v17;

  v17 = (a14 ^ v15)
      - (((a14 ^ v15) << ((v14 + 110) & 0xEB ^ 0x82)) & (((v14 - 542894064) & 0x205BE3EF) + 1353324361))
      - 1470821319;
  return ((uint64_t (*)(void))(*(_QWORD *)(v16
                                        + 8
                                        * ((118
                                          * (((2 * v17) & 0xE76FF3F6 ^ 0x402A1072) + (v17 ^ 0x5BE2F5C2) + 1870557120 != 1664510395)) ^ v14))
                            - 8))();
}

uint64_t sub_1AC1D2EAC(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((a2 + v3 + 206046725 >= ((v2 - 689257497) ^ 0xD6EAC762))
                                          * ((v2 - 1363540900) & 0x5145FF3E ^ 0x705)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC1D2F2C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((135 * (v3 - a1 >= ((a3 - 1389) ^ 0x191uLL))) ^ a3))
                            - ((a3 - 687933347) & 0xFFEBC7EE ^ 0xD6EAC766)))();
}

uint64_t sub_1AC1D2F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  unsigned int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * ((((((v5 + a5 + 886) ^ (v6 < 0x20)) & 1) == 0)
                                          * (((a5 - 1500080667) & 0x5969697D) - 210)) ^ a5))
                            - 12))();
}

uint64_t sub_1AC1D2FD4(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v13 = a2 + v11 + a4 + ((v10 + 831297621) & 0xF788A7E9);
  v14 = *(_OWORD *)(v8 + v13 - 15);
  v15 = *(_OWORD *)(v8 + v13 - 31);
  v16 = a1 + v13;
  *(_OWORD *)(v16 - 15) = v14;
  *(_OWORD *)(v16 - 31) = v15;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * (((v9 & 0xFFFFFFE0) != 32) | (a8 + v10 + 920))) - 12))();
}

void sub_1AC1D3038()
{
  JUMPOUT(0x1AC1D2FFCLL);
}

uint64_t sub_1AC1D3044(uint64_t a1)
{
  int v1;
  int v2;
  _QWORD *v3;
  int v4;
  void (*v5)(_BYTE *);
  int v6;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[4];
  unsigned int v12;
  uint64_t v13;

  *v3 = a1;
  *v8 = v2;
  v6 = (v1 + 816) ^ 0x6F0;
  v13 = v9;
  v12 = v1
      + 816
      + 535753261 * ((2 * (v11 & 0x57823680) - v11 - 1468151430) ^ 0xA289C755)
      - 707;
  v5(v11);
  v13 = v10;
  v12 = v6 + 535753261 * ((((2 * v11) | 0x952C103E) - v11 + 896137185) ^ 0xC0620630) - 275;
  v5(v11);
  return v4 ^ 0x773DA590u;
}

void sub_1AC1D32E0(uint64_t a1)
{
  int v1;

  v1 = (*(_DWORD *)(a1 + 8) + 235795823 * ((a1 - 514923366 - 2 * (a1 & 0xE14EE49A)) ^ 0x75E3ADC3)) ^ 0x47E;
  __asm { BR              X6 }
}

uint64_t sub_1AC1D34DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((a8 + 1 == ((v8 - 898) ^ a5)) * ((2 * v8) ^ a6)) | v8)) - 8))();
}

uint64_t sub_1AC1D3514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;

  *(_DWORD *)(a11 - 0x6C02322A16757C55) = 685447156 - v14;
  v20 = 108757529
      * ((((v19 - 136) ^ 0xE5FA149A | 0xBBDC5D56)
        - ((v19 - 136) ^ 0xE5FA149A)
        + (((v19 - 136) ^ 0xE5FA149A) & 0x4423A2A8)) ^ 0xBEBA2BE7);
  *(_DWORD *)(v19 - 120) = (v18 - 1169) ^ v20;
  *(_QWORD *)(v19 - 128) = v17;
  *(_DWORD *)(v19 - 136) = v20 ^ 0x8AD8EA4;
  sub_1AC1DC940((_DWORD *)(v19 - 136));
  v21 = 108757529 * ((((v19 - 136) | 0x56446835) - (v19 - 136) + ((v19 - 136) & 0xA9BB97C8)) ^ 0xB6D80A1E);
  *(_QWORD *)(v19 - 128) = v17;
  *(_DWORD *)(v19 - 120) = (((v15 << 6) & 0xFFF5FF80) + 1777676724 + (((v18 ^ 0x62D) - 327741) ^ (32 * v15))) ^ v21;
  *(_DWORD *)(v19 - 136) = v21 + v18 - 764;
  sub_1AC1C6CDC(v19 - 136);
  *(_DWORD *)(v19 - 120) = (v18 + 384) ^ (535753261
                                        * ((((v19 - 136) | 0x35ECD69F) - (v19 - 136) + ((v19 - 136) & 0xCA132960)) ^ 0x3F18D8B0));
  *(_QWORD *)(v19 - 136) = a14;
  *(_QWORD *)(v19 - 128) = &STACK[0x4E242FFD6E716463];
  sub_1AC1AFE5C(v19 - 136);
  *(_DWORD *)(v19 - 136) = v18
                         + 108757529 * ((((v19 - 136) | 0xEF1AAFD9) - ((v19 - 136) & 0xEF1AAFD9)) ^ 0xF86CDF2)
                         - 55;
  *(_QWORD *)(v19 - 128) = a14;
  *(_QWORD *)(v19 - 120) = v17;
  v22 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E5B5B480 + v18 - 1435) - 8))(v19 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v16
                                                      + 8
                                                      * ((115
                                                        * (*(_DWORD *)(v19 - 132) - 1323451850 >= 113 * (v18 ^ 0x62Du)
                                                                                                - 499759129)) ^ v18))
                                          - 4))(v22);
}

uint64_t sub_1AC1D3760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 - 136) = v13;
  *(_QWORD *)(v15 - 128) = v11;
  *(_DWORD *)(v15 - 120) = (v14 + 715) ^ (535753261
                                        * (((((v15 - 136) | 0xB3CEF78E) ^ 0xFFFFFFFE) - (~(v15 - 136) | 0x4C310871)) ^ 0x46C5065E));
  v16 = sub_1AC1AFE5C(v15 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v12
                                                      + 8
                                                      * ((600 * (a11 < ((v14 - 1562664534) & 0x5D245DFB) - 1152)) ^ v14))
                                          - 4))(v16);
}

uint64_t sub_1AC1D3800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  *(_DWORD *)(v19 - 120) = (v14 + 805) ^ (535753261
                                        * ((((v19 - 136) | 0x986620CE) - (v19 - 136) + ((v19 - 136) & 0x6799DF30)) ^ 0x92922EE1));
  *(_QWORD *)(v19 - 136) = a14;
  *(_QWORD *)(v19 - 128) = v18;
  sub_1AC1AFE5C(v19 - 136);
  v20 = 108757529 * ((((v19 - 136) | 0xECD3D58C) - (v19 - 136) + ((v19 - 136) & 0x132C2A70)) ^ 0xC4FB7A7);
  *(_DWORD *)(v19 - 120) = v20 ^ 0x69F03183;
  *(_DWORD *)(v19 - 136) = v20 + v14 - 343;
  *(_QWORD *)(v19 - 128) = v15;
  sub_1AC1C6CDC(v19 - 136);
  *(_DWORD *)(v19 - 136) = v14
                         + 108757529 * ((2 * ((v19 - 136) & 0x35BE1EB8) - (v19 - 136) - 901652153) ^ 0x2ADD836C)
                         + 366;
  *(_QWORD *)(v19 - 128) = a14;
  *(_QWORD *)(v19 - 120) = v15;
  v21 = v16(v19 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v17
                                                      + 8
                                                      * ((((*(_DWORD *)(v19 - 132) - 1323451850) < 0xD7503A15)
                                                        * (v14 + 733 + ((v14 - 1840559874) & 0x6DB4B6FE) - 2989)) ^ (v14 - 232)))
                                          - 8))(v21);
}

uint64_t sub_1AC1D39EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  int v12;
  uint64_t v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v13
                                        + 8
                                        * ((56
                                          * ((a12 ^ 0xBFAA66FF)
                                           + 2111831549
                                           + ((2 * a12) & 0x7F54CDFE)
                                           + ((v12 - 1757) ^ 0x4FE)
                                           + ((v12 - 1757) | 0x400)
                                           - 1032482302 < 0x7FFFFFFE)) ^ v12))
                            - 4))();
}

void sub_1AC1D4588(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 32) + 108757529 * (((a1 | 0xFA9FB8B3) - (a1 & 0xFA9FB8B3)) ^ 0x1A03DA98);
  __asm { BR              X9 }
}

void sub_1AC1D466C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void sub_1AC1D4BBC(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;

  v2 = (*(_DWORD *)(a2 + 4) - 2038179982) > 4;
  __asm { BR              X10 }
}

uint64_t sub_1AC1D4C1C()
{
  return 4294925278;
}

void zxcm2Qme0x(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X9 }
}

uint64_t sub_1AC1D4E08@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W8>)
{
  uint64_t v3;
  BOOL v4;
  int v5;

  if (a1)
    v4 = a2 == 0;
  else
    v4 = 0;
  v5 = !v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((158 * v5) ^ a3)) - 12))();
}

uint64_t sub_1AC1D4E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14)
{
  int v14;
  uint64_t v15;
  uint64_t v16;

  a13 = (535753261
       * ((((&a13 | 0x4F12C1A2) ^ 0xFFFFFFFE) - (~&a13 | 0xB0ED3E5D)) ^ 0xBA193072)) ^ 0xE1F2694A;
  v16 = sub_1AC1F43A8(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15 + 8 * ((1569 * (a14 == ((v14 + 606) ^ 0x27E))) ^ 0x27Eu))
                                          - 12))(v16);
}

uint64_t sub_1AC1D4EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, int a14, unsigned int a15)
{
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a15 = 1084
      - 460628867 * ((-1521014046 - (&a13 | 0xA5572AE2) + (&a13 | 0x5AA8D51D)) ^ 0x163E5760);
  a13 = &STACK[0x5DFEEBD0571B623A];
  sub_1AC1C27D8((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 + 8 * ((157 * (a14 == v15)) ^ v17))
                                                                                       - 12))(v18, v19, v20, v21, v22, v23);
}

uint64_t sub_1AC1D4F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14, uint64_t a15, unsigned int a16, uint64_t a17)
{
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v22 = 1178560073 * ((((2 * &a13) | 0x1B96C3AA) - &a13 + 1916050987) ^ 0x375F19B7);
  a16 = v22 ^ ((v18 ^ 0xDC87E5CF) + 1006337650 + ((2 * v18) & 0xB90FCB9E));
  a17 = v17;
  a14 = v22 + 327;
  a15 = a12;
  v23 = ((uint64_t (*)(int *))(*(_QWORD *)(v20 + 1160) - 8))(&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((25 * (a13 == ((v19 + 606) ^ 0x27E))) ^ 0x5E4u))
                                          - 4))(v23);
}

uint64_t sub_1AC1D5024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, unsigned int a14, int a15, uint64_t a16, int a17, int a18)
{
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  v21 = 628203409
      * (((&a13 | 0x56A0C086) - &a13 + (&a13 & 0xA95F3F78)) ^ 0xD428CCB5);
  a18 = v21 ^ 0x3C36ED2E;
  a13 = &STACK[0x4414279470ECFE96];
  a16 = a12;
  a14 = 150565725 - v21;
  a15 = v20 - v21 - 2024874591;
  v22 = sub_1AC1F4558((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19
                                                      + 8 * (((a17 == v18) * (((v20 ^ 0x5DE) + 1445) ^ 0x757)) ^ v20))
                                          - 11 * (v20 ^ 0x5DE)
                                          + 634))(v22);
}

uint64_t sub_1AC1D50FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, unsigned int a14, unint64_t *a15, uint64_t a16)
{
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  a14 = (v16 - 1038) ^ (1374699841
                      * ((2 * (&a14 & 0x17FF2B8) - &a14 - 25162428) ^ 0x9374154D));
  a15 = &STACK[0x33553D115EA78D32];
  a16 = a10;
  v20 = ((uint64_t (*)(unsigned int *))(*(_QWORD *)(v18 + 8 * (int)(v16 - 1404)) - 12))(&a14);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * ((55 * (a12 == v17)) ^ v16)) - 12))(v20);
}

uint64_t sub_1AC1D51C0()
{
  uint64_t v0;
  void (*v1)(unsigned int *);
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v14 = v8;
  v15 = 0x2ACAEB679FC7E46;
  v16 = v5
      - 108757529 * ((2 * (&v11 & 0x712D7700) - &v11 + 248678649) ^ 0xEE4EEAD2)
      + v6
      + 1151;
  v13 = v0;
  (*(void (**)(unsigned int *))(v4 + 8 * (v6 + v5)))(&v11);
  v11 = (v5 + v6 + 45) ^ (1755732067
                        * (((&v11 | 0x49B91C0F) - &v11 + (&v11 & 0xB646E3F0)) ^ 0x977FA1D4));
  v13 = v8;
  sub_1AC1BE024((uint64_t)&v11);
  v12 = v5 + v6 + (&v11 ^ 0xAF40E2F) * v3 + 264;
  v13 = v8;
  v1(&v11);
  v12 = ((v6 + 940917701) & 0x48C227F)
      + ((&v11 - 1554405098 - 2 * ((unint64_t)&v11 & 0xA359A916)) ^ 0xA9ADA739) * v3
      - 232;
  v13 = v10;
  v1(&v11);
  return v9 ^ v2;
}

void sub_1AC1D5364(uint64_t a1)
{
  int v1;
  _DWORD v2[2];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)a1 - 628203409 * (a1 ^ 0x82880C33);
  v3 = *(_QWORD *)(a1 + 8);
  v2[1] = (460628867
         * ((2 * ((v2 ^ 0xB8B0F087) & 0x6A3FC9C7) - (v2 ^ 0xB8B0F087) - 1782565320) ^ 0x61E644C2)) ^ (v1 - 376);
  sub_1AC1C80D0((uint64_t)v2);
  __asm { BR              X9 }
}

uint64_t sub_1AC1D548C@<X0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  _BOOL4 v6;

  v5 = (((v4 + v3) >> 4) & 0xBDBFDFA ^ 0xB9B6498)
     + (((v4 + v3) >> 5) ^ 0xB0304DB1)
     + 1066232885;
  v6 = v5 < v1 + (((v2 ^ 0x722) - 94389711) & 0x5A042B9) - 176461679;
  if (v1 > 0xA8494CD != v5 < 0xF57B6B32)
    v6 = v1 > 0xA8494CD;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((115 * v6) ^ v2 ^ 0x722))
                            - (((v2 ^ 0x722) - 1991377395) & 0x76B1FDFD ^ 0x1CDLL)))();
}

uint64_t sub_1AC1D555C@<X0>(uint64_t a1@<X8>)
{
  char v1;
  unsigned int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((985 * ((v1 & 0x1F ^ 2) != ((v2 - 201) ^ 0xF8))) ^ v2)) - 12))();
}

uint64_t sub_1AC1D5590@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v2;

  return (*(uint64_t (**)(void))(a2
                              + 8
                              * ((495
                                * (((a1 ^ (v2 + ((a1 - 140441858) & 0x85EFDBFu) - 1242695355 < 0x7FFFFFFF)) & 1) == 0)) ^ a1)))();
}

void sub_1AC1D5600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  char v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;

  v17 = *(_QWORD *)(v14 - 0x4E242FFD6E71642BLL);
  v18 = ((a8 - 789) ^ (v11 - 607) ^ *(_DWORD *)(v17 + 4 * (v16 - 1))) >> v9;
  v19 = 4 * (v8 - 1242693892);
  *(_DWORD *)(v17 + v19) = v18 + v11 - (v12 & (2 * v18));
  v20 = v10 - (*(_DWORD *)(*(_QWORD *)(v14 - 0x4E242FFD6E71642BLL) + v19) == v11);
  if ((*v13 + v15) >= 0x7FFFFFFF)
    v20 = -2063507368 - v20;
  *v13 = v20;
}

void sub_1AC1D58D4(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 - 1755732067 * ((((2 * (_DWORD)a1) | 0xA1541F8) - (_DWORD)a1 - 84582652) ^ 0xDBCC1D27);
  __asm { BR              X9 }
}

uint64_t sub_1AC1D596C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * (v0 - 373)))(200, 2354554103) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((1200 * v3) ^ v0)) - 8))();
}

uint64_t sub_1AC1D59AC(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  int v8;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 8 * (v3 - 474)))(a1, 0);
  if ((_DWORD)result == 16)
  {
    --v2;
    goto LABEL_7;
  }
  if ((_DWORD)result == 12)
  {
LABEL_7:
    result = (*(uint64_t (**)(uint64_t))(v4 + 8 * (v3 - 573)))(a1);
    v8 = v2;
    goto LABEL_8;
  }
  if ((_DWORD)result)
  {
    v2 -= 2;
    goto LABEL_7;
  }
  *v5 = a1;
  v8 = 1336294772;
LABEL_8:
  *(_DWORD *)(v1 + 16) = v8 - 1336294772;
  return result;
}

void sub_1AC1D5A2C(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = qword_1EEC7B1D8 - qword_1EEC7B418 - (_QWORD)&v3;
  qword_1EEC7B418 = 536075833 * v2 - 0x793AB71194CDC804;
  qword_1EEC7B1D8 = 536075833 * (v2 ^ 0x86C548EE6B3237FCLL);
  ((void (*)(char *, void (*)()))*(&off_1E5B5B480
                                            + ((57
                                                                             * ((qword_1EEC7B1D8 + qword_1EEC7B418) ^ 0xFC)) ^ byte_1AC3D0EB0[byte_1AC3CDD40[(57 * ((qword_1EEC7B1D8 + qword_1EEC7B418) ^ 0xFC))] ^ 0x61])
                                            + 145))((char *)*(&off_1E5B5B480+ ((57 * (qword_1EEC7B418 ^ 0xFC ^ qword_1EEC7B1D8)) ^ byte_1AC3D51B0[byte_1AC3D0FB0[(57 * (qword_1EEC7B418 ^ 0xFC ^ qword_1EEC7B1D8))] ^ 0xB2])+ 2)- 8, sub_1AC1F4A94);
  __asm { BR              X9 }
}

uint64_t sub_1AC1D5B48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((469 * (**(_QWORD **)(v1 + 1840) != 0)) ^ 0x4DCu)) - 4))();
}

uint64_t sub_1AC1D5B8C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(v1 + 1176))(v0);
}

void sub_1AC1D5BB4(uint64_t a1)
{
  int v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x4E242FFD6E71642FLL);
  v4 = v2 - 1115729964;
  v3 = v2 - 1115729964 < 0;
  v5 = 1115729964 - v2;
  if (!v3)
    v5 = v4;
  v1 = ((*(_DWORD *)a1 ^ (1178560073 * ((-2 - ((a1 | 0xBD34F701) + (~(_DWORD)a1 | 0x42CB08FE))) ^ 0xF85F709C)))
      + 423254572) & 0xE6C5A77E;
  __asm { BR              X12 }
}

uint64_t sub_1AC1D5CF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, unsigned int a6)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;

  return (*(uint64_t (**)(void))(v7 + 8 * (((*(_DWORD *)(*v8 + 4 * a6) != v6) * ((a5 ^ a3) + 436)) ^ a5)))();
}

void sub_1AC1D5D24()
{
  JUMPOUT(0x1AC1D5CBCLL);
}

uint64_t sub_1AC1D5D34(uint64_t result)
{
  *(_DWORD *)(result + 4) = 867425885;
  return result;
}

void sub_1AC1D5DD0(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) ^ (628203409 * ((-2 - ((~(_DWORD)a1 | 0x16878567) + (a1 | 0xE9787A98))) ^ 0x940F8954));
  __asm { BR              X11 }
}

uint64_t sub_1AC1D5F08()
{
  int v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v5;

  v5 = *(_DWORD *)(v2 + 48) + v0 != 105312208 && (*(_QWORD *)(v2 + 56) | *(_QWORD *)(v2 + 32)) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((2046 * v5) ^ (v1 - 1091))) - v1 + 1989))();
}

uint64_t sub_1AC1D5F5C()
{
  unsigned int v0;
  _QWORD *v1;
  uint64_t v2;
  _BOOL4 v4;

  v4 = v1[8] != 0x4492684F92B2B92DLL && (v1[5] | v1[2]) != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)((v4 * ((9 * (v0 ^ 0x397)) ^ 0x14C)) ^ v0)) - (v0 ^ 0x382)))();
}

uint64_t sub_1AC1D5FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4
                                                              + 8
                                                              * (int)(((((29 * (v3 ^ 0x130)) ^ 0xFFFFFC03) + v3 + 1276)
                                                                     * (v2 == 0)) ^ v3)))(a1, a2, 535753261);
}

uint64_t sub_1AC1D60DC@<X0>(int a1@<W0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  void (*v36)(uint64_t);
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  void (*v48)(uint64_t);
  void (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;

  v34 = v27 ^ 0x538;
  v35 = ((2 * ((v33 - 144) & 0x2BEDAFC8) - (v33 - 144) + 1410486324) ^ 0x5EE65E1B) * a2;
  *(_DWORD *)(v33 - 120) = a1 - v35 + (v27 ^ 0x363E60E);
  *(_DWORD *)(v33 - 144) = v35 + v27 - 476;
  *(_QWORD *)(v33 - 136) = a3;
  *(_QWORD *)(v33 - 128) = v25;
  v50 = a4 + v26;
  ((void (*)(uint64_t))(*(_QWORD *)(v31 + 8 * (v27 ^ 0x6B7)) - 4))(v33 - 144);
  *(_QWORD *)(v33 - 128) = a22;
  *(_QWORD *)(v33 - 144) = a21;
  *(_DWORD *)(v33 - 136) = v34
                         + 328
                         - 235795823 * ((2 * ((v33 - 144) & 0x3BC4D040) - (v33 - 144) + 1144729532) ^ 0xD09666E5);
  v49 = *(void (**)(uint64_t))(v31 + 8 * (v34 - 823));
  v49(v33 - 144);
  HIDWORD(a9) = v34 + 280;
  HIDWORD(a12) = 2 * (v33 - 144);
  *(_QWORD *)(v33 - 120) = a21;
  *(_QWORD *)(v33 - 112) = a20;
  *(_DWORD *)(v33 - 128) = (v34 + 280) ^ (1178560073
                                        * (((HIDWORD(a12) | 0x49807B6A) - (v33 - 144) + 1530905163) ^ 0x1E5445D7));
  *(_QWORD *)(v33 - 144) = v30;
  *(_QWORD *)(v33 - 136) = a22;
  v48 = (void (*)(uint64_t))(*(_QWORD *)(v31 + 8 * (v34 ^ 0x3A7)) - 12);
  v48(v33 - 144);
  HIDWORD(v47) = v34 + 466;
  *(_QWORD *)(v33 - 136) = v28;
  *(_QWORD *)(v33 - 128) = a22;
  *(_DWORD *)(v33 - 120) = v34
                         + 466
                         + 1225351577 * ((((v33 - 144) | 0xAC089FBB) - ((v33 - 144) & 0xAC089FBB)) ^ 0x8F9247AD);
  *(_QWORD *)(v33 - 144) = v30;
  *(_QWORD *)(v33 - 112) = a21;
  *(_QWORD *)(v33 - 104) = v30;
  v36 = (void (*)(uint64_t))(*(_QWORD *)(v31 + 8 * (v34 - 795)) - 4);
  v36(v33 - 144);
  LODWORD(v47) = v34 - 121;
  *(_QWORD *)(v33 - 120) = a22;
  *(_QWORD *)(v33 - 112) = a23;
  *(_QWORD *)(v33 - 136) = v30;
  *(_QWORD *)(v33 - 128) = a21;
  *(_DWORD *)(v33 - 104) = v34
                         - 121
                         + 108757529
                         * ((680532522 - ((v33 - 144) | 0x28901A2A) + ((v33 - 144) | 0xD76FE5D5)) ^ 0x37F387FE);
  *(_QWORD *)(v33 - 144) = v30;
  v51 = v30;
  v37 = (void (*)(uint64_t))(*(_QWORD *)(v31 + 8 * (v34 ^ 0x3FC)) - 8);
  v37(v33 - 144);
  *(_DWORD *)(v33 - 136) = v34
                         + 328
                         - 235795823
                         * (((((v33 - 144) ^ 0x41828210 | 0xA6783DCE) ^ 0xFFFFFFFE)
                           - ((v33 - 144) ^ 0x201809C0 | 0x5987C231)) ^ 0xAC83D76);
  *(_QWORD *)(v33 - 144) = a16;
  *(_QWORD *)(v33 - 128) = a22;
  v49(v33 - 144);
  *(_QWORD *)(v33 - 120) = a16;
  *(_QWORD *)(v33 - 112) = a20;
  *(_DWORD *)(v33 - 128) = (v34 + 280) ^ (1178560073
                                        * ((((v33 - 144) | 0x9960F274) - ((v33 - 144) & 0x9960F274)) ^ 0x23F48A16));
  *(_QWORD *)(v33 - 144) = v32;
  *(_QWORD *)(v33 - 136) = a22;
  v48(v33 - 144);
  *(_DWORD *)(v33 - 120) = v34
                         + 466
                         + 1225351577
                         * ((((v33 - 144) | 0x47D19041) - (v33 - 144) + ((v33 - 144) & 0xB82E6FB8)) ^ 0x644B4857);
  *(_QWORD *)(v33 - 144) = v32;
  *(_QWORD *)(v33 - 136) = v28;
  *(_QWORD *)(v33 - 128) = a22;
  *(_QWORD *)(v33 - 112) = a16;
  *(_QWORD *)(v33 - 104) = v32;
  v36(v33 - 144);
  *(_QWORD *)(v33 - 128) = a16;
  *(_QWORD *)(v33 - 120) = a22;
  *(_DWORD *)(v33 - 104) = v34
                         - 121
                         + 108757529 * (((HIDWORD(a12) | 0x329BD094) - (v33 - 144) - 424536138) ^ 0xF9D18A61);
  *(_QWORD *)(v33 - 144) = v32;
  *(_QWORD *)(v33 - 136) = v32;
  *(_QWORD *)(v33 - 112) = a14;
  v37(v33 - 144);
  *(_DWORD *)(v33 - 128) = v34
                         - 1759421093
                         * ((((v33 - 144) | 0xE121AD27) - (v33 - 144) + ((v33 - 144) & 0x1EDE52D8)) ^ 0x525C1D73)
                         - 100;
  *(_QWORD *)(v33 - 144) = v51;
  *(_QWORD *)(v33 - 136) = v32;
  ((void (*)(uint64_t))(*(_QWORD *)(v31 + 8 * (v34 ^ 0x37E)) - 8))(v33 - 144);
  *(_QWORD *)(v33 - 144) = v32;
  *(_DWORD *)(v33 - 132) = v34
                         - 628203409 * ((((v33 - 144) | 0x3595A7F1) + (~(v33 - 144) | 0xCA6A580E)) ^ 0xB71DABC3)
                         + 248;
  sub_1AC1C3488(v33 - 144);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, void (*)(uint64_t), uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 + 8 * ((77 * (*(_DWORD *)(v33 - 136) != 1385840824)) ^ v34)) - (v34 + 1172) + 1989))(v38, v39, v40, v41, v42, v43, v44, v45, a5, a6, v47, v48, a9, v49, *(_QWORD *)(v31 + 8 * (v34 - 704)) - 4, a12, (v34 + 1172), a14, v50,
           a16,
           a17,
           a18,
           a19,
           v36,
           a21,
           a22,
           v51,
           a24,
           a25);
}

uint64_t sub_1AC1D6604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t), uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void (*a24)(uint64_t),uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  void (*v37)(uint64_t);
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *(_DWORD *)(v42 - 128) = (v38 - 1768) ^ (1755732067
                                         * ((2 * ((v42 - 144) & 0x67313C18) - (v42 - 144) + 416203751) ^ 0xC6087E3C));
  *(_QWORD *)(v42 - 144) = v39;
  *(_QWORD *)(v42 - 136) = v41;
  v37(v42 - 144);
  *(_QWORD *)(v42 - 144) = v41;
  *(_QWORD *)(v42 - 136) = a37;
  *(_DWORD *)(v42 - 120) = v38
                         - 706
                         + 1225351577
                         * ((((v42 - 144) | 0x15B013E7) - (v42 - 144) + ((v42 - 144) & 0xEA4FEC18)) ^ 0x362ACBF1);
  *(_QWORD *)(v42 - 128) = a26;
  *(_QWORD *)(v42 - 112) = v39;
  *(_QWORD *)(v42 - 104) = v41;
  a24(v42 - 144);
  *(_QWORD *)(v42 - 144) = v41;
  *(_QWORD *)(v42 - 136) = v41;
  *(_QWORD *)(v42 - 112) = v39;
  *(_QWORD *)(v42 - 104) = a19;
  *(_QWORD *)(v42 - 128) = a26;
  *(_DWORD *)(v42 - 120) = v38
                         - 706
                         + 1225351577 * ((((v42 - 144) | 0xE8BCBD2F) - ((v42 - 144) & 0xE8BCBD2F)) ^ 0xCB266539);
  a24(v42 - 144);
  *(_QWORD *)(v42 - 128) = a25;
  *(_DWORD *)(v42 - 136) = v38
                         - 535753261
                         * ((-433589838 - ((v42 - 144) | 0xE627F1B2) + ((v42 - 144) | 0x19D80E4D)) ^ 0x132C0062)
                         + 426521020;
  *(_QWORD *)(v42 - 144) = v41;
  sub_1AC1F4470(v42 - 144);
  *(_DWORD *)(v42 - 128) = (v38 - 1768) ^ (1755732067
                                         * ((((v42 - 144) | 0x39868463) - (v42 - 144) + ((v42 - 144) & 0xC6797B98)) ^ 0xE74039B8));
  *(_QWORD *)(v42 - 144) = a27;
  *(_QWORD *)(v42 - 136) = v41;
  a15(v42 - 144);
  *(_DWORD *)(v42 - 128) = (v38 - 39) ^ (535753261
                                       * ((2 * ((v42 - 144) & 0x38600698) - (v42 - 144) + 1201666407) ^ 0x4D6BF748));
  *(_QWORD *)(v42 - 144) = v41;
  *(_QWORD *)(v42 - 136) = a27;
  v43 = sub_1AC1AFE5C(v42 - 144);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v40
                                                      + 8
                                                      * (((v38 - 292 + ((v38 - 301) | 9) - 3407) * (a23 != 0)) ^ (v38 - 1409)))
                                          - 8))(v43);
}

uint64_t sub_1AC1D6864()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v4 = 108757529 * ((((2 * (v3 - 144)) | 0x48D9DF62) - (v3 - 144) - 611119025) ^ 0xC4F08D9A);
  *(_QWORD *)(v3 - 128) = v8;
  *(_QWORD *)(v3 - 144) = v2;
  *(_DWORD *)(v3 - 136) = ((((v0 - 807) | 8) ^ 0x78AA7781) + v7) ^ v4;
  *(_DWORD *)(v3 - 132) = v0 - v4 - 535;
  result = ((uint64_t (*)(uint64_t))((char *)*(&off_1E5B5B480 + v0 - 1574) - 12))(v3 - 144);
  *(_DWORD *)(v6 - 0x4492684F92B2B92DLL) = v7;
  *(_DWORD *)(v1 + 24) = 2000528784;
  return result;
}

void sub_1AC1D69B4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 24) - 535753261 * (a1 ^ 0xAF40E2F);
  if (*(_DWORD *)(*(_QWORD *)a1 - 0x4E242FFD6E71642FLL) - 1115729964 >= 0)
    v3 = *(_DWORD *)(*(_QWORD *)a1 - 0x4E242FFD6E71642FLL) - 1115729964;
  else
    v3 = 1115729964 - *(_DWORD *)(*(_QWORD *)a1 - 0x4E242FFD6E71642FLL);
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 - 0x4E242FFD6E71642FLL) - 1115729964 >= 0)
    v4 = *(_DWORD *)(v2 - 0x4E242FFD6E71642FLL) - 1115729964;
  else
    v4 = 1115729964 - *(_DWORD *)(v2 - 0x4E242FFD6E71642FLL);
  v6 = *(_QWORD *)a1;
  v7 = v1 - 628203409 * (((&v6 | 0x7CA2084D) - (&v6 & 0x7CA2084D)) ^ 0xFE2A047E) - 8;
  sub_1AC1C3488((uint64_t)&v6);
  if (v3 >= v4)
    v5 = v4;
  else
    v5 = v3;
  __asm { BR              X14 }
}

uint64_t sub_1AC1D6B24@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _BOOL4 v16;

  v11 = v3 - 1753736207;
  v12 = 47 * (v4 & 0x8BC014C3 ^ 0x457);
  v13 = 4 * (v7 + v5);
  v14 = v10
      + 1399453610
      + (*(_DWORD *)(*(_QWORD *)(v9 - 0x4E242FFD6E71642BLL) + v13) ^ v6)
      - (*(_DWORD *)(*(_QWORD *)(a2 - 0x4E242FFD6E71642BLL) + v13) ^ v6);
  *(_DWORD *)(*(_QWORD *)(a1 - 0x4E242FFD6E71642BLL) + v13) = v14 + v6 - ((v14 << (((v12 - 56) | 0x88) + 120)) & v8);
  v16 = v7 + 869905350 > 393747440 || v7 + 869905350 < v11;
  return ((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 + 8 * (int)((121 * v16) ^ v12))
                                                                                                - 4))(136, 0xBF79F7DEF7FDFFAFLL, 0x1EFFBFF5ELL, 0x4DB67BE75B6BF7FALL, 869905350, 393747440);
}

uint64_t sub_1AC1D6C4C()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  _BOOL4 v4;

  v4 = v2 - 1139529307 < (int)(v3 + 531796433);
  if (v3 > 0x604D6E2E != v2 - 1139529307 < (int)(((v1 - 36) | 0x10) ^ 0x9FB293A4))
    v4 = v3 > 0x604D6E2E;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((v4 * ((v1 ^ 0x7FE) - 139)) ^ v1)) - 4))();
}

uint64_t sub_1AC1D6CC4@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  int v18;
  _BOOL4 v19;

  v15 = v14 > a1;
  v16 = 4 * (v10 + v8);
  v17 = v3 + v13 + (*(_DWORD *)(*(_QWORD *)(v12 - 0x4E242FFD6E71642BLL) + v16) ^ v9);
  *(_DWORD *)(*(_QWORD *)(a2 - 0x4E242FFD6E71642BLL) + v16) = v17 + v9 - (v11 & (2 * v17));
  v18 = v10 + 1 + v4;
  LODWORD(v16) = v15 ^ (v18 < v5);
  v19 = v18 < v7;
  if (!(_DWORD)v16)
    v15 = v19;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((252 * !v15) ^ v6)) - 4))();
}

uint64_t sub_1AC1D6D98()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  _BOOL4 v5;

  v5 = v2 + 1518345017 > ((v1 + 141) | 0x42) + 1042185502 || v2 + 1518345017 < v3 - 1105296539;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((v5 * ((296 * (v1 ^ 0x572)) ^ 0x8B4)) ^ v1)) - 12))();
}

uint64_t sub_1AC1D6E00@<X0>(int a1@<W7>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _BOOL4 v17;

  v12 = v7 - 81;
  v13 = 4 * (v10 + v8);
  v14 = v4 - 1399453609 + (*(_DWORD *)(*(_QWORD *)(a3 - 0x4E242FFD6E71642BLL) + v13) ^ 0x3EFC8529);
  *(_DWORD *)(*(_QWORD *)(a2 - 0x4E242FFD6E71642BLL) + v13) = v14
                                                            + ((v12 + 1791529439) & 0x95376EEF ^ (v9 + 442))
                                                            - (v11 & (2 * v14));
  v15 = v10 + 1 + v5;
  v17 = v15 > a1 + 1606 || v15 < v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((191 * v17) ^ v12)) - 12))();
}

uint64_t sub_1AC1D6EF4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * ((42
                                          * (((v2 + 121) ^ (v1 == ((291 * (v2 ^ 0x645u)) ^ 0xD3073C65369F4C0))) & 1)) ^ v2))
                            - 4))();
}

uint64_t sub_1AC1D6F58()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (int)((1953 * ((v2 + v3 - 1) < 0x7FFFFFFF)) ^ ((v1 & 0xB0978579) - 886)))
                            - ((((v1 & 0xB0978579) - 951) | 0x40) ^ 0xCALL)))();
}

uint64_t sub_1AC1D70C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * (int)(((*(_DWORD *)(*(_QWORD *)(a1 - 0x4E242FFD6E71642BLL)
                                                            + 4 * (v3 + v5 - 1)) == v4 + ((v2 + 913240109) & 0xC9910FD3 ^ 0x4FA) - 1081)
                                               * ((v2 + 913240109) & 0xC9910FD3 ^ 0x7A0)) ^ (v2 + 913240109) & 0xC9910FD3))
                            - 8))();
}

uint64_t sub_1AC1D713C()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (((v2 + 1) ^ (v4 + v3 - 2 < v1 + 47 * (v2 ^ 0xD5u) + 217)) & 1 ^ v2))
                            - 8))();
}

uint64_t sub_1AC1D7180()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0
                                        + 8
                                        * (((*(_DWORD *)(v1 + 4 * (v3 + v5 - 1)) == v4 + (v2 ^ 0x4FA) - 1081)
                                          * (v2 ^ 0x7A0)) ^ v2))
                            - 8))();
}

void sub_1AC1D71C8(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  *(_DWORD *)(a1 - 0x4E242FFD6E71642FLL) = (((v3 + v2) * (v1 - 1385840825)) ^ 0xFA97B5EE)
                                         + 1206450750
                                         + ((2 * (v3 + v2) * (v1 - 1385840825)) & 0xF52F6BDC);
}

void sub_1AC1D7254(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)a1 - 235795823 * ((((2 * a1) | 0xF440C25A) - a1 + 98541267) ^ 0x6E8D2874);
  v2 = *(_QWORD *)(a1 + 8);
  ((void (*)(char *, void (*)()))*(&off_1E5B5B480 + (v1 ^ 0x6C3)))((char *)*(&off_1E5B5B480 + (v1 ^ 0x634)) - 8, sub_1AC1F4A94);
  __asm { BR              X11 }
}

uint64_t sub_1AC1D730C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1336 * (**(_QWORD **)(v2 + 8 * (a1 - 551)) != 0)) ^ a1))
                            - ((a1 - 269) | 0x423u)
                            + 1567))();
}

uint64_t sub_1AC1D734C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (v0 ^ 0x39E)))(v1);
}

void sub_1AC1D737C(uint64_t a1)
{
  int v1;

  v1 = 1224239923 * ((-435756335 - (a1 | 0xE606E2D1) + (a1 | 0x19F91D2E)) ^ 0xEB4AE0F9);
  __asm { BR              X10 }
}

_DWORD *sub_1AC1D7414(_DWORD *result)
{
  *result = 1063055017;
  return result;
}

void sub_1AC1D77A0(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 36) ^ (235795823
                             * ((-2 - ((a1 ^ 0x29040430 | 0x96E8ABCB) + (a1 ^ 0x10C0A082 | 0x69175434))) ^ 0x52961214));
  __asm { BR              X10 }
}

uint64_t sub_1AC1D78BC()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((52 * (((v1 - 83) | 0x21) + 1810628901 == v0)) ^ v1)) - 4))();
}

uint64_t sub_1AC1D791C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;

  v10 = v5 > v6;
  *(_BYTE *)(a1 + (v7 - 2041072)) = *(_BYTE *)(v1 + (v7 - 2041072)) ^ (97 * ((v7 + 16) & 0xF)) ^ *(_BYTE *)(*(_QWORD *)(v8 + 8 * (v4 ^ 0x63F)) + ((v7 - 2041072) & 0xFLL) - 8) ^ *(_BYTE *)(*(_QWORD *)(v8 + 8 * (v4 - 1425)) + (((_BYTE)v7 + 16) & 0xF) - 8) ^ *(_BYTE *)(*(_QWORD *)(v8 + 8 * (v4 ^ 0x64A)) + (((_BYTE)v7 + 16) & 0xF) - 12) ^ 0x75;
  if (v10 == v7 + 1732288554 < v3)
    v10 = v7 + 1732288554 < v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((v10 * ((v4 ^ 0x30D) - 1236)) ^ v4)) - 12))();
}

uint64_t sub_1AC1D79E0()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((((v0 + 73073069) ^ 0x45B0791)
                                          * (((2 * v1) & 0xFBF1FFAE ^ 0xD3D00C8C) + (v1 ^ 0x9614F991) + 801075584 == 767062359)) ^ v0))
                            - ((v0 + 73073069) & 0xFBA4FA6E ^ 0x22ALL)))();
}

uint64_t sub_1AC1D7A68(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((a3 + a2 + (((v3 - 538) | 0x51) ^ 0x2070074u) > 7)
                                          * (((v3 - 469) | 0x720) - 163)) ^ v3))
                            - 8))();
}

uint64_t sub_1AC1D7AEC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (a5 ^ (137 * ((a4 + a7 + 505) < 0xFFFFFFF0))))
                            - ((a5 + 71) | 0x18u)
                            - ((a5 + 922742558) & 0xC90017F5)
                            + 2089))();
}

uint64_t sub_1AC1D7B40@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL4 v18;

  v10 = a2 + a1 + a3 + ((v5 - 788975809) & 0x2F06D775u) - 1384 + a4;
  v11 = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)a3 + (((_BYTE)v5 + 63) & 0x75) - 104) & 0xF;
  v12 = v11 + v7 - v10;
  v13 = (v11 | v8) - v10;
  v14 = v11 + v6 - v10;
  v18 = (unint64_t)(v4 - a4) < 0x10 || v12 < 0x10 || v13 < 0x10 || v14 < 0x10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((104 * v18) ^ v5)) - 4))();
}

uint64_t sub_1AC1D7BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  unsigned int v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5
                                                                                         + 8
                                                                                         * (v4 ^ ((2 * (v6 > 0xF)) | (16 * (v6 > 0xF)))))
                                                                             - ((4 * v4) ^ 0xBF0u)
                                                                             + 972))(a1, a2, a3, a4, 0);
}

uint64_t sub_1AC1D7BF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16x4_t v16;
  int8x16x4_t v17;

  v16.val[1].i64[0] = ((_BYTE)v7 + 6) & 0xF;
  v16.val[1].i64[1] = ((_BYTE)v7 + 5) & 0xF;
  v16.val[2].i64[0] = ((_BYTE)v7 + 4) & 0xF;
  v16.val[2].i64[1] = ((_BYTE)v7 + 3) & 0xF;
  v16.val[3].i64[0] = ((_BYTE)v7 + 2) & 0xF;
  v16.val[3].i64[1] = ((_BYTE)v7 + 1) & 0xF;
  v17.val[0].i64[0] = v7 & 0xF;
  v17.val[0].i64[1] = ((_BYTE)v7 - 1) & 0xF;
  v17.val[1].i64[0] = (v7 + 14) & 0xF;
  v17.val[1].i64[1] = (v7 + 13) & 0xF;
  v17.val[2].i64[0] = ((_BYTE)v7 + 12) & 0xF;
  v17.val[2].i64[1] = ((_BYTE)v7 + 11) & 0xF;
  v17.val[3].i64[0] = ((_BYTE)v7 + 10) & 0xF;
  v17.val[3].i64[1] = ((_BYTE)v7 + 9) & 0xF;
  v10.i64[0] = 0xB1B1B1B1B1B1B1B1;
  v10.i64[1] = 0xB1B1B1B1B1B1B1B1;
  v11.i64[0] = 0x7575757575757575;
  v11.i64[1] = 0x7575757575757575;
  v16.val[0].i64[0] = ((_BYTE)v7 + (_BYTE)v3) & 0xF;
  v16.val[0].i64[1] = ((_BYTE)v7 + 7) & 0xF;
  v12.i64[0] = vqtbl4q_s8(v16, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v12.i64[1] = vqtbl4q_s8(v17, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v13 = vrev64q_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v1 - 15 + (v7 + v3)), *(int8x16_t *)(v5 + v16.val[0].i64[0] - 15)), veorq_s8(*(int8x16_t *)(v6 + v16.val[0].i64[0] - 15), *(int8x16_t *)(v4 + v16.val[0].i64[0] - 15))));
  v14 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v13, v13, 8uLL), v11), vmulq_s8(v12, v10)));
  *(int8x16_t *)(a1 - 15 + (v7 + v3)) = vextq_s8(v14, v14, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((1074 * ((((v2 ^ 0xBAC) + 676) ^ 0x63C) == (v9 & 0xFFFFFFF0))) ^ v2 ^ 0xBAC))
                            - 8))();
}

uint64_t sub_1AC1D7D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;
  int v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((v5 - 267) ^ (v5 - 1059) ^ 0x6DD) * (v7 != a5)) ^ v5)) - 12))();
}

uint64_t sub_1AC1D7D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;
  char v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7
                                                                                                  + 8 * (v5 ^ (47 * ((v8 & 8) == 0))))
                                                                                      - ((381 * (v5 ^ 0x20Cu)) ^ 0x779)))(a1, a2, a3, a4, a5, (v6 - a5));
}

uint64_t sub_1AC1D7DE0@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W6>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int8x16x4_t v54;

  *(_DWORD *)(v48 - 152) = v49;
  *(_QWORD *)(v48 - 128) = a6 - 7;
  *(_QWORD *)(v48 - 120) = v42 - 7;
  *(_DWORD *)(v48 - 160) = v49 & 0xFFFFFFF8;
  *(_DWORD *)(v48 - 136) = -(v49 & 0xFFFFFFF8);
  v50 = -8 - a4;
  v51 = v47 + a2 + a1;
  *(_DWORD *)(v48 - 144) = v51 + 1;
  v52 = (a3 + a2 + a1 + 521 + v50 + 8);
  v54.val[0].i64[0] = ((_BYTE)a3 + (_BYTE)a2 + (_BYTE)a1 + 9 + (_BYTE)v50 + 8) & 0xF;
  v54.val[0].i64[1] = ((_BYTE)v51 + 7 + (_BYTE)v50 + 8) & 0xF;
  v54.val[1].i64[0] = (v46 + (_BYTE)v50 + (((_BYTE)a5 + 42) & 0xD5) + 10) & 0xF;
  v54.val[1].i64[1] = ((_BYTE)v51 + 5 + (_BYTE)v50 + 8) & 0xF;
  v54.val[2].i64[0] = ((_BYTE)v51 + 4 + (_BYTE)v50 + 8) & 0xF;
  v54.val[2].i64[1] = ((_BYTE)v51 + 3 + (_BYTE)v50 + 8) & 0xF;
  v54.val[3].i64[0] = ((_BYTE)v51 + 2 + (_BYTE)v50 + 8) & 0xF;
  v54.val[3].i64[1] = (*(_DWORD *)(v48 - 144) + (_BYTE)v50 + 8) & 0xF;
  *(int8x8_t *)(*(_QWORD *)(v48 - 128) + v52) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(*(_QWORD *)(v48 - 120) + v52), *(int8x8_t *)(v44 + (v52 & 0xF) - 7)), veor_s8(*(int8x8_t *)(v45 + (v52 & 0xF) - 7), *(int8x8_t *)(v43 + (v52 & 0xF) - 7)))), (int8x8_t)0x7575757575757575), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v54, (int8x16_t)xmmword_1AC3B5870), (int8x8_t)0xB1B1B1B1B1B1B1B1)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a42 + 8 * ((55 * (*(_DWORD *)(v48 - 136) == v50)) ^ a5)) - 4))((__n128)xmmword_1AC3B5870);
}

void sub_1AC1D7F70()
{
  JUMPOUT(0x1AC1D7E64);
}

uint64_t sub_1AC1D7F78(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10
                                                      + 8
                                                      * (((a4 ^ 0x7A5 ^ a4 ^ 0x5F5 ^ 0x7E3)
                                                        * (*(_DWORD *)(v11 - 152) == *(_DWORD *)(v11 - 160))) ^ a4))
                                          - 4))(a10);
}

uint64_t sub_1AC1D7FC4@<X0>(int a1@<W5>, int a2@<W7>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(a3 + (a1 + v5)) = *(_BYTE *)(v7 + ((a1 + v5) & 0xFLL)) ^ *(_BYTE *)(v3
                                                                                             + (a1 + v5)) ^ ((a2 ^ 0x50) + 84) ^ *(_BYTE *)(v8 + (((_BYTE)a1 + (_BYTE)v5) & 0xF)) ^ *(_BYTE *)(v6 + (((_BYTE)a1 + (_BYTE)v5) & 0xF)) ^ (-79 * ((a1 + v5) & 0xF));
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((1471 * (a1 - 1 == v4)) ^ (a2 - 1689))) - 4))();
}

uint64_t sub_1AC1D8030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;

  v38 = *(_QWORD *)(a1 + 24);
  *(int8x16_t *)(v37 - 112) = veorq_s8(*(int8x16_t *)*(_QWORD *)(a1 + 40), (int8x16_t)xmmword_1AC3C4DE0);
  if (a9)
    v39 = v38 == 0x48B243EBB599686FLL;
  else
    v39 = 1;
  v40 = !v39;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 + 8 * (int)((v40 * ((a7 + 23) ^ (a7 + 123))) ^ a7)) - 12))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36);
}

uint64_t sub_1AC1D8098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  _BOOL4 v37;

  v37 = (_DWORD)a11 == (((_DWORD)a7 + 123) ^ 0x432DB757) || (((_BYTE)a11 + 5) & 0xF) != (((_DWORD)a7 - 322) ^ 0x3DF);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 + 8 * ((1008 * v37) ^ ((int)a7 + 207))) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35);
}

uint64_t sub_1AC1D80F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,int a43,int a44,int a45)
{
  uint64_t v45;
  unsigned int v46;

  v46 = a11 - ((2 * a43) & 0xBCB5B002) + 455943004 + ((a45 - 1435) | 0x770) - 1431;
  return ((uint64_t (*)(void))(*(_QWORD *)(v45
                                        + 8
                                        * ((45
                                          * (((2 * v46) & 0x9FDDF978 ^ 0x9C95B000) + (v46 ^ 0x11B424BD) - 1084659716 == 256402616)) ^ a45))
                            - 4))();
}

uint64_t sub_1AC1D81B4(int a1, int a2)
{
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8 * (((a2 + a1 + ((v2 + 872) ^ 0xB0110606) < 8) * (((v2 + 630) | 0x321) - 1855)) ^ v2)))();
}

uint64_t sub_1AC1D8224(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v8
                                                               + 8
                                                               * (((((a6 - 738) | 0x400) ^ 0x67B)
                                                                 * ((a3 + a8 - 16) < 0xFFFFFFF0)) ^ a6))
                                                   - ((a6 + 1421476529) & 0xAB45FF7D ^ 0x775)))(a1, a2);
}

uint64_t sub_1AC1D827C@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, unint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL4 v20;

  v9 = (a2 + a1 + a3);
  v10 = v9 + a5 + 1;
  v11 = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)a3) & 0xF;
  v12 = v11 - v9;
  v13 = v5 + v11 - v9;
  v14 = v5 + ((a4 + 1258486163) & 0xB4FD077D ^ 0x770) + v11;
  v15 = v11 + v7 - v9 + 2;
  v16 = v11 + v7 + 3;
  v17 = v6 + ((a4 - 1028726517) & 0x3D511ABF ^ 0x22FLL) + v12;
  v18 = v11 + v6 + 5;
  v20 = v16 > a5 && v15 < v10;
  if (v13 < v10 && v14 > a5)
    v20 = 1;
  if (v18 > a5 && v17 < v10)
    v20 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((230 * v20) ^ a4)) - 8))();
}

uint64_t sub_1AC1D8340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  unsigned int v8;
  uint64_t v9;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9
                                                                      + 8
                                                                      * ((460
                                                                        * (v8 >= ((a8 - 1951315056) & 0x744EB3FD) - 425)) ^ a8)))(a1, a2, a3, 0);
}

uint64_t sub_1AC1D8380@<X0>(unsigned int a1@<W4>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  int8x16_t v44;
  uint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16x4_t v49;
  int8x16x4_t v50;

  v49.val[1].i64[0] = ((_BYTE)v42 + 5) & 0xF;
  v49.val[1].i64[1] = ((_BYTE)v42 + 4) & 0xF;
  v49.val[2].i64[0] = ((_BYTE)v42 + 3) & 0xF;
  v49.val[2].i64[1] = ((_BYTE)v42 + 2) & 0xF;
  v49.val[3].i64[0] = ((_BYTE)v42 + 1) & 0xF;
  v49.val[3].i64[1] = v42 & 0xF;
  v44.i64[0] = 0x7777777777777777;
  v44.i64[1] = 0x7777777777777777;
  v45 = v42 + ((a1 - 357) ^ v40);
  v49.val[0].i64[0] = ((_BYTE)v42 + ((a1 - 101) ^ v40)) & 0xF;
  v49.val[0].i64[1] = ((_BYTE)v42 + 6) & 0xF;
  v46.i64[0] = vqtbl4q_s8(v49, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v50.val[0].i64[1] = ((_BYTE)v42 + 14) & 0xF;
  v50.val[1].i64[1] = ((_BYTE)v42 + 12) & 0xF;
  v50.val[2].i64[1] = (v42 + 10) & 0xF;
  v50.val[3].i64[1] = ((_BYTE)v42 + 8) & 0xF;
  v50.val[0].i64[0] = ((_BYTE)v42 - 1) & 0xF;
  v50.val[1].i64[0] = ((_BYTE)v42 + 13) & 0xF;
  v50.val[2].i64[0] = ((_BYTE)v42 + 11) & 0xF;
  v50.val[3].i64[0] = ((_BYTE)v42 + 9) & 0xF;
  v46.i64[1] = vqtbl4q_s8(v50, (int8x16_t)xmmword_1AC3B5860).u64[0];
  v47 = vrev64q_s8(vmulq_s8(v46, v44));
  *(int8x16_t *)(a2 - 15 + v45) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v38 + (v45 & 0xF) - 15), *(int8x16_t *)(a2 - 15 + v45)), veorq_s8(*(int8x16_t *)((v45 & 0xF) + v41 - 13), *(int8x16_t *)((v45 & 0xF) + v39 - 11))), vextq_s8(v47, v47, 8uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a38 + 8 * ((1943 * ((v43 & 0xFFFFFFF0) == 16)) ^ a1)) - 12))();
}

void sub_1AC1D84D4()
{
  JUMPOUT(0x1AC1D845CLL);
}

uint64_t sub_1AC1D84E0@<X0>(unsigned __int8 *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,unsigned int a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  char *v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  int v69;
  char *v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  int v122;
  int v123;
  char *v124;
  char *v125;
  int v126;
  uint64_t v127;
  char *v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  unsigned int v142;
  char *v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  int v154;
  int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  int v166;
  int v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  int v198;
  int v199;
  unsigned int v200;
  int v201;
  int v202;
  int v203;
  unsigned int v204;
  int v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  unsigned int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  unsigned int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  unsigned int v222;
  int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  uint64_t v227;
  char *v228;
  char *v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  int v266;
  int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;

  v43 = *(_QWORD *)(v40 + 8 * (v42 ^ 0x34F));
  v44 = *(unsigned __int8 *)(v43 + (*(unsigned __int8 *)(v38 - 0x48B243EBB599686ELL) ^ 0x85));
  HIDWORD(v45) = v44 ^ 4;
  LODWORD(v45) = (v44 ^ 0x80) << 24;
  v46 = *(_BYTE *)(v38 - 0x48B243EBB5996864);
  *(_DWORD *)(v41 - 120) = (v42 - 697375726) & 0x29911F7F;
  v47 = (v45 >> 30) ^ 0x9F;
  v48 = *(_QWORD *)(v40 + 8 * (v42 & 0x758964EA));
  v49 = *(unsigned __int8 *)(v48 + (v46 ^ (((v42 + 18) & 0x7F) + 78)));
  HIDWORD(v45) = v49 ^ 0xE;
  LODWORD(v45) = (v49 ^ 0xFFFFFF9F) << 24;
  LOBYTE(v49) = v45 >> 28;
  v50 = *(unsigned __int8 *)(v43 + (*(unsigned __int8 *)(v38 - 0x48B243EBB599686ALL) ^ 0x6FLL));
  v51 = v47 << 16;
  HIDWORD(v45) = v50 ^ 4;
  LODWORD(v45) = (v50 ^ 0x80) << 24;
  v52 = *(_QWORD *)(v40 + 8 * (v42 ^ 0x3AE)) - 12;
  v53 = *(_QWORD *)(v40 + 8 * (v42 ^ 0x3E1)) - 12;
  v54 = *(_BYTE *)(v53 + (*(unsigned __int8 *)(v38 - 0x48B243EBB5996863) ^ 0xD8));
  v55 = *(unsigned __int8 *)(v48 + (*(unsigned __int8 *)(v38 - 0x48B243EBB5996860) ^ 0xBCLL));
  v56 = (((v45 >> 30) ^ 0x68) << 16) | ((*(unsigned __int8 *)(v52
                                                                             + (*(unsigned __int8 *)(v38 - 0x48B243EBB5996869) ^ 0xDFLL)) ^ 0xF6) << 8);
  HIDWORD(v45) = v55 ^ 0xE;
  LODWORD(v45) = (v55 ^ 0xFFFFFF9F) << 24;
  LOBYTE(v55) = v45 >> 28;
  v57 = v56 | ((*(unsigned __int8 *)(v53 + (*(unsigned __int8 *)(v38 - 0x48B243EBB599686BLL) ^ 0xAFLL)) ^ 0xEC) << 24);
  v58 = *(unsigned __int8 *)(v48 + (*(unsigned __int8 *)(v38 - 0x48B243EBB5996868) ^ 0x98));
  HIDWORD(v45) = v58 ^ 0xE;
  LODWORD(v45) = (v58 ^ 0xFFFFFF9F) << 24;
  LOBYTE(v58) = v45 >> 28;
  v59 = v51 | ((*(unsigned __int8 *)(v52 + (*(unsigned __int8 *)(v38 - 0x48B243EBB599686DLL) ^ 0x49)) ^ 0x7C) << 8) | ((*(unsigned __int8 *)(v53 + (*v39 ^ 0xFELL)) ^ 0x35) << 24);
  v60 = *(unsigned __int8 *)(v48 + (*(unsigned __int8 *)(v38 - 0x48B243EBB599686CLL) ^ 0xD0));
  HIDWORD(v45) = v60 ^ 0xE;
  LODWORD(v45) = (v60 ^ 0xFFFFFF9F) << 24;
  LODWORD(v48) = *(unsigned __int8 *)(v43 + (*(unsigned __int8 *)(v38 - 0x48B243EBB5996862) ^ 0xB6));
  LOBYTE(v60) = (v45 >> 28) ^ 0x3C;
  HIDWORD(v45) = v48 ^ 4;
  LODWORD(v45) = (v48 ^ 0x80) << 24;
  v61 = v59 & 0xFFFFFF00 | v60;
  v62 = (v45 >> 30) ^ 0x21;
  v63 = ((((*(unsigned __int8 *)(v52 + (*(unsigned __int8 *)(v38 - 0x48B243EBB5996861) ^ 0xC7)) ^ 0x37) << 8) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v54 ^ 0x3Cu) << 24) | (v62 << 16)) >> 8) ^ 0x75F49E;
  LODWORD(v43) = *(unsigned __int8 *)(v43 + (*(unsigned __int8 *)(v38 - 0x48B243EBB5996866) ^ 0xC8));
  HIDWORD(v45) = v43 ^ 4;
  LODWORD(v45) = (v43 ^ 0x80) << 24;
  v64 = (((*(unsigned __int8 *)(v52 + (*(unsigned __int8 *)(v38 - 0x48B243EBB5996861) ^ 0xC7)) ^ 0x37) << 8) & 0xFFFF00 | ((v54 ^ 0x3C) << 24) | ((_DWORD)v62 << 16) | v55 ^ 0x68) ^ 0x82D734BF;
  v65 = (char *)*(&off_1E5B5B480 + v42 - 796) - 4;
  v66 = v49 | ((*(unsigned __int8 *)(v52 + (*(unsigned __int8 *)(v38 - 0x48B243EBB5996865) ^ 0xB7)) ^ 0xD7) << 8) & 0xFF00FFFF | (((v45 >> 30) ^ 0x37) << 16) | ((*(unsigned __int8 *)(v53 + (*(unsigned __int8 *)(v38 - 0x48B243EBB5996867) ^ 0x18)) ^ 0x73) << 24);
  v67 = (v63 - ((2 * v63) & 0x172) + 1137700537) ^ *(_DWORD *)&v65[4 * (v63 ^ 0xF5)];
  v68 = (uint64_t)*(&off_1E5B5B480 + (int)(v42 & 0x84B1B816));
  v69 = *(_DWORD *)(v68 + 4 * (v54 ^ 0x23u));
  HIDWORD(v45) = v69 ^ 2;
  LODWORD(v45) = v69 ^ 0xE4B4CE78;
  v70 = (char *)*(&off_1E5B5B480 + v42 - 772) - 12;
  v71 = (v45 >> 2) ^ *(_DWORD *)&v70[4 * (v62 ^ 0xDD)] ^ (v67 - ((2 * v67) & 0x3D259260) - 1634547408);
  v72 = (uint64_t)*(&off_1E5B5B480 + (int)(v42 & 0x8ACAB0B6));
  v274 = v61;
  v73 = v61 ^ *(_DWORD *)(v72 + 4 * (v55 ^ 0xD9u)) ^ 0xA9ABEEB ^ (v71
                                                                                   - ((2 * v71) & 0xC6C9E4F0)
                                                                                   - 479923592);
  v275 = v57 & 0xFFFFFF00 | v58;
  v74 = v275 - 2 * ((v57 & 0xA9ABE00 | v58 & 0xFB) ^ v58 & 0x10) + 177913579;
  v272 = v66;
  v273 = v64;
  v270 = v74 ^ 0x2789BBD4 ^ v73;
  v75 = v66 ^ 0x969319C8 ^ v270;
  LODWORD(v62) = *(_DWORD *)(v68 + 4 * (((v75 ^ v64) >> 24) ^ 0x40));
  HIDWORD(v45) = v62 ^ 2;
  LODWORD(v45) = v62 ^ 0xE4B4CE78;
  LODWORD(v62) = ((v45 >> 2) - ((2 * (v45 >> 2)) & 0xC6C9E4F0) - 479923592) ^ *(_DWORD *)(v72
                                                                                        + 4
                                                                                        * ((v75 ^ v64) ^ 0xBBu));
  v76 = (v75 ^ v64) >> 8;
  v77 = *(_DWORD *)&v65[4 * (v76 ^ 0xAD)] ^ *(_DWORD *)&v70[4
                                                                           * ((BYTE2(v75) ^ BYTE2(v64)) ^ 0x3F)] ^ ((v76 ^ 0x58) - 2 * ((v76 ^ 0x2A1658) & 0xBD ^ v76 & 4) + 1137700537) ^ (v62 - ((2 * v62) & 0x3D259260) - 1634547408);
  v78 = v77 - ((2 * v77) & 0x15357DD6) + 177913579;
  v79 = v74 ^ 0x66BB5D9D ^ v78;
  v268 = v75 ^ v64 ^ 0xB9560817;
  v269 = v75;
  v80 = v79 ^ v75;
  v81 = v79 ^ v75 ^ v268;
  v82 = *(_DWORD *)(v68 + 4 * (HIBYTE(v81) ^ 0xFC));
  HIDWORD(v45) = v82 ^ 2;
  LODWORD(v45) = v82 ^ 0xE4B4CE78;
  v83 = *(_DWORD *)&v65[4 * (((unsigned __int16)(v81 ^ 0x27E5) >> 8) ^ 0xF5)] ^ *(_DWORD *)&v70[4 * (BYTE2(v81) ^ 0x45)] ^ (((unsigned __int16)(v81 ^ 0x27E5) >> 8) - (((v81 ^ 0x966C27E5) >> 7) & 0x172) + 1137700537) ^ ((v45 >> 2) - ((2 * (v45 >> 2)) & 0x3D259260) - 1634547408);
  v271 = v73;
  v264 = v78 ^ v73;
  v265 = v81;
  v84 = v78 ^ v73 ^ *(_DWORD *)(v72 + 4 * ((v79 ^ v75 ^ v268) ^ 0xA0u)) ^ (v83
                                                                                            - ((2 * v83) & 0xC6C9E4F0)
                                                                                            - 479923592);
  v266 = v80;
  v267 = v79;
  HIDWORD(v262) = ((v84 ^ 0x516EF336) - ((2 * (v84 ^ 0x516EF336)) & 0x20B82AFE) + 274470271) ^ v79;
  v85 = HIDWORD(v262) ^ 0x8EDEEA78 ^ v80;
  v86 = v85 ^ v81 ^ 0x966C27E5;
  v87 = *(_DWORD *)(v68 + 4 * (HIBYTE(v86) ^ 0xE1));
  HIDWORD(v45) = v87 ^ 2;
  LODWORD(v45) = v87 ^ 0xE4B4CE78;
  v88 = (v45 >> 2) ^ *(_DWORD *)&v65[4 * (BYTE1(v86) ^ 0x9B)] ^ ((BYTE1(v86) ^ 0x6E)
                                                               - ((2 * ((v86 >> 8) ^ 0x8B446E)) & 0x172)
                                                               + 1137700537);
  v89 = (v88 - ((2 * v88) & 0xC6C9E4F0) - 479923592) ^ *(_DWORD *)(v72
                                                                 + 4 * ((v85 ^ v81 ^ 0xE5) ^ 0xB0u));
  v263 = v84;
  v90 = v84 ^ *(_DWORD *)&v70[4 * (BYTE2(v86) ^ 0x6D)] ^ (v89 - ((2 * v89) & 0x3D259260) - 1634547408);
  LODWORD(v261) = v90 ^ 0xDB3F7B22;
  HIDWORD(v261) = v86;
  LODWORD(v262) = v85;
  v91 = v90 ^ 0xDB3F7B22 ^ ((HIDWORD(v262) ^ 0x8EDEEA78) - ((2 * (HIDWORD(v262) ^ 0x8EDEEA78)) & 0x14A31028) - 1974368236) ^ 0x307C325C;
  LODWORD(v260) = v91 ^ v85 ^ 0xD83EB666;
  HIDWORD(v260) = v90 ^ 0xDB3F7B22 ^ ((HIDWORD(v262) ^ 0x8EDEEA78)
                                    - ((2 * (HIDWORD(v262) ^ 0x8EDEEA78)) & 0x14A31028)
                                    - 1974368236);
  v92 = *(_DWORD *)(v68 + 4 * (((v260 ^ v86) >> 24) ^ 0x22));
  HIDWORD(v45) = v92 ^ 2;
  LODWORD(v45) = v92 ^ 0xE4B4CE78;
  v93 = ((v45 >> 2) - ((2 * (v45 >> 2)) & 0xC6C9E4F0) - 479923592) ^ *(_DWORD *)(v72
                                                                               + 4
                                                                               * ((v260 ^ v86) ^ 0x49u));
  v94 = v260 ^ v86 ^ 0x482C770C;
  HIDWORD(v259) = v260 ^ v86;
  v95 = *(_DWORD *)&v65[4 * (BYTE1(v94) ^ 0xF5)] ^ *(_DWORD *)&v70[4
                                                                 * (((v260 ^ v86) >> 16) ^ 5)] ^ v90 ^ (BYTE1(v94) - ((v94 >> 7) & 0x172) + 1137700537) ^ (v93 - ((2 * v93) & 0x3D259260) - 1634547408);
  v96 = v95 ^ v85 ^ 0xD83EB666;
  v97 = v96 ^ v94;
  v98 = *(_DWORD *)(v68 + 4 * (HIBYTE(v97) ^ 0x21));
  HIDWORD(v45) = v98 ^ 2;
  LODWORD(v45) = v98 ^ 0xE4B4CE78;
  v99 = ((v45 >> 2) - ((2 * (v45 >> 2)) & 0x3D259260) - 1634547408) ^ *(_DWORD *)&v70[4 * (BYTE2(v97) ^ 0xCE)];
  v100 = (v99 - ((2 * v99) & 0xC6C9E4F0) - 479923592) ^ *(_DWORD *)(v72 + 4 * (v97 ^ 0xA7u));
  v258 = __PAIR64__(v96, v97);
  v101 = ((unsigned __int16)(v97 ^ 0x48E2) >> 8);
  v102 = (v100 - ((2 * v100) & 0x879FDD72) + 1137700537) ^ *(_DWORD *)&v65[4 * (v101 ^ 0xF5)];
  v103 = v95 ^ 0x252E260C ^ v101 ^ (v102 - ((2 * v102) & 0xE881AA74) + 1950405946);
  LODWORD(v259) = v95 ^ 0x252E260C;
  v104 = v95 ^ 0x252E260C ^ (v91 - ((2 * v91) & 0xE881AA74) + 1950405946);
  HIDWORD(v257) = v104;
  LODWORD(v257) = v103 ^ 0x3F57F5EF;
  HIDWORD(v256) = v103 ^ 0x3F57F5EF ^ (v104 - ((2 * v104) & 0x7EAFEBDE) + 1062729199);
  v105 = HIDWORD(v256) ^ 0xE6F58988 ^ v96;
  v106 = v105 ^ v97 ^ 0x4BE748E2;
  v107 = *(_DWORD *)(v68 + 4 * (HIBYTE(v106) ^ 0x12));
  HIDWORD(v45) = v107 ^ 2;
  LODWORD(v45) = v107 ^ 0xE4B4CE78;
  v108 = *(_DWORD *)&v65[4 * (((unsigned __int16)(v106 ^ 0x8988) >> 8) ^ 0xF5)] ^ *(_DWORD *)&v70[4 * (BYTE2(v106) ^ 0xDC)] ^ (((unsigned __int16)(v106 ^ 0x8988) >> 8) - (((v106 ^ 0x78F58988) >> 7) & 0x172) + 1137700537) ^ ((v45 >> 2) - 1634547408 + (~(2 * (v45 >> 2)) | 0xC2DA6D9F) + 1);
  v109 = *(_DWORD *)(v72 + 4 * (v106 ^ 0xCDu)) ^ v103 ^ 0x5F327107 ^ (v108
                                                                                       - ((2 * v108) & 0xC6C9E4F0)
                                                                                       - 479923592);
  HIDWORD(v254) = v109 ^ ((HIDWORD(v256) ^ 0xE6F58988) - ((2 * (HIDWORD(v256) ^ 0xE6F58988)) & 0xBE64E20E) + 1597141255);
  LODWORD(v256) = v105 ^ 0x5C1770D4;
  v110 = ((HIDWORD(v254) ^ 0x5BF36347) - ((2 * (HIDWORD(v254) ^ 0x5BF36347)) & 0x1AF307C4) + 226067426) ^ v105 ^ 0x5C1770D4;
  v111 = v110 ^ v106 ^ 0x78F58988;
  v112 = ((BYTE1(v111) ^ 0xBB) - ((2 * ((v111 >> 8) ^ 0x1A89BB)) & 0x172) + 1137700537) ^ *(_DWORD *)&v65[4 * (BYTE1(v111) ^ 0x4E)];
  v113 = *(_DWORD *)(v68 + 4 * (HIBYTE(v111) ^ 0x70));
  v114 = (v112 - ((2 * v112) & 0xC6C9E4F0) - 479923592) ^ *(_DWORD *)(v72
                                                                    + 4
                                                                    * ((v110 ^ v106 ^ 0x88) ^ 0x91u));
  HIDWORD(v45) = v113 ^ 2;
  LODWORD(v45) = v113 ^ 0xE4B4CE78;
  v115 = (v45 >> 2) ^ *(_DWORD *)&v70[4 * (BYTE2(v111) ^ 0xA0)] ^ (v114 - ((2 * v114) & 0x3D259260) - 1634547408);
  v255 = __PAIR64__(v106, v109);
  LODWORD(v253) = (v115 - ((2 * v115) & 0xBE64E20E) + 1597141255) ^ v109;
  HIDWORD(v253) = v111;
  HIDWORD(v252) = v253 ^ 0x930000ED ^ HIDWORD(v254) ^ 0x5BF36347;
  v116 = 2 * (HIDWORD(v252) ^ 0x8D06EA22);
  LODWORD(v252) = v110 ^ 0x3A4B51A ^ ((HIDWORD(v252) ^ 0x8D06EA22) + 618751462 + (~v116 | 0xB63D3435));
  v117 = *(_DWORD *)(v68 + 4 * (((v252 ^ v111) >> 24) ^ 0x23));
  HIDWORD(v45) = v117 ^ 2;
  LODWORD(v45) = v117 ^ 0xE4B4CE78;
  v118 = v252 ^ v111 ^ 0x49571195;
  v119 = *(_DWORD *)(v72
                   + 4
                   * (v110 ^ 0x1A ^ ((BYTE4(v252) ^ 0x22) - 26 + (~(_BYTE)v116 | 0x35)) ^ (v110 ^ v106 ^ 0x88) ^ 0xD0u)) ^ *(_DWORD *)&v65[4 * (BYTE1(v118) ^ 0xF5)] ^ 0xA0AB1CC1 ^ (v45 >> 2);
  HIDWORD(v251) = v252 ^ v111;
  v120 = (v119 - ((2 * v119) & 0x3D259260) - 1634547408) ^ *(_DWORD *)&v70[4
                                                                         * (((v252 ^ v111) >> 16) ^ 0x7E)] ^ v253 ^ 0x930000ED ^ BYTE1(v118);
  LODWORD(v254) = v110;
  v121 = v120 ^ v110 ^ v118;
  v122 = *(_DWORD *)(v68 + 4 * (HIBYTE(v121) ^ 0x63));
  LODWORD(v251) = v121 ^ 0x2D189B8F;
  LODWORD(v43) = *(_DWORD *)&v65[4 * (BYTE1(v121) ^ 0x2D)] ^ *(_DWORD *)(v72
                                                                       + 4 * (~(_BYTE)v121 ^ 0xC4u)) ^ ((BYTE1(v121) ^ 0xD8) - ((2 * ((v121 >> 8) ^ 0x97AD8)) & 0x172) + 1137700537) ^ ((__PAIR64__(v122 ^ 2u, v122 ^ 0xE4B4CE78) >> 2) - ((2 * (__PAIR64__(v122 ^ 2u, v122 ^ 0xE4B4CE78) >> 2)) & 0xC6C9E4F0) - 479923592);
  v123 = (v43 - ((2 * v43) & 0x3D259260) - 1634547408) ^ *(_DWORD *)&v70[4 * (BYTE2(v121) ^ 0x53)];
  LODWORD(v43) = v123 - ((2 * v123) & 0xB2DDC208);
  v124 = (char *)*(&off_1E5B5B480 + (v42 ^ 0x33C)) - 4;
  v125 = (char *)*(&off_1E5B5B480 + v42 - 825) - 8;
  v126 = v125[*(unsigned __int8 *)(v41 - 109) ^ 0xA5];
  HIDWORD(v45) = v126 ^ 4;
  LODWORD(v45) = (v126 ^ 0x80) << 24;
  v127 = (uint64_t)*(&off_1E5B5B480 + (v42 ^ 0x31D));
  v128 = (char *)*(&off_1E5B5B480 + (v42 ^ 0x3F4)) - 8;
  v250 = v125;
  v248 = v128;
  v249 = v127;
  LODWORD(v52) = (((((v45 >> 30) ^ 0xDB) >> 2) | (((v45 >> 30) ^ 0xDB) << 6)) | ((*(unsigned __int8 *)(v127 + (*(unsigned __int8 *)(v41 - 111) ^ 0x7ALL)) ^ 0xB) << 16) | ((v128[*(unsigned __int8 *)(v41 - 112) ^ 0x78] ^ 0x85) << 24) | (((v124[*(unsigned __int8 *)(v41 - 110) ^ 0x5DLL] + (*(_BYTE *)(v41 - 110) ^ 0x52) - 103) ^ 0x5D) << 8)) ^ 0x1A54BA00;
  v129 = ((v125[*(unsigned __int8 *)(v41 - 101) ^ 0x60] ^ 0x4F) & 0xFFFF00FF | ((*(unsigned __int8 *)(v127 + (*(unsigned __int8 *)(v41 - 103) ^ 5)) ^ 0x5A) << 16) | (((v124[*(unsigned __int8 *)(v41 - 102) ^ 4] + (*(_BYTE *)(v41 - 102) ^ 0xB) - 103) ^ 0x33) << 8) | ((v128[*(unsigned __int8 *)(v41 - 104) ^ 0x1CLL] ^ 0x70) << 24)) ^ 0x4D95A443;
  v130 = ((v125[*(unsigned __int8 *)(v41 - 105) ^ 0x28] ^ 0x8E) & 0xFFFF00FF | ((((*(_BYTE *)(v41 - 106) ^ 0xAC) + v124[*(unsigned __int8 *)(v41 - 106) ^ 0xA3] - 103) ^ 0xF6) << 8) | ((v128[*(unsigned __int8 *)(v41 - 108) ^ 0xB2] ^ 0xFFFFFF87) << 24) | ((*(unsigned __int8 *)(v127 + (*(unsigned __int8 *)(v41 - 107) ^ 0x27)) ^ 0x3E) << 16)) ^ 0x882ABE5F;
  v131 = ((v125[*(unsigned __int8 *)(v41 - 97) ^ 0x7BLL] ^ 0xFB) & 0xFFFF00FF | ((((*(_BYTE *)(v41 - 98) ^ 0xD0) + v124[*(unsigned __int8 *)(v41 - 98) ^ 0xDFLL] - 103) ^ 0xE4) << 8) | ((*(unsigned __int8 *)(v127 + (*(unsigned __int8 *)(v41 - 99) ^ 0xAALL)) ^ 0x68) << 16) | ((v128[*(unsigned __int8 *)(v41 - 100) ^ 0x45] ^ 0xFFFFFFBF) << 24)) ^ 0xE8CC113C;
  v132 = (HIDWORD(v252) ^ 0x8D06EA22) - (v116 & 0xB2DDC208) - 647044860;
  LODWORD(v128) = *(_DWORD *)(v41 - 120);
  HIDWORD(v246) = v128 ^ 0x7A3;
  LODWORD(v246) = v128 ^ 0x77C;
  HIDWORD(v245) = v128 ^ 0x774;
  LODWORD(v245) = v120 ^ 0xD96EE104 ^ v132;
  HIDWORD(v244) = v128 ^ 0x743;
  LODWORD(v244) = v128 ^ 0x746;
  LODWORD(v247) = v132 ^ 0x3DC8BA5D ^ (v43 - 647044860);
  HIDWORD(v247) = v120 ^ 0xD96EE104;
  HIDWORD(v243) = (v43 - 647044860) ^ v120 ^ 0xD96EE104;
  LODWORD(v243) = v128 ^ 0x7FB;
  HIDWORD(a6) = v128 ^ 0x77F;
  HIDWORD(a16) = v120 ^ v110 ^ 0x452FF2BF;
  HIDWORD(a4) = v247 ^ HIDWORD(a16);
  *(_DWORD *)(v41 - 252) = -923450292;
  v133 = *(_DWORD *)(v41 - 120);
  *(_QWORD *)(v41 - 200) = 7;
  v134 = a1[7];
  *(_QWORD *)(v41 - 168) = 12;
  LODWORD(v134) = v125[v134 ^ 0x41];
  LOBYTE(v110) = a1[12];
  *(_QWORD *)(v41 - 160) = 8;
  *(_QWORD *)(v41 - 128) = 1;
  v135 = v248[(v110 ^ (((v133 + 35) | 8) - 60))] ^ 4;
  LODWORD(v68) = v248[a1[8] ^ 0xC1] ^ 0xB0;
  LODWORD(v43) = *(unsigned __int8 *)(v127 + (a1[1] ^ 0x66)) ^ 0xE7;
  *(_QWORD *)(v41 - 136) = 15;
  LODWORD(v53) = v125[a1[15] ^ 0xE9];
  *(_QWORD *)(v41 - 144) = 11;
  LODWORD(v72) = v125[a1[11] ^ 0xC3];
  *(_QWORD *)(v41 - 176) = 0;
  LODWORD(v53) = v53 ^ 0x59;
  LODWORD(v43) = ((_DWORD)v43 << 16) | ((v248[*a1 ^ 0x30] ^ 0x34) << 24);
  LODWORD(v72) = v72 ^ 0x93;
  *(_QWORD *)(v41 - 152) = 2;
  LODWORD(v43) = v43 & 0xFFFF00FF | (((v124[a1[2] ^ 0xC0] + (a1[2] ^ 0xCF) - 103) ^ 0xF9) << 8);
  *(_QWORD *)(v41 - 232) = 5;
  *(_QWORD *)(v41 - 224) = 4;
  *(_QWORD *)(v41 - 208) = 9;
  v136 = (*(unsigned __int8 *)(v127 + (a1[9] ^ 0x5DLL)) ^ 0x34) << 16;
  *(_QWORD *)(v41 - 192) = 10;
  LODWORD(v68) = v136 & 0xFFFF00FF | (((v124[a1[10] ^ 0xD5] + (a1[10] ^ 0xDA) - 103) ^ 0xCF) << 8) | v72 | ((_DWORD)v68 << 24);
  *(_QWORD *)(v41 - 184) = 14;
  v137 = (v124[a1[14] ^ 0xE4] + (a1[14] ^ 0xEB) + 25) << 8;
  *(_QWORD *)(v41 - 216) = 3;
  *(_QWORD *)(v41 - 240) = 13;
  LODWORD(v125) = v248[a1[4] ^ 0xFCLL];
  v138 = v137 | ((*(unsigned __int8 *)(v127 + (a1[13] ^ 0x92)) ^ 9) << 16) | v53 | (v135 << 24);
  *(_QWORD *)(v41 - 248) = 6;
  v139 = v68 - 2 * (v68 & 0x742C1DFE ^ v72 & 4);
  LODWORD(v72) = v250[a1[3] ^ 0xDCLL] ^ 0x4D;
  LODWORD(v134) = v134 ^ 0x89;
  v140 = v139 - 198435334;
  v141 = ((*(unsigned __int8 *)(v127 + (a1[5] ^ 0xA9)) ^ 0xDA) << 16) | (((v124[a1[6] ^ 0x4FLL]
                                                                                            + (a1[6] ^ 0x40)
                                                                                            - 103) ^ 0xB7) << 8) | v134 | ((v125 ^ 0x8A) << 24);
  LODWORD(v134) = v141 + 831719398 - 2 * (v141 & 0x319307F6 ^ v134 & 0x10);
  v142 = v52 ^ v274 ^ ((v72 | v43) - 2 * ((v72 | v43) & 0x23ED033D ^ v72 & 4) - 1544748231);
  LODWORD(v43) = v130 ^ v275 ^ v134;
  LODWORD(v134) = (v138 + 1366665349 - 2 * (v138 & 0x5175A897 ^ v53 & 0x12)) ^ v131;
  LODWORD(v134) = (v134 - ((2 * v134) & 0xEE475496) - 148657589) ^ v273;
  LODWORD(v53) = v129 ^ v272 ^ v140;
  v143 = (char *)*(&off_1E5B5B480 + (v128 ^ 0x77C)) - 8;
  v144 = *(_DWORD *)&v143[4 * (BYTE3(v53) ^ 0x3F)];
  HIDWORD(v45) = ~v144;
  LODWORD(v45) = v144 ^ 0xB5C31F8C;
  v145 = (uint64_t)*(&off_1E5B5B480 + v133 - 1836);
  v146 = (v45 >> 1) ^ ((BYTE2(v134) ^ 0x68) + 1189723660 - 2 * ((BYTE2(v134) ^ 0x68) & 0xF ^ WORD1(v134) & 3)) ^ *(_DWORD *)(v145 + 4 * (BYTE2(v134) ^ 0x34u));
  v147 = (uint64_t)*(&off_1E5B5B480 + (v128 ^ 0x7A3));
  v148 = *(_DWORD *)(v147 + 4 * ((v129 ^ v272 ^ v140) ^ 0xC6u)) ^ ((BYTE2(v142) ^ 0xD5)
                                                                                    + 1189723660
                                                                                    - ((2 * (HIWORD(v142) ^ 0x6CD5)) & 0x18)) ^ (((v129 ^ v272 ^ v140) ^ 0xAB) + 901616209 + ((2 * ((v129 ^ v272 ^ v140) ^ 0xAB) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ *(_DWORD *)(v145 + 4 * (BYTE2(v142) ^ 0x89u));
  v149 = *(_DWORD *)&v143[4 * (BYTE3(v43) ^ 0xC8)];
  LODWORD(v72) = *(_DWORD *)(v145 + 4 * (BYTE2(v43) ^ 0x8Cu)) ^ ((BYTE2(v43) ^ 0xD0)
                                                                 + 1189723660
                                                                 - ((v43 >> 15) & 0x18)) ^ *(_DWORD *)(v147 + 4 * (v134 ^ 0xB6u)) ^ ((v134 ^ 0xDB) + 901616209 + ((2 * (v134 ^ 0xDB) + 254) & 0x3A2 ^ 0xCFC27BFF));
  HIDWORD(v45) = ~v149;
  LODWORD(v45) = v149 ^ 0xB5C31F8C;
  v150 = v148 - 1008662009 - ((2 * v148) & 0x87C2140E);
  v151 = (uint64_t)*(&off_1E5B5B480 + (v128 ^ 0x774));
  v152 = v150 ^ *(_DWORD *)(v151 + 4 * (BYTE1(v43) ^ 0x2Fu));
  LODWORD(v125) = ((BYTE2(v53) ^ 0xAD) + 1189723660 - ((2 * (WORD1(v53) ^ 0x3FAD)) & 0x18)) ^ *(_DWORD *)(v147 + 4 * (v142 ^ 0x1Cu)) ^ ((v142 ^ 0x71) + 901616209 + ((2 * (v142 ^ 0x71) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ (v45 >> 1) ^ *(_DWORD *)(v145 + 4 * (BYTE2(v53) ^ 0xF1u));
  LODWORD(v68) = *(_DWORD *)&v143[4 * (HIBYTE(v142) ^ 0x6C)];
  HIDWORD(v45) = ~(_DWORD)v68;
  LODWORD(v45) = v68 ^ 0xB5C31F8C;
  LODWORD(v53) = (v45 >> 1) ^ *(_DWORD *)(v151 + 4 * (BYTE1(v53) ^ 0x29u)) ^ (v72
                                                                              - 1008662009
                                                                              - ((2 * v72) & 0x87C2140E));
  LODWORD(v72) = (_DWORD)v125 - 1008662009 - ((2 * (_DWORD)v125) & 0x87C2140E);
  *(_DWORD *)(v41 - 256) = 901616208;
  v153 = *(_DWORD *)(v147 + 4 * (v43 ^ 0x7Du)) ^ ((v43 ^ 0x10)
                                                                   + 901616208
                                                                   - ((2 * (v43 ^ 0x10) + 842892542) & 0x303D87A2)) ^ *(_DWORD *)(v151 + 4 * (BYTE1(v142) ^ 0xDEu)) ^ (v146 - 1008662009 - ((2 * v146) & 0x87C2140E));
  v154 = *(_DWORD *)&v143[4 * (BYTE3(v134) ^ 0xB7)];
  HIDWORD(v45) = ~v154;
  LODWORD(v45) = v154 ^ 0xB5C31F8C;
  v155 = v153 - 1768744658 - ((2 * v153) & 0x2D26325C);
  LODWORD(v125) = (v152 ^ (v45 >> 1)) - ((2 * (v152 ^ (v45 >> 1))) & 0x2680A1D2);
  v156 = v53 + 177913579 - ((2 * v53) & 0x15357DD6);
  LODWORD(v134) = *(_DWORD *)(v151 + 4 * (BYTE1(v134) ^ 0x66u)) ^ v270 ^ v72;
  LODWORD(v53) = *(_DWORD *)&v143[4 * ((v155 ^ ~v269) >> 24)];
  HIDWORD(v45) = ~(_DWORD)v53;
  LODWORD(v45) = v53 ^ 0xB5C31F8C;
  LODWORD(v68) = v45 >> 1;
  LOWORD(v53) = v155 ^ v269;
  v157 = (v155 ^ v269) >> 16;
  v158 = v156 ^ v271;
  v159 = *(_DWORD *)&v143[4 * (HIBYTE(v158) ^ 0x91)];
  HIDWORD(v45) = ~v159;
  LODWORD(v45) = v159 ^ 0xB5C31F8C;
  v160 = v45 >> 1;
  v161 = *(_DWORD *)&v143[4 * (BYTE3(v134) ^ 0xA3)];
  HIDWORD(v45) = ~v161;
  LODWORD(v45) = v161 ^ 0xB5C31F8C;
  LODWORD(v128) = v160 ^ *(_DWORD *)(v145 + 4 * (BYTE2(v134) ^ 0xF0u)) ^ ((BYTE2(v134) ^ 0xAC)
                                                                          + 1189723660
                                                                          - ((2 * (WORD1(v134) ^ 0xA3AC)) & 0x18));
  v162 = (v45 >> 1) ^ *(_DWORD *)(v147 + 4 * (v158 ^ 0x7Bu)) ^ ((v157 ^ 0x49)
                                                                                 + 1189723660
                                                                                 - 2
                                                                                 * ((v157 ^ 0x49) & 0xE ^ v157 & 2)) ^ ((v158 ^ 0x16) + 901616209 + ((2 * (v158 ^ 0x16) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ *(_DWORD *)(v145 + 4 * (v157 ^ 0x15u));
  LODWORD(v125) = ((_DWORD)v125 - 1824501527) ^ v268;
  v163 = (v162 - 1008662009 - ((2 * v162) & 0x87C2140E)) ^ *(_DWORD *)(v151 + 4 * (BYTE1(v125) ^ 0x70u));
  LODWORD(v128) = ((_DWORD)v128 - 1008662009 - ((2 * (_DWORD)v128) & 0x87C2140E)) ^ *(_DWORD *)(v151
                                                                                              + 4
                                                                                              * (BYTE1(v53) ^ 0x2Cu));
  LODWORD(v127) = v68 ^ *(_DWORD *)(v147 + 4 * (v134 ^ 3u)) ^ *(_DWORD *)(v145
                                                                                           + 4 * (BYTE2(v125) ^ 0xC3u)) ^ ((v134 ^ 0x6E) + 901616209 + ((2 * (v134 ^ 0x6E) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ ((BYTE2(v125) ^ 0x9F) + 1189723660 - ((2 * ((v125 >> 16) ^ 0x259F)) & 0x18));
  LODWORD(v68) = ((BYTE2(v158) ^ 0x72) + 1189723660 - ((v158 >> 15) & 0x18)) ^ *(_DWORD *)(v145
                                                                                         + 4 * (BYTE2(v158) ^ 0x2Eu));
  v164 = *(_DWORD *)&v143[4 * ((v125 >> 24) ^ 0x25)];
  HIDWORD(v45) = ~v164;
  LODWORD(v45) = v164 ^ 0xB5C31F8C;
  LODWORD(v134) = *(_DWORD *)(v147 + 4 * (v53 ^ 0x91u)) ^ *(_DWORD *)(v151
                                                                                       + 4 * (BYTE1(v134) ^ 0xBDu)) ^ ((v53 ^ 0xFC) + 901616209 + ((2 * (v53 ^ 0xFC) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ (v45 >> 1) ^ (v68 - 1008662009 - ((2 * v68) & 0x87C2140E));
  LODWORD(v125) = ((v125 ^ 0xD6) - 1726037377) ^ v264 ^ *(_DWORD *)(v147
                                                                                   + 4
                                                                                   * (v125 ^ 0xBBu)) ^ ((_DWORD)v128 - 1667313711 - ((2 * (_DWORD)v128) & 0x393D9FA2));
  v165 = *(_DWORD *)(v151 + 4 * (BYTE1(v158) ^ 0x57u)) ^ v266 ^ (v127 - 1008662009 - ((2 * v127) & 0x87C2140E));
  LODWORD(v134) = (v134 - ((2 * v134) & 0x2B1EB970) + 361716920) ^ v265;
  LODWORD(v53) = (v163 + 274470271 - ((2 * v163) & 0x20B82AFE)) ^ v267;
  v166 = *(_DWORD *)&v143[4 * (BYTE3(v134) ^ 0xA6)];
  HIDWORD(v45) = ~v166;
  LODWORD(v45) = v166 ^ 0xB5C31F8C;
  LODWORD(v128) = ((v53 ^ 0xA1)
                 + 901616209
                 + ((2 * (v53 ^ 0xA1) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ *(_DWORD *)(v147
                                                                                                 + 4
                                                                                                 * (v53 ^ 0xCCu));
  v167 = *(_DWORD *)(v145 + 4 * (BYTE2(v125) ^ 0xDBu)) ^ (v45 >> 1) ^ ((BYTE2(v125) ^ 0x87)
                                                                       + 1189723660
                                                                       - ((2 * ((v125 >> 16) ^ 0x3A87)) & 0x18));
  LODWORD(v128) = ((_DWORD)v128 - 1008662009 - ((2 * (_DWORD)v128) & 0x87C2140E)) ^ *(_DWORD *)(v151
                                                                                              + 4
                                                                                              * (BYTE1(v125) ^ 0xDEu));
  LODWORD(v127) = ((v125 ^ 0x9E)
                 + 901616209
                 + ((2 * (v125 ^ 0x9E) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ *(_DWORD *)(v147
                                                                                                  + 4 * (v125 ^ 0xF3u));
  LODWORD(v68) = v127 - 1008662009 - ((2 * v127) & 0x87C2140E);
  v168 = (v167 - 1008662009 - ((2 * v167) & 0x87C2140E)) ^ *(_DWORD *)(v151 + 4 * (BYTE1(v53) ^ 0x57u));
  LODWORD(v72) = BYTE2(v165);
  LODWORD(v127) = (BYTE2(v165) ^ 0xC3) + 1189723660 - ((v165 >> 15) & 0x18);
  v169 = *(_DWORD *)&v143[4 * (HIBYTE(v165) ^ 0xB1)];
  HIDWORD(v45) = ~v169;
  LODWORD(v45) = v169 ^ 0xB5C31F8C;
  LODWORD(v128) = *(_DWORD *)(v145 + 4 * (BYTE2(v134) ^ 0x20u)) ^ BYTE2(v134) ^ (v45 >> 1) ^ ((_DWORD)v128
                                                                                              + 1189723660
                                                                                              - ((2 * (_DWORD)v128) & 0x8DD37C18));
  LODWORD(v125) = *(_DWORD *)&v143[4 * ((v125 >> 24) ^ 0x3A)];
  HIDWORD(v45) = ~(_DWORD)v125;
  LODWORD(v45) = v125 ^ 0xB5C31F8C;
  LODWORD(v125) = *(_DWORD *)(v151 + 4 * (BYTE1(v165) ^ 0xB0u)) ^ BYTE2(v53) ^ *(_DWORD *)(v145
                                                                                           + 4 * (BYTE2(v53) ^ 0xF6u)) ^ 0x8508B4A1 ^ (v45 >> 1);
  v170 = ((v134 ^ 0x8B) - 1726037377) ^ v263 ^ *(_DWORD *)(v147 + 4 * (v134 ^ 0xE6u)) ^ ((_DWORD)v125 - 1667313711 - ((2 * (_DWORD)v125) & 0x393D9FA2));
  v171 = *(_DWORD *)(v147 + 4 * (v165 ^ 6u)) ^ ((v165 ^ 0x6B) - 1726037377) ^ (v168 - 1667313711 - ((2 * v168) & 0x393D9FA2));
  v172 = *(_DWORD *)&v143[4 * (BYTE3(v53) ^ 0x7C)];
  HIDWORD(v45) = ~v172;
  LODWORD(v45) = v172 ^ 0xB5C31F8C;
  LODWORD(v53) = HIDWORD(v262) ^ v127 ^ *(_DWORD *)(v145 + 4 * (v72 ^ 0x9F));
  LODWORD(v72) = (v171 - ((2 * v171) & 0x72F0C468) + 964190772) ^ HIDWORD(v261);
  LODWORD(v125) = ((v128 ^ 0x7C) - ((2 * (v128 ^ 0x7C)) & 0x47414572) + 597729977) ^ v262;
  LODWORD(v134) = *(_DWORD *)(v151 + 4 * (BYTE1(v134) ^ 0xBu)) ^ v53 ^ (v45 >> 1) ^ v68;
  v173 = (((v128 ^ 0x7C) - ((2 * (v128 ^ 0x7C)) & 0x72) - 71) ^ v262);
  v174 = ((v173 ^ 0x2B) + *(_DWORD *)(v41 - 256) - ((2 * (v173 ^ 0x2B) + 842892542) & 0x303D87A2)) ^ *(_DWORD *)(v147 + 4 * (v173 ^ 0x46u));
  v175 = *(_DWORD *)&v143[4 * (HIBYTE(v170) ^ 0x2D)];
  LODWORD(v53) = v174 - 1008662009 - ((2 * v174) & 0x87C2140E);
  HIDWORD(v45) = ~v175;
  LODWORD(v45) = v175 ^ 0xB5C31F8C;
  v176 = (v45 >> 1) ^ *(_DWORD *)(v147 + 4 * (v72 ^ 0x7Au)) ^ ((v72 ^ 0x17)
                                                                                + 901616209
                                                                                + ((2 * (v72 ^ 0x17)
                                                                                  + 254) & 0x3A2 ^ 0xCFC27BFF));
  v177 = *(_DWORD *)&v143[4 * (BYTE3(v72) ^ 0x97)];
  HIDWORD(v45) = ~v177;
  LODWORD(v45) = v177 ^ 0xB5C31F8C;
  LODWORD(v68) = v45 >> 1;
  v178 = *(_DWORD *)&v143[4 * ((v125 >> 24) ^ 0x1C)];
  HIDWORD(v45) = ~v178;
  LODWORD(v45) = v178 ^ 0xB5C31F8C;
  v179 = v45 >> 1;
  LODWORD(v128) = *(_DWORD *)&v143[4 * (BYTE3(v134) ^ 0xB4)];
  HIDWORD(v45) = ~(_DWORD)v128;
  LODWORD(v45) = v128 ^ 0xB5C31F8C;
  v180 = v179 ^ *(_DWORD *)(v147 + 4 * (v134 ^ 0x8Bu)) ^ ((v134 ^ 0xE6)
                                                                           + 901616209
                                                                           + ((2 * (v134 ^ 0xE6) + 254) & 0x3A2 ^ 0xCFC27BFF));
  v181 = ((BYTE2(v134) ^ 0x59) + 1189723660 - ((2 * (WORD1(v134) ^ 0xB459)) & 0x18)) ^ *(_DWORD *)(v145
                                                                                                 + 4
                                                                                                 * (BYTE2(v134) ^ 5u)) ^ *(_DWORD *)(v151 + 4 * (BYTE1(v125) ^ 0xBu)) ^ (v176 - 1008662009 - ((2 * v176) & 0x87C2140E));
  v182 = ((BYTE2(v72) ^ 0xA3) + 1189723660 - ((v72 >> 15) & 0x18)) ^ v260 ^ *(_DWORD *)(v151 + 4 * (BYTE1(v170) ^ 0x57u)) ^ *(_DWORD *)(v145 + 4 * (BYTE2(v72) ^ 0xFFu)) ^ (v180 - 1008662009 - ((2 * v180) & 0x87C2140E));
  LODWORD(v43) = *(_DWORD *)(v151 + 4 * (BYTE1(v72) ^ 0x7Cu)) ^ HIDWORD(v260) ^ ((v45 >> 1)
                                                                                 - 1008662009
                                                                                 - ((2 * (v45 >> 1)) & 0x87C2140E)) ^ *(_DWORD *)(v147 + 4 * (v170 ^ 0x7Bu)) ^ ((v170 ^ 0x16) + 901616209 + ((2 * (v170 ^ 0x16) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ *(_DWORD *)(v145 + 4 * (BYTE2(v125) ^ 0x57u)) ^ ((BYTE2(v125) ^ 0xB) + 1189723660 - ((2 * ((v125 >> 16) ^ 0x5F0B)) & 0x18));
  LODWORD(v125) = (v181 - 1974368236 - ((2 * v181) & 0x14A31028)) ^ v261;
  LODWORD(v134) = *(_DWORD *)(v151 + 4 * (BYTE1(v134) ^ 0x34u)) ^ HIDWORD(v259) ^ *(_DWORD *)(v145
                                                                                              + 4
                                                                                              * (BYTE2(v170) ^ 0x2Eu)) ^ ((BYTE2(v170) ^ 0x72) + 1189723660 - ((v170 >> 15) & 0x18)) ^ v68 ^ v53;
  LODWORD(v128) = *(_DWORD *)&v143[4 * (BYTE3(v134) ^ 0x6D)];
  HIDWORD(v45) = ~(_DWORD)v128;
  LODWORD(v45) = v128 ^ 0xB5C31F8C;
  LODWORD(v53) = (v45 >> 1) - 1008662009 - ((2 * (v45 >> 1)) & 0x87C2140E);
  v183 = ((BYTE2(v43) ^ 0x81) + 1189723660 - ((v43 >> 15) & 0x18)) ^ *(_DWORD *)(v145
                                                                                             + 4
                                                                                             * (BYTE2(v43) ^ 0xDDu));
  v184 = ((v43 ^ 0x51) + 901616209 + ((2 * (v43 ^ 0x51) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ *(_DWORD *)(v147 + 4 * (v43 ^ 0x3Cu));
  v185 = *(_DWORD *)(v145 + 4 * (BYTE2(v182) ^ 0xDBu)) ^ ((BYTE2(v182) ^ 0x87)
                                                          + 1189723660
                                                          - ((2 * (HIWORD(v182) ^ 0x7787)) & 0x18));
  v186 = *(_DWORD *)&v143[4 * (BYTE3(v43) ^ 0x14)];
  HIDWORD(v45) = ~v186;
  LODWORD(v45) = v186 ^ 0xB5C31F8C;
  v187 = v45 >> 1;
  v188 = *(_DWORD *)&v143[4 * ((v125 >> 24) ^ 0x9A)];
  HIDWORD(v45) = ~v188;
  LODWORD(v45) = v188 ^ 0xB5C31F8C;
  LODWORD(v128) = ((v134 ^ 0x2EB3E5DA) >> 16) ^ *(_DWORD *)(v145
                                                                                         + 4
                                                                                         * (((v134 ^ 0x2EB3E5DA) >> 16) ^ 0x5Cu)) ^ (v184 + 1189723660 - ((2 * v184) & 0x8DD37C18));
  v189 = *(_DWORD *)(v147 + 4 * (v134 ^ 0xB7u)) ^ *(_DWORD *)(v151 + 4 * (BYTE1(v182) ^ 0xDEu)) ^ (v183 - 1008662009 - ((2 * v183) & 0x87C2140E)) ^ ((v134 ^ 0xDA) + 901616209 + ((2 * (v134 ^ 0xDA) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ (v45 >> 1);
  v190 = *(_DWORD *)&v143[4 * (HIBYTE(v182) ^ 0x77)];
  HIDWORD(v45) = ~v190;
  LODWORD(v45) = v190 ^ 0xB5C31F8C;
  LODWORD(v128) = (v45 >> 1) ^ *(_DWORD *)(v151 + 4 * (BYTE1(v125) ^ 0x2Du)) ^ ((_DWORD)v128
                                                                                - 1008662009
                                                                                - ((2 * (_DWORD)v128) & 0x87C2140E));
  LODWORD(v43) = *(_DWORD *)(v151 + 4 * (BYTE1(v43) ^ 0x34u)) ^ v258 ^ v53 ^ *(_DWORD *)(v145
                                                                                         + 4 * (BYTE2(v125) ^ 0xB5u)) ^ ((v182 ^ 0x9E) + 901616209 + ((2 * (v182 ^ 0x9E) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ ((BYTE2(v125) ^ 0xE9) + 1189723660 - 2 * ((BYTE2(v125) ^ 0xE9) & 0x1E ^ (v125 >> 16) & 0x12)) ^ *(_DWORD *)(v147 + 4 * (v182 ^ 0xF3u));
  v191 = *(_DWORD *)(v151 + 4 * (BYTE1(v134) ^ 7u)) ^ HIDWORD(v257) ^ ((v125 ^ 0xA8)
                                                                       + 901616209
                                                                       + ((2 * (v125 ^ 0xA8) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ v187 ^ *(_DWORD *)(v147 + 4 * (v125 ^ 0xC5u)) ^ (v185 - 1008662009 - ((2 * v185) & 0x87C2140E));
  LODWORD(v134) = (v189 + 1950405946 - ((2 * v189) & 0xE881AA74)) ^ v259;
  LODWORD(v53) = *(_DWORD *)&v143[4 * (HIBYTE(v191) ^ 0x6D)];
  HIDWORD(v45) = ~(_DWORD)v53;
  LODWORD(v45) = v53 ^ 0xB5C31F8C;
  LODWORD(v53) = v45 >> 1;
  LODWORD(v127) = *(_DWORD *)&v143[4 * (BYTE3(v134) ^ 0xFD)];
  v192 = *(_DWORD *)(v145 + 4 * (BYTE2(v191) ^ 0x52u)) ^ (~(_DWORD)v127 << 31) ^ (v127 >> 1) ^ ((BYTE2(v191) ^ 0xE) + 1189723660 - 2 * ((BYTE2(v191) ^ 0xE) & 0x1C ^ HIWORD(v191) & 0x10));
  LODWORD(v125) = ((v191 ^ 0x4A)
                 + 901616209
                 + ((2 * (v191 ^ 0x4A) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ *(_DWORD *)(v147
                                                                                                  + 4 * (v191 ^ 0x27u));
  LODWORD(v127) = (_DWORD)v125 - 1008662009 - ((2 * (_DWORD)v125) & 0x87C2140E);
  LODWORD(v125) = ((_DWORD)v128 - ((2 * (_DWORD)v128) & 0xA9B69484) - 723826110) ^ HIDWORD(v258);
  LODWORD(v128) = (v192 ^ 0x5AE18FC6) - 1008662009 - 2 * ((v192 ^ 0x5AE18FC6) & 0x43E10A17 ^ v192 & 0x10);
  v193 = *(_DWORD *)&v143[4 * ((v125 >> 24) ^ 0x2B)];
  HIDWORD(v45) = ~v193;
  LODWORD(v45) = v193 ^ 0xB5C31F8C;
  v194 = (v45 >> 1) ^ *(_DWORD *)(v151 + 4 * (BYTE1(v134) ^ 0xA4u)) ^ v127;
  LODWORD(v53) = *(_DWORD *)(v145 + 4 * (BYTE2(v125) ^ 0x8Fu)) ^ v53 ^ *(_DWORD *)(v147
                                                                                   + 4
                                                                                   * (v134 ^ 0x4Du)) ^ ((v134 ^ 0x20) + 901616209 + ((2 * (v134 ^ 0x20) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ ((BYTE2(v125) ^ 0xD3) + 1189723660 - ((v125 >> 15) & 0x18));
  LODWORD(v128) = ((v43 ^ 0x34)
                 + 901616209
                 + ((2 * (v43 ^ 0x34) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ *(_DWORD *)(v147
                                                                                                 + 4
                                                                                                 * (v43 ^ 0x59u)) ^ *(_DWORD *)(v151 + 4 * (BYTE1(v125) ^ 0xC5u)) ^ v128;
  v195 = ((v125 ^ 0xC7) + 1560267911 + ((2 * (v125 ^ 0xC7) + 14) & 0xE ^ 0xFDFFFBFF)) ^ *(_DWORD *)(v151 + 4 * (BYTE1(v191) ^ 0x65u));
  v196 = (v195 - 1667313711 - ((2 * v195) & 0x393D9FA2)) ^ *(_DWORD *)(v147 + 4 * (v125 ^ 0xAAu));
  LODWORD(v134) = *(_DWORD *)(v145 + 4 * (BYTE2(v134) ^ 0x40u)) ^ ((BYTE2(v134) ^ 0x1C)
                                                                   + 1189723660
                                                                   - 2
                                                                   * ((WORD1(v134) ^ 0xFD1C) & 0xD ^ WORD1(v134) & 1));
  LODWORD(v125) = v134 ^ 0xD292F9F6 ^ (v196 - 1852845787 - ((2 * v196) & 0x231FA24A));
  v196 ^= 0x6500C283u;
  LODWORD(v125) = (v196 + (_DWORD)v125 + 1) ^ ((v134 ^ 0x261DEA50) + 1);
  v197 = BYTE2(v43) ^ *(_DWORD *)(v145 + 4 * (BYTE2(v43) ^ 0x24u)) ^ (v194 + 1189723660 - ((2 * v194) & 0x8DD37C18)) ^ 0x78;
  LODWORD(v134) = (v134 ^ 0x486DC48A ^ ((_DWORD)v125 - 1852845787 - ((2 * (_DWORD)v125) & 0x231FA24A))) + v196;
  v198 = *(_DWORD *)&v143[4 * (BYTE3(v43) ^ 0x6E)];
  HIDWORD(v45) = ~v198;
  LODWORD(v45) = v198 ^ 0xB5C31F8C;
  LODWORD(v72) = (v197 + 226067426 - ((2 * v197) & 0x1AF307C4)) ^ v256;
  v199 = (v134 ^ (v45 >> 1)) - ((2 * (v134 ^ (v45 >> 1))) & 0x9EDEEC1A);
  LODWORD(v43) = *(_DWORD *)(v151 + 4 * (BYTE1(v43) ^ 0x38u)) ^ HIDWORD(v256) ^ (v53
                                                                                 - 1008662009
                                                                                 - ((2 * v53) & 0x87C2140E));
  LODWORD(v134) = ((_DWORD)v128 + 1062729199 - ((2 * (_DWORD)v128) & 0x7EAFEBDE)) ^ v257;
  v200 = ((BYTE2(v134) ^ 0xE9) + 1189723660 - 2 * ((BYTE2(v134) ^ 0xE9) & 0x1C ^ WORD1(v134) & 0x10)) ^ *(_DWORD *)(v145 + 4 * (BYTE2(v134) ^ 0xB5u));
  LODWORD(v53) = v200 - 1008662009 - ((2 * v200) & 0x87C2140E);
  LODWORD(v128) = (((_BYTE)v128 - 17 - ((2 * (_BYTE)v128) & 0xDE)) ^ v257);
  v201 = *(_DWORD *)&v143[4 * (BYTE3(v72) ^ 0x9D)];
  HIDWORD(v45) = ~v201;
  LODWORD(v45) = v201 ^ 0xB5C31F8C;
  v202 = v45 >> 1;
  v203 = *(_DWORD *)&v143[4 * (BYTE3(v43) ^ 0x61)];
  HIDWORD(v45) = ~v203;
  LODWORD(v45) = v203 ^ 0xB5C31F8C;
  LODWORD(v128) = *(_DWORD *)(v147 + 4 * (v128 ^ 0xC5)) ^ *(_DWORD *)(v145 + 4 * (BYTE2(v72) ^ 0x28u)) ^ (v45 >> 1) ^ ((v128 ^ 0xA8) + 901616209 + ((2 * (v128 ^ 0xA8) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ ((BYTE2(v72) ^ 0x74) + 1189723660 - ((2 * (WORD1(v72) ^ 0x9D74)) & 0x18));
  v204 = (v199 - 814778867) ^ HIDWORD(v255);
  v205 = v202 ^ ((BYTE2(v204) ^ 0xE7) + 1189723660 - ((2 * (HIWORD(v204) ^ 0x2EE7)) & 0x18)) ^ *(_DWORD *)(v145 + 4 * (BYTE2(v204) ^ 0xBBu));
  v206 = v205 - 1008662009 - ((2 * v205) & 0x87C2140E);
  v207 = *(_DWORD *)&v143[4 * (BYTE3(v134) ^ 0xB8)];
  v208 = (_DWORD)v128 - 1008662009 - ((2 * (_DWORD)v128) & 0x87C2140E);
  HIDWORD(v45) = ~v207;
  LODWORD(v45) = v207 ^ 0xB5C31F8C;
  v209 = (v43 ^ 0x85) + 901616209 + ((2 * (v43 ^ 0x85) + 254) & 0x3A2 ^ 0xCFC27BFF);
  LODWORD(v128) = *(_DWORD *)(v147 + 4 * (v204 ^ 0x12u)) ^ *(_DWORD *)(v145
                                                                                        + 4 * (BYTE2(v43) ^ 0x54u)) ^ ((BYTE2(v43) ^ 8) + 1189723660 - 2 * ((BYTE2(v43) ^ 8) & 0x1E ^ WORD1(v43) & 0x12)) ^ (v45 >> 1) ^ ((v204 ^ 0x7F) + 901616209 + ((2 * (v204 ^ 0x7F) + 254) & 0x3A2 ^ 0xCFC27BFF));
  v210 = *(_DWORD *)(v151 + 4 * (BYTE1(v204) ^ 0x58u)) ^ HIDWORD(v254) ^ v208;
  LODWORD(v128) = ((_DWORD)v128 - 1008662009 - ((2 * (_DWORD)v128) & 0x87C2140E)) ^ *(_DWORD *)(v151
                                                                                              + 4
                                                                                              * (BYTE1(v72) ^ 0xBDu));
  v211 = *(_DWORD *)&v143[4 * (HIBYTE(v204) ^ 0x2E)];
  HIDWORD(v45) = ~v211;
  LODWORD(v45) = v211 ^ 0xB5C31F8C;
  LODWORD(v53) = *(_DWORD *)(v147 + 4 * (v72 ^ 0xB4u)) ^ *(_DWORD *)(v151 + 4
                                                                                             * (BYTE1(v43) ^ 0x8Fu)) ^ ((v72 ^ 0xD9) + 901616209 + ((2 * (v72 ^ 0xD9) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ v53;
  LODWORD(v125) = *(_DWORD *)(v147 + 4 * (v43 ^ 0xE8u));
  LODWORD(v43) = ((_DWORD)v128 + 1597141255 - ((2 * (_DWORD)v128) & 0xBE64E20E)) ^ v255;
  LODWORD(v72) = ((v53 ^ (v45 >> 1)) - ((2 * (v53 ^ (v45 >> 1))) & 0x88AF3292) - 1000892087) ^ HIDWORD(v253);
  LODWORD(v53) = *(_DWORD *)(v151 + 4 * (BYTE1(v134) ^ 0x2Du)) ^ v254 ^ v125 ^ v209 ^ v206;
  LODWORD(v134) = *(_DWORD *)&v143[4 * (BYTE3(v72) ^ 0xFB)];
  HIDWORD(v45) = ~(_DWORD)v134;
  LODWORD(v45) = v134 ^ 0xB5C31F8C;
  v212 = ((BYTE2(v53) ^ 0x66) + 1189723660 - 2 * ((WORD1(v53) ^ 0xAE66) & 0xD ^ WORD1(v53) & 1)) ^ *(_DWORD *)(v145 + 4 * (BYTE2(v53) ^ 0x3Au));
  LODWORD(v134) = ((v45 >> 1) + 1189723660 - ((2 * (v45 >> 1)) & 0x8DD37C18)) ^ *(_DWORD *)(v145
                                                                                          + 4 * (BYTE2(v43) ^ 0x40u));
  LODWORD(v127) = *(_DWORD *)&v143[4 * (BYTE3(v43) ^ 0xEF)];
  HIDWORD(v45) = ~(_DWORD)v127;
  LODWORD(v45) = v127 ^ 0xB5C31F8C;
  LODWORD(v128) = (v45 >> 1) ^ *(_DWORD *)(v147 + 4 * (v72 ^ 0x26u)) ^ ((v72 ^ 0x4B)
                                                                                         + 901616209
                                                                                         + ((2
                                                                                           * (v72 ^ 0x4B)
                                                                                           + 254) & 0x3A2 ^ 0xCFC27BFF));
  LODWORD(v127) = ((v210 ^ 0x4A)
                 + 901616209
                 + ((2 * (v210 ^ 0x4A) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ *(_DWORD *)(v147
                                                                                                  + 4 * (v210 ^ 0x27u));
  v213 = *(_DWORD *)&v143[4 * (BYTE3(v53) ^ 0xAE)];
  HIDWORD(v45) = ~v213;
  LODWORD(v45) = v213 ^ 0xB5C31F8C;
  LODWORD(v127) = (v45 >> 1) ^ *(_DWORD *)(v145 + 4 * (BYTE2(v72) ^ 0x1Du)) ^ (v127
                                                                               + 1189723660
                                                                               - ((2 * v127) & 0x8DD37C18));
  v214 = *(_DWORD *)&v143[4 * (HIBYTE(v210) ^ 0xDC)];
  HIDWORD(v45) = ~v214;
  LODWORD(v45) = v214 ^ 0xB5C31F8C;
  v215 = v134 - 1008662009 - ((2 * v134) & 0x87C2140E);
  LODWORD(v134) = ((BYTE2(v210) ^ 0xE) + 1189723660 - ((2 * (HIWORD(v210) ^ 0xDC0E)) & 0x18)) ^ v253 ^ *(_DWORD *)(v145 + 4 * (BYTE2(v210) ^ 0x52u)) ^ *(_DWORD *)(v151 + 4 * (BYTE1(v53) ^ 0x7Cu)) ^ ((_DWORD)v128 - 1008662009 - ((2 * (_DWORD)v128) & 0x87C2140E));
  LODWORD(v53) = v53;
  v216 = (v53 ^ 0xB3) + 901616209 + ((2 * (v53 ^ 0xB3) + 254) & 0x3A2 ^ 0xCFC27BFF);
  LODWORD(v128) = *(_DWORD *)(v147 + 4 * (v53 ^ 0xDEu));
  LODWORD(v53) = *(_DWORD *)(v151 + 4 * (BYTE1(v72) ^ 0x52u)) ^ HIDWORD(v252) ^ *(_DWORD *)(v147
                                                                                            + 4
                                                                                            * (v43 ^ 0x4Du)) ^ (v45 >> 1) ^ ((v43 ^ 0x20) + 901616209 + ((2 * (v43 ^ 0x20) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ (v212 - 1008662009 - ((2 * v212) & 0x87C2140E));
  v217 = v215 ^ HIDWORD(v251) ^ *(_DWORD *)(v151 + 4 * (BYTE1(v210) ^ 0x65u)) ^ v128 ^ v216;
  LODWORD(v125) = *(_DWORD *)(v151 + 4 * (BYTE1(v43) ^ 0xA4u)) ^ v252 ^ (v127 - 1008662009 - ((2 * v127) & 0x87C2140E));
  v218 = (*(_BYTE *)(v151 + 4 * (BYTE1(v43) ^ 0xA4u)) ^ v252 ^ (v127 + 7 - ((2 * v127) & 0xE)) ^ BYTE2(v72));
  v219 = *(_DWORD *)&v143[4 * (HIBYTE(v217) ^ 0x6C)];
  HIDWORD(v45) = ~v219;
  LODWORD(v45) = v219 ^ 0xB5C31F8C;
  LODWORD(v128) = v45 >> 1;
  v220 = *(_DWORD *)&v143[4 * (BYTE3(v134) ^ 0xF7)];
  HIDWORD(v45) = ~v220;
  LODWORD(v45) = v220 ^ 0xB5C31F8C;
  v221 = v45 >> 1;
  LODWORD(v68) = ((BYTE2(v217) ^ 0xC8) + 1189723660 - ((2 * (HIWORD(v217) ^ 0x6CC8)) & 0x18)) ^ *(_DWORD *)(v145 + 4 * (BYTE2(v217) ^ 0x94u));
  LODWORD(v72) = *(_DWORD *)&v143[4 * ((v125 >> 24) ^ 0xE7)];
  HIDWORD(v45) = ~(_DWORD)v72;
  LODWORD(v45) = v72 ^ 0xB5C31F8C;
  LODWORD(v72) = v45 >> 1;
  LODWORD(v128) = v128 ^ *(_DWORD *)(v147 + 4 * (v218 ^ 0xAu)) ^ *(_DWORD *)(v145
                                                                                           + 4 * (BYTE2(v134) ^ 0xB5u)) ^ ((BYTE2(v134) ^ 0xE9) + 1189723660 - ((2 * (WORD1(v134) ^ 0xF7E9)) & 0x18)) ^ ((v218 ^ 0x67) + 901616209 + ((2 * (v218 ^ 0x67) + 254) & 0x3A2 ^ 0xCFC27BFF));
  v222 = ((_DWORD)v128 - 1008662009 - ((2 * (_DWORD)v128) & 0x87C2140E)) ^ *(_DWORD *)(v151 + 4 * (BYTE1(v53) ^ 0xECu));
  LODWORD(v128) = v221 ^ *(_DWORD *)(v145 + 4 * (BYTE2(v53) ^ 0xA7u)) ^ *(_DWORD *)(v147
                                                                                    + 4
                                                                                    * ((v217 ^ BYTE2(v43)) ^ 0x32u)) ^ (((v217 ^ BYTE2(v43)) ^ 0x5F) + 901616209 + ((2 * ((v217 ^ BYTE2(v43)) ^ 0x5F) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ ((BYTE2(v53) ^ 0xFB) + 1189723660 - ((2 * (WORD1(v53) ^ 0x57FB)) & 0x18));
  LODWORD(v43) = *(_DWORD *)&v143[4 * (BYTE3(v53) ^ 0x57)];
  HIDWORD(v45) = ~(_DWORD)v43;
  LODWORD(v45) = v43 ^ 0xB5C31F8C;
  LODWORD(v128) = ((_DWORD)v128 - 1008662009 - ((2 * (_DWORD)v128) & 0x87C2140E)) ^ *(_DWORD *)(v151
                                                                                              + 4
                                                                                              * (BYTE1(v125) ^ 0x6Du));
  LODWORD(v127) = *(_DWORD *)(v151 + 4 * (BYTE1(v134) ^ 0x2Du));
  v223 = ((BYTE2(v125) ^ 0x31) + 1189723660 - ((v125 >> 15) & 0x18)) ^ *(_DWORD *)(v147
                                                                                               + 4
                                                                                               * (v134 ^ 0xC5u)) ^ ((v134 ^ 0xA8) + 901616209 + ((2 * (v134 ^ 0xA8) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ *(_DWORD *)(v145 + 4 * (BYTE2(v125) ^ 0x6Du)) ^ (v45 >> 1);
  LODWORD(v125) = *(_DWORD *)(v147 + 4 * (v53 ^ 0x42u));
  v224 = v245 ^ *(_DWORD *)(v151 + 4 * (BYTE1(v217) ^ 0x61u)) ^ (v223 - 1008662009 - ((2 * v223) & 0x87C2140E));
  LODWORD(v134) = v224 ^ 0xADE748E2;
  LODWORD(v43) = ((_DWORD)v128 - 647044860 - ((2 * (_DWORD)v128) & 0xB2DDC208)) ^ HIDWORD(v247);
  v225 = (v222 + 610419697 - ((2 * v222) & 0x48C487E2)) ^ v251;
  LODWORD(v151) = v127 ^ HIDWORD(a16) ^ v72 ^ v125 ^ ((v53 ^ 0x2F)
                                                                  + 901616209
                                                                  + ((2 * (v53 ^ 0x2F) + 254) & 0x3A2 ^ 0xCFC27BFF)) ^ (v68 - 1008662009 - ((2 * v68) & 0x87C2140E));
  LODWORD(v128) = (v127 ^ BYTE4(a16) ^ v72 ^ v125 ^ ((v53 ^ 0x2F)
                                                                                     + 81
                                                                                     + ~((2 * (v53 ^ 0x2F) - 2) & 0xA2)) ^ (v68 + 7 - ((2 * v68) & 0xE)));
  v226 = *(_DWORD *)(v41 - 120);
  v227 = (uint64_t)*(&off_1E5B5B480 + (int)(v226 - 1818));
  v228 = (char *)*(&off_1E5B5B480 + HIDWORD(v244)) - 4;
  LODWORD(v127) = *(_DWORD *)(v227 + 4 * (v43 ^ 0xA2u));
  v229 = (char *)*(&off_1E5B5B480 + v244) - 4;
  LODWORD(v128) = (*(_DWORD *)&v229[4 * (BYTE2(v43) ^ 0x9E)] - 1012417718) ^ (*(_DWORD *)(v227
                                                                                        + 4
                                                                                        * (v128 ^ 0xC9))
                                                                            + 1292835847);
  LODWORD(v68) = *(_DWORD *)(v227 + 4 * (v224 ^ 0xC8u));
  LODWORD(v147) = v68 - ((2 * v68 + 438188046) & 0x741E212C);
  v230 = (*(_DWORD *)&v229[4 * (BYTE2(v151) ^ 0x38)] - 1012417718) ^ (*(_DWORD *)&v228[4 * (HIBYTE(v224) ^ 0x89)]
                                                                    - 114447658);
  LODWORD(v68) = *(_DWORD *)(v227 + 4 * (((v222 - 15 - ((2 * v222) & 0xE2)) ^ v251) ^ 0xB9u));
  LODWORD(v143) = *(_DWORD *)&v228[4 * (BYTE3(v43) ^ 0xE7)];
  LODWORD(v227) = *(_DWORD *)&v228[4 * (BYTE3(v151) ^ 0xB8)];
  v231 = (uint64_t)*(&off_1E5B5B480 + (int)(v226 - 1680));
  LODWORD(v128) = ((_DWORD)v128 + 974065814 - ((2 * (_DWORD)v128) & 0x741E212C)) ^ *(_DWORD *)(v231
                                                                                             + 4
                                                                                             * (BYTE1(v134) ^ 0x29u)) ^ (*(_DWORD *)&v228[4 * (HIBYTE(v225) ^ 0x65)] - 114447658);
  LODWORD(v228) = *(_DWORD *)(v231 + 4 * (BYTE1(v43) ^ 0xA0u));
  v232 = *(unsigned int *)(v231 + 4 * (BYTE1(v151) ^ 0xE9u));
  LODWORD(v43) = *(_DWORD *)(v231 + 4 * (BYTE1(v225) ^ 0x74u));
  LODWORD(v231) = *(_DWORD *)&v229[4 * (BYTE2(v134) ^ 0x6B)];
  LODWORD(v134) = *(_DWORD *)&v229[4 * (BYTE2(v225) ^ 0x1D)];
  LODWORD(v43) = v43 ^ v247 ^ ((v230 ^ (v127 + 1292835847))
                             + 974065814
                             - ((2 * (v230 ^ (v127 + 1292835847))) & 0x741E212C));
  v233 = v247 ^ HIDWORD(a16) ^ v251 ^ ((_DWORD)v128 + 610419697 - ((2 * (_DWORD)v128) & 0x48C487E2));
  v234 = v228 ^ v247 ^ HIDWORD(a16) ^ (v147 - 2028065635) ^ (v227 - 114447658);
  v235 = (uint64_t)*(&off_1E5B5B480 + (int)(v226 - 1741));
  a1[*(_QWORD *)(v41 - 248)] = *(_BYTE *)(v235 + (BYTE1(v43) ^ 0x99)) ^ 0xEE;
  v236 = (uint64_t)*(&off_1E5B5B480 + (int)(v226 - 1796));
  a1[*(_QWORD *)(v41 - 240)] = (*(_BYTE *)(v236 + (BYTE2(v233) ^ 0xADLL)) + 49) ^ 0xC5;
  v237 = (char *)*(&off_1E5B5B480 + v243) - 12;
  LODWORD(v134) = v234 ^ (v134 - 1012417718);
  a1[*(_QWORD *)(v41 - 200)] = v237[v43 ^ 0xFCLL] ^ 0x59;
  a1[*(_QWORD *)(v41 - 208)] = (*(_BYTE *)(v236 + (BYTE2(v134) ^ 0x8CLL)) + 49) ^ 0x47;
  v238 = (uint64_t)*(&off_1E5B5B480 + HIDWORD(a6));
  a1[*(_QWORD *)(v41 - 224)] = (*(_BYTE *)(v238 + (BYTE3(v43) ^ 0xDELL)) - 54) ^ 0x1B;
  a1[*(_QWORD *)(v41 - 232)] = ((*(_BYTE *)(v236 + (BYTE2(v43) ^ 0x15))
                               + ((*(_BYTE *)(v236 + (BYTE2(v43) ^ 0x15)) + 49) ^ 0xDA)
                               + 50) ^ 0xFE)
                             + *(_BYTE *)(v236 + (BYTE2(v43) ^ 0x15))
                             + 49;
  LODWORD(v128) = (_DWORD)v143 - ((2 * (_DWORD)v143 + 1918588332) & 0x741E212C);
  v239 = HIDWORD(v243) ^ v232;
  v240 = v239 ^ ((_DWORD)v231 - 1012417718) ^ ((_DWORD)v68 + 1292835847) ^ ((_DWORD)v128 + 859618156);
  a1[*(_QWORD *)(v41 - 216)] = v237[v240 ^ 5] ^ 0xAB;
  v241 = *(_QWORD *)(v41 - 176);
  a1[*(_QWORD *)(v41 - 168)] = (*(_BYTE *)(v238 + (HIBYTE(v233) ^ 0x4ELL)) - 54) ^ 0xE6;
  a1[*(_QWORD *)(v41 - 160)] = (*(_BYTE *)(v238 + (BYTE3(v134) ^ 0x9CLL)) - 54) ^ 0xB8;
  a1[v241] = (*(_BYTE *)(v238 + (BYTE3(v240) ^ 0x67)) - 54) ^ 0x91;
  a1[*(_QWORD *)(v41 - 144)] = v237[v134 ^ 0xF2] ^ 0xA1;
  a1[*(_QWORD *)(v41 - 192)] = *(_BYTE *)(v235 + (BYTE1(v134) ^ 0x1ELL)) ^ 0x4D;
  a1[*(_QWORD *)(v41 - 152)] = *(_BYTE *)(v235 + (BYTE1(v240) ^ 0x33)) ^ 0x54;
  a1[*(_QWORD *)(v41 - 184)] = *(_BYTE *)(v235 + (BYTE1(v233) ^ 0xBCLL)) ^ 0x9A;
  a1[*(_QWORD *)(v41 - 136)] = v237[v233 ^ 0x9FLL] ^ 0x59;
  a1[*(_QWORD *)(v41 - 128)] = (*(_BYTE *)(v236 + (BYTE2(v240) ^ 0xDLL)) + 49) ^ 0x8E;
  return ((uint64_t (*)(uint64_t, _QWORD, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a38 + 8 * (int)((61 * ((((_DWORD)v241 - 923450276 - 2 * (((_DWORD)v241 + 16) & 0x48F5444D ^ *(_DWORD *)(v41 - 252) & 1)) ^ 0xC8F5444C) >= a36)) ^ (v226 - 597))) - 12))(v235, v226, v237, 5, 89, v240, v239, v232, a2, a3, a4, a1, a6, v243, v244, v245, v246, v247, v248,
           v249,
           v250,
           v124,
           a16,
           v251,
           v252,
           v253,
           v254,
           v255,
           v256,
           v257,
           v258,
           v259,
           v260,
           v261,
           v262);
}

void sub_1AC1DB7F4()
{
  JUMPOUT(0x1AC1D940CLL);
}

uint64_t sub_1AC1DB828(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((283 * ((((a6 + 404) ^ (v6 == a4)) & 1) == 0)) ^ a6))
                            - ((a6 + 1821) ^ 0x779)))();
}

uint64_t sub_1AC1DB864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v10
                                                                               + 8
                                                                               * ((963
                                                                                 * ((((((a8 - 483) | 0x742) ^ 0xFFFFFFD0)
                                                                                    + ((a8 + 1224930697) & 0xB6FD0FFF)) & v9) != 0)) ^ a8)))(a1, a2, a3, a4, (v8 - a4));
}

uint64_t sub_1AC1DB8BC@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W5>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  char v47;
  int v48;
  uint64_t v49;
  int v50;
  char v51;
  uint64_t v52;
  int8x16x4_t v54;

  *(_DWORD *)(v49 - 120) = v48;
  *(_DWORD *)(v49 - 128) = v46;
  *(_DWORD *)(v49 - 136) = v46 & 0xFFFFFFF8;
  v50 = -8 - a4;
  v51 = v47 + a2 + a1;
  v52 = (a2 + a1 + a3 + v50 + 8);
  v54.val[0].i64[0] = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)a3 + (_BYTE)v50 + 8) & 0xF;
  v54.val[0].i64[1] = (v51 + 6 + (_BYTE)v50 + 8) & 0xF;
  v54.val[1].i64[0] = (v51 + 5 + (_BYTE)v50 + 8) & 0xF;
  v54.val[1].i64[1] = (v45 + (_BYTE)v50 + 8 + ((a5 - 95) ^ 0xC)) & 0xF;
  v54.val[2].i64[0] = (v51 + 3 + (_BYTE)v50 + 8) & 0xF;
  v54.val[2].i64[1] = (v51 + 2 + (_BYTE)v50 + 8) & 0xF;
  v54.val[3].i64[0] = (v51 + 1 + (_BYTE)v50 + 8) & 0xF;
  v54.val[3].i64[1] = (v45 + (_BYTE)v50 + 8) & 0xF;
  *(int8x8_t *)(a6 - 7 + v52) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v42 + (v52 & 0xF) - 7), *(int8x8_t *)(a6 - 7 + v52)), veor_s8(*(int8x8_t *)((v52 & 0xF) + v44 - 5), *(int8x8_t *)((v52 & 0xF) + v43 - 3))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v54, (int8x16_t)xmmword_1AC3B5870), (int8x8_t)0x7777777777777777)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a42 + 8 * ((240 * (-(v46 & 0xFFFFFFF8) == v50)) ^ a5)) - 4))((__n128)xmmword_1AC3B5870);
}

void sub_1AC1DB9FC()
{
  JUMPOUT(0x1AC1DB910);
}

uint64_t sub_1AC1DBA04()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)((((((v0 + 137) | 0x500) - 822) ^ (v0 + 1872633359) & 0x9061E779)
                                     * (*(_DWORD *)(v2 - 128) == *(_DWORD *)(v2 - 136))) ^ v0)))();
}

uint64_t sub_1AC1DBA54@<X0>(int a1@<W4>, int a2@<W6>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(a3 + (v6 + a1 + 52)) ^= *(_BYTE *)(v4 + ((v6 + a1 + 52) & 0xFLL)) ^ *(_BYTE *)((((_BYTE)v6 + (_BYTE)a1 + 52) & 0xF) + v7 + 2) ^ *(_BYTE *)((((_BYTE)v6 + (_BYTE)a1 + 52) & 0xF) + v5 + 4) ^ (119 * ((v6 + a1 + 52) & 0xF));
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((79 * (a1 - 1 == v3)) ^ (a2 - 1878))) - 8))();
}

void sub_1AC1DBABC()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 1204956337)
    v1 = 2000528784;
  else
    v1 = -2000486840;
  *(_DWORD *)(v2 + 32) = v1;
}

void Mib5yocT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  int v12;

  if (a2)
    v8 = a3 == 0;
  else
    v8 = 1;
  v12 = !v8 && a6 != 0 && a7 != 0 && a8 != 0;
  __asm { BR              X9 }
}

uint64_t sub_1AC1DBBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21,int a22)
{
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;

  *a6 = 0;
  *a7 = 0;
  a21 = (535753261 * ((&a21 & 0x95716CF5 | ~(&a21 | 0x95716CF5)) ^ 0x607A9D25)) ^ 0xE1F2694A;
  v27 = v22;
  v25 = sub_1AC1F43A8(&a21);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v27 + 8 * ((1829 * (a22 == ((v23 - 145) ^ 0x16F))) ^ v24))
                                          - 12))(v25);
}

uint64_t sub_1AC1DBC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t *a21,int a22,int a23,unsigned int a24)
{
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v26 = 1225351577 * ((&a21 & 0xAADF8020 | ~(&a21 | 0xAADF8020)) ^ 0x76BAA7C9);
  LODWORD(a21) = v26 + 1166651523;
  HIDWORD(a21) = (v24 + 189) ^ v26;
  a23 = v26 ^ 0x4ED7E0EF;
  a24 = v26 + 1461415967;
  ((void (*)(unint64_t **))*(&off_1E5B5B480 + (v24 ^ 0x142)))(&a21);
  HIDWORD(a11) = a22;
  a23 = v24 - 460628867 * ((2 * (&a21 & 0x134113C0) - &a21 - 323032006) ^ 0xA0286E47) + 717;
  a21 = &STACK[0x5DFEEBD0571B625A];
  sub_1AC1C27D8((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a14 + 8 * (((8 * ((v24 ^ 0x12 ^ (a22 == ((v24 + 740) ^ 0x773DA1C3))) & 1)) & 0xEF | (16 * ((v24 ^ 0x12 ^ (a22 == ((v24 + 740) ^ 0x773DA1C3))) & 1))) ^ v24)) - 12))(v27, v28, v29, v30, v31, v32, v33, v34, a9, v25, a11, a12, a13, a14);
}

uint64_t sub_1AC1DBDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,uint64_t a23,unsigned int a24,uint64_t a25)
{
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  void (*v32)(int *);
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;

  v31 = 1178560073 * ((2 * (&a21 & 0x668DD7B8) - &a21 - 1720571836) ^ 0x23E65026);
  a23 = a16;
  a22 = v31 + 1510368783 * v29 + 858567209;
  a24 = (v30 - 52) ^ v31;
  v32 = (void (*)(int *))((char *)*(&off_1E5B5B480 + (int)(v30 - 1035)) - 8);
  v32(&a21);
  a23 = a16;
  a25 = v28;
  a24 = v30 + 1224239923 * (((&a21 | 0xD2DFFD2E) - (&a21 & 0xD2DFFD2E)) ^ 0x206C00F9) - 277;
  ((void (*)(int *))*(&off_1E5B5B480 + (int)(v30 - 935)))(&a21);
  v33 = 1178560073
      * (((&a21 | 0x47017ED0) - &a21 + (&a21 & 0xB8FE8128)) ^ 0xFD9506B2);
  a23 = a16;
  a22 = v33 + 1510368783 * v27 + ((75 * (v30 ^ 0x456)) ^ 0x332CB35E);
  a24 = (v30 - 52) ^ v33;
  v32(&a21);
  v34 = 1178560073
      * ((((2 * (&a21 ^ 0x5C83A2C3)) | 0xE648D27A) - (&a21 ^ 0x5C83A2C3) + 215717571) ^ 0x1533B39C);
  a25 = v25;
  a24 = v34 ^ ((v26 ^ 0x5DE374D5) - 1163923604 + ((2 * v26) & 0xBBC6E9AA));
  a22 = v34 + v30 - 780;
  a23 = a16;
  v35 = ((uint64_t (*)(int *))((char *)*(&off_1E5B5B480 + (int)(v30 - 962)) - 8))(&a21);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a14
                                                      + 8
                                                      * (((2 * (a21 != 2000528784)) | (4 * (a21 != 2000528784))) ^ v30))
                                          - 8))(v35);
}

uint64_t sub_1AC1DBFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t *a22,unsigned int a23,int a24,uint64_t a25,int a26,int a27)
{
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;

  v29 = v28 ^ 6;
  if (a12 < 0x16C268B8)
    v30 = 150565725;
  else
    v30 = 150565726;
  v31 = 628203409
      * ((((&a22 | 0x7BD09CDA) ^ 0xFFFFFFFE) - (~&a22 | 0x842F6325)) ^ 0x6A76F16);
  a25 = a17;
  a27 = v31 ^ 0x5512BD74;
  a22 = &STACK[0x4414279470ECFED6];
  a23 = v30 - v31;
  a24 = v29 - v31 - 2024874192;
  v32 = sub_1AC1F4558((uint64_t)&a22);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a15
                                                      + 8
                                                      * ((973 * (a26 == v27 + (((v28 ^ 6) - 834) | 0x64) - 375)) ^ v29))
                                          - (v29 + 192)
                                          + 1293))(v32);
}

uint64_t sub_1AC1DC0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,unint64_t *a24,unint64_t *a25,unsigned int a26)
{
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;

  a23 = a19;
  a24 = &STACK[0x75270371B306044B];
  a26 = (v27 - 1141) ^ (1225351577
                      * ((((&a22 | 0xCA8B45DE) ^ 0xFFFFFFFE) - (~&a22 | 0x3574BA21)) ^ 0x16EE6237));
  a25 = &STACK[0x6E853F5AFCAB5976];
  v29 = v26;
  v30 = ((uint64_t (*)(char *))*(&off_1E5B5B480 + v27 - 1249))(&a22);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v29
                                                      + 8 * (((((v27 - 1120) | 0x40) ^ 0x3CA) * (a12 < v28)) ^ v27))
                                          - 12))(v30);
}

uint64_t sub_1AC1DC1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _BYTE *a18, uint64_t a19, int a20,char a21,unsigned int a22,char *a23,_BYTE *a24)
{
  char *v24;
  char *v25;
  int v26;
  int v27;
  void (*v28)(unsigned int *);
  uint64_t v29;
  int v30;
  uint64_t v31;

  a22 = (v26 - 836) ^ ((((&a22 | 0x8EADD9B1) - &a22 + (&a22 & 0x71522648)) ^ 0xE359C1B8)
                     * v27);
  v30 = 49 * (v26 ^ 0x510);
  a23 = &a21 + v29;
  a24 = a18;
  v28(&a22);
  a23 = v25;
  a24 = a18;
  a22 = (v30 + 220) ^ (((2 * (&a22 & 0x661E85A0) - &a22 + 434207323) ^ 0x74156252) * v27);
  v28(&a22);
  a22 = (v30 + 220) ^ (((((2 * &a22) | 0x8EA60170) - &a22 - 1196622008) ^ 0x2AA718B1) * v27);
  a23 = v24;
  a24 = a18;
  v28(&a22);
  a22 = (v30 - 58) ^ (1755732067
                    * (((&a22 | 0x3543FCEF) - &a22 + (&a22 & 0xCABC0310)) ^ 0xEB854134));
  a23 = a18;
  v31 = sub_1AC1BE024((uint64_t)&a22);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a14
                                                      + 8
                                                      * ((569
                                                        * ((_DWORD)a24 == ((v30 - 1399809046) & 0x536F6775) + 2000527675)) ^ v30))
                                          - 4))(v31);
}

uint64_t sub_1AC1DC394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  uint64_t v20;
  int v21;
  int v22;

  return ((uint64_t (*)(void))(*(_QWORD *)(v20
                                        + 8 * ((1401 * (a20 == v21 + ((v22 - 1234103800) & 0x498EEDF6) - 244)) ^ v22))
                            - 4))();
}

uint64_t sub_1AC1DC3DC@<X0>(unsigned int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, uint64_t a7, int a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  uint64_t v14;
  int v15;

  *a6 = a9 ^ 0x90;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((a14 == v15) ^ a1)) - ((((a1 - 127) | 0x80) + 864) ^ 0x451)))();
}

uint64_t sub_1AC1DC428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int v14;
  int v15;
  unsigned __int8 v16;
  int v17;
  BOOL v18;

  v18 = ((uint64_t (*)(_QWORD, uint64_t))*(&off_1E5B5B480 + v17 - 19))((v15 + ((v17 - 213) | 0x6D8) - 1784) ^ v14, 1644418179) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(a14 + 8 * ((279 * ((v16 ^ v18) & 1)) ^ v17)) - 4))();
}

uint64_t sub_1AC1DC490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20)
{
  int v20;
  int v21;
  uint64_t v22;
  int v23;

  v23 = ((v20 - 1752) | 0xD5) + (a20 ^ v21) - ((v20 + 1353322874) & (2 * (a20 ^ v21))) - 1470821564;
  return ((uint64_t (*)(void))(*(_QWORD *)(v22
                                        + 8
                                        * ((448
                                          * (((2 * v23) & 0xE76FF3F6 ^ 0x402A1072) + (v23 ^ 0x5BE2F5C2) + 1870557120 != 1664510395)) ^ v20))
                            - 4))();
}

uint64_t sub_1AC1DC524(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4
                                                      + 8
                                                      * ((((((v2 + v1 + 206046725) < 8) ^ (3 * ((v3 - 67) ^ 0x6A))) & 1)
                                                        * ((v3 - 1603) ^ 0x157)) ^ (v3 - 1603)))
                                          - 4))(a1);
}

uint64_t sub_1AC1DC59C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4
                                                                       + 8
                                                                       * (v3 ^ (62 * ((unint64_t)(v1 - a1) < 0x20))))
                                                           - ((v3 + 704562258) & 0xD6013DFE ^ 0x4E6)))(a1, (v3 - 270927518) & 0x72AFB7EB, v2);
}

uint64_t sub_1AC1DC5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  unsigned int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (a6 ^ (497 * (v7 < 0x20))))
                            - (((a6 ^ 0xFFu) - v6 - 384) ^ 0x6289B3E7)))();
}

uint64_t sub_1AC1DC63C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v11 = v9 + v8 + a5;
  v12 = v5 + v11;
  v13 = *(_OWORD *)(v12 - 31);
  v14 = a1 + v11;
  *(_OWORD *)(v14 - 15) = *(_OWORD *)(v12 - 15);
  *(_OWORD *)(v14 - 31) = v13;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * (int)((((v7 & 0xFFFFFFE0) == 32) * (((a2 + 319884978) & 0x8A653DFF) + 897)) ^ (a2 + v6)))
                            - 4))();
}

void sub_1AC1DC6A4()
{
  JUMPOUT(0x1AC1DC664);
}

uint64_t sub_1AC1DC6B0(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  void (*v4)(_BYTE *);
  int v5;
  _DWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[4];
  unsigned int v12;
  uint64_t v13;

  v5 = (v1 - 176) | 0x410;
  *v8 = a1;
  *v7 = v2;
  v12 = v5
      + 535753261
      * (((v11 | 0xF9E1E3D5) - v11 + (v11 & 0x61E1C28)) ^ 0xF315EDFA)
      - 703;
  v13 = v10;
  v4(v11);
  v12 = v5
      - 734
      + 535753261
      * (((v11 | 0x2FD635A4) - v11 + (v11 & 0xD029CA58)) ^ 0x25223B8B)
      + 31;
  v13 = v9;
  v4(v11);
  return v3 ^ 0x773DA590u;
}

uint64_t sub_1AC1DC940(_DWORD *a1)
{
  unsigned int v1;
  int v2;
  int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;

  v1 = 108757529 * ((2 * (a1 & 0xA7DF62A) - (_DWORD)a1 + 1971456469) ^ 0x951E6BFE);
  v2 = a1[4] ^ v1;
  v3 = *a1 ^ v1;
  v5 = v3 - 145591971;
  v4 = v3 - 145591971 < 0;
  LODWORD(v6) = 145591971 - v3;
  if (v4)
    v6 = v6;
  else
    v6 = v5;
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B5B480 + v2 - 327)
                              + (((v6 == ((2 * (_DWORD)v6) & 0xC9732272)) * ((v2 + 22) ^ 0x195)) ^ v2))
                            - 4))();
}

void sub_1AC1DC9F8(int a1@<W8>)
{
  uint64_t v1;

  *(_DWORD *)(v1 - 0x4E242FFD6E71642FLL) = a1;
}

void sub_1AC1DCA6C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (1755732067 * ((a1 - 2 * (a1 & 0x7A08EF3) + 127962867) ^ 0xD9663328));
  __asm { BR              X9 }
}

uint64_t sub_1AC1DCAF4@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(a1 + 8 * (((*(_DWORD *)(v2 - 0x55F9EC3874D1DF27) == 2000528784) * (v1 + 964)) ^ v1)))();
}

uint64_t sub_1AC1DCB30@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v3 = ((v1 + 1871490757) & 0x9073557B ^ 0x3EEEAD66) + *(_DWORD *)(v2 - 0x55F9EC3874D1DF2FLL);
  v4 = *(_DWORD *)(v2 - 0x55F9EC3874D1DF33) - 73524547;
  v5 = v3 < 0x5DC95EAD;
  v6 = v3 > v4;
  if (v4 < 0x5DC95EAD != v5)
    v6 = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((7 * v6) ^ (v1 + 281))) - 8))();
}

uint64_t sub_1AC1DCBD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  v7 = *(_QWORD *)(v4 - 0x55F9EC3874D1DF3FLL);
  v8 = *(unsigned __int8 *)(v7 + (v3 - 517650069)) ^ 0x75;
  v9 = ((*(unsigned __int8 *)(v7 + (((v6 ^ 0x579) + 196) ^ 0xE12549AE) + v3) ^ 0x75) << 24) | ((*(unsigned __int8 *)(v7 + (v3 - 517650071)) ^ (-99 * (v6 ^ 0x79) + 59)) << 16) | ((*(unsigned __int8 *)(v7 + (v3 - 517650070)) ^ 0x75) << 8) | v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(a2
                                        + 8
                                        * ((255
                                          * (((v2 + v9 - 2 * (v9 & (v2 + 32) ^ v8 & 0x20) + 0x1000000) & 0xFFFFFF ^ 0x3DA590)
                                           - (*(_DWORD *)(a1 + 32) ^ v5) != -1040287096)) ^ v6))
                            - 8))();
}

void sub_1AC1DCCC0()
{
  _DWORD *v0;

  *v0 = -2000486747;
}

uint64_t sub_1AC1DCF5C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v1 = 1759421093 * ((-870162447 - (a1 | 0xCC225FF1) + (a1 | 0x33DDA00E)) ^ 0x80A0105A);
  v2 = *(_DWORD *)(a1 + 12) - v1;
  v3 = *(_DWORD *)(a1 + 16) - v1;
  if (v3 < 0)
    v3 = -v3;
  v4 = *(_DWORD *)(*(_QWORD *)a1 - 0x4E242FFD6E71642FLL);
  v6 = v4 - 1115729964;
  v5 = v4 - 1115729964 < 0;
  v7 = 1115729964 - v4;
  if (!v5)
    v7 = v6;
  return ((uint64_t (*)(void))(*((_QWORD *)*(&off_1E5B5B480 + (v2 ^ 0x2E6)) + ((1394 * (v3 >> 5 < v7)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC1DD018@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v4 = ((*(_DWORD *)(*(_QWORD *)(v2 - 0x4E242FFD6E71642BLL) + 4 * v3) ^ 0xC1037AD6) >> a2) ^ 0x3302E2B5;
  v5 = (v4 & 0xACC3BB9B) - (v4 & 0x882B013) + (v4 & 0x882B013 ^ 0x58A2B477);
  *(_DWORD *)(result + 8) = ((v4 & 0xACC3BB9A ^ 0x78A016E6 ^ v5)
                           - ((2 * (v4 & 0xACC3BB9A ^ 0x78A016E6 ^ v5)) & 0x33A28790)
                           + 433144776) ^ 0xD9BAAD14;
  return result;
}

uint64_t sub_1AC1DD0C0(uint64_t result)
{
  *(_DWORD *)(result + 8) = -529970100;
  return result;
}

uint64_t sub_1AC1DD0D0(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(qword_1E5B57340[(35 * (*(_DWORD *)(a2 + 4) == 2038179983)) ^ 0x7D5u] - 12))();
}

uint64_t sub_1AC1DD10C(uint64_t a1, uint64_t a2)
{
  char v2;

  if (**(_BYTE **)(a2 + 8))
    v2 = 65;
  else
    v2 = 63;
  *(_BYTE *)(a1 + 88) = ((**(_BYTE **)(a2 + 8) != 0) ^ 0xCF) + v2;
  return 0;
}

uint64_t sub_1AC1DD140()
{
  return 4294925278;
}

void sub_1AC1DD148(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v1 = 628203409 * (((a1 | 0x89B748DF) - a1 + (a1 & 0x7648B720)) ^ 0xB3F44EC);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 24) - 0x4538BCA7D8F185B7) + 1254161065;
  v3 = *(_DWORD *)(a1 + 20) + v1 - 857938618;
  v4 = v2 < 0x31BFD023;
  v5 = v2 > v3;
  if (v3 < 0x31BFD023 != v4)
    v5 = v4;
  __asm { BR              X12 }
}

uint64_t sub_1AC1DD224(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((*(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + (v3 + 419506821))
                                             - (((4 * ((v1 + 220) ^ 0x275)) ^ 0x2E8) & (2
                                                                                      * *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + (v3 + 419506821))))
                                             + 924252542) & 0x1F) != 1)
                                          * (((v1 + 220) ^ 0x7F0) - 814)) ^ (v1 + 220)))
                            - 4))();
}

uint64_t sub_1AC1DD290()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  _BOOL4 v5;

  v4 = (((v3 ^ 0x526) + 1724) ^ 0xF555D04E) + v2;
  if (v0 + 2003943752 < 14 * (v3 ^ 0x526u) - 598431215 != v4 < 0xDC54AC25)
    v5 = v4 < 0xDC54AC25;
  else
    v5 = v4 > v0 + 2003943752;
  return (*(uint64_t (**)(void))(v1 + 8 * ((27 * v5) ^ v3)))();
}

uint64_t sub_1AC1DD30C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;

  v5 = *(unsigned __int8 *)(v1 + (v3 + 1));
  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 8 * (int)((476 * (v5 >> 7)) ^ v4)))(a1, ((v5 << (76 * (v4 ^ 0xE5) - 19)) & 0x17E) + (v5 ^ 0x7F7EBBBF) - 100832049);
}

uint64_t sub_1AC1DD380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * ((1995
                                          * ((((a5 - 220) ^ 0x2F8) & (2 * (v6 + 65)))
                                           + ((v6 + 65) & 0x7F ^ 0xDFCCFEF6)
                                           + 540213513 < 4)) ^ a5))
                            - 4))();
}

uint64_t sub_1AC1DD3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _BOOL4 v13;
  _BOOL4 v14;

  v12 = v10 + a8 + 133276642;
  v13 = v12 < (((v11 - 276) | 0xF1) ^ 0xCEBD79A0);
  v14 = v12 > v8 + 1775930740;
  if ((v8 + 1775930740) < 0xCEBD7851 != v13)
    v14 = v13;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((4 * !v14) | (!v14 << 6)) ^ v11)) - 12))();
}

uint64_t sub_1AC1DD45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v13 = *(unsigned __int8 *)(v8 + (v11 + v10 + 2));
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v9 + 8 * (v12 ^ (1104 * (a8 != -540213513)))) - 12))(a1, ((v12 + 35) ^ 0x368) + (v13 ^ 0xF97E6B8E) + ((2 * v13) & 0x11C) + 2147335044);
}

uint64_t sub_1AC1DD4E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v11 = *(unsigned __int8 *)(v6 + (v9 + a5)) | (a2 << 8);
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v7
                                                              + 8 * (((v8 - 1 == a6) | (2 * (v8 - 1 == a6))) ^ v10))
                                                  - 4))(a1, ((v11 - 2083032576) ^ 0x7F7E3DBF) - 100799793 + (((v11 - 2083032576) << (v10 ^ 0x7D)) & 0xFEFC7B7E));
}

uint64_t sub_1AC1DD550(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  _BOOL4 v16;

  v13 = a2 + v9 + v10 + v11 - 1497966466 + 2008465162;
  v14 = v7 - 103634520;
  v15 = (v14 < 0x5EB59485) ^ (v13 < 0x5EB59485);
  v16 = v13 > v14;
  if (v15)
    v16 = v13 < 0x5EB59485;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((1794 * !v16) ^ v12 ^ a7)) - 12))();
}

uint64_t *sub_1AC1DD5D4@<X0>(uint64_t *result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = result[6];
  v9 = *result;
  v8 = result[1];
  *a3 = v5;
  *(_DWORD *)(v9 - 0x5FE6BE3E7F47A872) = v4;
  *(_DWORD *)(v7 - 0x79A92BD4195FBC68) = a2;
  *(_QWORD *)(v8 - 0x16B2644187E7E4A9) = v3 + (v6 - 1837280493);
  *((_DWORD *)result + 8) = 2000528784;
  return result;
}

void sub_1AC1DD640(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  _BOOL4 v5;

  v1 = 235795823 * (((_DWORD)a1 - 1876425126 - 2 * (a1 & 0x9028065A)) ^ 0x4854F03);
  v2 = a1[9] + v1;
  v3 = *a1 ^ v1;
  v5 = (~v3 & 0x30000000) == 0 || (v3 & 0x3F000000) == 469762048;
  __asm { BR              X11 }
}

uint64_t sub_1AC1DD70C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, uint64_t a6, unint64_t *a7, int a8, unint64_t *a9, char a10, int a11)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v15 = *(_QWORD *)(v12 + 8);
  v16 = 1755732067
      * (((&a4 | 0x85ED6987) - &a4 + (&a4 & 0x7A129678)) ^ 0x5B2BD45C);
  a10 = (99 * (((&a4 | 0x87) - &a4 + (&a4 & 0x78)) ^ 0x5C)) ^ 0x7F;
  a8 = v16 + 1172344355 + v14;
  a9 = &STACK[0x6C7F23302DC00991];
  a6 = v15;
  a7 = &STACK[0x7D2BB82FB142CE15];
  a5 = ((v11 ^ 0x62031E9C) + v14 - 392 + 2080369872 + ((2 * v11) & 0xFFEEB3FE ^ 0x3BE882C6)) ^ v16;
  a4 = &STACK[0x31CAE46CAAE764ED];
  v17 = ((uint64_t (*)(unint64_t **))(*(_QWORD *)(a1 + 8 * (v14 - 846)) - 12))(&a4);
  return (*(uint64_t (**)(uint64_t))(v13 + 8 * ((94 * (a11 == 2000528784)) ^ v14)))(v17);
}

uint64_t sub_1AC1DD83C()
{
  uint64_t v0;
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * (v2 ^ (1117 * (v1 == 469762048))))
                            - ((18 * (v2 ^ 0x2DFu)) ^ 0x7C6)))();
}

uint64_t sub_1AC1DD880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  int v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8 * ((4045 * (((v10 - 15) ^ (a10 + 4 >= a10)) & 1)) ^ v10))
                            - 8))();
}

uint64_t sub_1AC1DD8FC()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((97
                                * (((2 * v2) & 0xFD7AFBFA ^ v0) + (v2 ^ 0x8A06243) - 572591496 == (((v1 & 0x105F6FED)
                                                                                                  - 1270) ^ 0x28)
                                                                                                + 1553755606)) ^ v1 & 0x105F6FEDu)))();
}

uint64_t sub_1AC1DD968()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((((((v2 + v1 - 2126347773) < 0xC) ^ ((v0 ^ 0x8F) + 1)) & 1)
                                          * ((2 * (v0 ^ 0x219)) ^ 0x4F4)) ^ v0))
                            - 12))();
}

uint64_t sub_1AC1DD9CC(uint64_t a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((213 * (((a2 - ((((v3 + 73) | 0x40A) - 1452) & v2)) & 0xFFFFFFFC) > a2 + 3)) ^ v3)))();
}

uint64_t sub_1AC1DDA10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)(a1 - 3 + v3 + ((v5 + 347) ^ (v2 + 106))) = *(_DWORD *)(v1
                                                                                 - 3
                                                                                 + v3
                                                                                 + ((v5 + 347) ^ (v2 + 106)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((1314 * (v4 == 4)) ^ (v5 + 534))) - 8))();
}

uint64_t sub_1AC1DDA68()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v1 | (77 * (v0 != 0x761D1FBE)))) - ((v1 + 24) ^ 0x57u) + 663))();
}

uint64_t sub_1AC1DDABC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _BOOL4 v8;

  v8 = v4 > 0xE53928D1;
  *(_BYTE *)(a1 + (v6 - 927676921)) = *(_BYTE *)(v1 + (v6 - 927676921));
  if (v8 == v6 - 478438090 < ((v3 - 41) ^ v2))
    v8 = v6 - 478438090 < v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((2045 * v8) ^ v3)) - 12))();
}

uint64_t sub_1AC1DDB2C@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>, uint8x8_t a3@<D0>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  a3.i32[0] = *(_DWORD *)(a2 + a1 + 1);
  *(_DWORD *)(a2 - 3 + (v5 + v3 + v4 - 760)) = vmovn_s16((int16x8_t)vmovl_u8(a3)).u32[0];
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((1023 * (v6 == 4)) ^ v4)) - 8))();
}

uint64_t sub_1AC1DDB80()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((((v2 + 377) | 8) - 953) * (v0 == v1)) ^ v2)) - 12))();
}

uint64_t sub_1AC1DDBAC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(a2 + (v4 + v5 + 695)) = *(_BYTE *)(v2 + (v4 + v5 + 695));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((925 * ((((a1 - 1073) | 0x298) ^ 0xFFFFFD60) + v5 == v3 + 671)) ^ (a1 - 739)))
                            - 12))();
}

uint64_t sub_1AC1DDBFC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((63
                                          * (((*(_QWORD *)(v1 + 16) == 0x3AF96D25E637336ELL) ^ ((v0 ^ 0xA7) + 1)) & 1)) ^ v0))
                            - 8))();
}

uint64_t sub_1AC1DDC44@<X0>(uint64_t a1@<X8>, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(a1 - 0x3AF96D25E637336ELL) = a2;
  return (*(uint64_t (**)(void))(v4 + 8 * ((519 * (*(_QWORD *)(v3 + 24) != 0x3FE6D41FE23CAA47)) ^ (v2 + 409))))();
}

void sub_1AC1DDC98(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 - 0x3FE6D41FE23CAA47) = v2;
  *(_DWORD *)(v1 + 32) = 2000528784;
}

uint64_t sub_1AC1DDD28(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))qword_1E5B57340[(169 * (*(_DWORD *)(a2 + 4) != 2038179983)) ^ 0x125u])();
}

uint64_t sub_1AC1DDD60()
{
  return 4294925278;
}

uint64_t sub_1AC1DDD68(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = (**(unsigned __int8 **)(a2 + 8) ^ 0x7FCFFAFD)
                       - 490865237
                       + ((2 * **(unsigned __int8 **)(a2 + 8)) & 0xFFFB);
  return 0;
}

void sub_1AC1DDDA0()
{
  uint64_t v0;
  int v1;
  BOOL v2;
  int v3;

  v0 = MEMORY[0x1E0C80A78]();
  if (*(_QWORD *)v0)
    v2 = *(_QWORD *)(v0 + 16) == 0x4414279470ECFE8ELL;
  else
    v2 = 1;
  v3 = v2;
  v1 = *(_DWORD *)(v0 + 28) ^ (1225351577 * (((v0 | 0x49F0B3C) - (v0 | 0xFB60F4C3) - 77531965) ^ 0x2705D32A));
  __asm { BR              X8 }
}

void sub_1AC1DDED8()
{
  uint64_t v0;
  int v1;

  *(_DWORD *)(v0 + 8) = v1 | 4;
}

uint64_t sub_1AC1DF3A0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  LODWORD(STACK[0x354]) = STACK[0x2C0];
  LODWORD(STACK[0x49C]) = STACK[0x2C8];
  STACK[0x320] = STACK[0x2A8];
  STACK[0x368] = STACK[0x2B0];
  STACK[0x530] = STACK[0x2B8];
  ++*(_DWORD *)(v1 + 52);
  LODWORD(STACK[0x554]) = *(_DWORD *)(v1 + 360);
  STACK[0x318] = ((8 * v0) ^ 0x1B68) + v2 + ((8 * v0) ^ 0x1547u) - 4399;
  LODWORD(STACK[0x364]) = v4;
  LODWORD(STACK[0x2C8]) = STACK[0x49C];
  LODWORD(STACK[0x2C0]) = STACK[0x354];
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((STACK[0x2F0] == 0)
                                          * ((((8 * v0) ^ 0x1258) - 2046959107) & 0x7A021DDB ^ 0x83)) | (8 * v0) ^ 0x1258))
                            - 12))();
}

void sub_1AC1DF3E8()
{
  int v0;
  int v1;
  uint64_t v2;

  LODWORD(STACK[0x354]) = STACK[0x2C0];
  LODWORD(STACK[0x49C]) = STACK[0x2C8];
  STACK[0x320] = STACK[0x2A8];
  STACK[0x368] = STACK[0x2B0];
  STACK[0x530] = STACK[0x2B8];
  LODWORD(STACK[0x304]) = v0;
  STACK[0x318] = v2 + 3 * (v1 ^ 0x670u) - 1909 + ((3 * (v1 ^ 0x670) + 1379) | 0x98u);
  LODWORD(STACK[0x364]) = v0;
  LODWORD(STACK[0x2C8]) = STACK[0x49C];
  LODWORD(STACK[0x2C0]) = STACK[0x354];
  JUMPOUT(0x1AC1EAC20);
}

uint64_t sub_1AC1DF434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v63;
  int v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;

  *(_DWORD *)(STACK[0x228] + 360) = 1096421781;
  v71 = ((uint64_t (*)(_QWORD, uint64_t, unint64_t *, unint64_t, _QWORD, uint64_t, unint64_t *, unint64_t *))*(&off_1E5B5B480 + (v63 ^ 0x6F1)))(LODWORD(STACK[0x2D0]), 2, &STACK[0x4CC], STACK[0x508], (v64 + v66), a6, &STACK[0x440], &STACK[0x3DC]);
  v74 = LODWORD(STACK[0x2E4]);
  v75 = ((2 * v71) & 0x776DDB6A) + (v71 ^ 0xBBB6EDB5);
  LODWORD(STACK[0x3FC]) = v75 + 2012872576;
  if (v75 == -1145639499)
  {
    LODWORD(STACK[0x3A4]) = 1520843535;
    v77 = STACK[0x440];
    STACK[0x4D8] = v67;
    STACK[0x388] = v65;
    v78 = (char *)&STACK[0x5C0] + v68 - 0x6BB6AC8669DF608FLL;
    STACK[0x400] = (unint64_t)v78;
    STACK[0x328] = (unint64_t)&STACK[0x5C0] + v68 - 0x6BB6AC8669DF600FLL;
    *(_QWORD *)v78 = 0x6370646600;
    v78[8] = 1;
    v79 = *(_QWORD *)(v69 + 8 * ((int)v74 - 1709));
    STACK[0x318] = v68 + 4208;
    v80 = (((_DWORD)v74 - 523741914) & 0x1F37A5B9 ^ 0xABAF5C39) + 2128527276;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)(v69 + 8 * (((2 * ((_DWORD)v80 != 713956566)) | (8 * ((_DWORD)v80 != 713956566))) ^ ((int)v74 - 488))) - 8))(v71, v72, v80, v74, 2294480457, 3974516096, 1216668859, 320451199, &STACK[0x408], &STACK[0x4BC], &STACK[0x4EC], &STACK[0x514], a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             v79,
             v77,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             (char *)&STACK[0x5C0] + v68 - 0x6BB6AC8669DF6086,
             a62,
             a63);
  }
  else if (v75 == -877204040)
  {
    LODWORD(STACK[0x304]) = -2000486744;
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v69
                                                                                  + 8
                                                                                  * (int)(((STACK[0x440] != 0)
                                                                                         * (((v74 - 1696) | 0x245) ^ 0x7FD)) ^ (v74 - 1321))))(v71, STACK[0x440], v73, v74);
  }
  else
  {
    v81 = 3804331 * ((1877976559 - ((v70 - 192) | 0x6FEFA5EF) + ((v70 - 192) | 0x90105A10)) ^ 0xEEC57FE6);
    *(_DWORD *)(v70 - 192) = v75 - v81 - ((2 * (v75 + 2012872576) - 1734466154) & 0xEE7B4B20) - 1148799013;
    *(_DWORD *)(v70 - 188) = v81 + v74 - 93;
    *(_QWORD *)(v70 - 184) = a28;
    v82 = v74;
    v83 = sub_1AC1C29BC((_DWORD *)(v70 - 192));
    return (*(uint64_t (**)(uint64_t))(v69
                                              + 8
                                              * (((STACK[0x440] != 0) * (((v82 - 1696) | 0x245) ^ 0x7FD)) ^ (v82 - 1321))))(v83);
  }
}

uint64_t sub_1AC1DF684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a64;
  int a65;
  unint64_t a66;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v71 = (char *)&a10 + v67 - 0x6BB6AC8669DF644FLL;
  v72 = (((_QWORD)v71 << (a9 ^ 0xD4u)) + 16) & 0x20;
  v73 = v66 ^ 0x2A4u;
  a66 = (unint64_t)&STACK[0x4FC] % 0x25 + v73 - 812;
  STACK[0x278] = 1374699841 * ((v70 - 192) ^ 0xE0C9E0C6DF41809);
  a65 = 101 * (a4 ^ 0x6BE);
  a64 = a4 ^ 0x616;
  LODWORD(STACK[0x2B8]) = a4 - 1772706638;
  LODWORD(STACK[0x2B0]) = a4 - 638208763;
  v74 = 1224239923
      * ((((v70 - 192) | 0x9D3B8BC2FD28331ELL) - (v70 - 192) + ((v70 - 192) & 0x62C4743D02D7CCE0)) ^ 0xB5613EAB0F9BCEC9);
  STACK[0x238] = v74;
  STACK[0x230] = v74 ^ 0x13FF;
  STACK[0x2D0] = STACK[0x2F8];
  a63 = (uint64_t)&v71[v72 + 16];
  *(int32x4_t *)&STACK[0x250] = vdupq_n_s32(0x718E078u);
  *(int32x4_t *)&STACK[0x260] = vdupq_n_s32(0x7FFFFFFEu);
  *(int32x4_t *)&STACK[0x240] = vdupq_n_s32(0x38C703Cu);
  v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 + 8 * (int)v73) - 68 * (v73 ^ 0x33A) + 400);
  STACK[0x2C8] = *(_QWORD *)(v69 + 8 * (int)(v73 ^ 0x39E));
  STACK[0x2C0] = *(_QWORD *)(v69 + 8 * ((int)v73 - 630)) - 4;
  return v75(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58);
}

uint64_t sub_1AC1DF86C(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  unint64_t v13;
  char v14;

  v11 = (_BYTE *)(v7 + (a3 - 713956567));
  v12 = -857180639
      * ((*(_DWORD *)(*(_QWORD *)STACK[0x2C0] + (*(_DWORD *)STACK[0x2C8] & ((v5 ^ 0x2A4) - 1722195492))) ^ v11) & 0x7FFFFFFF);
  v13 = -857180639 * (v12 ^ HIWORD(v12));
  v14 = *(_BYTE *)(*(_QWORD *)(v10 + 8 * (v5 ^ 0x1A5)) + (v13 >> 24) - 4) ^ ((v4 ^ (v6 + (v5 ^ 0x548u) - 1232)) >> v3) ^ *(_BYTE *)(*(_QWORD *)(v10 + 8 * (v5 ^ 0x140)) + (v13 >> 24) - 8) ^ *(_BYTE *)(*(_QWORD *)(v10 + 8 * (v5 - 223)) + (v13 >> 24) - 11) ^ v13 ^ (-123 * BYTE3(v13));
  *v11 = v14;
  return (*(uint64_t (**)(void))(v9 + 8 * ((1545 * (a3 - (v14 != 0) == v8)) ^ v5)))();
}

void sub_1AC1E05D8()
{
  JUMPOUT(0x1AC1DF818);
}

uint64_t sub_1AC1E05E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t (*a41)(void))
{
  unint64_t v41;

  STACK[0x4B0] = v41;
  STACK[0x2F8] = STACK[0x2D0];
  return a41();
}

uint64_t sub_1AC1E0600(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,unint64_t a62,unint64_t a63)
{
  uint64_t *a64;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  int v70;

  v68 = (a4 - 312) | 0x29u;
  STACK[0x348] = *(_QWORD *)(v67 + 8 * (a4 - 1661));
  a64 = &a9 - 0xD76D590CD3BEC7DLL;
  a63 = ((v68 - 0x400005414004060CLL) ^ (unint64_t)&STACK[0x3E0])
      + ((2 * (_QWORD)&STACK[0x3E0]) & 0x7FFFF57D7FF7FF30)
      + 0x5C6FB5EDF1E741BALL;
  a62 = a63 + 1466;
  LODWORD(STACK[0x240]) = a4 - 1456074881;
  STACK[0x318] = ((40 * (v68 ^ 0x582)) ^ 0x6C8) + v66;
  STACK[0x3C0] = v65;
  if (v65)
    v69 = v64 == 0;
  else
    v69 = 1;
  v70 = !v69;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v67 + 8 * (int)((875 * v70) ^ v68))
                                                                    - ((v68 + 343) ^ 0x704)))(48, 314046078, 1241, (__n128)0);
}

uint64_t sub_1AC1E0704(__n128 a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v3 + v4 - 0x6BB6AC8669DF6A0FLL;
  *(_DWORD *)v6 = 908163078;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = 1653471400;
  *(_DWORD *)(v6 + 24) = 2038179982;
  *(_QWORD *)(v6 + 32) = 0;
  *(_DWORD *)(v6 + 40) = 2038179982;
  STACK[0x488] = v6 + 40;
  *(_QWORD *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 56) = 2038179982;
  STACK[0x3A8] = v6 + 48;
  STACK[0x2E8] = v6 + 56;
  *(_QWORD *)(v6 + 64) = 0;
  STACK[0x310] = v6 + 64;
  *(_DWORD *)(v6 + 72) = 2038179982;
  *(_QWORD *)(v6 + 80) = 0;
  STACK[0x3B0] = v6 + 72;
  STACK[0x378] = v6 + 80;
  *(_BYTE *)(v6 + 88) = 14;
  *(_DWORD *)v2 = 908163078;
  *(__n128 *)(v2 + 4) = a1;
  *(_DWORD *)(v2 + 28) = 1377658268;
  STACK[0x238] = v2 + 28;
  *(_DWORD *)(v2 + 232) = 1377658268;
  STACK[0x230] = v2 + 232;
  *(_DWORD *)(v2 + 20) = 0;
  *(_DWORD *)(v2 + 24) = 2038179982;
  *(__n128 *)(v2 + 436) = a1;
  *(__n128 *)(v2 + 452) = a1;
  *(_QWORD *)(v2 + 468) = 0;
  strcpy((char *)(v2 + 1128), "uuuuuuuuuuuuuuuuuuuu");
  *(_BYTE *)(v2 + 1149) = 0;
  *(_WORD *)(v2 + 1150) = 0;
  *(__n128 *)(v2 + 1152) = a1;
  *(__n128 *)(v2 + 1168) = a1;
  *(__n128 *)(v2 + 1184) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (int)((479 * (((((v1 + 1112305887) & 0xBDB38EFF) - 677) ^ 0x41ALL) != 256)) ^ (v1 + 1112305887) & 0xBDB38EFF))
                            - 4))();
}

uint64_t sub_1AC1E0858@<X0>(uint64_t (*a1)(void)@<X8>)
{
  int v1;
  unint64_t v2;
  uint64_t v3;

  STACK[0x260] = v2;
  STACK[0x318] = v2 - 112;
  STACK[0x2D8] = *(_QWORD *)(v3 + 8 * (v1 ^ 0x605)) - 12;
  return a1();
}

uint64_t sub_1AC1E0884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;

  *(_DWORD *)(v63 + 1424) = 1523788764;
  *(_DWORD *)(v63 + 1428) = 1647926410;
  *(_QWORD *)(v63 + 1432) = v64;
  *(_QWORD *)(v63 + 1440) = v64;
  *(_DWORD *)(v63 + 1448) = v65;
  *(__n128 *)(v63 + 1452) = a9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 8 * ((62 * ((((v62 - 58) | 4) ^ 0x45F) != 139)) ^ ((v62 - 58) | 4))))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62);
}

uint64_t sub_1AC1E08F4@<X0>(int a1@<W8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  *(__n128 *)(v2 + v3) = a2;
  return (*(uint64_t (**)(void))(v5 + 8 * ((62 * (v3 + (a1 ^ v4) != 139)) ^ a1)))();
}

uint64_t sub_1AC1E0920(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _DWORD *v71;
  _BOOL4 v73;

  *(_QWORD *)(v64 + 1516) = v65;
  *(_QWORD *)(v64 + 1524) = v65;
  *(_DWORD *)(v64 + 1532) = v66;
  *(_QWORD *)(a2 + 96) = v64;
  *(_DWORD *)(v64 + 476) = 1139685912;
  STACK[0x2B8] = *(_QWORD *)(v68 + 8 * v63) + ((v63 + 201) ^ 0xFFFFFFFFFFFFFEDCLL);
  v69 = STACK[0x318];
  v70 = v67 - 0x6BB6AC8669DF6A0FLL + STACK[0x318];
  STACK[0x260] = STACK[0x318];
  STACK[0x250] = v69 + 432;
  STACK[0x2C8] = v70;
  STACK[0x2C0] = STACK[0x3C0];
  STACK[0x278] = a2;
  STACK[0x318] = STACK[0x250];
  LODWORD(STACK[0x390]) = 924252542;
  LODWORD(STACK[0x52C]) = 2038179982;
  STACK[0x420] = 0;
  LODWORD(STACK[0x370]) = -419506821;
  v71 = (_DWORD *)STACK[0x2C8];
  *v71 = a7;
  LODWORD(STACK[0x2B0]) = v63 - 76098113;
  LODWORD(STACK[0x2D0]) = -659331802;
  LODWORD(STACK[0x2D8]) = 1345798283;
  LODWORD(STACK[0x2A0]) = -560507924;
  LODWORD(STACK[0x2A8]) = -469983456;
  v73 = *v71 != (_DWORD)a7 || (_DWORD)a8 + 1 != (_DWORD)a8 + (((_DWORD)v63 + 1445) | 0xB8) - 1720;
  return ((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 + 8 * ((1287 * v73) ^ ((int)v63 + 772))) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62,
           a63);
}

uint64_t sub_1AC1E0AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((((v9 - 617) ^ 0x7A7 ^ v9 ^ 0x12C) * (v8 != a8)) ^ v9)) - 8))();
}

uint64_t sub_1AC1E0AE4()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  int v4;

  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((25 * (((v1 + v2 + 173 * (v0 ^ 0x5A2) - 689) & ((v0 ^ 0x5A2) - 8)) - v4 == v1)) | v0)))();
}

uint64_t sub_1AC1E0B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((v7 + 688) ^ (1270 * (v8 != a7))))
                            - (((v7 + 36) | 0x482u) ^ 0x4A2)))();
}

uint64_t sub_1AC1E0B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  _BOOL4 v12;

  v12 = LODWORD(STACK[0x370]) - v9 == 1837280493 && v7 != ((v8 + 478038534) & 0xE381B7EF ^ (a7 - 1194));
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((1270 * v12) ^ v8)) - 8))();
}

uint64_t sub_1AC1E0BBC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;

  v12 = (_DWORD *)STACK[0x2C8];
  *v12 = v8 - 1;
  v13 = &v12[6 * (v8 - 1216668860)];
  v14 = v13[2];
  STACK[0x2C0] = *((_QWORD *)v13 + 2);
  LODWORD(STACK[0x370]) = v13[6];
  return ((uint64_t (*)(void))(*(_QWORD *)(v10
                                        + 8
                                        * ((286
                                          * (*(_DWORD *)(v11 + (v14 + a6) * (uint64_t)a1 + 36) == a8
                                                                                               + ((3 * (v9 ^ 0x33A)
                                                                                                 - 656350459) & 0x271F1A71)
                                                                                               - 545)) ^ (3 * (v9 ^ 0x33A))))
                            - 8))();
}

uint64_t sub_1AC1E0C94()
{
  int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  _BOOL4 v5;

  v3 = LODWORD(STACK[0x370]) + 1025728585;
  v4 = ((v1 - 1431958218) < 0x242235C4) ^ (v3 < ((v0 + 1623293243) & 0x9F3E80FF ^ 0x2422339E) + v0 - 31);
  v5 = v3 < v1 - 1431958218;
  if (v4)
    v5 = (v1 - 1431958218) < 0x242235C4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((4 * !v5) | (8 * !v5)) ^ v0)) - 12))();
}

uint64_t sub_1AC1E0D20@<X0>(int a1@<W0>, int a2@<W5>, int a3@<W8>)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5
                                        + 8
                                        * (((*(_DWORD *)(v6 + (v3 + a2) * (uint64_t)a1 + 36) != a3)
                                          * (((v4 - 482) | 0x44C) + 143)) ^ v4))
                            - 4))();
}

uint64_t sub_1AC1E0D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _BOOL4 v13;

  v13 = v8 == 2000528784 && v10 != a8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * (v9 ^ (299 * v13)))
                            - ((((v9 + 44113004) & 0xFD5EE5FD) - 4) ^ ((v9 - 418) | 0x40Cu))))();
}

uint64_t sub_1AC1E0DD4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((233
                                          * ((*(_DWORD *)(v9 + (v7 + a6) * (uint64_t)a1 + 40) & 8) != ((587 * (v6 ^ 0x46E)) ^ 0x496))) ^ v6))
                            - 8))();
}

uint64_t sub_1AC1E0E20@<X0>(int a1@<W0>, int a2@<W7>, int a3@<W8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;

  v6 = *(_DWORD *)(v5 + v3 * (uint64_t)a1 + 36);
  v8 = (v6 - 979783028 > (a3 ^ 0x694) + 1488151305 || v6 - 979783028 < SLODWORD(STACK[0x2D0]))
    && v6 != (a3 ^ 0xFA ^ (a2 + 916));
  return (*(uint64_t (**)(void))(v4 + 8 * ((111 * v8) ^ a3)))();
}

uint64_t sub_1AC1E0E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  v8 = (v5 - 1332241685) & 0x4F68677E;
  if (v6)
    v9 = 2000528784;
  else
    v9 = a5 + 5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((v9 == 2000528784) * (((v8 + 20) | 0x238) ^ 0x423)) ^ v8))
                            - ((v8 - 269) ^ 0x357)))();
}

uint64_t sub_1AC1E16D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  int v8;
  int v9;
  uint64_t v10;
  _BOOL4 v12;

  v12 = *(_DWORD *)STACK[0x2C8] != a7 || v9 != a8 + ((v8 + 673) | 0xB8) - 1720;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((1287 * v12) ^ v8)) - 4))();
}

uint64_t sub_1AC1E1728()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v5 = *(unsigned __int8 *)STACK[0x420]
     - (*(_BYTE *)(*(_QWORD *)(v4 + v3 * (uint64_t)v1 + 24) - 0x1A0E794B8DE2CBF4) - 92);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * ((449
                                                        * ((((((v0 - 249) | 0x44) ^ 0x14D) - 945948969) & (2 * v5))
                                                         + (v5 ^ 0x63CEFBF4) == 1674509300)) ^ ((v0 - 249) | 0x44)))
                                          - 12))(48);
}

uint64_t sub_1AC1E17D8()
{
  unint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  _BOOL4 v4;

  v4 = v0 < 0x1EE3B124;
  if (v4 == v1 - 0x222DA86E20B0E300 < (v2 ^ 0x14Du) + 518238500 + (unint64_t)(v2 - 181) - 184)
    v4 = v1 - 0x222DA86E20B0E300 < v0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1539 * !v4) ^ v2)) - 12))();
}

void sub_1AC1E184C()
{
  JUMPOUT(0x1AC1E1764);
}

uint64_t sub_1AC1E1858()
{
  STACK[0x318] = STACK[0x260];
  return ((uint64_t (*)(void))STACK[0x2B8])();
}

uint64_t sub_1AC1E1870(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  int v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((((a4 - 1631) ^ 0xDD) * (v4 == v6)) ^ (a4 - 660))) - 8))();
}

void sub_1AC1E189C()
{
  int v0;
  uint64_t v1;
  unint64_t *v2;

  v2 = (unint64_t *)STACK[0x3A8];
  STACK[0x278] = STACK[0x238];
  STACK[0x2C0] = *v2;
  STACK[0x2B8] = *(_QWORD *)(v1 + 8 * v0);
  JUMPOUT(0x1AC1E09B4);
}

uint64_t sub_1AC1E1970(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,int a63)
{
  char a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a69;
  uint64_t a70;
  uint64_t v70;

  *(_QWORD *)(a69 + 1560) = *(_QWORD *)STACK[0x378];
  *(_DWORD *)(a69 + 1552) = *(_DWORD *)STACK[0x3B0];
  *(_QWORD *)(*(_QWORD *)(a66 + 96) + 488) = *(_QWORD *)(a66 + 8);
  *(_DWORD *)(*(_QWORD *)(a66 + 96) + 480) = *(_DWORD *)a66;
  *(_BYTE *)(a65 + a70) = ((a64 + a4 - 15) ^ 0xBA) * a62;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 + 8 * (a4 - 586)) - 4))(a1, 314046078, 1241);
}

uint64_t sub_1AC1E1A24@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  STACK[0x3E0] = 104 - a1;
  v4 = (uint64_t (*)(void))STACK[0x348];
  STACK[0x318] = v2 - 112;
  STACK[0x2D8] = *(_QWORD *)(v3 + 8 * ((v1 + 315) ^ 0x514)) - 12;
  return v4();
}

uint64_t sub_1AC1E1A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  int v61;
  uint64_t v62;
  int v63;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 + 8 * (int)((((a4 - 1558) ^ 0x5A4) * (v61 == v63)) ^ (a4 - 1558))) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61);
}

uint64_t sub_1AC1E1A90@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = (a1 + 2073118237) & 0x846EBFF8;
  v3 = (a1 + 1558);
  v4 = STACK[0x328];
  STACK[0x308] = STACK[0x328];
  STACK[0x470] = 0;
  LODWORD(STACK[0x528]) = 2038179982;
  STACK[0x458] = 0;
  LODWORD(STACK[0x41C]) = 2038179982;
  v5 = *(_QWORD *)(v1 + 8 * ((785 * (v4 != 0)) | a1));
  STACK[0x520] = 0;
  return ((uint64_t (*)(void))(v5 - (v2 + v3) + 3432))();
}

uint64_t sub_1AC1E1B00()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((v1 + 310) | (16
                                             * ((*(_BYTE *)(v0 + 32)
                                                                - *(_BYTE *)(*(_QWORD *)(v3 + 8 * (v1 ^ 0x6E8)) - 4)
                                                                - 120) == (((v1 - 26) ^ 0xF6) + 65))))))();
}

uint64_t sub_1AC1E1B8C(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((((v5 + a3) & a4 ^ a5) + v5 + 538) * (v6 == 42)) ^ v5)) - 8))();
}

uint64_t sub_1AC1E1BBC(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((v4 + 310) | (16
                                             * ((*(_BYTE *)(v3 + 1 + a2) - *(_BYTE *)(v2 + 1) - 120) == (((v4 - 26) ^ a1) + 65))))))();
}

uint64_t sub_1AC1E1BF8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3
                                                      + 8
                                                      * ((111
                                                        * ((((v2 - 99) | 0x18) - 116) == (*(_BYTE *)(a2 + a1) - *(_BYTE *)(*(_QWORD *)(v4 + 8 * (v2 - 1426)) - 4) - 120))) ^ (v2 + 25)))
                                          - 4))(792);
}

uint64_t sub_1AC1E1DAC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 a4, unint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((224 * (v6 != (((8 * v5) ^ a4) & 0xFE))) | v5))
                            - (((v5 + 403) | a3) ^ a5)))();
}

void sub_1AC1E1DE4()
{
  JUMPOUT(0x1AC1E1D68);
}

uint64_t sub_1AC1E1DF0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8
                                            * ((207
                                              * ((((v2 + 70) & 0xF7 ^ 0x7E)
                                                                 + *(_BYTE *)(a2 + a1)
                                                                 - *(_BYTE *)(*(_QWORD *)(v4 + 8 * (v2 - 1657)) - 4)) == (((v2 + 44) | 0x12) - 77))) ^ (v2 + 141))))(102664006);
}

uint64_t sub_1AC1E1EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, int a7)
{
  int v7;
  int v8;
  uint64_t v9;

  return (*(uint64_t (**)(void))(v9
                              + 8
                              * (((((17 * (v7 ^ a5)) ^ (v8 == (((v7 ^ a5) + 95) ^ a6))) & 1)
                                * a7) ^ v7)))();
}

void sub_1AC1E1EE8()
{
  JUMPOUT(0x1AC1E1E70);
}

uint64_t sub_1AC1E1EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t (*a70)(uint64_t, uint64_t);
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;

  v72 = 17 * (v70 ^ a5);
  v73 = a70(1576, 2940923044);
  STACK[0x520] = v73;
  return ((uint64_t (*)(void))(*(_QWORD *)(v71 + 8 * (((v73 != 0) * (((v72 - 1385) | 0x136) - 436)) | v72))
                            - (v72 ^ 0x351u)
                            + 1716))();
}

uint64_t sub_1AC1E1FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t (*a70)(uint64_t, uint64_t);
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v72 = a70(1576, 3012117910);
  STACK[0x3D0] = v72;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 + 8 * (((((v72 == 0) ^ (v70 - 1)) & 1) * (v70 - 336)) ^ v70)) - 4))(v72, v73, v74, v75, v76, v77, v78, v79, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60);
}

uint64_t sub_1AC1E1FF4()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)((v1 + 1950563720) & 0x8BBCC7D7 ^ (74 * (v0 == 391677680))))
                            - ((((v1 + 1950563720) & 0x8BBCC7D7) + 213734224) & 0xF342A7FF)
                            + 610))();
}

uint64_t sub_1AC1E2064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;

  v62 = 235795823 * ((((2 * (v61 - 192)) | 0xB570C1C2) - (v61 - 192) - 1522032865) ^ 0xCE1529B8);
  *(_DWORD *)(v61 - 156) = v58 - v62 + 466;
  *(_QWORD *)(v61 - 184) = 0x6905A48EAE015889;
  *(_QWORD *)(v61 - 176) = a57;
  *(_QWORD *)(v61 - 168) = a58;
  *(_DWORD *)(v61 - 192) = v62 ^ 0x9CF44760;
  v63 = ((uint64_t (*)(uint64_t))STACK[0x218])(v61 - 192);
  return (*(uint64_t (**)(uint64_t))(v59
                                            + 8
                                            * (((*(_DWORD *)(v61 - 160) == v60) * (21 * (v58 ^ 0x265) - 43)) ^ v58)))(v63);
}

uint64_t sub_1AC1E212C@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((v2 == v1 + ((2 * (a1 - 1327)) ^ 0x1A8) - 614) * ((a1 - 1200) ^ 0x180)) ^ (a1 - 1327)))
                            - 4))();
}

uint64_t sub_1AC1E2168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;

  v63 = 235795823 * (((v58 | 0xE1608E95) + (~v58 | 0x1E9F716A)) ^ 0x75CDC7CD);
  *(_DWORD *)(v62 - 156) = v60 - v63 + 466;
  *(_DWORD *)(v62 - 192) = v63 ^ 0x9CF44762;
  *(_QWORD *)(v62 - 184) = 0x6905A48EAE015889;
  *(_QWORD *)(v62 - 176) = a57;
  *(_QWORD *)(v62 - 168) = a58;
  v64 = ((uint64_t (*)(uint64_t))STACK[0x218])(v62 - 192);
  return (*(uint64_t (**)(uint64_t))(v59
                                            + 8
                                            * (int)(((*(_DWORD *)(v62 - 160) == v61)
                                                   * ((((v60 - 609) | 0x3A) ^ 0xFFFFFFEA) + v60 - 551)) ^ v60)))(v64);
}

uint64_t sub_1AC1E2254()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((1861 * (v1 == ((v2 - 490249255) & 0x1D3899FF ^ (v0 - 33)))) ^ v2)))();
}

uint64_t sub_1AC1E22B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  int v58;
  uint64_t (*v59)(uint64_t);
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;

  v66 = ((((2 * v58) | 0xB1F5AD30) - v58 + 654649704) ^ 0x4C579FC1) * v63;
  *(_DWORD *)(v65 - 156) = v61 - v66 + 466;
  *(_QWORD *)(v65 - 184) = v60;
  *(_QWORD *)(v65 - 176) = a57;
  *(_QWORD *)(v65 - 168) = a58;
  *(_DWORD *)(v65 - 192) = v66 ^ 0x9CF44760;
  v67 = v59(v65 - 192);
  return (*(uint64_t (**)(uint64_t))(v62
                                            + 8
                                            * (((*(_DWORD *)(v65 - 160) == v64 + v61 - 551 - 63) * ((v61 - 551) ^ 0x2B)) ^ v61)))(v67);
}

uint64_t sub_1AC1E234C@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  int v49;
  void (*v50)(uint64_t);
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;

  v58 = ((~(v49 ^ 0xEA1D63FE | 0x95A0AE03) + ((v49 ^ 0xEA1D63FE) & 0x95A0AE03)) ^ 0x14EF7B5B) * v55;
  *(_DWORD *)(v57 - 156) = v51 - v58 + 1017;
  *(_QWORD *)(v57 - 168) = a49;
  *(_QWORD *)(v57 - 184) = v52;
  *(_QWORD *)(v57 - 176) = a48;
  *(_DWORD *)(v57 - 192) = a1 ^ v58;
  v50(v57 - 192);
  v59 = *(_DWORD *)(v57 - 160);
  STACK[0x478] = v53;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v54 + 8 * ((1668 * (v59 == ((2 * v51) ^ 0x6C6 ^ (v56 - 616)))) ^ v51)) - 12))(48, 314046078, 1241, LODWORD(STACK[0x2E4]), 2294480457, 3974516096, 1216668859, 320451199, (__n128)0);
}

void sub_1AC1E2434()
{
  JUMPOUT(0x1AC1E2450);
}

uint64_t sub_1AC1E2494()
{
  int v0;
  unint64_t v1;
  uint64_t v2;

  STACK[0x478] = v1;
  return (*(uint64_t (**)(void))(v2 + 8 * ((1560 * (STACK[0x458] != 0)) ^ (v0 + 530))))();
}

uint64_t sub_1AC1E2F50()
{
  int v0;
  uint64_t v1;

  ((void (*)(void))STACK[0x220])();
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((910 * (STACK[0x470] != 0)) ^ (v0 - 616))) - 8))();
}

uint64_t sub_1AC1E2F88()
{
  int v0;
  uint64_t v1;

  ((void (*)(void))STACK[0x220])();
  return (*(uint64_t (**)(void))(v1 + 8 * ((473 * (STACK[0x520] != 0)) ^ (v0 - 956))))();
}

uint64_t sub_1AC1E2FBC()
{
  int v0;
  uint64_t v1;

  ((void (*)(void))STACK[0x220])();
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((3342 * (STACK[0x3D0] != 0)) ^ (v0 - 426))) - 8))();
}

uint64_t sub_1AC1E2FEC()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v4 = ((uint64_t (*)(void))STACK[0x220])();
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8 * ((960 * (v1 == ((v0 - 1558) ^ (v3 - 94)))) ^ (v0 - 1558)))
                                          - 8))(v4);
}

uint64_t sub_1AC1E3020()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((910 * (STACK[0x470] != 0)) ^ (v0 - 616))) - 8))();
}

uint64_t sub_1AC1E3050()
{
  int v0;
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1 + 8 * ((473 * (STACK[0x520] != 0)) ^ (v0 - 956))))();
}

uint64_t sub_1AC1E307C()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((3342 * (STACK[0x3D0] != 0)) ^ (v0 - 426))) - 8))();
}

uint64_t sub_1AC1E30A4()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((960 * (v1 == ((v0 - 1558) ^ (v3 - 94)))) ^ (v0 - 1558))) - 8))();
}

uint64_t sub_1AC1E30D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;

  LODWORD(STACK[0x3A4]) = 1520843255;
  LODWORD(STACK[0x558]) = 128;
  v51 = STACK[0x328];
  v52 = STACK[0x400];
  v53 = STACK[0x4D8];
  *(_QWORD *)(v50 - 152) = 0;
  *(_QWORD *)(v50 - 144) = 0;
  v54 = 535753261 * ((((v50 - 192) | 0xEE8CD456) - (v50 - 192) + ((v50 - 192) & 0x11732BA8)) ^ 0xE478DA79);
  *(_DWORD *)(v50 - 156) = (v47 + 769) ^ v54;
  *(_DWORD *)(v50 - 176) = 1186336589 - v54;
  *(_QWORD *)(v50 - 136) = v51 + 0x4E242FFD6E716753;
  *(_QWORD *)(v50 - 128) = a47;
  *(_QWORD *)(v50 - 168) = v51 + 0x4E242FFD6E716643;
  *(_QWORD *)(v50 - 192) = v52;
  *(_QWORD *)(v50 - 184) = v53;
  v55 = ((uint64_t (*)(uint64_t))STACK[0x2D8])(v50 - 192);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v48
                                                      + 8
                                                      * ((1023
                                                        * (*(_DWORD *)(v50 - 160) == v49
                                                                                   + ((v47 + 1059175165) & 0xC0DE47FD)
                                                                                   - 925)) ^ v47))
                                          - ((v47 + 1558) ^ 0x6B0)))(v55);
}

uint64_t sub_1AC1E31EC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((47 * (v0 - STACK[0x388] < ((v1 + 574577698) & 0xDDC0A3F2 ^ 0x392uLL))) ^ v1))
                            - 8))();
}

uint64_t sub_1AC1E3244()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v0 + v2 - 1612682178) = *(_BYTE *)(v4 + v2 - 1612682178)
                                   - ((v1 + 56) & (2 * *(_BYTE *)(v4 + v2 - 1612682178)))
                                   + 117;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((1477 * (v2 - 1 == v3)) ^ v1)) - 8))();
}

uint64_t sub_1AC1E3290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;

  v5 = v2 + 127 - v1;
  v6 = vrev64q_s8(*(int8x16_t *)(v5 - 15));
  v7 = vextq_s8(v6, v6, 8uLL);
  v8 = vrev64q_s8(*(int8x16_t *)(v5 - 31));
  v9 = vextq_s8(v8, v8, 8uLL);
  v10 = v0 + 127 - v1;
  v11.i64[0] = 0xEAEAEAEAEAEAEAEALL;
  v11.i64[1] = 0xEAEAEAEAEAEAEAEALL;
  v12.i64[0] = 0x7575757575757575;
  v12.i64[1] = 0x7575757575757575;
  v13 = vrev64q_s8(vaddq_s8(vsubq_s8(v7, vandq_s8(vaddq_s8(v7, v7), v11)), v12));
  *(int8x16_t *)(v10 - 15) = vextq_s8(v13, v13, 8uLL);
  v14 = vrev64q_s8(vaddq_s8(vsubq_s8(v9, vandq_s8(vaddq_s8(v9, v9), v11)), v12));
  *(int8x16_t *)(v10 - 31) = vextq_s8(v14, v14, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((1514 * (v1 + 32 == ((v3 + 820) ^ 0x651))) ^ v3))
                            - 8))();
}

uint64_t sub_1AC1E3328@<X0>(int a1@<W8>)
{
  uint64_t v1;
  int v2;

  LODWORD(STACK[0x304]) = v2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((304
                                          * ((a1 ^ 0x69u) - 1096421779 + *(_DWORD *)(STACK[0x228] + 360) - 1722 < 0xFFFFFFFE)) ^ a1))
                            - 8))();
}

uint64_t sub_1AC1E3378@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  char *v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v66;
  int v67;
  uint64_t v68;

  v53 = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t))(v51 + 8 * (a1 ^ 0x6F0)))(LODWORD(STACK[0x514]), (((a1 - 713) | 0x2B0) ^ (v48 - 1432)) + v47, STACK[0x368]);
  v61 = (v53 ^ 0x37FCFDB5) - 72093824 + ((2 * v53) & 0x6FF9FB6A);
  v62 = STACK[0x2E4];
  if (v61 == 867233077)
  {
    v64 = (char *)&STACK[0x5C0] + v49 - 0x6BB6AC8669DF6A0FLL;
    STACK[0x4D0] = (unint64_t)(v64 - 1824);
    LODWORD(STACK[0x33C]) = 105312336;
    STACK[0x318] = ((((v62 - 1334) | 0x15u) + 103) ^ 0xFFFFFFFFFFFFFEBELL) + v49;
    STACK[0x500] = 0;
    LODWORD(STACK[0x418]) = 2038179982;
    v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 + 8 * ((v62 - 555) ^ (967 * (v64 != (char *)1576)))) - 12);
    STACK[0x2B8] = STACK[0x530];
    STACK[0x2C8] = (unint64_t)(v64 - 1596);
    STACK[0x2D0] = (unint64_t)(v64 - 1824);
    return v65(v53, v54, v55, v56, v57, v58, v59, v60, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12,
             a13,
             a14,
             a15,
             a16,
             a17,
             a18,
             a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47);
  }
  else if (v61 == 1135668536)
  {
    LODWORD(STACK[0x304]) = -2000486744;
    return (*(uint64_t (**)(void))(v50 + 8 * (((STACK[0x440] != 0) * (((v62 - 1696) | 0x245) ^ 0x7FD)) ^ (v62 - 1321))))();
  }
  else
  {
    v66 = 3804331 * (((v52 - 192) & 0x49B54F0D | ~((v52 - 192) | 0x49B54F0D)) ^ 0xC89F9504);
    *(_QWORD *)(v52 - 184) = a21;
    *(_DWORD *)(v52 - 192) = v61 - v66 - ((2 * v61 - 1734466154) & 0xEE7B4B20) + 1133295707;
    *(_DWORD *)(v52 - 188) = v66 + v62 - 93;
    v67 = v62;
    v68 = sub_1AC1C29BC((_DWORD *)(v52 - 192));
    return (*(uint64_t (**)(uint64_t))(v50
                                              + 8
                                              * (((STACK[0x440] != 0) * (((v67 - 1696) | 0x245) ^ 0x7FD)) ^ (v67 - 1321))))(v68);
  }
}

uint64_t sub_1AC1E3A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;

  v71 = ((uint64_t (*)(uint64_t))STACK[0x220])(a68);
  STACK[0x318] = STACK[0x260] - 1824;
  LODWORD(STACK[0x304]) = v68;
  return (*(uint64_t (**)(uint64_t))(v70
                                            + 8
                                            * (((STACK[0x440] != 0) * (((v69 - 414) | 0x245) ^ 0x7FD)) ^ (v69 - 39))))(v71);
}

uint64_t sub_1AC1E3AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  int v6;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5
                                                                                + 8
                                                                                * ((1042
                                                                                  * (((LODWORD(STACK[0x304]) == v6) ^ (v4 + 83 + v4 + 96)) & 1)) ^ v4)))(a1, a2, a3, a4, 2294480457);
}

uint64_t sub_1AC1E3B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,int a53,uint64_t a54,uint64_t a55)
{
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;

  v60 = 535753261 * ((-32863559 - ((v59 - 192) | 0xFE0A8AB9) + ((v59 - 192) | 0x1F57546)) ^ 0xB017B69);
  v61 = LODWORD(STACK[0x554]) - v60 + ((v55 - 1618278541) & 0x6074FEBB ^ 0x2C6EAA04);
  *(_DWORD *)(v59 - 184) = v55 - v60 + 232;
  *(_QWORD *)(v59 - 152) = a55;
  *(_QWORD *)(v59 - 192) = a50;
  *(_QWORD *)(v59 - 176) = a51;
  *(_DWORD *)(v59 - 160) = v61;
  *(_DWORD *)(v59 - 168) = (2050800995 * a53 + 333737197) ^ v60;
  v62 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v57 + 8 * (int)(v55 + 44)) - 4))(v59 - 192);
  v63 = *(_DWORD *)(v59 - 164);
  LODWORD(STACK[0x364]) = v63;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v56 + 8 * ((52 * (v63 != v58 + (v55 ^ 0x39) - 176)) | v55))
                                          - 8))(v62);
}

uint64_t sub_1AC1E3C84()
{
  int v0;
  uint64_t v1;

  STACK[0x4F0] = STACK[0x2F0];
  LODWORD(STACK[0x4F8]) = STACK[0x42C];
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((121
                                * ((STACK[0x554] & 0xFFFFFFFE) != ((((((v0 + 1021) | 0x302) + 766710288) & 0xD24CE6FD)
                                                                  + 1096423023) ^ (20 * (((v0 + 1021) | 0x302) ^ 0x7F9))))) ^ ((v0 + 1021) | 0x302))))();
}

void sub_1AC1E3D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  char *v10;

  LODWORD(STACK[0x364]) = a5 + 54;
  v10 = (char *)&a9 + v9 - 0x6BB6AC8669DF644FLL;
  STACK[0x2A8] = (unint64_t)(v10 + 2048);
  STACK[0x2B0] = (unint64_t)(v10 + 2176);
  STACK[0x2D8] = (unint64_t)v10;
  STACK[0x2B8] = (unint64_t)(v10 + 2304);
  JUMPOUT(0x1AC1DEC38);
}

uint64_t sub_1AC1E3D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;

  v66 = STACK[0x4F0];
  v67 = LODWORD(STACK[0x42C]) ^ 0x2FFFFFFF;
  v68 = (2 * LODWORD(STACK[0x42C])) & 0x5FFFFFFE;
  v69 = 535753261 * ((((2 * (v65 - 192)) | 0xA5657554) - (v65 - 192) + 760038742) ^ 0xD846B485);
  *(_DWORD *)(v65 - 192) = v62 - v69 + 368399988;
  *(_QWORD *)(v65 - 184) = a60;
  *(_QWORD *)(v65 - 176) = a59;
  *(_DWORD *)(v65 - 164) = (v61 + 385750381) ^ v69;
  *(_DWORD *)(v65 - 160) = v67 - v69 + v68 - 665823432;
  *(_QWORD *)(v65 - 152) = v66;
  *(_QWORD *)(v65 - 144) = v60;
  v70 = sub_1AC1F46B8(v65 - 192);
  v71 = *(_DWORD *)(v65 - 168);
  LODWORD(STACK[0x364]) = v71;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v63
                                                      + 8
                                                      * (int)(((v71 == v64) * (((v62 + 1331205883) & 0xB0A76EFF) - 885)) ^ v62))
                                          - 8))(v70);
}

uint64_t sub_1AC1E3E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,int a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;

  v60 = STACK[0x4F8];
  v61 = 1178560073 * ((((v59 - 192) ^ 0x7DF756FF) & 0x1E35DE2F | ~((v59 - 192) ^ 0x7DF756FF | 0x1E35DE2F)) ^ 0x26A90F4D);
  v62 = v61 + *(_DWORD *)(STACK[0x228] + 52) + 801426352;
  *(_DWORD *)(v59 - 184) = v61
                         + (a44 ^ 0x8068EBB0)
                         - 68360225
                         + ((((v55 + 1011) | 0x208) - 1456596634) ^ (2 * a44) & 0xA9AFF67E);
  *(_DWORD *)(v59 - 180) = ((v60 ^ 0xDE92FBFB) + 1677698749 + ((2 * v60) & 0xBD25F7F6)) ^ v61;
  *(_QWORD *)(v59 - 192) = a54;
  *(_QWORD *)(v59 - 168) = v54;
  *(_QWORD *)(v59 - 160) = &STACK[0x18E0];
  *(_DWORD *)(v59 - 176) = v61 + v55 - 140;
  *(_DWORD *)(v59 - 172) = v62;
  v63 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v57 + 8 * (v55 - 6)) - 8))(v59 - 192);
  v64 = *(_DWORD *)(v59 - 152);
  LODWORD(STACK[0x364]) = v64;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v56 + 8 * ((2006 * (v64 == v58)) ^ v55)) - 8))(v63);
}

uint64_t sub_1AC1E3F48()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * ((496 * (v0 - 1096421781 < ((v1 + 54) ^ 0x64Bu) - 1722)) ^ (v1 + 54)))
                            - 8))();
}

uint64_t sub_1AC1E3F88@<X0>(uint64_t a1@<X1>, int a2@<W8>, unint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t (*a23)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t *, uint64_t, uint64_t, unint64_t *),uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,unsigned int *a61,void (*a62)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v80;
  int v81;
  unint64_t v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  char *v89;

  v70 = *(unsigned int *)STACK[0x228];
  v71 = *(_DWORD *)(STACK[0x228] + 52) + ((a2 + 1477) ^ 0xDEFFEE2A);
  a3 = &STACK[0x540];
  a4 = &STACK[0x51C];
  v72 = a23(v70, a1, a38 ^ 0xD4BF108F, v71, &STACK[0x18E0], v62, v63, &STACK[0x18C8]);
  v74 = STACK[0x2E4];
  v75 = (v72 ^ 0xAF779A71) + 1541268992 + ((2 * v72) & 0x5EEF34E2);
  if (v75 == 458588276)
  {
    LODWORD(STACK[0x2C8]) = 458588276;
    return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v66
                                                                 + 8
                                                                 * ((114
                                                                   * (LODWORD(STACK[0x2C0]) - 550622135 >= ((v74 - 1024) ^ 0x2BBu))) ^ (v74 - 1155)))
                                                     - 12))(v72, v73);
  }
  else
  {
    if (v75 != 190152817)
    {
      v76 = (v72 ^ 0xAF779A71) + 1541268992 + ((2 * v72) & 0x5EEF34E2);
      v77 = (2 * v75 - 380305634) & 0xEE7B4B20;
      v78 = 3804331 * ((v69 - 2047617830 - 2 * ((v69 - 192) & 0x85F3D59A)) ^ 0xFB26F06C);
      LODWORD(STACK[0x2C8]) = v76;
      *(_DWORD *)(v69 - 192) = v76 - v78 - v77 + 1810375967;
      *(_DWORD *)(v69 - 188) = v78 + v74 - 93;
      *(_QWORD *)(v69 - 184) = a21;
      sub_1AC1C29BC((_DWORD *)(v69 - 192));
      v89 = (char *)&a3 + v65 - 0x6BB6AC8669DF644FLL;
      STACK[0x2A8] = (unint64_t)(v89 + 2048);
      STACK[0x2B0] = (unint64_t)(v89 + 2176);
      STACK[0x2D8] = (unint64_t)v89;
      STACK[0x2B8] = (unint64_t)(v89 + 2304);
      JUMPOUT(0x1AC1DEC38);
    }
    v80 = v74 ^ 0x428;
    v81 = v74 - 1054;
    a62(*a61, v62, v63);
    STACK[0x4F0] = 0;
    LODWORD(STACK[0x4F8]) = 0;
    v82 = STACK[0x540];
    v83 = a38 & 0x7FFFFFFF ^ 0x89F6EF74;
    v84 = *(_DWORD *)(STACK[0x228] + 52) + 939624253;
    v85 = (LODWORD(STACK[0x51C]) ^ 0x37FE7FFF) - 337647641 + ((2 * LODWORD(STACK[0x51C])) & 0x6FFCFFFE);
    v86 = 535753261 * (((((v69 - 192) | 0xC12490CE) ^ 0xFFFFFFFE) - (~(v69 - 192) | 0x3EDB6F31)) ^ 0x342F611E);
    *(_DWORD *)(v69 - 176) = LODWORD(STACK[0x2E4]) - v86 - 1635;
    *(_DWORD *)(v69 - 192) = v84 ^ v86;
    *(_DWORD *)(v69 - 188) = v85 ^ v86;
    *(_DWORD *)(v69 - 144) = v83 - v86 + ((v80 - 1164706458) & v64 ^ 0xA8122116) - 71852368;
    *(_QWORD *)(v69 - 168) = a48;
    *(_QWORD *)(v69 - 152) = v82;
    *(_QWORD *)(v69 - 184) = &STACK[0x18C8];
    v87 = ((uint64_t (*)(uint64_t))(*(_QWORD *)(v67 + 8 * (LODWORD(STACK[0x2E4]) ^ 0x6AC)) - 4))(v69 - 192);
    v88 = *(_DWORD *)(v69 - 160);
    LODWORD(STACK[0x364]) = v88;
    return (*(uint64_t (**)(uint64_t))(v66 + 8 * ((1329 * (v88 == v68)) ^ v81)))(v87);
  }
}

uint64_t sub_1AC1E7398()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((95
                                          * ((((v1 - 368) ^ (v1 + 1064) ^ ((v0 & 0xFFFFFFFE) == 1096421780)) & 1) == 0)) ^ v1))
                            - 12))();
}

uint64_t sub_1AC1E73DC(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _BOOL4 v5;

  LODWORD(STACK[0x364]) = v2 + 54;
  v4 = STACK[0x540];
  v5 = LODWORD(STACK[0x51C]) == 0;
  STACK[0x450] = LODWORD(STACK[0x51C]);
  return ((uint64_t (*)(uint64_t, unint64_t))(*(_QWORD *)(v3
                                                                        + 8
                                                                        * ((650 * ((((37 * (v1 ^ 0x6AA)) ^ v5) & 1) == 0)) ^ (v1 - 448)))
                                                            - 8))(a1, v4);
}

uint64_t sub_1AC1E7548@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = (v2 ^ 0x205u) - 10;
  v5 = ((unint64_t)&STACK[0x450] ^ 0xDFF27F7BFB8E5BF3)
     + ((2 * (_QWORD)&STACK[0x450]) & 0xBFE4FEF7F71CB7E0)
     + 0x75EFFFFDFCF5FB5ALL
     + v4;
  v6 = a2 - 1;
  STACK[0x450] = v6;
  *(_BYTE *)(a1 + v6) = (((v2 ^ 5) + 61) & 0xFD ^ v5 ^ 0x42) * (v5 + 17);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((14 * (STACK[0x450] != 0)) ^ v4)) - 12))();
}

void sub_1AC1E75F8()
{
  JUMPOUT(0x1AC1E75B8);
}

uint64_t sub_1AC1E7600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int *a66;
  void (*a67)(_QWORD, uint64_t, _QWORD);
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;

  v71 = 20 * (v67 ^ 0x2CC);
  a67(*a66, a2, 0);
  v72 = LODWORD(STACK[0x364]);
  v73 = 1374699841 * ((((2 * v68) | 0xC2EC4BD4754C34B4) - v68 - 0x617625EA3AA61A5ALL) ^ 0x6F7ABBE657520253);
  *(_QWORD *)(v70 - 160) = 2294480458u - v73;
  *(_QWORD *)(v70 - 184) = v72 + v73;
  *(_DWORD *)(v70 - 168) = v71 - v73 + 2021362057;
  *(_DWORD *)(v70 - 176) = ((v71 + 1309722050) ^ 0xE0) + v73;
  *(_DWORD *)(v70 - 172) = (v71 + 1309722050) ^ v73;
  *(_DWORD *)(v70 - 192) = v73 + v71 + 1309722050 + 123;
  *(_DWORD *)(v70 - 152) = v73;
  v74 = ((uint64_t (*)(uint64_t))STACK[0x210])(v70 - 192);
  return (*(uint64_t (**)(uint64_t))(v69 + 8 * *(int *)(v70 - 188)))(v74);
}

uint64_t sub_1AC1E7704()
{
  int v0;
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(STACK[0x228] + 56);
  *(_DWORD *)(STACK[0x228] + 56) = v2 + 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8 * ((2008 * ((v2 - 2095618611) < 0xFFFFFFFA)) ^ (v0 - 990)))
                            - ((v0 - 990) ^ 0x2DELL)))();
}

void sub_1AC1E774C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void (*a44)(uint64_t),uint64_t a45)
{
  int v45;
  uint64_t v46;
  uint64_t v47;

  *(_DWORD *)(v47 - 192) = v45 + 990 + 1225351577 * ((v47 - 192) ^ 0x239AD816) + 2138961640;
  sub_1AC1F42DC((_DWORD *)(v47 - 192));
  *(_DWORD *)(v47 - 184) = 1759421093
                         * ((-2 - (((v47 - 192) ^ 0x40124F0 | 0xA9EED30A) + ((v47 - 192) ^ 0x28D102 | 0x56112CF5))) ^ 0x48ABBA59)
                         + v45
                         - 203;
  *(_QWORD *)(v47 - 192) = a45;
  *(_QWORD *)(v47 - 176) = v46;
  LOBYTE(STACK[0x196C]) = -91 * ((-2 - (((v47 + 64) ^ 0xF0 | 0xA) + ((v47 + 64) ^ 2 | 0xF5))) ^ 0x59) + 12;
  a44(v47 - 192);
  JUMPOUT(0x1AC1DF2DCLL);
}

uint64_t sub_1AC1E7810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,int a53)
{
  int v53;
  uint64_t v54;
  int v55;

  return (*(uint64_t (**)(void))(v54
                              + 8
                              * (int)((((LODWORD(STACK[0x40C]) ^ v55) != ((v53 + 2046078307) & 0x860B56BA ^ 0xD2D21BA6)
                                                                       + a53)
                                     * (((v53 + 1014901857) & 0xC381D7BC) - 62)) ^ v53)))();
}

void sub_1AC1E7878()
{
  int v0;

  LODWORD(STACK[0x364]) = v0 + 389;
  JUMPOUT(0x1AC1E763CLL);
}

uint64_t sub_1AC1E7888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6
                                                                                 + 8
                                                                                 * (v5 | (4 * (v3 == v4)) | ((v3 == v4) << 6)))
                                                                     - ((v5 ^ 0x225u)
                                                                      + 295)
                                                                     + 592))(a1, 2023767417, a3, 2271199878);
}

uint64_t sub_1AC1E78D0()
{
  char v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((103
                                          * ((((v0 & 0x18) == ((v1 + 1229) ^ 0x602)) ^ (v1 + 4)) & 1)) ^ v1))
                            - 4))();
}

uint64_t sub_1AC1E791C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W8>)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_QWORD *)(a1 - 7 + (a4 + a3 - v5)) = *(_QWORD *)(a2 - 7 + (a4 + a3 - v5));
  return ((uint64_t (*)(void))(*(_QWORD *)(v7
                                        + 8
                                        * ((988
                                          * (((((2 * v6) ^ 0x9DA) - 453639792) & 0x1B09FFF1 ^ 0x768) + v5 != ((((2 * v6) ^ 0x9DA) - 1510) & v4))) ^ (2 * v6) ^ 0x9DA))
                            - 12))();
}

uint64_t sub_1AC1E7990(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v4
                                                                                 + 8
                                                                                 * (((((v3 - 1248) | 0x438) - 1583)
                                                                                   * (v1 == v2)) ^ v3))
                                                                     - (v3 - 1284)
                                                                     + 596))(a1, 2023767417, STACK[0x2D8]);
}

void sub_1AC1E79D8(unint64_t a1)
{
  int v1;

  STACK[0x500] = a1;
  LODWORD(STACK[0x418]) = v1;
  JUMPOUT(0x1AC1E79ECLL);
}

void sub_1AC1E7AAC()
{
  JUMPOUT(0x1AC1E7A64);
}

uint64_t sub_1AC1E7AB4()
{
  unsigned int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  v3 = ((uint64_t (*)(void))STACK[0x220])();
  LODWORD(STACK[0x580]) = v2;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * (int)(((v0 + 1057) * (v2 != 2000528784)) ^ v0))
                                          - (v0 ^ 0x3D6)))(v3);
}

uint64_t sub_1AC1E7AF8()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((1664 * (STACK[0x3B8] != 0)) ^ (v0 - 1210))) - 12))();
}

#error "1AC1E851C: call analysis failed (funcsize=103)"

uint64_t sub_1AC1E7B64(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(a1 + (v5 + a4)) = *(_BYTE *)(a3 + (v5 + a4));
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((28 * (v5 - 1 == a2)) ^ (v4 - 880)))
                            - ((2 * v4) ^ 0xD7CLL)))();
}

uint64_t sub_1AC1E7BAC(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;

  v5 = ((3 * (a3 ^ 0x7B1) - 794) & v3) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((32 * v5) | (v5 << 6)) ^ (a3 - 514))) - 4))();
}

uint64_t sub_1AC1E7BE8@<X0>(int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (a1 ^ (1968 * ((v3 ^ v1) < 0x201))))
                            - ((a1 + 925) ^ 0x6BCLL)))();
}

uint64_t sub_1AC1E7C24@<X0>(unsigned int a1@<W8>)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8 * (int)(a1 ^ (1681 * ((5 * v2) + 4 == v1 - 2038179982))))
                            - (a1 ^ 0x31FLL)))();
}

uint64_t sub_1AC1E7C6C@<X0>(int a1@<W8>)
{
  unint64_t v1;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  void (*v18)(uint64_t);
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;

  v2[31] = 0x4280B02C7EB1552ALL;
  v2[32] = v2 + 33;
  v2[65] = 0x4280B02C7EB1552ALL;
  STACK[0x2C0] = v1;
  v2[66] = v2 + 67;
  STACK[0x260] = (unint64_t)v2 + 0x4E242FFD6E71663BLL;
  v2[99] = 0x4280B02C7EB1552ALL;
  v2[100] = v2 + 101;
  STACK[0x278] = (unint64_t)v2 + 0x4E242FFD6E71674BLL;
  v2[133] = 0x4280B02C7EB1552ALL;
  v2[134] = v2 + 135;
  STACK[0x2A0] = (unint64_t)v2 + 0x4E242FFD6E71685BLL;
  v2[167] = 0x4280B02C7EB1552ALL;
  v2[168] = v2 + 169;
  STACK[0x2A8] = (unint64_t)v2 + 0x4E242FFD6E71696BLL;
  v8 = STACK[0x500] + 4;
  LODWORD(STACK[0x2D8]) = 2 * v6;
  v9 = a1 + 272;
  v10 = 1224239923 * ((-216727799 - ((v7 - 192) | 0xF314FF09) + ((v7 - 192) | 0xCEB00F6)) ^ 0xFE58FD21);
  *(_DWORD *)(v7 - 176) = (v6 ^ 0x81CB1C47) - v10 + 1067439678 + ((2 * v6) & 0xEDED73AE ^ 0xEC694320);
  *(_QWORD *)(v7 - 168) = (char *)v2 + 0x4E242FFD6E71652BLL;
  *(_QWORD *)(v7 - 184) = v8;
  LODWORD(STACK[0x250]) = a1 + 272;
  *(_DWORD *)(v7 - 188) = (a1 + 272) ^ v10;
  v11 = (void (*)(uint64_t))((char *)*(&off_1E5B5B480 + (a1 ^ 0x3C2)) - 8);
  STACK[0x2B0] = (unint64_t)v11;
  v11(v7 - 192);
  v12 = v8 + v4;
  LODWORD(v8) = STACK[0x2D8];
  v13 = (STACK[0x2C0] + 2113778742) & LODWORD(STACK[0x2D8]) ^ 0x6C790A20;
  v14 = 1224239923 * ((v7 - 622119360 - 2 * ((v7 - 192) & 0xDAEB3700)) ^ 0x2858CAD7);
  *(_DWORD *)(v7 - 188) = v9 ^ v14;
  *(_QWORD *)(v7 - 168) = STACK[0x260];
  *(_DWORD *)(v7 - 176) = (v6 ^ 0x49C378E7) - v14 - 141053282 + v13;
  *(_QWORD *)(v7 - 184) = v12;
  v15 = v12;
  ((void (*)(uint64_t))STACK[0x2B0])(v7 - 192);
  STACK[0x260] = v15 + v4;
  v16 = v8 & 0xFFEF352A ^ 0xEE6B0120;
  v17 = 1224239923 * (((v7 - 192) & 0x930A1A47 | ~((v7 - 192) | 0x930A1A47)) ^ 0x9E46186F);
  LODWORD(v8) = STACK[0x250];
  *(_DWORD *)(v7 - 188) = LODWORD(STACK[0x250]) ^ v17;
  *(_QWORD *)(v7 - 168) = STACK[0x278];
  *(_DWORD *)(v7 - 176) = (v6 ^ 0x88CA3F05) - v17 + 916387200 + v16;
  *(_QWORD *)(v7 - 184) = v15 + v4;
  v18 = (void (*)(uint64_t))STACK[0x2B0];
  ((void (*)(uint64_t))STACK[0x2B0])(v7 - 192);
  v19 = STACK[0x260] + v4;
  STACK[0x278] = v19;
  v20 = STACK[0x2D8] & 0x6D3F3F2E ^ 0x6C3B0B20;
  v21 = 1224239923 * (((v7 - 192) & 0xE2A24F85 | ~((v7 - 192) | 0xE2A24F85)) ^ 0xEFEE4DAD);
  *(_QWORD *)(v7 - 168) = STACK[0x2A0];
  *(_QWORD *)(v7 - 184) = v19;
  *(_DWORD *)(v7 - 188) = v8 ^ v21;
  *(_DWORD *)(v7 - 176) = (v6 ^ 0xC1A23A07) - v21 + 2146889854 + v20;
  v18(v7 - 192);
  v22 = STACK[0x2D8] & 0x6D3F672E ^ 0x6C3B4320;
  v23 = 1224239923 * ((((2 * (v7 - 192)) | 0x2A591B26) - (v7 - 192) - 355241363) ^ 0xE79F7044);
  *(_DWORD *)(v7 - 188) = v8 ^ v23;
  *(_DWORD *)(v7 - 176) = (v6 ^ 0xC1A21607) - v23 + 2146884734 + v22;
  *(_QWORD *)(v7 - 184) = STACK[0x278] + v4;
  *(_QWORD *)(v7 - 168) = STACK[0x2A8];
  v18(v7 - 192);
  v24 = 17 * (STACK[0x2C0] ^ 0x6A1);
  v25 = STACK[0x2C0] - 331;
  v26 = STACK[0x500];
  STACK[0x468] = (v3 - 2038179982);
  return ((uint64_t (*)(unint64_t))(*(_QWORD *)(v5 + 8 * (((v3 != 2038179982) * (v24 + 496)) ^ v25))
                                                   - 4))(v26);
}

uint64_t sub_1AC1E80D8@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v4 = ((unint64_t)&STACK[0x468] ^ 0xDEEF7A58F7FFEDF7)
     + 0x67FBF5AF4CDAFAFCLL
     + ((2 * (_QWORD)&STACK[0x468]) & 0xBDDEF4B1EFFFDBE0);
  v5 = ((8 * a2) ^ 0xFFFFFFFFFFFFF2B7) + v2;
  STACK[0x468] = v5;
  *(_BYTE *)(a1 + v5) = ((v4 + 13) ^ 0xBA) * (v4 + 30);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1220 * (STACK[0x468] == 0)) ^ a2)) - 4))();
}

void sub_1AC1E8170()
{
  JUMPOUT(0x1AC1E8134);
}

uint64_t sub_1AC1E8178()
{
  uint64_t v0;
  int v1;

  ((void (*)(void))STACK[0x220])();
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((1664 * (STACK[0x3B8] != 0)) ^ (v1 - 1210))) - 12))();
}

uint64_t sub_1AC1E81BC()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  v4 = v0;
  v5 = ((uint64_t (*)(void))STACK[0x220])();
  v6 = 37 * (v3 ^ 0x6B3);
  STACK[0x318] = STACK[0x318] + 20 * (v6 ^ 0x1C1u) - 1736;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v1 + 8 * ((49 * (v4 == v2)) ^ v6)) - 12))(v5);
}

uint64_t sub_1AC1E8234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;

  v68 = 628203409
      * ((((2 * ((v67 - 192) ^ 0xCB29BA39)) | 0xB4D0945C) - ((v67 - 192) ^ 0xCB29BA39) - 1516784174) ^ 0x13C9FC24);
  *(_QWORD *)(v67 - 160) = 0;
  *(_QWORD *)(v67 - 152) = 0;
  *(_QWORD *)(v67 - 136) = a61;
  *(_QWORD *)(v67 - 128) = a49;
  *(_QWORD *)(v67 - 192) = a62;
  *(_DWORD *)(v67 - 184) = (v63 + 1590) ^ v68;
  *(_DWORD *)(v67 - 144) = 105312336 - v68;
  *(_QWORD *)(v67 - 176) = v62;
  v69 = (*(uint64_t (**)(uint64_t))(v65 + 8 * (v63 - 398)))(v67 - 192);
  v70 = *(_DWORD *)(v67 - 168);
  LODWORD(STACK[0x584]) = v70;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v64 + 8 * (((v70 == v66) * ((v63 + 1313) ^ 0x4C1)) ^ v63))
                                          - ((v63 + 1313) ^ 0x6B4)))(v69);
}

void sub_1AC1E8308()
{
  JUMPOUT(0x1AC1E831CLL);
}

void sub_1AC1E847C()
{
  JUMPOUT(0x1AC1E84A8);
}

uint64_t sub_1AC1E8520(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  STACK[0x2D8] = v4;
  v7 = STACK[0x55C];
  *(_DWORD *)(STACK[0x5A8] + 4 * ((v7 + v3) >> LODWORD(STACK[0x2B0]))) = v6;
  LODWORD(STACK[0x55C]) = v7 + 4;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v5
                                                      + 8
                                                      * (int)((((v7 + 4 + v3) < 0x40)
                                                             * ((a3 + 42872894) & 0xFD71CFB9 ^ 0x7AD)) ^ (a3 + 22)))
                                          - ((a3 - 1720) ^ 8)))(616568301);
}

uint64_t sub_1AC1E9C0C@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;

  v10 = v7 + v4;
  v11 = *(_DWORD *)(a2 + 4 * (v7 + v4 - 8)) ^ *(_DWORD *)(a2 + 4 * (v7 + v4 - 3));
  v12 = *(_DWORD *)(a2 + 4 * (v10 - 16)) ^ *(_DWORD *)(a2 + 4 * (v10 - 14)) ^ (v11 + v9 - ((v5 + ((v2 + v6) & a1) - 484) & (2 * v11)));
  HIDWORD(v13) = v12 ^ v9;
  LODWORD(v13) = v12;
  *(_DWORD *)(a2 + 4 * (v3 + v7)) = (v13 >> 31) + v9 - (v5 & (2 * (v13 >> 31)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((126 * ((v3 + 1 + v7) < 0x50)) ^ v2)) - 8))();
}

uint64_t sub_1AC1E9CA0()
{
  unsigned int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * v0) - 8))();
}

void sub_1AC1E9D60()
{
  JUMPOUT(0x1AC1E9CC0);
}

uint64_t sub_1AC1E9D78(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1064 * ((v2 + 21 + v1) < 0x28)) ^ a1 ^ 0x613u))
                            - 4))();
}

void sub_1AC1E9E1C()
{
  JUMPOUT(0x1AC1E9D90);
}

uint64_t sub_1AC1E9E34(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((496 * ((a2 + 1 + v3) > 0x3B)) ^ v2)) - 4))();
}

uint64_t sub_1AC1E9F04(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v6 + 8 * ((2021 * ((a4 + 1 + v5) > 0x4F)) ^ v4))
                                          - 4))(a3);
}

void sub_1AC1E9FD8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;

  LODWORD(STACK[0x394]) = v0;
  LODWORD(STACK[0x484]) = v3;
  LODWORD(STACK[0x374]) = v1;
  LODWORD(STACK[0x428]) = v4;
  LODWORD(STACK[0x4AC]) = v2;
  v9 = STACK[0x598];
  v10 = *(_DWORD *)(STACK[0x598] - 0x1786E53DF64A86BCLL);
  LODWORD(STACK[0x55C]) = v6 + 80;
  *(_DWORD *)(v9 - 0x1786E53DF64A86BCLL) = (v10 ^ v8)
                                         + (v2 ^ v8)
                                         + ((v5 + 1559) ^ (v8 - 696))
                                         - (v7 & (2 * ((v10 ^ v8) + (v2 ^ v8))));
  JUMPOUT(0x1AC1EA040);
}

uint64_t sub_1AC1EA124(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v10;
  uint64_t v11;

  v7 = STACK[0x4C0];
  v8 = *(unsigned __int8 *)(STACK[0x4C0] - 0x1786E53DF64A86B4) ^ 6;
  if (v8 == 2)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 8 * ((14 * (*(_DWORD *)(v7 - 0x1786E53DF64A86B8) != 1961237157)) ^ (a3 - 676))) - STACK[0x240] + 816))(a1, a2, 3227492499, 2033498624, 1894651743, a6, 1032, 234);
  if (v8 == 1)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 8 * (((*(_DWORD *)(v7 - 0x1786E53DF64A86B8) != 1961237157) * ((LODWORD(STACK[0x2E4]) - 137) ^ 0x619)) ^ (LODWORD(STACK[0x2E4]) - 1565)))
                                                                                                  - 8))(a1, 2660272140, 1902427217, 234, 1894651743, a6, 79);
  v10 = STACK[0x278];
  v11 = LODWORD(STACK[0x2E4]);
  STACK[0x358] = 91;
  *(_BYTE *)(v7 - 0x1786E53DF64A86B9) = ((v10 + 40 * ((a3 + 55) ^ 0xC4)) ^ 0xBA) * (v10 - 55);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                                                  + 8 * ((22 * (STACK[0x358] == 0)) ^ (a3 - 1481))))(v11, 2660272140, 1902427217, 234, 1894651743, a6, 79);
}

void sub_1AC1EA9F8()
{
  JUMPOUT(0x1AC1EA9B4);
}

uint64_t sub_1AC1EAA00()
{
  return ((uint64_t (*)(void))STACK[0x4A0])();
}

uint64_t sub_1AC1EAA34(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v6 = (a3 - 1072);
  *(_DWORD *)(STACK[0x228] + 52) = ((((LODWORD(STACK[0x57C]) ^ v5) + (v4 ^ v5)) % 0x2710) ^ 0x6924776E)
                                 - 1210343424
                                 + ((2 * (((LODWORD(STACK[0x57C]) ^ v5) + (v4 ^ v5)) % 0x2710)) & 0x6EDC);
  v7 = STACK[0x584];
  STACK[0x318] += v6 ^ 0xFFFFFFFFFFFFFB38;
  LODWORD(STACK[0x304]) = v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (int)((425 * (v7 == v5)) ^ v6)) - 4))();
}

uint64_t sub_1AC1EAAC8@<X0>(int a1@<W8>)
{
  _DWORD *v1;
  uint64_t v2;

  *v1 = STACK[0x514];
  v1[85] = STACK[0x3A4];
  v1[86] = STACK[0x408];
  v1[87] = STACK[0x4BC];
  v1[88] = STACK[0x4EC];
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((STACK[0x440] != 0) * (((((a1 - 136) | 0x4B8) - 1696) | 0x245) ^ 0x7FD)) ^ (((a1 - 136) | 0x4B8) - 1321))))();
}

uint64_t sub_1AC1EAB38(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  STACK[0x318] -= 1616;
  LODWORD(STACK[0x304]) = -2000486745;
  return (*(uint64_t (**)(void))(v3 + 8 * (((STACK[0x440] != 0) * (((a3 - 1696) | 0x245) ^ 0x7FD)) ^ (a3 - 1321))))();
}

uint64_t sub_1AC1EAB94@<X0>(uint64_t a1@<X1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,unsigned int *a60,uint64_t (*a61)(_QWORD, uint64_t, _QWORD))
{
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v63 = (a2 + 138) | 0x44;
  v64 = a61(*a60, a1, LODWORD(STACK[0x3DC]));
  return (*(uint64_t (**)(uint64_t))(v61
                                            + 8
                                            * ((1042
                                              * (((LODWORD(STACK[0x304]) == v62) ^ (v63 + 83 + v63 + 96)) & 1)) ^ v63)))(v64);
}

uint64_t sub_1AC1EAC68(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * (((STACK[0x440] != 0) * (((a3 - 1696) | 0x245) ^ 0x7FD)) ^ (a3 - 1321))))();
}

void sub_1AC1EACA4(uint64_t a1)
{
  int v1;
  _BOOL4 v4;

  v4 = *(_QWORD *)(a1 + 40) == 0x55F9EC3874D1DF3FLL
    || *(_QWORD *)(a1 + 16) == 0x2B713C514868F96DLL
    || *(_QWORD *)a1 == 0x5E8381E6C8546BF4;
  v1 = *(_DWORD *)(a1 + 8) + 535753261 * ((((2 * a1) | 0xD63BF148) - a1 - 1797126308) ^ 0x61E9F68B);
  __asm { BR              X9 }
}

uint64_t sub_1AC1EADC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v20;
  uint64_t v21;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 + 8 * ((959 * (*(_DWORD *)(a20 - 0x55F9EC3874D1DF27) == (((v20 - 301) | 0x28B) ^ 0x773DA77B))) ^ v20))
                                                                                                - ((v20 - 93) | 0x41u)
                                                                                                + 361))(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1AC1EAE34@<X0>(int a1@<W8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  __n128 v22;
  __n128 v23;
  unsigned int v24;
  _BOOL4 v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  uint64_t (*v29)(__n128, __n128, __n128, __n128, __n128, __n128);

  v20 = (v17 - 958971892) & 0x3928BF3E;
  if (a1 + *(_DWORD *)(a13 + 32) - 1841872465 >= (v20 - 568))
    v21 = 23169951;
  else
    v21 = 23169963;
  v22.n128_u64[0] = 0xEAEAEAEAEAEAEAEALL;
  v22.n128_u64[1] = 0xEAEAEAEAEAEAEAEALL;
  v23.n128_u64[0] = 0x7575757575757575;
  v23.n128_u64[1] = 0x7575757575757575;
  v24 = *(_DWORD *)(a17 - 0x55F9EC3874D1DF2FLL) - 483469307;
  v25 = v24 < 0x2098E9D;
  v26 = (v20 ^ 0xE5E96EB6) + 471867933;
  v27 = v25 ^ (v26 < 0x2098E9D);
  v28 = v26 < v24;
  if (!v27)
    LOBYTE(v25) = v28;
  v29 = *(uint64_t (**)(__n128, __n128, __n128, __n128, __n128, __n128))(v18
                                                                                 + 8
                                                                                 * ((119
                                                                                   * (((v20 + 101) ^ v25) & 1)) ^ v20));
  *(_DWORD *)(v19 - 144) = v21;
  return v29(a2, a3, a4, a5, v22, v23);
}

uint64_t sub_1AC1EB09C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, _DWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v26;
  int v27;

  v26 = (((((v20 ^ 0x3BB) - 28) ^ 0xFE9E7510) + a1) & ((((v20 ^ 0x3BB) - 397) | 0x64) ^ 0xFFFFFF94)) + 16;
  v23 = 1759421093 * ((v22 - 136) ^ 0xB37DB054);
  *(_QWORD *)(v22 - 128) = a20;
  v27 = v20 ^ 0x3BB;
  *(_DWORD *)(v22 - 120) = (v20 ^ 0x3BB) - v23 + 1289;
  *(_DWORD *)(v22 - 136) = (v26 ^ 0x76FFBFFF) - v23 + ((2 * v26) & 0xEDFF7FE0) - 12190428;
  *(_DWORD *)(v22 - 132) = v23 + a1 - a14 + 1485774966;
  v24 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E5B5B480 + (v20 ^ 0x3BB) - 162) - 8))(v22 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21 + 8 * ((1561 * (*a15 == 2000528784)) ^ v27)) - 8))(v24);
}

uint64_t sub_1AC1EB1B0(__n128 a1, __n128 a2, __n128 a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, unsigned int a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,uint64_t a24,int a25,unsigned int a26,uint64_t a27,uint64_t a28,unsigned int a29)
{
  uint64_t v29;
  __n128 v30;
  __n128 v31;

  v30.n128_u64[0] = 0xEAEAEAEAEAEAEAEALL;
  v30.n128_u64[1] = 0xEAEAEAEAEAEAEAEALL;
  v31.n128_u64[0] = 0x7575757575757575;
  v31.n128_u64[1] = 0x7575757575757575;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, __n128, __n128, __n128, __n128, __n128, __n128))(*(_QWORD *)(v29 + 8 * (((((a23 - 51) | 0x140) ^ 0x3EA) * (a18 < a17)) ^ a23)) - 4))(1151833980, a29, 371, 3618667447, 3823099367, a26, 2298865501, a1, a2, a3, a4, v30, v31);
}

uint64_t sub_1AC1EB23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v17;
  int v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  char v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  unsigned int v27;

  v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 + 8 * (v17 - 14)) - 8);
  v26 = *v23;
  v27 = v18 + 1151833980;
  *(_BYTE *)(*v23 + v27) = 117;
  *(_BYTE *)(v26 + v27 + 1) = (v19 ^ 0x58) - (v24 & (2 * (v19 ^ 0x58))) + 117;
  *(_BYTE *)(v26 + v27 + 2) = (v22 ^ 0xAA) - (v24 & (2 * (v22 ^ 0xAA))) + 117;
  *(_BYTE *)(v26 + (v18 + 1151833983)) = v20 ^ 0x9C;
  return v25(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

void sub_1AC1EB670()
{
  JUMPOUT(0x1AC1EB604);
}

void sub_1AC1EB684()
{
  JUMPOUT(0x1AC1EB604);
}

uint64_t sub_1AC1EB6AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27)
{
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;

  v29 = (v28 + 486);
  v30 = (a27 ^ a8) - ((2 * (a27 ^ a8)) & 0x7D2C8C72) + (v29 ^ 0xBE96456E);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8 * ((823 * ((a22 & (2 * v30) ^ 0x7C0C8C72) + (v30 ^ 0x1F9A986) + 2046759807 != 963576638)) ^ (v28 - 88))))(a1, v29, a3, a4, a5, a6, 3331390657, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

uint64_t sub_1AC1EB74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15)
{
  int v15;
  int v16;
  uint64_t v17;

  return ((uint64_t (*)(void))(*(_QWORD *)(v17
                                        + 8
                                        * ((((((v16 + v15 + 1083183169) < 8) ^ (a15 - 95)) & 1)
                                          * ((a15 ^ 0x297) + 1269)) ^ a15))
                            - 12))();
}

uint64_t sub_1AC1EB7C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  int v28;
  uint64_t v29;

  return ((uint64_t (*)(void))(*(_QWORD *)(v29
                                        + 8
                                        * ((((v28 ^ 0x580) + v28 - 534 - 1804)
                                          * ((unint64_t)(a24 - a28 - a2 - 0x24DDDA061CFFA817) > 0x1F)) ^ v28))
                            - 8))();
}

uint64_t sub_1AC1EB824(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((19 * (((v3 < 0x20) ^ a3) & 1)) ^ a3))
                            - (a3 ^ 0x2A4u)
                            + 1183))();
}

uint64_t sub_1AC1EB85C(double a1, double a2, double a3, double a4, int8x16_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;

  v15 = v13 + 1083183168 + v12;
  v16 = v10 + v15;
  v17 = vrev64q_s8(*(int8x16_t *)(v16 - 15));
  v18 = vextq_s8(v17, v17, 8uLL);
  v19 = vrev64q_s8(*(int8x16_t *)(v16 - 31));
  v20 = vextq_s8(v19, v19, 8uLL);
  v21 = v9 + v15;
  v22 = vrev64q_s8(vaddq_s8(vsubq_s8(v18, vandq_s8(vaddq_s8(v18, v18), a5)), a6));
  *(int8x16_t *)(v21 - 15) = vextq_s8(v22, v22, 8uLL);
  v23 = vrev64q_s8(vaddq_s8(vsubq_s8(v20, vandq_s8(vaddq_s8(v20, v20), a5)), a6));
  *(int8x16_t *)(v21 - 31) = vextq_s8(v23, v23, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v14
                                        + 8
                                        * ((((v11 & 0xFFFFFFE0) == 32) * ((a9 ^ 0x776) + 1226)) ^ ((a9 ^ 0x776) + 500)))
                            - 4))();
}

void sub_1AC1EB8FC()
{
  JUMPOUT(0x1AC1EB87CLL);
}

uint64_t sub_1AC1EB908@<X0>(int a1@<W5>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (a1 ^ (2 * (a2 - v2 - 1013943351 == ((59 * (a1 ^ 0x69E)) ^ 0x2F1D3317)))))
                            - 12))();
}

uint64_t sub_1AC1EB97C@<X0>(unsigned int a1@<W3>, int a2@<W8>)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  _BOOL4 v9;

  v6 = 13 * (((v3 ^ 0x35E) + 269) ^ 0x172) + a2 - 1511336198 + v2 - 181819767;
  v7 = *(_DWORD *)(v5 - 144) - 699469800;
  v8 = (v7 < a1) ^ (v6 < a1);
  v9 = v6 < v7;
  if (v8)
    v9 = v7 < a1;
  return (*(uint64_t (**)(void))(v4 + 8 * ((!v9 * ((v3 ^ 0x35E) - 90)) ^ ((v3 ^ 0x35E) + 355))))();
}

void sub_1AC1EBCF8()
{
  JUMPOUT(0x1AC1EBD1CLL);
}

uint64_t sub_1AC1EBDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  int v19;
  _BOOL4 v20;

  v17 = v14 + 1118;
  *(_BYTE *)(*v16 + (v13 + a7)) = -11;
  v18 = v13 + 1958403999 + ((v17 - 1483) | 0x189);
  v19 = (a13 > 0x144B0631) ^ (v18 < 0xEBB4F9CE);
  v20 = v18 < a13 - 340461106;
  if (v19)
    v20 = a13 > 0x144B0631;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((58 * !v20) ^ v17)) - 8))();
}

uint64_t sub_1AC1EBE84(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  int v17;
  _BOOL4 v18;

  *(_BYTE *)(*v15 + (a7 + v7 + 1)) = 117;
  v16 = v10 + v7 + 398;
  v17 = (a4 > v12) ^ (v16 < v9);
  v18 = v16 < v11;
  if (v17)
    v18 = a4 > v12;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((!v18 * v13) ^ v8)) - 8))();
}

void sub_1AC1EBF00(int a1@<W3>, int a2@<W8>)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 0x2B713C514868F96DLL) = *v2;
  *(_DWORD *)(v5 - 0x5E8381E6C8546BF4) = a1;
  *v2 = 0;
  *(_QWORD *)(v8 - 0x55F9EC3874D1DF37) = 0x622B43F0622B43F0;
  *v3 = 517650072;
  *(_DWORD *)(v8 - 0x55F9EC3874D1DF2BLL) = ((((*(_DWORD *)(v8 - 0x55F9EC3874D1DF2BLL) & 0xFFFFFFFE ^ 0xAC6B36A6 | a2 ^ 0x7321ABF9)
                                            + -1931586166
                                            - (*(_DWORD *)(v8 - 0x55F9EC3874D1DF2BLL) & 0xFFFFFFFE ^ 0xAC6B36A6 | 0x8CDE558A)
                                            + 1) ^ 0xD71A9BFA)
                                          - 1) ^ 0x8500729;
  *(_DWORD *)(v7 + 28) = *v6;
}

void sub_1AC1EC02C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 16) - 1225351577 * ((-396133807 - (a1 | 0xE8637A51) + (a1 | 0x179C85AE)) ^ 0x34065DB8);
  if (*(_DWORD *)(*(_QWORD *)a1 - 0x4E242FFD6E71642FLL) - 1115729964 >= 0)
    v3 = *(_DWORD *)(*(_QWORD *)a1 - 0x4E242FFD6E71642FLL) - 1115729964;
  else
    v3 = 1115729964 - *(_DWORD *)(*(_QWORD *)a1 - 0x4E242FFD6E71642FLL);
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 - 0x4E242FFD6E71642FLL) - 1115729964 >= 0)
    v4 = *(_DWORD *)(v2 - 0x4E242FFD6E71642FLL) - 1115729964;
  else
    v4 = 1115729964 - *(_DWORD *)(v2 - 0x4E242FFD6E71642FLL);
  v6 = *(_QWORD *)a1;
  v7 = v1 - 628203409 * ((&v6 & 0x8466BF79 | ~(&v6 | 0x8466BF79)) ^ 0xF9114CB5) + 187;
  sub_1AC1C3488((uint64_t)&v6);
  if (v3 >= v4)
    v5 = v4;
  else
    v5 = v3;
  __asm { BR              X13 }
}

uint64_t sub_1AC1EC1CC@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _BOOL4 v13;
  int v14;

  v12 = (v5 - 835) | 0x340;
  v13 = v4 > 0x8696094;
  v14 = v9
      + 873868143
      + (*(_DWORD *)(*(_QWORD *)(v8 - 0x4E242FFD6E71642BLL) + 4 * (v11 + v6)) ^ (v10 + (v12 ^ 0x101) - 631))
      + (*(_DWORD *)(*(_QWORD *)(a3 - 0x4E242FFD6E71642BLL) + 4 * (v11 + v6)) ^ v10);
  *(_DWORD *)(*(_QWORD *)(a1 - 0x4E242FFD6E71642BLL) + 4 * (v11 + v6)) = v14 + v10 - (v7 & (2 * v14));
  if (v13 == v11 + 1311787135 < -141123733)
    v13 = v11 + 1311787135 < (int)(v4 + 2006359915);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((15 * v13) ^ v12)) - 12))();
}

uint64_t sub_1AC1EC300()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  _BOOL4 v6;

  v4 = (((v1 - 534) | 0x19C) ^ 0x4CBD3E05) + v2;
  v5 = (v3 > 0x9DC691A) ^ (v4 < -165439771);
  v6 = v4 < (int)(v3 + 1982043877);
  if (v5)
    v6 = v3 > 0x9DC691A;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((14 * ((((v1 - 99) ^ v6) & 1) == 0)) ^ v1)) - 8))();
}

uint64_t sub_1AC1EC384()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  _BOOL4 v5;

  v5 = v2 - 1293434863 > ((v1 + 453) ^ 0x5C4E153F) || v2 - 1293434863 < v3 - 598862082;
  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((v5 * ((v1 ^ 0x14) + 217)) ^ v1)) - 12))();
}

uint64_t sub_1AC1EC3D8@<X0>(int a1@<W5>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  _BOOL4 v18;

  v14 = 4 * (v13 + v9);
  v15 = v5 + v11 + (*(_DWORD *)(*(_QWORD *)(a4 - 0x4E242FFD6E71642BLL) + v14) ^ v12);
  *(_DWORD *)(*(_QWORD *)(a2 - 0x4E242FFD6E71642BLL) + v14) = v15 + (v7 ^ 0x22B ^ (v12 - 450)) - (v10 & (2 * v15));
  v16 = v13 + 1 + v6;
  v18 = v16 <= a1 + 446 && v16 >= v8;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4 + 8 * ((4 * v18) | (16 * v18) | v7)) - 12))(555);
}

uint64_t sub_1AC1EC4A0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  return (*(uint64_t (**)(void))(v0 + 8 * (((v1 != 0x1233EF1634162B6FLL) * (v2 + 725)) ^ v2)))();
}

void sub_1AC1EC4CC(uint64_t a1@<X8>)
{
  int v1;
  char v2;
  int v3;
  int v4;
  int v5;
  int v6;

  *(_DWORD *)(*(_QWORD *)(a1 - 0x4E242FFD6E71642BLL) + 4 * (v5 + v3)) = v1
                                                                        - (((v1 << ((v2 ^ 0xB4) - 117)) - 1747736286) & v4)
                                                                        - 1930604697;
  *(_DWORD *)(a1 - 0x4E242FFD6E71642FLL) = (((v5 + 1 + v3) * (v6 - 1385840825)) ^ 0x73C4B37C)
                                         - 826540880
                                         + ((2 * (v5 + 1 + v3) * (v6 - 1385840825)) & 0xE78966F8);
}

void sub_1AC1EC698(unint64_t a1)
{
  unsigned int v2;
  signed int v3;
  unsigned int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  unint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  signed int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v40;
  unsigned int v41;
  unint64_t *v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = 1178560073 * ((2 * (a1 & 0x7B1A53C3) - a1 - 2065322948) ^ 0x3E71D45E);
  v3 = *(_DWORD *)(a1 + 16) - v2;
  v4 = 1178560073 * (((&v41 | 0x40A2FF9F) - (&v41 & 0x40A2FF9F)) ^ 0xFA3687FD);
  v5 = *(_DWORD *)(a1 + 12);
  v33 = *(_DWORD *)(a1 + 8) - v2;
  v16 = 1178560073 * ((2 * (a1 & 0x753269AE7B1A53C3) - a1 - 0x753269AE7B1A53C4) ^ 0x9131C6B93E71D45ELL);
  v6 = v5 ^ v2;
  v41 = -154992639 - v4;
  v43 = v3 - v4 - 1882357513;
  v25 = &STACK[0x1786E53DF64A8800];
  v42 = &STACK[0x1786E53DF64A8800];
  sub_1AC1C68B8((uint64_t)&v41);
  v7 = (_DWORD *)a1;
  v8 = (uint64_t)*(&off_1E5B5B480 + (v3 ^ 0x7F));
  v21 = *(_QWORD *)(v8 + 8 * v3) - 8;
  v31 = v6 - 1794462027;
  v15 = v6 + 1567864908;
  v19 = v6 - 1199061780;
  v18 = (v3 + 1046) ^ 0xFB1A63E3;
  v17 = v6 + 946038285;
  v28 = &v40;
  v10 = (char *)&v10 - 713271995;
  v34 = v3 ^ 0x401u;
  v27 = v3 ^ 0x2E;
  v14 = (8 * v3) ^ 0x4D8;
  v13 = (v3 + 1576132295) & 0xA20E25F7 ^ 0xFFFFFB30;
  v11 = v3 ^ 0x24;
  v12 = (v3 + 1576132295) & 0xA20E25F7;
  v26 = v3 ^ 0x24u;
  v29 = v26;
  v30 = v3;
  v20 = v7;
  v23 = vdupq_n_s32(0x773DA590u);
  v24 = vdupq_n_s32(0x773DA5B0u);
  v22 = vdupq_n_s32(0x773DA597u);
  v32 = *((_QWORD *)v7 + 3);
  v9 = v33 - (((v33 << ((v3 + 22) ^ 0x46)) + 1584806340) & (23 * ((v3 + 1046) ^ 0x456) - 1287166463)) + 148820134;
  v35 = (HIBYTE(v9) ^ 0x59) - ((2 * (HIBYTE(v9) ^ 0x59)) & 0xEA) + 117;
  v36 = (BYTE2(v9) ^ 0xA3) - ((2 * (BYTE2(v9) ^ 0xA3)) & 0xEA) + 117;
  v37 = (BYTE1(v9) ^ 0xB3) - ((2 * (BYTE1(v9) ^ 0xB3)) & 0xEA) + 117;
  v38 = (v33 - ((((_BYTE)v33 << ((v3 + 22) ^ 0x46)) - 60) & (23 * ((v3 + 22) ^ 0x56) + 1)) - 90) ^ 0xB1;
  __asm { BR              X13 }
}

uint64_t sub_1AC1ECAC8(int a1, uint64_t a2, int a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;

  v7 = -v4;
  if ((v5 + v4 + a3) <= 0x40)
    v8 = 64;
  else
    v8 = v5 + v4 + a3;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v6
                                                               + 8
                                                               * ((82
                                                                 * (a1 - v5 + v7 + v8 < (((95 * (a4 ^ 0x44F) - 435) | 0x208) ^ 0x342u))) ^ a4 ^ 0x758))
                                                   - 8))(2935293805, 4294966510);
}

uint64_t sub_1AC1ECB64(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;

  if (v5 <= 0x40)
    v8 = 64;
  else
    v8 = v5;
  v9 = !__CFADD__(v4 + ((a3 + v3 - 85 + 418) ^ (v3 + 536)), v6 + v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((1629 * v9) ^ v3)) - 8))();
}

uint64_t sub_1AC1ECBB4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,arg32_1AC1ECBB4 a32)
{
  int v32;
  uint64_t v33;
  uint64_t v34;

  *(_OWORD *)(a3 + ((((v32 - 612) | 0x10u) ^ a2) & (a4 + a1))) = *(_OWORD *)&a32.arr[4];
  return ((uint64_t (*)(void))(*(_QWORD *)(v34 + 8 * ((594 * (((v33 + 1) & 0x1FFFFFFF0) == 16)) ^ v32)) - 4))();
}

void sub_1AC1ECC10()
{
  JUMPOUT(0x1AC1ECBDCLL);
}

uint64_t sub_1AC1ECC1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,char a32,char a33)
{
  int v33;
  int v34;
  uint64_t v35;

  *(_BYTE *)(a2 + v34 + (v33 ^ 0xDu) - 395) = a32;
  *(_BYTE *)(a2 + (a3 - 1359673490)) = a33;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v35 + 8 * (v33 ^ 0x638))
                                                   - ((((v33 ^ 0xD) - 361) | 0x10u) ^ 0x3DLL)))(a1, 4294966510);
}

uint64_t sub_1AC1ECCA4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X5>, int a3@<W8>)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(a2 + (v6 + a3 + 1)) = *(_BYTE *)(v7
                                                          + ((a1 + ((v4 - 2080947341) & 0x7C08BB33) + 736) & (v5 + 3749371012)));
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (v4 ^ (1266 * ((v3 - 545596283) < 4)))) - 12))();
}

uint64_t sub_1AC1ECD18@<X0>(uint64_t a1@<X5>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(uint64_t), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20)
{
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;

  v24 = (v20 + 1931504819) & 0x8CDF91F3;
  *(_BYTE *)(a1 + (a2 + 2)) = *(_BYTE *)(v22 + v21 - 545596332 + v24);
  v25 = 628203409 * (((~(v23 - 168) & 0x97F4EE4E) - (~(v23 - 168) | 0x97F4EE4F)) ^ 0x157CE27C);
  *(_DWORD *)(v23 - 160) = v25 + v24 + 688;
  *(_DWORD *)(v23 - 156) = 2062944457 - v25;
  STACK[0x308] = a20;
  v26 = sub_1AC1BC1C0(v23 - 168);
  return a12(v26);
}

uint64_t sub_1AC1ECDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50)
{
  uint64_t v50;
  int v51;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v50 + 8 * ((11 * (a14 + ((2 * a50) & 0x78 ^ 0x58) + ((a13 + 1610194752) ^ a50 & 0x3Fu) >= a12)) ^ (v51 + 351))))(482, 4294966510, 3801570132, 3051986984, 100, &a41, 234, 236);
}

uint64_t sub_1AC1ECE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int a15, unsigned int a16)
{
  int v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;

  v19 = a16 < a15;
  if (v19 == v16 - 1325135924 < (v17 ^ 0x546u) - 82155634)
    v19 = v16 - 1325135924 < a16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v18 + 8 * ((11 * !v19) ^ v17)) - 8))();
}

uint64_t sub_1AC1ECEE4@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, int a3@<W2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, int a9@<W8>)
{
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _BOOL4 v15;
  unsigned int v16;
  int v17;
  _BOOL4 v18;

  v15 = a1 < a2;
  *(_BYTE *)(a6 + a9 + v12 + (v10 ^ a5) * a3) = *(_BYTE *)(a8 + (v9 + a4))
                                              - (a7 & (2 * *(_BYTE *)(a8 + (v9 + a4))))
                                              + 117;
  v16 = v9 + 1 + v13;
  v17 = v15 ^ (v16 < v11 + 961);
  v18 = v16 < a1;
  if (!v17)
    v15 = v18;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((!v15 * a3) ^ v10)) - 8))();
}

uint64_t sub_1AC1ECF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49)
{
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;

  v52 = 628203409 * ((~((v51 - 168) | 0xCF9A1693) + ((v51 - 168) & 0xCF9A1693)) ^ 0xB2EDE55F);
  *(_DWORD *)(v51 - 160) = v52 + v50 + 715;
  *(_DWORD *)(v51 - 156) = a15 - v52;
  STACK[0x308] = a27;
  v53 = sub_1AC1BC1C0(v51 - 168);
  v54 = a49 & (((v50 ^ 1) + 26) ^ 0x7DF ^ (87 * (v50 ^ 1u)));
  *(&a40 + (v54 ^ 0x2C)) = -11;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v49
                                                               + 8
                                                               * (v50 | (((v54 ^ 0x2C) > 0x37) << 11)))
                                                   - 4))(v53, 4294966510);
}

uint64_t sub_1AC1ED058@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((a1 == 63) ^ ((v1 ^ 0xC7) + 1)) & 1)
                                          * ((v1 - 448021652) & 0x1AB43DCF ^ 0x13B)) ^ v1))
                            - 12))();
}

uint64_t sub_1AC1ED0B8()
{
  unsigned int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((2 * (v1 ^ 0x1A0) - 327) ^ v0) < 8) * (((v1 + 432093736) & 0x263EC4FB) - 7)) ^ v1))
                            - 8))();
}

uint64_t sub_1AC1ED104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(a6 + v7 + v9) = v11;
  return (*(uint64_t (**)(void))(v10 + 8 * ((7 * ((v8 ^ 0x152) == (v6 & 0x38))) ^ v8)))();
}

uint64_t sub_1AC1ED150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;

  v15 = v11 - 1610196155;
  if (v15 <= 0x40)
    v15 = 64;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14
                                        + 8
                                        * ((476 * (1610194752 - v13 - v12 + (a11 ^ 0x4C1) + v15 + 1354 > 0xE)) ^ a11))
                            - 4))();
}

uint64_t sub_1AC1ED1CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  BOOL v32;

  v30 = v28 + v27 - 1610196155;
  if (v30 <= 0x40)
    v31 = 64;
  else
    v31 = v28 + v27 - 1610196155;
  v32 = __CFADD__(v30 - 1, v26 + v31 + 1403);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 + 8 * (int)((((v32 ^ (BYTE4(a10) + 65)) & 1) * (((HIDWORD(a10) + 1628737926) & 0x9EEB6FEB) - 772)) ^ HIDWORD(a10))) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_1AC1ED24C@<X0>(int a1@<W2>, uint64_t a2@<X5>, int a3@<W8>)
{
  int v3;
  uint64_t v4;
  int8x16_t *v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;

  *(int8x16_t *)(a2 + (a3 + a1)) = vaddq_s8(vsubq_s8(*v5, vandq_s8(vaddq_s8(*v5, *v5), v8)), v7);
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8 * (((((v4 + 1) & 0x1FFFFFFF0) == 16) * (158 * (v3 ^ 0x66A) - 764)) ^ v3))
                            - 12))();
}

void sub_1AC1ED2B4()
{
  JUMPOUT(0x1AC1ED26CLL);
}

uint64_t sub_1AC1ED2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(v40
                                                                                         + 8
                                                                                         * (v39 ^ ((2 * (v37 == v38)) | (4 * (v37 == v38)))))
                                                                             - ((v39 ^ 0x30Fu)
                                                                              + 730)
                                                                             + 756))(a1, a2, a3, a4, &a37);
}

uint64_t sub_1AC1ED304@<X0>(int a1@<W0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X7>, int a5@<W8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;

  *(_BYTE *)(a3 + (a5 + a1)) = *(_BYTE *)(v6 + a2 + a4);
  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8 * (((v10 & ~((v5 - 730) ^ ((a5 + v7) < 0x40))) * v8) ^ v5))
                            - 4))();
}

uint64_t sub_1AC1ED34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,int a47,int a48,int a49,int a50,int a51,int a52,unsigned int a53,int a54,unsigned __int8 a55)
{
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  uint64_t (*v62)(uint64_t, uint64_t, _QWORD, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  BOOL v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, _QWORD, _QWORD, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _BOOL4 v71;

  v62 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 8 * v55);
  v63 = a55 ^ 6u;
  if ((_DWORD)v63 == 2)
  {
    v71 = (unint64_t)&a38 + 4 >= a29 || v59 >= (unint64_t)&a47;
    return ((uint64_t (*)(_QWORD, _QWORD))(*(_QWORD *)(v58 + 8 * ((HIDWORD(a28) * v71) ^ (v60 + 1493)))
                                                   - (a35 ^ 0x438)))(a53, a53);
  }
  else if ((_DWORD)v63 == 1)
  {
    v64 = (v60 + 1120);
    v66 = (unint64_t)&a38 + 4 < a29 && v59 < (unint64_t)&a47;
    v67 = v64 ^ 0x478;
    v68 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 + 8 * (int)((((v66 ^ (v60 + 96)) & 1) * v67) ^ (v60 + 1542))) - 8);
    return v68(v64, 216207288, (v60 + 96), v68, (char *)&a38 + 4, v67, a7, 236, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26);
  }
  else
  {
    a49 = 2 * (a49 ^ v57) + v57 - (v61 & (4 * (a49 ^ v57)));
    a50 = 2 * (a50 ^ v57) + v57 - (v61 & (4 * (a50 ^ v57)));
    a51 = 2 * (a51 ^ v57) + v57 - (v61 & (4 * (a51 ^ v57)));
    a52 = 2 * (a52 ^ v57) + v57 - (v61 & (4 * (a52 ^ v57)));
    HIDWORD(a32) = a55 ^ 6;
    return v62(v63, a2, v62, a4, (char *)&a38 + 4, a6, a7, 236, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             v56,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40);
  }
}

uint64_t sub_1AC1EE1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,uint64_t a31,unsigned int a32)
{
  uint64_t v32;
  int v33;
  _BOOL4 v34;

  if (a32 < 0xD79D516D != a30 - 1920536107 < (((v33 + 145) | 0x18) ^ 0xD79D51B7))
    v34 = a30 - 1920536107 < (((v33 + 145) | 0x18) ^ 0xD79D51B7);
  else
    v34 = a30 - 1920536107 > a32;
  return (*(uint64_t (**)(void))(v32 + 8 * ((1364 * !v34) ^ (v33 + 362))))();
}

uint64_t sub_1AC1EE240(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (v5 ^ (43 * (v4 + a4 + 63 < (v4 + a4)))))
                            - ((v5 - 169) ^ 0xC0u)
                            + 237))();
}

uint64_t sub_1AC1EE284(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, char a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(a6 + v9) = *(_BYTE *)(v11 + (v8 + a4))
                      - (a7 & (2 * *(_BYTE *)(v11 + (v8 + a4))))
                      + 117;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * (((v9 == 63) * ((v10 ^ a8) + 982)) ^ v10)) - 4))();
}

uint64_t sub_1AC1EE2CC@<X0>(int a1@<W3>, int8x16_t *a2@<X5>, int a3@<W8>)
{
  int v3;
  unsigned int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;

  *a2 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v7 + (v3 + a1)), vandq_s8(vaddq_s8(*(int8x16_t *)(v7 + (v3 + a1)), *(int8x16_t *)(v7 + (v3 + a1))), v10)), v9);
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((((a3 ^ v4 ^ v5) == 16) * v6) ^ (a3 + 659))) - 4))();
}

uint64_t sub_1AC1EE324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  uint64_t v27;
  int v28;
  int v29;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v27
                                                     + 8
                                                     * ((252
                                                       * (v29 & ~((v28 - 45) ^ (((v28 + 345) ^ 0xDF7ADD37) + a27 < 0xFFFFFFFB)))) ^ (v28 + 845))))(a1, a2);
}

void sub_1AC1EE390()
{
  JUMPOUT(0x1AC1ED4ECLL);
}

uint64_t sub_1AC1EE3D0()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((((v0 - 713271920) > 0x37) * ((39 * (v1 ^ 0x2A)) ^ 0x41E)) ^ (v1 + 259)))
                            - 4))();
}

uint64_t sub_1AC1EE420@<X0>(int a1@<W8>)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v1;
  v5 = v2 + v1;
  if ((unint64_t)(v5 + 1) > 0x38)
    v6 = v5 + 1;
  else
    v6 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((63 * (v6 - v4 + 713271920 < (unint64_t)((a1 - 679) ^ 0x147u) - 41)) ^ a1))
                            - 4))();
}

uint64_t sub_1AC1EE480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(a9 + v11 + ((v9 + 1802325641) & 0x9492B137)) = v13;
  return (*(uint64_t (**)(void))(v12 + 8 * ((14 * ((v10 & 0xFFFFFFFFFFFFFFF8) == 8)) ^ v9)))();
}

uint64_t sub_1AC1EE4D4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 + (v2 & a1)) = v6;
  return (*(uint64_t (**)(void))(v5 + 8 * ((14 * (v3 == 0)) ^ v1)))();
}

uint64_t sub_1AC1EE500()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1301 * (((v0 == v1) ^ (v2 - 38)) & 1)) ^ v2))
                            - (((v2 - 294) | 0x20u) ^ 0x35)))();
}

uint64_t sub_1AC1EE548@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  *(_BYTE *)(a1 + a2 + v4) = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((unint64_t)(a2 + 1 + v4) < 0x38) * v3) ^ (v2 + 262)))
                            - 4))();
}

void sub_1AC1EE578()
{
  JUMPOUT(0x1AC1ED4E8);
}

uint64_t sub_1AC1EE7A0()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((1276 * (((v1 - 3) ^ (v2 + 786)) + v0 < ((v1 - 345) ^ 0x35u))) ^ v1))
                            - 12))();
}

uint64_t sub_1AC1EE7E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  int v30;
  uint64_t v31;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 + 8 * ((13 * ((v30 - 545596285) > 3)) ^ a9)) - ((a9 + 3) ^ 0x186)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30);
}

void sub_1AC1EE830()
{
  JUMPOUT(0x1AC1ECC54);
}

uint64_t sub_1AC1EE848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,int a54)
{
  uint64_t v54;
  int v55;
  uint64_t v57;
  unint64_t v58;

  if (a33 == 2)
    return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v54
                                                                 + 8
                                                                 * ((468
                                                                   * (a54 != ((v55 + 1180038862) & 0xB9AA0BCE)
                                                                           + 1961236439)) ^ (v55 + 669)))
                                                     - 4))(a1, a17);
  if (a33 == 1)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54
                                                                                   + 8
                                                                                   * (int)(((a54 == 1961237157)
                                                                                          * (((v55 + 363234222) & 0xEA597EEB)
                                                                                           - 710)) ^ (v55 + 666)))
                                                                       - 4))(a1, a2, a3, a17);
  v57 = v55 ^ 0x309u;
  v58 = ((unint64_t)&a38 ^ 0xDDDFBFDFEF399A7CLL)
      + 0x7F33EB3035EF8084
      + ((v57 - 0x44408040218CCE48) & (2 * (_QWORD)&a38));
  a53 = (v58 ^ (v55 - 119)) * (v58 + 17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 + 8 * (int)v57) - 8))(a1, a2, a3, a17);
}

void sub_1AC1EEBB0()
{
  JUMPOUT(0x1AC1EEB78);
}

uint64_t sub_1AC1EEBB8()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t result;
  uint64_t v4;

  memset((void *)(v1 - 204), 117, 16);
  v2 = 235795823 * ((((2 * (v1 - 168)) | 0x47885068) - (v1 - 168) - 600057908) ^ 0xB769616D);
  *(_DWORD *)(v1 - 160) = v2 + 1127068379;
  *(_DWORD *)(v1 - 132) = (v0 + 1856) ^ v2;
  result = ((uint64_t (*)(uint64_t))((char *)*(&off_1E5B5B480 + (v0 ^ 0x70)) - 8))(v1 - 168);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(v1 - 136);
  return result;
}

void sub_1AC1EECA8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) - 535753261 * (a1 ^ 0xAF40E2F);
  __asm { BR              X9 }
}

uint64_t sub_1AC1EED30@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((118 * (((a1 - 688) & *(_DWORD *)(v2 - 0x55F9EC3874D1DF2BLL)) == 0)) ^ a1))
                            - ((a1 - 286) ^ 0x197)))();
}

uint64_t sub_1AC1EED74@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2
                                                    + 8
                                                    * ((1192
                                                      * (*(_DWORD *)(v3 - 0x55F9EC3874D1DF33) - 1647002608 != ((a2 + 1161919785) & 0xBABE837D ^ 0x358))) ^ (a2 - 92))))(a1, *(_QWORD *)(v3 - 0x55F9EC3874D1DF3FLL));
}

uint64_t sub_1AC1EEDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v12 = ((unint64_t)&a9 ^ 0xEB5BCE7F3E377E76)
      + 0x5CA7BFF7F9DFAE8ALL
      + ((2 * (_QWORD)&a9) & 0xD6B79CFE7C6EFCE0);
  a9 = v10 - 1;
  *(_BYTE *)(a2 + a9) = (v12 ^ 0xBA) * (v12 + 17);
  return (*(uint64_t (**)(uint64_t))(v11 + 8 * ((248 * (a9 == 0)) ^ v9)))(a1);
}

void sub_1AC1EEE78()
{
  JUMPOUT(0x1AC1EEE40);
}

void sub_1AC1EEE80()
{
  _DWORD *v0;

  *v0 = 1630792683;
}

void sub_1AC1EEFE8(unint64_t a1)
{
  unsigned int v2;
  signed int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD v14[3];
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  _DWORD *v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  signed int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  char v36;
  char v37;
  char v38;
  char v39;
  _BYTE v40[3];
  unsigned int v42;
  unint64_t *v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = 535753261 * ((-2 - ((a1 ^ 0x110 | 0x5DFBDAC6) + (a1 ^ 0x18EA88C4 | 0xA2042539))) ^ 0xEDE17804);
  v3 = *(_DWORD *)(a1 + 16) + v2;
  v4 = *(_DWORD *)(a1 + 48) + v2;
  v5 = 1178560073 * ((2 * (&v42 & 0x7852AE28) - &v42 + 128799186) ^ 0xBD3929B0);
  v6 = *(_DWORD *)(a1 + 4);
  v21 = 535753261
      * ((-2
        - ((a1 ^ 0x962A604B00000110 | 0x29419FB45DFBDAC6)
         + (a1 ^ 0x2100953418EA88C4 | 0xD6BE604BA2042539))) ^ 0xBD3757EDEDE17804);
  v7 = v6 ^ v2;
  v44 = v3 - v5 - 1882357549;
  v42 = -154992639 - v5;
  v26 = &STACK[0x1786E53DF64A8800];
  v43 = &STACK[0x1786E53DF64A8800];
  sub_1AC1C68B8((uint64_t)&v42);
  v8 = (_DWORD *)a1;
  v9 = (uint64_t)*(&off_1E5B5B480 + v3 - 7);
  v28 = *(_QWORD *)(v9 + 8 * v3) - 8;
  v17 = v7 + 453847975;
  v20 = v7 - 332801293;
  v16 = v3 + 1887 + v7 + 588501893;
  v15 = v7 + 1461166303;
  v14[2] = (char *)&v14[-207650425] + 7;
  v14[1] = v40;
  v30 = (v3 + 450046822) & 0xFFFFFFFFE52CD477;
  v10 = (v3 - 443853558) & 0x1A74AFAA;
  v34 = (v10 + 1877316204) & 0x901A6DBF ^ 0xDA;
  v35 = v10;
  v33 = v10 ^ 0x56B;
  v11 = v10 ^ 0x5CE;
  v12 = v4;
  v32 = v11;
  v19 = v3 - 1952157915;
  v18 = (v3 - 1952157915);
  v31 = v18;
  v29 = v3;
  v24 = vdupq_n_s32(0x773DA590u);
  v25 = vdupq_n_s32(0x773DA5B0u);
  v23 = vdupq_n_s32(0x773DA597u);
  v22 = v8;
  v27 = *((_QWORD *)v8 + 5);
  v13 = v12 - ((2 * v12 + 1308410538) & 0xB3476788) + 10622233;
  v36 = (HIBYTE(v13) ^ 0x59) - (((HIBYTE(v13) ^ 0x59) << ((((v3 - 69) | 0xC3) ^ 0x10) & 0x3D)) & 0xEA) + 117;
  v37 = (BYTE2(v13) ^ 0xA3) - ((2 * (BYTE2(v13) ^ 0xA3)) & 0xEA) + 117;
  v38 = (BYTE1(v13) ^ 0xB3) - ((2 * (BYTE1(v13) ^ 0xB3)) & 0xEA) + 117;
  v39 = (v12 - ((2 * v12 - 86) & 0x88) + 25) ^ 0xB1;
  __asm { BR              X15 }
}

uint64_t sub_1AC1EF448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;

  v13 = v9 + v11;
  if (v13 <= 0x40)
    v13 = 64;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 + 8 * (v6 ^ (37 * (v10 - v7 - v8 + v13 > 0xE))))
                                                                                                - 12))(a1, 85463414, 1519151085, a4, 2775816211, a6, 3447876769);
}

uint64_t sub_1AC1EF4B8(uint64_t a1, int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;

  v7 = v4 + v3 + a2;
  if (v7 <= 0x40)
    v8 = 64;
  else
    v8 = v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((7 * (v2 ^ 0x212)) ^ (16
                                                               * (((7 * (v2 ^ 0x12) + 68) ^ (v5 + v8 > ((v7 - 1) ^ (7 * (v2 ^ 0x212) + 578393784) & 0xDD8665CE ^ 0xFFFFFE31))) & 1))))
                            - 4))();
}

uint64_t sub_1AC1EF534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,__int128 a37)
{
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  *(_OWORD *)(a4 + ((((v37 - 462) | 0x2D3u) ^ v40) & (a1 + a7 + 50))) = a37;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 + 8 * ((1264 * (((v38 + v39 - 1350) & 0x1FFFFFFF0) == 16)) ^ v37)) - 12))(a1, 723, 1264, a2, a3, a4, a5, a6, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
           a19,
           a20,
           a21);
}

void sub_1AC1EF5A0()
{
  JUMPOUT(0x1AC1EF568);
}

uint64_t sub_1AC1EF5AC@<X0>(int a1@<W2>, uint64_t a2@<X5>, uint64_t a3@<X7>, int a4@<W8>)
{
  char v4;
  int v5;
  uint64_t v6;

  *(_BYTE *)(a2 + (v5 + a1 - 1033 - 940)) = v4;
  *(_BYTE *)(a2 + (a4 - 1751377546)) = *(_BYTE *)(a3 + (a1 - 1971));
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((1977 * (((a1 + 1127394398) & 0xBCCD4FFF ^ 0xA5739C07) + 1519151085 > 3)) ^ (a1 - 1033))))();
}

uint64_t sub_1AC1F07E4@<X0>(int a1@<W4>, uint64_t a2@<X5>, uint64_t a3@<X7>, int a4@<W8>)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  *(_BYTE *)(a2 + (a4 - 1751377545)) = *(_BYTE *)(a3 + (v5 - 1519151083));
  return (*(uint64_t (**)(void))(v7 + 8 * ((790 * (a1 + v4 + 3 < (v6 ^ 0x447u) - 81)) ^ v6)))();
}

uint64_t sub_1AC1F083C@<X0>(uint64_t a1@<X5>, uint64_t a2@<X7>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t (*a22)(uint64_t))
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  *(_BYTE *)(a1 + (a3 + 2)) = *(_BYTE *)(a2 + ((v22 ^ 0xFFFFFFAALL) & (v23 + 2775816214)));
  v25 = 628203409 * ((~((v24 - 160) | 0x7D52706F) + ((v24 - 160) & 0x7D52706F)) ^ 0x2583A3);
  *(_QWORD *)(v24 - 160) = a20;
  *(_DWORD *)(v24 - 152) = v25 + v22 + 652;
  *(_DWORD *)(v24 - 148) = 2062944457 - v25;
  v26 = sub_1AC1BC1C0(v24 - 160);
  return a22(v26);
}

uint64_t sub_1AC1F08D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13)
{
  int v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;

  v16 = a13 < 0x46F2431F;
  if (v16 == (v13 + 539513868) < 0x46F2431F)
    LOBYTE(v16) = v13 + 539513868 < a13;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((236 * (((v14 - 1) ^ v16) & 1)) ^ v14)) - 12))();
}

uint64_t sub_1AC1F0958@<X0>(unsigned int a1@<W0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, int a9@<W8>)
{
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  unsigned int v17;
  int v18;
  _BOOL4 v19;

  v16 = a1 < v12;
  *(_BYTE *)(a6 + (a9 + a4)) = *(_BYTE *)(v15 + (v9 + v11))
                                           - ((*(_BYTE *)(v15 + (v9 + v11)) << ((v10 + a3) & a5 ^ a7)) & a8)
                                           + 117;
  v17 = v9 + 1 + v13;
  v18 = v16 ^ (v17 < v12);
  v19 = v17 < a1;
  if (!v18)
    v16 = v19;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((!v16 * a2) ^ v10)) - 12))();
}

uint64_t sub_1AC1F09CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;

  v52 = 628203409 * ((~((v51 - 160) | 0x6E00B697) + ((v51 - 160) & 0x6E00B697)) ^ 0x1377455B);
  *(_QWORD *)(v51 - 160) = a26;
  *(_DWORD *)(v51 - 152) = v52 + v50 + 709;
  *(_DWORD *)(v51 - 148) = a13 - v52;
  sub_1AC1BC1C0(v51 - 160);
  v53 = a49 & 0x3F;
  *(&a40 + (v53 ^ 0x2C)) = -11;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v49 + 8 * ((856 * ((v53 ^ 0x2C) > 0x37)) ^ v50))
                                          - ((5 * (v50 ^ 0xD)) ^ 0x682u)
                                          + 1747))(a30);
}

uint64_t sub_1AC1F0ACC@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3
                                                                        + 8
                                                                        * ((55 * (a2 != 51 * (v2 ^ 0x6DA) - 600)) ^ v2))
                                                            - 12))(a1, 117, 993);
}

uint64_t sub_1AC1F0B30()
{
  unsigned int v0;
  unsigned int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (int)((100 * (((v1 - 644) ^ v0) < 8)) ^ v1)) - (v1 ^ 0x29FLL)))();
}

uint64_t sub_1AC1F0B6C@<X0>(int a1@<W2>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4)
{
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a4 + a2) = v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((((v4 & 0x38) - (unint64_t)(v5 + 670) == -747) * a1) ^ (v5 + 411)))
                            - 4))();
}

uint64_t sub_1AC1F0BB4@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a2 + v4) = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((v2 == v4) * a1) ^ v3)) - 4))();
}

uint64_t sub_1AC1F0BD8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8 * (((((v1 ^ 0x2E2) + 11) ^ 0x6A4 ^ (5 * (v1 ^ 0x2E2))) * (v2 == v0)) ^ v1))
                            - 8))();
}

uint64_t sub_1AC1F0C18(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v6 + v8 + a6 - 1) = a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * ((2044
                                          * ((((unint64_t)(v6 + v8) < 0x40) ^ (v7 - 60)) & 1)) ^ (v7 + 909)))
                            - 8))();
}

void sub_1AC1F0C60()
{
  JUMPOUT(0x1AC1EF9B8);
}

uint64_t sub_1AC1F0C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4
                                                                                 + 8
                                                                                 * ((620
                                                                                   * ((v3 - 1661203629) < 0x38)) ^ (v5 + 283)))
                                                                     - ((4 * v5) ^ 0x158)))(a1, 95, 175, a3);
}

uint64_t sub_1AC1F0CF4()
{
  unsigned int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v4 = v0 + v2;
  if (v4 <= 0x38)
    v4 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((((v1 - 1331167045) & 0x4F57FCFD) + 4) * (v4 - v0 + 1661203629 < 8)) ^ v1))
                            - 12))();
}

uint64_t sub_1AC1F0D54(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(a11 + v13) = v15;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((((v11 & 0xFFFFFFFFFFFFFFF8) == 8) * a3) ^ (v12 + 1235)))
                            - ((v12 - 348) | 0x30u)
                            + 356))();
}

uint64_t sub_1AC1F0D98(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *v5 = v8;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((v6 == 0) * a3) ^ v3)) - v4 + 356))();
}

uint64_t sub_1AC1F0DC0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((((v2 - 364) | 0x51) ^ 0x3E0) * (v0 != v1)) ^ v2))
                            - (((v2 - 352) | 0x45u) ^ 0x59)))();
}

uint64_t sub_1AC1F0E08@<X0>(int a1@<W1>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  *(_BYTE *)(a3 + v4 + a2 - 1) = v5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((unint64_t)(a3 + v4) > 0x37) * a1) ^ (v3 + 218))) - 12))();
}

void sub_1AC1F0E38()
{
  JUMPOUT(0x1AC1EF9C0);
}

uint64_t sub_1AC1F1050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,int a54)
{
  uint64_t v54;
  int v55;
  uint64_t v57;
  unint64_t v58;

  if (a32 == 2)
    return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v54
                                                        + 8
                                                        * (((a54 == 1961237157) * ((134 * (v55 ^ 0x50)) ^ 0x2BB)) ^ (v55 + 585)))
                                            - 4))(a14);
  if (a32 == 1)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54
                                                                                            + 8
                                                                                            * ((1469
                                                                                              * (a54 != (v55 ^ 0x74E61AF0))) ^ (v55 + 614)))
                                                                                - 4))(a1, a2, a3, a4, a14);
  v57 = (v55 - 380971098) & 0x16B52B6E;
  v58 = ((unint64_t)&a38 ^ 0x7DFD7376EFBF38EBLL)
      - 0x40D4430404801FEBLL
      + ((v57 ^ 0xFBFAE6EDDF7E72B0) & (2 * (_QWORD)&a38));
  a53 = (v58 ^ 0xBA) * (v58 + 17);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54
                                                                                          + 8
                                                                                          * ((1534
                                                                                            * (5
                                                                                             * (v57 ^ 0x37D) == 206)) ^ v57))
                                                                              - 8))(a1, a2, a3, a4, a14);
}

void sub_1AC1F13A8()
{
  JUMPOUT(0x1AC1F1374);
}

uint64_t sub_1AC1F13B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,__int128 a51,char a52)
{
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;

  v56 = *(_QWORD *)(a18 + 24);
  memset(&a51, 117, sizeof(a51));
  v57 = 235795823 * ((1487064866 - ((v55 - 160) | 0x58A2CF22) + ((v55 - 160) | 0xA75D30DD)) ^ 0x33F07984);
  *(_QWORD *)(v55 - 160) = &a52;
  *(_DWORD *)(v55 - 152) = v57 + 1127068379;
  *(_DWORD *)(v55 - 124) = (v54 + 1790) ^ v57;
  *(_QWORD *)(v55 - 120) = &a51;
  *(_QWORD *)(v55 - 144) = v55 - 180;
  *(_QWORD *)(v55 - 136) = v56;
  v58 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E5B5B480 + (v54 & 0x78D36A4D)) - 8))(v55 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v52
                                                      + 8
                                                      * (int)((757
                                                             * (*(_DWORD *)(v55 - 128) == v53 + 5 * (v54 ^ 0x62) - 85)) ^ v54))
                                          - (v54 ^ 0x7BLL)))(v58);
}

uint64_t sub_1AC1F14D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BOOL4 v9;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 8) + v0 - 0x6FD1CC6DF4873C39)
     - *(unsigned __int8 *)(v5 + v0 - 0x6FD1CC6DF4873C39);
  v7 = v0 + 1;
  v9 = (((v4 - 626) | 0x41) ^ 0xFFEAFB6A ^ v6) + 351620590 + ((2 * v6) & 0xFFD5F67E) != 350243117 || v7 == v2 + 16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((1598 * v9) ^ v4)) - 8))();
}

uint64_t sub_1AC1F1560@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v4 = 108757529
     * ((((v3 - 160) | 0x120008FD2DCA1579) - (v3 - 160) + ((v3 - 160) & 0xEDFFF702D235EA80)) ^ 0xF55B6AE5CD567752);
  *(_QWORD *)(v3 - 152) = v4 ^ 0x14E0492D;
  *(_QWORD *)(v3 - 144) = v1 - v4;
  *(_DWORD *)(v3 - 136) = (a1 + 916986729) ^ v4;
  *(_DWORD *)(v3 - 132) = ((a1 + 916986729) ^ 0xF2) + v4;
  *(_DWORD *)(v3 - 120) = v4;
  *(_DWORD *)(v3 - 128) = v4 + a1 + 916986729 + 15;
  *(_DWORD *)(v3 - 160) = v4 + a1 - 1689051587;
  v5 = ((uint64_t (*)(uint64_t))*(&off_1E5B5B480 + a1 + 52))(v3 - 160);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * *(int *)(v3 - 124)) - 8))(v5);
}

void sub_1AC1F1640()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 32) = 2000528784;
}

void sub_1AC1F168C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_1AC1F16E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;

  return ((uint64_t (*)(void))(a4 - 3029457100 + *(_QWORD *)(v4 + 8 * ((1600 * (**(_BYTE **)(a2 + 8) == 0)) ^ v5))))();
}

uint64_t sub_1AC1F1720()
{
  uint64_t v0;
  int v1;
  int v2;

  v2 = v1 - ((2 * v1 + 218607330) & 0x126DB6F2) - 1883589910;
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((21
                                * (((2 * v2) & 0xF09FD77E ^ 0x100D9672) + (v2 ^ 0xF17930C6) + 2147393498 == 2018413465)) ^ 0x1C6u)))();
}

uint64_t sub_1AC1F17B4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 1424) = v3 + v2 - 514392135;
  *(_QWORD *)(*(_QWORD *)(a1 + 96) + 520) = *(_QWORD *)(a2 + 8) + 1;
  return 0;
}

void sub_1AC1F1AD0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X8 }
}

uint64_t sub_1AC1F1B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((65 * (**(_BYTE **)(a2 + 8) == 0)) ^ 0x9E)) - 8))();
}

uint64_t sub_1AC1F1BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  *(_QWORD *)(*(_QWORD *)(a16 + 96) + 504) = v18 + 1;
  *(_DWORD *)(*(_QWORD *)(a16 + 96) + 496) = a18 - 1;
  v22 = 1178560073 * ((-2033793041 - ((v21 - 152) | 0x86C6C7EF) + ((v21 - 152) | 0x79393810)) ^ 0xC3AD4072);
  *(_DWORD *)(v21 - 136) = v19 - v22 - 1882357903;
  *(_DWORD *)(v21 - 152) = -154992639 - v22;
  *(_QWORD *)(v21 - 144) = v21 + 0x1786E53DF64A8618;
  sub_1AC1C68B8(v21 - 152);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20
                                                      + 8
                                                      * ((1263
                                                        * (a18
                                                         + 696795255
                                                         + ((v19 ^ 0x1C3) & (2 * *(_DWORD *)(v21 - 184)) ^ 0x50)
                                                         + (*(_DWORD *)(v21 - 184) & (v19 ^ 0x188) ^ 0x5CFB9696u) < 0xFFFFFFC0)) ^ v19))
                                          - 4))(2694887066);
}

uint64_t sub_1AC1F1DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL4 v14;

  v13 = v8 - 1559991993;
  if (v13 <= 0x40)
    v13 = 64;
  v14 = a8 - v9 - v11 + v13 < 0xF;
  return (*(uint64_t (**)(void))(v12 + 8 * (v10 ^ 0x2B7 ^ ((4 * v14) | (8 * v14)))))();
}

uint64_t sub_1AC1F1E28(int a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  v12 = v9 + v8;
  v13 = v12 + a1;
  if ((v12 + a1) <= 0x40)
    v13 = a2;
  return (*(uint64_t (**)(void))(v11
                              + 8
                              * (((((a5 + v10 + 1554333894) & 0x163413B) + 854) * (a8 - v12 >= (a3 + v13))) ^ v10)))();
}

uint64_t sub_1AC1F1E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  return ((uint64_t (*)(void))(*(_QWORD *)(v20
                                        + 8
                                        * ((127
                                          * (~a18
                                           + v21
                                           - 252
                                           + (unint64_t)(v18 + 17624353 + ((v19 + 25583342) | 0xA0711C04)) < 0x10)) ^ v19))
                            - ((v19 - 1242062840) & 0x2085FCE)
                            + 258))();
}

uint64_t sub_1AC1F1EF4@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t *v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;

  v8.i64[0] = 0xEAEAEAEAEAEAEAEALL;
  v8.i64[1] = 0xEAEAEAEAEAEAEAEALL;
  v9.i64[0] = 0x7575757575757575;
  v9.i64[1] = 0x7575757575757575;
  *(int8x16_t *)(v5 + (a1 + v1)) = vaddq_s8(vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v8)), v9);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v7
                                                      + 8
                                                      * ((665 * (((v4 + v2 - 2717350948) & 0x1FFFFFFF0) - v3 == -250)) ^ v3))
                                          - 4))(v3 - 250);
}

void sub_1AC1F1F68()
{
  JUMPOUT(0x1AC1F1F30);
}

uint64_t sub_1AC1F1F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * ((((v6 - 194901523) & 0xB9DF55F ^ (a6 + ((v6 + 1) ^ (a5 + 265)) - 880))
                                          * (v7 != v8)) ^ (v6 + 1)))
                            - 8))();
}

uint64_t sub_1AC1F1FC4@<X0>(int a1@<W4>, int a2@<W5>, int a3@<W6>, int a4@<W8>)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v9 - 252 + (a4 + v4)) = *(_BYTE *)((v6 - a1 + 87) + v5 + v7 - 1600080317)
                                                 - ((2 * *(_BYTE *)((v6 - a1 + 87) + v5 + v7 - 1600080317)) & 0xEA)
                                                 + 117;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((57 * ((a4 + a3) < 0x40)) ^ (a2 + v6 - 629))) - 8))();
}

uint64_t sub_1AC1F2034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int32x4_t a35,int32x4_t a36,int32x4_t a37,int32x4_t a38)
{
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, __n128, __n128, __n128, __n128, __n128);
  const char *v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint8x16_t v60;
  uint16x8_t v61;
  int8x16_t v62;
  int8x16_t v63;
  uint16x8_t v64;
  int8x16_t v65;
  int8x16_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint8x16_t v70;
  int8x16_t v73;
  int8x16_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  uint64_t v83;
  int v84;
  uint8x16_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint8x16_t v89;
  uint8x16_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  _DWORD *v101;
  int v102;
  unsigned int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int8x16x4_t v108;
  int8x16x4_t v109;

  v47 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128, __n128))(v44 + 8 * v38);
  v48 = (const char *)(v46 - 252);
  v49.n128_u64[0] = 0x7575757575757575;
  v49.n128_u64[1] = 0x7575757575757575;
  v50 = (__n128)vdupq_n_s32(0x773DA5B0u);
  v51 = (__n128)vdupq_n_s32(0x773DA590u);
  a28 = v42 - 129;
  a29 = v45 - 16;
  v52.n128_u64[0] = 0xEAEAEAEAEAEAEAEALL;
  v52.n128_u64[1] = 0xEAEAEAEAEAEAEAEALL;
  v53 = (__n128)vdupq_n_s32(0x773DA597u);
  HIDWORD(a27) = 97;
  v55 = *(_DWORD *)(v46 - 180);
  v54 = *(_DWORD *)(v46 - 176);
  v57 = *(_DWORD *)(v46 - 172);
  v56 = *(_DWORD *)(v46 - 168);
  v58 = v57;
  LODWORD(v105) = *(unsigned __int8 *)(v46 - 156) ^ 6;
  v59 = *(_BYTE *)(v46 - 156) ^ 6;
  if (v59 == 2)
  {
    v109 = vld4q_s8(v48);
    v86 = (uint8x16_t)veorq_s8(v109.val[0], (int8x16_t)v49);
    v87 = vmovl_u8(*(uint8x8_t *)v86.i8);
    v88 = vmovl_high_u8(v86);
    v89 = (uint8x16_t)veorq_s8(v109.val[1], (int8x16_t)v49);
    _Q22 = vmovl_u8(*(uint8x8_t *)v89.i8);
    _Q21 = vmovl_high_u8(v89);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    v94 = (uint8x16_t)veorq_s8(v109.val[2], (int8x16_t)v49);
    v95 = vmovl_high_u8(v94);
    v96 = vmovl_u8(*(uint8x8_t *)v94.i8);
    v109.val[0] = veorq_s8(v109.val[3], (int8x16_t)v49);
    v109.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v109.val[0]);
    v109.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v109.val[1]);
    v109.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v109.val[1].i8);
    v109.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v109.val[0].i8);
    v109.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v109.val[0]);
    v109.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v109.val[0].i8);
    v97 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v96.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v87.i8), 0x18uLL)), v109.val[0]);
    v98 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v96, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v87), 0x18uLL)), v109.val[3]);
    v99 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v95.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v88.i8), 0x18uLL)), v109.val[1]);
    v100 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v95, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v88), 0x18uLL)), v109.val[2]);
    v109.val[0] = veorq_s8(vandq_s8((int8x16_t)v97, (int8x16_t)v50), (int8x16_t)(*(_OWORD *)v109.val & __PAIR128__(0xFFFFFF20FFFFFF20, 0xFFFFFF20FFFFFF20)));
    v109.val[3] = veorq_s8(vandq_s8((int8x16_t)v98, (int8x16_t)v50), (int8x16_t)(*(_OWORD *)&v109.val[3] & __PAIR128__(0xFFFFFF20FFFFFF20, 0xFFFFFF20FFFFFF20)));
    v109.val[1] = veorq_s8(vandq_s8((int8x16_t)v99, (int8x16_t)v50), (int8x16_t)(*(_OWORD *)&v109.val[1] & __PAIR128__(0xFFFFFF20FFFFFF20, 0xFFFFFF20FFFFFF20)));
    v109.val[2] = veorq_s8(vandq_s8((int8x16_t)v100, (int8x16_t)v50), (int8x16_t)(*(_OWORD *)&v109.val[2] & __PAIR128__(0xFFFFFF20FFFFFF20, 0xFFFFFF20FFFFFF20)));
    a37 = vaddq_s32(vsubq_s32(v99, vaddq_s32((int32x4_t)v109.val[1], (int32x4_t)v109.val[1])), (int32x4_t)v51);
    a38 = vaddq_s32(vsubq_s32(v100, vaddq_s32((int32x4_t)v109.val[2], (int32x4_t)v109.val[2])), (int32x4_t)v51);
    a35 = vaddq_s32(vsubq_s32(v97, vaddq_s32((int32x4_t)v109.val[0], (int32x4_t)v109.val[0])), (int32x4_t)v51);
    a36 = vaddq_s32(vsubq_s32(v98, vaddq_s32((int32x4_t)v109.val[3], (int32x4_t)v109.val[3])), (int32x4_t)v51);
    v101 = (_DWORD *)&a35 + v42 + 1904945012;
    v102 = *(v101 - 8) ^ *(v101 - 3);
    v103 = *((_DWORD *)&a35 + ((a6 + a5 - 745) ^ a28) + 1904945012) ^ *(v101 - 14) ^ (v102
                                                                                                  + v40
                                                                                                  - ((2 * v102) & 0xEE7B4B20));
    HIDWORD(v104) = v103 ^ v40;
    LODWORD(v104) = v103;
    *v101 = (v104 >> 31) + v40 - ((2 * (v104 >> 31)) & 0xEE7B4B20);
    return (*(uint64_t (**)(uint64_t))(v44 + 8 * ((306 * (v45 == 1904944949)) ^ (a6 + a5 + 714))))(1207959383);
  }
  else if (v59 == 1)
  {
    v107 = __PAIR64__(v56, v57);
    v108 = vld4q_s8(v48);
    v60 = (uint8x16_t)veorq_s8(v108.val[0], (int8x16_t)v49);
    v61 = vmovl_u8(*(uint8x8_t *)v60.i8);
    v62 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v61.i8);
    v63 = (int8x16_t)vmovl_high_u16(v61);
    v64 = vmovl_high_u8(v60);
    v65 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v64.i8);
    v66 = (int8x16_t)vmovl_high_u16(v64);
    v67 = (uint8x16_t)veorq_s8(v108.val[1], (int8x16_t)v49);
    v68 = vmovl_high_u8(v67);
    v69 = vmovl_u8(*(uint8x8_t *)v67.i8);
    v70 = (uint8x16_t)veorq_s8(v108.val[2], (int8x16_t)v49);
    _Q26 = (int8x16_t)vmovl_high_u8(v70);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v70.i8);
    v73 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }
    v78 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v108.val[0] = veorq_s8(v108.val[3], (int8x16_t)v49);
    v108.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v108.val[0]);
    v108.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v108.val[1]);
    v108.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v108.val[0].i8);
    v108.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v108.val[0]);
    v108.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v108.val[0].i8), 0x18uLL), v73), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v69.i8, 8uLL), v62));
    v108.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v108.val[3], 0x18uLL), _Q25), vorrq_s8((int8x16_t)vshll_high_n_u16(v69, 8uLL), v63));
    v108.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v108.val[1].i8), 0x18uLL), v78), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v68.i8, 8uLL), v65));
    v108.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v108.val[2], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v68, 8uLL), v66));
    v79 = (int32x4_t)veorq_s8(vandq_s8(v108.val[0], (int8x16_t)v53), (int8x16_t)(*(_OWORD *)&v62 & __PAIR128__(0xFFFFFF07FFFFFF07, 0xFFFFFF07FFFFFF07)));
    v80 = (int32x4_t)veorq_s8(vandq_s8(v108.val[3], (int8x16_t)v53), (int8x16_t)(*(_OWORD *)&v63 & __PAIR128__(0xFFFFFF07FFFFFF07, 0xFFFFFF07FFFFFF07)));
    v81 = (int32x4_t)veorq_s8(vandq_s8(v108.val[1], (int8x16_t)v53), (int8x16_t)(*(_OWORD *)&v65 & __PAIR128__(0xFFFFFF07FFFFFF07, 0xFFFFFF07FFFFFF07)));
    v82 = (int32x4_t)veorq_s8(vandq_s8(v108.val[2], (int8x16_t)v53), (int8x16_t)(*(_OWORD *)&v66 & __PAIR128__(0xFFFFFF07FFFFFF07, 0xFFFFFF07FFFFFF07)));
    a37 = vaddq_s32(vsubq_s32((int32x4_t)v108.val[1], vaddq_s32(v81, v81)), (int32x4_t)v51);
    a38 = vaddq_s32(vsubq_s32((int32x4_t)v108.val[2], vaddq_s32(v82, v82)), (int32x4_t)v51);
    a35 = vaddq_s32(vsubq_s32((int32x4_t)v108.val[0], vaddq_s32(v79, v79)), (int32x4_t)v51);
    a36 = vaddq_s32(vsubq_s32((int32x4_t)v108.val[3], vaddq_s32(v80, v80)), (int32x4_t)v51);
    v83 = dword_1AC3CA614[a29 + v42];
    v84 = (v55 ^ v41)
        - 847090527
        + ((v58 ^ v41) & (v54 ^ v41) | (v54 ^ 0xB0B08B46) & (v56 ^ v41))
        + v83
        + (a35.i32[(*(_BYTE *)(a29 + v42 + 0x1AC3D31D0) - 20)] ^ v40);
    HIDWORD(v105) = (a5 - 2091549833) & 0xDAB30F6F;
    LODWORD(v106) = HIDWORD(v105) ^ 0xE1F520E4;
    HIDWORD(v106) = HIDWORD(a17) - 942125478;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(uint64_t, __n128, __n128, __n128, __n128, __n128), uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 8 * ((476 * (a29 + 1 == v45)) ^ 0x409u)))(3447876769, ((v84 + v41 - (v43 & (2 * v84))) ^ v41) << (*(_BYTE *)(a29 + v42 + 0x1AC3CBCAALL) - 62), 0x1AC3D31D0, 0x1AC3CA614, 0x1AC3CBCAALL, -(*(_BYTE *)(a29 + v42 + 0x1AC3CBCAALL) - 62), v83, v54, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v39,
             a5 + (v38 ^ 0x11Au) - 333,
             a21,
             v105,
             v106,
             __PAIR64__(v54, v55),
             v107,
             v47,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34);
  }
  else
  {
    *(_DWORD *)(v46 - 180) = 2 * (v55 ^ v41) + v41 - (v43 & (4 * (v55 ^ v41)));
    *(_DWORD *)(v46 - 176) = 2 * (v54 ^ v41) + v41 - (v43 & (4 * (v54 ^ v41)));
    *(_DWORD *)(v46 - 172) = 2 * (v57 ^ v41) + v41 - (v43 & (4 * (v57 ^ v41)));
    *(_DWORD *)(v46 - 168) = 2 * (v56 ^ v41) + v41 - (v43 & (4 * (v56 ^ v41)));
    a31 = 0;
    return v47(1207959383, v49, v50, v51, v52, v53);
  }
}

uint64_t sub_1AC1F2BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,unsigned int a24)
{
  uint64_t v24;
  unsigned int v25;
  _BOOL4 v26;
  _BOOL4 v27;
  _BOOL4 v28;

  v25 = a19 + a23 + 1499;
  v26 = v25 < 0x415476E9;
  v27 = v25 > a24;
  if (a24 < 0x415476E9 != v26)
    v28 = v26;
  else
    v28 = v27;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24 + 8 * (v28 | (2 * v28) | (a6 + a5 - 460))) - 4))(2694887066);
}

uint64_t sub_1AC1F2C64(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23)
{
  int v23;
  uint64_t v24;

  return ((uint64_t (*)(void))(*(_QWORD *)(v24
                                        + 8
                                        * (((a1 + v23 + 63 >= a1 + v23 + ((a23 + 8136675) & 0xFF83D7FF) - 1775)
                                          * (a6 + (a23 ^ (a5 - 252)) - 843)) ^ a23))
                            - 12))();
}

uint64_t sub_1AC1F2CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  return ((uint64_t (*)(void))(*(_QWORD *)(v23
                                        + 8
                                        * ((483
                                          * (v21
                                           + 2717350948
                                           - a18
                                           - a20
                                           - (unint64_t)(((a5 + v22 - 1775) ^ 0x157CABFu) + v20) < ((v22 - a6 - 879) ^ 0xA1F77C35uLL))) ^ v22))
                            - 12))();
}

uint64_t sub_1AC1F2D3C@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W5>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_BYTE *)(v5 + a4) = *(_BYTE *)(v7 + (v4 + a1))
                      - ((*(_BYTE *)(v7 + (v4 + a1)) << (((a3 + v6 - 108) | 0x20) - 51)) & v9)
                      + 117;
  return (*(uint64_t (**)(void))(v8 + 8 * (((a4 != 63) * a2) ^ (a3 + v6 + 189))))();
}

uint64_t sub_1AC1F2D90(int a1, int8x16_t a2, double a3, double a4, int8x16_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, unsigned int a12)
{
  int v12;
  int8x16_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;

  v17 = *(int8x16_t *)(v15 + a1 + v12 + ((a10 + v14 - 864) | a12) - 52);
  *v13 = vaddq_s8(vsubq_s8(v17, vandq_s8(vaddq_s8(v17, v17), a5)), a2);
  return (*(uint64_t (**)(void))(v16 + 8 * (a10 + v14 - 664)))();
}

uint64_t sub_1AC1F2DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;

  v21 = v18 - 571562531 < (a18 - 1009662284);
  if ((a18 - 1009662284) < 0x3D4DEF43 != (v18 - 571562531) < 0x3D4DEF43)
    v21 = (a18 - 1009662284) < 0x3D4DEF43;
  return ((uint64_t (*)(void))(*(_QWORD *)(v19 + 8 * ((956 * ((((v20 - 693) ^ v21) & 1) == 0)) ^ v20)) - 4))();
}

uint64_t sub_1AC1F2E60(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v25;

  v25 = a2 ^ 0x6A7;
  v20 = (a2 + 537086207) | 0x81F43000;
  v21 = 628203409 * ((~((v19 - 152) | 0x6AAAFC17) + ((v19 - 152) & 0x6AAAFC17)) ^ 0x17DD0FDB);
  *(_DWORD *)(v19 - 144) = v21 + a2 - 69;
  *(_DWORD *)(v19 - 140) = a18 - v21 + 24764470;
  *(_QWORD *)(v19 - 152) = a15;
  sub_1AC1BC1C0(v19 - 152);
  v22 = *(_DWORD *)(v19 - 184) & ((v20 + 1577617817) ^ v25);
  *(_BYTE *)(v19 - 252 + (v22 ^ 0x2C)) = -11;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * ((109 * ((v22 ^ 0x2C) > 0x37)) ^ a2))
                                          - 12))(1207959383);
}

uint64_t sub_1AC1F2F7C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4
                                                                        + 8
                                                                        * ((((v2 == 63) ^ (v3 - 112)) & 1 | (16 * (((v2 == 63) ^ (v3 - 112)) & 1))) ^ v3))
                                                            - ((v3 - 1341) ^ 0x48)))(a1, a2, -1464955019);
}

uint64_t sub_1AC1F2FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((((v6 ^ (a5 + 17) ^ ((v7 | 0x248) - 67633834) & 0xA5FF7C75) < 8)
                                          * (((v7 | 0x248) - a6 + 295) ^ (a5 + 216))) ^ (v7 | 0x248)))
                            - 4))();
}

uint64_t sub_1AC1F3010@<X0>(uint64_t a1@<X2>, int a2@<W4>, int a3@<W5>, uint64_t a4@<X8>)
{
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 252 + a4 + a1) = 0x7575757575757575;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((1036 * (((v5 - a2 + 641) ^ 0x289) == (v4 & 0x38))) ^ (a3 + v5 - 381)))
                            - 8))();
}

uint64_t sub_1AC1F3070@<X0>(int a1@<W0>, int a2@<W8>)
{
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _BOOL4 v11;
  unsigned int v12;
  int v13;
  _BOOL4 v14;

  v11 = v3 < v6;
  *(_BYTE *)(v10 - 252 + ((v9 + 1162770979) & 0xBAB18327 ^ 0xAF356A40) + a2) = *(_BYTE *)(v7 + (v2 + a1))
                                                                             - ((2
                                                                               * *(_BYTE *)(v7 + (v2 + a1))) & 0xEA)
                                                                             + 117;
  v12 = v2 + 1 + v5;
  v13 = v11 ^ (v12 < v6);
  v14 = v12 < v3;
  if (!v13)
    v11 = v14;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((!v11 * v4) ^ v9)) - 4))();
}

uint64_t sub_1AC1F3104@<X0>(int a1@<W4>, int a2@<W5>, int a3@<W8>)
{
  uint64_t v3;
  int v4;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v3
                                                      + 8
                                                      * ((691 * ((a3 - 1464955019) < 0x38)) ^ (a2 + v4 + 599)))
                                          - ((v4 - a1 + 1504) ^ 0x5E8)))(-1464955019);
}

uint64_t sub_1AC1F3150@<X0>(uint64_t a1@<X0>, unsigned int a2@<W8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2;
  v5 = a1 + a2;
  if ((unint64_t)(v5 + 1) > 0x38)
    v6 = v5 + 1;
  else
    v6 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((681
                                          * (v6 - v4 + 1464955019 >= (unint64_t)(v2 + 183) - 1679)) ^ v2))
                            - 8))();
}

uint64_t sub_1AC1F31BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 252 + v2 + a1) = 0x7575757575757575;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8 * ((202 * ((((v3 - 58) - 1637) & v1) != 8)) ^ (v3 - 58)))
                            - (v3 - 192)
                            + 1487))();
}

uint64_t sub_1AC1F3214(double a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(double *)(v3 + v6) = a1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((v4 != v6) * v5) ^ v1)) - v2 + 1487))();
}

uint64_t sub_1AC1F323C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((55 * (((v0 == v1) ^ (v2 + 78)) & 1)) ^ v2)) - 8))();
}

void sub_1AC1F3278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  int v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;

  v6 = *(unsigned __int8 *)(v5 - 156) ^ 6;
  if (v6 == 1)
  {
    v7 = (a5 - 38) & 0xFE;
    v13 = *(_DWORD *)(v5 - 188);
    v12 = *(_DWORD *)(v5 - 184);
    *(_BYTE *)(v5 - 196) = ((8 * v12) ^ 0x60) - ((((8 * v12) ^ 0x60) << (v7 + 3)) & 0xE0) + 117;
    *(_BYTE *)(v5 - 195) = ((v12 >> 5) ^ 0x75) - 2 * (((v12 >> 5) ^ 0x75) & 0xF7 ^ (v12 >> 5) & 2) + 117;
    *(_BYTE *)(v5 - 194) = ((v12 >> 13) ^ 0xC3) - 2 * (((v12 >> 13) ^ 0xC3) & 0xFD ^ (v12 >> 13) & 8) + 117;
    v11 = -22;
    *(_BYTE *)(v5 - 193) = ((v12 >> 21) ^ 0xAD) - ((2 * ((v12 >> 21) ^ 0xAD)) & 0xEA) + 117;
    HIDWORD(v14) = v13 ^ 9;
    LODWORD(v14) = v12;
    *(_BYTE *)(v5 - 192) = (v14 >> 29) - ((2 * (v14 >> 29)) & 0xEA) + 117;
    *(_BYTE *)(v5 - 191) = ((v13 >> 5) ^ 3) - ((2 * ((v13 >> 5) ^ 3)) & 0xEA) + 117;
    *(_BYTE *)(v5 - 190) = ((v13 >> 13) ^ 0xAA) - ((2 * ((v13 >> 13) ^ 0xAA)) & 0xEA) + 117;
    v10 = (v13 >> 21) ^ 0xFFFFFF9F;
  }
  else
  {
    if (v6 != 2)
      goto LABEL_6;
    v7 = 127 * (a5 ^ (a5 + 2));
    v8 = *(_DWORD *)(v5 - 188);
    v10 = *(_DWORD *)(v5 - 184);
    *(_BYTE *)(v5 - 196) = ((v8 >> 21) ^ 0x9F) - ((v7 ^ 0x14) & (2 * ((v8 >> 21) ^ 0x9F))) + 117;
    *(_BYTE *)(v5 - 195) = ((v8 >> 13) ^ 0xAA) - ((2 * ((v8 >> 13) ^ 0xAA)) & 0xEA) + 117;
    *(_BYTE *)(v5 - 194) = ((v8 >> 5) ^ 3) - ((2 * ((v8 >> 5) ^ 3)) & 0xEA) + 117;
    HIDWORD(v9) = v8 ^ 9;
    LODWORD(v9) = v10;
    *(_BYTE *)(v5 - 193) = (v9 >> 29) - ((2 * (v9 >> 29)) & 0xEA) + 117;
    *(_BYTE *)(v5 - 192) = ((v10 >> 21) ^ 0xAD) - 2 * (((v10 >> 21) ^ 0xAD) & 0xF7 ^ (v10 >> 21) & 2) + 117;
    *(_BYTE *)(v5 - 191) = ((v10 >> 13) ^ 0xC3) - ((2 * ((v10 >> 13) ^ 0xC3)) & 0xEA) + 117;
    *(_BYTE *)(v5 - 190) = ((v10 >> 5) ^ 0x75) - 2 * (((v10 >> 5) ^ 0x75) & 0xFD ^ (v10 >> 5) & 8) + 117;
    LOBYTE(v10) = (8 * v10) ^ 0x60;
    v11 = -32;
  }
  *(_BYTE *)(v5 - 189) = v10 - (((_BYTE)v10 << (((v7 + 34) | 5) - 36)) & v11) + 117;
LABEL_6:
  JUMPOUT(0x1AC1F2054);
}

uint64_t sub_1AC1F371C@<X0>(uint64_t a1@<X2>, int a2@<W5>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 - 252 + a3 + a1) = 117;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (((2 * ((unint64_t)(a3 + 1 + a1) > 0x3F)) | (8
                                                                                            * ((unint64_t)(a3 + 1 + a1) > 0x3F))) ^ (a2 + v3 - 252)))
                            - 4))();
}

uint64_t sub_1AC1F37C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  _BOOL4 v15;
  _BOOL4 v16;

  v12 = *(_DWORD *)(v11 - 252 + ((v9 + v6) & 0xFFFFFFFC) + 72);
  v13 = (v12 >> ((v8 - a6) ^ (a5 + 24))) ^ 0x4F;
  *(_BYTE *)(a3 + (v9 + v6)) = v13 - ((2 * v13) & 0xEA) + 117;
  *(_BYTE *)(a3 + (v9 + v6 + 1)) = (BYTE2(v12) ^ 0x4F) - ((2 * (BYTE2(v12) ^ 0x4F)) & 0xEA) + 117;
  *(_BYTE *)(a3 + (v9 + v6 + 2)) = (BYTE1(v12) ^ 0x74)
                                               - 2 * ((BYTE1(v12) ^ 0x74) & 0xF7 ^ BYTE1(v12) & 2)
                                               + 117;
  *(_BYTE *)(a3 + (v9 + v6 + 3)) = v12 ^ 0xCC;
  v14 = *(_DWORD *)(v11 - 160) - 1868567102;
  v15 = v14 < v7;
  v16 = v9 - 420057962 < v14;
  if (v9 - 420057962 < v7 != v15)
    v16 = v15;
  return (*(uint64_t (**)(void))(v10 + 8 * ((2 * !v16) | (4 * !v16) | v8)))();
}

void sub_1AC1F3940()
{
  JUMPOUT(0x1AC1F3918);
}

uint64_t sub_1AC1F3948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  int v35;
  uint64_t v36;

  *(_DWORD *)(&a35 + a31) = 897876143;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 + 8 * ((v35 + 519) ^ 0x629)) - (((v35 + 1568) | 0xC2u) ^ 0x7EALL)))(&a35 + a31, 194, 2490629258, 1577, a5, a6, 2026, 3187668879, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_1AC1F3A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8 * (int)(((v24 == v22 + (v21 ^ 0x646) - 416) * ((v21 + a8) & v25 ^ (a5 + 9))) ^ v21)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21);
}

uint64_t sub_1AC1F3A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v18;
  int v19;
  uint64_t v20;

  return ((uint64_t (*)(void))(*(_QWORD *)(v20
                                        + 8
                                        * ((19 * ((((v18 ^ 0x13E) - 162) & (v19 - 2038179979)) - a18 == -2038179983)) ^ v18))
                            - 8))();
}

uint64_t sub_1AC1F3AA0@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((v1 == 897876143) ^ (a1 + 1)) & 1) * (a1 - 104)) ^ a1))
                            - 8))();
}

uint64_t sub_1AC1F3AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,int a33)
{
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _BOOL4 v40;

  v36 = a6 + v33;
  v37 = (v36 + 130) | 0x210;
  v38 = (v36 - 742) | 4;
  v39 = v36 + 1037;
  v40 = a33 + 676635086 < (v34 - 1781051717);
  if (a33 + 676635086 < (v37 ^ 0xF53715Bu) != (v34 - 1781051717) < 0xF537749)
    v40 = (v34 - 1781051717) < 0xF537749;
  return ((uint64_t (*)(void))(*(_QWORD *)(v35 + 8 * ((v40 * (v38 - 121)) ^ v39)) - 4))();
}

uint64_t sub_1AC1F3C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v19 = 628203409 * ((((v18 - 152) | 0x19301C5D) + (~(v18 - 152) | 0xE6CFE3A2)) ^ 0x9BB8106F);
  *(_QWORD *)(v18 - 112) = v13;
  *(_QWORD *)(v18 - 104) = a11;
  *(_QWORD *)(v18 - 152) = a12;
  *(_QWORD *)(v18 - 144) = a10;
  *(_QWORD *)(v18 - 128) = a13;
  *(_DWORD *)(v18 - 136) = v16 - v19 + 374;
  *(_DWORD *)(v18 - 132) = v14 - v19 - 345587121;
  v20 = ((uint64_t (*)(uint64_t))((char *)*(&off_1E5B5B480 + v16 - 123) - 4))(v18 - 152);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17
                                                                                          + 8
                                                                                          * (((*(_DWORD *)(v18 - 120) == v15)
                                                                                            * (((v16 - 1593488541) | 0xF23024)
                                                                                             + 1577616962)) ^ v16))
                                                                              - ((v16 + 786) ^ 0x3B8)))(v20, 194, 2490629258, 1577, 2717350949);
}

uint64_t sub_1AC1F3DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v32
                                                      + 8
                                                      * (((*(_DWORD *)(a29 + 48 * (v33 + v29)) != 159774684)
                                                        * (((v31 - a6 - 48) ^ (a5 + 777)) - 711)) ^ v31))
                                          - 12))(v30);
}

uint64_t sub_1AC1F3E0C@<X0>(int a1@<W8>)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((1248 * ((a1 ^ 0x96E1855B ^ v1 ^ v2) == v3 - 176551900)) ^ v1))
                            - 12))();
}

void sub_1AC1F3E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  __asm { BR              X10 }
}

uint64_t sub_1AC1F3F30@<X0>(uint64_t a1@<X0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27)
{
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;

  *(_DWORD *)(a1 + 392) = a2;
  *(_DWORD *)(a1 + 396) = a26;
  *(_QWORD *)(a1 + 400) = a24;
  *(_DWORD *)(a1 + 408) = a27 - v32 + 908163078;
  *(_QWORD *)(a1 + 416) = v27 + (v32 + v30 + 419506663);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(a23 + 48 * v29 + 8))(a10, a22);
  return ((uint64_t (*)(void))(*(_QWORD *)(v31 + 8 * ((85 * (v33 + v28 - ((2 * v33) & 0xEE7B4B20) == v28)) ^ v30)) - 8))();
}

uint64_t sub_1AC1F4004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v32
                                                      + 8
                                                      * ((314
                                                        * (*(_DWORD *)(a29 + 48 * v29 + 36) + 287469784 < (((v31 + 548739939) | 0x81426024) ^ 0x21F77C26))) ^ v31))
                                          - 8))(v30);
}

uint64_t sub_1AC1F4078(_DWORD *a1)
{
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((((*a1 - 897876143) < 0x10) * (v1 + 700)) ^ v1))
                            - 8))();
}

uint64_t sub_1AC1F40B4(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,int a33)
{
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _DWORD *v41;

  v41 = &a1[6 * v35];
  v41[2] = v40;
  v41[3] = v36;
  *((_QWORD *)v41 + 2) = v37;
  v41[6] = a33;
  *a1 = v34 + 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v39
                                        + 8
                                        * ((1784
                                          * (*(_DWORD *)(a29 + 48 * v38 + 32)
                                           + (((v33 + 557263746) | 0x80C05005) ^ 0xB0D50CFD) < ((v33 + 196) ^ 0x80000161))) ^ v33))
                            - 8))();
}

uint64_t sub_1AC1F4144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  int v25;
  uint64_t v26;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 + 8 * (int)(((v25 == 2000528784) * (a6 + ((((a9 + 456492892) & 0xE4CA77DF) + 558315394) | 0x80B04405) + 980)) ^ (a9 + 456492892) & 0xE4CA77DF)) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

void sub_1AC1F41B8()
{
  JUMPOUT(0x1AC1F39C8);
}

void sub_1AC1F41C0()
{
  JUMPOUT(0x1AC1F41ECLL);
}

uint64_t sub_1AC1F4238(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_1AC1F4250(uint64_t result)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  _BOOL4 v9;
  int v10;
  int v11;

  v1 = 1374699841 * (result ^ 0xE0C9E0C6DF41809);
  v2 = *(_DWORD *)(result + 16) - v1;
  v3 = *(_QWORD *)(result + 8) - v1;
  v4 = *(_DWORD *)(result + 20) ^ v1;
  v5 = *(_DWORD *)result - v1;
  v6 = *(_DWORD *)(result + 40) - v1;
  v7 = *(_QWORD *)(result + 32) + v1;
  v8 = v7 == v3;
  v9 = v7 > v3;
  v10 = v8;
  if ((v6 & 1) == 0)
    v9 = v10;
  if (v9)
    v11 = v4;
  else
    v11 = v2;
  *(_DWORD *)(result + 4) = v11 ^ v5;
  return result;
}

uint64_t sub_1AC1F42C4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 8);
  return 0;
}

void sub_1AC1F42DC(_DWORD *a1)
{
  signed int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *a1
     - 1225351577 * (((a1 | 0xD0007703) - (_DWORD)a1 + (a1 & 0x2FFF88FC)) ^ 0xF39AAF15)
     - 2138963137;
  v2 = *(_QWORD *)*(&off_1E5B5B480 + v1);
  v3 = v1 + 235795823 * (&v3 ^ 0x94AD4959) + 1348;
  v4 = v2;
  sub_1AC1D7254((uint64_t)&v3);
}

uint64_t sub_1AC1F43A8(_DWORD *a1)
{
  unsigned int v2;
  uint64_t result;
  int v4;

  v2 = *a1 ^ (535753261 * ((2 * (a1 & 0x3DFCD1FD) - (_DWORD)a1 + 1107504642) ^ 0x48F7202D));
  result = ((uint64_t (*)(char *, _QWORD))*(&off_1E5B5B480 + (int)(v2 ^ 0xE1F269AA)))((char *)*(&off_1E5B5B480 + (v2 & 0x1E019489)) - 8, *(&off_1E5B5B480 + (int)(v2 ^ 0xE1F26955)));
  v4 = *(_DWORD *)*(&off_1E5B5B480 + (int)(v2 + 504207114));
  if ((_DWORD)result)
    v4 = -2000486610;
  a1[1] = v4;
  return result;
}

uint64_t sub_1AC1F4470(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 8) + 535753261 * (((a1 | 0x81A8D923) - (a1 & 0x81A8D923)) ^ 0x8B5CD70C) - 426522922;
  v3 = *(_DWORD *)(a1 + 8) + 535753261 * (((a1 | 0x81A8D923) - (a1 & 0x81A8D923)) ^ 0x8B5CD70C) - 426521534;
  v5 = *(_QWORD *)a1;
  v6 = (535753261 * ((((2 * &v5) | 0xAC6182C2) - &v5 + 701447839) ^ 0xDCC4CF4E)) ^ v3;
  v7 = v1;
  return ((uint64_t (*)(uint64_t *))*(&off_1E5B5B480 + v2))(&v5);
}

uint64_t sub_1AC1F4558(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = 628203409 * (((a1 | 0x79E46C7E) - a1 + (a1 & 0x861B9381)) ^ 0xFB6C604D);
  v3 = *(_DWORD *)(a1 + 8) + v2;
  v4 = *(_QWORD *)a1;
  v5 = v2 ^ *(_DWORD *)(a1 + 28) ^ 0xC75A150D;
  v6 = 1225351577 * (&v9 ^ 0x239AD816);
  v7 = *(_DWORD *)(a1 + 12) + 2024873111 + v2;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = (v3 ^ 0xB7D680A2) - v6 + 1845358308 + ((2 * v3) & 0x7E5FE7FC ^ 0x1052E6B8);
  v12 = v4;
  v13 = v5 - v6;
  v14 = v6 ^ (v7 + 1692);
  result = ((uint64_t (*)(uint64_t *))*(&off_1E5B5B480 + v7))(&v9);
  *(_DWORD *)(a1 + 24) = v10;
  return result;
}

uint64_t sub_1AC1F46A0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 24);
  return 0;
}

uint64_t sub_1AC1F46B8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = 535753261 * ((a1 + 1065520 - 2 * (a1 & 0x104230)) ^ 0xAE44C1F);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v7 = *(_DWORD *)a1 - 368400112 + v2;
  v8 = 235795823
     * (((&v10 | 0xAA858AE3) - &v10 + (&v10 & 0x557A7518)) ^ 0x3E28C3BA);
  v11 = v2 + *(_DWORD *)(a1 + 32) + v8 + 987585428;
  v16 = v4;
  v10 = v6;
  v12 = v5;
  v13 = v3;
  v15 = v8 ^ (v7 + 1840);
  result = ((uint64_t (*)(uint64_t *))((char *)*(&off_1E5B5B480 + v7) - 8))(&v10);
  *(_DWORD *)(a1 + 24) = v14;
  return result;
}

uint64_t sub_1AC1F47E8(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v9;

  v1 = 1755732067 * (((result | 0x8EA96B22131044E8) - (result & 0x8EA96B22131044E8)) ^ 0x5302CC1DCDD6F933);
  v2 = *(_QWORD *)(result + 16) ^ v1;
  v3 = *(_QWORD *)(result + 40) ^ v1;
  v4 = (uint64_t)v3 < (uint64_t)v2;
  v5 = v3 < v2;
  v6 = v4;
  if (((*(_DWORD *)(result + 8) ^ v1) & 1) != 0)
    v7 = v6;
  else
    v7 = v5;
  v8 = v7 == 0;
  v9 = 24;
  if (!v8)
    v9 = 32;
  *(_DWORD *)(result + 28) = (*(_DWORD *)(result + v9) - v1) ^ (*(_DWORD *)result - v1);
  return result;
}

uint64_t sub_1AC1F487C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 88) = 14;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_1AC1F489C(uint64_t result)
{
  unint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  _BOOL4 v9;
  int v10;
  int v11;

  v1 = 108757529 * (result ^ 0xE75B6218E09C622BLL);
  v2 = *(_DWORD *)(result + 40) ^ v1;
  v3 = *(_DWORD *)(result + 28) - v1;
  v4 = *(_DWORD *)(result + 32) - v1;
  v5 = *(_DWORD *)(result + 24) ^ v1;
  v6 = *(_QWORD *)(result + 8) ^ v1;
  v7 = *(_QWORD *)(result + 16) + v1;
  v8 = v7 >= v6;
  v9 = v7 != v6;
  v10 = v8;
  if ((v2 & 1) != 0)
    v9 = v10;
  if (v9)
    v11 = v5;
  else
    v11 = v3;
  *(_DWORD *)(result + 36) = v11 ^ v4;
  return result;
}

uint64_t sub_1AC1F490C(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v9;

  v1 = 1224239923 * (((result | 0xAF58CA7FD3C89FD7) - (result & 0xAF58CA7FD3C89FD7)) ^ 0x87027F16217B6200);
  v2 = *(_QWORD *)(result + 16) ^ v1;
  v3 = *(_QWORD *)result - v1;
  v4 = v3 > v2;
  v5 = v3 == v2;
  v6 = v4;
  if (((*(_DWORD *)(result + 24) + (_DWORD)v1) & 1) != 0)
    v7 = v6;
  else
    v7 = v5;
  v8 = v7 == 0;
  v9 = 28;
  if (!v8)
    v9 = 40;
  *(_DWORD *)(result + 8) = *(_DWORD *)(result + 32) ^ v1 ^ (*(_DWORD *)(result + v9) + v1);
  return result;
}

_BYTE *sub_1AC1F49A0(_BYTE *result, char a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = -(int)result & 7;
  if (v3 > a3)
    LODWORD(v3) = a3;
  switch((int)v3)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_6;
    case 6:
      goto LABEL_5;
    case 7:
      *result++ = a2;
LABEL_5:
      *result++ = a2;
LABEL_6:
      *result++ = a2;
LABEL_7:
      *result++ = a2;
LABEL_8:
      *result++ = a2;
LABEL_9:
      *result++ = a2;
LABEL_10:
      *result++ = a2;
      break;
    default:
      break;
  }
  v4 = a3 - v3;
  v6 = v4;
  v5 = v4 & 7;
  switch(v6)
  {
    case 0uLL:
      return result;
    case 1uLL:
      goto LABEL_20;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      goto LABEL_18;
    case 4uLL:
      goto LABEL_17;
    case 5uLL:
      goto LABEL_16;
    case 6uLL:
      goto LABEL_15;
    case 7uLL:
      *result++ = a2;
LABEL_15:
      *result++ = a2;
LABEL_16:
      *result++ = a2;
LABEL_17:
      *result++ = a2;
LABEL_18:
      *result++ = a2;
LABEL_19:
      *result++ = a2;
LABEL_20:
      *result = a2;
      break;
    default:
      result = (_BYTE *)((uint64_t (*)(void))((char *)&loc_1AC1F4A30 + 4 * byte_1AC3CE047[(v5 >> 3) & 7]))();
      break;
  }
  return result;
}

void sub_1AC1F4A94()
{
  uint64_t v0;
  char v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v0 = qword_1EEC7B420 - (_QWORD)&v1 + qword_1EEC7B1D8;
  qword_1EEC7B420 = 536075833 * v0 + 0x3076D37E12EEFF1CLL;
  qword_1EEC7B1D8 = 536075833 * (v0 ^ 0x86C548EE6B3237FCLL);
  v2 = 1755732067 * ((((2 * &v2) | 0x334CB66C) - &v2 + 1717150922) ^ 0x4760E6ED) + 599;
  v3 = (uint64_t)*(&off_1E5B5B480
                + ((57 * ((qword_1EEC7B1D8 - qword_1EEC7B420) ^ 0xFC)) ^ byte_1AC3D51B0[byte_1AC3D0FB0[(57 * ((qword_1EEC7B1D8 - qword_1EEC7B420) ^ 0xFC))] ^ 0xD8])
                + 69);
  sub_1AC1D58D4(&v2);
}

uint64_t sub_1AC1F4BB8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 8);
  return 0;
}

uint64_t sub_1AC1F4BD0(uint64_t a1)
{
  int v2;
  int v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = 3804331 * ((((2 * a1) | 0x53BC0568) - a1 + 1445068108) ^ 0xD70B2742);
  v3 = *(_DWORD *)(a1 + 40) + v2;
  v4 = *(_OWORD *)(a1 + 24);
  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD *)(a1 + 48) ^ v2;
  v7 = 1224239923
     * (((&v9 ^ 0x4AA8E696) & 0xC3255823 | ~(&v9 ^ 0x4AA8E696 | 0xC3255823)) ^ 0x84C1BC9D);
  v12 = *(_QWORD *)(a1 + 8);
  v14 = v3 + v7 - 1695026373;
  v11 = v4;
  v10 = (v6 ^ 0x225F1F96) - v7 + 997457914 + ((2 * v6) & 0x9FFF769E ^ 0x9B414092);
  v9 = v5;
  result = ((uint64_t (*)(uint64_t *))((char *)*(&off_1E5B5B480 + (int)(v3 & 0x98266075)) - 12))(&v9);
  *(_DWORD *)(a1 + 16) = v13;
  return result;
}

void sub_1AC1F4D38()
{
  char v0;
  _DWORD v1[2];
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  qword_1EEC7B278 = 536075833 * ((qword_1EEC7B1D8 - qword_1EEC7B278) ^ (unint64_t)&v0 ^ 0x86C548EE6B3237FCLL);
  qword_1EEC7B1D8 = qword_1EEC7B278;
  v2 = 0x1EEC7C890;
  v1[0] = 1755732067 * (((v1 | 0x34BABF21) - (v1 & 0x34BABF21)) ^ 0xEA7C02FA) + 599;
  sub_1AC1D58D4(v1);
  v2 = (uint64_t)*(&off_1E5B5B480
                + ((57 * ((qword_1EEC7B1D8 - qword_1EEC7B278) ^ 0xFC)) ^ byte_1AC3D4FB0[byte_1AC3D0CB0[(57 * ((qword_1EEC7B1D8 - qword_1EEC7B278) ^ 0xFC))] ^ 0x98])
                - 183);
  v1[0] = 1755732067 * (v1 ^ 0xDEC6BDDB) + 599;
  sub_1AC1D58D4(v1);
  LOBYTE(v1[0]) = 51 * ((2 * (v1 & 0x50) - v1 - 82) ^ 0x79) + 40;
  v1[1] = 1224239923 * ((2 * (v1 & 0x42DA9D50) - v1 + 1025860270) ^ 0xCF969F79) + 623;
  sub_1AC1BA844(v1);
}

os_log_t _ML3LogCategoryDefault()
{
  return os_log_create("com.apple.amp.medialibrary", "Default");
}

os_log_t _ML3LogCategoryDefault_Oversize()
{
  return os_log_create("com.apple.amp.medialibrary", "Default_Oversize");
}

os_log_t _ML3LogCategoryWriter()
{
  return os_log_create("com.apple.amp.medialibrary", "Writer");
}

os_log_t _ML3LogCategoryService()
{
  return os_log_create("com.apple.amp.medialibrary", "Service");
}

os_log_t _ML3LogCategoryMigration()
{
  return os_log_create("com.apple.amp.medialibrary", "Migration");
}

os_log_t _ML3LogCategoryValidation()
{
  return os_log_create("com.apple.amp.medialibrary", "Validation");
}

os_log_t _ML3LogCategoryCacheManagement()
{
  return os_log_create("com.apple.amp.medialibrary", "CacheManagement");
}

os_log_t _ML3LogCategoryLibrary()
{
  return os_log_create("com.apple.amp.medialibrary", "Library");
}

os_log_t _ML3LogCategoryImport()
{
  return os_log_create("com.apple.amp.medialibrary", "Import");
}

os_log_t _ML3LogCategoryMultiUser()
{
  return os_log_create("com.apple.amp.medialibrary", "MultiUser");
}

void sub_1AC1F5210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC1F53BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

uint64_t ML3DAAPCodeForImportPropertyKey(uint64_t a1)
{
  int v2;
  uint64_t result;
  unsigned __int16 v4;
  unsigned __int16 v5;
  int v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  int v12;
  int v13;
  unsigned __int16 v14;
  int v15;
  void *v16;
  void *v17;

  v2 = 1634025833;
  if ((int)a1 > 0x8000000)
  {
    if ((int)a1 > 201326592)
    {
      if ((int)a1 > 301989888)
      {
        if ((int)a1 <= 369098752)
        {
          switch((int)a1)
          {
            case 301989889:
LABEL_39:
              v4 = 24946;
              return v4 | 0x61730000u;
            case 301989890:
LABEL_53:
              v4 = 29537;
              return v4 | 0x61730000u;
            case 301989891:
            case 301989892:
            case 301989894:
            case 301989895:
            case 301989896:
            case 301989897:
            case 301989898:
            case 301989900:
            case 301989902:
              goto LABEL_278;
            case 301989893:
              return (v2 - 32);
            case 301989899:
              return 1634888036;
            case 301989901:
LABEL_56:
              v5 = 16741;
              return v5 | 0x616A0000u;
            case 301989903:
LABEL_51:
              v6 = 1634036850;
              return v6 | 1u;
            case 301989904:
LABEL_52:
              v7 = 27762;
              return v7 | 0x61650000u;
            case 301989905:
              goto LABEL_9;
            default:
              switch((int)a1)
              {
                case 318767105:
                  goto LABEL_39;
                case 318767106:
                  goto LABEL_53;
                case 318767107:
LABEL_71:
                  v7 = 21326;
                  return v7 | 0x61650000u;
                case 318767108:
LABEL_72:
                  v8 = 18;
LABEL_73:
                  v11 = 29537;
LABEL_230:
                  v15 = v11 | 0x61730000;
                  return v15 | v8;
                case 318767111:
LABEL_55:
                  v7 = 16745;
                  return v7 | 0x61650000u;
                case 318767118:
                  goto LABEL_56;
                case 318767120:
                  goto LABEL_9;
                default:
                  goto LABEL_278;
              }
          }
        }
        switch((int)a1)
        {
          case 369098753:
            return 1936746852;
          case 369098754:
            result = 1936746593;
            break;
          case 369098755:
            result = 1936748129;
            break;
          case 369098756:
            result = 1936748661;
            break;
          case 369098757:
            result = 1936748660;
            break;
          case 369098758:
            result = 1936749167;
            break;
          case 369098759:
            result = 1936747625;
            break;
          case 369098760:
            result = 1936746860;
            break;
          default:
            switch((int)a1)
            {
              case 385875969:
                result = 1634353740;
                break;
              case 385875970:
                result = 1634353774;
                break;
              case 385875971:
                result = 1634353761;
                break;
              case 385875972:
                result = 1634353764;
                break;
              case 385875973:
                result = 1634353779;
                break;
              case 385875974:
LABEL_9:
                result = 0;
                break;
              default:
                goto LABEL_278;
            }
            break;
        }
      }
      else if ((int)a1 > 0x10000000)
      {
        if ((int)a1 <= 285212672)
        {
          switch((_DWORD)a1)
          {
            case 0x10000001:
              return 1936746852;
            case 0x10000002:
              v8 = 17;
LABEL_276:
              v15 = 1634357828;
              return v15 | v8;
            case 0x10000003:
              v5 = 21060;
              return v5 | 0x616A0000u;
            default:
LABEL_278:
              objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "uint32_t ML3DAAPCodeForImportPropertyKey(MLImportPropertyKey)");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("ML3DAAPImportUtils.m"), 459, CFSTR("ML3DAAPCodeForImportPropertyKey - unhandled property key %x"), a1);

              return 0;
          }
        }
        else
        {
          switch((int)a1)
          {
            case 285212673:
LABEL_33:
              result = 1634951532;
              break;
            case 285212674:
LABEL_67:
              v8 = 20;
              goto LABEL_73;
            case 285212677:
            case 285212678:
            case 285212682:
            case 285212687:
              goto LABEL_9;
            case 285212680:
              goto LABEL_51;
            case 285212681:
              result = 1634952047;
              break;
            case 285212683:
LABEL_68:
              v9 = 1634030414;
LABEL_268:
              result = (v9 + 7);
              break;
            case 285212693:
              goto LABEL_56;
            case 285212695:
              goto LABEL_52;
            case 285212696:
              goto LABEL_55;
            case 285212697:
LABEL_69:
              result = 1634353513;
              break;
            case 285212699:
LABEL_70:
              v10 = 1634951538;
LABEL_87:
              result = (v10 - 17);
              break;
            default:
              goto LABEL_278;
          }
        }
      }
      else if ((int)a1 <= 234881024)
      {
        switch((int)a1)
        {
          case 218103810:
          case 218103811:
            goto LABEL_9;
          case 218103812:
            result = 1634759535;
            break;
          case 218103813:
            v9 = 1634353509;
            goto LABEL_268;
          case 218103814:
            result = 1634357356;
            break;
          default:
            if ((_DWORD)a1 != 201326593 && (_DWORD)a1 != 201326594)
              goto LABEL_278;
            goto LABEL_9;
        }
      }
      else
      {
        switch((int)a1)
        {
          case 234881025:
          case 234881026:
          case 234881027:
          case 234881034:
            goto LABEL_9;
          case 234881028:
            result = 1634354005;
            break;
          case 234881029:
            result = 1634357365;
            break;
          case 234881030:
LABEL_57:
            result = 1835624804;
            break;
          case 234881031:
            goto LABEL_278;
          case 234881032:
            goto LABEL_55;
          case 234881033:
            result = 1634362194;
            break;
          default:
            if ((_DWORD)a1 != 251658243)
              goto LABEL_278;
            result = 1634357859;
            break;
        }
      }
    }
    else if ((int)a1 <= 184549376)
    {
      switch((int)a1)
      {
        case 167772161:
          goto LABEL_39;
        case 167772162:
          goto LABEL_71;
        case 167772163:
          goto LABEL_70;
        case 167772164:
          goto LABEL_33;
        case 167772165:
          result = 1634952048;
          break;
        case 167772166:
          result = 1634953070;
          break;
        case 167772167:
          goto LABEL_53;
        case 167772168:
          goto LABEL_72;
        case 167772169:
          v13 = 1634956129;
LABEL_211:
          result = (v13 + 11);
          break;
        case 167772170:
          goto LABEL_67;
        case 167772171:
          result = 1634956131;
          break;
        case 167772172:
        case 167772189:
          goto LABEL_278;
        case 167772173:
        case 167772187:
        case 167772188:
          return 0;
        case 167772174:
          result = 1936017732;
          break;
        case 167772175:
          result = 1936015689;
          break;
        case 167772176:
          result = 1936020041;
          break;
        case 167772177:
          result = 1936020553;
          break;
        case 167772178:
          v12 = 1936015689;
LABEL_218:
          result = v12 | 0x200u;
          break;
        case 167772179:
          result = 1936017225;
          break;
        case 167772180:
          return (v2 - 32);
        case 167772181:
          result = 1634357345;
          break;
        case 167772182:
          result = 1634361708;
          break;
        case 167772183:
LABEL_66:
          result = 1634026324;
          break;
        case 167772184:
          result = 1634354547;
          break;
        case 167772185:
          result = 1634954354;
          break;
        case 167772186:
          v6 = 1634951538;
          return v6 | 1u;
        case 167772190:
          result = 1634354532;
          break;
        case 167772191:
          result = 1634355536;
          break;
        default:
          switch((int)a1)
          {
            case 150994945:
            case 150994946:
            case 150994947:
              return 0;
            case 150994948:
              result = 1634364537;
              break;
            case 150994949:
              result = 1634358355;
              break;
            default:
              if ((_DWORD)a1 != 134217729)
                goto LABEL_278;
              result = 1634026308;
              break;
          }
          break;
      }
    }
    else
    {
      switch((int)a1)
      {
        case 184549377:
          return 1836082546;
        case 184549378:
          return 1936020297;
        case 184549379:
          return 0;
        case 184549380:
          return 1835362657;
        case 184549381:
          return 1634356309;
        case 184549382:
          return 1835362672;
        case 184549383:
        case 184549385:
        case 184549390:
        case 184549393:
        case 184549394:
        case 184549395:
        case 184549396:
        case 184549397:
        case 184549398:
        case 184549399:
        case 184549400:
        case 184549401:
        case 184549402:
        case 184549403:
        case 184549404:
        case 184549405:
        case 184549406:
        case 184549407:
        case 184549412:
        case 184549413:
        case 184549414:
        case 184549415:
        case 184549416:
        case 184549426:
        case 184549430:
        case 184549431:
        case 184549433:
        case 184549434:
        case 184549435:
        case 184549436:
        case 184549437:
        case 184549438:
        case 184549439:
        case 184549440:
        case 184549441:
        case 184549442:
        case 184549446:
        case 184549449:
        case 184549454:
        case 184549457:
        case 184549458:
          goto LABEL_9;
        case 184549384:
          return 1835626093;
        case 184549386:
          return 1634037860;
        case 184549387:
          return 1634357327;
        case 184549388:
          return 1634357317;
        case 184549389:
          return 1634037859;
        case 184549391:
          goto LABEL_51;
        case 184549392:
          return 1836082031;
        case 184549408:
          goto LABEL_57;
        case 184549409:
          return 1634029683;
        case 184549410:
          return 1634029682;
        case 184549417:
          v2 = 1634353509;
          goto LABEL_112;
        case 184549418:
          v8 = 273;
          goto LABEL_276;
        case 184549419:
          return 1634358088;
        case 184549420:
          return 1634363766;
        case 184549422:
          return 1634353481;
        case 184549423:
          return 1634353486;
        case 184549424:
          return 1634353525;
        case 184549425:
          return 1634357833;
        case 184549427:
          return 1634358115;
        case 184549428:
          return 1634358128;
        case 184549429:
          return 1634366316;
        case 184549432:
LABEL_112:
          result = (v2 + 3810);
          break;
        case 184549443:
          result = 1634358889;
          break;
        case 184549444:
          v8 = 1066;
          goto LABEL_276;
        case 184549445:
          v8 = 1072;
          goto LABEL_276;
        case 184549447:
          v5 = 29518;
          return v5 | 0x616A0000u;
        case 184549448:
          result = 1634358856;
          break;
        case 184549450:
          goto LABEL_66;
        case 184549451:
          result = 1634353480;
          break;
        case 184549452:
LABEL_65:
          result = 1970039140;
          break;
        case 184549453:
          result = 1634362473;
          break;
        case 184549455:
          result = 1634357315;
          break;
        case 184549456:
          result = 1634358091;
          break;
        case 184549459:
          result = 1634357332;
          break;
        case 184549460:
          goto LABEL_52;
        case 184549461:
          result = 1634353490;
          break;
        case 184549462:
          v12 = 1634353509;
          goto LABEL_218;
        case 184549463:
          result = 1634353999;
          break;
        case 184549464:
          v13 = 1634365541;
          goto LABEL_211;
        case 184549465:
          result = 1634354025;
          break;
        case 184549466:
          result = 1634354040;
          break;
        case 184549467:
          result = 1634357840;
          break;
        case 184549468:
          result = 1634354035;
          break;
        default:
          goto LABEL_278;
      }
    }
  }
  else
  {
    result = 1634028907;
    if ((int)a1 <= 83886080)
    {
      if ((int)a1 <= 0x2000000)
      {
        switch((int)a1)
        {
          case 16777217:
            return result;
          case 16777218:
          case 16777219:
          case 16777220:
          case 16777221:
          case 16777222:
          case 16777223:
          case 16777224:
          case 16777225:
          case 16777226:
          case 16777227:
          case 16777228:
          case 16777229:
          case 16777230:
          case 16777231:
          case 16777232:
          case 16777233:
          case 16777234:
          case 16777235:
          case 16777236:
          case 16777240:
          case 16777241:
          case 16777243:
          case 16777244:
          case 16777245:
          case 16777250:
          case 16777251:
          case 16777252:
          case 16777253:
            return 0;
          case 16777237:
            result = 1634952302;
            break;
          case 16777238:
            result = 1634956398;
            break;
          case 16777239:
            result = 1634026835;
            break;
          case 16777242:
            v8 = 1025;
LABEL_229:
            v11 = 24946;
            goto LABEL_230;
          case 16777246:
            result = 1634952047;
            break;
          case 16777247:
            result = 1634952289;
            break;
          case 16777248:
            result = 1634362177;
            break;
          case 16777249:
            result = 1634353494;
            break;
          default:
            goto LABEL_278;
        }
      }
      else
      {
        switch((int)a1)
        {
          case 33554433:
            return 1835626093;
          case 33554434:
            return 1634956142;
          case 33554435:
            return 1634952291;
          case 33554436:
            v14 = 29537;
            goto LABEL_153;
          case 33554437:
            return 1634956397;
          case 33554438:
            return 1634957682;
          case 33554439:
          case 33554441:
          case 33554442:
          case 33554449:
          case 33554456:
          case 33554457:
          case 33554458:
            return 0;
          case 33554440:
            return 1634954355;
          case 33554443:
            return 1634952301;
          case 33554444:
            return result;
          case 33554445:
            v12 = 1634951538;
            goto LABEL_218;
          case 33554446:
            return 1634026322;
          case 33554447:
            return 1634952290;
          case 33554448:
            v14 = 24946;
LABEL_153:
            result = (v14 | 0x61730000u) + 258;
            break;
          case 33554450:
            result = 1634952045;
            break;
          case 33554451:
            result = 1634169456;
            break;
          case 33554452:
            result = 1634952308;
            break;
          case 33554453:
            result = 1634954339;
            break;
          case 33554454:
            result = 1634034544;
            break;
          case 33554455:
            result = 1634026354;
            break;
          case 33554459:
            goto LABEL_278;
          case 33554460:
            result = 1634037878;
            break;
          case 33554461:
            result = 1634029668;
            break;
          case 33554462:
            result = 1635218027;
            break;
          case 33554463:
            result = 1634563693;
            break;
          case 33554464:
            result = 1634563683;
            break;
          case 33554465:
            v13 = 1634563683;
            goto LABEL_211;
          case 33554466:
            result = 1634363760;
            break;
          default:
            switch((int)a1)
            {
              case 50331649:
              case 50331650:
                result = 1634951794;
                break;
              case 50331651:
                result = 1634952036;
                break;
              case 50331652:
                v8 = 513;
                goto LABEL_229;
              case 50331653:
                result = 1634952299;
                break;
              case 50331654:
                result = 1634956652;
                break;
              case 50331655:
                result = 1634027349;
                break;
              case 50331656:
                result = 1634952561;
                break;
              case 50331657:
                result = 1634952813;
                break;
              case 50331658:
                result = 1634027336;
                break;
              case 50331659:
                result = 1634027333;
                break;
              case 50331660:
                result = 1634027332;
                break;
              case 50331661:
                result = 1634027346;
                break;
              case 50331662:
                result = 1634027606;
                break;
              case 50331663:
                result = 1634955894;
                break;
              case 50331664:
                result = 1634956146;
                break;
              case 50331665:
                result = 1634956148;
                break;
              case 50331666:
                result = 1634956144;
                break;
              case 50331667:
                result = 1634029142;
                break;
              case 50331668:
                result = 1634037872;
                break;
              default:
                switch((int)a1)
                {
                  case 67108864:
                  case 67108865:
                  case 67108866:
                  case 67108867:
                  case 67108868:
                  case 67108869:
                    return 0;
                  default:
                    goto LABEL_278;
                }
                return 0;
            }
            break;
        }
      }
    }
    else
    {
      switch((int)a1)
      {
        case 100663297:
          result = 1634030409;
          break;
        case 100663298:
          result = 1634026313;
          break;
        case 100663299:
          result = 1634027337;
          break;
        case 100663300:
          result = 1634029641;
          break;
        case 100663301:
          result = 1634030406;
          break;
        case 100663302:
          result = 1835625572;
          break;
        case 100663303:
          v7 = 29807;
          return v7 | 0x61650000u;
        case 100663304:
        case 100663306:
        case 100663310:
        case 100663315:
        case 100663322:
        case 100663324:
        case 100663326:
        case 100663327:
        case 100663328:
        case 100663334:
        case 100663340:
        case 100663341:
        case 100663342:
        case 100663345:
        case 100663346:
        case 100663347:
        case 100663353:
          return 0;
        case 100663305:
        case 100663309:
          result = 1835624804;
          break;
        case 100663307:
          result = 1634026317;
          break;
        case 100663308:
          return 1936020297;
        case 100663311:
        case 100663316:
          result = 1634026582;
          break;
        case 100663312:
          result = 1634026578;
          break;
        case 100663313:
          result = 1634026572;
          break;
        case 100663314:
          result = 1634027073;
          break;
        case 100663317:
          result = 1634026576;
          break;
        case 100663318:
          result = 1634028337;
          break;
        case 100663319:
          result = 1634028338;
          break;
        case 100663320:
          result = 1634952304;
          break;
        case 100663321:
          result = 1634952306;
          break;
        case 100663323:
          result = 1634955381;
          break;
        case 100663325:
          result = 1634031684;
          break;
        case 100663329:
        case 100663335:
          goto LABEL_278;
        case 100663330:
          result = 1634354517;
          break;
        case 100663331:
          v8 = 1064;
          goto LABEL_276;
        case 100663332:
          v8 = 1067;
          goto LABEL_276;
        case 100663333:
          v8 = 1056;
          goto LABEL_276;
        case 100663336:
          result = 1634365554;
          break;
        case 100663337:
          result = 1634366305;
          break;
        case 100663338:
        case 100663349:
          v5 = 28773;
          return v5 | 0x616A0000u;
        case 100663339:
          result = 1634028873;
          break;
        case 100663343:
          result = 1634353493;
          break;
        case 100663344:
          result = 1835103852;
          break;
        case 100663348:
          goto LABEL_69;
        case 100663350:
          goto LABEL_65;
        case 100663351:
          result = 1634366049;
          break;
        case 100663352:
          result = 1634361697;
          break;
        case 100663354:
          result = 1634358849;
          break;
        case 100663355:
          result = 1634362217;
          break;
        default:
          switch((int)a1)
          {
            case 117440513:
              result = 1634027588;
              break;
            case 117440514:
              return result;
            case 117440515:
              result = 1634027587;
              break;
            case 117440516:
              goto LABEL_68;
            case 117440517:
              result = 1634026830;
              break;
            case 117440518:
              result = 1634029134;
              break;
            case 117440519:
              result = 1634026322;
              break;
            case 117440520:
              result = 1634028888;
              break;
            case 117440521:
            case 117440522:
            case 117440523:
            case 117440524:
            case 117440525:
            case 117440526:
            case 117440527:
            case 117440532:
            case 117440534:
            case 117440539:
            case 117440547:
            case 117440548:
            case 117440549:
            case 117440550:
              return 0;
            case 117440528:
              result = 1634030148;
              break;
            case 117440529:
              result = 1634030165;
              break;
            case 117440530:
              result = 1634030160;
              break;
            case 117440531:
              result = 1634030163;
              break;
            case 117440533:
              result = 1634355312;
              break;
            case 117440535:
              v10 = 1634353509;
              goto LABEL_87;
            case 117440536:
              v2 = 1634353509;
              return (v2 - 32);
            case 117440537:
              result = 1634353484;
              break;
            case 117440538:
              result = 1634353491;
              break;
            case 117440540:
              result = 1634357330;
              break;
            case 117440541:
              result = 1634026319;
              break;
            case 117440542:
              result = 1634026312;
              break;
            case 117440543:
              result = 1634029889;
              break;
            case 117440544:
              result = 1634363509;
              break;
            case 117440545:
              result = 1634025807;
              break;
            case 117440546:
              result = 1634025800;
              break;
            default:
              switch((int)a1)
              {
                case 83886081:
                  result = 1634956658;
                  break;
                case 83886082:
                case 83886083:
                case 83886085:
                case 83886090:
                case 83886092:
                case 83886096:
                case 83886098:
                  return 0;
                case 83886084:
                  result = 1634955363;
                  break;
                case 83886086:
                  result = 1634953328;
                  break;
                case 83886087:
                case 83886089:
                  result = 1634955372;
                  break;
                case 83886088:
                  result = 1634954084;
                  break;
                case 83886091:
                  result = 1634954096;
                  break;
                case 83886093:
                  result = 1634951787;
                  break;
                case 83886094:
                  result = 1634951791;
                  break;
                case 83886095:
                  result = 1835624553;
                  break;
                case 83886097:
                  v6 = 1634036850;
                  return v6 | 1u;
                case 83886099:
                  result = 1634955891;
                  break;
                case 83886100:
                  v7 = 27762;
                  return v7 | 0x61650000u;
                default:
                  goto LABEL_278;
              }
              break;
          }
          break;
      }
    }
  }
  return result;
}

uint64_t TrackOrderForITDBTrackOrder(uint64_t result)
{
  switch((int)result)
  {
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 19:
      return result;
    case 3:
    case 4:
    case 18:
    case 24:
    case 29:
    case 30:
    case 31:
    case 34:
    case 37:
    case 40:
    case 41:
      goto LABEL_4;
    case 20:
      result = 21;
      break;
    case 21:
      result = 22;
      break;
    case 22:
      result = 23;
      break;
    case 23:
      result = 24;
      break;
    case 25:
      result = 26;
      break;
    case 26:
      result = 27;
      break;
    case 27:
      result = 28;
      break;
    case 28:
      result = 29;
      break;
    case 32:
      result = 40;
      break;
    case 33:
      result = 41;
      break;
    case 35:
      result = 43;
      break;
    case 36:
      result = 20;
      break;
    case 38:
      result = 44;
      break;
    case 39:
      result = 45;
      break;
    case 42:
      result = 49;
      break;
    case 43:
      result = 50;
      break;
    case 44:
      result = 51;
      break;
    case 45:
      result = 52;
      break;
    case 46:
      result = 53;
      break;
    default:
      if ((_DWORD)result == 123)
        result = 112;
      else
LABEL_4:
        result = 0;
      break;
  }
  return result;
}

uint64_t ITDBTrackOrderForTrackOrder(uint64_t result)
{
  switch((int)result)
  {
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 19:
      return result;
    case 3:
    case 4:
    case 18:
    case 25:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 42:
    case 46:
    case 47:
    case 48:
      goto LABEL_4;
    case 20:
      result = 36;
      break;
    case 21:
      result = 20;
      break;
    case 22:
      result = 21;
      break;
    case 23:
      result = 22;
      break;
    case 24:
      result = 23;
      break;
    case 26:
      result = 25;
      break;
    case 27:
      result = 26;
      break;
    case 28:
      result = 27;
      break;
    case 29:
      result = 28;
      break;
    case 40:
      result = 32;
      break;
    case 41:
      result = 33;
      break;
    case 43:
      result = 35;
      break;
    case 44:
      result = 38;
      break;
    case 45:
      result = 39;
      break;
    case 49:
      result = 42;
      break;
    case 50:
      result = 43;
      break;
    case 51:
      result = 44;
      break;
    case 52:
      result = 45;
      break;
    case 53:
      result = 46;
      break;
    default:
      if ((_DWORD)result == 112)
        result = 123;
      else
LABEL_4:
        result = 0;
      break;
  }
  return result;
}

uint64_t TrackOrderForDAAPSortType(int a1)
{
  if ((a1 - 1) > 0x4B)
    return 1;
  else
    return dword_1AC3D6AA4[a1 - 1];
}

uint64_t ITDBPlaylistLimitFromSmartPlaylistLimit(unsigned int a1)
{
  if (a1 < 5)
    return (a1 + 1);
  else
    return 0;
}

unint64_t SmartPlaylistLimitFromITDBPlaylistLimit(unsigned int a1)
{
  unint64_t v1;

  v1 = 0x40302010000uLL >> (8 * a1);
  if (a1 >= 6)
    LOBYTE(v1) = 0;
  return v1 & 7;
}

void MLParsedSmartInfoFromData(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unsigned int v7;
  NSObject *v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  if ((unint64_t)objc_msgSend(v3, "length") < 0x10)
  {
    v8 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = 138543362;
      v10 = v3;
      _os_log_impl(&dword_1AC149000, v8, OS_LOG_TYPE_ERROR, "Bogus smart playlist info: %{public}@", (uint8_t *)&v9, 0xCu);
    }

  }
  else
  {
    v4 = objc_msgSend(objc_retainAutorelease(v3), "bytes");
    *(_BYTE *)a2 = *(_BYTE *)v4 != 0;
    *(_BYTE *)(a2 + 1) = *(_BYTE *)(v4 + 1) != 0;
    *(_BYTE *)(a2 + 2) = *(_BYTE *)(v4 + 2) != 0;
    v5 = *(unsigned __int8 *)(v4 + 3);
    if (v5 >= 6)
      v6 = 0;
    else
      v6 = 0x40302010000uLL >> (8 * v5);
    *(_BYTE *)(a2 + 3) = v6;
    v7 = bswap32(*(_DWORD *)(v4 + 8));
    *(_DWORD *)(a2 + 4) = bswap32(*(_DWORD *)(v4 + 4));
    *(_DWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 12) = *(_BYTE *)(v4 + 12) != 0;
    *(_BYTE *)(a2 + 13) = *(_BYTE *)(v4 + 13) != 0;
    *(_BYTE *)(a2 + 14) = *(_BYTE *)(v4 + 14) != 0;
  }

}

const __CFString *NSPersistentStringFromMLMediaType(int a1, int8x8_t a2)
{
  uint8x8_t v3;
  const __CFString *result;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  void *v12;
  void *v13;

  a2.i32[0] = a1;
  v3 = (uint8x8_t)vcnt_s8(a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.i32[0] != 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *NSPersistentStringFromMLMediaType(MLMediaType)");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, CFSTR("MLTypes.m"), 69, CFSTR("This SPI may only be used with single types"));

  }
  if (a1 > 255)
  {
    v5 = CFSTR("MLMediaTypeMovie");
    v6 = CFSTR("MLMediaTypeVideoITunesU");
    v7 = CFSTR("MLMediaTypeHomeVideo");
    if (a1 != 0x2000)
      v7 = 0;
    if (a1 != 4096)
      v6 = v7;
    if (a1 != 2048)
      v5 = v6;
    v8 = CFSTR("MLMediaTypeVideoPodcast");
    v9 = CFSTR("MLMediaTypeTVShow");
    v10 = CFSTR("MLMediaTypeMusicVideo");
    if (a1 != 1024)
      v10 = 0;
    if (a1 != 512)
      v9 = v10;
    if (a1 != 256)
      v8 = v9;
    if (a1 <= 2047)
      return v8;
    else
      return v5;
  }
  else
  {
    result = 0;
    switch(a1)
    {
      case 1:
        result = CFSTR("MLMediaTypeMusicQuiz");
        break;
      case 2:
        result = CFSTR("MLMediaTypeAudioBook");
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        return result;
      case 4:
        result = CFSTR("MLMediaTypePodcast");
        break;
      case 8:
        result = CFSTR("MLMediaTypeSong");
        break;
      default:
        v11 = CFSTR("MLMediaTypeITunesUAudio");
        if (a1 != 32)
          v11 = 0;
        if (a1 == 16)
          result = CFSTR("MLMediaTypeVoiceMemo");
        else
          result = v11;
        break;
    }
  }
  return result;
}

id NSStringFromMLMediaType(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  if (!(_DWORD)a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%d => '%@')"), 0, CFSTR("MLMediaTypeUndefined"));
    goto LABEL_5;
  }
  if ((_DWORD)a1 == 0xFFFFFF)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%d => '%@')"), 0xFFFFFFLL, CFSTR("MLMediaTypeAny"));
LABEL_5:
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    return v2;
  }
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v4 = v3;
  if ((~(_DWORD)a1 & 0xFF00) == 0)
  {
    v5 = CFSTR("AnyVideo");
LABEL_21:
    objc_msgSend(v4, "addObject:", v5);
    goto LABEL_22;
  }
  if ((a1 & 0x100) != 0)
  {
    objc_msgSend(v3, "addObject:", CFSTR("VideoPodcast"));
    if ((a1 & 0x1000) == 0)
    {
LABEL_10:
      if ((a1 & 0x200) == 0)
        goto LABEL_11;
      goto LABEL_17;
    }
  }
  else if ((a1 & 0x1000) == 0)
  {
    goto LABEL_10;
  }
  objc_msgSend(v4, "addObject:", CFSTR("VideoITunesU"));
  if ((a1 & 0x200) == 0)
  {
LABEL_11:
    if ((a1 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_18;
  }
LABEL_17:
  objc_msgSend(v4, "addObject:", CFSTR("TVShow"));
  if ((a1 & 0x400) == 0)
  {
LABEL_12:
    if ((a1 & 0x800) == 0)
      goto LABEL_13;
LABEL_19:
    objc_msgSend(v4, "addObject:", CFSTR("Movie"));
    if ((a1 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_18:
  objc_msgSend(v4, "addObject:", CFSTR("MusicVideo"));
  if ((a1 & 0x800) != 0)
    goto LABEL_19;
LABEL_13:
  if ((a1 & 0x2000) != 0)
  {
LABEL_20:
    v5 = CFSTR("HomeVideo");
    goto LABEL_21;
  }
LABEL_22:
  if ((_BYTE)a1 == 0xFF)
  {
    v6 = CFSTR("AnyAudio");
LABEL_37:
    objc_msgSend(v4, "addObject:", v6);
    goto LABEL_38;
  }
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v4, "addObject:", CFSTR("MusicQuiz"));
    if ((a1 & 2) == 0)
    {
LABEL_26:
      if ((a1 & 4) == 0)
        goto LABEL_27;
      goto LABEL_33;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_26;
  }
  objc_msgSend(v4, "addObject:", CFSTR("AudioBook"));
  if ((a1 & 4) == 0)
  {
LABEL_27:
    if ((a1 & 8) == 0)
      goto LABEL_28;
    goto LABEL_34;
  }
LABEL_33:
  objc_msgSend(v4, "addObject:", CFSTR("Podcast"));
  if ((a1 & 8) == 0)
  {
LABEL_28:
    if ((a1 & 0x10) == 0)
      goto LABEL_29;
    goto LABEL_35;
  }
LABEL_34:
  objc_msgSend(v4, "addObject:", CFSTR("Song"));
  if ((a1 & 0x10) == 0)
  {
LABEL_29:
    if ((a1 & 0x20) == 0)
      goto LABEL_38;
    goto LABEL_36;
  }
LABEL_35:
  objc_msgSend(v4, "addObject:", CFSTR("VoiceMemo"));
  if ((a1 & 0x20) != 0)
  {
LABEL_36:
    v6 = CFSTR("ITunesUAudio");
    goto LABEL_37;
  }
LABEL_38:
  v7 = objc_msgSend(v4, "count");
  v8 = (void *)MEMORY[0x1E0CB3940];
  if (v7 == 1)
  {
    objc_msgSend(v4, "lastObject");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringWithFormat:", CFSTR("MLMediaType%@"), v9);
  }
  else
  {
    objc_msgSend(v4, "componentsJoinedByString:", CFSTR("|"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringWithFormat:", CFSTR("MLMediaType [%@]"), v9);
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(%d => '%@')"), a1, v10);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t MLMediaTypeByStandardizingMediaType(uint64_t result)
{
  if ((result & 0x100) != 0)
    return 256;
  if ((result & 0x1000) != 0)
    return 4096;
  if ((result & 0x800) == 0)
    return result;
  if ((result & 4) != 0)
    return 256;
  if ((result & 0x20) != 0)
    return 4096;
  if ((result & 0x200) != 0)
    return 512;
  if ((result & 0x2000) != 0)
    return 0x2000;
  if ((result & 0x400) != 0)
    return 1024;
  return result;
}

id MLEntityClassForType(unint64_t a1)
{
  void *v1;

  if (a1 <= 7 && ((0xBFu >> a1) & 1) != 0)
  {
    objc_opt_class();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }
  return v1;
}

const __CFString *ML3CreateSanitizedString(const __CFString *result)
{
  const __CFString *v1;
  unint64_t Length;
  uint64_t v3;
  const UniChar *v4;
  int HasPrefix;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int CharacterAtIndex;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    Length = CFStringGetLength(result);
    MEMORY[0x1E0C80A78]();
    v4 = (const UniChar *)((char *)v11 - ((v3 + 17) & 0xFFFFFFFFFFFFFFF0));
    HasPrefix = CFStringHasPrefix(v1, CFSTR("﻿"));
    v6 = HasPrefix != 0;
    if (Length <= v6)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      if (HasPrefix)
        v8 = 2;
      else
        v8 = 1;
      do
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(v1, v6);
        if ((CharacterAtIndex - 1) <= 0xFFFC)
          v4[v7++] = CharacterAtIndex;
        v6 = v8;
      }
      while (Length > v8++);
    }
    if (Length >= v7)
      v4[v7] = 0;
    return CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, v7);
  }
  return result;
}

id MLNSStringForBuiltInPreset(int a1, int a2)
{
  void *v3;
  void *v4;

  AllBuiltInPresetNames(a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectAtIndex:", (a1 - 100));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id AllBuiltInPresetNames(int a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  int v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;

  v1 = AllBuiltInPresetNames_names;
  v2 = (_QWORD *)&unk_1EEC7C000;
  if (!AllBuiltInPresetNames_names)
  {
    v41 = a1;
    v3 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("Acoustic"), CFSTR("BassBooster"), CFSTR("BassReducer"), CFSTR("Classical"), CFSTR("Dance"), CFSTR("Deep"), CFSTR("Electronic"), CFSTR("Flat"), CFSTR("HipHop"), CFSTR("Jazz"), CFSTR("Latin"), CFSTR("Loudness"), CFSTR("Lounge"), CFSTR("Piano"), CFSTR("Pop"), CFSTR("R&B"), CFSTR("Rock"),
           CFSTR("SmallSpeakers"),
           CFSTR("SpokenWord"),
           CFSTR("TrebleBooster"),
           CFSTR("TrebleReducer"),
           CFSTR("VocalBooster"),
           CFSTR("LateNightMode"),
           0);
    v4 = (void *)AllBuiltInPresetNames_names;
    AllBuiltInPresetNames_names = v3;

    v34 = objc_alloc(MEMORY[0x1E0C99D20]);
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "localizedStringForKey:value:table:", CFSTR("Acoustic"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "localizedStringForKey:value:table:", CFSTR("Bass Booster"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "localizedStringForKey:value:table:", CFSTR("Bass Reducer"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "localizedStringForKey:value:table:", CFSTR("Classical"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "localizedStringForKey:value:table:", CFSTR("Dance"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "localizedStringForKey:value:table:", CFSTR("Deep"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "localizedStringForKey:value:table:", CFSTR("Electronic"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "localizedStringForKey:value:table:", CFSTR("Flat"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "localizedStringForKey:value:table:", CFSTR("Hip Hop"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "localizedStringForKey:value:table:", CFSTR("Jazz"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "localizedStringForKey:value:table:", CFSTR("Latin"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "localizedStringForKey:value:table:", CFSTR("Loudness"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "localizedStringForKey:value:table:", CFSTR("Lounge"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "localizedStringForKey:value:table:", CFSTR("Piano"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "localizedStringForKey:value:table:", CFSTR("Pop"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "localizedStringForKey:value:table:", CFSTR("R&B"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "localizedStringForKey:value:table:", CFSTR("Rock"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "localizedStringForKey:value:table:", CFSTR("Small Speakers"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "localizedStringForKey:value:table:", CFSTR("Spoken Word"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "localizedStringForKey:value:table:", CFSTR("Treble Booster"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("Treble Reducer"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("Vocal Booster"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = &unk_1EEC7C000;
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("Late Night Mode"), &stru_1E5B66908, CFSTR("MLLocalizable"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v34, "initWithObjects:", v55, v56, v54, v53, v52, v51, v50, v49, v47, v48, v46, v45, v44, v43, v42, v20, v19,
            v17,
            v15,
            v5,
            v6,
            v8,
            v10,
            0);
    v12 = (void *)AllBuiltInPresetNames_localizedNames;
    AllBuiltInPresetNames_localizedNames = v11;

    a1 = v41;
    v1 = AllBuiltInPresetNames_names;
  }
  if (a1)
    v13 = (void *)v2[464];
  else
    v13 = (void *)v1;
  return v13;
}

id MLPresetNameForLocalizedPresetName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = a1;
  AllBuiltInPresetNames(1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "indexOfObject:", v1);

  v4 = v1;
  if (v3 != 0x7FFFFFFFFFFFFFFFLL)
  {
    AllBuiltInPresetNames(0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectAtIndex:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v4;
}

id MLLocalizedPresetNameForPresetName(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = a1;
  AllBuiltInPresetNames(0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "indexOfObject:", v1);

  v4 = v1;
  if (v3 != 0x7FFFFFFFFFFFFFFFLL)
  {
    AllBuiltInPresetNames(1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectAtIndex:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v4;
}

id MLAllLocalizedPresetNames()
{
  return AllBuiltInPresetNames(1);
}

void ML3MatchContainerImportItem::~ML3MatchContainerImportItem(ML3MatchContainerImportItem *this)
{
  ML3DAAPContainerImportItem::~ML3DAAPContainerImportItem(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3MatchContainerImportItem::isValid(ML3DAAPImportItem *this)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  result = ML3DAAPContainerImportItem::isValid(this);
  if ((_DWORD)result)
  {
    if (ML3DAAPImportItem::getIntegerValue(this, 184549408) == 1)
    {
      v3 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v4 = 134217984;
        v5 = 1;
        _os_log_impl(&dword_1AC149000, v3, OS_LOG_TYPE_DEFAULT, "ignoring container with cloud id %lld", (uint8_t *)&v4, 0xCu);
      }

      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL ML3MatchContainerImportItem::hasValue(ML3DAAPImportItem *this, uint64_t a2)
{
  int v2;
  _BOOL8 result;

  v2 = a2;
  result = ML3DAAPContainerImportItem::hasValue(this, a2);
  if (*((_BYTE *)this + 288)
    && *((_BYTE *)this + 289)
    && ((v2 - 184549380) > 0x34 || ((1 << (v2 - 4)) & 0x1000E010008B85) == 0)
    && ((v2 - 184549452) > 0xA || ((1 << (v2 - 76)) & 0x701) == 0))
  {
    return 0;
  }
  return result;
}

void ML3MatchContainerImportItem::getDescription(ML3MatchContainerImportItem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  std::string *v4;
  std::string::size_type size;
  _QWORD *v6;
  _QWORD *v7;
  std::string *v8;
  std::string::size_type v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string v15;
  _QWORD v16[2];
  std::string __p;
  void *v18;
  char v19;
  uint64_t v20;
  std::string v21;
  std::string v22;
  uint64_t (**v23)();
  std::string v24;

  (*(void (**)(uint64_t (***__return_ptr)(), ML3MatchContainerImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v23, this, 184549384);
  (*(void (**)(ML3MatchContainerImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 184549408);
  (*(void (**)(_QWORD *__return_ptr, ML3MatchContainerImportItem *, uint64_t))(*(_QWORD *)this + 24))(v16, this, 184549417);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v16[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v22 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3MatchContainerImportItem *, uint64_t))(*(_QWORD *)this + 24))(v16, this, 184549452);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v16[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v21 = __p;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"<ML3MatchContainerImportItem ", 29);
  *(_DWORD *)((char *)&v16[1] + *(_QWORD *)(v16[0] - 24)) = *(_DWORD *)((_BYTE *)&v16[1] + *(_QWORD *)(v16[0] - 24)) & 0xFFFFFFB5 | 8;
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" global_id=", 11);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v22;
  else
    v4 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    size = v22.__r_.__value_.__l.__size_;
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, size);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", cloud_universal_library_id=", 29);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v21;
  else
    v8 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    v9 = v21.__r_.__value_.__l.__size_;
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", cloud_id=", 11);
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 2;
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", name=", 7);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    v15 = v24;
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v15;
  else
    v13 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    v14 = v15.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (!*((_BYTE *)this + 17))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", isCompleteItem=false", 22);
  v15.__r_.__value_.__s.__data_[0] = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)&v15, 1);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete(v18);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF43C6FC](&v20);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v23 = off_1E5B4D010;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_1AC1F9550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  std::ostringstream::~ostringstream((uint64_t)&a15);
  if (*(char *)(v22 - 121) < 0)
    operator delete(*(void **)(v22 - 144));
  if (*(char *)(v22 - 89) < 0)
    operator delete(*(void **)(v22 - 112));
  *(_QWORD *)(v22 - 88) = off_1E5B4D010;
  if (*(char *)(v22 - 49) < 0)
    operator delete(*(void **)(v22 - 72));
  _Unwind_Resume(a1);
}

id ML3MatchContainerImportItem::getDeduplicationPredicates(ML3MatchContainerImportItem *this)
{
  void *v2;
  void *v3;
  void *v4;
  std::string::size_type size;
  char v6;
  void *v7;
  void *v8;
  uint64_t (**v10)();
  std::string __p;
  std::string v12;

  v2 = (void *)MEMORY[0x1E0C99DE8];
  ML3DAAPContainerImportItem::getDeduplicationPredicates(this);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "arrayWithArray:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  (*(void (**)(uint64_t (***__return_ptr)(), ML3MatchContainerImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v10, this, 184549417);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v10 = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v12 = __p;
  }
  size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v12.__r_.__value_.__l.__size_;
  if (size)
  {
    ML3CPPBridgeString((const UInt8 *)&v12, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("cloud_global_id"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v8);

    v6 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  }
  if (v6 < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1AC1F9750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void ML3MatchContainerImportItem::_createImportItemValue(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;

  *a4 = 0;
  a4[1] = 0;
  if (a2 == 218103812)
  {
    v6 = operator new();
    v7 = (_QWORD *)v6;
    v8 = *a3;
    v9 = (std::__shared_weak_count *)a3[1];
    v28 = *a3;
    v29 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    ML3DAAPTrackImportItem::ML3DAAPTrackImportItem(v6, v8, v9);
    *v7 = &off_1E5B4D378;
    *(_QWORD *)&v30 = v7;
    v12 = (_QWORD *)operator new();
    *v12 = &off_1E5B517A0;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v7;
    *((_QWORD *)&v30 + 1) = v12;
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a4, &v30);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v29;
    if (v29)
    {
      v17 = (unint64_t *)&v29->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_25:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v19 = a3[1];
    v26 = *a3;
    v27 = (std::__shared_weak_count *)v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    ML3DAAPContainerImportItem::_createImportItemValue(a1, a2, &v26, &v30);
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a4, &v30);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v16 = v27;
    if (v27)
    {
      v25 = (unint64_t *)&v27->__shared_owners_;
      do
        v18 = __ldaxr(v25);
      while (__stlxr(v18 - 1, v25));
      goto LABEL_25;
    }
  }
}

void sub_1AC1F9990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__shared_ptr_pointer<ML3MatchImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3MatchImportItem>,std::allocator<ML3MatchImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3MatchImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3MatchImportItem>,std::allocator<ML3MatchImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3MatchImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3MatchImportItem>,std::allocator<ML3MatchImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_18ML3MatchImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2))
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void ML3MatchImportItem::~ML3MatchImportItem(ML3MatchImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

BOOL ML3MatchImportItem::isValid(ML3MatchImportItem *this)
{
  return ((*(uint64_t (**)(ML3MatchImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777217) & 0xE08) != 0;
}

void ML3MatchImportItem::getStringValue(ML3DAAPImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::string __p;
  std::string __str;
  __int128 v23;
  ML3CPP::Element *v24;
  std::__shared_weak_count *v25;

  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = (std::string *)(a3 + 16);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  if ((_DWORD)a2 != 100663306)
  {
    ML3DAAPImportItem::getStringValue(this, a2, (uint64_t)&v20);
    *(_BYTE *)(a3 + 8) = BYTE8(v20);
    std::string::operator=(v5, &__p);
    *(_QWORD *)&v20 = off_1E5B4D010;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v12 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  memset(&__str, 0, sizeof(__str));
  ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v24, *((_QWORD *)this + 8), 0x6D61766Cu);
  if (v24 && ML3CPP::Element::integerValue(v24))
  {
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v23, *((_QWORD *)this + 8), 0x61655270u);
    if ((_QWORD)v23)
    {
      std::string::basic_string[abi:ne180100](&v20, *(void **)(v23 + 48), *(_QWORD *)(v23 + 64));
    }
    else
    {
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v20, *((_QWORD *)this + 8), 0x61655250u);
      v13 = v20;
      v20 = 0uLL;
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      v23 = v13;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (!(_QWORD)v23)
        goto LABEL_7;
      std::string::basic_string[abi:ne180100](&v20, *(void **)(v23 + 48), *(_QWORD *)(v23 + 64));
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
    __str.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0];
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v9 = v25;
  if (v25)
  {
    v10 = (unint64_t *)&v25->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::string::operator=(v5, &__str);
  *(_BYTE *)(a3 + 8) = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_21:
    operator delete(v12);
  }
}

void sub_1AC1F9E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v28 - 64);
  if (a23 < 0)
    operator delete(__p);
  *(_QWORD *)v25 = v27;
  if (*(char *)(v25 + 39) < 0)
    operator delete(*v26);
  _Unwind_Resume(a1);
}

unint64_t ML3MatchImportItem::getIntegerValue(ML3MatchImportItem *this, uint64_t a2)
{
  _BOOL8 v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  ML3CPP::Element *v7;
  std::__shared_weak_count *v8;

  if ((_DWORD)a2 == 100663345)
    return (*(uint64_t (**)(ML3MatchImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663338) == 3;
  if ((_DWORD)a2 != 100663347)
    return ML3DAAPTrackImportItem::getIntegerValue(this, a2);
  ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v7, *((_QWORD *)this + 8), 0x616A706Fu);
  if (v7)
    v2 = ML3CPP::Element::integerValue(v7) == 0;
  else
    v2 = 1;
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v2;
}

BOOL ML3MatchImportItem::hasValue(ML3DAAPImportItem *this, uint64_t a2)
{
  if ((_DWORD)a2 == 100663345)
    return 1;
  if ((a2 - 0x1000000) >> 25 > 4)
    return 0;
  return ML3DAAPImportItem::hasValue(this, a2);
}

uint64_t ML3MatchImportItem::getDescription(ML3MatchImportItem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD v8[11];
  char v9;
  uint64_t v10;
  char v11;

  (*(void (**)(ML3MatchImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663305);
  (*(void (**)(ML3MatchImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663297);
  (*(void (**)(ML3MatchImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663337);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<ML3MatchImportItem ", 20);
  *(_DWORD *)((char *)&v8[1] + *(_QWORD *)(v8[0] - 24)) = *(_DWORD *)((_BYTE *)&v8[1] + *(_QWORD *)(v8[0] - 24)) & 0xFFFFFFB5 | 8;
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" sagaId=", 8);
  *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 2;
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", storeId=", 10);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", subscriptionId=", 17);
  v6 = (_QWORD *)std::ostream::operator<<();
  v11 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v11, 1);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v10);
}

void sub_1AC1FA20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ML3MatchImportItem::getSourceIdentifiers@<X0>(ML3MatchImportItem *this@<X0>, BOOL *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  std::vector<long long>::vector(a3);
  *a2 = 0;
  result = (*(uint64_t (**)(ML3MatchImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663305);
  if (result)
    *(_QWORD *)(*a3 + 16) = result;
  return result;
}

void sub_1AC1FA27C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id ML3MatchImportItem::getDeduplicationPredicates(ML3MatchImportItem *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD v31[2];
  _QWORD v32[2];
  _QWORD v33[3];
  _QWORD v34[2];
  _QWORD v35[3];
  _QWORD v36[3];

  v36[2] = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 2);
  v3 = (*(uint64_t (**)(ML3MatchImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663305);
  if (v3)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_saga_id"), v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v4);

  }
  v5 = (*(uint64_t (**)(ML3MatchImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663308);
  if (v5)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.sync_id"), v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v36[0] = v6;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_saga_id"), 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v36[1] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v36, 2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v9);

  }
  v10 = (*(uint64_t (**)(ML3MatchImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663297);
  if (v10)
  {
    if ((*(uint64_t (**)(ML3MatchImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663314))
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.account_id"), (*(uint64_t (**)(ML3MatchImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663312));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v35[0] = v11;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"), v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v35[1] = v12;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_saga_id"), 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v35[2] = v13;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v35, 3);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v15);

    }
    else
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"), v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v34[0] = v11;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_saga_id"), 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v34[1] = v12;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v34, 2);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v14);
    }

    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.subscription_store_item_id"), v10);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v33[0] = v16;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"), 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v33[1] = v17;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_saga_id"), 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v33[2] = v18;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 3);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v20);

  }
  v21 = (*(uint64_t (**)(ML3MatchImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663337);
  if (v21)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.subscription_store_item_id"), v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v32[0] = v22;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_saga_id"), 0);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v32[1] = v23;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v32, 2);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v25);

    if (!v10)
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"), v21);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v31[0] = v26;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_saga_id"), 0);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v31[1] = v27;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v31, 2);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v29);

    }
  }
  return v2;
}

void sub_1AC1FA7AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<long long>::vector(_QWORD *a1)
{
  _OWORD *v2;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new(0x38uLL);
  a1[1] = (char *)v2 + 56;
  a1[2] = (char *)v2 + 56;
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *((_QWORD *)v2 + 6) = 0;
  *a1 = v2;
  return a1;
}

void std::vector<long long>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5B4B3A0, MEMORY[0x1E0DE42D0]);
}

void sub_1AC1FAA14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1AC1FAB10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1AF43C6FC](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int64_t v16;
  std::locale *v17;
  uint64_t v18;
  _BYTE v20[16];
  std::locale __b;
  char v22;

  MEMORY[0x1AF43C618](v20, a1);
  if (v20[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_23;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_23;
    }
    if (v16 >= 1)
    {
      std::string::basic_string[abi:ne180100](&__b, v16, (char)v9);
      v17 = v22 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v18 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(_QWORD *)v7 + 96))(v7, v17, v16);
      if (v22 < 0)
        operator delete(__b.__locale_);
      if (v18 != v16)
        goto LABEL_23;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_23:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1AF43C624](v20);
  return a1;
}

void sub_1AC1FACFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1AF43C624](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1AC1FACD8);
}

void sub_1AC1FAD5C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF43C6FC](a1 + 112);
  return a1;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t ML3ImportValue<std::string>::~ML3ImportValue(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E5B4D010;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void ML3ImportValue<std::string>::~ML3ImportValue(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E5B4D010;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1AF43C744);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void ML3DAAPContainerImportItem::~ML3DAAPContainerImportItem(ML3DAAPContainerImportItem *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5B4E778;
  v3 = (void **)((char *)this + 256);
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }

  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  ML3DAAPContainerImportItem::~ML3DAAPContainerImportItem(this);
  JUMPOUT(0x1AF43C744);
}

void std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void ML3MatchAlbumImportItem::~ML3MatchAlbumImportItem(id *this)
{
  ML3DAAPAlbumImportItem::~ML3DAAPAlbumImportItem(this);
  JUMPOUT(0x1AF43C744);
}

BOOL ML3MatchAlbumImportItem::isValid(ML3MatchAlbumImportItem *this)
{
  _BOOL8 v1;
  uint64_t (**v3)();
  std::string __p;
  std::string v5;

  (*(void (**)(uint64_t (***__return_ptr)(), ML3MatchAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v3, this, 285212697);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v3 = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v5 = __p;
  }
  if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return SHIBYTE(v5.__r_.__value_.__r.__words[2]) != 0;
  v1 = v5.__r_.__value_.__l.__size_ != 0;
  operator delete(v5.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1AC1FB218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ML3MatchAlbumImportItem::getStringValue(ML3MatchAlbumImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::string *v4;
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string __str;
  __int128 v9;

  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (std::string *)(a3 + 16);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v9 = 0uLL;
  if (a2 > 285212696)
  {
    switch(a2)
    {
      case 285212697:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x616A4169u);
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        if (__str.__r_.__value_.__r.__words[0])
          goto LABEL_19;
        break;
      case 285212699:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61736161u);
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        if (__str.__r_.__value_.__r.__words[0])
          goto LABEL_19;
        break;
      case 285212701:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61726964u);
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        if (__str.__r_.__value_.__r.__words[0])
          goto LABEL_19;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(a2)
    {
      case 285212673:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x6173616Cu);
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        if (__str.__r_.__value_.__r.__words[0])
          goto LABEL_19;
        break;
      case 285212674:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61737375u);
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        if (__str.__r_.__value_.__r.__words[0])
        {
LABEL_19:
          std::string::basic_string[abi:ne180100](&__str, *(void **)(__str.__r_.__value_.__r.__words[0] + 48), *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 64));
          std::string::operator=(v4, &__str);
          *(_BYTE *)(a3 + 8) = 1;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        break;
      case 285212682:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61737075u);
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        if (!__str.__r_.__value_.__r.__words[0])
          break;
        goto LABEL_19;
      default:
        return;
    }
  }
  if (size)
  {
    p_shared_owners = (unint64_t *)&size->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_1AC1FB4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  void **v17;
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  *(_QWORD *)v16 = v18;
  if (*(char *)(v16 + 39) < 0)
    operator delete(*v17);
  _Unwind_Resume(a1);
}

unint64_t ML3MatchAlbumImportItem::getIntegerValue(ML3MatchAlbumImportItem *this, int a2)
{
  unint64_t v2;
  std::__shared_weak_count *v3;
  int64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  ML3CPP::Element *v8;
  std::__shared_weak_count *v9;
  ML3CPP::Element *v10;
  std::__shared_weak_count *v11;

  v2 = 0;
  v10 = 0;
  v11 = 0;
  if (a2 > 285212692)
  {
    switch(a2)
    {
      case 285212693:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x616A6145u);
        break;
      case 285212695:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x61656C72u);
        v3 = v9;
        v10 = v8;
        v11 = v9;
        if (v8)
        {
          v4 = ML3CPP::Element::integerValue(v8);
          if (v4)
          {
            v2 = (uint64_t)((double)v4 + -978307200.0);
            goto LABEL_19;
          }
        }
LABEL_18:
        v2 = 0;
        goto LABEL_19;
      case 285212696:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x61654169u);
        break;
      default:
        return v2;
    }
  }
  else
  {
    switch(a2)
    {
      case 285212680:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x61656C73u);
        break;
      case 285212681:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x6173636Fu);
        break;
      case 285212683:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x61655355u);
        break;
      default:
        return v2;
    }
  }
  v3 = v9;
  v10 = v8;
  v11 = v9;
  if (!v8)
    goto LABEL_18;
  v2 = ML3CPP::Element::integerValue(v8);
LABEL_19:
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_1AC1FB6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL ML3MatchAlbumImportItem::hasValue(ML3MatchAlbumImportItem *this, int a2)
{
  int v2;

  v2 = a2 - 285212673;
  return (a2 - 285212673) <= 0x1A
      && ((0x5D00D83u >> v2) & 1) != 0
      && std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(*((_QWORD *)this + 8) + 96, dword_1AC3D6D68[v2]) != 0;
}

void ML3MatchAlbumImportItem::getDescription(ML3MatchAlbumImportItem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  std::string *v4;
  std::string::size_type size;
  _QWORD *v6;
  _QWORD *v7;
  std::string *v8;
  std::string::size_type v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  std::string::size_type v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string *v16;
  std::string::size_type v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v21[2];
  std::string __p;
  void *v23;
  char v24;
  uint64_t v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  char v30;

  (*(void (**)(_QWORD *__return_ptr, ML3MatchAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v21, this, 285212673);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v21[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v29 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3MatchAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v21, this, 285212699);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v21[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v28 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3MatchAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v21, this, 285212701);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v21[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v27 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3MatchAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v21, this, 285212697);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v21[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v26 = __p;
  }
  (*(void (**)(ML3MatchAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212696);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"<ML3MatchAlbumImportItem ", 25);
  *(_DWORD *)((char *)&v21[1] + *(_QWORD *)(v21[0] - 24)) = *(_DWORD *)((_BYTE *)&v21[1] + *(_QWORD *)(v21[0] - 24)) & 0xFFFFFFB5 | 8;
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" name=", 6);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v29;
  else
    v4 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    size = v29.__r_.__value_.__l.__size_;
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, size);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" cloudID=", 9);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v26;
  else
    v8 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  else
    v9 = v26.__r_.__value_.__l.__size_;
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" artistName=", 12);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v28;
  else
    v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  else
    v13 = v28.__r_.__value_.__l.__size_;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" artistCloudID=", 15);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v27;
  else
    v16 = (std::string *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  else
    v17 = v27.__r_.__value_.__l.__size_;
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" storeId=", 9);
  *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 2;
  v20 = (_QWORD *)std::ostream::operator<<();
  v30 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v30, 1);
  std::stringbuf::str();
  v21[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete(v23);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF43C6FC](&v25);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1AC1FBB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 - 121) < 0)
    operator delete(*(void **)(v17 - 144));
  if (*(char *)(v17 - 89) < 0)
    operator delete(*(void **)(v17 - 112));
  if (*(char *)(v17 - 57) < 0)
    operator delete(*(void **)(v17 - 80));
  _Unwind_Resume(exception_object);
}

id ML3MatchAlbumImportItem::getDeduplicationPredicates(ML3MatchAlbumImportItem *this)
{
  uint64_t v2;
  uint64_t v3;
  std::string::size_type size;
  void *v5;
  void *v6;
  void *v7;
  std::string::size_type v8;
  void *v9;
  void *v10;
  std::string::size_type v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  std::string *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  void *v42;
  void *v43;
  id v44;
  std::string v45;
  std::string v46;
  std::string v47;
  _QWORD v48[2];
  std::string __p;
  std::string v50;
  _QWORD v51[3];
  _QWORD v52[4];
  _QWORD v53[5];
  _QWORD v54[7];

  v54[5] = *MEMORY[0x1E0C80C00];
  v44 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v2 = (*(uint64_t (**)(ML3MatchAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212696);
  v3 = (*(uint64_t (**)(ML3MatchAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212683);
  (*(void (**)(_QWORD *__return_ptr, ML3MatchAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v48, this, 285212673);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v50, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v48[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v50 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3MatchAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v48, this, 285212699);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v48[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v47 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3MatchAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v48, this, 285212682);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v46, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v48[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v46 = __p;
  }
  size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v50.__r_.__value_.__l.__size_;
  if (size)
  {
    v5 = (void *)*((_QWORD *)this + 10);
    ML3CPPBridgeString((const UInt8 *)&v50, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "groupingKeyForString:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }
  v8 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = v47.__r_.__value_.__l.__size_;
  if (v8)
  {
    v9 = (void *)*((_QWORD *)this + 10);
    ML3CPPBridgeString((const UInt8 *)&v47, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "groupingKeyForString:", v10);
    v42 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v42 = 0;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3MatchAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v48, this, 285212697);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v48[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v45 = __p;
  }
  v11 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = v45.__r_.__value_.__l.__size_;
  if (v11)
  {
    ML3CPPBridgeString((const UInt8 *)&v45, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("cloud_library_id"), v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "addObject:", v13);

  }
  if (v2)
  {
    if (objc_msgSend(v7, "length") && objc_msgSend(v42, "length"))
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_id"), v2);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v54[0] = v14;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("cloud_library_id"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v54[1] = v15;
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("album_artist.grouping_key"), v42);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v54[2] = v16;
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v7);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v54[3] = v17;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), v3);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v54[4] = v18;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v54, 5);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v44, "addObject:", v20);
    }
    else
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_id"), v2, v42);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v53[0] = v21;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("cloud_library_id"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v53[1] = v22;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("album_artist.grouping_key"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v53[2] = v23;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("grouping_key"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v53[3] = v24;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), v3);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v53[4] = v25;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v53, 5);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v26);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v44, "addObject:", v20);
    }

  }
  if (objc_msgSend(v7, "length", v42) && objc_msgSend(v43, "length"))
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("album_artist.grouping_key"), v43);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v52[0] = v27;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v7);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v52[1] = v28;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), v3);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v52[2] = v29;
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("cloud_library_id"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v52[3] = v30;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v52, 4);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v44, "addObject:", v32);
  }
  if (objc_msgSend(v7, "length"))
  {
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v46.__r_.__value_.__l.__size_)
        goto LABEL_47;
      v33 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((_BYTE *)&v46.__r_.__value_.__s + 23))
        goto LABEL_47;
      v33 = &v46;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("feed_url"), v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v51[0] = v35;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v7);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v51[1] = v36;
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("cloud_library_id"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v51[2] = v37;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v51, 3);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v38);
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v44, "addObject:", v39);
  }
LABEL_47:
  v40 = v44;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);

  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);

  return v40;
}

void sub_1AC1FC488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  void *v45;

  if (a16 < 0)
    operator delete(__p);

  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  if (a44 < 0)
    operator delete(a39);

  _Unwind_Resume(a1);
}

void ML3DAAPAlbumImportItem::~ML3DAAPAlbumImportItem(id *this)
{

  *this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

{
  ML3DAAPAlbumImportItem::~ML3DAAPAlbumImportItem(this);
  JUMPOUT(0x1AF43C744);
}

void ML3MatchArtistImportItem::~ML3MatchArtistImportItem(id *this)
{
  ML3DAAPArtistImportItem::~ML3DAAPArtistImportItem(this);
  JUMPOUT(0x1AF43C744);
}

BOOL ML3MatchArtistImportItem::isValid(ML3MatchArtistImportItem *this)
{
  _BOOL8 v1;
  uint64_t (**v3)();
  std::string __p;
  std::string v5;

  (*(void (**)(uint64_t (***__return_ptr)(), ML3MatchArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v3, this, 301989899);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v3 = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v5 = __p;
  }
  if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return SHIBYTE(v5.__r_.__value_.__r.__words[2]) != 0;
  v1 = v5.__r_.__value_.__l.__size_ != 0;
  operator delete(v5.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1AC1FC83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ML3MatchArtistImportItem::getStringValue(ML3MatchArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::string *v4;
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string __str;
  __int128 v9;

  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (std::string *)(a3 + 16);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v9 = 0uLL;
  if (a2 == 301989899)
  {
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61726964u);
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    if (!__str.__r_.__value_.__r.__words[0])
      goto LABEL_11;
    goto LABEL_9;
  }
  if (a2 == 301989890)
  {
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61737361u);
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    if (!__str.__r_.__value_.__r.__words[0])
      goto LABEL_11;
LABEL_9:
    std::string::basic_string[abi:ne180100](&__str, *(void **)(__str.__r_.__value_.__r.__words[0] + 48), *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 64));
    std::string::operator=(v4, &__str);
    *(_BYTE *)(a3 + 8) = 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_11;
  }
  if (a2 != 301989889)
    return;
  ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61736172u);
  size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  if (__str.__r_.__value_.__r.__words[0])
    goto LABEL_9;
LABEL_11:
  if (size)
  {
    p_shared_owners = (unint64_t *)&size->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_1AC1FC9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  void **v17;
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  *(_QWORD *)v16 = v18;
  if (*(char *)(v16 + 39) < 0)
    operator delete(*v17);
  _Unwind_Resume(a1);
}

unint64_t ML3MatchArtistImportItem::getIntegerValue(ML3MatchArtistImportItem *this, int a2)
{
  unint64_t v2;
  std::__shared_weak_count *v3;
  int64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  ML3CPP::Element *v8;
  std::__shared_weak_count *v9;
  ML3CPP::Element *v10;
  std::__shared_weak_count *v11;

  v2 = 0;
  v10 = 0;
  v11 = 0;
  if (a2 > 301989902)
  {
    if (a2 != 301989903)
    {
      if (a2 != 301989904)
        return v2;
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x61656C72u);
      v3 = v9;
      v10 = v8;
      v11 = v9;
      if (v8)
      {
        v4 = ML3CPP::Element::integerValue(v8);
        if (v4)
        {
          v2 = (uint64_t)((double)v4 + -978307200.0);
          if (!v3)
            return v2;
          goto LABEL_17;
        }
      }
LABEL_16:
      v2 = 0;
      if (!v3)
        return v2;
      goto LABEL_17;
    }
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x61656C73u);
  }
  else if (a2 == 301989893)
  {
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x61654169u);
  }
  else
  {
    if (a2 != 301989901)
      return v2;
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x616A4165u);
  }
  v3 = v9;
  v10 = v8;
  v11 = v9;
  if (!v8)
    goto LABEL_16;
  v2 = ML3CPP::Element::integerValue(v8);
  if (!v3)
    return v2;
LABEL_17:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v2;
}

void sub_1AC1FCB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL ML3MatchArtistImportItem::hasValue(ML3MatchArtistImportItem *this, int a2)
{
  int v2;

  v2 = a2 - 301989889;
  return (a2 - 301989889) <= 0xF
      && ((0xD413u >> v2) & 1) != 0
      && std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(*((_QWORD *)this + 8) + 96, dword_1AC3D6DD4[v2]) != 0;
}

uint64_t ML3MatchArtistImportItem::getDescription(ML3MatchArtistImportItem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  std::string *v4;
  std::string::size_type size;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::string *v9;
  std::string::size_type v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string v19;
  std::string v20;
  _QWORD v21[2];
  std::string __p;
  std::string v23;
  _QWORD v24[11];
  char v25;
  uint64_t v26;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
  (*(void (**)(_QWORD *__return_ptr, ML3MatchArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v21, this, 301989889);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v21[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v23 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3MatchArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v21, this, 301989890);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v21[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v20 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3MatchArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v21, this, 301989899);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v21[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = __p;
  }
  (*(void (**)(ML3MatchArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 301989893);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"<ML3MatchArtistImportItem ", 26);
  *(_DWORD *)((char *)&v24[1] + *(_QWORD *)(v24[0] - 24)) = *(_DWORD *)((_BYTE *)&v24[1] + *(_QWORD *)(v24[0] - 24)) & 0xFFFFFFB5 | 8;
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" name=", 6);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v23;
  else
    v4 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" artistType=", 12);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" sortName=", 10);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v20;
  else
    v9 = (std::string *)v20.__r_.__value_.__r.__words[0];
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  else
    v10 = v20.__r_.__value_.__l.__size_;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" cloudLibraryID=", 16);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v19;
  else
    v13 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    v14 = v19.__r_.__value_.__l.__size_;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" storeID=", 9);
  *(_DWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 8) & 0xFFFFFFB5 | 2;
  v17 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v21[0]) = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v21, 1);
  std::stringbuf::str();
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v24[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v24[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v25 < 0)
    operator delete((void *)v24[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v26);
}

void sub_1AC1FCF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a29 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a35 < 0)
    operator delete(a30);
  std::ostringstream::~ostringstream((uint64_t)&a36);
  _Unwind_Resume(a1);
}

id ML3MatchArtistImportItem::getDeduplicationPredicates(ML3MatchArtistImportItem *this)
{
  id v2;
  std::string::size_type size;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  std::string v20;
  _QWORD v21[2];
  std::string __p;
  std::string v23;
  _QWORD v24[2];
  _QWORD v25[3];
  _QWORD v26[5];

  v26[3] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  (*(void (**)(_QWORD *__return_ptr, ML3MatchArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v21, this, 301989899);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v21[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v23 = __p;
  }
  size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v23.__r_.__value_.__l.__size_;
  if (size)
  {
    ML3CPPBridgeString((const UInt8 *)&v23, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("cloud_universal_library_id"), v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v5);

  }
  v6 = (*(uint64_t (**)(ML3MatchArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 301989893);
  (*(void (**)(_QWORD *__return_ptr, ML3MatchArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v21, this, 301989889);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v21[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v20 = __p;
  }
  v7 = (void *)*((_QWORD *)this + 11);
  ML3CPPBridgeString((const UInt8 *)&v20, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "groupingKeyForString:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_id"), v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      v26[0] = v10;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", CFSTR("cloud_universal_library_id"), &stru_1E5B66908, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v26[1] = v11;
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v9);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v26[2] = v12;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 3);
    }
    else
    {
      v25[0] = v10;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:", CFSTR("cloud_universal_library_id"), &stru_1E5B66908, 1, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v25[1] = v11;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("grouping_key"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v25[2] = v12;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 3);
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "addObject:", v14);
  }
  if (objc_msgSend(v9, "length", v20.__r_.__value_.__r.__words[0], v20.__r_.__value_.__l.__size_, v20.__r_.__value_.__r.__words[2], v21[0]))
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v9);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v24[0] = v15;
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", CFSTR("cloud_universal_library_id"), &stru_1E5B66908, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v24[1] = v16;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v24, 2);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "addObject:", v18);
  }

  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v2;
}

void sub_1AC1FD48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  v31 = v30;

  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);

  _Unwind_Resume(a1);
}

void ML3MatchArtistImportItem::getSortStringValue(ML3MatchArtistImportItem *this@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  std::string *v6;
  uint64_t v7;
  uint64_t (**v8)();
  char v9;
  std::string __p;

  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = (std::string *)(a3 + 16);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v7 = (*(uint64_t (**)(ML3MatchArtistImportItem *))(*(_QWORD *)this + 192))(this);
  if ((_DWORD)v7)
  {
    if (a2)
      ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v8, (uint64_t)this, v7);
    else
      (*(void (**)(uint64_t (***__return_ptr)(), ML3MatchArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v8, this, v7);
    *(_BYTE *)(a3 + 8) = v9;
    std::string::operator=(v6, &__p);
    v8 = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1AC1FD6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void **v18;
  uint64_t v19;

  if (a17 < 0)
    operator delete(__p);
  *(_QWORD *)v17 = v19;
  if (*(char *)(v17 + 39) < 0)
    operator delete(*v18);
  _Unwind_Resume(exception_object);
}

void ML3MatchArtistImportItem::getEffectiveAlbumArtist(ML3MatchArtistImportItem *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  std::string::size_type size;
  std::string::value_type v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v8, (uint64_t)this, 301989889);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    *(_QWORD *)&v8 = off_1E5B4D010;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = v9;
  }
  size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v10.__r_.__value_.__l.__size_;
  if (size && (a2 & 1) != 0)
  {
    ML3CPPSanitizeString((std::string *)&v8, (unint64_t)&v10);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    v10.__r_.__value_.__r.__words[2] = v9.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v6 = v9.__r_.__value_.__s.__data_[7];
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v7 = (std::string *)(a3 + 16);
  if (v6 < 0)
  {
    std::string::__init_copy_ctor_external(v7, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)&v10.__r_.__value_.__l + 2);
  }
}

void sub_1AC1FD848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ML3MatchArtistImportItem::getEffectiveSortAlbumArtist(ML3MatchArtistImportItem *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  std::string::size_type size;
  std::string::value_type v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v8, (uint64_t)this, 301989890);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    *(_QWORD *)&v8 = off_1E5B4D010;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = v9;
  }
  size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v10.__r_.__value_.__l.__size_;
  if (size && (a2 & 1) != 0)
  {
    ML3CPPSanitizeString((std::string *)&v8, (unint64_t)&v10);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    v10.__r_.__value_.__r.__words[2] = v9.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v6 = v9.__r_.__value_.__s.__data_[7];
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v7 = (std::string *)(a3 + 16);
  if (v6 < 0)
  {
    std::string::__init_copy_ctor_external(v7, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)&v10.__r_.__value_.__l + 2);
  }
}

void sub_1AC1FD99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ML3DAAPArtistImportItem::~ML3DAAPArtistImportItem(id *this)
{

  *this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

{
  ML3DAAPArtistImportItem::~ML3DAAPArtistImportItem(this);
  JUMPOUT(0x1AF43C744);
}

void ML3MatchDeleteArtistImportItem::~ML3MatchDeleteArtistImportItem(void **this)
{
  *this = off_1E5B4F858;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

{
  *this = off_1E5B4F858;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
  JUMPOUT(0x1AF43C744);
}

BOOL ML3MatchDeleteArtistImportItem::isValid(ML3MatchDeleteArtistImportItem *this)
{
  uint64_t v1;

  if (*((char *)this + 103) < 0)
    v1 = *((_QWORD *)this + 11);
  else
    v1 = *((unsigned __int8 *)this + 103);
  return v1 != 0;
}

uint64_t ML3MatchDeleteArtistImportItem::getDescription(ML3MatchDeleteArtistImportItem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v12[11];
  char v13;
  uint64_t v14;
  char v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"<ML3MatchDeleteArtistImportItem ", 32);
  *(_DWORD *)((char *)&v12[1] + *(_QWORD *)(v12[0] - 24)) = *(_DWORD *)((_BYTE *)&v12[1] + *(_QWORD *)(v12[0] - 24)) & 0xFFFFFFB5 | 8;
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" cloudId=", 9);
  v6 = *((_QWORD *)this + 10);
  v5 = (char *)this + 80;
  v4 = v6;
  v7 = v5[23];
  if (v7 >= 0)
    v8 = (uint64_t)v5;
  else
    v8 = v4;
  if (v7 >= 0)
    v9 = v5[23];
  else
    v9 = *((_QWORD *)v5 + 1);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v8, v9);
  v15 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v15, 1);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v14);
}

void sub_1AC1FDC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id ML3MatchDeleteArtistImportItem::getDeduplicationPredicates(const UInt8 *this)
{
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  ML3CPPBridgeString(this + 80, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("cloud_universal_library_id"), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1AC1FDCF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3MatchDeleteAlbumImportItem::~ML3MatchDeleteAlbumImportItem(void **this)
{
  *this = off_1E5B4F668;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

{
  *this = off_1E5B4F668;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
  JUMPOUT(0x1AF43C744);
}

BOOL ML3MatchDeleteAlbumImportItem::isValid(ML3MatchDeleteAlbumImportItem *this)
{
  uint64_t v1;

  if (*((char *)this + 103) < 0)
    v1 = *((_QWORD *)this + 11);
  else
    v1 = *((unsigned __int8 *)this + 103);
  return v1 != 0;
}

uint64_t ML3MatchDeleteAlbumImportItem::getDescription(ML3MatchDeleteAlbumImportItem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v12[11];
  char v13;
  uint64_t v14;
  char v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"<ML3MatchDeleteAlbumImportItem ", 31);
  *(_DWORD *)((char *)&v12[1] + *(_QWORD *)(v12[0] - 24)) = *(_DWORD *)((_BYTE *)&v12[1] + *(_QWORD *)(v12[0] - 24)) & 0xFFFFFFB5 | 8;
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" cloudId=", 9);
  v6 = *((_QWORD *)this + 10);
  v5 = (char *)this + 80;
  v4 = v6;
  v7 = v5[23];
  if (v7 >= 0)
    v8 = (uint64_t)v5;
  else
    v8 = v4;
  if (v7 >= 0)
    v9 = v5[23];
  else
    v9 = *((_QWORD *)v5 + 1);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v8, v9);
  v15 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v15, 1);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v14);
}

void sub_1AC1FDF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id ML3MatchDeleteAlbumImportItem::getDeduplicationPredicates(const UInt8 *this)
{
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  ML3CPPBridgeString(this + 80, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("cloud_library_id"), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1AC1FDFE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 61)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1AC1FE07C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::unordered_set<std::string>>::__init_with_size[abi:ne180100]<std::unordered_set<std::string>*,std::unordered_set<std::string>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >= 0x666666666666667)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = result + 40 * v8;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = std::unordered_set<std::string>::unordered_set(v7 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v7 += v9;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1AC1FE14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1AC1FE1E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v8;
  v16 = (std::string *)(v15 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v15[4] = *(_QWORD *)(a3 + 16);
  }
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v15 = *v24;
LABEL_41:
    *v24 = v15;
    goto LABEL_42;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v25 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1AC1FE42C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v47 + v2 + v46 + v44;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v56 + v45 + v48;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v78 + v69 + v67 + v68;
        v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

uint64_t MIPTVShowReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  MIPArtist *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(MIPArtist);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && (MIPArtistReadFrom(v17, a2) & 1) != 0)
          goto LABEL_47;
        goto LABEL_59;
      case 2u:
        v17 = objc_alloc_init(MIPSeries);
        objc_storeStrong((id *)(a1 + 56), v17);
        if (!PBReaderPlaceMark() || (MIPSeriesReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_59;
        goto LABEL_47;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 68) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_51:
        v33 = 48;
        goto LABEL_56;
      case 4u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 16;
        goto LABEL_44;
      case 5u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 24;
        goto LABEL_44;
      case 6u:
        v27 = 0;
        v28 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 68) |= 2u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v21 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_55;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_55:
        v33 = 64;
LABEL_56:
        *(_DWORD *)(a1 + v33) = v21;
        goto LABEL_57;
      case 7u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 40;
LABEL_44:
        v32 = *(void **)(a1 + v26);
        *(_QWORD *)(a1 + v26) = v25;

        goto LABEL_57;
      case 8u:
        v17 = objc_alloc_init(MIPGenre);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && (MIPGenreReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_47:
          PBReaderRecallMark();

LABEL_57:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_59:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
    }
  }
}

void ML3ExceptionUnknownException(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("ML3DatabaseConnectionRaiseUnknownException"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionUnknownException_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("UnknownException"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("UnknownException"), v9, v16, v17, v18, v19);

}

void ML3ExceptionNilPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Tried to open a database without setting a path to a database file first."), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionNilPath_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("NilPath"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("NilPath"), v9, v16, v17, v18, v19);

}

void ML3DatabaseConnectionCheckDatabasePathAndRaiseIfNecessary(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v16 = a1;
  if (!v16)
    ML3DatabaseConnectionRaiseNilDatabasePath();
  MLMobileUserHomeDirectory();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("Media"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  ML3DatabaseConnectionCheckPathMediaContainer(v2);
  objc_msgSend(MEMORY[0x1E0CB3940], "pathWithComponents:", &unk_1E5BA89B8);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v16, "rangeOfString:", v3);
  v12 = v4;
  if (v11 == 0x7FFFFFFFFFFFFFFFLL)
    ML3ExceptionUnexpectedPath((uint64_t)v16, v4, v5, v6, v7, v8, v9, v10, (uint64_t)v16);
  objc_msgSend(v16, "stringByReplacingCharactersInRange:withString:", v11, v12, &stru_1E5B66908);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (MSVDeviceSupportsMultipleLibraries())
    ML3DatabaseConnectionCheckPathUserHashContainer(v13);
  objc_msgSend(v13, "stringByAppendingPathComponent:", CFSTR("iTunes_Control"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  ML3DatabaseConnectionCheckPathiTunesControl(v14);
  objc_msgSend(v14, "stringByAppendingPathComponent:", CFSTR("iTunes"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  ML3DatabaseConnectionCheckPathiTunesContainer(v15);
  ML3DatabaseConnectionCheckPathDatabase(v16);

}

void ML3DatabaseConnectionCheckPathMediaContainer(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "fileExistsAtPath:", v1);
  if ((_DWORD)v3)
  {
    v32 = 0;
    objc_msgSend(v2, "attributesOfItemAtPath:error:", v1, &v32);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v32;
    v20 = v12;
    if (v12)
      ML3RaiseExceptionWithError(v12);
    if (!v11)
      ML3ExceptionMediaContainerNilAttributes((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, (uint64_t)v1);
    v21 = getuid();
    objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2A90]);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "unsignedIntegerValue");

    if (v23 != v21)
    {
      if (v23)
        ML3ExceptionMediaContainerOwnerMismatch(v24, v25, v26, v27, v28, v29, v30, v31, v21);
      else
        ML3ExceptionMediaContainerOwnerIsRoot(v24, v25, v26, v27, v28, v29, v30, v31, (uint64_t)v1);
    }

  }
  else
  {
    ML3ExceptionMediaContainerDoesNotExist(v3, v4, v5, v6, v7, v8, v9, v10, (uint64_t)v1);
  }

}

void ML3ExceptionUnexpectedPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Encountered unexpected path: %@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionUnexpectedPath_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("UnexpectedPath"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("UnexpectedPath"), v9, v16, v17, v18, v19);

}

void ML3DatabaseConnectionCheckPathUserHashContainer(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "fileExistsAtPath:", v1);
  if ((_DWORD)v3)
  {
    v32 = 0;
    objc_msgSend(v2, "attributesOfItemAtPath:error:", v1, &v32);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v32;
    v20 = v12;
    if (v12)
      ML3RaiseExceptionWithError(v12);
    if (!v11)
      ML3ExceptionUserHashContainerNilAttributes((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, (uint64_t)v1);
    v21 = getuid();
    objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2A90]);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "unsignedIntegerValue");

    if (v23 != v21)
    {
      if (v23)
        ML3ExceptionUserHashContainerOwnerMismatch(v24, v25, v26, v27, v28, v29, v30, v31, v21);
      else
        ML3ExceptionUserHashContainerOwnerIsRoot(v24, v25, v26, v27, v28, v29, v30, v31, (uint64_t)v1);
    }

  }
  else
  {
    ML3ExceptionUserHashContainerDoesNotExist(v3, v4, v5, v6, v7, v8, v9, v10, (uint64_t)v1);
  }

}

void ML3DatabaseConnectionCheckPathiTunesControl(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "fileExistsAtPath:", v1);
  if ((_DWORD)v3)
  {
    v32 = 0;
    objc_msgSend(v2, "attributesOfItemAtPath:error:", v1, &v32);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v32;
    v20 = v12;
    if (v12)
      ML3RaiseExceptionWithError(v12);
    if (!v11)
      ML3ExceptioniTunesControlNilAttributes((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, (uint64_t)v1);
    v21 = getuid();
    objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2A90]);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "unsignedIntegerValue");

    if (v23 != v21)
    {
      if (v23)
        ML3ExceptioniTunesControlOwnerMismatch(v24, v25, v26, v27, v28, v29, v30, v31, v21);
      else
        ML3ExceptioniTunesControlOwnerIsRoot(v24, v25, v26, v27, v28, v29, v30, v31, (uint64_t)v1);
    }

  }
  else
  {
    ML3ExceptioniTunesControlDoesNotExist(v3, v4, v5, v6, v7, v8, v9, v10, (uint64_t)v1);
  }

}

void ML3DatabaseConnectionCheckPathiTunesContainer(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "fileExistsAtPath:", v1);
  if ((_DWORD)v3)
  {
    v32 = 0;
    objc_msgSend(v2, "attributesOfItemAtPath:error:", v1, &v32);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v32;
    v20 = v12;
    if (v12)
      ML3RaiseExceptionWithError(v12);
    if (!v11)
      ML3ExceptioniTunesContainerNilAttributes((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, (uint64_t)v1);
    v21 = getuid();
    objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2A90]);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "unsignedIntegerValue");

    if (v23 != v21)
    {
      if (v23)
        ML3ExceptioniTunesContainerOwnerMismatch(v24, v25, v26, v27, v28, v29, v30, v31, v21);
      else
        ML3ExceptioniTunesContainerOwnerIsRoot(v24, v25, v26, v27, v28, v29, v30, v31, (uint64_t)v1);
    }

  }
  else
  {
    ML3ExceptioniTunesContainerDoesNotExist(v3, v4, v5, v6, v7, v8, v9, v10, (uint64_t)v1);
  }

}

void ML3DatabaseConnectionCheckPathDatabase(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "fileExistsAtPath:", v1);
  if ((_DWORD)v3)
  {
    v32 = 0;
    objc_msgSend(v2, "attributesOfItemAtPath:error:", v1, &v32);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v32;
    v20 = v12;
    if (v12)
      ML3RaiseExceptionWithError(v12);
    if (!v11)
      ML3ExceptionDatabaseNilAttributes((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, (uint64_t)v1);
    v21 = getuid();
    objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2A90]);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend(v22, "unsignedIntegerValue");

    if (v23 != v21)
    {
      if (v23)
        ML3ExceptionDatabaseOwnerMismatch(v24, v25, v26, v27, v28, v29, v30, v31, v21);
      else
        ML3ExceptionDatabaseOwnerIsRoot(v24, v25, v26, v27, v28, v29, v30, v31, (uint64_t)v1);
    }

  }
  else
  {
    ML3ExceptionDatabaseDoesNotExist(v3, v4, v5, v6, v7, v8, v9, v10, (uint64_t)v1);
  }

}

void ML3RaiseExceptionWithError(void *a1)
{
  void *v1;
  int v2;
  void *v3;
  uint64_t v4;
  id v5;

  v5 = a1;
  objc_msgSend(v5, "domain");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isEqual:", *MEMORY[0x1E0CB28A8]);

  v3 = v5;
  if (v2)
  {
    v4 = objc_msgSend(v5, "code");
    if (v4 > 511)
    {
      switch(v4)
      {
        case 512:
          ML3ExceptionNSFileWriteUnknownError(v5);
          break;
        case 513:
          ML3ExceptionNSFileWriteNoPermissionError(v5);
          break;
        case 514:
          ML3ExceptionNSFileWriteInvalidFileNameError(v5);
          break;
        case 515:
          goto LABEL_17;
        case 516:
          ML3ExceptionNSFileWriteFileExistsError(v5);
          break;
        case 517:
          ML3ExceptionNSFileWriteInapplicableStringEncodingError(v5);
          break;
        case 518:
          ML3ExceptionNSFileWriteUnsupportedSchemeError(v5);
          break;
        default:
          if (v4 == 640)
          {
            ML3ExceptionNSFileWriteOutOfSpaceError(v5);
          }
          else if (v4 == 642)
          {
            ML3ExceptionNSFileWriteVolumeReadOnlyError(v5);
          }
          else
          {
LABEL_17:
            ML3ExceptionUnexpectedNSCocoaError(v5);
          }
          break;
      }
    }
    else
    {
      switch(v4)
      {
        case 255:
          ML3ExceptionNSFileLockingError(v5);
          break;
        case 256:
          ML3ExceptionNSFileReadUnknownError(v5);
          break;
        case 257:
          ML3ExceptionNSFileReadNoPermissionError(v5);
          break;
        case 258:
          ML3ExceptionNSFileReadInvalidFileNameError(v5);
          break;
        case 259:
          ML3ExceptionNSFileReadCorruptFileError(v5);
          break;
        case 260:
          ML3ExceptionNSFileReadNoSuchFileError(v5);
          break;
        case 261:
          ML3ExceptionNSFileReadInapplicableStringEncodingError(v5);
          break;
        case 262:
          ML3ExceptionNSFileReadUnsupportedSchemeError(v5);
          break;
        case 263:
          ML3ExceptionNSFileReadTooLargeError(v5);
          break;
        case 264:
          ML3ExceptionNSFileReadUnknownStringEncodingError(v5);
          break;
        default:
          if (v4 != 4)
            goto LABEL_17;
          ML3ExceptionNSFileNoSuchFileError(v5);
          break;
      }
    }
    v3 = v5;
  }
  ML3ExceptionUnexpectedError(v3);

}

void ML3ExceptionDatabaseNilAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Could not fetch attributes at path %@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionDatabaseNilAttributes_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("DatabaseNilAttributes"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("DatabaseNilAttributes"), v9, v16, v17, v18, v19);

}

void ML3ExceptionDatabaseOwnerIsRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Owner is root. path=%@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionDatabaseOwnerIsRoot_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("DatabaseOwnerIsRoot"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("DatabaseOwnerIsRoot"), v9, v16, v17, v18, v19);

}

void ML3ExceptionDatabaseOwnerMismatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Path owner mismatch. uid=%u ownerID=%lu path=%@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionDatabaseOwnerMismatch_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("DatabaseOwnerMismatch"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("DatabaseOwnerMismatch"), v9, v16, v17, v18, v19);

}

void ML3ExceptionDatabaseDoesNotExist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("%@ does not exist"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionDatabaseDoesNotExist_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("DatabaseDoesNotExist"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("DatabaseDoesNotExist"), v9, v16, v17, v18, v19);

}

void ML3ExceptionNSFileNoSuchFileError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileNoSuchFileError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileNoSuchFileError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileNoSuchFileError"), v1);

}

void ML3ExceptionNSFileLockingError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileLockingError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileLockingError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileLockingError"), v1);

}

void ML3ExceptionNSFileReadUnknownError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileReadUnknownError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileReadUnknownError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileReadUnknownError"), v1);

}

void ML3ExceptionNSFileReadNoPermissionError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileReadNoPermissionError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileReadNoPermissionError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileReadNoPermissionError"), v1);

}

void ML3ExceptionNSFileReadInvalidFileNameError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileReadInvalidFileNameError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileReadInvalidFileNameError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileReadInvalidFileNameError"), v1);

}

void ML3ExceptionNSFileReadCorruptFileError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileReadCorruptFileError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileReadCorruptFileError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileReadCorruptFileError"), v1);

}

void ML3ExceptionNSFileReadNoSuchFileError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileReadNoSuchFileError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileReadNoSuchFileError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileReadNoSuchFileError"), v1);

}

void ML3ExceptionNSFileReadInapplicableStringEncodingError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileReadInapplicableStringEncodingError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileReadInapplicableStringEncodingError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileReadInapplicableStringEncodingError"), v1);

}

void ML3ExceptionNSFileReadUnsupportedSchemeError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileReadUnsupportedSchemeError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileReadUnsupportedSchemeError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileReadUnsupportedSchemeError"), v1);

}

void ML3ExceptionNSFileReadTooLargeError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileReadTooLargeError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileReadTooLargeError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileReadTooLargeError"), v1);

}

void ML3ExceptionNSFileReadUnknownStringEncodingError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileReadUnknownStringEncodingError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileReadUnknownStringEncodingError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileReadUnknownStringEncodingError"), v1);

}

void ML3ExceptionNSFileWriteUnknownError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileWriteUnknownError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileWriteUnknownError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileWriteUnknownError"), v1);

}

void ML3ExceptionNSFileWriteNoPermissionError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileWriteNoPermissionError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileWriteNoPermissionError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileWriteNoPermissionError"), v1);

}

void ML3ExceptionNSFileWriteInvalidFileNameError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileWriteInvalidFileNameError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileWriteInvalidFileNameError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileWriteInvalidFileNameError"), v1);

}

void ML3ExceptionNSFileWriteFileExistsError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileWriteFileExistsError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileWriteFileExistsError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileWriteFileExistsError"), v1);

}

void ML3ExceptionNSFileWriteInapplicableStringEncodingError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileWriteInapplicableStringEncodingError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileWriteInapplicableStringEncodingError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileWriteInapplicableStringEncodingError"), v1);

}

void ML3ExceptionNSFileWriteUnsupportedSchemeError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileWriteUnsupportedSchemeError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileWriteUnsupportedSchemeError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileWriteUnsupportedSchemeError"), v1);

}

void ML3ExceptionNSFileWriteOutOfSpaceError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileWriteOutOfSpaceError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileWriteOutOfSpaceError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileWriteOutOfSpaceError"), v1);

}

void ML3ExceptionNSFileWriteVolumeReadOnlyError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionNSFileWriteVolumeReadOnlyError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("NSFileWriteVolumeReadOnlyError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("NSFileWriteVolumeReadOnlyError"), v1);

}

void ML3ExceptionUnexpectedNSCocoaError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionUnexpectedNSCocoaError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("UnexpectedNSCocoaError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("UnexpectedNSCocoaError"), v1);

}

void ML3ExceptionUnexpectedError(void *a1)
{
  id v1;
  dispatch_semaphore_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD v8[4];
  dispatch_semaphore_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = dispatch_semaphore_create(0);
  v3 = (void *)MEMORY[0x1E0D4D030];
  v4 = *MEMORY[0x1E0D4CE40];
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __ML3ExceptionUnexpectedError_block_invoke;
  v8[3] = &unk_1E5B65D80;
  v9 = v2;
  v6 = v2;
  objc_msgSend(v3, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v4, CFSTR("Bug"), CFSTR("ML3FatalError"), CFSTR("UnexpectedError"), 0, v5, v8);

  v7 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v6, v7);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("ML3Exception%@ - Encountered error: %@"), CFSTR("UnexpectedError"), v1);

}

void ML3ExceptioniTunesContainerNilAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Could not fetch attributes at path %@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptioniTunesContainerNilAttributes_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("iTunesContainerNilAttributes"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("iTunesContainerNilAttributes"), v9, v16, v17, v18, v19);

}

void ML3ExceptioniTunesContainerOwnerIsRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Owner is root. path=%@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptioniTunesContainerOwnerIsRoot_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("iTunesContainerOwnerIsRoot"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("iTunesContainerOwnerIsRoot"), v9, v16, v17, v18, v19);

}

void ML3ExceptioniTunesContainerOwnerMismatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Path owner mismatch. uid=%u ownerID=%lu path=%@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptioniTunesContainerOwnerMismatch_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("iTunesContainerOwnerMismatch"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("iTunesContainerOwnerMismatch"), v9, v16, v17, v18, v19);

}

void ML3ExceptioniTunesContainerDoesNotExist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("%@ does not exist"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptioniTunesContainerDoesNotExist_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("iTunesContainerDoesNotExist"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("iTunesContainerDoesNotExist"), v9, v16, v17, v18, v19);

}

void ML3ExceptioniTunesControlNilAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Could not fetch attributes at path %@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptioniTunesControlNilAttributes_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("iTunesControlNilAttributes"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("iTunesControlNilAttributes"), v9, v16, v17, v18, v19);

}

void ML3ExceptioniTunesControlOwnerIsRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Owner is root. path=%@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptioniTunesControlOwnerIsRoot_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("iTunesControlOwnerIsRoot"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("iTunesControlOwnerIsRoot"), v9, v16, v17, v18, v19);

}

void ML3ExceptioniTunesControlOwnerMismatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Path owner mismatch. uid=%u ownerID=%lu path=%@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptioniTunesControlOwnerMismatch_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("iTunesControlOwnerMismatch"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("iTunesControlOwnerMismatch"), v9, v16, v17, v18, v19);

}

void ML3ExceptioniTunesControlDoesNotExist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("%@ does not exist"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptioniTunesControlDoesNotExist_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("iTunesControlDoesNotExist"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("iTunesControlDoesNotExist"), v9, v16, v17, v18, v19);

}

void ML3ExceptionUserHashContainerNilAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Could not fetch attributes at path %@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionUserHashContainerNilAttributes_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("UserHashContainerNilAttributes"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("UserHashContainerNilAttributes"), v9, v16, v17, v18, v19);

}

void ML3ExceptionUserHashContainerOwnerIsRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Owner is root. path=%@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionUserHashContainerOwnerIsRoot_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("UserHashContainerOwnerIsRoot"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("UserHashContainerOwnerIsRoot"), v9, v16, v17, v18, v19);

}

void ML3ExceptionUserHashContainerOwnerMismatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Path owner mismatch. uid=%u ownerID=%lu path=%@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionUserHashContainerOwnerMismatch_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("UserHashContainerOwnerMismatch"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("UserHashContainerOwnerMismatch"), v9, v16, v17, v18, v19);

}

void ML3ExceptionUserHashContainerDoesNotExist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("%@ does not exist"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionUserHashContainerDoesNotExist_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("UserHashContainerDoesNotExist"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("UserHashContainerDoesNotExist"), v9, v16, v17, v18, v19);

}

void ML3ExceptionMediaContainerNilAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Could not fetch attributes at path %@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionMediaContainerNilAttributes_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("MediaContainerNilAttributes"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("MediaContainerNilAttributes"), v9, v16, v17, v18, v19);

}

void ML3ExceptionMediaContainerOwnerIsRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Owner is root. path=%@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionMediaContainerOwnerIsRoot_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("MediaContainerOwnerIsRoot"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("MediaContainerOwnerIsRoot"), v9, v16, v17, v18, v19);

}

void ML3ExceptionMediaContainerOwnerMismatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("Path owner mismatch. uid=%u ownerID=%lu path=%@"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionMediaContainerOwnerMismatch_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("MediaContainerOwnerMismatch"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("MediaContainerOwnerMismatch"), v9, v16, v17, v18, v19);

}

void ML3ExceptionMediaContainerDoesNotExist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  dispatch_semaphore_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  uint64_t v16;
  uint64_t v17;
  intptr_t (*v18)(uint64_t);
  void *v19;
  dispatch_semaphore_t v20;
  uint64_t *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", CFSTR("%@ does not exist"), &a9);
  v10 = dispatch_semaphore_create(0);
  v11 = (void *)MEMORY[0x1E0D4D030];
  v12 = *MEMORY[0x1E0D4CE40];
  v22[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __ML3ExceptionMediaContainerDoesNotExist_block_invoke;
  v19 = &unk_1E5B65D80;
  v20 = v10;
  v14 = v10;
  objc_msgSend(v11, "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", v12, CFSTR("Bug"), CFSTR("Database Connection Exception"), CFSTR("MediaContainerDoesNotExist"), 0, v13, &v16);

  v15 = dispatch_time(0, 1000000000);
  dispatch_semaphore_wait(v14, v15);
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("%@ %@"), CFSTR("MediaContainerDoesNotExist"), v9, v16, v17, v18, v19);

}

uint64_t MIPSongReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  MIPAlbum *v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  void *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(MIPAlbum);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (PBReaderPlaceMark() && (MIPAlbumReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_84;
        goto LABEL_130;
      case 2u:
        v17 = objc_alloc_init(MIPArtist);
        v19 = 24;
        goto LABEL_26;
      case 3u:
        v17 = objc_alloc_init(MIPArtist);
        v19 = 40;
LABEL_26:
        objc_storeStrong((id *)(a1 + v19), v17);
        if (!PBReaderPlaceMark() || (MIPArtistReadFrom(v17, a2) & 1) == 0)
          goto LABEL_130;
        goto LABEL_84;
      case 4u:
        v17 = objc_alloc_init(MIPGenre);
        objc_storeStrong((id *)(a1 + 56), v17);
        if (!PBReaderPlaceMark() || (MIPGenreReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_130;
        goto LABEL_84;
      case 5u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 108) |= 4u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_97;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_97:
        v67 = 48;
        goto LABEL_127;
      case 6u:
        v26 = 0;
        v27 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 108) |= 0x10u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v22 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_101:
        v67 = 96;
        goto LABEL_127;
      case 7u:
        v31 = 0;
        v32 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 108) |= 0x20u;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v22 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_105;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_105:
        v67 = 100;
        goto LABEL_127;
      case 8u:
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 108) |= 0x40u;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 1;
            v38 |= (unint64_t)(v41 & 0x7F) << v36;
            if (v41 < 0)
            {
              v36 += 7;
              v14 = v37++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_109;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
LABEL_109:
        v68 = v38 != 0;
        v69 = 104;
        goto LABEL_122;
      case 9u:
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_BYTE *)(a1 + 108) |= 1u;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 1;
            v44 |= (unint64_t)(v47 & 0x7F) << v42;
            if (v47 < 0)
            {
              v42 += 7;
              v14 = v43++ >= 9;
              if (v14)
              {
                v44 = 0;
                goto LABEL_113;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
LABEL_113:
        *(_QWORD *)(a1 + 8) = v44;
        goto LABEL_128;
      case 0xAu:
        v48 = 0;
        v49 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 108) |= 2u;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 1;
            v22 |= (unint64_t)(v52 & 0x7F) << v48;
            if (v52 < 0)
            {
              v48 += 7;
              v14 = v49++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_117;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_117:
        v67 = 32;
        goto LABEL_127;
      case 0xBu:
        v53 = 0;
        v54 = 0;
        v55 = 0;
        *(_BYTE *)(a1 + 108) |= 0x80u;
        while (2)
        {
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
            *(_QWORD *)(a2 + v56) = v57 + 1;
            v55 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v14 = v54++ >= 9;
              if (v14)
              {
                v55 = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v55 = 0;
LABEL_121:
        v68 = v55 != 0;
        v69 = 105;
LABEL_122:
        *(_BYTE *)(a1 + v69) = v68;
        goto LABEL_128;
      case 0xCu:
        PBReaderReadString();
        v59 = objc_claimAutoreleasedReturnValue();
        v60 = 72;
        goto LABEL_93;
      case 0xDu:
        v17 = objc_alloc_init(MIPPlaybackInfo);
        objc_storeStrong((id *)(a1 + 88), v17);
        if (PBReaderPlaceMark() && (MIPPlaybackInfoReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_84:
          PBReaderRecallMark();

LABEL_128:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_130:

        return 0;
      case 0xEu:
        v61 = 0;
        v62 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 108) |= 8u;
        while (2)
        {
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
            *(_QWORD *)(a2 + v63) = v64 + 1;
            v22 |= (unint64_t)(v65 & 0x7F) << v61;
            if (v65 < 0)
            {
              v61 += 7;
              v14 = v62++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_126;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_126:
        v67 = 80;
LABEL_127:
        *(_DWORD *)(a1 + v67) = v22;
        goto LABEL_128;
      case 0xFu:
        PBReaderReadString();
        v59 = objc_claimAutoreleasedReturnValue();
        v60 = 64;
LABEL_93:
        v66 = *(void **)(a1 + v60);
        *(_QWORD *)(a1 + v60) = v59;

        goto LABEL_128;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_128;
    }
  }
}

uint64_t ML3ImportExecuteVariadicStatement(void *a1, const UInt8 *a2, uint64_t *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  sqlite3_stmt *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  sqlite3_stmt *v17;
  int v18;
  sqlite3_stmt **v19;

  v5 = a1;
  ML3CPPBridgeString(a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_prepareStatement:error:", v6, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    v9 = v7;
    v10 = (sqlite3_stmt *)objc_msgSend(v9, "sqliteStatement");
    v17 = v10;
    v18 = 0;
    v11 = *a3;
    v12 = a3[1];
    if (*a3 != v12)
    {
      v13 = 1;
      do
      {
        if (*(_BYTE *)(v11 + 32))
        {
          v18 = v13;
          v14 = *(unsigned int *)(v11 + 24);
          if ((_DWORD)v14 == -1)
            std::__throw_bad_variant_access[abi:ne180100]();
          v19 = &v17;
          ((void (*)(sqlite3_stmt ***, uint64_t))off_1E5B5C3B0[v14])(&v19, v11);
        }
        else
        {
          sqlite3_bind_null(v10, v13);
        }
        v11 += 40;
        ++v13;
      }
      while (v11 != v12);
    }

    v15 = objc_msgSend(v5, "_executeStatement:withError:", v9, 0);
  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_1AC206C74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3StatementBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(sqlite3_stmt ***a1, sqlite3_int64 *a2)
{
  sqlite3_stmt **v3;
  sqlite3_stmt *v4;
  void *v6;
  void *v7;

  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ML3StatementBindingVisitor::operator()(const int64_t &)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("ML3ImportDatabaseUtilities.mm"), 88, CFSTR("Cannot bind int64_t: no sqlite3_stmt*"));

    v4 = *v3;
  }
  return sqlite3_bind_int64(v4, *((_DWORD *)v3 + 2), *a2);
}

void sub_1AC206D7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3StatementBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(sqlite3_stmt ***a1, float *a2)
{
  sqlite3_stmt **v3;
  sqlite3_stmt *v4;
  void *v6;
  void *v7;

  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ML3StatementBindingVisitor::operator()(const float_t &)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("ML3ImportDatabaseUtilities.mm"), 94, CFSTR("Cannot bind float: no sqlite3_stmt*"));

    v4 = *v3;
  }
  return sqlite3_bind_double(v4, *((_DWORD *)v3 + 2), *a2);
}

void sub_1AC206E34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3StatementBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(sqlite3_stmt ***a1, unsigned __int8 *a2)
{
  sqlite3_stmt **v3;
  sqlite3_stmt *v4;
  void *v6;
  void *v7;

  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ML3StatementBindingVisitor::operator()(const BOOL &)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("ML3ImportDatabaseUtilities.mm"), 100, CFSTR("Cannot bind BOOL: no sqlite3_stmt*"));

    v4 = *v3;
  }
  return sqlite3_bind_int(v4, *((_DWORD *)v3 + 2), *a2);
}

void sub_1AC206EE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3StatementBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(sqlite3_stmt ***a1, uint64_t a2)
{
  sqlite3_stmt **v3;
  sqlite3_stmt *v4;
  int v5;
  const char *v6;
  int v7;
  void *v9;
  void *v10;

  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ML3StatementBindingVisitor::operator()(const std::string &)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("ML3ImportDatabaseUtilities.mm"), 106, CFSTR("Cannot bind string: no sqlite3_stmt*"));

    v4 = *v3;
  }
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_DWORD *)(a2 + 8);
  return sqlite3_bind_text(v4, *((_DWORD *)v3 + 2), v6, v7, 0);
}

void sub_1AC206FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ML3StatementBindingVisitor &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  void *v10;

  v2 = *a1;
  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (*(_QWORD *)v2)
  {
    if (!v4)
      goto LABEL_7;
    goto LABEL_6;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ML3StatementBindingVisitor::operator()(ML3CPPDataRef)");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("ML3ImportDatabaseUtilities.mm"), 112, CFSTR("Cannot bind data: no sqlite3_stmt*"));

  if (v4)
LABEL_6:
    sqlite3_bind_blob(*(sqlite3_stmt **)v2, *(_DWORD *)(v2 + 8), *(const void **)(v4 + 16), *(_DWORD *)(v4 + 8), 0);
LABEL_7:
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1AC2070E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  void *v3;
  void *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = v3;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

void ML3StoreImportItem::~ML3StoreImportItem(id *this)
{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
  JUMPOUT(0x1AF43C744);
}

BOOL ML3StoreImportItem::isValid(ML3StoreImportItem *this)
{
  _BOOL8 v2;
  std::string::size_type size;
  int v5;
  std::string::size_type v6;
  uint64_t (**v7)();
  std::string __p;
  std::string v9;
  uint64_t (**v10)();
  std::string v11;
  std::string v12;

  if ((*(uint64_t (**)(ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663297)
    || (*(uint64_t (**)(ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663337))
  {
    return 1;
  }
  (*(void (**)(uint64_t (***__return_ptr)(), ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v10, this, 100663323);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v12 = v11;
  size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  v5 = SHIBYTE(v12.__r_.__value_.__r.__words[2]);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v12.__r_.__value_.__l.__size_;
  if (size)
  {
    v2 = 1;
  }
  else
  {
    (*(void (**)(uint64_t (***__return_ptr)(), ML3StoreImportItem *, uint64_t))(*(_QWORD *)this
                                                                                                  + 24))(&v7, this, 100663341);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v9 = __p;
    v6 = v9.__r_.__value_.__l.__size_;
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    v2 = v6 != 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    v7 = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5 < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  v10 = off_1E5B4D010;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v2;
}

void sub_1AC20735C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  int v28;
  uint64_t v29;

  if (a17 < 0)
    operator delete(__p);
  if (v28 < 0)
    operator delete(*(void **)(v29 - 64));
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void ML3StoreImportItem::getStringValue(ML3StoreImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  std::string __str;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a3 = off_1E5B4D010;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (std::string *)(a3 + 16);
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v5 = (void *)*((_QWORD *)this + 8);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String"));
    std::string::operator=(v4, &__str);
    *(_BYTE *)(a3 + 8) = 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      v8 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_6:
      operator delete(v8);
    }
  }
  else
  {
    __str.__r_.__value_.__s.__data_[8] = 0;
    v10 = 0;
    v11 = 0;
    __str.__r_.__value_.__r.__words[2] = 0;
    *(_BYTE *)(a3 + 8) = 0;
    std::string::operator=(v4, (const std::string *)&__str.__r_.__value_.__r.__words[2]);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5B4D010;
    if (SHIBYTE(v11) < 0)
    {
      v8 = (void *)__str.__r_.__value_.__r.__words[2];
      goto LABEL_6;
    }
  }

}

void sub_1AC2074D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void **v18;
  void *v19;
  uint64_t v20;
  int v22;

  if (a17 < 0)
    operator delete(__p);

  v22 = *(char *)(v17 + 39);
  *(_QWORD *)v17 = v20;
  if (v22 < 0)
    operator delete(*v18);
  _Unwind_Resume(a1);
}

uint64_t ML3StoreImportItem::getIntegerValue(ML3StoreImportItem *this, uint64_t a2)
{
  int v2;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  double v9;

  v2 = a2;
  v4 = (void *)*((_QWORD *)this + 8);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_opt_respondsToSelector() & 1) != 0)
    v7 = objc_msgSend(v6, "longLongValue");
  else
    v7 = 0;
  v8 = *((_DWORD *)this + 18);
  if (v8 != 6)
  {
    if (v2 != 16777247 || v8 != 5 || v7)
      goto LABEL_26;
    if (!*((_BYTE *)this + 16))
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v2 > 100663337)
  {
    if (v2 != 100663338)
    {
      if (v2 == 100663345)
        v7 = 1;
      goto LABEL_26;
    }
    if (!(*(uint64_t (**)(ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663310))
    {
      if ((*(uint64_t (**)(ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663337))
        v7 = 3;
      else
        v7 = 0;
      goto LABEL_26;
    }
LABEL_23:
    v7 = 0;
    goto LABEL_26;
  }
  if (v2 == 16777247)
  {
    if (!*((_BYTE *)this + 76))
      v7 = 0;
  }
  else if (v2 == 33554443)
  {
    if (v7)
    {
      v9 = (double)v7;
LABEL_25:
      v7 = (uint64_t)v9;
      goto LABEL_26;
    }
LABEL_24:
    objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
    goto LABEL_25;
  }
LABEL_26:

  return v7;
}

void sub_1AC2076E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float ML3StoreImportItem::getFloatValue(ML3StoreImportItem *this, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  float v5;
  float v6;
  double v7;

  v2 = (void *)*((_QWORD *)this + 8);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v4, "floatValue");
    v6 = v5;
  }
  else
  {
    v6 = 0.0;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v4, "doubleValue");
      v6 = v7;
    }
  }

  return v6;
}

void sub_1AC2077AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ML3StoreImportItem::getDataValue(ML3StoreImportItem *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  void *v5;
  id v6;
  const void *v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  id v15;
  __int128 v16;

  *a3 = 0;
  a3[1] = 0;
  v4 = (void *)*((_QWORD *)this + 8);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v5);
  v15 = (id)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v6 = objc_retainAutorelease(v15);
    v7 = (const void *)objc_msgSend(v6, "bytes");
    v8 = objc_msgSend(v6, "length");
    v9 = operator new();
    *(_QWORD *)v9 = &off_1E5B4CF08;
    *(_QWORD *)(v9 + 8) = v8;
    if (v8)
      v10 = (void *)operator new[]();
    else
      v10 = 0;
    *(_QWORD *)(v9 + 16) = v10;
    *(_BYTE *)(v9 + 24) = 1;
    if (v7)
      memcpy(v10, v7, v8);
    else
      bzero(v10, v8);
    *(_QWORD *)&v16 = v9;
    v11 = (_QWORD *)operator new();
    *v11 = &off_1E5B51730;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v9;
    *((_QWORD *)&v16 + 1) = v11;
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a3, &v16);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }

  }
}

void sub_1AC207964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;

  MEMORY[0x1AF43C744](v12, 0x1091C40934DB768);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

BOOL ML3StoreImportItem::hasValue(ML3StoreImportItem *this, uint64_t a2)
{
  int v2;
  void *v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = (void *)*((_QWORD *)this + 8);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    return 1;
  if ((v2 - 100663344) < 2)
    return *((_DWORD *)this + 18) == 6;
  if (v2 != 100663338)
    return 0;
  if (*((_DWORD *)this + 18) == 6)
    return 1;
  return (*(uint64_t (**)(ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663310) != 0;
}

void sub_1AC207AB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ML3StoreImportItem::getDescription(ML3StoreImportItem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v9[11];
  char v10;
  uint64_t v11;
  char v12;

  (*(void (**)(ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663305);
  (*(void (**)(ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663297);
  (*(void (**)(ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 167772174);
  (*(void (**)(ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663337);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<ML3StoreImportItem ", 20);
  *(_DWORD *)((char *)&v9[1] + *(_QWORD *)(v9[0] - 24)) = *(_DWORD *)((_BYTE *)&v9[1] + *(_QWORD *)(v9[0] - 24)) & 0xFFFFFFB5 | 8;
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" item_pid=", 10);
  *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 2;
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", storeId=", 10);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", sagaId=", 9);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", subscriptionId=", 17);
  v7 = (_QWORD *)std::ostream::operator<<();
  v12 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v12, 1);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v11);
}

void sub_1AC207CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ML3StoreImportItem::getSourceIdentifiers@<X0>(ML3StoreImportItem *this@<X0>, BOOL *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  std::vector<long long>::vector(a3);
  *(_QWORD *)(*a3 + 40) = (*(uint64_t (**)(ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663297);
  result = (*(uint64_t (**)(ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663337);
  *(_QWORD *)(*a3 + 48) = result;
  if (a2)
    *a2 = 0;
  return result;
}

void sub_1AC207D54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id ML3StoreImportItem::getDeduplicationPredicates(id *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(this[8], "objectForKey:", &unk_1E5BAA9F8);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "longLongValue");

  if (v4)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("ROWID"), v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v5);

  }
  objc_msgSend(this[8], "objectForKey:", &unk_1E5BAAA10);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  if (v30)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("item_stats.download_identifier"), v30);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v6);

  }
  objc_msgSend(this[8], "objectForKey:", &unk_1E5BAAA28);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "longLongValue");

  if (v8)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_saga_id"), v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v9);

  }
  objc_msgSend(this[8], "objectForKey:", &unk_1E5BAAA40);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("item_store.store_xid"), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v11);

  }
  objc_msgSend(this[8], "objectForKey:", &unk_1E5BAAA58);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "longLongValue");

  if (v13)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"), v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v14);

  }
  objc_msgSend(this[8], "objectForKey:", &unk_1E5BAAA70);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "longLongValue");

  if (v16)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.subscription_store_item_id"), v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v17);

    if (!v13)
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"), v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v18);

    }
  }
  objc_msgSend(this[8], "objectForKey:", &unk_1E5BAAA88);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v19 = (id)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (v20)
  {
    v21 = *(_QWORD *)v32;
    do
    {
      v22 = 0;
      do
      {
        if (*(_QWORD *)v32 != v21)
          objc_enumerationMutation(v19);
        v23 = objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * v22), "longLongValue");
        if (v23)
        {
          +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.subscription_store_item_id"), v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "addObject:", v24);

        }
        ++v22;
      }
      while (v20 != v22);
      v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    }
    while (v20);
  }

  objc_msgSend(this[8], "objectForKey:", &unk_1E5BAAAA0);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(this[8], "objectForKey:", &unk_1E5BAAAB8);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v26;
  if (v25 && (objc_msgSend(v26, "longLongValue") & 4) != 0)
  {
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:", CFSTR("item_store.external_guid"), v25, 1, 1);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v28);

  }
  return v2;
}

void sub_1AC20816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

id ML3StoreImportItem::getDeduplicationOrderingTerms(ML3StoreImportItem *this)
{
  void *v1;
  void *v2;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  +[ML3OrderingTerm orderingTermWithProperty:direction:](ML3OrderingTerm, "orderingTermWithProperty:direction:", CFSTR("base_location_id"), 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1AC2082F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ML3StoreImportItem::canInsertIntoPurchasedPlaylist(ML3StoreImportItem *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = (*(uint64_t (**)(ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663310);
  v3 = (*(uint64_t (**)(ML3StoreImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777217) & 0x40A;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  return !v4 && !*((_BYTE *)this + 16) && *((_BYTE *)this + 76) == 0;
}

_QWORD *std::shared_ptr<ML3CPPData>::shared_ptr[abi:ne180100]<ML3CPPData,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E5B51730;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1AC2083DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<ML3CPPData *,std::shared_ptr<ML3CPPData>::__shared_ptr_default_delete<ML3CPPData,ML3CPPData>,std::allocator<ML3CPPData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3CPPData *,std::shared_ptr<ML3CPPData>::__shared_ptr_default_delete<ML3CPPData,ML3CPPData>,std::allocator<ML3CPPData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3CPPData *,std::shared_ptr<ML3CPPData>::__shared_ptr_default_delete<ML3CPPData,ML3CPPData>,std::allocator<ML3CPPData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI10ML3CPPDataE27__shared_ptr_default_deleteIS1_S1_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void ML3StoreAlbumImportItem::~ML3StoreAlbumImportItem(id *this)
{
  ML3StoreAlbumImportItem::~ML3StoreAlbumImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

void ML3StoreAlbumImportItem::getStringValue(ML3StoreAlbumImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v4;
  id v5;
  void *v6;
  void *v7;
  std::string __str;

  *(_QWORD *)a3 = off_1E5B4D010;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (std::string *)(a3 + 16);
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  if ((a2 - 285212673) <= 0x1A && ((1 << (a2 - 1)) & 0x4000203) != 0
    || (_DWORD)a2 == 33554462
    || (v5 = 0, (_DWORD)a2 == 33554451))
  {
    v6 = (void *)*((_QWORD *)this + 8);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKey:", v7);
    v5 = (id)objc_claimAutoreleasedReturnValue();

    if (_NSIsNSString())
    {
      v5 = objc_retainAutorelease(v5);
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v5, "UTF8String"));
      std::string::operator=(v4, &__str);
      *(_BYTE *)(a3 + 8) = 1;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
  }

}

void sub_1AC208670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  void *v17;
  uint64_t v18;
  int v20;

  if (a15 < 0)
    operator delete(__p);

  v20 = *(char *)(v15 + 39);
  *(_QWORD *)v15 = v18;
  if (v20 < 0)
    operator delete(*v16);
  _Unwind_Resume(a1);
}

uint64_t ML3StoreAlbumImportItem::getIntegerValue(ML3StoreAlbumImportItem *this, uint64_t a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  std::string::size_type size;
  int v10;
  BOOL v11;
  char v12;
  std::string::size_type v13;
  std::string v15;
  _QWORD v16[2];
  std::string __p;
  std::string v18;

  v3 = 0;
  if ((int)a2 <= 285212682)
  {
    if ((_DWORD)a2 != 16777217)
    {
      v4 = 16777248;
LABEL_7:
      v5 = 0;
      if ((_DWORD)a2 != v4)
        goto LABEL_37;
    }
LABEL_8:
    v6 = (void *)*((_QWORD *)this + 8);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKey:", v7);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (_NSIsNSNumber())
      v3 = objc_msgSend(v5, "longLongValue");
    else
      v3 = 0;
    goto LABEL_37;
  }
  if ((a2 - 285212683) < 2)
    goto LABEL_8;
  if ((_DWORD)a2 != 285212688)
  {
    v4 = 285212696;
    goto LABEL_7;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3StoreAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v16, this, 33554462);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v16[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3StoreAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v16, this, 33554451);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v16[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v15 = __p;
  }
  v8 = (*(uint64_t (**)(ML3StoreAlbumImportItem *, uint64_t))(*(_QWORD *)this + 56))(this, 16777248);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  v10 = SHIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  v11 = size == 0;
  if (size)
    v12 = 0;
  else
    v12 = v8;
  if ((v12 & 1) != 0)
  {
    v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = v15.__r_.__value_.__l.__size_;
    LODWORD(v3) = v13 != 0;
    if ((*((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  LODWORD(v3) = !v11;
  if ((*((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_33:
    operator delete(v15.__r_.__value_.__l.__data_);
LABEL_34:
  v3 = v3;
  if (v10 < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v5 = 0;
LABEL_37:

  return v3;
}

void sub_1AC208914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

BOOL ML3StoreAlbumImportItem::hasValue(ML3StoreAlbumImportItem *this, uint64_t a2)
{
  _BOOL8 v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned __int16 v8;
  uint64_t v9;
  std::string::size_type size;
  int v11;
  std::string::size_type v12;
  std::string v13;
  _QWORD v14[2];
  std::string __p;
  std::string v16;

  v3 = 0;
  if ((int)a2 <= 33554461)
  {
    if ((_DWORD)a2 == 16777217 || (_DWORD)a2 == 16777248)
      goto LABEL_4;
    v8 = 19;
LABEL_13:
    if ((_DWORD)a2 != (v8 | 0x2000000))
      return v3;
    goto LABEL_4;
  }
  if ((a2 - 285212673) > 0x17)
    goto LABEL_12;
  if (((1 << (a2 - 1)) & 0x920FC3) != 0)
  {
LABEL_4:
    v4 = (void *)*((_QWORD *)this + 8);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKey:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v6 != 0;

    return v3;
  }
  if ((_DWORD)a2 != 285212688)
  {
LABEL_12:
    v8 = 30;
    goto LABEL_13;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3StoreAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v14, this, 33554462);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v14[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3StoreAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v14, this, 33554451);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v14[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = __p;
  }
  v9 = (*(uint64_t (**)(ML3StoreAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777248);
  size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  v11 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v16.__r_.__value_.__l.__size_;
  if (size)
  {
    v3 = 1;
  }
  else if (v9)
  {
    v12 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = v13.__r_.__value_.__l.__size_;
    v3 = v12 != 0;
  }
  else
  {
    v3 = 0;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1AC208BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v22 - 25) < 0)
    operator delete(*(void **)(v22 - 48));
  _Unwind_Resume(exception_object);
}

void ML3StoreAlbumImportItem::getDescription(ML3StoreAlbumImportItem *this)
{
  _QWORD *v2;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v5;
  std::string __p;
  _QWORD v7[11];
  char v8;
  uint64_t v9;
  uint64_t (**v10)();
  std::string v11;
  char v12;

  (*(void (**)(uint64_t (***__return_ptr)(), ML3StoreAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v10, this, 285212673);
  (*(void (**)(ML3StoreAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212696);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"<ML3StoreAlbumImportItem ", 25);
  *(_DWORD *)((char *)&v7[1] + *(_QWORD *)(v7[0] - 24)) = *(_DWORD *)((_BYTE *)&v7[1] + *(_QWORD *)(v7[0] - 24)) & 0xFFFFFFB5 | 8;
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" name=", 6);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    __p = v11;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" storeID=", 9);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  v5 = (_QWORD *)std::ostream::operator<<();
  v12 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v12, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF43C6FC](&v9);
  v10 = off_1E5B4D010;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1AC208E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  std::ostringstream::~ostringstream((uint64_t)&a15);
  *(_QWORD *)(v15 - 96) = off_1E5B4D010;
  if (*(char *)(v15 - 57) < 0)
    operator delete(*(void **)(v15 - 80));
  _Unwind_Resume(a1);
}

id ML3StoreAlbumImportItem::getDeduplicationPredicates(ML3StoreAlbumImportItem *this)
{
  uint64_t v2;
  uint64_t v3;
  std::string::size_type size;
  void *v5;
  void *v6;
  void *v7;
  std::string::size_type v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  std::string *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v37;
  std::string v38;
  std::string v39;
  _QWORD v40[2];
  std::string __p;
  std::string v42;
  _QWORD v43[2];
  _QWORD v44[3];
  _QWORD v45[5];
  _QWORD v46[7];

  v46[5] = *MEMORY[0x1E0C80C00];
  v37 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v2 = (*(uint64_t (**)(ML3StoreAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212696);
  v3 = (*(uint64_t (**)(ML3StoreAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212683);
  (*(void (**)(_QWORD *__return_ptr, ML3StoreAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v40, this, 285212673);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v42, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v40[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v42 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3StoreAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v40, this, 285212699);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v40[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v39 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3StoreAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v40, this, 285212682);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v40[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v38 = __p;
  }
  size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v42.__r_.__value_.__l.__size_;
  if (size)
  {
    v5 = (void *)*((_QWORD *)this + 9);
    ML3CPPBridgeString((const UInt8 *)&v42, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "groupingKeyForString:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }
  v8 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = v39.__r_.__value_.__l.__size_;
  if (v8)
  {
    v9 = (void *)*((_QWORD *)this + 9);
    ML3CPPBridgeString((const UInt8 *)&v39, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "groupingKeyForString:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v2)
      goto LABEL_29;
  }
  else
  {
    v11 = 0;
    if (!v2)
      goto LABEL_29;
  }
  if (objc_msgSend(v7, "length") && objc_msgSend(v11, "length"))
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_id"), v2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v46[0] = v12;
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", CFSTR("cloud_library_id"), &stru_1E5B66908, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v46[1] = v13;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("album_artist.grouping_key"), v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v46[2] = v14;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v46[3] = v15;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), v3);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v46[4] = v16;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v46, 5);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v37, "addObject:", v18);
  }
  else
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_id"), v2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v45[0] = v19;
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", CFSTR("cloud_library_id"), &stru_1E5B66908, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v45[1] = v20;
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("album_artist.grouping_key"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v45[2] = v21;
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("grouping_key"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v45[3] = v22;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), v3);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v45[4] = v23;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v45, 5);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v24);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v37, "addObject:", v18);
  }

LABEL_29:
  if (objc_msgSend(v7, "length") && objc_msgSend(v11, "length"))
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("album_artist.grouping_key"), v11);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v44[0] = v25;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v7);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v44[1] = v26;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), v3);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v44[2] = v27;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v44, 3);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v37, "addObject:", v29);
  }
  if (objc_msgSend(v7, "length"))
  {
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v38.__r_.__value_.__l.__size_)
        goto LABEL_39;
      v30 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((_BYTE *)&v38.__r_.__value_.__s + 23))
        goto LABEL_39;
      v30 = &v38;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("feed_url"), v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v43[0] = v32;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v7);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v43[1] = v33;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v43, 2);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v37, "addObject:", v35);
  }
LABEL_39:

  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  return v37;
}

void sub_1AC2095A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;

  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a37 < 0)
    operator delete(a32);

  _Unwind_Resume(a1);
}

uint64_t ML3StoreAlbumImportItem::sortPropertyKeyForPropertyKey(ML3StoreAlbumImportItem *this, int a2)
{
  if (a2 == 285212673)
    return 285212674;
  else
    return 0;
}

uint64_t ML3StoreAlbumImportItem::propertyKeyForSortPropertyKey(ML3StoreAlbumImportItem *this, int a2)
{
  if (a2 == 285212674)
    return 285212673;
  else
    return 0;
}

void ML3StoreArtistImportItem::~ML3StoreArtistImportItem(id *this)
{
  ML3StoreArtistImportItem::~ML3StoreArtistImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

void ML3StoreArtistImportItem::getStringValue(ML3StoreArtistImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  std::string __str;

  *(_QWORD *)a3 = off_1E5B4D010;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (std::string *)(a3 + 16);
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v5 = (void *)*((_QWORD *)this + 8);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (_NSIsNSString())
  {
    v8 = objc_retainAutorelease(v7);
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v8, "UTF8String"));
    std::string::operator=(v4, &__str);
    *(_BYTE *)(a3 + 8) = 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);

  }
}

void sub_1AC209974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  void *v17;
  void *v18;
  uint64_t v19;
  int v21;

  if (a15 < 0)
    operator delete(__p);

  v21 = *(char *)(v15 + 39);
  *(_QWORD *)v15 = v19;
  if (v21 < 0)
    operator delete(*v16);
  _Unwind_Resume(a1);
}

uint64_t ML3StoreArtistImportItem::getIntegerValue(ML3StoreArtistImportItem *this, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = (void *)*((_QWORD *)this + 8);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (_NSIsNSNumber())
    v5 = objc_msgSend(v4, "longLongValue");
  else
    v5 = 0;

  return v5;
}

void sub_1AC209A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ML3StoreArtistImportItem::hasValue(ML3StoreArtistImportItem *this, uint64_t a2)
{
  _BOOL8 v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = 0;
  if ((int)a2 > 318767104)
  {
    if ((a2 - 318767105) > 0xD || ((1 << (a2 - 1)) & 0x204F) == 0)
      return v2;
LABEL_9:
    v3 = (void *)*((_QWORD *)this + 8);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKeyedSubscript:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v2 = v5 != 0;
    return v2;
  }
  if ((a2 - 301989889) <= 0xC && ((1 << (a2 - 1)) & 0x1013) != 0
    || (_DWORD)a2 == 16777217
    || (_DWORD)a2 == 16777246)
  {
    goto LABEL_9;
  }
  return v2;
}

void sub_1AC209B48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ML3StoreArtistImportItem::getDescription(ML3StoreArtistImportItem *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  _QWORD *v8;
  std::string *v9;
  std::string::size_type v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (**v15)();
  uint64_t v16;
  std::string __p[2];
  void *v18;
  char v19;
  uint64_t v20;
  std::string v21;
  std::string v22;
  char v23;

  (*(void (**)(uint64_t (***__return_ptr)()))(*(_QWORD *)this + 24))(&v15);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
    v15 = off_1E5B4D010;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  else
  {
    v22 = __p[0];
  }
  if (*((_QWORD *)this + 10) != 2)
  {
    v15 = off_1E5B4D010;
    LOBYTE(v16) = 0;
    memset(__p, 0, 24);
LABEL_9:
    v21 = __p[0];
    goto LABEL_10;
  }
  (*(void (**)(uint64_t (***__return_ptr)(), ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v15, this, 318767107);
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_9;
  std::string::__init_copy_ctor_external(&v21, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
  v15 = off_1E5B4D010;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_10:
  if (*((_QWORD *)this + 10) == 2)
    v2 = 318767111;
  else
    v2 = 301989893;
  (*(void (**)(ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, v2);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"<ML3StoreArtistImportItem ", 26);
  *(_DWORD *)((char *)&v15 + (_QWORD)*(v15 - 3) + 8) = *(_DWORD *)((_BYTE *)&v15 + (_QWORD)*(v15 - 3) + 8) & 0xFFFFFFB5 | 8;
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" name=", 6);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v22;
  else
    v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    size = v22.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, size);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" seriesName=", 12);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v21;
  else
    v9 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    v10 = v21.__r_.__value_.__l.__size_;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" storeID=", 9);
  *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 2;
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" artist type=", 13);
  v14 = (_QWORD *)std::ostream::operator<<();
  v23 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v23, 1);
  std::stringbuf::str();
  v15 = (uint64_t (**)())*MEMORY[0x1E0DE4F60];
  *(uint64_t (***)())((char *)&v15 + (_QWORD)*(v15 - 3)) = *(uint64_t (***)())(MEMORY[0x1E0DE4F60]
                                                                                                 + 24);
  v16 = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete(v18);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF43C6FC](&v20);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_1AC209E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 - 73) < 0)
    operator delete(*(void **)(v17 - 96));
  _Unwind_Resume(exception_object);
}

id ML3StoreArtistImportItem::getDeduplicationPredicates(ML3StoreArtistImportItem *this)
{
  id v2;
  __CFString *v3;
  __CFString *v4;
  uint64_t v5;
  void *v6;
  std::string::size_type size;
  char v8;
  std::string::size_type v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v21[2];
  std::string v22;
  std::string __str;
  std::string __p;
  _QWORD v25[2];
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = CFSTR("store_id");
  v4 = CFSTR("grouping_key");
  memset(&__p, 0, sizeof(__p));
  if (*((_QWORD *)this + 10) == 2)
  {
    (*(void (**)(_QWORD *__return_ptr, ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v21, this, 318767105);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    else
      __str = v22;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __str;
    v21[0] = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    v5 = (*(uint64_t (**)(ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777217);
    if ((MLMediaTypeByStandardizingMediaType(v5) & 8) == 0)
    {
      (*(void (**)(_QWORD *__return_ptr, ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v21, this, 318767107);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
        v21[0] = off_1E5B4D010;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
      }
      else
      {
        __str = v22;
      }
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __str.__r_.__value_.__l.__size_;
      if (size)
      {
        std::string::operator=(&__p, &__str);
        v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      if (v8 < 0)
      {
        v6 = (void *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_27;
      }
    }
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, ML3StoreArtistImportItem *, _QWORD))(*(_QWORD *)this + 152))(v21, this, 0);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    else
      __str = v22;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __str;
    v21[0] = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    {
      v6 = (void *)v22.__r_.__value_.__r.__words[0];
LABEL_27:
      operator delete(v6);
    }
  }
  v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = __p.__r_.__value_.__l.__size_;
  if (v9)
  {
    v10 = (void *)*((_QWORD *)this + 11);
    ML3CPPBridgeString((const UInt8 *)&__p, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "groupingKeyForString:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v12 = 0;
  }
  if (*((_QWORD *)this + 10) == 2)
    v13 = 318767111;
  else
    v13 = 301989893;
  v14 = (*(uint64_t (**)(ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, v13);
  if (v14)
  {
    if (objc_msgSend(v12, "length"))
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", v3, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v26[0] = v15;
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", v4, v12);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v26[1] = v16;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 2);
    }
    else
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", v3, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v25[0] = v15;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", v4, &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v25[1] = v16;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 2);
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "addObject:", v18);
  }
  if (objc_msgSend(v12, "length"))
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", v4, v12);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v19);

  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v2;
}

void sub_1AC20A3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;

  if (a17 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);

  _Unwind_Resume(a1);
}

void ML3StoreArtistImportItem::getEffectiveAlbumArtist(ML3StoreArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  std::string::value_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string::value_type v13;
  std::string *v14;
  std::string v15;
  std::string v16;
  std::string v17;
  __int128 v18;
  std::string v19;
  std::string __str;

  v6 = (*(uint64_t (**)(ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 318767105);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    __str = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 318767107);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 301989889);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v19;
  }
  v7 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v18, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    v18 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[0] = v16.__r_.__value_.__r.__words[2];
  }
  if (!v6)
  {
    v8 = v19.__r_.__value_.__s.__data_[7];
    v9 = v19.__r_.__value_.__s.__data_[7];
    v10 = *((_QWORD *)&v18 + 1);
    if (v19.__r_.__value_.__s.__data_[7] >= 0)
      v11 = v19.__r_.__value_.__s.__data_[7];
    else
      v11 = *((_QWORD *)&v18 + 1);
    if (!v11)
    {
      std::string::operator=((std::string *)&v18, &__str);
      v8 = v19.__r_.__value_.__s.__data_[7];
      v10 = *((_QWORD *)&v18 + 1);
      v9 = v19.__r_.__value_.__s.__data_[7];
    }
    if (v9 < 0)
      v8 = v10;
    if (!v8)
      std::string::operator=((std::string *)&v18, &v17);
  }
  v12 = v19.__r_.__value_.__s.__data_[7];
  v13 = v19.__r_.__value_.__s.__data_[7];
  if (v19.__r_.__value_.__s.__data_[7] < 0)
    v12 = *((_QWORD *)&v18 + 1);
  if (v12 && a2)
  {
    ML3CPPSanitizeString(&v15, (unint64_t)&v18);
    if (v19.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v18);
    v19.__r_.__value_.__r.__words[0] = v15.__r_.__value_.__r.__words[2];
    v18 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v14 = (std::string *)(a3 + 16);
  if ((v13 & 0x80) == 0)
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v18;
    *(_QWORD *)(a3 + 32) = v19.__r_.__value_.__r.__words[0];
    if ((v7 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
  std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
  if ((v19.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
  operator delete((void *)v18);
  if (v7 < 0)
LABEL_38:
    operator delete(v16.__r_.__value_.__l.__data_);
LABEL_39:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1AC20A760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v31 - 57) < 0)
    operator delete(*(void **)(v31 - 80));
  _Unwind_Resume(a1);
}

void ML3StoreArtistImportItem::getEffectiveSortAlbumArtist(ML3StoreArtistImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string v22;
  std::string v23;

  v6 = (*(uint64_t (**)(ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 301989889);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v23 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 301989890);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v20 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 318767105);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 318767106);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = v22;
  }
  v7 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v17, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    v17 = v20;
  v8 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  size = v17.__r_.__value_.__l.__size_;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = v17.__r_.__value_.__l.__size_;
  if (v8)
  {
    if (v6)
      goto LABEL_56;
    goto LABEL_28;
  }
  ML3CPPSortableString((std::string *)&v21, (const UInt8 *)&v23);
  if (v9 < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
  LOBYTE(v9) = v22.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v21 + 1);
  if (!v6)
  {
LABEL_28:
    if ((v9 & 0x80u) == 0)
      v11 = v9;
    else
      v11 = size;
    if (!v11)
    {
      v12 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = v23.__r_.__value_.__l.__size_;
      if (!v12)
      {
        (*(void (**)(__int128 *__return_ptr, ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 168))(&v21, this, a2);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
        else
          v16 = v22;
        if ((v9 & 0x80) != 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        v17 = v16;
        *(_QWORD *)&v21 = off_1E5B4D010;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        v13 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
        size = v17.__r_.__value_.__l.__size_;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v13 = v17.__r_.__value_.__l.__size_;
        if (!v13)
        {
          v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v14 = v19.__r_.__value_.__l.__size_;
          if (!v14)
          {
            (*(void (**)(__int128 *__return_ptr, ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 176))(&v21, this, a2);
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
            else
              v16 = v22;
            if (v9 < 0)
              operator delete(v17.__r_.__value_.__l.__data_);
            v17 = v16;
            *(_QWORD *)&v21 = off_1E5B4D010;
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v22.__r_.__value_.__l.__data_);
            LOBYTE(v9) = *((_BYTE *)&v17.__r_.__value_.__s + 23);
            size = v17.__r_.__value_.__l.__size_;
          }
        }
      }
    }
  }
LABEL_56:
  if ((v9 & 0x80u) == 0)
    size = v9;
  if (size && (_DWORD)a2)
  {
    ML3CPPSanitizeString((std::string *)&v21, (unint64_t)&v17);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
    LOBYTE(v9) = v22.__r_.__value_.__s.__data_[7];
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v15 = (std::string *)(a3 + 16);
  if ((v9 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(v15, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)&v17.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_71;
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
LABEL_71:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1AC20AC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a47 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a25 < 0)
    operator delete(a20);
  if (a32 < 0)
    operator delete(a27);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  _Unwind_Resume(exception_object);
}

void ML3StoreArtistImportItem::getEffectiveSortArtist(ML3StoreArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  std::string::size_type v7;
  int v8;
  std::string::size_type size;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  __int128 v14;
  std::string v15;
  std::string v16;

  (*(void (**)(__int128 *__return_ptr, ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 318767105);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v15;
  }
  (*(void (**)(__int128 *__return_ptr, ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 318767106);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = v15;
  }
  v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  v7 = v15.__r_.__value_.__s.__data_[7];
  v8 = v15.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0)
    v10 = v15.__r_.__value_.__s.__data_[7];
  else
    v10 = *((_QWORD *)&v14 + 1);
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0)
    v7 = size;
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (unint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(_QWORD *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0)
LABEL_31:
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1AC20AFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v27;
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (v27 < 0)
    operator delete(a13);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

void ML3StoreArtistImportItem::getEffectiveSortSeriesName(ML3StoreArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  std::string::size_type v7;
  int v8;
  std::string::size_type size;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  __int128 v14;
  std::string v15;
  std::string v16;

  (*(void (**)(__int128 *__return_ptr, ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 318767107);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v15;
  }
  (*(void (**)(__int128 *__return_ptr, ML3StoreArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 318767108);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = v15;
  }
  v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  v7 = v15.__r_.__value_.__s.__data_[7];
  v8 = v15.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0)
    v10 = v15.__r_.__value_.__s.__data_[7];
  else
    v10 = *((_QWORD *)&v14 + 1);
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0)
    v7 = size;
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (unint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(_QWORD *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0)
LABEL_31:
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1AC20B244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v27;
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (v27 < 0)
    operator delete(a13);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t ML3StoreArtistImportItem::sortPropertyKeyForPropertyKey(ML3StoreArtistImportItem *this, int a2)
{
  int v2;
  unsigned int v3;

  if (a2 == 318767105)
    v2 = 318767106;
  else
    v2 = 0;
  if (a2 == 318767107)
    v3 = 318767108;
  else
    v3 = v2;
  if (a2 == 301989889)
    return 301989890;
  else
    return v3;
}

uint64_t ML3StoreArtistImportItem::propertyKeyForSortPropertyKey(ML3StoreArtistImportItem *this, int a2)
{
  int v2;
  unsigned int v3;

  if (a2 == 318767106)
    v2 = 318767105;
  else
    v2 = 0;
  if (a2 == 318767108)
    v3 = 318767107;
  else
    v3 = v2;
  if (a2 == 301989890)
    return 301989889;
  else
    return v3;
}

void ML3StoreImportItem::ML3StoreImportItem(ML3StoreImportItem *this, NSDictionary *a2, int a3)
{
  NSDictionary *v5;
  NSDictionary *v6;

  v5 = a2;
  *((_WORD *)this + 8) = 256;
  *((_BYTE *)this + 18) = 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *(_QWORD *)this = &off_1E5B4D468;
  *((_QWORD *)this + 1) = 0;
  v6 = v5;
  *((_QWORD *)this + 8) = v6;
  *((_DWORD *)this + 18) = a3;
  *((_BYTE *)this + 76) = 0;
  *((_BYTE *)this + 17) = 0;

}

uint64_t ML3StoreArtistImportItem::ML3StoreArtistImportItem(uint64_t a1, void *a2, int a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;

  v9 = a2;
  v10 = a5;
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)a1 = &off_1E5B4E3F0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = objc_msgSend(v9, "copy");
  *(_DWORD *)(a1 + 72) = a3;
  *(_QWORD *)(a1 + 80) = a4;
  v11 = v10;
  *(_QWORD *)(a1 + 88) = v11;
  *(_BYTE *)(a1 + 17) = 0;

  return a1;
}

void sub_1AC20B4C0(_Unwind_Exception *a1)
{
  void *v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  *v2 = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(v4);

  _Unwind_Resume(a1);
}

void _track::~_track(void **this)
{
  _track::~_track(this);
  JUMPOUT(0x1AF43C744);
}

{
  void **v2;
  void *v3;

  *this = &off_1E5B51218;
  free(this[2]);
  v2 = (void **)this[7];
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v2[1] = v3;
      operator delete(v3);
    }
    MEMORY[0x1AF43C744](v2, 0x10C402FEFCB83);
  }
}

void _compatible_genre_constraint::~_compatible_genre_constraint(_compatible_genre_constraint *this)
{
  _compatible_genre_constraint::~_compatible_genre_constraint(this);
  JUMPOUT(0x1AF43C744);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  *(_QWORD *)this = &off_1E5B4F428;
  v2 = *((_QWORD *)this + 3);
  v3 = *(_QWORD **)(v2 + 16);
  if (!v3)
  {
LABEL_8:
    v8 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v8)
      operator delete(v8);
    MEMORY[0x1AF43C744](v2, 0x10A0C408EF24B1CLL);
    return;
  }
  do
  {
    v4 = v3[3];
    if (v4)
    {
      v5 = std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v4);
      MEMORY[0x1AF43C744](v5, 0x10A0C408EF24B1CLL);
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v6 = *(_QWORD **)(v2 + 16);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    goto LABEL_8;
  }
}

const char *_compatible_genre_constraint::name(_compatible_genre_constraint *this)
{
  return "compatible_genre";
}

uint64_t _compatible_genre_constraint::initialize_state(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(unsigned int *)(a1 + 16);
  if (*(_QWORD *)(v3 + 24) - 1 >= v4 && (v5 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v4)) != 0)
  {
    v6 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,std::equal_to<unsigned long long>,echo_hash_shift<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>>>::find<unsigned long long>(*(_QWORD **)(a1 + 24), v5);
    if (!v6 || (v7 = v6[3], !*(_QWORD *)(v7 + 24)))
    {
      v7 = operator new();
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_DWORD *)(v7 + 32) = 1065353216;
    }
  }
  else
  {
    v7 = 0;
  }
  result = operator new();
  *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E5B50598;
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 40) = v7;
  return result;
}

void _compatible_genre_constraint::parse_config(_compatible_genre_constraint *this, unsigned __int8 *a2, unint64_t *a3)
{
  unint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  float *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  _QWORD *v28;
  _QWORD *i;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  float v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  int8x8_t prime;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint8x8_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  unint64_t v56;
  uint64_t v57;

  v7 = (_QWORD *)*((_QWORD *)this + 1);
  v8 = *a3;
  LODWORD(v57) = *(_DWORD *)&a2[*a3];
  *a3 = v8 + 4;
  (*(void (**)(_QWORD, uint64_t *, uint64_t, uint64_t))(*v7 + 72))(v7[1], &v57, 4, 1);
  *((_DWORD *)this + 4) = v57;
  v9 = (_QWORD *)*((_QWORD *)this + 1);
  v10 = *a3;
  LODWORD(v57) = *(_DWORD *)&a2[*a3];
  *a3 = v10 + 4;
  (*(void (**)(_QWORD, uint64_t *, uint64_t, uint64_t))(*v9 + 72))(v9[1], &v57, 4, 1);
  v11 = v57;
  if ((_DWORD)v57)
  {
    v12 = 0;
    v55 = v57;
    while (1)
    {
      v13 = (_QWORD *)*((_QWORD *)this + 1);
      v14 = *a3;
      v57 = *(_QWORD *)&a2[*a3];
      *a3 = v14 + 8;
      (*(void (**)(_QWORD, uint64_t *, uint64_t, uint64_t))(*v13 + 72))(v13[1], &v57, 8, 1);
      v15 = v57;
      v16 = (_QWORD *)*((_QWORD *)this + 1);
      v17 = *a3;
      LODWORD(v57) = *(_DWORD *)&a2[*a3];
      *a3 = v17 + 4;
      (*(void (**)(_QWORD, uint64_t *, uint64_t, uint64_t))(*v16 + 72))(v16[1], &v57, 4, 1);
      v18 = v57;
      v19 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,std::equal_to<unsigned long long>,echo_hash_shift<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>>>::find<unsigned long long>(*((_QWORD **)this + 3), v15);
      if (!v19)
        break;
      v20 = v19[3];
      if (v18)
        goto LABEL_5;
LABEL_6:
      if (++v12 == v11)
        return;
    }
    v20 = operator new();
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_DWORD *)(v20 + 32) = 1065353216;
    v23 = (float *)*((_QWORD *)this + 3);
    v24 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
    v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
    v56 = ((v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27)) ^ (((v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27)) >> 31);
    v26 = *((_QWORD *)v23 + 1);
    if (v26)
    {
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        v3 = ((v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27)) ^ (((v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27)) >> 31);
        if (v56 >= v26)
          v3 = v56 % v26;
      }
      else
      {
        v3 = v56 & (v26 - 1);
      }
      v28 = *(_QWORD **)(*(_QWORD *)v23 + 8 * v3);
      if (v28)
      {
        for (i = (_QWORD *)*v28; i; i = (_QWORD *)*i)
        {
          v30 = i[1];
          if (v30 == v56)
          {
            if (i[2] == v15)
              goto LABEL_80;
          }
          else
          {
            if (v27.u32[0] > 1uLL)
            {
              if (v30 >= v26)
                v30 %= v26;
            }
            else
            {
              v30 &= v26 - 1;
            }
            if (v30 != v3)
              break;
          }
        }
      }
    }
    v31 = operator new(0x20uLL);
    *v31 = 0;
    v31[1] = v56;
    v31[2] = v15;
    v31[3] = v20;
    v32 = v31;
    v33 = (float)(unint64_t)(*((_QWORD *)v23 + 3) + 1);
    v34 = v23[8];
    if (v26 && (float)(v34 * (float)v26) >= v33)
    {
LABEL_70:
      v50 = *(_QWORD **)v23;
      v51 = *(_QWORD **)(*(_QWORD *)v23 + 8 * v3);
      if (v51)
      {
        *v32 = *v51;
      }
      else
      {
        *v32 = *((_QWORD *)v23 + 2);
        *((_QWORD *)v23 + 2) = v32;
        v50[v3] = v23 + 4;
        if (!*v32)
        {
LABEL_79:
          ++*((_QWORD *)v23 + 3);
LABEL_80:
          v11 = v55;
          if (!v18)
            goto LABEL_6;
          do
          {
LABEL_5:
            v21 = (_QWORD *)*((_QWORD *)this + 1);
            v22 = *a3;
            v57 = *(_QWORD *)&a2[*a3];
            *a3 = v22 + 8;
            (*(void (**)(_QWORD, uint64_t *, uint64_t, uint64_t))(*v21 + 72))(v21[1], &v57, 8, 1);
            std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(v20, v57, v57);
            --v18;
          }
          while (v18);
          goto LABEL_6;
        }
        v52 = *(_QWORD *)(*v32 + 8);
        if ((v26 & (v26 - 1)) != 0)
        {
          if (v52 >= v26)
            v52 %= v26;
        }
        else
        {
          v52 &= v26 - 1;
        }
        v51 = (_QWORD *)(*(_QWORD *)v23 + 8 * v52);
      }
      *v51 = v32;
      goto LABEL_79;
    }
    v54 = v31;
    v35 = (v26 & (v26 - 1)) != 0;
    if (v26 < 3)
      v35 = 1;
    v36 = v35 | (2 * v26);
    v37 = vcvtps_u32_f32(v33 / v34);
    if (v36 <= v37)
      prime = (int8x8_t)v37;
    else
      prime = (int8x8_t)v36;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v26 = *((_QWORD *)v23 + 1);
    if (*(_QWORD *)&prime > v26)
    {
LABEL_36:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v39 = operator new(8 * *(_QWORD *)&prime);
      v40 = *(_QWORD **)v23;
      *(_QWORD *)v23 = v39;
      if (v40)
        operator delete(v40);
      v41 = 0;
      *((int8x8_t *)v23 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)v23 + 8 * v41++) = 0;
      while (*(_QWORD *)&prime != v41);
      v42 = (_QWORD *)*((_QWORD *)v23 + 2);
      if (v42)
      {
        v43 = v42[1];
        v44 = (uint8x8_t)vcnt_s8(prime);
        v44.i16[0] = vaddlv_u8(v44);
        if (v44.u32[0] > 1uLL)
        {
          if (v43 >= *(_QWORD *)&prime)
            v43 %= *(_QWORD *)&prime;
        }
        else
        {
          v43 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)v23 + 8 * v43) = v23 + 4;
        v48 = (_QWORD *)*v42;
        if (*v42)
        {
          do
          {
            v49 = v48[1];
            if (v44.u32[0] > 1uLL)
            {
              if (v49 >= *(_QWORD *)&prime)
                v49 %= *(_QWORD *)&prime;
            }
            else
            {
              v49 &= *(_QWORD *)&prime - 1;
            }
            if (v49 != v43)
            {
              if (!*(_QWORD *)(*(_QWORD *)v23 + 8 * v49))
              {
                *(_QWORD *)(*(_QWORD *)v23 + 8 * v49) = v42;
                goto LABEL_61;
              }
              *v42 = *v48;
              *v48 = **(_QWORD **)(*(_QWORD *)v23 + 8 * v49);
              **(_QWORD **)(*(_QWORD *)v23 + 8 * v49) = v48;
              v48 = v42;
            }
            v49 = v43;
LABEL_61:
            v42 = v48;
            v48 = (_QWORD *)*v48;
            v43 = v49;
          }
          while (v48);
        }
      }
      v26 = (unint64_t)prime;
      goto LABEL_65;
    }
    if (*(_QWORD *)&prime < v26)
    {
      v45 = vcvtps_u32_f32((float)*((unint64_t *)v23 + 3) / v23[8]);
      if (v26 < 3 || (v46 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
      {
        v45 = std::__next_prime(v45);
      }
      else
      {
        v47 = 1 << -(char)__clz(v45 - 1);
        if (v45 >= 2)
          v45 = v47;
      }
      if (*(_QWORD *)&prime <= v45)
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime < v26)
      {
        if (!*(_QWORD *)&prime)
        {
          v53 = *(_QWORD **)v23;
          *(_QWORD *)v23 = 0;
          v3 = v56;
          v32 = v54;
          if (v53)
            operator delete(v53);
          v26 = 0;
          *((_QWORD *)v23 + 1) = 0;
          goto LABEL_66;
        }
        goto LABEL_36;
      }
      v26 = *((_QWORD *)v23 + 1);
    }
LABEL_65:
    v3 = v56;
    v32 = v54;
LABEL_66:
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v3 >= v26)
        v3 %= v26;
    }
    else
    {
      v3 &= v26 - 1;
    }
    goto LABEL_70;
  }
}

void sub_1AC20BC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t _compatible_genre_constraint::in_effect()
{
  return 1;
}

uint64_t _compatible_genre_constraint::passes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)(a3 + 40);
  if (result)
  {
    if (*(_QWORD *)(result + 24))
    {
      v6 = *(unsigned int *)(a1 + 16);
      if (*(_QWORD *)(a4 + 24) - 1 >= v6)
        v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v6);
      else
        v7 = 0;
      return 2
           * (std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>((_QWORD *)result, v7) == 0);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t _compatible_genre_constraint::relax()
{
  return 0;
}

void _constraint::reset(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
}

_QWORD *std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(_QWORD *a1, uint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v5 ^ (v5 >> 31);
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    do
    {
      v11 = result[1];
      if (v6 == v11)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v7.u32[0] > 1uLL)
        {
          if (v11 >= *(_QWORD *)&v2)
            v11 %= *(_QWORD *)&v2;
        }
        else
        {
          v11 &= *(_QWORD *)&v2 - 1;
        }
        if (v11 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,std::equal_to<unsigned long long>,echo_hash_shift<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>>>::find<unsigned long long>(_QWORD *a1, uint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v5 ^ (v5 >> 31);
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    do
    {
      v11 = result[1];
      if (v11 == v6)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v7.u32[0] > 1uLL)
        {
          if (v11 >= *(_QWORD *)&v2)
            v11 %= *(_QWORD *)&v2;
        }
        else
        {
          v11 &= *(_QWORD *)&v2 - 1;
        }
        if (v11 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v8 ^ (v8 >> 31);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8 ^ (v8 >> 31);
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = (_QWORD *)*v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == a2)
            return 0;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v9;
  v15[2] = a3;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v15 = *v23;
LABEL_38:
    *v23 = v15;
    goto LABEL_39;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v24 = *(_QWORD *)(*v15 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_1AC20C0B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void _compatible_genre_constraint_state::~_compatible_genre_constraint_state(_compatible_genre_constraint_state *this)
{
  _compatible_genre_constraint_state::~_compatible_genre_constraint_state(this);
  JUMPOUT(0x1AF43C744);
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)this = &off_1E5B50598;
  v1 = *((_QWORD *)this + 5);
  if (!*(_QWORD *)(v1 + 24))
  {
    v2 = std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
    MEMORY[0x1AF43C744](v2, 0x10A0C408EF24B1CLL);
  }
}

void _distance_constraint::~_distance_constraint(_distance_constraint *this)
{
  JUMPOUT(0x1AF43C744);
}

const char *_distance_constraint::name(_distance_constraint *this)
{
  return "distance";
}

uint64_t _distance_constraint::initialize_state(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 24) = 3;
  *(_QWORD *)(v4 + 32) = a2;
  *(_QWORD *)v4 = &off_1E5B4E868;
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_DWORD *)(v5 + 32) = 1065353216;
  *(_QWORD *)(v4 + 48) = v5;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v4);
  return v4;
}

void sub_1AC20C2C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF43C744](v1, 0x10A1C408CCCB54ELL);
  _Unwind_Resume(a1);
}

uint64_t _distance_constraint::parse_config(_distance_constraint *this, unsigned __int8 *a2, unint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;

  v6 = (_QWORD *)*((_QWORD *)this + 1);
  v7 = *a3;
  v15 = *(_DWORD *)&a2[*a3];
  *a3 = v7 + 4;
  (*(void (**)(_QWORD, unsigned int *, uint64_t, uint64_t))(*v6 + 72))(v6[1], &v15, 4, 1);
  *((_DWORD *)this + 4) = v15;
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  v9 = *a3;
  v15 = *(_DWORD *)&a2[*a3];
  *a3 = v9 + 4;
  (*(void (**)(_QWORD, unsigned int *, uint64_t, uint64_t))(*v8 + 72))(v8[1], &v15, 4, 1);
  *((_QWORD *)this + 3) = v15;
  v10 = (_QWORD *)*((_QWORD *)this + 1);
  v11 = *a3;
  v15 = *(_DWORD *)&a2[*a3];
  *a3 = v11 + 4;
  (*(void (**)(_QWORD, unsigned int *, uint64_t, uint64_t))(*v10 + 72))(v10[1], &v15, 4, 1);
  *((_QWORD *)this + 4) = v15;
  v12 = (_QWORD *)*((_QWORD *)this + 1);
  v13 = *a3;
  v15 = *(_DWORD *)&a2[*a3];
  *a3 = v13 + 4;
  result = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t, uint64_t))(*v12 + 72))(v12[1], &v15, 4, 1);
  *((_QWORD *)this + 5) = v15;
  *((_QWORD *)this + 6) = 1;
  return result;
}

uint64_t _distance_constraint::in_effect()
{
  return 1;
}

BOOL _distance_constraint::passes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a4);
  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,std::equal_to<unsigned long long>,echo_hash_shift<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>>>::find<unsigned long long>(*(_QWORD **)(a3 + 48), v5);
  return v6 && *(_QWORD *)(a3 + 40) > (unint64_t)*((unsigned int *)v6 + 6);
}

BOOL _distance_constraint::relax(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  if (v2 < v3)
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = v4 + v2;
    v6 = v3 - v4;
    if (v3 <= v5)
      v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = v6;
  }
  return v2 < v3;
}

void _distance_constraint::register_track(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  _QWORD *v17;
  _QWORD *i;
  unint64_t v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  void *v41;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a3);
  v6 = v5;
  v7 = *(uint64_t **)(a2 + 48);
  v9 = v7 + 2;
  v8 = (uint64_t *)v7[2];
  if (!v8)
    goto LABEL_9;
  v10 = 0;
  do
  {
    while (v8[2] == v5)
    {
      v10 = 1;
      *((_DWORD *)v8 + 6) = 1;
      v8 = (uint64_t *)*v8;
      if (!v8)
        return;
    }
    ++*((_DWORD *)v8 + 6);
    v8 = (uint64_t *)*v8;
  }
  while (v8);
  if ((v10 & 1) == 0)
  {
LABEL_9:
    v11 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v13 ^ (v13 >> 31);
    v15 = v7[1];
    if (v15)
    {
      v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        v3 = v13 ^ (v13 >> 31);
        if (v14 >= v15)
          v3 = v14 % v15;
      }
      else
      {
        v3 = v14 & (v15 - 1);
      }
      v17 = *(_QWORD **)(*v7 + 8 * v3);
      if (v17)
      {
        for (i = (_QWORD *)*v17; i; i = (_QWORD *)*i)
        {
          v19 = i[1];
          if (v19 == v14)
          {
            if (i[2] == v5)
              return;
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v19 >= v15)
                v19 %= v15;
            }
            else
            {
              v19 &= v15 - 1;
            }
            if (v19 != v3)
              break;
          }
        }
      }
    }
    v20 = operator new(0x20uLL);
    *v20 = 0;
    v20[1] = v14;
    v20[2] = v6;
    *((_DWORD *)v20 + 6) = 1;
    v21 = (float)(unint64_t)(v7[3] + 1);
    v22 = *((float *)v7 + 8);
    if (v15 && (float)(v22 * (float)v15) >= v21)
    {
LABEL_72:
      v38 = *v7;
      v39 = *(_QWORD **)(*v7 + 8 * v3);
      if (v39)
      {
        *v20 = *v39;
      }
      else
      {
        *v20 = *v9;
        *v9 = v20;
        *(_QWORD *)(v38 + 8 * v3) = v9;
        if (!*v20)
        {
LABEL_81:
          ++v7[3];
          return;
        }
        v40 = *(_QWORD *)(*v20 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v40 >= v15)
            v40 %= v15;
        }
        else
        {
          v40 &= v15 - 1;
        }
        v39 = (_QWORD *)(*v7 + 8 * v40);
      }
      *v39 = v20;
      goto LABEL_81;
    }
    v23 = 1;
    if (v15 >= 3)
      v23 = (v15 & (v15 - 1)) != 0;
    v24 = v23 | (2 * v15);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v15 = v7[1];
    }
    if (*(_QWORD *)&prime > v15)
      goto LABEL_38;
    if (*(_QWORD *)&prime < v15)
    {
      v33 = vcvtps_u32_f32((float)(unint64_t)v7[3] / *((float *)v7 + 8));
      if (v15 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v15)
      {
        v15 = v7[1];
      }
      else
      {
        if (prime)
        {
LABEL_38:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = (void *)*v7;
          *v7 = (uint64_t)v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          v7[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*v7 + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*v9;
          if (*v9)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*v7 + 8 * v31) = v9;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(_QWORD *)(*v7 + 8 * v37))
                  {
                    *(_QWORD *)(*v7 + 8 * v37) = v30;
                    goto LABEL_63;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*v7 + 8 * v37);
                  **(_QWORD **)(*v7 + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_63:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v15 = (unint64_t)prime;
          goto LABEL_67;
        }
        v41 = (void *)*v7;
        *v7 = 0;
        if (v41)
          operator delete(v41);
        v15 = 0;
        v7[1] = 0;
      }
    }
LABEL_67:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v3 = v14 % v15;
      else
        v3 = v14;
    }
    else
    {
      v3 = (v15 - 1) & v14;
    }
    goto LABEL_72;
  }
}

void sub_1AC20C8F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _distance_constraint::reset(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 32);
  if (v2)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 8) + 64))(*(_QWORD *)(*(_QWORD *)(result + 8) + 8), v2);
    if (result >= v2)
      result = result % v2;
    *(_QWORD *)(a2 + 40) += result;
  }
  return result;
}

uint64_t _distance_constraint::metadata_id_from_track(_distance_constraint *this, _track *a2)
{
  unint64_t v2;

  if (a2 && (v2 = *((unsigned int *)this + 4), *((_QWORD *)a2 + 3) - 1 >= v2))
    return *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v2);
  else
    return 0;
}

void _distance_constraint_state::~_distance_constraint_state(_distance_constraint_state *this)
{
  _distance_constraint_state::~_distance_constraint_state(this);
  JUMPOUT(0x1AF43C744);
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *(_QWORD *)this = &off_1E5B4E868;
  v1 = *((_QWORD *)this + 6);
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 16);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)v1;
    *(_QWORD *)v1 = 0;
    if (v4)
      operator delete(v4);
    MEMORY[0x1AF43C744](v1, 0x10A0C408EF24B1CLL);
  }
}

void _already_added_constraint::~_already_added_constraint(_already_added_constraint *this)
{
  JUMPOUT(0x1AF43C744);
}

const char *_already_added_constraint::name(_already_added_constraint *this)
{
  return "already_added";
}

uint64_t _already_added_constraint::parse_config(uint64_t this, unsigned __int8 *a2, unint64_t *a3, unsigned int a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v4 = (_QWORD *)this;
  if (a4 < 2)
  {
    *(_OWORD *)(this + 24) = xmmword_1AC3DCDC0;
    v15 = 10;
    *(_QWORD *)(this + 40) = 10;
  }
  else
  {
    v7 = *(_QWORD **)(this + 8);
    v8 = *a3;
    v16 = *(_DWORD *)&a2[*a3];
    *a3 = v8 + 4;
    (*(void (**)(_QWORD, unsigned int *, uint64_t, uint64_t))(*v7 + 72))(v7[1], &v16, 4, 1);
    v4[3] = v16;
    v9 = (_QWORD *)v4[1];
    v10 = *a3;
    v16 = *(_DWORD *)&a2[*a3];
    *a3 = v10 + 4;
    (*(void (**)(_QWORD, unsigned int *, uint64_t, uint64_t))(*v9 + 72))(v9[1], &v16, 4, 1);
    v4[4] = v16;
    v11 = (_QWORD *)v4[1];
    v12 = *a3;
    v16 = *(_DWORD *)&a2[*a3];
    *a3 = v12 + 4;
    (*(void (**)(_QWORD, unsigned int *, uint64_t, uint64_t))(*v11 + 72))(v11[1], &v16, 4, 1);
    v4[5] = v16;
    v13 = (_QWORD *)v4[1];
    v14 = *a3;
    v16 = *(_DWORD *)&a2[*a3];
    *a3 = v14 + 4;
    this = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t, uint64_t))(*v13 + 72))(v13[1], &v16, 4, 1);
    v15 = v16;
  }
  v4[6] = v15;
  return this;
}

BOOL _already_added_constraint::passes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(*(_QWORD *)(a3 + 32) + 186))
    return _distance_constraint::passes(a1, a2, a3, a4);
  else
    return std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>,std::equal_to<unsigned long long>,echo_hash_shift<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_set<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>> *>>>::find<unsigned long long>(*(_QWORD **)(a3 + 48), *(_QWORD *)(a4 + 8)) != 0;
}

uint64_t _already_added_constraint::relax(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (!*(_BYTE *)(*(_QWORD *)(a2 + 32) + 186))
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  if (v2 >= v3)
    return 0;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = v4 + v2;
  v6 = v3 - v4;
  if (v3 > v5)
    v2 = v6;
  *(_QWORD *)(a2 + 40) = v2;
  return 1;
}

uint64_t _already_added_constraint::metadata_id_from_track(_already_added_constraint *this, _track *a2)
{
  if (a2)
    return *((_QWORD *)a2 + 1);
  else
    return 0;
}

void _skip_count_constraint::~_skip_count_constraint(_skip_count_constraint *this)
{
  JUMPOUT(0x1AF43C744);
}

const char *_skip_count_constraint::name(_skip_count_constraint *this)
{
  return "skip_count";
}

uint64_t _skip_count_constraint::initialize_state(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_1E5B4D140;
  *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t _skip_count_constraint::parse_config(_skip_count_constraint *this, unsigned __int8 *a2, unint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;

  v6 = (_QWORD *)*((_QWORD *)this + 1);
  v7 = *a3;
  v15 = *(_DWORD *)&a2[*a3];
  *a3 = v7 + 4;
  (*(void (**)(_QWORD, unsigned int *, uint64_t, uint64_t))(*v6 + 72))(v6[1], &v15, 4, 1);
  *((_QWORD *)this + 2) = v15;
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  v9 = *a3;
  v15 = *(_DWORD *)&a2[*a3];
  *a3 = v9 + 4;
  (*(void (**)(_QWORD, unsigned int *, uint64_t, uint64_t))(*v8 + 72))(v8[1], &v15, 4, 1);
  *((_DWORD *)this + 6) = v15;
  v10 = (_QWORD *)*((_QWORD *)this + 1);
  v11 = *a3;
  v15 = *(_DWORD *)&a2[*a3];
  *a3 = v11 + 4;
  (*(void (**)(_QWORD, unsigned int *, uint64_t, uint64_t))(*v10 + 72))(v10[1], &v15, 4, 1);
  *((_DWORD *)this + 7) = v15;
  v12 = (_QWORD *)*((_QWORD *)this + 1);
  v13 = *a3;
  v15 = *(_DWORD *)&a2[*a3];
  *a3 = v13 + 4;
  result = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t, uint64_t))(*v12 + 72))(v12[1], &v15, 4, 1);
  *((_DWORD *)this + 8) = v15;
  return result;
}

uint64_t _skip_count_constraint::in_effect()
{
  return 1;
}

BOOL _skip_count_constraint::passes(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  int v7;
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(a4 + 32))
  {
    v6 = *(_DWORD *)(a4 + 48);
    v7 = *(_DWORD *)(a4 + 40);
    if (!v6)
      return 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    if ((*(unsigned int (**)(_QWORD, _QWORD, char *, char *))(*a2 + 40))(a2[1], *(_QWORD *)(a4 + 8), (char *)&v14 + 4, (char *)&v13 + 4))
    {
      HIDWORD(v14) = 0;
      HIDWORD(v13) = 0;
    }
    v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, uint64_t *))(*a2 + 48))(a2[1], *(_QWORD *)(a4 + 8), &v14, &v13);
    v7 = HIDWORD(v13);
    v10 = v14;
    if (v9)
      v6 = 0;
    else
      v6 = v13;
    if (v9)
      v10 = 0;
    *(_DWORD *)(a4 + 36) = HIDWORD(v14);
    *(_DWORD *)(a4 + 40) = v7;
    *(_DWORD *)(a4 + 44) = v10;
    *(_DWORD *)(a4 + 48) = v6;
    *(_BYTE *)(a4 + 32) = 1;
    if (!v6)
      return 0;
  }
  if (*(_QWORD *)(a1 + 16) < (unint64_t)v6)
  {
    v11 = *(_DWORD *)(a4 + 44);
    if (*(_DWORD *)(a1 + 28) - 1 >= (*(_DWORD *)(a4 + 36) - v11)
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8))
       - v11 < *(_DWORD *)(a1 + 24))
    {
      return 100 * v6 > *(_DWORD *)(a1 + 32) * (v7 + v6);
    }
  }
  return 0;
}

uint64_t _skip_count_constraint::relax()
{
  return 0;
}

void _constraint_state::~_constraint_state(_constraint_state *this)
{
  JUMPOUT(0x1AF43C744);
}

void _random_jitter_constraint::~_random_jitter_constraint(_random_jitter_constraint *this)
{
  JUMPOUT(0x1AF43C744);
}

const char *_random_jitter_constraint::name(_random_jitter_constraint *this)
{
  return "random_jitter";
}

uint64_t _random_jitter_constraint::initialize_state(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_1E5B4D140;
  *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 5;
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t _random_jitter_constraint::parse_config(_random_jitter_constraint *this, unsigned __int8 *a2, unint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  int v12;

  v6 = (_QWORD *)*((_QWORD *)this + 1);
  v7 = *a3;
  v11 = *(_DWORD *)&a2[*a3];
  *a3 = v7 + 4;
  (*(void (**)(_QWORD, int *, uint64_t, uint64_t))(*v6 + 72))(v6[1], &v11, 4, 1);
  *((_DWORD *)this + 4) = v11;
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  v9 = *a3;
  v12 = *(_DWORD *)&a2[*a3];
  *a3 = v9 + 4;
  result = (*(uint64_t (**)(_QWORD, int *, uint64_t, uint64_t))(*v8 + 72))(v8[1], &v12, 4, 1);
  *((_DWORD *)this + 5) = v12;
  return result;
}

BOOL _random_jitter_constraint::in_effect(_random_jitter_constraint *this, _constraint_state *a2)
{
  return *((_QWORD *)a2 + 2) < 2uLL;
}

BOOL _random_jitter_constraint::passes(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = 20;
  if (!*(_QWORD *)(a3 + 16))
    v3 = 16;
  v4 = *(_DWORD *)(a1 + v3);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(*a2 + 64))(a2[1], 100);
  v6 = v5 % 0x64;
  if (v5 < 0x64)
    v6 = v5;
  return v6 > v4;
}

BOOL _random_jitter_constraint::relax(_random_jitter_constraint *this, _constraint_state *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 2);
  if (!v2)
    *((_QWORD *)a2 + 2) = 1;
  return v2 == 0;
}

uint64_t _echo_context::initialize_playlist(_echo_context *this, uint64_t a2)
{
  uint64_t track;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v30;

  if (!a2)
    return 0;
  track = _echo_context::fetch_track(this, a2);
  if (!track)
    return 0;
  v4 = track;
  v5 = operator new();
  v6 = *((_BYTE *)this + 96);
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 152) = 0;
  v7 = (uint64_t **)(v5 + 152);
  v8 = *((_QWORD *)this + 7);
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 168) = 0;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_QWORD *)(v5 + 128) = 0;
  *(_QWORD *)v5 = this;
  *(_QWORD *)(v5 + 8) = v4;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 48) = 0;
  v9 = operator new();
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_DWORD *)(v9 + 32) = 1065353216;
  *(_QWORD *)(v5 + 136) = v9;
  if (v8)
  {
    v10 = 0;
  }
  else
  {
    v8 = operator new();
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_DWORD *)(v8 + 32) = 1065353216;
    v10 = 1;
  }
  *(_QWORD *)(v5 + 144) = v8;
  *(_BYTE *)(v5 + 185) = v10;
  *(_QWORD *)(v5 + 56) = 0x7FFFFFFFLL;
  *(_BYTE *)(v5 + 184) = v6 ^ 1;
  *(_WORD *)(v5 + 186) = 0;
  v11 = *((_QWORD *)this + 9) - *((_QWORD *)this + 8);
  if (v11)
  {
    v12 = 0;
    v13 = v11 >> 3;
    v30 = v13 - 1;
    if (v13 <= 1)
      v14 = 1;
    else
      v14 = v13;
    do
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v12);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 24))(v15, v5);
      v17 = v16;
      v19 = *(uint64_t **)(v5 + 160);
      v18 = *(_QWORD *)(v5 + 168);
      if ((unint64_t)v19 >= v18)
      {
        v21 = *v7;
        v22 = v19 - *v7;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        v24 = v18 - (_QWORD)v21;
        if (v24 >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          if (v25 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = (char *)operator new(8 * v25);
        }
        else
        {
          v26 = 0;
        }
        v27 = (uint64_t *)&v26[8 * v22];
        *v27 = v17;
        v20 = v27 + 1;
        if (v19 != v21)
        {
          do
          {
            v28 = *--v19;
            *--v27 = v28;
          }
          while (v19 != v21);
          v19 = *v7;
        }
        *(_QWORD *)(v5 + 152) = v27;
        *(_QWORD *)(v5 + 160) = v20;
        *(_QWORD *)(v5 + 168) = &v26[8 * v25];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v19 = v16;
        v20 = v19 + 1;
      }
      *(_QWORD *)(v5 + 160) = v20;
      ++v12;
    }
    while (v12 != v14);
    *(_QWORD *)(v5 + 176) = v30;
  }
  return v5;
}

void sub_1AC20D2EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = *v2;
  if (*v2)
  {
    v1[20] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[14];
  if (v6)
  {
    v1[15] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[11];
  if (v7)
    operator delete(v7);
  v8 = *v3;
  if (*v3)
  {
    v1[9] = v8;
    operator delete(v8);
  }
  MEMORY[0x1AF43C744](v1, 0x10B0C403C88389ELL);
  _Unwind_Resume(a1);
}

uint64_t _echo_context::fetch_track(_echo_context *this, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  FILE *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  void (*v13)(_QWORD *);
  FILE *v14;
  unint64_t v16;
  unint64_t v17;

  v17 = 0;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t *))(*(_QWORD *)this + 8))(*((_QWORD *)this + 1), a2, &v17);
  ++*((_QWORD *)this + 5);
  if (!v4)
    return 0;
  v5 = v17;
  if (!v17)
  {
    v14 = (FILE *)*((_QWORD *)this + 2);
    if (v14)
      fwrite("metadata_size not being set by metadata_for_global_id callback\n", 0x3FuLL, 1uLL, v14);
    return 0;
  }
  v6 = (_QWORD *)v4;
  ++*((_QWORD *)this + 6);
  v16 = v5 >> 3;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 72))(*((_QWORD *)this + 1), v4, 8);
  v7 = (FILE *)*((_QWORD *)this + 2);
  if (v7)
  {
    fprintf(v7, "fetch metadata: track id = %llu, ", a2);
    if (v5 >= 8)
    {
      v8 = 0;
      if (v16 <= 1)
        v9 = 1;
      else
        v9 = v5 >> 3;
      do
      {
        if (v16 - 1 == v8)
          v10 = "\n";
        else
          v10 = ", ";
        fprintf(*((FILE **)this + 2), "id %d = %llu%s", v8, v6[v8], v10);
        ++v8;
      }
      while (v9 != v8);
    }
  }
  v11 = operator new();
  *(_QWORD *)v11 = &off_1E5B51218;
  *(_QWORD *)(v11 + 8) = a2;
  *(_QWORD *)(v11 + 24) = v16;
  v12 = malloc_type_malloc(v5 & 0xFFFFFFFFFFFFFFF8, 0x100004000313F17uLL);
  *(_QWORD *)(v11 + 16) = v12;
  memmove(v12, v6, v5 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 44) = 0;
  *(_QWORD *)(v11 + 36) = 0;
  v13 = *(void (**)(_QWORD *))(*(_QWORD *)this + 32);
  if (v13)
    v13(v6);
  else
    free(v6);
  return v11;
}

void sub_1AC20D514(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF43C744](v1, 0x10B1C406069778BLL);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void _playlist::add_track(_playlist *this, _track *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;

  ++*((_QWORD *)this + 7);
  v5 = *((_QWORD *)this + 17);
  v6 = *((_QWORD *)a2 + 1);
  v7 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v9 ^ (v9 >> 31);
  v11 = *(_QWORD *)(v5 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v2 = v9 ^ (v9 >> 31);
      if (v10 >= v11)
        v2 = v10 % v11;
    }
    else
    {
      v2 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)v5 + 8 * v2);
    if (v13)
    {
      for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == v6)
            goto LABEL_40;
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v2)
            break;
        }
      }
    }
  }
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = v10;
  v16[2] = v6;
  v17 = (float)(unint64_t)(*(_QWORD *)(v5 + 24) + 1);
  v18 = *(float *)(v5 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(v5, v22);
    v11 = *(_QWORD *)(v5 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v2 = v10 % v11;
      else
        v2 = v10;
    }
    else
    {
      v2 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)v5;
  v24 = *(_QWORD **)(*(_QWORD *)v5 + 8 * v2);
  if (v24)
  {
    *v16 = *v24;
LABEL_38:
    *v24 = v16;
    goto LABEL_39;
  }
  *v16 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = v16;
  *(_QWORD *)(v23 + 8 * v2) = v5 + 16;
  if (*v16)
  {
    v25 = *(_QWORD *)(*v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)v5 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(v5 + 24);
LABEL_40:
  v26 = *(_QWORD *)this;
  v27 = *(_QWORD *)(*(_QWORD *)this + 72) - *(_QWORD *)(*(_QWORD *)this + 64);
  if (v27)
  {
    v28 = 0;
    v29 = v27 >> 3;
    if (v29 <= 1)
      v30 = 1;
    else
      v30 = v29;
    do
    {
      v31 = *(_QWORD *)(*(_QWORD *)(v26 + 64) + 8 * v28);
      (*(void (**)(uint64_t, _QWORD, _track *))(*(_QWORD *)v31 + 64))(v31, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v28++), a2);
    }
    while (v30 != v28);
  }
  v32 = *((_QWORD *)a2 + 1);
  v34 = (char *)*((_QWORD *)this + 15);
  v33 = *((_QWORD *)this + 16);
  if ((unint64_t)v34 >= v33)
  {
    v36 = (char *)*((_QWORD *)this + 14);
    v37 = (v34 - v36) >> 3;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v39 = v33 - (_QWORD)v36;
    if (v39 >> 2 > v38)
      v38 = v39 >> 2;
    v40 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8;
    v41 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v40)
      v41 = v38;
    if (v41)
    {
      v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v41);
      v36 = (char *)*((_QWORD *)this + 14);
      v34 = (char *)*((_QWORD *)this + 15);
    }
    else
    {
      v42 = 0;
    }
    v43 = (_QWORD *)(v41 + 8 * v37);
    v44 = v41 + 8 * v42;
    *v43 = v32;
    v35 = v43 + 1;
    while (v34 != v36)
    {
      v45 = *((_QWORD *)v34 - 1);
      v34 -= 8;
      *--v43 = v45;
    }
    *((_QWORD *)this + 14) = v43;
    *((_QWORD *)this + 15) = v35;
    *((_QWORD *)this + 16) = v44;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *(_QWORD *)v34 = v32;
    v35 = v34 + 8;
  }
  *((_QWORD *)this + 15) = v35;
}

void sub_1AC20D8F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL _playlist::add_more_candidates(_playlist *this)
{
  uint64_t v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t track;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  _BOOL8 result;
  _track *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;

  v2 = 104;
  if (!*((_BYTE *)this + 187))
    v2 = 100;
  v3 = *(_DWORD *)(*(_QWORD *)this + v2);
  v5 = (_QWORD *)((char *)this + 32);
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  while (v4)
  {
    v6 = v4[1];
    v7 = v6 - *v4;
    if (v6 == *v4)
      break;
    v8 = *((_QWORD *)this + 5);
    if (v8 >= v7 >> 3)
      break;
    v9 = *(_QWORD *)(*v4 + 8 * v8);
    track = _playlist::fetch_track(this, v9);
    v27 = 0;
    if (!track)
    {
      v27 = 1;
LABEL_11:
      v12 = (_QWORD *)*((_QWORD *)this + 4);
      v11 = *((_QWORD *)this + 5);
      v13 = v12[1];
      v14 = *v12 + 8 * v11;
      v15 = v13 - (v14 + 8);
      if (v13 != v14 + 8)
        memmove((void *)(*v12 + 8 * v11), (const void *)(v14 + 8), v13 - (v14 + 8));
      v12[1] = v14 + v15;
      goto LABEL_14;
    }
    _playlist::add_candidate_id(this, v9);
    LOBYTE(track) = _playlist::add_candidates_from_track(this, (_track *)track, *((_DWORD *)this + 12), v3, &v27);
    if (v27)
      goto LABEL_11;
    ++*((_QWORD *)this + 5);
LABEL_14:
    v4 = (_QWORD *)*v5;
    v16 = *(void **)(*v5 + 8);
    v17 = (uint64_t)v16 - *(_QWORD *)*v5;
    if (v17)
    {
      if (*((_QWORD *)this + 5) >= (unint64_t)(v17 >> 3))
      {
        v18 = *((_QWORD *)this + 6) + 1;
        *((_QWORD *)this + 5) = 0;
        *((_QWORD *)this + 6) = v18;
      }
    }
    else
    {
      if (v16)
        operator delete(v16);
      MEMORY[0x1AF43C744](v4, 0x10C402FEFCB83);
      v4 = 0;
      *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    if ((track & 1) != 0)
      return 1;
  }
  v19 = (uint64_t *)*((_QWORD *)this + 15);
  while (1)
  {
    v20 = (uint64_t *)*((_QWORD *)this + 14);
    result = v19 != v20;
    if (v19 == v20)
      break;
    v22 = (_track *)_playlist::fetch_track(this, *v20);
    if (v22)
      v23 = _playlist::add_candidates_from_track(this, v22, 0, 0, &v28);
    else
      v23 = 0;
    v25 = *((_QWORD *)this + 14);
    v24 = *((_QWORD *)this + 15);
    v26 = v24 - (v25 + 8);
    if (v24 != v25 + 8)
      memmove(*((void **)this + 14), (const void *)(v25 + 8), v24 - (v25 + 8));
    v19 = (uint64_t *)(v25 + v26);
    *((_QWORD *)this + 15) = v25 + v26;
    if (v23)
      return 1;
  }
  return result;
}

uint64_t _playlist::add_candidates_from_track(_playlist *this, _track *a2, int a3, unsigned int a4, BOOL *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int next_in;
  uint64_t next_in_low;
  char *v17;
  uLong v18;
  const char *v19;
  uLong total_out;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *);
  uint64_t v25;
  unint64_t v26;
  FILE *v27;
  char *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *);
  void **v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  void *v46;
  int v48;
  BOOL *v49;
  z_stream strm;

  v10 = *(_QWORD **)this;
  ++*(_QWORD *)(*(_QWORD *)this + 24);
  if (a2)
  {
    v11 = (_QWORD *)*((_QWORD *)a2 + 7);
    if (!v11 || *(_QWORD *)(*((_QWORD *)a2 + 7) + 8) == *v11)
    {
      v12 = *((_QWORD *)a2 + 1);
      if (v12)
      {
        v13 = (char *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*v10 + 24))(v10[1], v12, 0);
        if (v13)
        {
          v14 = v13;
          ++v10[4];
          LODWORD(strm.next_in) = *(_DWORD *)v13;
          (*(void (**)(_QWORD, z_stream *, uint64_t, uint64_t))(*v10 + 72))(v10[1], &strm, 4, 1);
          next_in = (int)strm.next_in;
          LODWORD(strm.next_in) = *((_DWORD *)v14 + 1);
          (*(void (**)(_QWORD, z_stream *, uint64_t, uint64_t))(*v10 + 72))(v10[1], &strm, 4, 1);
          v48 = next_in;
          v49 = a5;
          if (next_in)
          {
            next_in_low = LODWORD(strm.next_in);
            strm.next_in = (Bytef *)(v14 + 8);
            strm.avail_in = next_in_low;
            strm.zalloc = 0;
            strm.zfree = 0;
            strm.total_out = 0;
            v17 = 0;
            if (!inflateInit_(&strm, "1.2.12", 112))
            {
              v18 = 3 * next_in_low;
              v17 = (char *)malloc_type_malloc(3 * next_in_low, 0xE2AAD2B4uLL);
              v19 = "encountered unexpected status %d while inflating\n";
              while (1)
              {
                total_out = strm.total_out;
                if (strm.total_out >= v18)
                {
                  v18 += v18 >> 1;
                  v17 = (char *)malloc_type_realloc(v17, v18, 0x1D83764EuLL);
                  total_out = strm.total_out;
                }
                strm.next_out = (Bytef *)&v17[total_out];
                strm.avail_out = v18 - total_out;
                v21 = inflate(&strm, 2);
                if ((_DWORD)v21 == 1)
                {
                  v22 = 1;
                  goto LABEL_19;
                }
                v22 = v21;
                if ((_DWORD)v21 == -5 && !strm.avail_in)
                  break;
                if ((_DWORD)v21)
                {
                  a5 = v49;
                  goto LABEL_21;
                }
              }
              v22 = 4294967291;
LABEL_19:
              a5 = v49;
              if (!inflateEnd(&strm))
                goto LABEL_22;
              v19 = "encountered unexpected status %d while finishing inflating\n";
LABEL_21:
              fprintf((FILE *)*MEMORY[0x1E0C80C10], v19, v22);
              free(v17);
              v17 = 0;
            }
LABEL_22:
            v24 = *(void (**)(char *))(*v10 + 32);
            if (v24)
            {
              v24(v14);
              if (!v17)
                goto LABEL_42;
            }
            else
            {
              free(v14);
              if (!v17)
                goto LABEL_42;
            }
            v23 = 0;
            v14 = v17;
          }
          else
          {
            v23 = 8;
          }
          LODWORD(strm.next_in) = *(_DWORD *)&v14[v23];
          v25 = v23 | 4;
          (*(void (**)(_QWORD, z_stream *, uint64_t, uint64_t))(*v10 + 72))(v10[1], &strm, 4, 1);
          v26 = LODWORD(strm.next_in);
          v27 = (FILE *)v10[2];
          if (v27)
            fprintf(v27, "fetch sims: track id = %llu, count = %lu\n", *((_QWORD *)a2 + 1), LODWORD(strm.next_in));
          v28 = &v14[v25];
          (*(void (**)(_QWORD, char *, uint64_t, unint64_t))(*v10 + 72))(v10[1], v28, 8, v26);
          v29 = *((_QWORD *)a2 + 7);
          if (v29)
          {
            v30 = *(void **)v29;
            if (*(_QWORD *)v29)
            {
              *(_QWORD *)(v29 + 8) = v30;
              operator delete(v30);
            }
            MEMORY[0x1AF43C744](v29, 0x10C402FEFCB83);
          }
          v31 = (_QWORD *)operator new();
          v32 = v31;
          v31[1] = 0;
          v31[2] = 0;
          *v31 = 0;
          if ((_DWORD)v26)
          {
            v33 = std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v26);
            *v32 = v33;
            v32[2] = &v33[v34];
            bzero(v33, 8 * v26);
            v32[1] = &v33[v26];
            *((_QWORD *)a2 + 7) = v32;
            do
            {
              v35 = *(_QWORD *)v28;
              v28 += 8;
              *v33++ = v35;
              --v26;
            }
            while (v26);
          }
          else
          {
            *((_QWORD *)a2 + 7) = v31;
          }
          a5 = v49;
          if (v48 || (v36 = *(void (**)(char *))(*v10 + 32)) == 0)
            free(v14);
          else
            v36(v14);
        }
      }
    }
  }
LABEL_42:
  v37 = (void **)*((_QWORD *)a2 + 7);
  if (v37)
  {
    v38 = ((_BYTE *)v37[1] - (_BYTE *)*v37) >> 3;
    if (a4)
      goto LABEL_44;
LABEL_47:
    v39 = 0;
    if (v38)
      goto LABEL_48;
LABEL_56:
    v45 = 0;
    if (!v37)
      return v45;
    goto LABEL_57;
  }
  v38 = 0;
  if (!a4)
    goto LABEL_47;
LABEL_44:
  v39 = a4 * a3;
  if (v38 <= a4 + v39)
  {
    v38 -= v39;
    *a5 = 1;
    if (v38)
      goto LABEL_48;
    goto LABEL_56;
  }
  v38 = a4;
  *a5 = 0;
LABEL_48:
  v40 = 1;
  do
  {
    v41 = (_QWORD *)*((_QWORD *)a2 + 7);
    if (v41)
      v42 = *(_QWORD *)(*v41 + 8 * (v39 + v40 - 1));
    else
      v42 = 0;
    v43 = _playlist::add_candidate_id(this, v42);
  }
  while (v38 > v40++);
  v45 = v43;
  v37 = (void **)*((_QWORD *)a2 + 7);
  if (v37)
  {
LABEL_57:
    v46 = *v37;
    if (*v37)
    {
      v37[1] = v46;
      operator delete(v46);
    }
    MEMORY[0x1AF43C744](v37, 0x10C402FEFCB83);
    *((_QWORD *)a2 + 7) = 0;
  }
  return v45;
}

void sub_1AC20DF1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x1AF43C744](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

uint64_t _playlist::fetch_track(_playlist *this, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int8x8_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  float *v15;
  unint64_t v16;
  uint8x8_t v17;
  _QWORD *v18;
  _QWORD *i;
  unint64_t v20;
  _QWORD *v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t prime;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t track;
  _QWORD *v44;

  v5 = (_QWORD *)*((_QWORD *)this + 18);
  v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = ((v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27)) ^ (((v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27)) >> 31);
  v9 = (int8x8_t)v5[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_17;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = ((v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27)) ^ (((v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27)) >> 31);
    if (v8 >= *(_QWORD *)&v9)
      v11 = v8 % *(_QWORD *)&v9;
  }
  else
  {
    v11 = v8 & (*(_QWORD *)&v9 - 1);
  }
  v12 = *(_QWORD **)(*v5 + 8 * v11);
  if (!v12 || (v13 = (_QWORD *)*v12) == 0)
  {
LABEL_17:
    track = _echo_context::fetch_track(*(_echo_context **)this, a2);
    v15 = (float *)*((_QWORD *)this + 18);
    v16 = *((_QWORD *)v15 + 1);
    if (v16)
    {
      v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v2 = v8;
        if (v8 >= v16)
          v2 = v8 % v16;
      }
      else
      {
        v2 = v8 & (v16 - 1);
      }
      v18 = *(_QWORD **)(*(_QWORD *)v15 + 8 * v2);
      if (v18)
      {
        for (i = (_QWORD *)*v18; i; i = (_QWORD *)*i)
        {
          v20 = i[1];
          if (v20 == v8)
          {
            if (i[2] == a2)
              return track;
          }
          else
          {
            if (v17.u32[0] > 1uLL)
            {
              if (v20 >= v16)
                v20 %= v16;
            }
            else
            {
              v20 &= v16 - 1;
            }
            if (v20 != v2)
              break;
          }
        }
      }
    }
    v21 = operator new(0x20uLL);
    *v21 = 0;
    v21[1] = v8;
    v21[2] = a2;
    v21[3] = track;
    v22 = (float)(unint64_t)(*((_QWORD *)v15 + 3) + 1);
    v23 = v15[8];
    if (v16 && (float)(v23 * (float)v16) >= v22)
    {
LABEL_80:
      v39 = *(_QWORD **)v15;
      v40 = *(_QWORD **)(*(_QWORD *)v15 + 8 * v2);
      if (v40)
      {
        *v21 = *v40;
      }
      else
      {
        *v21 = *((_QWORD *)v15 + 2);
        *((_QWORD *)v15 + 2) = v21;
        v39[v2] = v15 + 4;
        if (!*v21)
        {
LABEL_89:
          ++*((_QWORD *)v15 + 3);
          return track;
        }
        v41 = *(_QWORD *)(*v21 + 8);
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v41 >= v16)
            v41 %= v16;
        }
        else
        {
          v41 &= v16 - 1;
        }
        v40 = (_QWORD *)(*(_QWORD *)v15 + 8 * v41);
      }
      *v40 = v21;
      goto LABEL_89;
    }
    v24 = 1;
    if (v16 >= 3)
      v24 = (v16 & (v16 - 1)) != 0;
    v25 = v24 | (2 * v16);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = (int8x8_t)v26;
    else
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v16 = *((_QWORD *)v15 + 1);
    if (*(_QWORD *)&prime > v16)
      goto LABEL_46;
    if (*(_QWORD *)&prime < v16)
    {
      v34 = vcvtps_u32_f32((float)*((unint64_t *)v15 + 3) / v15[8]);
      if (v16 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (*(_QWORD *)&prime <= v34)
        prime = (int8x8_t)v34;
      if (*(_QWORD *)&prime >= v16)
      {
        v16 = *((_QWORD *)v15 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_46:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v28 = operator new(8 * *(_QWORD *)&prime);
          v29 = *(_QWORD **)v15;
          *(_QWORD *)v15 = v28;
          if (v29)
            operator delete(v29);
          v30 = 0;
          *((int8x8_t *)v15 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v15 + 8 * v30++) = 0;
          while (*(_QWORD *)&prime != v30);
          v31 = (_QWORD *)*((_QWORD *)v15 + 2);
          if (v31)
          {
            v32 = v31[1];
            v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(_QWORD *)&prime)
                v32 %= *(_QWORD *)&prime;
            }
            else
            {
              v32 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v15 + 8 * v32) = v15 + 4;
            v37 = (_QWORD *)*v31;
            if (*v31)
            {
              do
              {
                v38 = v37[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v38 >= *(_QWORD *)&prime)
                    v38 %= *(_QWORD *)&prime;
                }
                else
                {
                  v38 &= *(_QWORD *)&prime - 1;
                }
                if (v38 != v32)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v15 + 8 * v38))
                  {
                    *(_QWORD *)(*(_QWORD *)v15 + 8 * v38) = v31;
                    goto LABEL_71;
                  }
                  *v31 = *v37;
                  *v37 = **(_QWORD **)(*(_QWORD *)v15 + 8 * v38);
                  **(_QWORD **)(*(_QWORD *)v15 + 8 * v38) = v37;
                  v37 = v31;
                }
                v38 = v32;
LABEL_71:
                v31 = v37;
                v37 = (_QWORD *)*v37;
                v32 = v38;
              }
              while (v37);
            }
          }
          v16 = (unint64_t)prime;
          goto LABEL_75;
        }
        v44 = *(_QWORD **)v15;
        *(_QWORD *)v15 = 0;
        if (v44)
          operator delete(v44);
        v16 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
    }
LABEL_75:
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v8 >= v16)
        v2 = v8 % v16;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v16 - 1) & v8;
    }
    goto LABEL_80;
  }
  while (1)
  {
    v14 = v13[1];
    if (v14 == v8)
      break;
    if (v10.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v9)
        v14 %= *(_QWORD *)&v9;
    }
    else
    {
      v14 &= *(_QWORD *)&v9 - 1;
    }
    if (v14 != v11)
      goto LABEL_17;
LABEL_16:
    v13 = (_QWORD *)*v13;
    if (!v13)
      goto LABEL_17;
  }
  if (v13[2] != a2)
    goto LABEL_16;
  return v13[3];
}

void sub_1AC20E418(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _playlist::add_candidate_id(_playlist *this, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v4 = (_QWORD *)*((_QWORD *)this + 2);
  if (!v4
    || (result = (uint64_t)std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v4, a2)) != 0)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 3);
    if (v6
      && std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v6, a2)|| (std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(*((_QWORD *)this + 17), a2, a2) & 1) == 0)
    {
      return 0;
    }
    else
    {
      v8 = (uint64_t *)*((_QWORD *)this + 9);
      v7 = *((_QWORD *)this + 10);
      if ((unint64_t)v8 >= v7)
      {
        v10 = (uint64_t *)*((_QWORD *)this + 8);
        v11 = v8 - v10;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        v13 = v7 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
        v15 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v14)
          v15 = v12;
        if (v15)
        {
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v15);
          v10 = (uint64_t *)*((_QWORD *)this + 8);
          v8 = (uint64_t *)*((_QWORD *)this + 9);
        }
        else
        {
          v16 = 0;
        }
        v17 = (uint64_t *)(v15 + 8 * v11);
        v18 = v15 + 8 * v16;
        *v17 = a2;
        v9 = v17 + 1;
        while (v8 != v10)
        {
          v19 = *--v8;
          *--v17 = v19;
        }
        *((_QWORD *)this + 8) = v17;
        *((_QWORD *)this + 9) = v9;
        *((_QWORD *)this + 10) = v18;
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v8 = a2;
        v9 = v8 + 1;
      }
      *((_QWORD *)this + 9) = v9;
      v20 = *((_QWORD *)this + 12);
      v21 = *((_QWORD *)this + 13);
      if (v20 == v21 << 6)
      {
        if ((uint64_t)(v20 + 1) < 0)
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        v22 = v21 << 7;
        if (v22 <= (v20 & 0xFFFFFFFFFFFFFFC0) + 64)
          v22 = (v20 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v20 <= 0x3FFFFFFFFFFFFFFELL)
          v23 = v22;
        else
          v23 = 0x7FFFFFFFFFFFFFFFLL;
        std::vector<BOOL>::reserve((uint64_t)this + 88, v23);
        v20 = *((_QWORD *)this + 12);
      }
      *((_QWORD *)this + 12) = v20 + 1;
      result = 1;
      *(_QWORD *)(*((_QWORD *)this + 11) + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    }
  }
  return result;
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  __int128 v8;
  unint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    *(_QWORD *)&v8 = v6;
    *((_QWORD *)&v8 + 1) = v3;
    v9 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v9 = 0;
    v4[v9] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v10 = 0;
      v11 = 0;
      v12 = &v5[v6 >> 6];
      v13 = v4;
      v14 = v5;
      do
      {
        v15 = 1 << v10;
        if (((*v14 >> v11) & 1) != 0)
          v16 = *v13 | v15;
        else
          v16 = *v13 & ~v15;
        *v13 = v16;
        v14 += v11 == 63;
        if (v11 == 63)
          v11 = 0;
        else
          ++v11;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
      }
      while (v14 != v12 || v11 != v7);
    }
    *(_QWORD *)a1 = v4;
    *(_OWORD *)(a1 + 8) = v8;
    if (v5)
      operator delete(v5);
  }
}

uint64_t echo_playlist_close(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(v1 + 136);
    if (v3)
    {
      v4 = std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v3);
      MEMORY[0x1AF43C744](v4, 0x10A0C408EF24B1CLL);
    }
    v5 = *(_QWORD *)(v1 + 160) - *(_QWORD *)(v1 + 152);
    if (v5)
    {
      v6 = 0;
      v7 = v5 >> 3;
      if (v7 <= 1)
        v8 = 1;
      else
        v8 = v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v1 + 152) + 8 * v6);
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        ++v6;
      }
      while (v8 != v6);
    }
    if (*(_BYTE *)(v1 + 185))
    {
      v10 = *(_QWORD *)(v1 + 144);
      v11 = *(_QWORD **)(v10 + 16);
      if (!v11)
        goto LABEL_19;
      do
      {
        v12 = v11[3];
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v11 = (_QWORD *)*v11;
      }
      while (v11);
      v10 = *(_QWORD *)(v1 + 144);
      if (v10)
      {
LABEL_19:
        v13 = std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v10);
        MEMORY[0x1AF43C744](v13, 0x10A0C408EF24B1CLL);
      }
    }
    v14 = *(_QWORD *)(v1 + 16);
    if (v14)
    {
      v15 = std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
      MEMORY[0x1AF43C744](v15, 0x10A0C408EF24B1CLL);
    }
    v16 = *(_QWORD *)(v1 + 24);
    if (v16)
    {
      v17 = std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
      MEMORY[0x1AF43C744](v17, 0x10A0C408EF24B1CLL);
    }
    v18 = *(_QWORD *)(v1 + 32);
    if (v18)
    {
      v19 = *(void **)v18;
      if (*(_QWORD *)v18)
      {
        *(_QWORD *)(v18 + 8) = v19;
        operator delete(v19);
      }
      MEMORY[0x1AF43C744](v18, 0x10C402FEFCB83);
    }
    v20 = *(void **)(v1 + 152);
    if (v20)
    {
      *(_QWORD *)(v1 + 160) = v20;
      operator delete(v20);
    }
    v21 = *(void **)(v1 + 112);
    if (v21)
    {
      *(_QWORD *)(v1 + 120) = v21;
      operator delete(v21);
    }
    v22 = *(void **)(v1 + 88);
    if (v22)
      operator delete(v22);
    v23 = *(void **)(v1 + 64);
    if (v23)
    {
      *(_QWORD *)(v1 + 72) = v23;
      operator delete(v23);
    }
    JUMPOUT(0x1AF43C744);
  }
  return result;
}

uint64_t echo_playlist_next_track(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t track;
  _track *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  FILE *v16;
  const char *v17;
  FILE *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;

  if (!this)
    return this;
  v1 = this;
  if (*(_QWORD *)(this + 56) == 0x7FFFFFFFLL)
  {
    *(_QWORD *)(this + 56) = 0;
    _playlist::add_track((_playlist *)this, *(_track **)(this + 8));
    if (*(_BYTE *)(v1 + 184))
      _playlist::add_more_candidates((_playlist *)v1);
    else
      _playlist::add_candidates_from_track((_playlist *)v1, *(_track **)(v1 + 8), 0, 0, &v39);
    v7 = *(_track **)(v1 + 8);
    return *((_QWORD *)v7 + 1);
  }
  v35 = *(_QWORD *)(*(_QWORD *)this + 88);
  v36 = 0x100000001;
  while (2)
  {
    v2 = *(_QWORD *)(v1 + 72) - *(_QWORD *)(v1 + 64);
    if (!v2)
      goto LABEL_30;
    v3 = 0;
    v4 = v2 >> 3;
    if (v4 <= 1)
      v4 = 1;
    v37 = v4;
    do
    {
      v5 = v3 >> 6;
      v38 = 1 << v3;
      if ((*(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * (v3 >> 6)) & (1 << v3)) == 0)
        goto LABEL_29;
      track = _playlist::fetch_track((_playlist *)v1, *(_QWORD *)(*(_QWORD *)(v1 + 64) + 8 * v3));
      if (!track)
      {
LABEL_28:
        *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * v5) &= ~v38;
        goto LABEL_29;
      }
      v7 = (_track *)track;
      v8 = *(_QWORD *)v1;
      v9 = *(_QWORD *)(*(_QWORD *)v1 + 72) - *(_QWORD *)(*(_QWORD *)v1 + 64);
      if (!v9)
        goto LABEL_33;
      v10 = 0;
      v11 = v9 >> 3;
      if (v11 <= 1)
        v12 = 1;
      else
        v12 = v11;
      while (1)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * v10);
        v14 = *(_QWORD *)(*(_QWORD *)(v1 + 152) + 8 * v10);
        if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, v14))
        {
          v18 = *(FILE **)(v8 + 16);
          if (v18)
          {
            v19 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
            fprintf(v18, "constraint not in effect: %s, track id = %llu\n", v19, *((_QWORD *)v7 + 1));
          }
          goto LABEL_23;
        }
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _track *))(*(_QWORD *)v13 + 48))(v13, v8, v14, v7);
        v16 = *(FILE **)(v8 + 16);
        if (v16)
        {
          v17 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
          fprintf(v16, "constraint eval: %s, track id = %llu, result = %d\n", v17, *((_QWORD *)v7 + 1), v15);
        }
        if ((v15 - 3) >= 0xFFFFFFFE)
          break;
LABEL_23:
        if (v12 == ++v10)
          goto LABEL_33;
      }
      if (v15 == 2)
        goto LABEL_28;
      if (!v15)
      {
LABEL_33:
        _playlist::add_track((_playlist *)v1, v7);
        if (!*(_BYTE *)(v1 + 186))
          *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * v5) &= ~v38;
        v20 = *(_QWORD *)v1;
        v21 = *(_QWORD *)(*(_QWORD *)v1 + 72) - *(_QWORD *)(*(_QWORD *)v1 + 64);
        if (v21)
        {
          v22 = 0;
          v23 = v21 >> 3;
          if (v23 <= 1)
            v24 = 1;
          else
            v24 = v23;
          do
          {
            v25 = *(_QWORD *)(*(_QWORD *)(v20 + 64) + 8 * v22);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 72))(v25, *(_QWORD *)(*(_QWORD *)(v1 + 152) + 8 * v22++));
          }
          while (v24 != v22);
        }
        goto LABEL_53;
      }
LABEL_29:
      ++v3;
    }
    while (v3 != v37);
LABEL_30:
    if (*(_BYTE *)(v1 + 184) && _playlist::add_more_candidates((_playlist *)v1))
    {
      v7 = 0;
      BYTE4(v36) = 1;
    }
    else
    {
      v26 = *(_QWORD *)v1;
      v27 = *(_QWORD *)(*(_QWORD *)v1 + 72) - *(_QWORD *)(*(_QWORD *)v1 + 64);
      if (v27)
      {
        v28 = v27 >> 3;
        v29 = *(_QWORD *)(v1 + 176);
        v30 = v28 - 1;
        if (v28 <= 1)
          v31 = 1;
        else
          v31 = v28;
        while (1)
        {
          if (v29 == v30)
            v29 = 0;
          else
            ++v29;
          v32 = *(_QWORD *)(*(_QWORD *)(v26 + 64) + 8 * v29);
          v33 = *(_QWORD *)(*(_QWORD *)(v1 + 152) + 8 * v29);
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 40))(v32, v33))
          {
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 56))(v32, v33))
              break;
          }
          if (!--v31)
            goto LABEL_51;
        }
        v7 = 0;
        *(_QWORD *)(v1 + 176) = v29;
        v36 = 1;
      }
      else
      {
LABEL_51:
        v7 = 0;
        v36 = 0;
      }
    }
LABEL_53:
    if ((v35 & 1) != 0)
    {
      v34 = v36 & BYTE4(v36);
      if (v7)
        goto LABEL_58;
LABEL_57:
      if ((v34 & 1) == 0)
        goto LABEL_58;
      continue;
    }
    break;
  }
  v34 = v36 | BYTE4(v36);
  if (!v7)
    goto LABEL_57;
LABEL_58:
  if (!v7)
    return 0;
  return *((_QWORD *)v7 + 1);
}

void ML3PurchaseHistoryImportItem::~ML3PurchaseHistoryImportItem(ML3PurchaseHistoryImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4F168;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4F168;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3PurchaseHistoryImportItem::isValid(ML3PurchaseHistoryImportItem *this)
{
  _BOOL4 v2;
  uint64_t IntegerValue;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;
  ML3CPP::Element *v10;
  std::__shared_weak_count *v11;

  ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v10, *((_QWORD *)this + 8), 0x6D61766Cu);
  if (v10)
    v2 = ML3CPP::Element::integerValue(v10) != 0;
  else
    v2 = 0;
  IntegerValue = ML3DAAPImportItem::getIntegerValue((ML3DAAPImportItem *)this, 33554466);
  v4 = (*(uint64_t (**)(ML3PurchaseHistoryImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777217);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (IntegerValue)
    v8 = 1;
  else
    v8 = v2;
  if ((*(_QWORD *)&v4 & 0x10E4ALL) != 0)
    return v8;
  else
    return 0;
}

void sub_1AC20F0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ML3PurchaseHistoryImportItem::getStringValue(ML3DAAPImportItem *this@<X0>, ML3PurchaseHistoryImportItem *a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v5;
  uint64_t v6;
  std::string::size_type v7;
  std::__shared_weak_count *size;
  void *v9;
  __int128 v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string v19;
  char v20;
  std::string __p;
  __int128 v22;

  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = (std::string *)(a3 + 16);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  if ((int)a2 <= 100663303)
  {
    if ((_DWORD)a2 != 50331654 && (_DWORD)a2 != 50331657)
      goto LABEL_12;
    goto LABEL_10;
  }
  if ((_DWORD)a2 == 100663324)
  {
LABEL_10:
    ML3PurchaseHistoryImportItem::_getStringFlavorValue((ML3PurchaseHistoryImportItem *)&v19, *((_QWORD *)this + 12), a2);
    std::string::operator=(v5, &v19);
    *(_BYTE *)(a3 + 8) = 1;
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v9 = (void *)v19.__r_.__value_.__r.__words[0];
    goto LABEL_36;
  }
  if ((_DWORD)a2 != 100663304)
  {
LABEL_12:
    ML3DAAPImportItem::getStringValue(this, (uint64_t)a2, (uint64_t)&v19);
    *(_BYTE *)(a3 + 8) = v19.__r_.__value_.__s.__data_[8];
    std::string::operator=(v5, (const std::string *)&v19.__r_.__value_.__r.__words[2]);
    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5B4D010;
    if ((v20 & 0x80000000) == 0)
      return;
    v9 = (void *)v19.__r_.__value_.__r.__words[2];
    goto LABEL_36;
  }
  memset(&__p, 0, sizeof(__p));
  v22 = 0uLL;
  v6 = *((_QWORD *)this + 12);
  if (v6)
  {
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v19, v6, 0x61655270u);
    size = (std::__shared_weak_count *)v19.__r_.__value_.__l.__size_;
    v7 = v19.__r_.__value_.__r.__words[0];
    v22 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
    if (v19.__r_.__value_.__r.__words[0])
    {
LABEL_26:
      std::string::basic_string[abi:ne180100](&v19, *(void **)(v7 + 48), *(_QWORD *)(v7 + 64));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v19;
      goto LABEL_29;
    }
  }
  else
  {
    size = 0;
  }
  ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v19, *((_QWORD *)this + 8), 0x61655270u);
  v10 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = 0uLL;
  v22 = v10;
  if (size)
  {
    p_shared_owners = (unint64_t *)&size->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v13 = (std::__shared_weak_count *)v19.__r_.__value_.__l.__size_;
  if (v19.__r_.__value_.__l.__size_)
  {
    v14 = (unint64_t *)(v19.__r_.__value_.__l.__size_ + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v7 = v22;
  if ((_QWORD)v22)
    goto LABEL_26;
LABEL_29:
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::string::operator=(v5, &__p);
  *(_BYTE *)(a3 + 8) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_36:
    operator delete(v9);
  }
}

void sub_1AC20F368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v26 - 64);
  *(_QWORD *)v23 = v25;
  if (*(char *)(v23 + 39) < 0)
    operator delete(*v24);
  _Unwind_Resume(a1);
}

uint64_t ML3PurchaseHistoryImportItem::getIntegerValue(ML3PurchaseHistoryImportItem *this, ML3PurchaseHistoryImportItem *a2)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int64_t IntegerValue;
  uint64_t v9;
  uint64_t v10;
  unsigned int IntegerFlavorValue;
  void **v12;
  int v13;
  int v14;
  void **v16;
  int v17;
  int v18;
  unsigned __int8 v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t **v24;
  std::string *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  ML3CPP::Element *v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  uint64_t v32;

  if ((int)a2 > 83886092)
  {
    if ((int)a2 > 100663315)
    {
      if (((_DWORD)a2 - 100663316) < 3)
        goto LABEL_5;
      if (((_DWORD)a2 - 117440530) < 2)
      {
        IntegerValue = ML3DAAPTrackImportItem::getIntegerValue(this, (uint64_t)a2);
        if (IntegerValue)
          return (uint64_t)((double)IntegerValue + -978307200.0);
        else
          return 0;
      }
      if ((_DWORD)a2 == 117440513)
        goto LABEL_5;
    }
    else
    {
      switch((_DWORD)a2)
      {
        case 0x500000D:
          v9 = (*(uint64_t (**)(ML3PurchaseHistoryImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777217);
          return (MLMediaTypeByStandardizingMediaType(v9) & 0x3B26) != 0;
        case 0x600000B:
          return 1;
        case 0x6000010:
          return *((_QWORD *)this + 11);
      }
    }
  }
  else
  {
    if ((int)a2 <= 33554457)
    {
      switch((_DWORD)a2)
      {
        case 0x100001A:
          v10 = (*(uint64_t (**)(ML3PurchaseHistoryImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777217);
          v7 = (MLMediaTypeByStandardizingMediaType(v10) & 0x408) == 0;
          break;
        case 0x2000008:
          goto LABEL_5;
        case 0x200000A:
          v6 = (*(uint64_t (**)(ML3PurchaseHistoryImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777217);
          v7 = MLMediaTypeByStandardizingMediaType(v6) == 2;
          break;
        default:
          return ML3DAAPTrackImportItem::getIntegerValue(this, (uint64_t)a2);
      }
      return v7;
    }
    if (((_DWORD)a2 - 50331650) <= 0x11 && ((1 << ((_BYTE)a2 - 2)) & 0x26F2F) != 0)
    {
LABEL_5:
      if (ML3PurchaseHistoryImportItem::_hasFlavorValue(*((ML3PurchaseHistoryImportItem **)this + 12), a2))return (uint64_t)ML3PurchaseHistoryImportItem::_getIntegerFlavorValue(*((ML3PurchaseHistoryImportItem **)this + 12), a2);
      return ML3DAAPTrackImportItem::getIntegerValue(this, (uint64_t)a2);
    }
    if ((_DWORD)a2 == 33554458)
    {
      ML3PurchaseHistoryImportItem::_getStringFlavorValue((ML3PurchaseHistoryImportItem *)__p, *((_QWORD *)this + 12), (ML3PurchaseHistoryImportItem *)0x3000009);
      IntegerFlavorValue = ML3PurchaseHistoryImportItem::_getIntegerFlavorValue(*((ML3PurchaseHistoryImportItem **)this + 12), (ML3PurchaseHistoryImportItem *)0x3000003);
      if (SHIBYTE(v32) < 0)
      {
        if (__p[1] == (void *)3)
        {
          v12 = (void **)__p[0];
LABEL_36:
          v13 = *(unsigned __int16 *)v12;
          v14 = *((unsigned __int8 *)v12 + 2);
          if (v13 == 13421 && v14 == 112)
          {
            v5 = 13;
            goto LABEL_78;
          }
        }
      }
      else if (HIBYTE(v32) == 3)
      {
        v12 = __p;
        goto LABEL_36;
      }
      if (IntegerFlavorValue == 1836069985)
      {
        v5 = 14;
        goto LABEL_78;
      }
      if (IntegerFlavorValue == 1634492771)
      {
        v5 = 26;
        goto LABEL_78;
      }
      if (v32 < 0)
      {
        if (__p[1] != (void *)3)
          goto LABEL_54;
        v16 = (void **)__p[0];
      }
      else
      {
        if (HIBYTE(v32) != 3)
          goto LABEL_54;
        v16 = __p;
      }
      v17 = *(unsigned __int16 *)v16;
      v18 = *((unsigned __int8 *)v16 + 2);
      if (v17 != 13421 || v18 != 118)
      {
LABEL_54:
        if ((v20 & 1) == 0
        {
          qword_1EEC7CEA8 = 0;
          qword_1EEC7CEA0 = 0;
          ML3PurchaseHistoryImportItem::_getLocationKind(void)const::__otherFormats = (uint64_t)&qword_1EEC7CEA0;
          __cxa_atexit((void (*)(void *))std::map<std::string,long long>::~map[abi:ne180100], &ML3PurchaseHistoryImportItem::_getLocationKind(void)const::__otherFormats, &dword_1AC149000);
        }
        if (ML3PurchaseHistoryImportItem::_getLocationKind(void)const::onceToken != -1)
          dispatch_once(&ML3PurchaseHistoryImportItem::_getLocationKind(void)const::onceToken, &__block_literal_global_691);
        v21 = (_QWORD *)qword_1EEC7CEA0;
        if (!qword_1EEC7CEA0)
        {
LABEL_62:
          v5 = 0;
          goto LABEL_78;
        }
        while (1)
        {
          if (!std::less<std::string>::operator()[abi:ne180100](__p, v21 + 4))
          {
            if (!std::less<std::string>::operator()[abi:ne180100](v21 + 4, __p))
            {
              v22 = std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__find_equal<std::string>((uint64_t **)&v29, __p);
              v23 = (uint64_t *)*v22;
              if (!*v22)
              {
                v24 = (uint64_t **)v22;
                v23 = (uint64_t *)operator new(0x40uLL);
                v25 = (std::string *)(v23 + 4);
                if (SHIBYTE(v32) < 0)
                {
                  std::string::__init_copy_ctor_external(v25, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
                }
                else
                {
                  *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
                  v23[6] = v32;
                }
                v23[7] = 0;
                std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__insert_node_at((uint64_t)v29, v24, v23);
              }
              v5 = v23[7];
              goto LABEL_78;
            }
            ++v21;
          }
          v21 = (_QWORD *)*v21;
          if (!v21)
            goto LABEL_62;
        }
      }
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v29, *((_QWORD *)this + 8), 0x61654D6Bu);
      if (v29 && (ML3CPP::Element::integerValue(v29) & 0x20) != 0)
        v5 = 5;
      else
        v5 = 3;
      v26 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
LABEL_78:
      if (SHIBYTE(v32) < 0)
        operator delete(__p[0]);
      return v5;
    }
  }
  return ML3DAAPTrackImportItem::getIntegerValue(this, (uint64_t)a2);
}

void sub_1AC20F8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void **v17;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,long long>,void *>>>::operator()[abi:ne180100](0, v17);
  operator delete(__p);
  _Unwind_Resume(a1);
}

float ML3PurchaseHistoryImportItem::getFloatValue(ML3PurchaseHistoryImportItem *this, uint64_t a2)
{
  if ((_DWORD)a2 != 33554437)
    return ML3DAAPTrackImportItem::getFloatValue((ML3DAAPImportItem *)this, a2);
  if (ML3PurchaseHistoryImportItem::_hasFlavorValue(*((ML3PurchaseHistoryImportItem **)this + 12), (ML3PurchaseHistoryImportItem *)0x2000005))return (float)(uint64_t)ML3PurchaseHistoryImportItem::_getIntegerFlavorValue(*((ML3PurchaseHistoryImportItem **)this + 12), (ML3PurchaseHistoryImportItem *)0x2000005);
  return ML3DAAPImportItem::getFloatValue((ML3DAAPImportItem *)this, 33554437);
}

void ML3PurchaseHistoryImportItem::getDataValue(ML3DAAPImportItem *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  __int128 v32;
  void *__p[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  *a3 = 0;
  a3[1] = 0;
  if ((_DWORD)a2 != 134217729)
  {
    ML3DAAPImportItem::getDataValue(this, a2, __p);
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)__p);
    v14 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      return;
    v15 = (unint64_t *)((char *)__p[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    goto LABEL_41;
  }
  v32 = 0uLL;
  ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v35, *((_QWORD *)this + 8), 0x61654375u);
  if (v35)
  {
    std::string::basic_string[abi:ne180100](__p, *(void **)(v35 + 48), *(_QWORD *)(v35 + 64));
    ML3CPPBridgeString((const UInt8 *)__p, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v34 < 0)
      operator delete(__p[0]);
    v6 = (void *)MEMORY[0x1E0C99D80];
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v5, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "dictionaryWithContentsOfURL:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      +[ML3Track flattenedChapterDataFromDAAPInfoDictionary:trackPersistentID:](ML3Track, "flattenedChapterDataFromDAAPInfoDictionary:trackPersistentID:", v8, *((_QWORD *)this + 1));
      v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v10 = (const void *)objc_msgSend(v9, "bytes");
      v11 = objc_msgSend(v9, "length");
      v12 = operator new();
      *(_QWORD *)v12 = &off_1E5B4CF08;
      *(_QWORD *)(v12 + 8) = v11;
      if (v11)
        v13 = (void *)operator new[]();
      else
        v13 = 0;
      *(_QWORD *)(v12 + 16) = v13;
      *(_BYTE *)(v12 + 24) = 1;
      if (v10)
        memcpy(v13, v10, v11);
      else
        bzero(v13, v11);
      v17 = (_QWORD *)operator new();
      *v17 = &off_1E5B51730;
      v17[1] = 0;
      v17[2] = 0;
      v17[3] = v12;
      *(_QWORD *)&v18 = v12;
      *((_QWORD *)&v18 + 1) = v17;
      v32 = v18;

    }
  }
  v19 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if ((_QWORD)v32)
  {
    if (*((_QWORD *)&v32 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v32;
    if (!v24)
      goto LABEL_38;
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (v26)
      goto LABEL_38;
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    v27 = v24;
  }
  else
  {
    ML3DAAPImportItem::getDataValue(this, 134217729, __p);
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)__p);
    v28 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_38;
    v29 = (unint64_t *)((char *)__p[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (v30)
      goto LABEL_38;
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    v27 = v28;
  }
  std::__shared_weak_count::__release_weak(v27);
LABEL_38:
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (!*((_QWORD *)&v32 + 1))
    return;
  v31 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
  do
    v16 = __ldaxr(v31);
  while (__stlxr(v16 - 1, v31));
LABEL_41:
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_1AC20FCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  MEMORY[0x1AF43C744](v22, 0x1091C40934DB768);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

BOOL ML3PurchaseHistoryImportItem::hasValue(ML3DAAPImportItem *this, uint64_t a2)
{
  if ((_DWORD)a2 == 33554442)
    a2 = 16777217;
  else
    a2 = a2;
  return (a2 - 0x1000000) >> 25 <= 4 && ML3DAAPImportItem::hasValue(this, a2);
}

uint64_t ML3PurchaseHistoryImportItem::getDescription(ML3PurchaseHistoryImportItem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[11];
  char v8;
  uint64_t v9;
  char v10;

  (*(void (**)(ML3PurchaseHistoryImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663302);
  (*(void (**)(ML3PurchaseHistoryImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663297);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"<ML3PurchaseHistoryImportItem ", 30);
  *(_DWORD *)((char *)&v7[1] + *(_QWORD *)(v7[0] - 24)) = *(_DWORD *)((_BYTE *)&v7[1] + *(_QWORD *)(v7[0] - 24)) & 0xFFFFFFB5 | 8;
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" purchaseHistoryId=", 19);
  *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 2;
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", storeId=", 10);
  v5 = (_QWORD *)std::ostream::operator<<();
  v10 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v10, 1);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v9);
}

void sub_1AC20FF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ML3PurchaseHistoryImportItem::getSourceIdentifiers@<X0>(ML3PurchaseHistoryImportItem *this@<X0>, BOOL *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  std::vector<long long>::vector(a3);
  *a2 = 0;
  result = (*(uint64_t (**)(ML3PurchaseHistoryImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663302);
  if (result)
    *(_QWORD *)(*a3 + 32) = result;
  return result;
}

void sub_1AC20FFD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id ML3PurchaseHistoryImportItem::getDeduplicationPredicates(ML3PurchaseHistoryImportItem *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 2);
  v3 = (*(uint64_t (**)(ML3PurchaseHistoryImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663302);
  v4 = (*(uint64_t (**)(ML3PurchaseHistoryImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663297);
  v5 = (*(uint64_t (**)(ML3PurchaseHistoryImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663337);
  if (v3)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.purchase_history_id"), v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v6);

  }
  if (v4)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"), v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v7);

    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"), 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = v8;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.subscription_store_item_id"), v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v18[1] = v9;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v11);

  }
  if (v5)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"), 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = v12;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.subscription_store_item_id"), v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v17[1] = v13;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v17, 2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v15);

  }
  return v2;
}

void sub_1AC210254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

BOOL ML3PurchaseHistoryImportItem::canInsertIntoPurchasedPlaylist(ML3PurchaseHistoryImportItem *this)
{
  return ((*(uint64_t (**)(ML3PurchaseHistoryImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777217) & 0x408) != 0;
}

uint64_t ML3PurchaseHistoryImportItem::_hasFlavorValue(ML3PurchaseHistoryImportItem *this, ML3PurchaseHistoryImportItem *a2)
{
  uint64_t v2;
  unsigned int FlavorCode;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (uint64_t)this;
  if (this)
  {
    FlavorCode = ML3PurchaseHistoryImportItem::_getFlavorCode(a2);
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, v2, FlavorCode);
    v4 = v9;
    v2 = v8 != 0;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v2;
}

ML3PurchaseHistoryImportItem *ML3PurchaseHistoryImportItem::_getIntegerFlavorValue(ML3PurchaseHistoryImportItem *this, ML3PurchaseHistoryImportItem *a2)
{
  ML3PurchaseHistoryImportItem *v2;
  unsigned int FlavorCode;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  ML3CPP::Element *v8;
  std::__shared_weak_count *v9;

  v2 = this;
  if (this)
  {
    FlavorCode = ML3PurchaseHistoryImportItem::_getFlavorCode(a2);
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, (uint64_t)v2, FlavorCode);
    if (v8)
      v2 = (ML3PurchaseHistoryImportItem *)ML3CPP::Element::integerValue(v8);
    else
      v2 = 0;
    v4 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v2;
}

uint64_t ML3PurchaseHistoryImportItem::_getFlavorCode(ML3PurchaseHistoryImportItem *this)
{
  uint64_t result;
  void *v3;
  void *v4;

  if ((int)this > 100663315)
  {
    switch((int)this)
    {
      case 100663316:
        result = 1634026582;
        break;
      case 100663317:
        result = 1634026576;
        break;
      case 100663318:
        result = 1634028337;
        break;
      case 100663319:
      case 100663320:
      case 100663321:
      case 100663322:
      case 100663323:
        goto LABEL_11;
      case 100663324:
        result = 1634026357;
        break;
      default:
        if ((_DWORD)this == 117440513)
        {
          result = 1634027588;
        }
        else
        {
LABEL_11:
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v3 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "uint32_t ML3PurchaseHistoryImportItem::_getFlavorCode(MLImportPropertyKey) const");
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3PurchaseHistoryImportItem.mm"), 303, CFSTR("flavorDataForPropertyKey passed unknown key %d"), this);

          result = 0;
        }
        break;
    }
  }
  else
  {
    result = 1634951794;
    switch((int)this)
    {
      case 50331650:
        return result;
      case 50331651:
        return 1634952036;
      case 50331652:
        return 1634952051;
      case 50331653:
        return 1634952299;
      case 50331654:
        return 1634956652;
      case 50331655:
        return 1634027349;
      case 50331656:
      case 50331662:
      case 50331665:
      case 50331666:
        goto LABEL_11;
      case 50331657:
        return 1634952813;
      case 50331658:
        return 1634027336;
      case 50331659:
        return 1634027333;
      case 50331660:
        return 1634027332;
      case 50331661:
        return 1634027346;
      case 50331663:
        return 1634955894;
      case 50331664:
        return 1634956146;
      case 50331667:
        return 1634029142;
      default:
        if ((_DWORD)this == 33554437)
        {
          result = 1634956397;
        }
        else
        {
          if ((_DWORD)this != 33554440)
            goto LABEL_11;
          result = 1634954355;
        }
        break;
    }
  }
  return result;
}

void sub_1AC210668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3PurchaseHistoryImportItem::_getStringFlavorValue(ML3PurchaseHistoryImportItem *this, uint64_t a2, ML3PurchaseHistoryImportItem *a3)
{
  unsigned int FlavorCode;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 __dst;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a2)
  {
    FlavorCode = ML3PurchaseHistoryImportItem::_getFlavorCode(a3);
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v11, a2, FlavorCode);
    if (v11)
    {
      std::string::basic_string[abi:ne180100](&__dst, *(void **)(v11 + 48), *(_QWORD *)(v11 + 64));
      *(_OWORD *)this = __dst;
      *((_QWORD *)this + 2) = v10;
    }
    v6 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1AC210730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,long long>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__find_equal<std::string>(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  _QWORD *v7;

  v3 = &qword_1EEC7CEA0;
  v4 = qword_1EEC7CEA0;
  if (qword_1EEC7CEA0)
  {
    v6 = &qword_1EEC7CEA0;
    do
    {
      while (1)
      {
        v3 = (uint64_t *)v4;
        v7 = (_QWORD *)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](a2, (_QWORD *)(v4 + 32)))
          break;
        v4 = *v3;
        v6 = v3;
        if (!*v3)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, a2))
        break;
      v6 = v3 + 1;
      v4 = v3[1];
    }
    while (v4);
  }
  else
  {
    v6 = &qword_1EEC7CEA0;
  }
LABEL_10:
  *a1 = v3;
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(_QWORD *)ML3PurchaseHistoryImportItem::_getLocationKind(void)const::__otherFormats)
  {
    ML3PurchaseHistoryImportItem::_getLocationKind(void)const::__otherFormats = *(_QWORD *)ML3PurchaseHistoryImportItem::_getLocationKind(void)const::__otherFormats;
    a3 = *a2;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EEC7CEA0, a3);
  ++qword_1EEC7CEA8;
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,long long>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

BOOL std::less<std::string>::operator()[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

void ___ZNK28ML3PurchaseHistoryImportItem16_getLocationKindEv_block_invoke()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  std::string *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  std::string *v13;
  uint64_t i;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD v19[4];
  _QWORD v20[4];
  _QWORD v21[4];
  _QWORD v22[4];
  _QWORD v23[4];
  _QWORD v24[5];

  v24[4] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v19, "pdf");
  v19[3] = 55;
  std::string::basic_string[abi:ne180100]<0>(v20, "itlp");
  v20[3] = 54;
  std::string::basic_string[abi:ne180100]<0>(v21, "ite");
  v21[3] = 53;
  std::string::basic_string[abi:ne180100]<0>(v22, "m4b");
  v22[3] = 49;
  std::string::basic_string[abi:ne180100]<0>(v23, "aax");
  v23[3] = 35;
  std::string::basic_string[abi:ne180100]<0>(v24, ".epub");
  v24[3] = 51;
  if (!qword_1EEC7CEA8)
    goto LABEL_18;
  v0 = ML3PurchaseHistoryImportItem::_getLocationKind(void)const::__otherFormats;
  ML3PurchaseHistoryImportItem::_getLocationKind(void)const::__otherFormats = (uint64_t)&qword_1EEC7CEA0;
  *(_QWORD *)(qword_1EEC7CEA0 + 16) = 0;
  qword_1EEC7CEA0 = 0;
  qword_1EEC7CEA8 = 0;
  if (*(_QWORD *)(v0 + 8))
    v1 = *(_QWORD **)(v0 + 8);
  else
    v1 = (_QWORD *)v0;
  v15 = &ML3PurchaseHistoryImportItem::_getLocationKind(void)const::__otherFormats;
  v16 = v1;
  v17 = v1;
  if (!v1)
  {
    std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
LABEL_18:
    v6 = 0;
    goto LABEL_21;
  }
  v2 = 0;
  v16 = std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::_DetachedTreeCache::__detach_next((uint64_t)v1);
  v3 = (std::string *)v19;
  while (1)
  {
    v4 = std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__find_equal<std::string>(&v18, v3);
    if (!*v4)
      break;
    v1 = v17;
LABEL_11:
    v6 = v2 + 1;
    v3 = (std::string *)((char *)v3 + 32);
    if (v1)
      v7 = v2 == 5;
    else
      v7 = 1;
    ++v2;
    if (v7)
      goto LABEL_20;
  }
  v5 = (uint64_t **)v4;
  std::string::operator=((std::string *)(v1 + 4), v3);
  v1[7] = v3[1].__r_.__value_.__l.__data_;
  std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__insert_node_at((uint64_t)v18, v5, v1);
  v1 = v16;
  v17 = v16;
  if (v16)
  {
    v16 = std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
    goto LABEL_11;
  }
  v6 = v2 + 1;
LABEL_20:
  std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  if (v6 != 6)
  {
LABEL_21:
    v8 = 4 * v6;
    do
    {
      v9 = &v19[v8];
      v10 = std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__find_equal<std::string>(&v15, &v19[v8]);
      if (!*v10)
      {
        v11 = (uint64_t **)v10;
        v12 = (uint64_t *)operator new(0x40uLL);
        v13 = (std::string *)(v12 + 4);
        if (SHIBYTE(v19[v8 + 2]) < 0)
        {
          std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)v19[v8], v19[v8 + 1]);
        }
        else
        {
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v9;
          v12[6] = v9[2];
        }
        v12[7] = v19[v8 + 3];
        std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::__insert_node_at((uint64_t)v15, v11, v12);
      }
      v8 += 4;
    }
    while (v8 != 24);
  }
  for (i = 0; i != -24; i -= 4)
  {
    if (SHIBYTE(v24[i + 2]) < 0)
      operator delete((void *)v24[i]);
  }
}

void sub_1AC210D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  char *v14;

  while (1)
  {
    if (*(v14 - 9) < 0)
      operator delete(*((void **)v14 - 4));
    v14 -= 32;
    if (v14 == &a14)
      _Unwind_Resume(exception_object);
  }
}

_QWORD *std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::destroy(*(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::destroy((char *)v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,long long>,std::__map_value_compare<std::string,std::__value_type<std::string,long long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long long>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

_QWORD *std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void ML3DAAPImportItem::~ML3DAAPImportItem(ML3DAAPImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3DAAPImportItem::isValid(ML3DAAPImportItem *this)
{
  return 1;
}

void ML3DAAPImportItem::getStringValue(ML3DAAPImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p[2];
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  ML3DAAPImportItem::_getChildElement((ML3DAAPImportItem *)&v10, (uint64_t)this, a2);
  if (v10)
  {
    std::string::basic_string[abi:ne180100](__p, *(void **)(v10 + 48), *(_QWORD *)(v10 + 64));
    *(_QWORD *)a3 = off_1E5B4D010;
    *(_BYTE *)(a3 + 8) = 1;
    v4 = (std::string *)(a3 + 16);
    if (SHIBYTE(v9) < 0)
    {
      std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      if (SHIBYTE(v9) < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      *(_QWORD *)(a3 + 32) = v9;
    }
  }
  else
  {
    *(_QWORD *)a3 = off_1E5B4D010;
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1AC2110E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t ML3DAAPImportItem::getIntegerValue(ML3DAAPImportItem *this, uint64_t a2)
{
  int v2;
  int64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  ML3CPP::Element *v9;
  std::__shared_weak_count *v10;

  v2 = a2;
  ML3DAAPImportItem::_getChildElement((ML3DAAPImportItem *)&v9, (uint64_t)this, a2);
  if (v9)
  {
    v3 = ML3CPP::Element::integerValue(v9);
    v4 = v3;
    if (v2 == 268435459 && v3)
      v4 = (uint64_t)((double)(v3 / 1000) + -978307200.0);
  }
  else
  {
    v4 = 0;
  }
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

float ML3DAAPImportItem::getFloatValue(ML3DAAPImportItem *this, uint64_t a2)
{
  float v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  ML3CPP::Element *v7;
  std::__shared_weak_count *v8;

  ML3DAAPImportItem::_getChildElement((ML3DAAPImportItem *)&v7, (uint64_t)this, a2);
  if (v7)
    v2 = (float)(uint64_t)ML3CPP::Element::integerValue(v7);
  else
    v2 = 0.0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void ML3DAAPImportItem::getDataValue(ML3DAAPImportItem *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  *a3 = 0;
  a3[1] = 0;
  ML3DAAPImportItem::_getChildElement((ML3DAAPImportItem *)&v16, (uint64_t)this, a2);
  if (v16)
  {
    v4 = *(const void **)(v16 + 48);
    v5 = *(_QWORD *)(v16 + 64);
    v6 = operator new();
    *(_QWORD *)v6 = &off_1E5B4CF08;
    *(_QWORD *)(v6 + 8) = v5;
    v7 = v5 ? (void *)operator new[]() : 0;
    *(_QWORD *)(v6 + 16) = v7;
    *(_BYTE *)(v6 + 24) = 1;
    if (v4)
      memcpy(v7, v4, v5);
    else
      bzero(v7, v5);
    *(_QWORD *)&v15 = v6;
    v8 = (_QWORD *)operator new();
    *v8 = &off_1E5B51730;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v6;
    *((_QWORD *)&v15 + 1) = v8;
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a3, &v15);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1AC2113D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  MEMORY[0x1AF43C744](v4, 0x1091C40934DB768);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

BOOL ML3DAAPImportItem::hasValue(ML3DAAPImportItem *this, uint64_t a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  ML3DAAPImportItem::_getChildElement((ML3DAAPImportItem *)&v7, (uint64_t)this, a2);
  v3 = v7;
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v3 != 0;
}

void ML3DAAPImportItem::getImportItemValue(ML3DAAPImportItem *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  *a3 = 0;
  a3[1] = 0;
  ML3DAAPImportItem::_getChildElement((ML3DAAPImportItem *)&v20, (uint64_t)this, a2);
  if (v20)
  {
    v17 = v20;
    v18 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(__int128 *__return_ptr, ML3DAAPImportItem *, uint64_t, uint64_t *))(*(_QWORD *)this + 216))(&v19, this, a2, &v17);
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a3, &v19);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = v18;
    if (v18)
    {
      v12 = (unint64_t *)&v18->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1AC2115E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void ML3DAAPImportItem::getImportItemArrayValue(ML3DAAPImportItem *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  int64x2_t v34;
  char *v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t *v64;
  uint64_t *v65;
  char *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unsigned int v69[2];
  std::__shared_weak_count *v70;
  ML3CPP::Element *v71;
  int64x2_t v72;
  char *v73;
  _QWORD *v74;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  ML3DAAPImportItem::_getChildElement((ML3DAAPImportItem *)v69, (uint64_t)this, a2);
  if (!*(_QWORD *)v69)
    goto LABEL_54;
  ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v67, *(uint64_t *)v69, 0x6D6C636Cu);
  if (v67)
  {
    std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v69, v67, (uint64_t)v68);
  }
  else
  {
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v71, *(uint64_t *)v69, 0x6D72636Fu);
    if (v71)
    {
      v52 = ML3CPP::Element::integerValue(v71);
      v53 = (std::__shared_weak_count *)v72.i64[0];
      if (v72.i64[0])
      {
        v54 = (unint64_t *)(v72.i64[0] + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if (v52 <= 0)
        goto LABEL_49;
    }
    else
    {
      v56 = (std::__shared_weak_count *)v72.i64[0];
      if (v72.i64[0])
      {
        v57 = (unint64_t *)(v72.i64[0] + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
    }
  }
  v65 = 0;
  v66 = 0;
  v64 = 0;
  v6 = *(char **)(*(_QWORD *)v69 + 72);
  v7 = *(char **)(*(_QWORD *)v69 + 80);
  v71 = (ML3CPP::Element *)&v64;
  v72.i8[0] = 0;
  v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v9 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v8 >> 4);
    v10 = v9;
    v64 = v9;
    v65 = v9;
    v66 = (char *)&v9[2 * v11];
    v12 = v9;
    do
    {
      *v12 = *(_QWORD *)v6;
      v13 = *((_QWORD *)v6 + 1);
      v12[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v6 += 16;
      v12 += 2;
    }
    while (v6 != v7);
    v65 = v12;
    if (v12 != v9)
    {
      do
      {
        v16 = *v10;
        v17 = (std::__shared_weak_count *)v10[1];
        v62 = *v10;
        v63 = v17;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
          v60 = v17;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        else
        {
          v60 = 0;
        }
        v59 = v16;
        (*(void (**)(__int128 *__return_ptr, ML3DAAPImportItem *, uint64_t, uint64_t *))(*(_QWORD *)this + 216))(&v61, this, a2, &v59);
        v21 = a3[1];
        v22 = (unint64_t)a3[2];
        if ((unint64_t)v21 >= v22)
        {
          v23 = (v21 - *a3) >> 4;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 60)
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          v25 = v22 - (_QWORD)*a3;
          if (v25 >> 3 > v24)
            v24 = v25 >> 3;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
            v26 = 0xFFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          v74 = a3 + 2;
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v26);
          v29 = &v27[16 * v23];
          *(_OWORD *)v29 = v61;
          v61 = 0uLL;
          v31 = *a3;
          v30 = a3[1];
          if (v30 == *a3)
          {
            v34 = vdupq_n_s64((unint64_t)v30);
            v32 = &v27[16 * v23];
          }
          else
          {
            v32 = &v27[16 * v23];
            do
            {
              v33 = *((_OWORD *)v30 - 1);
              v30 -= 16;
              *((_OWORD *)v32 - 1) = v33;
              v32 -= 16;
              *(_QWORD *)v30 = 0;
              *((_QWORD *)v30 + 1) = 0;
            }
            while (v30 != v31);
            v34 = *(int64x2_t *)a3;
          }
          v35 = v29 + 16;
          *a3 = v32;
          a3[1] = v29 + 16;
          v72 = v34;
          v36 = a3[2];
          a3[2] = &v27[16 * v28];
          v73 = v36;
          v71 = (ML3CPP::Element *)v34.i64[0];
          std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)&v71);
          v37 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
          a3[1] = v35;
          if (v37)
          {
            v38 = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
        }
        else
        {
          *(_OWORD *)v21 = v61;
          v61 = 0uLL;
          a3[1] = v21 + 16;
        }
        v40 = v60;
        if (v60)
        {
          v41 = (unint64_t *)&v60->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v43 = v63;
        if (v63)
        {
          v44 = (unint64_t *)&v63->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v10 += 2;
      }
      while (v10 != v65);
    }
  }
  v71 = (ML3CPP::Element *)&v64;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
LABEL_49:
  v46 = v68;
  if (v68)
  {
    v47 = (unint64_t *)&v68->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
LABEL_54:
  v49 = v70;
  if (v70)
  {
    v50 = (unint64_t *)&v70->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_1AC211A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void **v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, void **);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t ML3DAAPImportItem::canInsertIntoPurchasedPlaylist(ML3DAAPImportItem *this)
{
  return 0;
}

void ML3DAAPImportItem::_createImportItemValue(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  std::__shared_weak_count *v37;
  __int128 v38;

  *a4 = 0;
  a4[1] = 0;
  if (a2 >> 1 == 184549379)
  {
    v6 = operator new();
    v7 = v6;
    v8 = *a3;
    v9 = (std::__shared_weak_count *)a3[1];
    v37 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    ML3DAAPPersonImportItem::ML3DAAPPersonImportItem(v6, v8, v9);
    *(_QWORD *)&v38 = v7;
    v12 = (_QWORD *)operator new();
    *v12 = &off_1E5B51928;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v7;
    *((_QWORD *)&v38 + 1) = v12;
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a4, &v38);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v37;
    if (v37)
    {
      v17 = (unint64_t *)&v37->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_35:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v20 = operator new();
    v21 = (_QWORD *)v20;
    v22 = *a3;
    v23 = (std::__shared_weak_count *)a3[1];
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v26 = *(_QWORD *)(a1 + 8);
      v27 = (unint64_t *)&v23->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 8);
    }
    *(_WORD *)(v20 + 16) = 256;
    *(_BYTE *)(v20 + 18) = 1;
    *(_OWORD *)(v20 + 24) = 0u;
    *(_OWORD *)(v20 + 40) = 0u;
    *(_DWORD *)(v20 + 56) = 1065353216;
    *(_QWORD *)v20 = &off_1E5B4D050;
    *(_QWORD *)(v20 + 8) = 0;
    *(_QWORD *)(v20 + 64) = v22;
    *(_QWORD *)(v20 + 72) = v23;
    if (v23)
    {
      v29 = (unint64_t *)&v23->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    *v21 = &off_1E5B4D878;
    v21[10] = v26;
    *(_QWORD *)&v38 = v21;
    v32 = (_QWORD *)operator new();
    *v32 = &off_1E5B51848;
    v32[1] = 0;
    v32[2] = 0;
    v32[3] = v21;
    *((_QWORD *)&v38 + 1) = v32;
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a4, &v38);
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v16 = v23;
    if (v23)
    {
      v36 = (unint64_t *)&v23->__shared_owners_;
      do
        v18 = __ldaxr(v36);
      while (__stlxr(v18 - 1, v36));
      goto LABEL_35;
    }
  }
}

void sub_1AC211D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t ML3DAAPPersonImportItem::ML3DAAPPersonImportItem(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)a1 = &off_1E5B4D050;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = a3;
  if (a3)
  {
    v7 = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *(_QWORD *)a1 = &off_1E5B4DD78;
  return a1;
}

void std::__shared_ptr_pointer<ML3DAAPChildImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3DAAPChildImportItem>,std::allocator<ML3DAAPChildImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3DAAPChildImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3DAAPChildImportItem>,std::allocator<ML3DAAPChildImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3DAAPChildImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3DAAPChildImportItem>,std::allocator<ML3DAAPChildImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_22ML3DAAPChildImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ML3DAAPChildImportItem::~ML3DAAPChildImportItem(ML3DAAPChildImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3DAAPChildImportItem::getIntegerValue(ML3DAAPImportItem *this, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = a2;
  result = ML3DAAPImportItem::getIntegerValue(this, a2);
  if (v2 == 385875974)
    return *((_QWORD *)this + 10);
  return result;
}

void std::__shared_ptr_pointer<ML3DAAPPersonImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3DAAPPersonImportItem>,std::allocator<ML3DAAPPersonImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3DAAPPersonImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3DAAPPersonImportItem>,std::allocator<ML3DAAPPersonImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3DAAPPersonImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3DAAPPersonImportItem>,std::allocator<ML3DAAPPersonImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_23ML3DAAPPersonImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ML3DAAPPersonImportItem::~ML3DAAPPersonImportItem(ML3DAAPPersonImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

void ML3DAAPPersonImportItem::getDescription(ML3DAAPPersonImportItem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  std::string *v4;
  std::string::size_type size;
  _QWORD *v6;
  _QWORD *v7;
  std::string *v8;
  std::string::size_type v9;
  _QWORD *v10;
  _QWORD v11[2];
  std::string __p;
  void *v13;
  char v14;
  uint64_t v15;
  std::string v16;
  std::string v17;
  char v18;

  (*(void (**)(_QWORD *__return_ptr, ML3DAAPPersonImportItem *, uint64_t))(*(_QWORD *)this + 24))(v11, this, 369098753);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v11[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3DAAPPersonImportItem *, uint64_t))(*(_QWORD *)this + 24))(v11, this, 369098754);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v11[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = __p;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"<ML3DAAPPersonImportItem ", 25);
  *(_DWORD *)((char *)&v11[1] + *(_QWORD *)(v11[0] - 24)) = *(_DWORD *)((_BYTE *)&v11[1] + *(_QWORD *)(v11[0] - 24)) & 0xFFFFFFB5 | 8;
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" profile_id=", 12);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v17;
  else
    v4 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  else
    size = v17.__r_.__value_.__l.__size_;
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, size);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", handle=", 9);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v16;
  else
    v8 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    v9 = v16.__r_.__value_.__l.__size_;
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  v18 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v18, 1);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete(v13);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF43C6FC](&v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1AC21236C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 - 57) < 0)
    operator delete(*(void **)(v17 - 80));
  _Unwind_Resume(exception_object);
}

id ML3DAAPPersonImportItem::getDeduplicationPredicates(ML3DAAPPersonImportItem *this)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t (**v5)();
  std::string __p;
  std::string v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t (***__return_ptr)(), ML3DAAPPersonImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v5, this, 369098753);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v5 = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v7 = __p;
  }
  ML3CPPBridgeString((const UInt8 *)&v7, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("cloud_id"), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = v2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1AC21251C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ML3DAAPImportItem::_getChildElement(ML3DAAPImportItem *this, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v5 = ML3DAAPCodeForImportPropertyKey(a3);
  if (v5)
  {
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v9, *(_QWORD *)(a2 + 64), v5);
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)this, &v9);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1AC212604(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

uint64_t std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ML3DAAPTrackImportItem::~ML3DAAPTrackImportItem(ML3DAAPTrackImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

unint64_t ML3DAAPTrackImportItem::getIntegerValue(ML3DAAPTrackImportItem *this, uint64_t a2)
{
  int v2;
  unint64_t result;
  int64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t IntegerValue;
  int v10;
  int v11;
  std::string *v12;
  int data_low;
  int v14;
  std::string *v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  ML3CPP::Element *v25;
  std::__shared_weak_count *v26;
  std::string __p;
  std::string v28;

  v2 = a2;
  result = ML3DAAPImportItem::getIntegerValue((ML3DAAPImportItem *)this, a2);
  v5 = result;
  if (v2 > 83886085)
  {
    if (v2 > 100663311)
    {
      if (v2 <= 117440513)
      {
        switch(v2)
        {
          case 100663312:
            if (!result)
            {
              v6 = *((_QWORD *)this + 8);
              v7 = 1634029124;
LABEL_46:
              ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v25, v6, v7);
              if (v25)
                v5 = ML3CPP::Element::integerValue(v25);
              else
                v5 = 0;
              std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&v25);
            }
            return v5;
          case 100663320:
            goto LABEL_9;
          case 100663321:
            if (ML3DAAPImportItem::getIntegerValue((ML3DAAPImportItem *)this, 33554466))
            {
              IntegerValue = ML3DAAPImportItem::getIntegerValue((ML3DAAPImportItem *)this, 167772190);
              if (IntegerValue)
                v5 = IntegerValue;
            }
            goto LABEL_9;
        }
        return v5;
      }
      if (v2 == 117440514)
        return (result >> 15) & 1;
      if (v2 == 117440515)
        return result != 0;
      if (v2 != 167772186)
        return v5;
    }
    else
    {
      v8 = v2 - 6;
      if ((v2 - 83886086) > 0xE)
        return v5;
      if (((1 << v8) & 0x400E) != 0)
        goto LABEL_9;
      if (((1 << v8) & 0x201) != 0)
        return result != 0;
      if (v2 != 83886099)
        return v5;
    }
    return result == 32;
  }
  if (v2 > 33554439)
  {
    switch(v2)
    {
      case 33554440:
        if (result)
          return v5;
        v6 = *((_QWORD *)this + 8);
        v7 = 1634956154;
        goto LABEL_46;
      case 33554441:
      case 33554442:
        return v5;
      case 33554443:
        goto LABEL_9;
      case 33554444:
        return _MLDMediaTypeFromDAAPMediaKind(result);
      case 33554445:
        if (result)
          return v5;
        return ML3DAAPTrackImportItem::_getItemRatingLevel(*((ML3DAAPTrackImportItem **)this + 8));
      case 33554446:
        return ML3DAAPTrackImportItem::_getItemRatingLevel(*((ML3DAAPTrackImportItem **)this + 8));
      case 33554447:
        return result != 0;
      default:
        if (v2 != 33554458)
        {
          if (v2 == 33554466 && !result)
            return ML3DAAPImportItem::getIntegerValue((ML3DAAPImportItem *)this, 167772191);
          return v5;
        }
        (*(void (**)(ML3CPP::Element **__return_ptr, ML3DAAPTrackImportItem *, uint64_t))(*(_QWORD *)this
                                                                                                  + 24))(&v25, this, 50331657);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          v25 = (ML3CPP::Element *)off_1E5B4D010;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v28 = __p;
        }
        v10 = (*(uint64_t (**)(ML3DAAPTrackImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 50331651);
        v11 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v28.__r_.__value_.__l.__size_ != 3)
            goto LABEL_62;
          v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (HIBYTE(v28.__r_.__value_.__r.__words[2]) != 3)
            goto LABEL_62;
          v12 = &v28;
        }
        data_low = LOWORD(v12->__r_.__value_.__l.__data_);
        v14 = v12->__r_.__value_.__s.__data_[2];
        if (data_low == 13421 && v14 == 112)
        {
          v5 = 13;
          goto LABEL_98;
        }
LABEL_62:
        if (v10 == 1634492771)
        {
          v5 = 26;
        }
        else if (v10 == 1836069985)
        {
          v17 = (*(uint64_t (**)(ML3DAAPTrackImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 100663307);
          v18 = 12;
          if (v17 == 2)
            v18 = 15;
          if (v17 == 1)
            v5 = 14;
          else
            v5 = v18;
        }
        else if (v10 == 1836082535
               && (*(unsigned int (**)(ML3DAAPTrackImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 50331652) == 3)
        {
          v5 = 42;
        }
        else
        {
          if ((v11 & 0x80) != 0)
          {
            if (v28.__r_.__value_.__l.__size_ != 3)
            {
              v5 = 0;
LABEL_99:
              operator delete(v28.__r_.__value_.__l.__data_);
              return v5;
            }
            v16 = (std::string *)v28.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (v11 != 3)
              return 0;
            v16 = &v28;
          }
          v19 = LOWORD(v16->__r_.__value_.__l.__data_);
          v20 = v16->__r_.__value_.__s.__data_[2];
          if (v19 == 13421 && v20 == 118)
          {
            ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v25, *((_QWORD *)this + 8), 0x61654D6Bu);
            if (v25 && (ML3CPP::Element::integerValue(v25) & 0x20) != 0)
              v5 = 5;
            else
              v5 = 3;
            v22 = v26;
            if (v26)
            {
              p_shared_owners = (unint64_t *)&v26->__shared_owners_;
              do
                v24 = __ldaxr(p_shared_owners);
              while (__stlxr(v24 - 1, p_shared_owners));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            LOBYTE(v11) = *((_BYTE *)&v28.__r_.__value_.__s + 23);
          }
          else
          {
            v5 = 0;
          }
        }
LABEL_98:
        if ((v11 & 0x80) == 0)
          return v5;
        goto LABEL_99;
    }
  }
  if (v2 > 16777241)
  {
    if (v2 != 16777242 && v2 != 16777246)
    {
      if (v2 != 16777247)
        return v5;
LABEL_9:
      if (v5)
        return (uint64_t)((double)v5 + -978307200.0);
      else
        return 0;
    }
    return result != 0;
  }
  if (v2 == 16777217)
    return _MLDMediaTypeFromDAAPMediaKind(result);
  if (v2 != 16777237)
    return v5;
  if (result <= 1)
    return 1;
  return result;
}

void sub_1AC212CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  char v23;

  if (v23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float ML3DAAPTrackImportItem::getFloatValue(ML3DAAPImportItem *this, uint64_t a2)
{
  unsigned int v2;
  float result;

  v2 = a2;
  result = ML3DAAPImportItem::getFloatValue(this, a2);
  if (v2 >> 1 == 58720265)
    return ML3CFAbsoluteTimeFromUInt32MacTime(result);
  return result;
}

BOOL ML3DAAPTrackImportItem::hasValue(ML3DAAPImportItem *this, uint64_t a2)
{
  return (a2 - 0x1000000) >> 25 <= 4 && ML3DAAPImportItem::hasValue(this, a2);
}

uint64_t _MLDMediaTypeFromDAAPMediaKind(unsigned int a1)
{
  unsigned int v1;
  int v2;

  v1 = (a1 >> 2) & 2 | (8 * (a1 & 1)) | ((int)(a1 << 26) >> 31) & 0x408 | ((a1 & 2) << 10) | (8 * a1) & 0x2200 | a1 & 4;
  if ((a1 & 2) != 0)
    v2 = 4096;
  else
    v2 = 32;
  if ((~v1 & 0x804) == 0)
    v1 = (a1 >> 2) & 2 | (8 * (a1 & 1)) & 0xE | ((int)(a1 << 26) >> 31) & 0x408 | ((a1 & 2) << 10) & 0x260E | (8 * a1) & 0x2200 | a1 & 4 | 0x100;
  if ((a1 & 0x200000) != 0)
    v1 = v1 & 0xFFFFFEFB | v2;
  if ((a1 & 0x400000) != 0)
    v1 = 0x10000;
  if ((a1 & 0x10000) != 0)
    return 64;
  else
    return v1;
}

uint64_t ML3DAAPTrackImportItem::_getItemRatingLevel(ML3DAAPTrackImportItem *this)
{
  uint64_t v1;
  MLContentRating *v2;
  void *v3;
  MLContentRating *v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 __dst;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *__p[2];
  uint64_t v16;

  __p[0] = 0;
  __p[1] = 0;
  v16 = 0;
  ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v13, (uint64_t)this, 0x61654352u);
  if (!v13)
    goto LABEL_6;
  std::string::basic_string[abi:ne180100](&__dst, *(void **)(v13 + 48), *(_QWORD *)(v13 + 64));
  *(_OWORD *)__p = __dst;
  v16 = v12;
  v1 = HIBYTE(v12);
  if (v12 < 0)
    v1 = *((_QWORD *)&__dst + 1);
  if (v1)
  {
    v2 = [MLContentRating alloc];
    ML3CPPBridgeString((const UInt8 *)__p, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[MLContentRating initWithStringRepresentation:](v2, "initWithStringRepresentation:", v3);

    -[MLContentRating ratingRank](v4, "ratingRank");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "longLongValue");

  }
  else
  {
LABEL_6:
    v6 = 0;
  }
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1AC212F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ML3DAAPDeleteImportItem::~ML3DAAPDeleteImportItem(ML3DAAPDeleteImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3DAAPDeleteImportItem::getDescription(ML3DAAPDeleteImportItem *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v5[11];
  char v6;
  uint64_t v7;
  char v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"<ML3DAAPDeleteImportItem ", 25);
  *(_DWORD *)((char *)&v5[1] + *(_QWORD *)(v5[0] - 24)) = *(_DWORD *)((_BYTE *)&v5[1] + *(_QWORD *)(v5[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (_QWORD *)std::ostream::operator<<();
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" sourceItemId=", 14);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  v3 = (_QWORD *)std::ostream::operator<<();
  v8 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v8, 1);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v5[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v7);
}

void sub_1AC21312C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id ML3DAAPDeleteImportItem::getDeduplicationPredicates(ML3DAAPDeleteImportItem *this)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  ML3TrackRulesIdentityPropertyForSource(*((unsigned int *)this + 18));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", v2, *((_QWORD *)this + 8));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1AC2131F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ML3DAAPContainerImportItem::isValid(ML3DAAPImportItem *this)
{
  uint64_t IntegerValue;
  NSObject *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  IntegerValue = ML3DAAPImportItem::getIntegerValue(this, 184549432);
  if ((unint64_t)(IntegerValue - 1) < 0xA && ((0x2FFu >> (IntegerValue - 1)) & 1) != 0)
    return 1;
  v2 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v4 = 134217984;
    v5 = IntegerValue;
    _os_log_impl(&dword_1AC149000, v2, OS_LOG_TYPE_ERROR, "got unknown container type %lld", (uint8_t *)&v4, 0xCu);
  }

  return 0;
}

uint64_t ML3DAAPContainerImportItem::getIntegerValue(ML3DAAPImportItem *this, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;

  v2 = a2;
  result = ML3DAAPImportItem::getIntegerValue(this, a2);
  v5 = result;
  if (v2 > 184549445)
  {
    if (v2 > 184549459)
    {
      switch(v2)
      {
        case 184549460:
          goto LABEL_11;
        case 201326593:
          return *((_QWORD *)this + 31);
        case 184549466:
LABEL_11:
          if (v5)
            return (uint64_t)((double)v5 + -978307200.0);
          else
            return 0;
      }
    }
    else if (v2 == 184549446)
    {
      return *((_DWORD *)this + 60) == 9;
    }
    else
    {
      return v5;
    }
  }
  else
  {
    result = 2;
    switch(v2)
    {
      case 184549379:
        v6 = *((_DWORD *)this + 60) - 5;
        if (v6 >= 6)
          return 0;
        else
          return *(_QWORD *)&asc_1AC3D7338[8 * v6];
      case 184549380:
      case 184549381:
      case 184549382:
        goto LABEL_11;
      case 184549388:
        if (*((_DWORD *)this + 60) != 1
          || std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(*((_QWORD *)this + 8) + 96, 0x616A5045u))
        {
          return v5;
        }
        goto LABEL_35;
      case 184549395:
        return *((_DWORD *)this + 60) == 5;
      case 184549396:
        v8 = *((unsigned int *)this + 26);
        goto LABEL_28;
      case 184549397:
        return *((_DWORD *)this + 60) == 4;
      case 184549398:
        return *((unsigned __int8 *)this + 88);
      case 184549399:
        return *((unsigned __int8 *)this + 89);
      case 184549400:
        if (*((_DWORD *)this + 60) == 3)
          goto LABEL_35;
        result = *((_BYTE *)this + 102) != 0;
        break;
      case 184549401:
        return *((unsigned __int8 *)this + 100);
      case 184549402:
        return *((unsigned __int8 *)this + 90);
      case 184549403:
        return *((unsigned __int8 *)this + 91);
      case 184549404:
        v8 = *((unsigned int *)this + 23);
LABEL_28:
        result = TrackOrderForITDBTrackOrder(v8);
        break;
      case 184549405:
        result = *((unsigned int *)this + 24);
        break;
      case 184549406:
        result = *((unsigned __int8 *)this + 101);
        break;
      case 184549409:
        if ((v5 - 1) > 0x4B)
LABEL_35:
          result = 1;
        else
          result = dword_1AC3D6AA4[(v5 - 1)];
        break;
      case 184549413:
        return result;
      case 184549430:
        return *((_DWORD *)this + 60) == 7;
      case 184549431:
        return *((_DWORD *)this + 60) == 8;
      default:
        return v5;
    }
  }
  return result;
}

void ML3DAAPContainerImportItem::getDataValue(ML3DAAPContainerImportItem *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  v3 = a2;
  ML3DAAPImportItem::getDataValue((ML3DAAPImportItem *)this, a2, a3);
  if (v3 == 184549407 && (*((_DWORD *)this + 60) | 8) == 0xA)
  {
    if (*((_QWORD *)this + 26))
    {
      v6 = operator new();
      v7 = objc_msgSend(*((id *)this + 26), "bytes");
      v8 = objc_msgSend(*((id *)this + 26), "length");
      *(_QWORD *)v6 = &off_1E5B4CF08;
      *(_QWORD *)(v6 + 8) = v8;
      *(_BYTE *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 16) = v7;
      *(_QWORD *)&v13 = v6;
      v9 = (_QWORD *)operator new();
      *v9 = &off_1E5B51730;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = v6;
      *((_QWORD *)&v13 + 1) = v9;
      std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a3, &v13);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
      if (*((_QWORD *)&v13 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
}

void sub_1AC21365C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL ML3DAAPContainerImportItem::hasValue(ML3DAAPImportItem *this, uint64_t a2)
{
  int v2;
  _BOOL8 hasValue;
  _BOOL8 result;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  if ((a2 - 184549376) >> 24 > 2)
    return 0;
  v2 = a2;
  hasValue = ML3DAAPImportItem::hasValue(this, a2);
  if (v2 <= 184549429)
  {
    result = 1;
    switch(v2)
    {
      case 184549383:
        v10 = *((_QWORD *)this + 8) + 96;
        if (std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v10, 0x61655073u))
        {
          return 1;
        }
        v7 = v10;
        v8 = 1634029682;
        break;
      case 184549388:
        if (*((_DWORD *)this + 60) == 1)
          return result;
        v7 = *((_QWORD *)this + 8) + 96;
        v8 = 1634357317;
        goto LABEL_37;
      case 184549396:
      case 184549398:
      case 184549399:
      case 184549401:
      case 184549402:
      case 184549403:
      case 184549404:
      case 184549405:
      case 184549406:
        goto LABEL_4;
      case 184549397:
        return *((_DWORD *)this + 60) == 4;
      case 184549400:
        if (*((_DWORD *)this + 60) == 3)
          return result;
LABEL_4:
        v6 = *((_BYTE *)this + 200) == 0;
        return !v6;
      case 184549407:
        if ((*((_DWORD *)this + 60) | 8) != 0xA)
          return 0;
        v11 = *((_QWORD *)this + 26);
        goto LABEL_28;
      case 184549413:
        return result;
      default:
        return hasValue;
    }
    goto LABEL_37;
  }
  if (v2 > 201326592)
  {
    if (v2 > 218103812)
    {
      if (v2 == 218103813)
      {
        v7 = *((_QWORD *)this + 8) + 96;
        v8 = 1634353516;
        goto LABEL_37;
      }
      if (v2 == 218103814)
      {
        v7 = *((_QWORD *)this + 8) + 96;
        v8 = 1634357356;
        goto LABEL_37;
      }
    }
    else
    {
      if (v2 == 201326593)
      {
        v11 = *((_QWORD *)this + 31);
LABEL_28:
        v6 = v11 == 0;
        return !v6;
      }
      if (v2 == 218103812)
      {
        v7 = *((_QWORD *)this + 8) + 96;
        v8 = 1634759535;
LABEL_37:
        v6 = std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v7, v8) == 0;
        return !v6;
      }
    }
    return hasValue;
  }
  switch(v2)
  {
    case 184549430:
      v9 = *((_DWORD *)this + 60) == 7;
      break;
    case 184549431:
      v9 = *((_DWORD *)this + 60) == 8;
      break;
    case 184549446:
      v9 = *((_DWORD *)this + 60) == 9;
      break;
    default:
      return hasValue;
  }
  return v9;
}

uint64_t ML3DAAPContainerImportItem::getPlaylistTrackPersonIdentifiers@<X0>(ML3DAAPContainerImportItem *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::unordered_set<std::string>>::__init_with_size[abi:ne180100]<std::unordered_set<std::string>*,std::unordered_set<std::string>*>((uint64_t)a2, *((_QWORD *)this + 32), *((_QWORD *)this + 33), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 33) - *((_QWORD *)this + 32)) >> 3));
}

void ML3DAAPContainerImportItem::getDescription(ML3DAAPContainerImportItem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  _QWORD v8[11];
  char v9;
  uint64_t v10;
  uint64_t (**v11)();
  std::string v12;
  char v13;

  (*(void (**)(uint64_t (***__return_ptr)(), ML3DAAPContainerImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v11, this, 184549384);
  (*(void (**)(ML3DAAPContainerImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 184549408);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<ML3DAAPContainerImportItem ", 28);
  *(_DWORD *)((char *)&v8[1] + *(_QWORD *)(v8[0] - 24)) = *(_DWORD *)((_BYTE *)&v8[1] + *(_QWORD *)(v8[0] - 24)) & 0xFFFFFFB5 | 8;
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" store_cloud_id=", 16);
  *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 2;
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", name=", 7);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  else
    __p = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  v13 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v13, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF43C6FC](&v10);
  v11 = off_1E5B4D010;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_1AC213B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  std::ostringstream::~ostringstream((uint64_t)&a15);
  *(_QWORD *)(v15 - 96) = off_1E5B4D010;
  if (*(char *)(v15 - 57) < 0)
    operator delete(*(void **)(v15 - 80));
  _Unwind_Resume(a1);
}

id ML3DAAPContainerImportItem::getDeduplicationPredicates(ML3DAAPContainerImportItem *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  void *v6;
  id v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  ML3CPP::Element *v12;
  std::__shared_weak_count *v13;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (*(uint64_t (**)(ML3DAAPContainerImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 184549408);
  if (v3)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_cloud_id"), v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v4);

  }
  ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v12, *((_QWORD *)this + 8), 0x616A5069u);
  if (v12)
  {
    v5 = ML3CPP::Element::integerValue(v12);
    if (v5)
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_cloud_id"), v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v6);

    }
  }
  v7 = v2;
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v7;
}

void sub_1AC213C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ML3DAAPContainerImportItem::_createImportItemValue(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;

  *a4 = 0;
  a4[1] = 0;
  if (a2 == 218103812)
  {
    v6 = operator new();
    v7 = v6;
    v8 = *a3;
    v9 = (std::__shared_weak_count *)a3[1];
    v28 = *a3;
    v29 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    ML3DAAPTrackImportItem::ML3DAAPTrackImportItem(v6, v8, v9);
    *(_QWORD *)&v30 = v7;
    v12 = (_QWORD *)operator new();
    *v12 = &off_1E5B51880;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v7;
    *((_QWORD *)&v30 + 1) = v12;
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a4, &v30);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v29;
    if (v29)
    {
      v17 = (unint64_t *)&v29->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
LABEL_25:
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v19 = a3[1];
    v26 = *a3;
    v27 = (std::__shared_weak_count *)v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    ML3DAAPImportItem::_createImportItemValue(a1, a2, &v26, &v30);
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a4, &v30);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v16 = v27;
    if (v27)
    {
      v25 = (unint64_t *)&v27->__shared_owners_;
      do
        v18 = __ldaxr(v25);
      while (__stlxr(v18 - 1, v25));
      goto LABEL_25;
    }
  }
}

void sub_1AC213E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t ML3DAAPTrackImportItem::ML3DAAPTrackImportItem(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)a1 = &off_1E5B4D050;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = a3;
  if (a3)
  {
    v7 = (unint64_t *)&a3->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  *(_QWORD *)a1 = &off_1E5B4D968;
  return a1;
}

void std::__shared_ptr_pointer<ML3DAAPTrackImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3DAAPTrackImportItem>,std::allocator<ML3DAAPTrackImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3DAAPTrackImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3DAAPTrackImportItem>,std::allocator<ML3DAAPTrackImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3DAAPTrackImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3DAAPTrackImportItem>,std::allocator<ML3DAAPTrackImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_22ML3DAAPTrackImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ML3DAAPContainerDeleteImportItem::~ML3DAAPContainerDeleteImportItem(ML3DAAPContainerDeleteImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

id ML3DAAPContainerDeleteImportItem::getDeduplicationPredicates(ML3DAAPContainerDeleteImportItem *this)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  ML3ContainerRulesIdentityPropertyForSource(*((unsigned int *)this + 18));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", v2, *((_QWORD *)this + 8));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1AC214148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3DAAPAlbumImportItem::getStringValue(ML3DAAPAlbumImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::string *v4;
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string __str;
  __int128 v9;

  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (std::string *)(a3 + 16);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v9 = 0uLL;
  if (a2 <= 285212673)
  {
    switch(a2)
    {
      case 33554451:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61677270u);
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        if (__str.__r_.__value_.__r.__words[0])
          goto LABEL_23;
        break;
      case 33554462:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x6177726Bu);
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        if (__str.__r_.__value_.__r.__words[0])
        {
LABEL_23:
          std::string::basic_string[abi:ne180100](&__str, *(void **)(__str.__r_.__value_.__r.__words[0] + 48), *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 64));
          std::string::operator=(v4, &__str);
          *(_BYTE *)(a3 + 8) = 1;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        break;
      case 285212673:
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x6173616Cu);
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        if (!__str.__r_.__value_.__r.__words[0])
          break;
        goto LABEL_23;
      default:
        return;
    }
  }
  else if (a2 > 285212696)
  {
    if (a2 == 285212697)
    {
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x616A4169u);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (__str.__r_.__value_.__r.__words[0])
        goto LABEL_23;
    }
    else
    {
      if (a2 != 285212699)
        return;
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61736161u);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (__str.__r_.__value_.__r.__words[0])
        goto LABEL_23;
    }
  }
  else
  {
    if (a2 != 285212674)
    {
      if (a2 != 285212682)
        return;
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61737075u);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_25;
      goto LABEL_23;
    }
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61737375u);
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    if (__str.__r_.__value_.__r.__words[0])
      goto LABEL_23;
  }
LABEL_25:
  if (size)
  {
    p_shared_owners = (unint64_t *)&size->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_1AC214478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  void **v17;
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  *(_QWORD *)v16 = v18;
  if (*(char *)(v16 + 39) < 0)
    operator delete(*v17);
  _Unwind_Resume(a1);
}

unint64_t ML3DAAPAlbumImportItem::getIntegerValue(ML3DAAPAlbumImportItem *this, int a2)
{
  unint64_t v3;
  std::__shared_weak_count *v4;
  unsigned int v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  std::string::size_type size;
  int v10;
  BOOL v11;
  char v12;
  std::string::size_type v13;
  std::string v15;
  ML3CPP::Element *v16;
  std::__shared_weak_count *v17;
  std::string __p;
  std::string v19;
  ML3CPP::Element *v20;
  std::__shared_weak_count *v21;

  v3 = 0;
  v20 = 0;
  v21 = 0;
  if (a2 <= 285212678)
  {
    if (a2 == 16777217)
    {
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v16, *((_QWORD *)this + 8), 0x61654D6Bu);
      v4 = v17;
      v20 = v16;
      v21 = v17;
      if (v16)
      {
        v5 = ML3CPP::Element::integerValue(v16);
        v3 = _MLDMediaTypeFromDAAPMediaKind(v5);
        goto LABEL_20;
      }
    }
    else
    {
      if (a2 != 16777248)
        return v3;
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v16, *((_QWORD *)this + 8), 0x616A6341u);
LABEL_15:
      v4 = v17;
      v20 = v16;
      v21 = v17;
      if (v16)
      {
        v3 = ML3CPP::Element::integerValue(v16);
LABEL_20:
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        return v3;
      }
    }
    v3 = 0;
    goto LABEL_20;
  }
  switch(a2)
  {
    case 285212679:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v16, *((_QWORD *)this + 8), 0x61736C72u);
      goto LABEL_15;
    case 285212680:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v16, *((_QWORD *)this + 8), 0x616A616Cu);
      goto LABEL_15;
    case 285212681:
    case 285212682:
    case 285212685:
    case 285212686:
    case 285212687:
    case 285212689:
    case 285212690:
    case 285212691:
    case 285212692:
      return v3;
    case 285212683:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v16, *((_QWORD *)this + 8), 0x61655355u);
      goto LABEL_15;
    case 285212684:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v16, *((_QWORD *)this + 8), 0x61737972u);
      goto LABEL_15;
    case 285212688:
      (*(void (**)(ML3CPP::Element **__return_ptr, ML3DAAPAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v16, this, 33554462);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        v16 = (ML3CPP::Element *)off_1E5B4D010;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v19 = __p;
      }
      (*(void (**)(ML3CPP::Element **__return_ptr, ML3DAAPAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v16, this, 33554451);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        v16 = (ML3CPP::Element *)off_1E5B4D010;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v15 = __p;
      }
      v8 = (*(uint64_t (**)(ML3DAAPAlbumImportItem *, uint64_t))(*(_QWORD *)this + 56))(this, 16777248);
      size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      v10 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v19.__r_.__value_.__l.__size_;
      v11 = size == 0;
      if (size)
        v12 = 0;
      else
        v12 = v8;
      if ((v12 & 1) != 0)
      {
        v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v13 = v15.__r_.__value_.__l.__size_;
        LODWORD(v3) = v13 != 0;
        if ((*((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_45;
      }
      else
      {
        LODWORD(v3) = !v11;
        if ((*((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_45:
          operator delete(v15.__r_.__value_.__l.__data_);
      }
      v3 = v3;
      if (v10 < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      break;
    case 285212693:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v16, *((_QWORD *)this + 8), 0x616A6145u);
      goto LABEL_15;
    default:
      if (a2 != 285212696)
        return v3;
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v16, *((_QWORD *)this + 8), 0x61655049u);
      goto LABEL_15;
  }
  return v3;
}

void sub_1AC214818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v28 - 32);
  _Unwind_Resume(a1);
}

BOOL ML3DAAPAlbumImportItem::hasValue(ML3DAAPAlbumImportItem *this, int a2)
{
  _BOOL8 v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned int v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  int v10;
  int v11;
  std::string::size_type size;
  std::string::size_type v13;
  std::string v14;
  _QWORD v15[2];
  std::string __p;
  std::string v17;

  v3 = 0;
  if (a2 > 285212672)
  {
    switch(a2)
    {
      case 285212673:
        v4 = *((_QWORD *)this + 8) + 96;
        v5 = 24940;
        goto LABEL_9;
      case 285212674:
        v4 = *((_QWORD *)this + 8) + 96;
        v5 = 29557;
LABEL_9:
        v6 = v5 | 0x61730000;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v6) != 0;
      case 285212679:
        v4 = *((_QWORD *)this + 8) + 96;
        v6 = 1634954354;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v6) != 0;
      case 285212680:
        v4 = *((_QWORD *)this + 8) + 96;
        v6 = 1634361708;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v6) != 0;
      case 285212681:
        v4 = *((_QWORD *)this + 8) + 96;
        v6 = 1634952047;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v6) != 0;
      case 285212682:
        v4 = *((_QWORD *)this + 8) + 96;
        v6 = 1634955381;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v6) != 0;
      case 285212683:
        v4 = *((_QWORD *)this + 8) + 96;
        v6 = 1634030421;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v6) != 0;
      case 285212684:
        v4 = *((_QWORD *)this + 8) + 96;
        v6 = 1634957682;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v6) != 0;
      case 285212688:
        (*(void (**)(_QWORD *__return_ptr, ML3DAAPAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v15, this, 33554462);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v17, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          v15[0] = off_1E5B4D010;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v17 = __p;
        }
        (*(void (**)(_QWORD *__return_ptr, ML3DAAPAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v15, this, 33554451);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          v15[0] = off_1E5B4D010;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v14 = __p;
        }
        v10 = (*(uint64_t (**)(ML3DAAPAlbumImportItem *, uint64_t))(*(_QWORD *)this + 56))(this, 16777248);
        v11 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
        size = v17.__r_.__value_.__l.__size_;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        v3 = size != 0;
        if (!size && ((v10 ^ 1) & 1) == 0)
        {
          if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v13 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
          else
            v13 = v14.__r_.__value_.__l.__size_;
          v3 = v13 != 0;
        }
        if ((*((_BYTE *)&v14.__r_.__value_.__s + 23) & 0x80) != 0)
          operator delete(v14.__r_.__value_.__l.__data_);
        if (v11 < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        return v3;
      case 285212690:
        v4 = *((_QWORD *)this + 8) + 96;
        v6 = 1634951539;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v6) != 0;
      case 285212693:
        v4 = *((_QWORD *)this + 8) + 96;
        v7 = 24901;
        goto LABEL_24;
      case 285212695:
        v4 = *((_QWORD *)this + 8) + 96;
        v8 = 27762;
        goto LABEL_22;
      case 285212696:
        v4 = *((_QWORD *)this + 8) + 96;
        v8 = 20553;
LABEL_22:
        v6 = v8 | 0x61650000;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v6) != 0;
      case 285212697:
        v4 = *((_QWORD *)this + 8) + 96;
        v7 = 16745;
LABEL_24:
        v6 = v7 | 0x616A0000;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v6) != 0;
      default:
        return v3;
    }
  }
  switch(a2)
  {
    case 16777248:
      v4 = *((_QWORD *)this + 8) + 96;
      v6 = 1634362177;
      return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v6) != 0;
    case 33554451:
      v4 = *((_QWORD *)this + 8) + 96;
      v6 = 1634169456;
      return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v6) != 0;
    case 33554462:
      v4 = *((_QWORD *)this + 8) + 96;
      v6 = 1635218027;
      return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(v4, v6) != 0;
  }
  return v3;
}

void sub_1AC214BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v22 - 25) < 0)
    operator delete(*(void **)(v22 - 48));
  _Unwind_Resume(exception_object);
}

void ML3DAAPAlbumImportItem::getDescription(ML3DAAPAlbumImportItem *this)
{
  _QWORD *v2;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v5;
  std::string __p;
  _QWORD v7[11];
  char v8;
  uint64_t v9;
  uint64_t (**v10)();
  std::string v11;
  char v12;

  (*(void (**)(uint64_t (***__return_ptr)(), ML3DAAPAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v10, this, 285212673);
  (*(void (**)(ML3DAAPAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212696);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"<ML3DAAPAlbumImportItem ", 24);
  *(_DWORD *)((char *)&v7[1] + *(_QWORD *)(v7[0] - 24)) = *(_DWORD *)((_BYTE *)&v7[1] + *(_QWORD *)(v7[0] - 24)) & 0xFFFFFFB5 | 8;
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" name=", 6);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    __p = v11;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" storeID=", 9);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  v5 = (_QWORD *)std::ostream::operator<<();
  v12 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v12, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF43C6FC](&v9);
  v10 = off_1E5B4D010;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1AC214E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  std::ostringstream::~ostringstream((uint64_t)&a15);
  *(_QWORD *)(v15 - 96) = off_1E5B4D010;
  if (*(char *)(v15 - 57) < 0)
    operator delete(*(void **)(v15 - 80));
  _Unwind_Resume(a1);
}

id ML3DAAPAlbumImportItem::getDeduplicationPredicates(ML3DAAPAlbumImportItem *this)
{
  uint64_t v2;
  uint64_t v3;
  std::string::size_type size;
  void *v5;
  void *v6;
  void *v7;
  std::string::size_type v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  std::string *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v37;
  std::string v38;
  std::string v39;
  _QWORD v40[2];
  std::string __p;
  std::string v42;
  _QWORD v43[2];
  _QWORD v44[3];
  _QWORD v45[5];
  _QWORD v46[7];

  v46[5] = *MEMORY[0x1E0C80C00];
  v37 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v2 = (*(uint64_t (**)(ML3DAAPAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212696);
  v3 = (*(uint64_t (**)(ML3DAAPAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212683);
  (*(void (**)(_QWORD *__return_ptr, ML3DAAPAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v40, this, 285212673);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v42, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v40[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v42 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3DAAPAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v40, this, 285212699);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v40[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v39 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3DAAPAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v40, this, 285212682);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v40[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v38 = __p;
  }
  size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v42.__r_.__value_.__l.__size_;
  if (size)
  {
    v5 = (void *)*((_QWORD *)this + 10);
    ML3CPPBridgeString((const UInt8 *)&v42, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "groupingKeyForString:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }
  v8 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = v39.__r_.__value_.__l.__size_;
  if (v8)
  {
    v9 = (void *)*((_QWORD *)this + 10);
    ML3CPPBridgeString((const UInt8 *)&v39, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "groupingKeyForString:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v2)
      goto LABEL_29;
  }
  else
  {
    v11 = 0;
    if (!v2)
      goto LABEL_29;
  }
  if (objc_msgSend(v7, "length") && objc_msgSend(v11, "length"))
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_id"), v2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v46[0] = v12;
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", CFSTR("cloud_library_id"), &stru_1E5B66908, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v46[1] = v13;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("album_artist.grouping_key"), v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v46[2] = v14;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v46[3] = v15;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), v3);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v46[4] = v16;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v46, 5);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v37, "addObject:", v18);
  }
  else
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_id"), v2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v45[0] = v19;
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", CFSTR("cloud_library_id"), &stru_1E5B66908, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v45[1] = v20;
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("album_artist.grouping_key"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v45[2] = v21;
    +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("grouping_key"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v45[3] = v22;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), v3);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v45[4] = v23;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v45, 5);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v24);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v37, "addObject:", v18);
  }

LABEL_29:
  if (objc_msgSend(v7, "length") && objc_msgSend(v11, "length"))
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("album_artist.grouping_key"), v11);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v44[0] = v25;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v7);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v44[1] = v26;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), v3);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v44[2] = v27;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v44, 3);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v37, "addObject:", v29);
  }
  if (objc_msgSend(v7, "length"))
  {
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v38.__r_.__value_.__l.__size_)
        goto LABEL_39;
      v30 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((_BYTE *)&v38.__r_.__value_.__s + 23))
        goto LABEL_39;
      v30 = &v38;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("feed_url"), v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v43[0] = v32;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v7);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v43[1] = v33;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v43, 2);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v37, "addObject:", v35);
  }
LABEL_39:

  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  return v37;
}

void sub_1AC2155B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;

  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a37 < 0)
    operator delete(a32);

  _Unwind_Resume(a1);
}

uint64_t ML3DAAPAlbumImportItem::sortPropertyKeyForPropertyKey(ML3DAAPAlbumImportItem *this, int a2)
{
  if (a2 == 285212673)
    return 285212674;
  else
    return 0;
}

uint64_t ML3DAAPAlbumImportItem::propertyKeyForSortPropertyKey(ML3DAAPAlbumImportItem *this, int a2)
{
  if (a2 == 285212674)
    return 285212673;
  else
    return 0;
}

void ML3DAAPArtistImportItem::getStringValue(ML3DAAPArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::string *v4;
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string __str;
  __int128 v9;

  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (std::string *)(a3 + 16);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v9 = 0uLL;
  switch(a2)
  {
    case 318767105:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61736172u);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (!__str.__r_.__value_.__r.__words[0])
        goto LABEL_17;
      goto LABEL_15;
    case 318767106:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61737361u);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (__str.__r_.__value_.__r.__words[0])
        goto LABEL_15;
      goto LABEL_17;
    case 318767107:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x6165534Eu);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (__str.__r_.__value_.__r.__words[0])
        goto LABEL_15;
      goto LABEL_17;
    case 318767108:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61737373u);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (__str.__r_.__value_.__r.__words[0])
        goto LABEL_15;
      goto LABEL_17;
    default:
      if (a2 == 301989890)
      {
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x6173736Cu);
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        if (!__str.__r_.__value_.__r.__words[0])
          goto LABEL_17;
        goto LABEL_15;
      }
      if (a2 != 301989889)
        return;
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&__str, *((_QWORD *)this + 8), 0x61736161u);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      v9 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (__str.__r_.__value_.__r.__words[0])
      {
LABEL_15:
        std::string::basic_string[abi:ne180100](&__str, *(void **)(__str.__r_.__value_.__r.__words[0] + 48), *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 64));
        std::string::operator=(v4, &__str);
        *(_BYTE *)(a3 + 8) = 1;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
LABEL_17:
      if (size)
      {
        p_shared_owners = (unint64_t *)&size->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      return;
  }
}

void sub_1AC215ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  void **v17;
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  *(_QWORD *)v16 = v18;
  if (*(char *)(v16 + 39) < 0)
    operator delete(*v17);
  _Unwind_Resume(a1);
}

unint64_t ML3DAAPArtistImportItem::getIntegerValue(ML3DAAPArtistImportItem *this, int a2)
{
  unint64_t v2;
  std::__shared_weak_count *v3;
  unsigned int v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  ML3CPP::Element *v8;
  std::__shared_weak_count *v9;
  ML3CPP::Element *v10;
  std::__shared_weak_count *v11;

  v2 = 0;
  v10 = 0;
  v11 = 0;
  if (a2 > 301989900)
  {
    if (a2 != 318767118)
    {
      if (a2 == 318767111)
      {
        ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x61654149u);
        goto LABEL_15;
      }
      if (a2 != 301989901)
        return v2;
    }
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x616A4165u);
    goto LABEL_15;
  }
  switch(a2)
  {
    case 16777217:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x61654D6Bu);
      v3 = v9;
      v10 = v8;
      v11 = v9;
      if (v8)
      {
        v4 = ML3CPP::Element::integerValue(v8);
        v2 = _MLDMediaTypeFromDAAPMediaKind(v4);
        if (!v3)
          return v2;
        goto LABEL_19;
      }
LABEL_18:
      v2 = 0;
      if (!v3)
        return v2;
      goto LABEL_19;
    case 16777246:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x6173636Fu);
      break;
    case 301989893:
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v8, *((_QWORD *)this + 8), 0x616A5061u);
      break;
    default:
      return v2;
  }
LABEL_15:
  v3 = v9;
  v10 = v8;
  v11 = v9;
  if (!v8)
    goto LABEL_18;
  v2 = ML3CPP::Element::integerValue(v8);
  if (!v3)
    return v2;
LABEL_19:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v2;
}

void sub_1AC215CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL ML3DAAPArtistImportItem::hasValue(ML3DAAPArtistImportItem *this, int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned __int16 v5;

  v3 = 0;
  v4 = 1634951521;
  if (a2 > 301989903)
  {
    switch(a2)
    {
      case 318767105:
        v4 = 1634951538;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(*((_QWORD *)this + 8) + 96, v4) != 0;
      case 318767106:
        v4 = 1634956129;
        return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(*((_QWORD *)this + 8) + 96, v4) != 0;
      case 318767107:
        v5 = 21326;
        goto LABEL_20;
      case 318767108:
      case 318767109:
      case 318767110:
        return v3;
      case 318767111:
        v5 = 16713;
        goto LABEL_20;
      default:
        if (a2 == 301989904)
        {
          v5 = 27762;
LABEL_20:
          v4 = v5 | 0x61650000;
          return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(*((_QWORD *)this + 8) + 96, v4) != 0;
        }
        if (a2 != 318767118)
          return v3;
        break;
    }
    goto LABEL_14;
  }
  if (a2 <= 301989892)
  {
    if (a2 == 301989889)
      return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(*((_QWORD *)this + 8) + 96, v4) != 0;
    if (a2 == 301989890)
    {
      v4 = 1634956140;
      return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(*((_QWORD *)this + 8) + 96, v4) != 0;
    }
    return v3;
  }
  switch(a2)
  {
    case 301989893:
      v4 = 1634357345;
      return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(*((_QWORD *)this + 8) + 96, v4) != 0;
    case 301989901:
LABEL_14:
      v4 = 1634353509;
      return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(*((_QWORD *)this + 8) + 96, v4) != 0;
    case 301989903:
      v4 = 1634036851;
      return std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::__count_multi<unsigned int>(*((_QWORD *)this + 8) + 96, v4) != 0;
  }
  return v3;
}

void ML3DAAPArtistImportItem::getDescription(ML3DAAPArtistImportItem *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::string *v7;
  std::string::size_type size;
  _QWORD *v9;
  _QWORD *v10;
  std::string *v11;
  std::string::size_type v12;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v20[2];
  std::string __p;
  void *v22;
  char v23;
  uint64_t v24;
  std::string v25;
  std::string v26;
  std::string v27;
  char v28;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 24))(v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v20[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v27 = __p;
  }
  if (*((_QWORD *)this + 10) == 2)
    v2 = 318767106;
  else
    v2 = 301989890;
  (*(void (**)(_QWORD *__return_ptr, ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v20, this, v2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v20[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v26 = __p;
  }
  if (*((_QWORD *)this + 10) == 2)
    v3 = 318767111;
  else
    v3 = 301989893;
  (*(void (**)(ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, v3);
  (*(void (**)(_QWORD *__return_ptr, ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v20, this, 318767107);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v20[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v25 = __p;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"<ML3DAAPArtistImportItem ", 25);
  *(_DWORD *)((char *)&v20[1] + *(_QWORD *)(v20[0] - 24)) = *(_DWORD *)((_BYTE *)&v20[1] + *(_QWORD *)(v20[0] - 24)) & 0xFFFFFFB5 | 8;
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" entityType=", 12);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" name=", 6);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v27;
  else
    v7 = (std::string *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  else
    size = v27.__r_.__value_.__l.__size_;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, size);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" sortName=", 10);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v26;
  else
    v11 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  else
    v12 = v26.__r_.__value_.__l.__size_;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" seriesName=", 12);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v25;
  else
    v15 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  else
    v16 = v25.__r_.__value_.__l.__size_;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" storeID=", 9);
  *(_DWORD *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v18 + *(_QWORD *)(*v18 - 24) + 8) & 0xFFFFFFB5 | 2;
  v19 = (_QWORD *)std::ostream::operator<<();
  v28 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v28, 1);
  std::stringbuf::str();
  v20[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v20[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete(v22);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF43C6FC](&v24);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_1AC2161D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 - 105) < 0)
    operator delete(*(void **)(v17 - 128));
  if (*(char *)(v17 - 73) < 0)
    operator delete(*(void **)(v17 - 96));
  _Unwind_Resume(exception_object);
}

id ML3DAAPArtistImportItem::getDeduplicationPredicates(ML3DAAPArtistImportItem *this)
{
  id v2;
  __CFString *v3;
  __CFString *v4;
  uint64_t v5;
  void *v6;
  std::string::size_type size;
  char v8;
  std::string::size_type v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v24[2];
  std::string v25;
  std::string __str;
  std::string __p;
  _QWORD v28[2];
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = CFSTR("store_id");
  v4 = CFSTR("grouping_key");
  memset(&__p, 0, sizeof(__p));
  if (*((_QWORD *)this + 10) == 2)
  {
    (*(void (**)(_QWORD *__return_ptr, ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v24, this, 318767105);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    else
      __str = v25;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __str;
    v24[0] = off_1E5B4D010;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v5 = (*(uint64_t (**)(ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777217);
    if ((MLMediaTypeByStandardizingMediaType(v5) & 8) == 0)
    {
      (*(void (**)(_QWORD *__return_ptr, ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v24, this, 318767107);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
        v24[0] = off_1E5B4D010;
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
      }
      else
      {
        __str = v25;
      }
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __str.__r_.__value_.__l.__size_;
      if (size)
      {
        std::string::operator=(&__p, &__str);
        v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      if (v8 < 0)
      {
        v6 = (void *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_27;
      }
    }
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, ML3DAAPArtistImportItem *, _QWORD))(*(_QWORD *)this + 152))(v24, this, 0);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    else
      __str = v25;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __str;
    v24[0] = off_1E5B4D010;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      v6 = (void *)v25.__r_.__value_.__r.__words[0];
LABEL_27:
      operator delete(v6);
    }
  }
  v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = __p.__r_.__value_.__l.__size_;
  if (v9)
  {
    v10 = (void *)*((_QWORD *)this + 11);
    ML3CPPBridgeString((const UInt8 *)&__p, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "groupingKeyForString:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v12 = 0;
  }
  if (*((_QWORD *)this + 10) == 2)
    v13 = 318767111;
  else
    v13 = 301989893;
  v14 = (*(uint64_t (**)(ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, v13);
  if (v14)
  {
    if (!v12)
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", v3, v14);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v28[0] = v20;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", v4, &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v28[1] = v21;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v28, 2);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v22);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v2, "addObject:", v19);
      goto LABEL_42;
    }
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", v3, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v29[0] = v15;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", v4, v12);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v29[1] = v16;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v29, 2);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v2, "addObject:", v18);
  }
  else if (!v12)
  {
    goto LABEL_43;
  }
  +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", v4, v12);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v19);
LABEL_42:

LABEL_43:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v2;
}

void sub_1AC216720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;

  if (a17 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);

  _Unwind_Resume(a1);
}

void ML3DAAPArtistImportItem::getEffectiveAlbumArtist(ML3DAAPArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  std::string::value_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string::value_type v13;
  std::string *v14;
  std::string v15;
  std::string v16;
  std::string v17;
  __int128 v18;
  std::string v19;
  std::string __str;

  v6 = (*(uint64_t (**)(ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 318767105);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    __str = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 318767107);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 301989889);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v19;
  }
  v7 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v18, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    v18 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[0] = v16.__r_.__value_.__r.__words[2];
  }
  if (!v6)
  {
    v8 = v19.__r_.__value_.__s.__data_[7];
    v9 = v19.__r_.__value_.__s.__data_[7];
    v10 = *((_QWORD *)&v18 + 1);
    if (v19.__r_.__value_.__s.__data_[7] >= 0)
      v11 = v19.__r_.__value_.__s.__data_[7];
    else
      v11 = *((_QWORD *)&v18 + 1);
    if (!v11)
    {
      std::string::operator=((std::string *)&v18, &__str);
      v8 = v19.__r_.__value_.__s.__data_[7];
      v10 = *((_QWORD *)&v18 + 1);
      v9 = v19.__r_.__value_.__s.__data_[7];
    }
    if (v9 < 0)
      v8 = v10;
    if (!v8)
      std::string::operator=((std::string *)&v18, &v17);
  }
  v12 = v19.__r_.__value_.__s.__data_[7];
  v13 = v19.__r_.__value_.__s.__data_[7];
  if (v19.__r_.__value_.__s.__data_[7] < 0)
    v12 = *((_QWORD *)&v18 + 1);
  if (v12 && a2)
  {
    ML3CPPSanitizeString(&v15, (unint64_t)&v18);
    if (v19.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v18);
    v19.__r_.__value_.__r.__words[0] = v15.__r_.__value_.__r.__words[2];
    v18 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v14 = (std::string *)(a3 + 16);
  if ((v13 & 0x80) == 0)
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v18;
    *(_QWORD *)(a3 + 32) = v19.__r_.__value_.__r.__words[0];
    if ((v7 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
  std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
  if ((v19.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
  operator delete((void *)v18);
  if (v7 < 0)
LABEL_38:
    operator delete(v16.__r_.__value_.__l.__data_);
LABEL_39:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1AC216AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v31 - 57) < 0)
    operator delete(*(void **)(v31 - 80));
  _Unwind_Resume(a1);
}

void ML3DAAPArtistImportItem::getEffectiveSortAlbumArtist(ML3DAAPArtistImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string v22;
  std::string v23;

  v6 = (*(uint64_t (**)(ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 301989889);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v23 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 301989890);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v20 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 318767105);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 318767106);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = v22;
  }
  v7 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v17, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    v17 = v20;
  v8 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  size = v17.__r_.__value_.__l.__size_;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = v17.__r_.__value_.__l.__size_;
  if (v8)
  {
    if (v6)
      goto LABEL_56;
    goto LABEL_28;
  }
  ML3CPPSortableString((std::string *)&v21, (const UInt8 *)&v23);
  if (v9 < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
  LOBYTE(v9) = v22.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v21 + 1);
  if (!v6)
  {
LABEL_28:
    if ((v9 & 0x80u) == 0)
      v11 = v9;
    else
      v11 = size;
    if (!v11)
    {
      v12 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = v23.__r_.__value_.__l.__size_;
      if (!v12)
      {
        (*(void (**)(__int128 *__return_ptr, ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 168))(&v21, this, a2);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
        else
          v16 = v22;
        if ((v9 & 0x80) != 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        v17 = v16;
        *(_QWORD *)&v21 = off_1E5B4D010;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        v13 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
        size = v17.__r_.__value_.__l.__size_;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v13 = v17.__r_.__value_.__l.__size_;
        if (!v13)
        {
          v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v14 = v19.__r_.__value_.__l.__size_;
          if (!v14)
          {
            (*(void (**)(__int128 *__return_ptr, ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 176))(&v21, this, a2);
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
            else
              v16 = v22;
            if (v9 < 0)
              operator delete(v17.__r_.__value_.__l.__data_);
            v17 = v16;
            *(_QWORD *)&v21 = off_1E5B4D010;
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v22.__r_.__value_.__l.__data_);
            LOBYTE(v9) = *((_BYTE *)&v17.__r_.__value_.__s + 23);
            size = v17.__r_.__value_.__l.__size_;
          }
        }
      }
    }
  }
LABEL_56:
  if ((v9 & 0x80u) == 0)
    size = v9;
  if (size && (_DWORD)a2)
  {
    ML3CPPSanitizeString((std::string *)&v21, (unint64_t)&v17);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
    LOBYTE(v9) = v22.__r_.__value_.__s.__data_[7];
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v15 = (std::string *)(a3 + 16);
  if ((v9 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(v15, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)&v17.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_71;
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
LABEL_71:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1AC216FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a47 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a25 < 0)
    operator delete(a20);
  if (a32 < 0)
    operator delete(a27);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  _Unwind_Resume(exception_object);
}

void ML3DAAPArtistImportItem::getEffectiveSortArtist(ML3DAAPArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  std::string::size_type v7;
  int v8;
  std::string::size_type size;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  __int128 v14;
  std::string v15;
  std::string v16;

  (*(void (**)(__int128 *__return_ptr, ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 318767105);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v15;
  }
  (*(void (**)(__int128 *__return_ptr, ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 318767106);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = v15;
  }
  v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  v7 = v15.__r_.__value_.__s.__data_[7];
  v8 = v15.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0)
    v10 = v15.__r_.__value_.__s.__data_[7];
  else
    v10 = *((_QWORD *)&v14 + 1);
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0)
    v7 = size;
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (unint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(_QWORD *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0)
LABEL_31:
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1AC217328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v27;
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (v27 < 0)
    operator delete(a13);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

void ML3DAAPArtistImportItem::getEffectiveSortSeriesName(ML3DAAPArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  std::string::size_type v7;
  int v8;
  std::string::size_type size;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  __int128 v14;
  std::string v15;
  std::string v16;

  (*(void (**)(__int128 *__return_ptr, ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 318767107);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v15;
  }
  (*(void (**)(__int128 *__return_ptr, ML3DAAPArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 318767108);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = v15;
  }
  v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  v7 = v15.__r_.__value_.__s.__data_[7];
  v8 = v15.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0)
    v10 = v15.__r_.__value_.__s.__data_[7];
  else
    v10 = *((_QWORD *)&v14 + 1);
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0)
    v7 = size;
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (unint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(_QWORD *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0)
LABEL_31:
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1AC2175C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v27;
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (v27 < 0)
    operator delete(a13);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t ML3DAAPArtistImportItem::sortPropertyKeyForPropertyKey(ML3DAAPArtistImportItem *this, int a2)
{
  int v2;
  unsigned int v3;

  if (a2 == 318767105)
    v2 = 318767106;
  else
    v2 = 0;
  if (a2 == 318767107)
    v3 = 318767108;
  else
    v3 = v2;
  if (a2 == 301989889)
    return 301989890;
  else
    return v3;
}

uint64_t ML3DAAPArtistImportItem::propertyKeyForSortPropertyKey(ML3DAAPArtistImportItem *this, int a2)
{
  int v2;
  unsigned int v3;

  if (a2 == 318767106)
    v2 = 318767105;
  else
    v2 = 0;
  if (a2 == 318767108)
    v3 = 318767107;
  else
    v3 = v2;
  if (a2 == 301989890)
    return 301989889;
  else
    return v3;
}

uint64_t ML3DAAPContainerImportItem::ML3DAAPContainerImportItem(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unsigned int v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  ML3CPP::Element *v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v56;
  uint64_t v57;
  ML3CPP::Element *v58;
  std::__shared_weak_count *v59;
  ML3CPP::Element *v60;
  std::__shared_weak_count *v61;
  uint8_t buf[16];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_WORD *)(a1 + 16) = 256;
  v12 = 0uLL;
  *(_OWORD *)(a1 + 24) = 0u;
  v57 = a1 + 24;
  *(_BYTE *)(a1 + 18) = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)a1 = &off_1E5B4D050;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = 0uLL;
    }
  }
  *(_QWORD *)a1 = &off_1E5B4E778;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v12;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)(a1 + 216), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  *(_OWORD *)(a1 + 248) = 0u;
  v16 = (unint64_t *)(a1 + 248);
  *(_OWORD *)(a1 + 264) = 0u;
  std::vector<std::unordered_set<std::string>>::__init_with_size[abi:ne180100]<std::unordered_set<std::string>*,std::unordered_set<std::string>*>(a1 + 256, *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 3));
  ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v60, *a2, 0x6D706572u);
  if (v60)
    *(_QWORD *)(a1 + 280) = ML3CPP::Element::integerValue(v60);
  ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v58, *a2, 0x6165504Bu);
  if (v58)
  {
    v17 = ML3CPP::Element::integerValue(v58);
    *(_DWORD *)(a1 + 240) = v17;
  }
  else
  {
    v17 = *(_DWORD *)(a1 + 240);
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  if (v17 <= 0xA && ((1 << v17) & 0x40C) != 0)
  {
    ML3CPP::Element::childElementForCode((ML3CPP::Element *)&v69, *a2, 0x61655044u);
    if ((_QWORD)v69)
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)(v69 + 48), *(_QWORD *)(v69 + 64), 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18)
      {
        objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v18, 0, 0, 0);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_storeStrong((id *)(a1 + 80), v19);
          objc_msgSend(v19, "objectForKey:", CFSTR("contentFilter"));
          v20 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            objc_storeStrong((id *)(a1 + 208), v20);
          objc_msgSend(v19, "objectForKey:", CFSTR("smartInfo"));
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = v56;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            MLParsedSmartInfoFromData(v56, (uint64_t)buf);
            v22 = v67;
            *(_OWORD *)(a1 + 152) = v66;
            *(_OWORD *)(a1 + 168) = v22;
            *(_OWORD *)(a1 + 184) = v68;
            v23 = v63;
            *(_OWORD *)(a1 + 88) = *(_OWORD *)buf;
            *(_OWORD *)(a1 + 104) = v23;
            v24 = v65;
            *(_OWORD *)(a1 + 120) = v64;
            *(_OWORD *)(a1 + 136) = v24;
            *(_BYTE *)(a1 + 200) = 1;
          }
          objc_msgSend(v19, "objectForKey:", CFSTR("geniusSeedTrackIDs"), v56, v57, a1 + 256, a1 + 216);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v25, "count"))
          {
            objc_msgSend(v25, "objectAtIndex:", 0);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            *v16 = objc_msgSend(v26, "unsignedIntValue");

          }
        }
        else
        {
          v20 = os_log_create("com.apple.amp.medialibrary", "Default");
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v19;
            _os_log_impl(&dword_1AC149000, v20, OS_LOG_TYPE_ERROR, "got unexpected container properties element. properties=%{public}@", buf, 0xCu);
          }
        }

      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (*(_DWORD *)(a1 + 240) == 3)
    {
      ML3CPP::Element::childElementForCode((ML3CPP::Element *)buf, *a2, 0x61654753u);
      v30 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
      {
        v31 = 0;
        while (1)
        {
          v32 = v31;
          v34 = v30 + 72;
          v33 = *(_QWORD *)(v30 + 72);
          if (v31 >= (unint64_t)((*(_QWORD *)(v34 + 8) - v33) >> 4))
            break;
          v35 = *(_OWORD *)(v33 + 16 * v31);
          v36 = *(std::__shared_weak_count **)(v33 + 16 * v31 + 8);
          if (v36)
          {
            v37 = (unint64_t *)&v36->__shared_owners_;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
            v39 = (ML3CPP::Element *)v35;
            if (*(_DWORD *)(v35 + 16) == 1835624804)
            {
LABEL_51:
              *v16 = ML3CPP::Element::integerValue(v39);
              v42 = os_log_create("com.apple.amp.medialibrary", "Default");
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              {
                v43 = *v16;
                LODWORD(v69) = 134217984;
                *(_QWORD *)((char *)&v69 + 4) = v43;
                _os_log_impl(&dword_1AC149000, v42, OS_LOG_TYPE_ERROR, "parsed genius seed listing. id=%lld", (uint8_t *)&v69, 0xCu);
              }

              if (v36)
              {
                v44 = (unint64_t *)&v36->__shared_owners_;
                do
                  v45 = __ldaxr(v44);
                while (__stlxr(v45 - 1, v44));
                if (!v45)
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
              }
              break;
            }
            v40 = (unint64_t *)&v36->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          else
          {
            v39 = *(ML3CPP::Element **)(v33 + 16 * v31);
            if (*(_DWORD *)(v35 + 16) == 1835624804)
              goto LABEL_51;
          }
          v31 = v32 + 1;
          v30 = *(_QWORD *)buf;
        }
      }
      v46 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
    }
  }
  v49 = v59;
  if (v59)
  {
    v50 = (unint64_t *)&v59->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v61;
  if (v61)
  {
    v53 = (unint64_t *)&v61->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  return a1;
}

void sub_1AC217D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void **a11, void **a12, char a13, uint64_t a14, char a15, uint64_t a16, void **a17)
{
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v26;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v24 - 112);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  a17 = a11;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100](&a17);
  v26 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v17 + 224) = v26;
    operator delete(v26);
  }

  *(_QWORD *)v17 = &off_1E5B4D050;
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v18);
  *(_QWORD *)v17 = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table(a10);
  _Unwind_Resume(a1);
}

uint64_t ML3DAAPAlbumImportItem::ML3DAAPAlbumImportItem(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  v5 = a3;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)a1 = &off_1E5B4D050;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v7;
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1E5B4D788;
  *(_QWORD *)(a1 + 80) = v5;
  return a1;
}

uint64_t ML3DAAPArtistImportItem::ML3DAAPArtistImportItem(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  id v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v7 = a4;
  v8 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)a1 = &off_1E5B4D050;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)a1 = &off_1E5B4DBA0;
  *(_QWORD *)(a1 + 80) = a3;
  *(_QWORD *)(a1 + 88) = v7;
  return a1;
}

void ML3CPP::Parser::parse(ML3CPP::Parser *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void (***v5)(_QWORD);
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  int v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  int v27;
  char v28;
  unint64_t *v29;
  unint64_t v30;
  unsigned int *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unsigned int v56;
  int v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int64_t v78;
  char *v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  __int128 v98;
  void *v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  void *v117;
  void *v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  void *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  int64_t v138;
  void *v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t i;
  _QWORD *v145;
  char *v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  void *v190;
  int v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count *v193;
  std::__shared_weak_count *v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  std::logic_error *exception;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  unsigned int size;
  unsigned int size_4;
  __int128 v209;

  if (*((_BYTE *)this + 24))
  {
    *((_DWORD *)this + 7) = 3;
    return;
  }
  if (*((_DWORD *)this + 7))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Cannot parse more than once.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *((_DWORD *)this + 7) = 1;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = (void (***)(_QWORD))*((_QWORD *)this + 1);
      if (v5)
        (**v5)(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  do
  {
    if (*((_BYTE *)this + 24))
    {
      v191 = 3;
      goto LABEL_228;
    }
    v8 = *((_QWORD *)this + 9);
    if (v8)
    {
      v9 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 5)
                                 + (((unint64_t)(v8 + *((_QWORD *)this + 8) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (v8 + *((_BYTE *)this + 64) - 1));
      v209 = v9;
      v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5)
                                  + (((unint64_t)(v8 + *((_QWORD *)this + 8) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (v8 + *((_BYTE *)this + 64) - 1));
      if (*((_QWORD *)&v9 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
    }
    else
    {
      v10 = 0;
      v209 = 0uLL;
    }
    std::istream::read();
    if (*(_QWORD *)(*(_QWORD *)this + 8) != 4)
      goto LABEL_110;
    size_4 = bswap32(0);
    std::istream::read();
    if (*(_QWORD *)(*(_QWORD *)this + 8) != 4)
      goto LABEL_110;
    size = bswap32(0);
    if (v10)
      *(_DWORD *)(v10 + 8) -= 8;
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v13)
    {
      v14 = std::__shared_weak_count::lock(v13);
      if (v14)
      {
        v15 = v14;
        v16 = *((_QWORD *)this + 1);
        if (!v16)
        {
          v21 = (unint64_t *)&v15->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
          goto LABEL_45;
        }
        v17 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, size_4);
        v18 = v17;
        v19 = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          if ((v18 & 1) == 0)
            goto LABEL_45;
LABEL_37:
          v23 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
          if (v23)
          {
            v24 = std::__shared_weak_count::lock(v23);
            if (v24)
            {
              v25 = v24;
              v26 = *((_QWORD *)this + 1);
              if (!v26)
              {
                v58 = (unint64_t *)&v25->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                  std::__shared_weak_count::__release_weak(v25);
                }
                goto LABEL_96;
              }
              v27 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v26 + 24))(v26, size_4);
              v28 = v27;
              v29 = (unint64_t *)&v25->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (v30)
              {
                if (!v27)
                  goto LABEL_96;
LABEL_84:
                v60 = operator new(0x28uLL);
                v61 = (char *)*((_QWORD *)this + 6);
                v62 = (char *)*((_QWORD *)this + 5);
                v63 = v61 - v62;
                v60[1] = 0;
                v60[2] = 0;
                *v60 = &off_1E5B51688;
                *((_DWORD *)v60 + 6) = size_4;
                *((_DWORD *)v60 + 7) = size;
                *((_DWORD *)v60 + 8) = size;
                *(_QWORD *)&v206 = v60 + 3;
                *((_QWORD *)&v206 + 1) = v60;
                if (v61 == v62)
                  v64 = 0;
                else
                  v64 = 32 * (v61 - v62) - 1;
                v66 = *((_QWORD *)this + 8);
                v65 = *((_QWORD *)this + 9);
                v67 = v65 + v66;
                if (v64 == v65 + v66)
                {
                  if (v66 >= 0x100)
                  {
                    *((_QWORD *)this + 8) = v66 - 256;
                    v70 = *(_QWORD *)v62;
                    v68 = v62 + 8;
                    v69 = v70;
                    *((_QWORD *)this + 5) = v68;
                    if (*((char **)this + 7) == v61)
                    {
                      v71 = *((_QWORD *)this + 4);
                      v72 = (uint64_t)&v68[-v71];
                      if ((unint64_t)v68 <= v71)
                      {
                        v106 = (uint64_t)&v61[-v71];
                        v105 = v106 == 0;
                        v107 = v106 >> 2;
                        if (v105)
                          v108 = 1;
                        else
                          v108 = v107;
                        v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v108);
                        v111 = &v109[8 * (v108 >> 2)];
                        v112 = (uint64_t *)*((_QWORD *)this + 5);
                        v61 = v111;
                        v113 = *((_QWORD *)this + 6) - (_QWORD)v112;
                        if (v113)
                        {
                          v61 = &v111[v113 & 0xFFFFFFFFFFFFFFF8];
                          v114 = 8 * (v113 >> 3);
                          v115 = &v109[8 * (v108 >> 2)];
                          do
                          {
                            v116 = *v112++;
                            *(_QWORD *)v115 = v116;
                            v115 += 8;
                            v114 -= 8;
                          }
                          while (v114);
                        }
                        v117 = (void *)*((_QWORD *)this + 4);
                        *((_QWORD *)this + 4) = v109;
                        *((_QWORD *)this + 5) = v111;
                        *((_QWORD *)this + 6) = v61;
                        *((_QWORD *)this + 7) = &v109[8 * v110];
                        if (v117)
                        {
                          operator delete(v117);
                          v61 = (char *)*((_QWORD *)this + 6);
                        }
                      }
                      else
                      {
                        v73 = v72 >> 3;
                        v74 = v72 >> 3 < -1;
                        v75 = (v72 >> 3) + 2;
                        if (v74)
                          v76 = v75;
                        else
                          v76 = v73 + 1;
                        v77 = &v68[-8 * (v76 >> 1)];
                        v78 = v61 - v68;
                        if (v61 == v68)
                        {
                          v79 = v61;
                        }
                        else
                        {
                          memmove(&v68[-8 * (v76 >> 1)], v68, v61 - v68);
                          v79 = (char *)*((_QWORD *)this + 5);
                        }
                        v61 = &v77[v78];
                        *((_QWORD *)this + 5) = &v79[-8 * (v76 >> 1)];
                        *((_QWORD *)this + 6) = &v77[v78];
                      }
                    }
                    *(_QWORD *)v61 = v69;
                    goto LABEL_189;
                  }
                  v89 = v63 >> 3;
                  v90 = (char *)*((_QWORD *)this + 7);
                  v91 = (char *)*((_QWORD *)this + 4);
                  v92 = v90 - v91;
                  if (v63 >> 3 >= (unint64_t)((v90 - v91) >> 3))
                  {
                    if (v90 == v91)
                      v93 = 1;
                    else
                      v93 = v92 >> 2;
                    v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v93);
                    v96 = v95;
                    v97 = &v94[8 * v89];
                    *(_QWORD *)&v98 = v94;
                    *((_QWORD *)&v98 + 1) = v97;
                    v202 = v98;
                    v99 = operator new(0x1000uLL);
                    *(_QWORD *)&v100 = v97;
                    *((_QWORD *)&v100 + 1) = &v94[8 * v96];
                    if (v89 == v96)
                    {
                      v101 = 8 * v89;
                      *(_QWORD *)&v102 = v202;
                      if (v63 < 1)
                      {
                        v139 = v99;
                        v140 = v101 >> 2;
                        if (v61 == v62)
                          v141 = 1;
                        else
                          v141 = v140;
                        v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v141);
                        v97 = &v142[8 * (v141 >> 2)];
                        *(_QWORD *)&v102 = v142;
                        *((_QWORD *)&v102 + 1) = v97;
                        *(_QWORD *)&v100 = v97;
                        *((_QWORD *)&v100 + 1) = &v142[8 * v143];
                        if (v94)
                        {
                          v199 = v100;
                          v203 = v102;
                          operator delete(v94);
                          v100 = v199;
                          v102 = v203;
                        }
                        v99 = v139;
                      }
                      else
                      {
                        v103 = v101 >> 3;
                        if (v103 >= -1)
                          v104 = v103 + 1;
                        else
                          v104 = v103 + 2;
                        v97 -= 8 * (v104 >> 1);
                        *(_QWORD *)&v100 = v97;
                        *((_QWORD *)&v102 + 1) = v97;
                      }
                    }
                    else
                    {
                      v102 = v202;
                    }
                    *(_QWORD *)v97 = v99;
                    *(_QWORD *)&v100 = v100 + 8;
                    for (i = *((_QWORD *)this + 6); i != *((_QWORD *)this + 5); i -= 8)
                    {
                      v145 = (_QWORD *)*((_QWORD *)&v102 + 1);
                      if (*((_QWORD *)&v102 + 1) == (_QWORD)v102)
                      {
                        v147 = (_BYTE *)v100;
                        if ((unint64_t)v100 >= *((_QWORD *)&v100 + 1))
                        {
                          if (*((_QWORD *)&v100 + 1) == *((_QWORD *)&v102 + 1))
                            v152 = 1;
                          else
                            v152 = (uint64_t)(*((_QWORD *)&v100 + 1) - *((_QWORD *)&v102 + 1)) >> 2;
                          v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v152);
                          v146 = &v153[(2 * v152 + 6) & 0xFFFFFFFFFFFFFFF8];
                          v155 = v146;
                          v156 = v147 - (_BYTE *)v145;
                          if (v147 != (_BYTE *)v145)
                          {
                            v155 = &v146[v156 & 0xFFFFFFFFFFFFFFF8];
                            v157 = 8 * (v156 >> 3);
                            v158 = v146;
                            v159 = v145;
                            do
                            {
                              v160 = *v159++;
                              *(_QWORD *)v158 = v160;
                              v158 += 8;
                              v157 -= 8;
                            }
                            while (v157);
                          }
                          *(_QWORD *)&v102 = v153;
                          *((_QWORD *)&v102 + 1) = v146;
                          *(_QWORD *)&v100 = v155;
                          *((_QWORD *)&v100 + 1) = &v153[8 * v154];
                          if (v145)
                          {
                            v200 = v100;
                            v205 = v102;
                            operator delete(v145);
                            v100 = v200;
                            v102 = v205;
                          }
                        }
                        else
                        {
                          v148 = (uint64_t)(*((_QWORD *)&v100 + 1) - v100) >> 3;
                          if (v148 >= -1)
                            v149 = v148 + 1;
                          else
                            v149 = v148 + 2;
                          v150 = v149 >> 1;
                          v151 = v100 + 8 * (v149 >> 1);
                          v146 = (char *)(v151 - (v100 - *((_QWORD *)&v102 + 1)));
                          if ((_QWORD)v100 == *((_QWORD *)&v102 + 1))
                          {
                            v147 = (_BYTE *)*((_QWORD *)&v102 + 1);
                          }
                          else
                          {
                            v201 = *((_QWORD *)&v100 + 1);
                            v204 = v102;
                            memmove((void *)(v151 - (v100 - *((_QWORD *)&v102 + 1))), *((const void **)&v102 + 1), v100 - *((_QWORD *)&v102 + 1));
                            *((_QWORD *)&v100 + 1) = v201;
                            *(_QWORD *)&v102 = v204;
                          }
                          *((_QWORD *)&v102 + 1) = v146;
                          *(_QWORD *)&v100 = &v147[8 * v150];
                        }
                      }
                      else
                      {
                        v146 = (char *)*((_QWORD *)&v102 + 1);
                      }
                      v161 = *(_QWORD *)(i - 8);
                      *((_QWORD *)v146 - 1) = v161;
                      *((_QWORD *)&v102 + 1) -= 8;
                    }
                    v162 = (void *)*((_QWORD *)this + 4);
                    *((_OWORD *)this + 2) = v102;
                    *((_OWORD *)this + 3) = v100;
                    if (v162)
                      operator delete(v162);
                  }
                  else
                  {
                    if (v90 == v61)
                    {
                      v118 = operator new(0x1000uLL);
                      if (v91 == v62)
                      {
                        if (v61 == v62)
                          v119 = 1;
                        else
                          v119 = v92 >> 2;
                        v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v119);
                        v62 = &v120[(2 * v119 + 6) & 0xFFFFFFFFFFFFFFF8];
                        v122 = (uint64_t *)*((_QWORD *)this + 5);
                        v123 = v62;
                        v124 = *((_QWORD *)this + 6) - (_QWORD)v122;
                        if (v124)
                        {
                          v123 = &v62[v124 & 0xFFFFFFFFFFFFFFF8];
                          v125 = 8 * (v124 >> 3);
                          v126 = v62;
                          do
                          {
                            v127 = *v122++;
                            *(_QWORD *)v126 = v127;
                            v126 += 8;
                            v125 -= 8;
                          }
                          while (v125);
                        }
                        v128 = (void *)*((_QWORD *)this + 4);
                        *((_QWORD *)this + 4) = v120;
                        *((_QWORD *)this + 5) = v62;
                        *((_QWORD *)this + 6) = v123;
                        *((_QWORD *)this + 7) = &v120[8 * v121];
                        if (v128)
                        {
                          operator delete(v128);
                          v62 = (char *)*((_QWORD *)this + 5);
                        }
                      }
                      *((_QWORD *)v62 - 1) = v118;
                      v129 = (char *)*((_QWORD *)this + 5);
                      v130 = (char *)*((_QWORD *)this + 6);
                      *((_QWORD *)this + 5) = v129 - 8;
                      v131 = *((_QWORD *)v129 - 1);
                      *((_QWORD *)this + 5) = v129;
                      if (v130 == *((char **)this + 7))
                      {
                        v132 = *((_QWORD *)this + 4);
                        v133 = (uint64_t)&v129[-v132];
                        if ((unint64_t)v129 <= v132)
                        {
                          v179 = (uint64_t)&v130[-v132];
                          v105 = v179 == 0;
                          v180 = v179 >> 2;
                          if (v105)
                            v181 = 1;
                          else
                            v181 = v180;
                          v182 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v181);
                          v184 = &v182[8 * (v181 >> 2)];
                          v185 = (uint64_t *)*((_QWORD *)this + 5);
                          v130 = v184;
                          v186 = *((_QWORD *)this + 6) - (_QWORD)v185;
                          if (v186)
                          {
                            v130 = &v184[v186 & 0xFFFFFFFFFFFFFFF8];
                            v187 = 8 * (v186 >> 3);
                            v188 = &v182[8 * (v181 >> 2)];
                            do
                            {
                              v189 = *v185++;
                              *(_QWORD *)v188 = v189;
                              v188 += 8;
                              v187 -= 8;
                            }
                            while (v187);
                          }
                          v190 = (void *)*((_QWORD *)this + 4);
                          *((_QWORD *)this + 4) = v182;
                          *((_QWORD *)this + 5) = v184;
                          *((_QWORD *)this + 6) = v130;
                          *((_QWORD *)this + 7) = &v182[8 * v183];
                          if (v190)
                          {
                            operator delete(v190);
                            v130 = (char *)*((_QWORD *)this + 6);
                          }
                        }
                        else
                        {
                          v134 = v133 >> 3;
                          v74 = v133 >> 3 < -1;
                          v135 = (v133 >> 3) + 2;
                          if (v74)
                            v136 = v135;
                          else
                            v136 = v134 + 1;
                          v137 = &v129[-8 * (v136 >> 1)];
                          v138 = v130 - v129;
                          if (v130 != v129)
                          {
                            memmove(&v129[-8 * (v136 >> 1)], v129, v130 - v129);
                            v129 = (char *)*((_QWORD *)this + 5);
                          }
                          v130 = &v137[v138];
                          *((_QWORD *)this + 5) = &v129[-8 * (v136 >> 1)];
                          *((_QWORD *)this + 6) = &v137[v138];
                        }
                      }
                      *(_QWORD *)v130 = v131;
                    }
                    else
                    {
                      *(_QWORD *)v61 = operator new(0x1000uLL);
                    }
LABEL_189:
                    *((_QWORD *)this + 6) += 8;
                  }
                  v62 = (char *)*((_QWORD *)this + 5);
                  v65 = *((_QWORD *)this + 9);
                  v67 = v65 + *((_QWORD *)this + 8);
                }
                *(_OWORD *)(*(_QWORD *)&v62[(v67 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v67) = v206;
                v163 = *((_QWORD *)&v206 + 1);
                if (*((_QWORD *)&v206 + 1))
                {
                  v164 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
                  do
                    v165 = __ldxr(v164);
                  while (__stxr(v165 + 1, v164));
                  v65 = *((_QWORD *)this + 9);
                  v163 = *((_QWORD *)&v206 + 1);
                }
                *((_QWORD *)this + 9) = v65 + 1;
                if (v163)
                {
                  v166 = (unint64_t *)(v163 + 8);
                  do
                    v167 = __ldxr(v166);
                  while (__stxr(v167 + 1, v166));
                }
                v168 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
                *(_QWORD *)&v209 = v206;
                *((_QWORD *)&v209 + 1) = v163;
                if (v168)
                {
                  v169 = (unint64_t *)&v168->__shared_owners_;
                  do
                    v170 = __ldaxr(v169);
                  while (__stlxr(v170 - 1, v169));
                  if (!v170)
                  {
                    ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                    std::__shared_weak_count::__release_weak(v168);
                  }
                }
                v171 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
                if (v171)
                {
                  v172 = std::__shared_weak_count::lock(v171);
                  if (v172)
                  {
                    v173 = v172;
                    v174 = *((_QWORD *)this + 1);
                    if (v174)
                      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v174 + 32))(v174, size_4, size);
                    v175 = (unint64_t *)&v173->__shared_owners_;
                    do
                      v176 = __ldaxr(v175);
                    while (__stlxr(v176 - 1, v175));
                    if (!v176)
                    {
                      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                      std::__shared_weak_count::__release_weak(v173);
                    }
                  }
                }
                if (*((_QWORD *)&v206 + 1))
                {
                  v177 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
                  do
                    v178 = __ldaxr(v177);
                  while (__stlxr(v178 - 1, v177));
                  if (!v178)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v206 + 1) + 16))(*((_QWORD *)&v206 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v206 + 1));
                  }
                }
LABEL_47:
                v31 = (unsigned int *)v209;
                if ((_QWORD)v209 && !*(_DWORD *)(v209 + 8))
                {
                  while (1)
                  {
                    v32 = *((_QWORD *)this + 9) + *((_QWORD *)this + 8) - 1;
                    std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](*(_QWORD *)(*((_QWORD *)this + 5) + ((v32 >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * v32);
                    v34 = *((_QWORD *)this + 5);
                    v33 = *((_QWORD *)this + 6);
                    if (v33 == v34)
                      v35 = 0;
                    else
                      v35 = 32 * (v33 - v34) - 1;
                    v36 = *((_QWORD *)this + 8);
                    v37 = *((_QWORD *)this + 9) - 1;
                    *((_QWORD *)this + 9) = v37;
                    if ((unint64_t)(v35 - (v37 + v36)) >= 0x200)
                    {
                      operator delete(*(void **)(v33 - 8));
                      *((_QWORD *)this + 6) -= 8;
                    }
                    v38 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
                    if (v38)
                    {
                      v39 = *v31;
                      v40 = std::__shared_weak_count::lock(v38);
                      if (v40)
                      {
                        v41 = v40;
                        v42 = *((_QWORD *)this + 1);
                        if (v42)
                          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 48))(v42, v39);
                        v43 = (unint64_t *)&v41->__shared_owners_;
                        do
                          v44 = __ldaxr(v43);
                        while (__stlxr(v44 - 1, v43));
                        if (!v44)
                        {
                          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                          std::__shared_weak_count::__release_weak(v41);
                        }
                      }
                    }
                    v45 = *(_DWORD *)(v209 + 4);
                    v46 = *((_QWORD *)this + 9);
                    if (v46)
                    {
                      v47 = v46 + *((_QWORD *)this + 8) - 1;
                      v48 = *(_QWORD *)(*((_QWORD *)this + 5) + ((v47 >> 5) & 0x7FFFFFFFFFFFFF8));
                      v49 = *(_OWORD *)(v48 + 16 * v47);
                      v50 = *(_QWORD *)(v48 + 16 * v47 + 8);
                      if (v50)
                      {
                        v51 = (unint64_t *)(v50 + 8);
                        do
                          v52 = __ldxr(v51);
                        while (__stxr(v52 + 1, v51));
                      }
                      else
                      {
                        *((_QWORD *)&v49 + 1) = 0;
                      }
                    }
                    else
                    {
                      v49 = 0uLL;
                    }
                    v53 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
                    v209 = v49;
                    if (v53)
                    {
                      v54 = (unint64_t *)&v53->__shared_owners_;
                      do
                        v55 = __ldaxr(v54);
                      while (__stlxr(v55 - 1, v54));
                      if (!v55)
                      {
                        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                        std::__shared_weak_count::__release_weak(v53);
                      }
                      v31 = (unsigned int *)v209;
                      if (!(_QWORD)v209)
                        goto LABEL_78;
                    }
                    else
                    {
                      v31 = (unsigned int *)v49;
                      if (!(_QWORD)v49)
                        goto LABEL_78;
                    }
                    v56 = v31[2] - v45;
                    v31[2] = v56;
                    if (v56)
                      goto LABEL_78;
                  }
                }
                goto LABEL_78;
              }
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
              if ((v28 & 1) != 0)
                goto LABEL_84;
            }
          }
LABEL_96:
          v80 = malloc_type_malloc(size, 0x9BD58CF0uLL);
          if (!v80)
            goto LABEL_110;
          std::istream::read();
          if (*(_QWORD *)(*(_QWORD *)this + 8) != size)
          {
            free(v80);
LABEL_110:
            *((_DWORD *)this + 7) = 4;
            v57 = 2;
            goto LABEL_111;
          }
          if ((_QWORD)v209)
            *(_DWORD *)(v209 + 8) -= size;
          v81 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
          if (v81)
          {
            v82 = std::__shared_weak_count::lock(v81);
            if (v82)
            {
              v83 = v82;
              v84 = *((_QWORD *)this + 1);
              if (v84)
                (*(void (**)(uint64_t, _QWORD, void *, _QWORD))(*(_QWORD *)v84 + 40))(v84, size_4, v80, size);
              v85 = (unint64_t *)&v83->__shared_owners_;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
          }
          free(v80);
          goto LABEL_47;
        }
        if (v17)
          goto LABEL_37;
      }
    }
LABEL_45:
    std::istream::seekg();
    if ((_QWORD)v209)
    {
      *(_DWORD *)(v209 + 8) -= size;
      goto LABEL_47;
    }
LABEL_78:
    std::istream::peek();
    v57 = 0;
LABEL_111:
    if (*((_QWORD *)&v209 + 1))
    {
      v87 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v209 + 1) + 16))(*((_QWORD *)&v209 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v209 + 1));
      }
    }
  }
  while (!v57 && (*(_BYTE *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32) & 2) == 0);
  if (*((_DWORD *)this + 7) != 1)
    goto LABEL_229;
  v191 = 2;
LABEL_228:
  *((_DWORD *)this + 7) = v191;
LABEL_229:
  v192 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v192)
  {
    v193 = std::__shared_weak_count::lock(v192);
    if (v193)
    {
      v194 = v193;
      v195 = *((_QWORD *)this + 1);
      if (v195)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v195 + 8))(v195, *((unsigned int *)this + 7));
      v196 = (unint64_t *)&v194->__shared_owners_;
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 - 1, v196));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
        std::__shared_weak_count::__release_weak(v194);
      }
    }
  }
}

void sub_1AC218D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  operator delete(v18);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ML3CPP::Parser::ParserContainer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3CPP::Parser::ParserContainer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

void sub_1AC219390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MIPLibraryIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_33:
        *(_QWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void ML3ItemStoreDatabaseImportDataSource::~ML3ItemStoreDatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ItemStoreDatabaseImportDataSource::getImportPropertyGroupKey(ML3ItemStoreDatabaseImportDataSource *this)
{
  return 6;
}

uint64_t ML3ItemStoreDatabaseImportDataSource::getDatabaseTableSchemaClass(ML3ItemStoreDatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3LogCopyCategoryDefaultsKey(void *a1, int a2)
{
  const __CFString *v2;

  if (a2)
    v2 = CFSTR("ConsoleLoggingLevel");
  else
    v2 = CFSTR("LogFileLoggingLevel");
  objc_msgSend(a1, "stringByAppendingString:", v2);
  return objc_claimAutoreleasedReturnValue();
}

void MLSetSQLiteAutoTraceEnabled(char a1)
{
  _QWORD v1[4];
  char v2;

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = __MLSetSQLiteAutoTraceEnabled_block_invoke;
  v1[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = a1;
  _MLDispatchToSerialQueue(0, v1);
}

const __CFString *MLSQLiteExtendedResultString(int a1)
{
  if (a1 > 2313)
  {
    if (a1 <= 3337)
    {
      if (a1 > 2825)
      {
        if (a1 == 2826)
          return CFSTR("SQLITE_IOERR_BLOCKED");
        if (a1 == 3082)
          return CFSTR("SQLITE_IOERR_NOMEM");
      }
      else
      {
        if (a1 == 2314)
          return CFSTR("SQLITE_IOERR_RDLOCK");
        if (a1 == 2570)
          return CFSTR("SQLITE_IOERR_DELETE");
      }
    }
    else if (a1 <= 3849)
    {
      if (a1 == 3338)
        return CFSTR("SQLITE_IOERR_ACCESS");
      if (a1 == 3594)
        return CFSTR("SQLITE_IOERR_CHECKRESERVEDLOCK");
    }
    else
    {
      switch(a1)
      {
        case 3850:
          return CFSTR("SQLITE_IOERR_LOCK");
        case 4106:
          return CFSTR("SQLITE_IOERR_CLOSE");
        case 4362:
          return CFSTR("SQLITE_IOERR_DIR_CLOSE");
      }
    }
  }
  else if (a1 <= 1033)
  {
    if (a1 > 521)
    {
      if (a1 == 522)
        return CFSTR("SQLITE_IOERR_SHORT_READ");
      if (a1 == 778)
        return CFSTR("SQLITE_IOERR_WRITE");
    }
    else
    {
      if (a1 == 262)
        return CFSTR("SQLITE_LOCKED_SHAREDCACHE");
      if (a1 == 266)
        return CFSTR("SQLITE_IOERR_READ");
    }
  }
  else if (a1 <= 1545)
  {
    if (a1 == 1034)
      return CFSTR("SQLITE_IOERR_FSYNC");
    if (a1 == 1290)
      return CFSTR("SQLITE_IOERR_DIR_FSYNC");
  }
  else
  {
    switch(a1)
    {
      case 1546:
        return CFSTR("SQLITE_IOERR_TRUNCATE");
      case 1802:
        return CFSTR("SQLITE_IOERR_FSTAT");
      case 2058:
        return CFSTR("SQLITE_IOERR_UNLOCK");
    }
  }
  return CFSTR("Unknown");
}

void ML3LogSQLiteProfilingMessage(void *a1)
{
  id v1;
  id v2;
  _QWORD v3[4];
  id v4;

  v1 = a1;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __ML3LogSQLiteProfilingMessage_block_invoke;
  v3[3] = &unk_1E5B65D80;
  v4 = v1;
  v2 = v1;
  _MLDispatchToSerialQueue(1, v3);

}

void sub_1AC21C514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void sub_1AC21CB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1AC21CCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  *(_QWORD *)(v17 - 56) = &a10;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));
  if (__p)
    operator delete(__p);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1AC21CE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1AC21CFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  void *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1AC21D180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  void *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1AC21D50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::ifstream::~ifstream((uint64_t *)va1);

  _Unwind_Resume(a1);
}

void sub_1AC21D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::ifstream::~ifstream((uint64_t *)va1);

  _Unwind_Resume(a1);
}

void sub_1AC21DB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::ifstream::~ifstream((uint64_t *)va1);

  _Unwind_Resume(a1);
}

void sub_1AC21E0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1AC21E2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1AC21E4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1AC21E954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v17 - 64);
  _Unwind_Resume(a1);
}

void sub_1AC21EB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1AC21ED44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1AC21F244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1AC21F4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1AC21FCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1AC220074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1AC2210A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50)
{
  void *v50;
  int v51;
  void *v52;
  uint64_t v53;

  *(_QWORD *)(v53 - 176) = off_1E5B4D010;
  if (*(char *)(v53 - 137) < 0)
    operator delete(*(void **)(v53 - 160));
  if (v51 < 0)
    operator delete(v52);
  if (a41 < 0)
    operator delete(__p);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a32);

  if (*(char *)(v53 - 105) < 0)
    operator delete(*(void **)(v53 - 128));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v53 - 224);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1AC22206C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t v49;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v48);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v49 - 208);
  if (a47 < 0)
    operator delete(__p);
  if (*(char *)(v49 - 105) < 0)
    operator delete(*(void **)(v49 - 128));
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a48);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_1AC2222C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3DAAPContainerDeleteImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3DAAPContainerDeleteImportItem>,std::allocator<ML3DAAPContainerDeleteImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3DAAPContainerDeleteImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3DAAPContainerDeleteImportItem>,std::allocator<ML3DAAPContainerDeleteImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3DAAPContainerDeleteImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3DAAPContainerDeleteImportItem>,std::allocator<ML3DAAPContainerDeleteImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI23ML3DAAPDeleteImportItemE27__shared_ptr_default_deleteIS1_32ML3DAAPContainerDeleteImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3DAAPDeleteImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3DAAPDeleteImportItem>,std::allocator<ML3DAAPDeleteImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3DAAPDeleteImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3DAAPDeleteImportItem>,std::allocator<ML3DAAPDeleteImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3DAAPDeleteImportItem *,std::shared_ptr<ML3DAAPDeleteImportItem>::__shared_ptr_default_delete<ML3DAAPDeleteImportItem,ML3DAAPDeleteImportItem>,std::allocator<ML3DAAPDeleteImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI23ML3DAAPDeleteImportItemE27__shared_ptr_default_deleteIS1_S1_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1AF43C5D0](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1AC222534(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1AF43C6FC](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1AF43C5DC](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1AF43C6FC](a1 + 53);
  return a1;
}

uint64_t DAAPParserDelegate::DAAPParserDelegate(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v5 = a2;
  *(_QWORD *)a1 = &off_1E5B4D160;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a3[1];
  *(_QWORD *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 88) = 1633968755;
  *(_WORD *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

void DAAPParserDelegate::DAAPParserDidFinish(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  if (a2 == 4)
  {
    v6 = (void *)MEMORY[0x1E0CB35C8];
    v8 = *MEMORY[0x1E0CB2D50];
    v9 = CFSTR("Track parser failed (invalid DAAP payload).");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "errorWithDomain:code:userInfo:", CFSTR("ML3DAAPImportOperationErrorDomain"), 1, v4);
    v5 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (a2 != 3)
    {
      v7 = 0;
      goto LABEL_7;
    }
    v3 = (void *)MEMORY[0x1E0CB35C8];
    v10 = *MEMORY[0x1E0CB2D50];
    v11[0] = CFSTR("Track parser was canceled.");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "errorWithDomain:code:userInfo:", CFSTR("ML3DAAPImportOperationErrorDomain"), 1, v4);
    v5 = objc_claimAutoreleasedReturnValue();
  }
  v7 = (void *)v5;

LABEL_7:
  objc_msgSend(*(id *)(a1 + 8), "_finishParsingWithError:", v7);

}

void sub_1AC2227A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t DAAPParserDelegate::DAAPParserShouldParseCode(DAAPParserDelegate *this)
{
  int v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = objc_msgSend(*((id *)this + 1), "isCancelled");
  if (v2)
  {
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (v3)
    {
      v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        v5 = v4;
        v6 = *((_QWORD *)this + 2);
        if (v6)
          *(_BYTE *)(v6 + 24) = 1;
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
  return v2 ^ 1u;
}

uint64_t DAAPParserDelegate::DAAPParserShouldParseCodeAsContainer(DAAPParserDelegate *this, int a2)
{
  uint64_t result;
  int v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  int v8;

  result = 1;
  if (a2 <= 1634357355)
  {
    if (a2 > 1634165099)
    {
      if (a2 <= 1634353515)
      {
        if (a2 == 1634165100)
        {
          result = _os_feature_enabled_impl();
          if (!(_DWORD)result)
            return result;
          v8 = *((_DWORD *)this + 24);
          return v8 == 0;
        }
        if (a2 == 1634165106)
        {
          result = _os_feature_enabled_impl();
          if (!(_DWORD)result)
            return result;
          return *((_DWORD *)this + 24) == 1;
        }
        return 0;
      }
      if (a2 == 1634353516 || a2 == 1634353740)
        goto LABEL_32;
      v5 = 17001;
      goto LABEL_21;
    }
    if (a2 > 1634035307)
    {
      if (a2 == 1634035308)
        goto LABEL_32;
      v6 = 26982;
    }
    else
    {
      if (a2 == 1633968755)
        return result;
      v6 = 18259;
    }
    v4 = v6 | 0x61650000;
    goto LABEL_31;
  }
  if (a2 > 1835819883)
  {
    if (a2 <= 1836409963)
    {
      if (a2 == 1835819884)
        goto LABEL_32;
      v4 = 1835821428;
    }
    else
    {
      if (a2 == 1836409964 || a2 == 1936747625)
        goto LABEL_32;
      v4 = 1936749167;
    }
LABEL_31:
    if (a2 == v4)
      goto LABEL_32;
    return 0;
  }
  if (a2 <= 1634366289)
  {
    if (a2 != 1634357356)
    {
      v5 = 25426;
LABEL_21:
      v4 = v5 | 0x616A0000;
      goto LABEL_31;
    }
LABEL_32:
    v8 = *((unsigned __int8 *)this + 93);
    return v8 == 0;
  }
  if (a2 != 1634366290 && a2 != 1634757753)
  {
    v4 = 1634759535;
    goto LABEL_31;
  }
  return result;
}

void DAAPParserDelegate::DAAPParserDidStartContainer(DAAPParserDelegate *this, int a2)
{
  int v2;
  _BOOL4 v4;
  int v5;
  BOOL v6;
  unsigned __int16 v7;
  int v8;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *shared_owners;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD v44[2];
  _QWORD *v45;
  std::__shared_weak_count *v46;

  v2 = a2;
  v4 = 1;
  if (a2 != 1835821428)
    goto LABEL_41;
  v5 = *((_DWORD *)this + 22);
  if (v5 > 1634165105)
  {
    v6 = v5 == 1634757753;
    v7 = 24946;
  }
  else
  {
    v6 = v5 == 1633968755;
    v7 = 24940;
  }
  v8 = v7 | 0x61670000;
  if (!v6 && v5 != v8)
    goto LABEL_41;
  v11 = *((_QWORD *)this + 6);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  if (v11)
  {
    while (1)
    {
      v14 = *(_DWORD *)(v11 + 16);
      v4 = v14 == 1835821428;
      if (v14 == 1835821428)
        goto LABEL_34;
      v15 = *(std::__shared_weak_count **)(v11 + 32);
      if (v15)
      {
        v16 = *(_QWORD *)(v11 + 24);
        p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
        do
          v18 = __ldxr(p_shared_weak_owners);
        while (__stxr(v18 + 1, p_shared_weak_owners));
        v19 = std::__shared_weak_count::lock(v15);
        if (v19)
          v11 = v16;
        else
          v11 = 0;
        if (!v10)
          goto LABEL_27;
      }
      else
      {
        v11 = 0;
        v19 = 0;
        if (!v10)
          goto LABEL_27;
      }
      v20 = (unint64_t *)&v10->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if (!v15)
          goto LABEL_29;
LABEL_28:
        std::__shared_weak_count::__release_weak(v15);
        goto LABEL_29;
      }
LABEL_27:
      if (v15)
        goto LABEL_28;
LABEL_29:
      v10 = v19;
      if (!v11)
      {
        v4 = 0;
        v10 = v19;
        if (!v19)
          goto LABEL_41;
        goto LABEL_37;
      }
    }
  }
  v4 = 0;
LABEL_34:
  if (v10)
  {
LABEL_37:
    v22 = (unint64_t *)&v10->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_41:
  v24 = (std::__shared_weak_count *)operator new(0x90uLL);
  *(_OWORD *)&v24->__shared_owners_ = 0u;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B516F8;
  v24[1].std::__shared_count = 0u;
  v25 = &v24[1].__vftable;
  LODWORD(v24[1].__shared_weak_owners_) = v2;
  v24[2].std::__shared_count = 0u;
  LOBYTE(v24[2].__shared_weak_owners_) = 1;
  LOBYTE(v24[3].__shared_owners_) = 1;
  *(_OWORD *)&v24[5].__shared_owners_ = 0u;
  v24[3].__vftable = 0;
  *(_OWORD *)&v24[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v24[4].__shared_owners_ = 0u;
  v24[5].__vftable = (std::__shared_weak_count_vtbl *)&v24[5].__shared_owners_;
  v45 = v25;
  v46 = v24;
  std::shared_ptr<ML3CPP::Element>::__enable_weak_this[abi:ne180100]<ML3CPP::Element,ML3CPP::Element,void>((uint64_t)&v45, v25, (uint64_t)v25);
  v26 = (std::__shared_weak_count_vtbl *)*((_QWORD *)this + 6);
  if (!v26)
  {
    std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)this + 4, (uint64_t)v25, (uint64_t)v24);
LABEL_64:
    v41 = v46;
    goto LABEL_66;
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = (unint64_t *)&v27->__shared_weak_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  shared_owners = (std::__shared_weak_count *)v24[2].__shared_owners_;
  v24[2].__vftable = v26;
  v24[2].__shared_owners_ = (uint64_t)v27;
  if (shared_owners)
    std::__shared_weak_count::__release_weak(shared_owners);
  if (v27)
  {
    v33 = (unint64_t *)&v27->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v4)
  {
    v35 = (uint64_t *)*((_QWORD *)this + 6);
    v36 = v46;
    v44[0] = v45;
    v44[1] = v46;
    if (v46)
    {
      v37 = (unint64_t *)&v46->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    ML3CPP::Element::appendChildElement(v35, v44);
    if (v36)
    {
      v39 = (unint64_t *)&v36->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    goto LABEL_64;
  }
  v41 = v46;
  std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)this + 8, (uint64_t)v45, (uint64_t)v46);
LABEL_66:
  std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)this + 6, (uint64_t)v45, (uint64_t)v41);
  if (v2 <= 1634757752)
  {
    if (v2 != 1633968755)
    {
      if (v2 == 1634165100)
      {
        v2 = 1634165100;
        if (!_os_feature_enabled_impl())
          goto LABEL_83;
      }
      else
      {
        if (v2 != 1634165106)
          goto LABEL_83;
        v2 = 1634165106;
        if (!_os_feature_enabled_impl())
          goto LABEL_83;
      }
    }
    goto LABEL_82;
  }
  if (v2 <= 1835819883)
  {
    if (v2 != 1634757753)
    {
      if (v2 == 1634759535)
      {
        if (*((_DWORD *)this + 22) == 1634757753)
          *((_BYTE *)this + 92) = 1;
        v2 = 1634759535;
      }
      goto LABEL_83;
    }
LABEL_82:
    *((_DWORD *)this + 22) = v2;
    goto LABEL_83;
  }
  if (v2 == 1836409964 || v2 == 1835819884)
    *((_DWORD *)this + 21) = v2;
LABEL_83:
  *((_DWORD *)this + 20) = v2;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_1AC222EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void DAAPParserDelegate::DAAPParserDidParseData(DAAPParserDelegate *this, int a2, unsigned __int8 *__src, size_t __len)
{
  unsigned int v4;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned __int16 v15;
  int v16;
  char v17;
  NSObject *v18;
  int v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  int v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count_vtbl *v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  NSObject *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  char v53;
  _QWORD v54[3];
  void *__p;
  std::__shared_weak_count *v56;
  char v57;
  uint64_t v58;

  v4 = __len;
  v58 = *MEMORY[0x1E0C80C00];
  if (a2 <= 1835625571)
  {
    if (a2 == 1634025833)
      goto LABEL_12;
    if (a2 != 1634353993)
    {
      if (a2 != 1835624804)
        goto LABEL_71;
      goto LABEL_12;
    }
    if (*((_DWORD *)this + 21) != 1836409964 || !_os_feature_enabled_impl())
      goto LABEL_71;
    std::string::basic_string[abi:ne180100](&__p, __src, v4);
    v16 = *((_DWORD *)this + 22);
    if (v16 == 1634165106)
    {
      v17 = objc_msgSend(*((id *)this + 1), "_processDeletedArtistId:", &__p);
    }
    else
    {
      if (v16 != 1634165100)
      {
        v53 = 1;
LABEL_102:
        if (v57 < 0)
          operator delete(__p);
        if ((v53 & 1) == 0)
          goto LABEL_105;
        goto LABEL_71;
      }
      v17 = objc_msgSend(*((id *)this + 1), "_processDeletedAlbumId:", &__p);
    }
    v53 = v17;
    goto LABEL_102;
  }
  if (a2 > 1836414072)
  {
    if (a2 == 1936746852)
    {
      std::string::basic_string[abi:ne180100](&__p, __src, __len);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 128, (unsigned __int8 *)&__p, (uint64_t)&__p);
      if (v57 < 0)
        operator delete(__p);
      goto LABEL_71;
    }
    if (a2 != 1836414073)
      goto LABEL_71;
    v13 = _os_feature_enabled_impl();
    v14 = *((_DWORD *)this + 20);
    if (v13)
    {
      if (v14 > 1634165105)
      {
        if (v14 != 1634757753)
        {
          v15 = 24946;
          goto LABEL_54;
        }
      }
      else if (v14 != 1633968755)
      {
        v15 = 24940;
LABEL_54:
        v23 = v15 | 0x61670000;
LABEL_55:
        if (v14 != v23)
          goto LABEL_71;
      }
    }
    else if (v14 != 1634757753)
    {
      v23 = 1633968755;
      goto LABEL_55;
    }
    objc_msgSend(*((id *)this + 1), "_processUpdateType:", *__src);
    goto LABEL_71;
  }
  if (a2 != 1835625572)
  {
    if (a2 != 1836344175 || !*((_BYTE *)this + 93))
      goto LABEL_71;
    v8 = bswap32(*(_DWORD *)__src);
    v9 = *((_DWORD *)this + 22);
    if (v9 == 1634757753)
    {
      v10 = objc_msgSend(*((id *)this + 1), "_processContainerItemCount:", v8);
    }
    else if (v9 == 1633968755)
    {
      v10 = objc_msgSend(*((id *)this + 1), "_processTrackItemCount:", v8);
    }
    else
    {
      if (!_os_feature_enabled_impl())
        goto LABEL_71;
      v31 = *((_DWORD *)this + 22);
      if (v31 == 1634165106)
      {
        v10 = objc_msgSend(*((id *)this + 1), "_processArtistCount:", v8);
      }
      else
      {
        if (v31 != 1634165100)
          goto LABEL_71;
        v10 = objc_msgSend(*((id *)this + 1), "_processAlbumCount:", v8);
      }
    }
    goto LABEL_58;
  }
LABEL_12:
  v11 = *((_DWORD *)this + 21);
  if (v11 != 1836409964 && !*((_BYTE *)this + 92))
    goto LABEL_71;
  if ((_DWORD)__len == 8)
  {
    v12 = bswap64(*(_QWORD *)__src);
  }
  else if ((_DWORD)__len == 4)
  {
    v12 = (int)bswap32(*(_DWORD *)__src);
  }
  else
  {
    v18 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p) = 67109120;
      HIDWORD(__p) = v4;
      _os_log_impl(&dword_1AC149000, v18, OS_LOG_TYPE_ERROR, "Invalid item ID length (%u) during import session", (uint8_t *)&__p, 8u);
    }

    v12 = 0;
    v11 = *((_DWORD *)this + 21);
  }
  if (v11 != 1836409964)
  {
    if (*((_BYTE *)this + 92))
    {
      v21 = (unint64_t *)*((_QWORD *)this + 14);
      v20 = *((_QWORD *)this + 15);
      if ((unint64_t)v21 >= v20)
      {
        v24 = (unint64_t *)*((_QWORD *)this + 13);
        v25 = v21 - v24;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<long long>::__throw_length_error[abi:ne180100]();
        v27 = v20 - (_QWORD)v24;
        if (v27 >> 2 > v26)
          v26 = v27 >> 2;
        v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8;
        v29 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v28)
          v29 = v26;
        if (v29)
        {
          v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<long long>>(v29);
          v24 = (unint64_t *)*((_QWORD *)this + 13);
          v21 = (unint64_t *)*((_QWORD *)this + 14);
        }
        else
        {
          v30 = 0;
        }
        v32 = (unint64_t *)(v29 + 8 * v25);
        v33 = v29 + 8 * v30;
        *v32 = v12;
        v22 = v32 + 1;
        while (v21 != v24)
        {
          v34 = *--v21;
          *--v32 = v34;
        }
        *((_QWORD *)this + 13) = v32;
        *((_QWORD *)this + 14) = v22;
        *((_QWORD *)this + 15) = v33;
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v21 = v12;
        v22 = v21 + 1;
      }
      *((_QWORD *)this + 14) = v22;
    }
    goto LABEL_71;
  }
  v19 = *((_DWORD *)this + 22);
  if (v19 != 1634757753)
  {
    if (v19 != 1633968755)
      goto LABEL_71;
    v10 = objc_msgSend(*((id *)this + 1), "_processDeletedTrackId:", v12);
LABEL_58:
    if ((v10 & 1) == 0)
      goto LABEL_105;
    goto LABEL_71;
  }
  if (!objc_msgSend(*((id *)this + 1), "_processDeletedContainerId:", v12))
  {
LABEL_105:
    v45 = 0;
    goto LABEL_88;
  }
LABEL_71:
  if (*((_QWORD *)this + 6))
  {
    v35 = (std::__shared_weak_count *)operator new(0x90uLL);
    *(_OWORD *)&v35->__shared_owners_ = 0u;
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    v35->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B516F8;
    v35[1].std::__shared_count = 0u;
    LODWORD(v35[1].__shared_weak_owners_) = a2;
    v35[3].__vftable = 0;
    v35[2].std::__shared_count = 0u;
    LOBYTE(v35[2].__shared_weak_owners_) = 0;
    v35[4].__vftable = 0;
    LOBYTE(v35[3].__shared_owners_) = 1;
    *(_OWORD *)&v35[4].__shared_owners_ = 0u;
    *(_OWORD *)&v35[5].__shared_owners_ = 0u;
    v35[5].__vftable = (std::__shared_weak_count_vtbl *)&v35[5].__shared_owners_;
    v37 = (std::__shared_weak_count_vtbl *)malloc_type_malloc(v4, 0xB07DB96FuLL);
    v38 = v35[3].__vftable;
    v35[3].__vftable = v37;
    if (v38 && LOBYTE(v35[3].__shared_owners_))
    {
      free(v38);
      v37 = v35[3].__vftable;
    }
    LOBYTE(v35[3].__shared_owners_) = 1;
    memcpy(v37, __src, v4);
    v35[3].__shared_weak_owners_ = v4;
    __p = &v35[1];
    v56 = v35;
    std::shared_ptr<ML3CPP::Element>::__enable_weak_this[abi:ne180100]<ML3CPP::Element,ML3CPP::Element,void>((uint64_t)&__p, &v35[1].__vftable, (uint64_t)&v35[1]);
    v39 = (uint64_t *)*((_QWORD *)this + 6);
    v54[0] = v35 + 1;
    v54[1] = v35;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
    ML3CPP::Element::appendChildElement(v39, v54);
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
    v42 = v56;
    if (v56)
    {
      v43 = (unint64_t *)&v56->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  if (objc_msgSend(*((id *)this + 1), "isCancelled"))
  {
    v45 = 1;
LABEL_88:
    v46 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 67109120;
      HIDWORD(__p) = v45;
      _os_log_impl(&dword_1AC149000, v46, OS_LOG_TYPE_DEFAULT, "DAAP import success=%d. Cancelling parse operation.", (uint8_t *)&__p, 8u);
    }

    v47 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
    if (v47)
    {
      v48 = std::__shared_weak_count::lock(v47);
      if (v48)
      {
        v49 = v48;
        v50 = *((_QWORD *)this + 2);
        if (v50)
          *(_BYTE *)(v50 + 24) = 1;
        v51 = (unint64_t *)&v48->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
  }
}

void sub_1AC2235E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DAAPParserDelegate::DAAPParserDidEndContainer(DAAPParserDelegate *this, int a2)
{
  int v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  int v29;
  double v30;
  double v31;
  void *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t i;
  void *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t j;
  uint64_t v47;
  int v48;
  void *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  void *v70;
  unint64_t *v71;
  unint64_t v72;
  NSObject *v73;
  double v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  char *v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  NSObject *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD v102[2];
  _QWORD v103[2];
  void *v104[3];
  void *__p;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  _QWORD v110[2];
  __int128 v111;
  __int128 v112;
  _QWORD v113[2];
  __int128 v114;
  _QWORD v115[2];
  _QWORD v116[2];
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint8_t buf[4];
  double v125;
  __int128 v126;
  void **v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  if (a2 != 1936749167)
  {
    if (a2 != 1835821428)
    {
      if (a2 == 1634759535)
        *((_BYTE *)this + 92) = 0;
      v4 = 1;
      goto LABEL_120;
    }
    v120 = 0;
    v121 = 0;
    v12 = *((_QWORD *)this + 6);
    v13 = *(std::__shared_weak_count **)(v12 + 32);
    if (v13)
    {
      v14 = *(_QWORD *)(v12 + 24);
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v16 = __ldxr(p_shared_weak_owners);
      while (__stxr(v16 + 1, p_shared_weak_owners));
      v118 = 0;
      v119 = std::__shared_weak_count::lock(v13);
      if (v119)
      {
        v118 = v14;
        std::__shared_weak_count::__release_weak(v13);
        if (v14)
        {
          while (*(_DWORD *)(v14 + 16) != 1835821428)
          {
            v17 = *(std::__shared_weak_count **)(v14 + 32);
            if (v17)
            {
              v18 = *(_QWORD *)(v14 + 24);
              v19 = (unint64_t *)&v17->__shared_weak_owners_;
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
              v21 = std::__shared_weak_count::lock(v17);
              if (v21)
                v22 = v18;
              else
                v22 = 0;
            }
            else
            {
              v22 = 0;
              v21 = 0;
            }
            v23 = v119;
            v118 = v22;
            v119 = v21;
            if (v23)
            {
              p_shared_owners = (unint64_t *)&v23->__shared_owners_;
              do
                v25 = __ldaxr(p_shared_owners);
              while (__stlxr(v25 - 1, p_shared_owners));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            if (v17)
              std::__shared_weak_count::__release_weak(v17);
            v14 = v118;
            if (!v118)
              goto LABEL_37;
          }
          if (!*((_BYTE *)this + 92))
            goto LABEL_56;
          goto LABEL_38;
        }
      }
      else
      {
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    else
    {
      v118 = 0;
      v119 = 0;
    }
LABEL_37:
    if (*((_BYTE *)this + 92))
    {
LABEL_38:
      std::unordered_set<std::string>::unordered_set((uint64_t)&v126, (uint64_t)this + 128);
      v26 = *((_QWORD *)this + 22);
      if (v26 >= *((_QWORD *)this + 23))
      {
        v27 = std::vector<std::unordered_set<std::string>>::__push_back_slow_path<std::unordered_set<std::string> const&>((uint64_t *)this + 21, (uint64_t)&v126);
      }
      else
      {
        std::unordered_set<std::string>::unordered_set(*((_QWORD *)this + 22), (uint64_t)&v126);
        v27 = v26 + 40;
        *((_QWORD *)this + 22) = v26 + 40;
      }
      *((_QWORD *)this + 22) = v27;
      if (*((_QWORD *)this + 19))
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*((void ***)this + 18));
        *((_QWORD *)this + 18) = 0;
        v36 = *((_QWORD *)this + 17);
        if (v36)
        {
          for (i = 0; i != v36; ++i)
            *(_QWORD *)(*((_QWORD *)this + 16) + 8 * i) = 0;
        }
        *((_QWORD *)this + 19) = 0;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v127);
      v38 = (void *)v126;
      *(_QWORD *)&v126 = 0;
      if (v38)
        operator delete(v38);
LABEL_56:
      v4 = 1;
LABEL_110:
      v75 = v119;
      if (v119)
      {
        v76 = (unint64_t *)&v119->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v9 = v121;
      if (v121)
      {
        v78 = (unint64_t *)&v121->__shared_owners_;
        do
          v11 = __ldaxr(v78);
        while (__stlxr(v11 - 1, v78));
        goto LABEL_118;
      }
      goto LABEL_120;
    }
    v28 = (void *)MEMORY[0x1AF43CC0C]();
    v29 = *((_DWORD *)this + 22);
    if (v29 == 1634757753)
    {
      v39 = (void *)*((_QWORD *)this + 1);
      v40 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
      v108 = *((_QWORD *)this + 6);
      v109 = v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      __p = 0;
      v106 = 0;
      v107 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p, *((const void **)this + 13), *((_QWORD *)this + 14), (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3);
      memset(v104, 0, sizeof(v104));
      std::vector<std::unordered_set<std::string>>::__init_with_size[abi:ne180100]<std::unordered_set<std::string>*,std::unordered_set<std::string>*>((uint64_t)v104, *((_QWORD *)this + 21), *((_QWORD *)this + 22), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 3));
      v4 = objc_msgSend(v39, "_processContainerElement:withTrackIds:trackPersonIdentifiers:", &v108, &__p, v104);
      *(_QWORD *)&v126 = v104;
      std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
      if (__p)
      {
        v106 = __p;
        operator delete(__p);
      }
      v43 = v109;
      if (v109)
      {
        v44 = (unint64_t *)&v109->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      *((_QWORD *)this + 14) = *((_QWORD *)this + 13);
      v47 = *((_QWORD *)this + 21);
      for (j = *((_QWORD *)this + 22);
            j != v47;
      *((_QWORD *)this + 22) = v47;
      goto LABEL_109;
    }
    if (v29 == 1633968755)
    {
      if (_os_feature_enabled_impl())
      {
        v117 = 0;
        objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
        v31 = v30;
        v32 = (void *)*((_QWORD *)this + 1);
        v33 = *((_QWORD *)this + 7);
        v116[0] = *((_QWORD *)this + 6);
        v116[1] = v33;
        if (v33)
        {
          v34 = (unint64_t *)(v33 + 8);
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        if (v32)
          objc_msgSend(v32, "_trackImportItemWithTrackElement:", v116);
        else
          v126 = 0uLL;
        std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)v116);
        v58 = (void *)*((_QWORD *)this + 1);
        v59 = *((_QWORD *)this + 7);
        v115[0] = *((_QWORD *)this + 6);
        v115[1] = v59;
        if (v59)
        {
          v60 = (unint64_t *)(v59 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        v114 = v126;
        if (*((_QWORD *)&v126 + 1))
        {
          v62 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        v4 = objc_msgSend(v58, "_processArtistFromTrackElement:importItem:albumArtistPersistentID:", v115, &v114, &v117);
        std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&v114);
        std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)v115);
        if (v4)
        {
          v64 = (void *)*((_QWORD *)this + 1);
          v65 = *((_QWORD *)this + 7);
          v113[0] = *((_QWORD *)this + 6);
          v113[1] = v65;
          if (v65)
          {
            v66 = (unint64_t *)(v65 + 8);
            do
              v67 = __ldxr(v66);
            while (__stxr(v67 + 1, v66));
          }
          v112 = v126;
          if (*((_QWORD *)&v126 + 1))
          {
            v68 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
          }
          v4 = objc_msgSend(v64, "_processAlbumFromTrackElement:importItem:albumArtistPersistentID:", v113, &v112, v117);
          std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&v112);
          std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)v113);
          if (v4)
          {
            v70 = (void *)*((_QWORD *)this + 1);
            v111 = v126;
            if (*((_QWORD *)&v126 + 1))
            {
              v71 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
              do
                v72 = __ldxr(v71);
              while (__stxr(v72 + 1, v71));
            }
            v4 = objc_msgSend(v70, "_processTrackImportItem:", &v111);
            std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&v111);
          }
        }
        _ML3LogCategoryDefault();
        v73 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
          *(_DWORD *)buf = 134217984;
          v125 = v74 - v31;
          _os_log_impl(&dword_1AC149000, v73, OS_LOG_TYPE_DEFAULT, "Import Metrics: Finished Processing Track Data Import in %2f seconds", buf, 0xCu);
        }

        std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&v126);
        goto LABEL_109;
      }
      v54 = (void *)*((_QWORD *)this + 1);
      v55 = *((_QWORD *)this + 7);
      v110[0] = *((_QWORD *)this + 6);
      v110[1] = v55;
      if (v55)
      {
        v56 = (unint64_t *)(v55 + 8);
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v4 = objc_msgSend(v54, "_processTrackElement:", v110);
      v53 = v110;
      goto LABEL_86;
    }
    if (_os_feature_enabled_impl()
      && objc_msgSend(*((id *)this + 1), "_getTrackSource") == 2)
    {
      v48 = *((_DWORD *)this + 22);
      if (v48 == 1634165106)
      {
        v98 = (void *)*((_QWORD *)this + 1);
        v99 = *((_QWORD *)this + 7);
        v102[0] = *((_QWORD *)this + 6);
        v102[1] = v99;
        if (v99)
        {
          v100 = (unint64_t *)(v99 + 8);
          do
            v101 = __ldxr(v100);
          while (__stxr(v101 + 1, v100));
        }
        v4 = objc_msgSend(v98, "_processAlbumArtistFromArtistElement:", v102);
        v53 = v102;
        goto LABEL_86;
      }
      if (v48 == 1634165100)
      {
        v49 = (void *)*((_QWORD *)this + 1);
        v50 = *((_QWORD *)this + 7);
        v103[0] = *((_QWORD *)this + 6);
        v103[1] = v50;
        if (v50)
        {
          v51 = (unint64_t *)(v50 + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        v4 = objc_msgSend(v49, "_processAlbumFromAlbumElement:", v103);
        v53 = v103;
LABEL_86:
        std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)v53);
        goto LABEL_109;
      }
    }
    v4 = 1;
LABEL_109:
    objc_autoreleasePoolPop(v28);
    goto LABEL_110;
  }
  v5 = (void *)*((_QWORD *)this + 1);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  v122 = *((_QWORD *)this + 6);
  v123 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v4 = objc_msgSend(v5, "_processPersonElement:", &v122);
  v9 = v123;
  if (v123)
  {
    v10 = (unint64_t *)&v123->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
LABEL_118:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_120:
  v80 = (char *)this + 48;
  v79 = *((_QWORD *)this + 6);
  if (!v79 || *(_DWORD *)(v79 + 16) != a2)
    goto LABEL_135;
  v81 = *(std::__shared_weak_count **)(v79 + 32);
  if (v81)
  {
    v82 = *(_QWORD *)(v79 + 24);
    v83 = (unint64_t *)&v81->__shared_weak_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
    v85 = std::__shared_weak_count::lock(v81);
    if (!v85)
      v82 = 0;
    std::__shared_weak_count::__release_weak(v81);
  }
  else
  {
    v85 = 0;
    v82 = 0;
  }
  std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100]((_QWORD *)this + 6, v82, (uint64_t)v85);
  if (*(_QWORD *)v80)
  {
    *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)v80 + 16);
  }
  else
  {
    *((_DWORD *)this + 20) = 0;
    v126 = 0uLL;
    std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)this + 32, &v126);
    v95 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
    if (*((_QWORD *)&v126 + 1))
    {
      v96 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
  if (!v85)
    goto LABEL_135;
  v86 = (unint64_t *)&v85->__shared_owners_;
  do
    v87 = __ldaxr(v86);
  while (__stlxr(v87 - 1, v86));
  if (!v87)
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
    if (v4)
    {
LABEL_136:
      if (!objc_msgSend(*((id *)this + 1), "isCancelled"))
        return;
    }
  }
  else
  {
LABEL_135:
    if (v4)
      goto LABEL_136;
  }
  v88 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v126) = 67109120;
    DWORD1(v126) = v4;
    _os_log_impl(&dword_1AC149000, v88, OS_LOG_TYPE_DEFAULT, "DAAP import success=%d. Cancelling parse operation.", (uint8_t *)&v126, 8u);
  }

  v89 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v89)
  {
    v90 = std::__shared_weak_count::lock(v89);
    if (v90)
    {
      v91 = v90;
      v92 = *((_QWORD *)this + 2);
      if (v92)
        *(_BYTE *)(v92 + 24) = 1;
      v93 = (unint64_t *)&v90->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
  }
}

void sub_1AC223F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  uint64_t v34;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v34 - 192);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v34 - 176);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_set<std::string>>::__push_back_slow_path<std::unordered_set<std::string> const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  unint64_t v14;
  unint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  _QWORD *v19;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v7 = 0x666666666666666;
  else
    v7 = v3;
  v19 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(v7);
  else
    v8 = 0;
  v16 = v7;
  v17.i64[0] = v7 + 40 * v2;
  v17.i64[1] = v17.i64[0];
  v18 = v7 + 40 * v8;
  std::unordered_set<std::string>::unordered_set(v17.i64[0], a2);
  v10 = (uint64_t *)*a1;
  v9 = (uint64_t *)a1[1];
  v12 = v17.i64[0];
  v11 = v17.i64[0];
  if (v9 == (uint64_t *)*a1)
  {
    v13 = vdupq_n_s64((unint64_t)v9);
  }
  else
  {
    do
    {
      v9 -= 5;
      v11 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v11 - 40, v9);
    }
    while (v9 != v10);
    v13 = *(int64x2_t *)a1;
  }
  *a1 = v11;
  a1[1] = v12 + 40;
  v17 = v13;
  v14 = a1[2];
  a1[2] = v18;
  v18 = v14;
  v16 = v13.i64[0];
  std::__split_buffer<std::unordered_set<std::string>>::~__split_buffer((uint64_t)&v16);
  return v12 + 40;
}

void sub_1AC2241B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_set<std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unordered_set<std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::shared_ptr<ML3CPP::Element>::__enable_weak_this[abi:ne180100]<ML3CPP::Element,ML3CPP::Element,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void std::__shared_ptr_emplace<ML3CPP::Element>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B516F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3CPP::Element>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B516F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

void std::__shared_ptr_emplace<ML3CPP::Element>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void **v5;

  std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::destroy(*(_QWORD **)(a1 + 128));
  v5 = (void **)(a1 + 96);
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2 && *(_BYTE *)(a1 + 80))
    free(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<ML3CPP::Element>>>>::destroy(a1[1]);
    std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<DAAPParserDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<DAAPParserDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B51378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

void std::__shared_ptr_emplace<DAAPParserDelegate>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  void **v4;

  v4 = (void **)(a1 + 192);
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 152);
  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v2);
  }
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 88);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 72);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a1 + 56);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);

}

void std::__shared_ptr_emplace<ML3CPP::Parser>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B516C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ML3CPP::Parser>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E5B516C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

void std::__shared_ptr_emplace<ML3CPP::Parser>::__on_zero_shared(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;

  v2 = (void **)a1[8];
  v3 = (void **)a1[9];
  if (v3 == v2)
  {
    v4 = a1 + 12;
    v3 = (void **)a1[8];
  }
  else
  {
    v4 = a1 + 12;
    v5 = a1[11];
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((a1[12] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 96) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[8];
      v3 = (void **)a1[9];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[9];
      v2 = (void **)(a1[8] + 8);
      a1[8] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 256;
LABEL_14:
    a1[11] = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = a1[8];
    v14 = a1[9];
    if (v14 != v15)
      a1[9] = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v16 = (void *)a1[7];
  if (v16)
    operator delete(v16);
  v17 = (std::__shared_weak_count *)a1[5];
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
}

void std::allocator<DAAPParserDelegate>::construct[abi:ne180100]<DAAPParserDelegate,ML3DAAPImportOperation * const {__strong}&,std::shared_ptr<ML3CPP::Parser> &,ML3DAAPImportOperationEntityType &,BOOL>(uint64_t a1, void *a2, uint64_t a3, std::__shared_weak_count *a4, unsigned int *a5, char *a6)
{
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    DAAPParserDelegate::DAAPParserDelegate(a1, a2, v10, *a5, *a6);
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
  }
  else
  {
    DAAPParserDelegate::DAAPParserDelegate(a1, a2, v10, *a5, *a6);
  }
}

uint64_t DAAPParserDelegate::DAAPParserDelegate(uint64_t a1, void *a2, _QWORD *a3, unsigned int a4, char a5)
{
  id v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v9 = a2;
  *(_QWORD *)a1 = &off_1E5B4D160;
  *(_QWORD *)(a1 + 8) = v9;
  v10 = a3[1];
  *(_QWORD *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 24) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_BYTE *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 93) = a5;
  *(_DWORD *)(a1 + 96) = a4;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  if (a4 <= 3)
    *(_DWORD *)(a1 + 88) = *(_DWORD *)&aLagaragasbdasb[4 * a4];
  return a1;
}

void std::__shared_ptr_pointer<ML3DAAPArtistImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPArtistImportItem>,std::allocator<ML3DAAPArtistImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3DAAPArtistImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPArtistImportItem>,std::allocator<ML3DAAPArtistImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3DAAPArtistImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPArtistImportItem>,std::allocator<ML3DAAPArtistImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_23ML3DAAPArtistImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3DAAPAlbumImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPAlbumImportItem>,std::allocator<ML3DAAPAlbumImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3DAAPAlbumImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPAlbumImportItem>,std::allocator<ML3DAAPAlbumImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3DAAPAlbumImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPAlbumImportItem>,std::allocator<ML3DAAPAlbumImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_22ML3DAAPAlbumImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3DAAPPersonImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPPersonImportItem>,std::allocator<ML3DAAPPersonImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3DAAPPersonImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPPersonImportItem>,std::allocator<ML3DAAPPersonImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3DAAPPersonImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPPersonImportItem>,std::allocator<ML3DAAPPersonImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_23ML3DAAPPersonImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3DAAPContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPContainerImportItem>,std::allocator<ML3DAAPContainerImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3DAAPContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPContainerImportItem>,std::allocator<ML3DAAPContainerImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3DAAPContainerImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPContainerImportItem>,std::allocator<ML3DAAPContainerImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_26ML3DAAPContainerImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3DAAPImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPImportItem>,std::allocator<ML3DAAPImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3DAAPImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPImportItem>,std::allocator<ML3DAAPImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3DAAPImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3DAAPImportItem>,std::allocator<ML3DAAPImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_S1_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1AC225CFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1319(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1320(uint64_t a1)
{

}

void _ML3DatabaseFunctionRunBlock(sqlite3_context *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD, _QWORD);
  id v9;

  sqlite3_user_data(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v9 = v6;
    objc_msgSend(v6, "block");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v9;
    if (v7)
    {
      objc_msgSend(v9, "block");
      v8 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, sqlite3_context *, uint64_t, uint64_t))v8)[2](v8, a1, a2, a3);

      v6 = v9;
    }
  }

}

void sub_1AC2267C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC226A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC226B88(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AC227F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC228420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC228DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AC22A608(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1AC22AB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1AC22B018(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AC22B164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC22C700(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  MEMORY[0x1AF43C744](v5, 0x10B3C40916F1A39);

  _Unwind_Resume(a1);
}

void sub_1AC22CEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v28 - 136);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v28 - 120);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v28 - 104);

  _Unwind_Resume(a1);
}

void sub_1AC22D7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v28 - 136);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v28 - 120);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v28 - 104);

  _Unwind_Resume(a1);
}

void sub_1AC22DB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3ProtoSyncDeleteImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncDeleteImportItem>,std::allocator<ML3ProtoSyncDeleteImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncDeleteImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncDeleteImportItem>,std::allocator<ML3ProtoSyncDeleteImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncDeleteImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncDeleteImportItem>,std::allocator<ML3ProtoSyncDeleteImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_28ML3ProtoSyncDeleteImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<ML3ImportItem>::shared_ptr[abi:ne180100]<ML3ProtoSyncAlbumImportItem,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E5B51B20;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1AC22DCEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<ML3ProtoSyncAlbumImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncAlbumImportItem>,std::allocator<ML3ProtoSyncAlbumImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncAlbumImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncAlbumImportItem>,std::allocator<ML3ProtoSyncAlbumImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncAlbumImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncAlbumImportItem>,std::allocator<ML3ProtoSyncAlbumImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_27ML3ProtoSyncAlbumImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ProtoSyncArtistImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncArtistImportItem>,std::allocator<ML3ProtoSyncArtistImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncArtistImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncArtistImportItem>,std::allocator<ML3ProtoSyncArtistImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncArtistImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncArtistImportItem>,std::allocator<ML3ProtoSyncArtistImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_28ML3ProtoSyncArtistImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ML3ProtoSyncTrackImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncTrackImportItem>,std::allocator<ML3ProtoSyncTrackImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncTrackImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncTrackImportItem>,std::allocator<ML3ProtoSyncTrackImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncTrackImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncTrackImportItem>,std::allocator<ML3ProtoSyncTrackImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_27ML3ProtoSyncTrackImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t ML3DatabaseImportDataSource::getRowCount(ML3DatabaseImportDataSource *this)
{
  return (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 4;
}

void ML3DatabaseImportDataSource::getRow(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char v21;
  char v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  float *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  unint64_t *v53;
  unint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *context;
  __int128 v59;
  __int128 v60;
  std::string v61;
  __int128 v62;
  __int128 v63;
  std::string v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v5 = *(_OWORD *)(a1[6] + 16 * a3);
  v69 = v5;
  v59 = v5;
  if (*((_QWORD *)&v5 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    context = (void *)MEMORY[0x1AF43CC0C]();
    v68 = v59;
    do
      v8 = __ldxr(v6);
    while (__stxr(v8 + 1, v6));
  }
  else
  {
    context = (void *)MEMORY[0x1AF43CC0C]();
    v68 = v59;
  }
  (*(void (**)(_QWORD *, __int128 *))(*a1 + 72))(a1, &v68);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  v14 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  if (v14 != v13)
  {
    v15 = v12;
    v16 = 0;
    while (2)
    {
      v17 = v16;
      if (ML3TrackRulesGetCount(v15) <= (unint64_t)v16)
        break;
      v18 = *(unsigned int *)(ML3TrackRulesGetRule(v15, v16) + 48);
      if (*(_BYTE *)(v69 + 16) && !*(_BYTE *)(v69 + 17))
      {
        v67 = v69;
        if (*((_QWORD *)&v69 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v21 = (*(uint64_t (**)(_QWORD *, __int128 *, uint64_t))(*a1 + 120))(a1, &v67, v18);
        v22 = v21;
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (!*((_QWORD *)&v67 + 1))
          goto LABEL_25;
        v24 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
          if ((v22 & 1) == 0)
          {
LABEL_72:
            if ((_DWORD)v18 == 33554434)
            {
              *(_QWORD *)v14 = 4;
              std::string::basic_string[abi:ne180100]<0>(&v63, "_ML_VALUE_NOT_PROVIDED_");
              std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>::operator=[abi:ne180100]<std::string,void>(v14 + 8, &v63);
              if (v64.__r_.__value_.__s.__data_[7] < 0)
              {
                v52 = (void *)v63;
LABEL_82:
                operator delete(v52);
              }
            }
            else
            {
              *(_QWORD *)v14 = 0;
              if (*(_BYTE *)(v14 + 40))
              {
                std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor(v14 + 8);
                *(_BYTE *)(v14 + 40) = 0;
              }
            }
            goto LABEL_96;
          }
        }
        else
        {
LABEL_25:
          if ((v21 & 1) == 0)
            goto LABEL_72;
        }
      }
      v26 = *(_QWORD *)(ML3TrackRulesGetRule(v15, v17) + 40);
      *(_QWORD *)v14 = v26;
      switch(v26)
      {
        case 2:
          v66 = v69;
          if (*((_QWORD *)&v69 + 1))
          {
            v27 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          v29 = (*(uint64_t (**)(_QWORD *, __int128 *, uint64_t))(*a1 + 80))(a1, &v66, v18);
          *(_QWORD *)&v63 = v29;
          if (*(_BYTE *)(v14 + 40))
          {
            std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>::operator=[abi:ne180100]<long long,0,long long,0ul,0>(v14 + 8, &v63);
          }
          else
          {
            *(_QWORD *)(v14 + 8) = v29;
            *(_DWORD *)(v14 + 32) = 0;
            *(_BYTE *)(v14 + 40) = 1;
          }
          v49 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
          if (*((_QWORD *)&v66 + 1))
          {
            v50 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            goto LABEL_94;
          }
          goto LABEL_96;
        case 3:
          v65 = v69;
          if (*((_QWORD *)&v69 + 1))
          {
            v37 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          v39 = (*(float (**)(_QWORD *, __int128 *, uint64_t))(*a1 + 88))(a1, &v65, v18);
          v40 = v39;
          if (*(_BYTE *)(v14 + 40))
          {
            v41 = *(unsigned int *)(v14 + 32);
            if ((_DWORD)v41 != -1)
            {
              v42 = (float *)(v14 + 8);
              if ((_DWORD)v41 == 1)
              {
                *v42 = v39;
                goto LABEL_85;
              }
              ((void (*)(__int128 *, float *))off_1E5B65528[v41])(&v63, v42);
            }
            *(float *)(v14 + 8) = v40;
            *(_DWORD *)(v14 + 32) = 1;
          }
          else
          {
            *(float *)(v14 + 8) = v39;
            *(_DWORD *)(v14 + 32) = 1;
            *(_BYTE *)(v14 + 40) = 1;
          }
LABEL_85:
          v49 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
          if (*((_QWORD *)&v65 + 1))
          {
            v53 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
            do
              v51 = __ldaxr(v53);
            while (__stlxr(v51 - 1, v53));
            goto LABEL_94;
          }
LABEL_96:
          v16 = v17 + 1;
          v14 += 48;
          if (v14 == v13)
            break;
          continue;
        case 4:
          v62 = v69;
          if (*((_QWORD *)&v69 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
            do
              v31 = __ldxr(v30);
            while (__stxr(v31 + 1, v30));
          }
          (*(void (**)(__int128 *__return_ptr, _QWORD *, __int128 *, uint64_t))(*a1 + 104))(&v63, a1, &v62, v18);
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
          if (*((_QWORD *)&v62 + 1))
          {
            v33 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          if (BYTE8(v63))
          {
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v61, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
            else
              v61 = v64;
            std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>::operator=[abi:ne180100]<std::string,void>(v14 + 8, (__int128 *)&v61);
            if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v61.__r_.__value_.__l.__data_);
          }
          else
          {
            *(_QWORD *)v14 = 0;
            if (*(_BYTE *)(v14 + 40))
            {
              std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor(v14 + 8);
              *(_BYTE *)(v14 + 40) = 0;
            }
          }
          *(_QWORD *)&v63 = off_1E5B4D010;
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          {
            v52 = (void *)v64.__r_.__value_.__r.__words[0];
            goto LABEL_82;
          }
          goto LABEL_96;
        case 5:
          v60 = v69;
          if (*((_QWORD *)&v69 + 1))
          {
            v43 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          (*(void (**)(__int128 *__return_ptr, _QWORD *, __int128 *, uint64_t))(*a1 + 96))(&v63, a1, &v60, v18);
          if (!*(_BYTE *)(v14 + 40))
          {
            *(_OWORD *)(v14 + 8) = v63;
            v63 = 0uLL;
            *(_DWORD *)(v14 + 32) = 4;
            *(_BYTE *)(v14 + 40) = 1;
            goto LABEL_91;
          }
          v45 = *(unsigned int *)(v14 + 32);
          if ((_DWORD)v45 == -1)
            goto LABEL_90;
          if ((_DWORD)v45 == 4)
          {
            std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100](v14 + 8, &v63);
            v46 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
            if (*((_QWORD *)&v63 + 1))
            {
              v47 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
          }
          else
          {
            ((void (*)(std::string *, uint64_t))off_1E5B65528[v45])(&v61, v14 + 8);
LABEL_90:
            *(_OWORD *)(v14 + 8) = v63;
            v63 = 0uLL;
            *(_DWORD *)(v14 + 32) = 4;
          }
LABEL_91:
          v49 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
          if (*((_QWORD *)&v60 + 1))
          {
            v54 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
            do
              v51 = __ldaxr(v54);
            while (__stlxr(v51 - 1, v54));
LABEL_94:
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          goto LABEL_96;
        default:
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual void ML3DatabaseImportDataSource::getRow(ML3VirtualTableRow *, uint32_t)");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "handleFailureInFunction:file:lineNumber:description:", v36, CFSTR("ML3DatabaseImportDataSource.mm"), 164, CFSTR("unhandled data type %u"), *(_QWORD *)v14, context);

          goto LABEL_96;
      }
      break;
    }
  }
  objc_autoreleasePoolPop(context);
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_1AC22E968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;

  if (a28 < 0)
    operator delete(__p);
  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v32 - 128);
  _Unwind_Resume(a1);
}

uint64_t ML3DatabaseImportDataSource::getPersistentID(ML3DatabaseImportDataSource *this, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 16 * a2) + 8);
}

uint64_t ML3DatabaseImportDataSource::rowIsValid(ML3DatabaseImportDataSource *this)
{
  return 1;
}

void ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(id *this)
{
  ML3DatabaseImportDataSource::~ML3DatabaseImportDataSource(this);
  JUMPOUT(0x1AF43C744);
}

{
  std::__shared_weak_count *v2;
  void **v3;

  *this = &off_1E5B4E888;
  v3 = this + 6;
  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100](&v3);

  v2 = (std::__shared_weak_count *)this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

id ML3DatabaseImportDataSource::copyVirtualTableInsertionSQL(id *this, ML3VirtualTable *a2, int a3)
{
  ML3VirtualTable *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;
  void *v20;
  int v21;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  char v25;
  int v26;
  uint64_t v27;
  const __CFString *v28;
  void *v29;
  int v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v35;
  void *v36;
  id *location;
  void *v38;
  ML3VirtualTable *v39;
  id v40;
  void *v41;
  int v42;
  id v43;
  id v44;
  char v45;
  id *v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = this[5];
  if (!v6)
  {
    location = this + 5;
    v39 = v5;
    v46 = this;
    ML3DatabaseImportDataSource::getTableSchema((ML3DatabaseImportDataSource *)this);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    objc_msgSend(v41, "columns");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v48, v52, 16);
    v42 = a3;
    v10 = 0;
    if (v9)
    {
      v11 = *(_QWORD *)v49;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v49 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * i);
          if ((objc_msgSend(v13, "columnConstraints") & 1) != 0)
          {
            objc_msgSend(v7, "addObject:", CFSTR("ROWID"));
          }
          else
          {
            objc_msgSend(v13, "name");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "addObject:", v14);

            ++v10;
          }
        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v48, v52, 16);
      }
      while (v9);
    }

    objc_msgSend(v7, "componentsJoinedByString:", CFSTR(","));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v41, "name");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "stringWithFormat:", CFSTR("INSERT OR REPLACE INTO %@ (%@)"), v16, v38);
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = (*((uint64_t (**)(id *))*this + 7))(this);
    objc_msgSend(v41, "name");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    -[ML3VirtualTable name](v39, "name");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = v36;
    v43 = v35;
    v44 = v18;
    v47 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", 7 * v10 + 5);
    objc_msgSend(v47, "appendString:", v44);
    objc_msgSend(v47, "appendString:", CFSTR(".ROWID"));
    if (!v10)
      goto LABEL_53;
    v19 = 0;
    while (1)
    {
      ML3TrackRulesGetPropertyName(v17, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = *(_DWORD *)(ML3TrackRulesGetRule(v17, v19) + 48);
      v22 = CFSTR("CASE WHEN item_store.home_sharing_id != 0 THEN 300 ELSE(CASE WHEN IFNULL(item_store.match_redownload_params, '') != '' THEN 200 ELSE(CASE WHEN IFNULL(item_store.purchase_history_redownload_params, '') != '' AND item_store.purchase_history_id != 0 THEN 100 ELSE(CASE WHEN item_store.subscription_store_item_id != 0 AND item_store.is_subscription AND item_store.cloud_asset_available THEN 50 ELSE(CASE WHEN item_store.sync_redownload_params == 'redownload' AND item_store.sync_id != 0 THEN 20 ELSE(CASE WHEN item_store.sync_redownload_params == 'local' AND item_store.sync_id != 0 THEN 10 ELSE 0 END) END) END) END) END) END");
      if (v21 != 16777241)
        v22 = 0;
      if (v21 == 16777245)
        v22 = CFSTR("CASE WHEN item_store.home_sharing_id OR (item_store.store_saga_id AND item_store.cloud_in_my_library) OR item_store.purchase_history_id OR (item_store.sync_id AND item_store.sync_in_my_library) OR item_store.is_ota_purchased THEN 1 ELSE 0 END");
      v23 = v22;
      v24 = v23;
      if (v23)
      {
        objc_msgSend(v47, "appendFormat:", CFSTR(", %@"), v23);
        goto LABEL_20;
      }
      if (*(_DWORD *)(ML3TrackRulesGetRule(v17, v19) + 4 * v42) == -1)
      {
        objc_msgSend(v47, "appendFormat:", CFSTR(", %@"), v20);
        goto LABEL_20;
      }
      if (v42 < 1)
      {
        if (v21 == 33554434)
          goto LABEL_44;
        v25 = 0;
LABEL_46:
        if (*(_BYTE *)(ML3TrackRulesGetRule(v17, v19) + 28))
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("CASE WHEN col%d ISNULL THEN %@ ELSE MAX(IFNULL(%@, 0), col%d) END"), v19, v20, v20, v19);
        else
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("CASE WHEN col%d ISNULL THEN %@ ELSE col%d END"), v19, v20, v19);
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = (void *)v31;
        if ((v25 & 1) != 0)
          objc_msgSend(v47, "appendFormat:", CFSTR(" THEN (%@) ELSE %@ END"), v31, v20);
        else
          objc_msgSend(v47, "appendFormat:", CFSTR(", %@"), v31);

        goto LABEL_20;
      }
      v45 = 0;
      v25 = 0;
      v26 = v42 - 1;
      v27 = v42 - 1;
      do
      {
        if (*(_DWORD *)(ML3TrackRulesGetRule(v17, v19) + 4 * v27) == 2)
        {
          if ((v25 & 1) != 0)
            v28 = CFSTR(" AND LENGTH(IFNULL(item_extra.location, '')) = 0");
          else
            v28 = CFSTR(", CASE WHEN LENGTH(IFNULL(item_extra.location, '')) = 0");
          objc_msgSend(v47, "appendString:", v28);
        }
        else
        {
          if (*(_DWORD *)(ML3TrackRulesGetRule(v17, v19) + 4 * v27) != 1)
            goto LABEL_36;
          (*((void (**)(void))*v46 + 16))();
          if ((v25 & 1) != 0)
          {
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v47, "appendFormat:", CFSTR(" AND IFNULL(%@,0) = 0"), v29);
          }
          else
          {
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v47, "appendFormat:", CFSTR(", CASE WHEN IFNULL((SELECT(1) FROM %@ WHERE ROWID = %@.ROWID), 0) = 0 OR (IFNULL(%@,0) = 0"), v43, v44, v29);
            v45 = 1;
          }

        }
        v25 = 1;
LABEL_36:
        v30 = v27-- + 1;
        --v26;
      }
      while ((v30 & 0xFFFFFFFE) != 0);
      if ((v45 & 1) != 0)
        objc_msgSend(v47, "appendString:", CFSTR(")"));
      if (v21 != 33554434)
        goto LABEL_46;
      if ((v25 & 1) != 0)
      {
        objc_msgSend(v47, "appendFormat:", CFSTR(" THEN (CASE WHEN col%d='%s' THEN %@ ELSE col%d END) ELSE %@ END"), v19, "_ML_VALUE_NOT_PROVIDED_", v20, v19, v20);
        goto LABEL_20;
      }
LABEL_44:
      objc_msgSend(v47, "appendFormat:", CFSTR(", CASE WHEN col%d='%s' THEN %@ ELSE col%d END"), v19, "_ML_VALUE_NOT_PROVIDED_", v20, v19);
LABEL_20:

      if (++v19 == v10)
      {
LABEL_53:
        (*((void (**)(id *, id, id))*v46 + 17))(v46, v43, v44);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ SELECT %@ FROM %@"), v40, v47, v33);
        v6 = (id)objc_claimAutoreleasedReturnValue();

        objc_storeStrong(location, v6);
        v5 = v39;
        break;
      }
    }
  }

  return v6;
}

void sub_1AC22F098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

uint64_t ML3DatabaseImportDataSource::getImportPropertyGroupKey(ML3DatabaseImportDataSource *this)
{
  return 0;
}

uint64_t ML3DatabaseImportDataSource::getDatabaseTableSchemaClass(ML3DatabaseImportDataSource *this)
{
  return objc_opt_class();
}

uint64_t ML3DatabaseImportDataSource::integerValueForKey(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 32))(*a2, a3);
}

uint64_t ML3DatabaseImportDataSource::floatValueForKey(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 40))(*a2, a3);
}

uint64_t ML3DatabaseImportDataSource::dataValueForKey(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 48))(*a2, a3);
}

uint64_t ML3DatabaseImportDataSource::stringValueForKey(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a3);
}

std::string *ML3DatabaseImportDataSource::sanitizedStringValueForKey@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, ML3ImportItem *a3@<X8>)
{
  return ML3ImportItem::getSanitizedStringValue(a3, *a1, a2);
}

uint64_t ML3DatabaseImportDataSource::hasValueForKey(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;

  if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, a3) & 1) != 0)
    return 1;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 200))(*a2, a3);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, result);
  return result;
}

id ML3DatabaseImportDataSource::identityPropertyForSource(ML3DatabaseImportDataSource *this, uint64_t a2)
{
  return ML3TrackRulesIdentityPropertyForSource(a2);
}

id ML3DatabaseImportDataSource::generateVTableInsertionFromClause(ML3DatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  NSString *v4;
  NSString *v5;
  void *v6;

  v4 = a2;
  v5 = a3;
  if (-[NSString isEqualToString:](v4, "isEqualToString:", CFSTR("item_store")))
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ LEFT OUTER JOIN item_store ON +%@.ROWID = item_store.item_pid"), v5, v5);
  else
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ LEFT OUTER JOIN item_store ON +%@.ROWID = item_store.item_pid LEFT OUTER JOIN %@ ON +%@.ROWID = %@.item_pid"), v5, v5, v4, v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1AC22F350(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id ML3DatabaseImportDataSource::getTableSchema(ML3DatabaseImportDataSource *this)
{
  void *v2;
  id v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 4);
  if (!v2)
  {
    v3 = objc_alloc_init((Class)(*(uint64_t (**)(ML3DatabaseImportDataSource *))(*(_QWORD *)this + 64))(this));
    v4 = (void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v3;

    v2 = (void *)*((_QWORD *)this + 4);
  }
  return v2;
}

uint64_t std::optional<std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v9;

  if (!*(_BYTE *)(a1 + 32))
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a1 + 24) = 3;
    *(_BYTE *)(a1 + 32) = 1;
    return a1;
  }
  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 == -1)
  {
LABEL_9:
    *(_DWORD *)(a1 + 24) = -1;
    v7 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v7;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a1 + 24) = 3;
    return a1;
  }
  if ((_DWORD)v4 != 3)
  {
    ((void (*)(char *, uint64_t))off_1E5B65528[v4])(&v9, a1);
    goto LABEL_9;
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E5B65528[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t std::variant<long long,float,BOOL,std::string,std::shared_ptr<ML3CPPData>>::operator=[abi:ne180100]<long long,0,long long,0ul,0>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4 == -1)
    goto LABEL_5;
  if ((_DWORD)v4)
  {
    ((void (*)(char *, uint64_t))off_1E5B65528[v4])(&v6, a1);
LABEL_5:
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 24) = 0;
    return a1;
  }
  *(_QWORD *)a1 = *a2;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJxfbSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJxfbNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrI10ML3CPPDataEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJxfbSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](a2);
}

id ML3ContainerBaseDatabaseImportDataSource::identityPropertyForSource(ML3ContainerBaseDatabaseImportDataSource *this, uint64_t a2)
{
  return ML3ContainerRulesIdentityPropertyForSource(a2);
}

id ML3ContainerBaseDatabaseImportDataSource::generateVTableInsertionFromClause(ML3ContainerBaseDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  NSString *v4;
  NSString *v5;
  void *v6;

  v4 = a2;
  v5 = a3;
  if (-[NSString isEqualToString:](v4, "isEqualToString:", CFSTR("container")))
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ LEFT OUTER JOIN container ON %@.ROWID = container.container_pid"), v5, v5);
  else
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ LEFT OUTER JOIN container ON %@.ROWID = container.container_pid LEFT OUTER JOIN %@ ON %@.ROWID = %@.container_pid"), v5, v5, v4, v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1AC22F688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id ML3CollectionBaseDatabaseImportDataSource::generateVTableInsertionFromClause(ML3CollectionBaseDatabaseImportDataSource *this, NSString *a2, NSString *a3)
{
  NSString *v4;
  NSString *v5;
  void *v6;
  _BOOL4 v7;
  const __CFString *v8;
  void *v9;

  v4 = a2;
  v5 = a3;
  v6 = (void *)MEMORY[0x1E0CB3940];
  v7 = -[NSString isEqualToString:](v4, "isEqualToString:", CFSTR("genre"));
  v8 = CFSTR("_pid");
  if (v7)
    v8 = CFSTR("_id");
  objc_msgSend(v6, "stringWithFormat:", CFSTR("%@ LEFT OUTER JOIN %@ ON %@.ROWID = %@.%@%@"), v5, v4, v5, v4, v4, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_1AC22F738(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ML3DatabaseImportDataSource::setImportItems(_QWORD *a1, uint64_t **a2)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = (uint64_t)(a1 + 6);
  if ((uint64_t **)result != a2)
  {
    v5 = *a2;
    v4 = a2[1];
    v6 = (char *)v4 - (char *)*a2;
    v7 = v6 >> 4;
    v8 = (uint64_t *)a1[6];
    if (v6 >> 4 <= (unint64_t)((uint64_t)(a1[8] - (_QWORD)v8) >> 4))
    {
      result = a1[7];
      v16 = (result - (uint64_t)v8) >> 4;
      if (v16 >= v7)
      {
        if (v5 != v4)
        {
          do
          {
            v24 = *v5;
            v25 = v5[1];
            v5 += 2;
            std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v8, v24, v25);
            v8 += 2;
          }
          while (v5 != v4);
          result = a1[7];
        }
        while ((uint64_t *)result != v8)
          result = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](result - 16);
        a1[7] = v8;
      }
      else
      {
        v17 = &v5[2 * v16];
        if ((uint64_t *)result != v8)
        {
          do
          {
            v18 = *v5;
            v19 = v5[1];
            v5 += 2;
            result = (uint64_t)std::shared_ptr<ML3CPP::Element>::operator=[abi:ne180100](v8, v18, v19);
            v8 += 2;
          }
          while (v5 != v17);
          v8 = (uint64_t *)a1[7];
        }
        v20 = v8;
        if (v17 != v4)
        {
          v20 = v8;
          do
          {
            v21 = v17[1];
            *v20 = *v17;
            v20[1] = v21;
            if (v21)
            {
              v22 = (unint64_t *)(v21 + 8);
              do
                v23 = __ldxr(v22);
              while (__stxr(v23 + 1, v22));
            }
            v17 += 2;
            v20 += 2;
          }
          while (v17 != v4);
        }
        a1[7] = v20;
      }
    }
    else
    {
      std::vector<std::shared_ptr<ML3ImportItem>>::__vdeallocate((void **)result);
      if (v6 < 0)
        goto LABEL_35;
      v9 = a1[8] - a1[6];
      v10 = v9 >> 3;
      if (v9 >> 3 <= v7)
        v10 = v6 >> 4;
      v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
      if (v11 >> 60)
LABEL_35:
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v11);
      a1[6] = result;
      a1[7] = result;
      a1[8] = result + 16 * v12;
      while (v5 != v4)
      {
        v13 = v5[1];
        *(_QWORD *)result = *v5;
        *(_QWORD *)(result + 8) = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v5 += 2;
        result += 16;
      }
      a1[7] = result;
    }
  }
  return result;
}

void std::vector<std::shared_ptr<ML3ImportItem>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t (*ML3MigrationFunctionForLibraryVersion(int a1))(void *a1, void *a2)
{
  uint64_t (*result)(void *, void *);
  BOOL v3;
  uint64_t (*v4)(void *, void *);

  result = 0;
  if (a1 > 1280269)
  {
    if (a1 > 1710029)
    {
      if (a1 <= 2050059)
      {
        if (a1 <= 1910009)
        {
          if (a1 <= 1799999)
          {
            if (a1 > 1710059)
            {
              if (a1 > 1749999)
              {
                if (a1 == 1750000)
                  return ML3MigrationFunction1750000to1770000;
                v3 = a1 == 1770000;
                v4 = ML3MigrationFunction1770000to1800000;
              }
              else
              {
                if (a1 == 1710060)
                  return ML3MigrationFunction1710060to1710061;
                v3 = a1 == 1710061;
                v4 = ML3MigrationFunction1710061to1750000;
              }
            }
            else if (a1 > 1710049)
            {
              if (a1 == 1710050)
                return ML3MigrationFunction1710050to1710051;
              v3 = a1 == 1710051;
              v4 = ML3MigrationFunction1710051to1710060;
            }
            else
            {
              if (a1 == 1710030)
                return ML3MigrationFunction1710030to1710040;
              v3 = a1 == 1710040;
              v4 = ML3MigrationFunction1710040to1710050;
            }
          }
          else if (a1 <= 1850019)
          {
            if (a1 > 1849999)
            {
              if (a1 == 1850000)
                return ML3MigrationFunction1850000to1850010;
              v3 = a1 == 1850010;
              v4 = ML3MigrationFunction1850010to1850020;
            }
            else
            {
              if (a1 == 1800000)
                return ML3MigrationFunction1800000to1810000;
              v3 = a1 == 1810000;
              v4 = ML3MigrationFunction1810000to1850000;
            }
          }
          else
          {
            if (a1 > 1850039)
            {
              switch(a1)
              {
                case 1850040:
                  return ML3MigrationFunction1850040to1850050;
                case 1850050:
                  return ML3MigrationFunction1850050to1910000;
                case 1910000:
                  return ML3MigrationFunction1910000to1910010;
              }
              return result;
            }
            if (a1 == 1850020)
              return ML3MigrationFunction1850020to1850030;
            v3 = a1 == 1850030;
            v4 = ML3MigrationFunction1850030to1850040;
          }
        }
        else if (a1 > 2000009)
        {
          if (a1 <= 2050009)
          {
            if (a1 > 2029999)
            {
              if (a1 == 2030000)
                return ML3MigrationFunction2030000to2050000;
              v3 = a1 == 2050000;
              v4 = ML3MigrationFunction2050000to2050010;
            }
            else
            {
              if (a1 == 2000010)
                return ML3MigrationFunction2000010to2000020;
              v3 = a1 == 2000020;
              v4 = ML3MigrationFunction2000020to2030000;
            }
          }
          else
          {
            if (a1 > 2050029)
            {
              switch(a1)
              {
                case 2050030:
                  return ML3MigrationFunction2050030to2050040;
                case 2050040:
                  return ML3MigrationFunction2050040to2050050;
                case 2050050:
                  return ML3MigrationFunction2050050to2050060;
              }
              return result;
            }
            if (a1 == 2050010)
              return ML3MigrationFunction2050010to2050020;
            v3 = a1 == 2050020;
            v4 = ML3MigrationFunction2050020to2050030;
          }
        }
        else if (a1 <= 1950009)
        {
          if (a1 > 1910029)
          {
            if (a1 == 1910030)
              return ML3MigrationFunction1910030to1950000;
            v3 = a1 == 1950000;
            v4 = ML3MigrationFunction1950000to1950010;
          }
          else
          {
            if (a1 == 1910010)
              return ML3MigrationFunction1910010to1910020;
            v3 = a1 == 1910020;
            v4 = ML3MigrationFunction1910020to1910030;
          }
        }
        else
        {
          if (a1 > 1950029)
          {
            switch(a1)
            {
              case 1950030:
                return ML3MigrationFunction1950030to1950040;
              case 1950040:
                return ML3MigrationFunction1950040to2000000;
              case 2000000:
                return ML3MigrationFunction2000000to2000010;
            }
            return result;
          }
          if (a1 == 1950010)
            return ML3MigrationFunction1950010to1950020;
          v3 = a1 == 1950020;
          v4 = ML3MigrationFunction1950020to1950030;
        }
      }
      else if (a1 > 2100149)
      {
        if (a1 > 2149999)
        {
          if (a1 <= 2200019)
          {
            if (a1 > 2199999)
            {
              if (a1 == 2200000)
                return ML3MigrationFunction2200000to2200010;
              v3 = a1 == 2200010;
              v4 = ML3MigrationFunction2200010to2200020;
            }
            else
            {
              if (a1 == 2150000)
                return ML3MigrationFunction2150000to2160000;
              v3 = a1 == 2160000;
              v4 = ML3MigrationFunction2160000to2200000;
            }
          }
          else
          {
            if (a1 > 2200039)
            {
              switch(a1)
              {
                case 2200040:
                  return ML3MigrationFunction2200040to2200050;
                case 2200050:
                  return ML3MigrationFunction2200050to2200060;
                case 2200060:
                  return ML3MigrationFunction2200060to2200070;
              }
              return result;
            }
            if (a1 == 2200020)
              return ML3MigrationFunction2200020to2200030;
            v3 = a1 == 2200030;
            v4 = ML3MigrationFunction2200030to2200040;
          }
        }
        else if (a1 <= 2120019)
        {
          if (a1 > 2119999)
          {
            if (a1 == 2120000)
              return ML3MigrationFunction2120000to2120010;
            v3 = a1 == 2120010;
            v4 = ML3MigrationFunction2120010to2120020;
          }
          else
          {
            if (a1 == 2100150)
              return ML3MigrationFunction2100150to2110000;
            v3 = a1 == 2110000;
            v4 = ML3MigrationFunction2110000to2120000;
          }
        }
        else
        {
          if (a1 > 2120039)
          {
            switch(a1)
            {
              case 2120040:
                return ML3MigrationFunction2120040to2120050;
              case 2120050:
                return ML3MigrationFunction2120050to2120060;
              case 2120060:
                return ML3MigrationFunction2120060to2150000;
            }
            return result;
          }
          if (a1 == 2120020)
            return ML3MigrationFunction2120020to2120030;
          v3 = a1 == 2120030;
          v4 = ML3MigrationFunction2120030to2120040;
        }
      }
      else if (a1 > 2100059)
      {
        if (a1 <= 2100099)
        {
          if (a1 > 2100079)
          {
            if (a1 == 2100080)
              return ML3MigrationFunction2100080to2100090;
            v3 = a1 == 2100090;
            v4 = ML3MigrationFunction2100090to2100100;
          }
          else
          {
            if (a1 == 2100060)
              return ML3MigrationFunction2100060to2100070;
            v3 = a1 == 2100070;
            v4 = ML3MigrationFunction2100070to2100080;
          }
        }
        else
        {
          if (a1 > 2100119)
          {
            switch(a1)
            {
              case 2100120:
                return ML3MigrationFunction2100120to2100130;
              case 2100130:
                return ML3MigrationFunction2100130to2100140;
              case 2100140:
                return ML3MigrationFunction2100140to2100150;
            }
            return result;
          }
          if (a1 == 2100100)
            return ML3MigrationFunction2100100to2100110;
          v3 = a1 == 2100110;
          v4 = ML3MigrationFunction2100110to2100120;
        }
      }
      else if (a1 <= 2100009)
      {
        if (a1 > 2050079)
        {
          if (a1 == 2050080)
            return ML3MigrationFunction2050080to2100000;
          v3 = a1 == 2100000;
          v4 = ML3MigrationFunction2100000to2100010;
        }
        else
        {
          if (a1 == 2050060)
            return ML3MigrationFunction2050060to2050070;
          v3 = a1 == 2050070;
          v4 = ML3MigrationFunction2050070to2050080;
        }
      }
      else
      {
        if (a1 > 2100029)
        {
          switch(a1)
          {
            case 2100030:
              return ML3MigrationFunction2100030to2100040;
            case 2100040:
              return ML3MigrationFunction2100040to2100050;
            case 2100050:
              return ML3MigrationFunction2100050to2100060;
          }
          return result;
        }
        if (a1 == 2100010)
          return ML3MigrationFunction2100010to2100020;
        v3 = a1 == 2100020;
        v4 = ML3MigrationFunction2100020to2100030;
      }
    }
    else if (a1 <= 1410149)
    {
      if (a1 <= 1350059)
      {
        if (a1 <= 1319999)
        {
          if (a1 > 1310019)
          {
            if (a1 > 1310039)
            {
              if (a1 == 1310040)
                return ML3MigrationFunction1310040to1310050;
              v3 = a1 == 1310050;
              v4 = ML3MigrationFunction1310050to1320000;
            }
            else
            {
              if (a1 == 1310020)
                return ML3MigrationFunction1310020to1310030;
              v3 = a1 == 1310030;
              v4 = ML3MigrationFunction1310030to1310040;
            }
          }
          else if (a1 > 1289999)
          {
            if (a1 == 1290000)
              return ML3MigrationFunction1290000to1290010;
            v3 = a1 == 1290010;
            v4 = ML3MigrationFunction1290010to1310020;
          }
          else
          {
            if (a1 == 1280270)
              return ML3MigrationFunction1280270to1280280;
            v3 = a1 == 1280280;
            v4 = ML3MigrationFunction1280280to1290000;
          }
        }
        else if (a1 <= 1350009)
        {
          if (a1 > 1330009)
          {
            if (a1 == 1330010)
              return ML3MigrationFunction1330010to1350010;
            v3 = a1 == 1350000;
            v4 = ML3MigrationFunction1350000to1350010;
          }
          else
          {
            if (a1 == 1320000)
              return ML3MigrationFunction1320000to1330000;
            v3 = a1 == 1330000;
            v4 = ML3MigrationFunction1330000to1330010;
          }
        }
        else
        {
          if (a1 > 1350029)
          {
            switch(a1)
            {
              case 1350030:
                return ML3MigrationFunction1350030to1350040;
              case 1350040:
                return ML3MigrationFunction1350040to1350050;
              case 1350050:
                return ML3MigrationFunction1350050to1350060;
            }
            return result;
          }
          if (a1 == 1350010)
            return ML3MigrationFunction1350010to1350020;
          v3 = a1 == 1350020;
          v4 = ML3MigrationFunction1350020to1350030;
        }
      }
      else if (a1 > 1410059)
      {
        if (a1 <= 1410099)
        {
          if (a1 > 1410079)
          {
            if (a1 == 1410080)
              return ML3MigrationFunction1410080to1410090;
            v3 = a1 == 1410090;
            v4 = ML3MigrationFunction1410090to1410100;
          }
          else
          {
            if (a1 == 1410060)
              return ML3MigrationFunction1410060to1410070;
            v3 = a1 == 1410070;
            v4 = ML3MigrationFunction1410070to1410080;
          }
        }
        else
        {
          if (a1 > 1410119)
          {
            switch(a1)
            {
              case 1410120:
                return ML3MigrationFunction1410120to1410130;
              case 1410130:
                return ML3MigrationFunction1410130to1410140;
              case 1410140:
                return ML3MigrationFunction1410140to1410150;
            }
            return result;
          }
          if (a1 == 1410100)
            return ML3MigrationFunction1410100to1410110;
          v3 = a1 == 1410110;
          v4 = ML3MigrationFunction1410110to1410120;
        }
      }
      else if (a1 <= 1410009)
      {
        if (a1 > 1360009)
        {
          if (a1 == 1360010)
            return ML3MigrationFunction1360010to1410000;
          v3 = a1 == 1410000;
          v4 = ML3MigrationFunction1410000to1410010;
        }
        else
        {
          if (a1 == 1350060)
            return ML3MigrationFunction1350060to1360000;
          v3 = a1 == 1360000;
          v4 = ML3MigrationFunction1360000to1360010;
        }
      }
      else
      {
        if (a1 > 1410029)
        {
          switch(a1)
          {
            case 1410030:
              return ML3MigrationFunction1410030to1410040;
            case 1410040:
              return ML3MigrationFunction1410040to1410050;
            case 1410050:
              return ML3MigrationFunction1410050to1410060;
          }
          return result;
        }
        if (a1 == 1410010)
          return ML3MigrationFunction1410010to1410020;
        v3 = a1 == 1410020;
        v4 = ML3MigrationFunction1410020to1410030;
      }
    }
    else if (a1 > 1509999)
    {
      if (a1 > 1550009)
      {
        if (a1 <= 1610019)
        {
          if (a1 > 1609999)
          {
            if (a1 == 1610000)
              return ML3MigrationFunction1610000to1610010;
            v3 = a1 == 1610010;
            v4 = ML3MigrationFunction1610010to1610020;
          }
          else
          {
            if (a1 == 1550010)
              return ML3MigrationFunction1550010to1560000;
            v3 = a1 == 1560000;
            v4 = ML3MigrationFunction1560000to1610000;
          }
        }
        else
        {
          if (a1 > 1709999)
          {
            switch(a1)
            {
              case 1710000:
                return ML3MigrationFunction1710000to1710010;
              case 1710010:
                return ML3MigrationFunction1710010to1710020;
              case 1710020:
                return ML3MigrationFunction1710020to1710030;
            }
            return result;
          }
          if (a1 == 1610020)
            return ML3MigrationFunction1610020to1610030;
          v3 = a1 == 1610030;
          v4 = ML3MigrationFunction1610030to1710000;
        }
      }
      else if (a1 <= 1510039)
      {
        if (a1 > 1510019)
        {
          if (a1 == 1510020)
            return ML3MigrationFunction1510020to1510030;
          v3 = a1 == 1510030;
          v4 = ML3MigrationFunction1510030to1510040;
        }
        else
        {
          if (a1 == 1510000)
            return ML3MigrationFunction1510000to1510010;
          v3 = a1 == 1510010;
          v4 = ML3MigrationFunction1510010to1510020;
        }
      }
      else
      {
        if (a1 > 1510059)
        {
          switch(a1)
          {
            case 1510060:
              return ML3MigrationFunction1510060to1510070;
            case 1510070:
              return ML3MigrationFunction1510070to1550000;
            case 1550000:
              return ML3MigrationFunction1550000to1550010;
          }
          return result;
        }
        if (a1 == 1510040)
          return ML3MigrationFunction1510040to1510050;
        v3 = a1 == 1510050;
        v4 = ML3MigrationFunction1510050to1510060;
      }
    }
    else if (a1 > 1450009)
    {
      if (a1 <= 1450049)
      {
        if (a1 > 1450029)
        {
          if (a1 == 1450030)
            return ML3MigrationFunction1450030to1450040;
          v3 = a1 == 1450040;
          v4 = ML3MigrationFunction1450040to1450050;
        }
        else
        {
          if (a1 == 1450010)
            return ML3MigrationFunction1450010to1450020;
          v3 = a1 == 1450020;
          v4 = ML3MigrationFunction1450020to1450030;
        }
      }
      else
      {
        if (a1 > 1450069)
        {
          switch(a1)
          {
            case 1450070:
              return ML3MigrationFunction1450070to1450080;
            case 1450080:
              return ML3MigrationFunction1450080to1450090;
            case 1450090:
              return ML3MigrationFunction1450090to1510000;
          }
          return result;
        }
        if (a1 == 1450050)
          return ML3MigrationFunction1450050to1450060;
        v3 = a1 == 1450060;
        v4 = ML3MigrationFunction1450060to1450070;
      }
    }
    else if (a1 <= 1410189)
    {
      if (a1 > 1410169)
      {
        if (a1 == 1410170)
          return ML3MigrationFunction1410170to1410180;
        v3 = a1 == 1410180;
        v4 = ML3MigrationFunction1410180to1410190;
      }
      else
      {
        if (a1 == 1410150)
          return ML3MigrationFunction1410150to1410160;
        v3 = a1 == 1410160;
        v4 = ML3MigrationFunction1410160to1410170;
      }
    }
    else
    {
      if (a1 > 1410209)
      {
        switch(a1)
        {
          case 1410210:
            return ML3MigrationFunction1410210to1430000;
          case 1430000:
            return ML3MigrationFunction1430000to1450000;
          case 1450000:
            return ML3MigrationFunction1450000to1450010;
        }
        return result;
      }
      if (a1 == 1410190)
        return ML3MigrationFunction1410190to1410200;
      v3 = a1 == 1410200;
      v4 = ML3MigrationFunction1410200to1410210;
    }
LABEL_431:
    if (v3)
      return v4;
    else
      return 0;
  }
  if (a1 > 1150019)
  {
    if (a1 <= 1162109)
    {
      if (a1 <= 1160089)
      {
        if (a1 <= 1159999)
        {
          if (a1 > 1150059)
          {
            if (a1 > 1150079)
            {
              if (a1 == 1150080)
                return ML3MigrationFunction1150080to1150090;
              v3 = a1 == 1150090;
              v4 = ML3MigrationFunction1150090to1160000;
            }
            else
            {
              if (a1 == 1150060)
                return ML3MigrationFunction1150060to1150070;
              v3 = a1 == 1150070;
              v4 = ML3MigrationFunction1150070to1150080;
            }
          }
          else if (a1 > 1150039)
          {
            if (a1 == 1150040)
              return ML3MigrationFunction1150040to1150050;
            v3 = a1 == 1150050;
            v4 = ML3MigrationFunction1150050to1150060;
          }
          else
          {
            if (a1 == 1150020)
              return ML3MigrationFunction1150020to1150030;
            v3 = a1 == 1150030;
            v4 = ML3MigrationFunction1150030to1150040;
          }
        }
        else if (a1 <= 1160039)
        {
          if (a1 > 1160019)
          {
            if (a1 == 1160020)
              return ML3MigrationFunction1160020to1160030;
            v3 = a1 == 1160030;
            v4 = ML3MigrationFunction1160030to1160040;
          }
          else
          {
            if (a1 == 1160000)
              return ML3MigrationFunction1160000to1160010;
            v3 = a1 == 1160010;
            v4 = ML3MigrationFunction1160010to1160020;
          }
        }
        else
        {
          if (a1 > 1160059)
          {
            switch(a1)
            {
              case 1160060:
                return ML3MigrationFunction1160060to1160070;
              case 1160070:
                return ML3MigrationFunction1160070to1160080;
              case 1160080:
                return ML3MigrationFunction1160080to1160090;
            }
            return result;
          }
          if (a1 == 1160040)
            return ML3MigrationFunction1160040to1160050;
          v3 = a1 == 1160050;
          v4 = ML3MigrationFunction1160050to1160060;
        }
      }
      else if (a1 > 1162019)
      {
        if (a1 <= 1162059)
        {
          if (a1 > 1162039)
          {
            if (a1 == 1162040)
              return ML3MigrationFunction1162040to1162050;
            v3 = a1 == 1162050;
            v4 = ML3MigrationFunction1162050to1162060;
          }
          else
          {
            if (a1 == 1162020)
              return ML3MigrationFunction1162020to1162030;
            v3 = a1 == 1162030;
            v4 = ML3MigrationFunction1162030to1162040;
          }
        }
        else
        {
          if (a1 > 1162079)
          {
            switch(a1)
            {
              case 1162080:
                return ML3MigrationFunction1162080to1162090;
              case 1162090:
                return ML3MigrationFunction1162090to1162100;
              case 1162100:
                return ML3MigrationFunction1162100to1162110;
            }
            return result;
          }
          if (a1 == 1162060)
            return ML3MigrationFunction1162060to1162070;
          v3 = a1 == 1162070;
          v4 = ML3MigrationFunction1162070to1162080;
        }
      }
      else if (a1 <= 1160129)
      {
        if (a1 > 1160109)
        {
          if (a1 == 1160110)
            return ML3MigrationFunction1160110to1160120;
          v3 = a1 == 1160120;
          v4 = ML3MigrationFunction1160120to1160130;
        }
        else
        {
          if (a1 == 1160090)
            return ML3MigrationFunction1160090to1160100;
          v3 = a1 == 1160100;
          v4 = ML3MigrationFunction1160100to1160110;
        }
      }
      else
      {
        if (a1 > 1160149)
        {
          switch(a1)
          {
            case 1160150:
              return ML3MigrationFunction1160150to1160160;
            case 1160160:
              return ML3MigrationFunction1160160to1162010;
            case 1162010:
              return ML3MigrationFunction1162010to1162020;
          }
          return result;
        }
        if (a1 == 1160130)
          return ML3MigrationFunction1160130to1160140;
        v3 = a1 == 1160140;
        v4 = ML3MigrationFunction1160140to1160150;
      }
    }
    else if (a1 > 1280089)
    {
      if (a1 > 1280179)
      {
        if (a1 <= 1280219)
        {
          if (a1 > 1280199)
          {
            if (a1 == 1280200)
              return ML3MigrationFunction1280200to1280210;
            v3 = a1 == 1280210;
            v4 = ML3MigrationFunction1280210to1280220;
          }
          else
          {
            if (a1 == 1280180)
              return ML3MigrationFunction1280180to1280190;
            v3 = a1 == 1280190;
            v4 = ML3MigrationFunction1280190to1280200;
          }
        }
        else
        {
          if (a1 > 1280239)
          {
            switch(a1)
            {
              case 1280240:
                return ML3MigrationFunction1280240to1280250;
              case 1280250:
                return ML3MigrationFunction1280250to1280260;
              case 1280260:
                return ML3MigrationFunction1280260to1280270;
            }
            return result;
          }
          if (a1 == 1280220)
            return ML3MigrationFunction1280220to1280230;
          v3 = a1 == 1280230;
          v4 = ML3MigrationFunction1280230to1280240;
        }
      }
      else if (a1 <= 1280129)
      {
        if (a1 > 1280109)
        {
          if (a1 == 1280110)
            return ML3MigrationFunction1280110to1280120;
          v3 = a1 == 1280120;
          v4 = ML3MigrationFunction1280120to1280130;
        }
        else
        {
          if (a1 == 1280090)
            return ML3MigrationFunction1280090to1280100;
          v3 = a1 == 1280100;
          v4 = ML3MigrationFunction1280100to1280110;
        }
      }
      else
      {
        if (a1 > 1280149)
        {
          switch(a1)
          {
            case 1280150:
              return ML3MigrationFunction1280150to1280160;
            case 1280160:
              return ML3MigrationFunction1280160to1280170;
            case 1280170:
              return ML3MigrationFunction1280170to1280180;
          }
          return result;
        }
        if (a1 == 1280130)
          return ML3MigrationFunction1280130to1280140;
        v3 = a1 == 1280140;
        v4 = ML3MigrationFunction1280140to1280150;
      }
    }
    else if (a1 > 1279999)
    {
      if (a1 <= 1280039)
      {
        if (a1 > 1280019)
        {
          if (a1 == 1280020)
            return ML3MigrationFunction1280020to1280030;
          v3 = a1 == 1280030;
          v4 = ML3MigrationFunction1280030to1280040;
        }
        else
        {
          if (a1 == 1280000)
            return ML3MigrationFunction1280000to1280010;
          v3 = a1 == 1280010;
          v4 = ML3MigrationFunction1280010to1280020;
        }
      }
      else
      {
        if (a1 > 1280059)
        {
          switch(a1)
          {
            case 1280060:
              return ML3MigrationFunction1280060to1280070;
            case 1280070:
              return ML3MigrationFunction1280070to1280080;
            case 1280080:
              return ML3MigrationFunction1280080to1280090;
          }
          return result;
        }
        if (a1 == 1280040)
          return ML3MigrationFunction1280040to1280050;
        v3 = a1 == 1280050;
        v4 = ML3MigrationFunction1280050to1280060;
      }
    }
    else if (a1 <= 1240009)
    {
      if (a1 > 1164009)
      {
        if (a1 == 1164010)
          return ML3MigrationFunction1164010to1240000;
        v3 = a1 == 1240000;
        v4 = ML3MigrationFunction1240000to1240010;
      }
      else
      {
        if (a1 == 1162110)
          return ML3MigrationFunction1162110to1240000;
        v3 = a1 == 1163070;
        v4 = ML3MigrationFunction1163070to1164010;
      }
    }
    else
    {
      if (a1 > 1240029)
      {
        switch(a1)
        {
          case 1240030:
            return ML3MigrationFunction1240030to1240040;
          case 1240040:
            return ML3MigrationFunction1240040to1260000;
          case 1260000:
            return ML3MigrationFunction1260000to1280000;
        }
        return result;
      }
      if (a1 == 1240010)
        return ML3MigrationFunction1240010to1240020;
      v3 = a1 == 1240020;
      v4 = ML3MigrationFunction1240020to1240030;
    }
    goto LABEL_431;
  }
  if (a1 <= 1114939)
  {
    if (a1 <= 1046931)
    {
      if (a1 <= 1006188)
      {
        if (a1 > 1002979)
        {
          if (a1 > 1003963)
          {
            if (a1 == 1003964)
              return ML3MigrationFunction1003964to1005492;
            v3 = a1 == 1005492;
            v4 = ML3MigrationFunction1005492to1006189;
          }
          else
          {
            if (a1 == 1002980)
              return ML3MigrationFunction1002980to1003342;
            v3 = a1 == 1003342;
            v4 = ML3MigrationFunction1003342to1003964;
          }
        }
        else if (a1 > 992141)
        {
          if (a1 == 992142)
            return ML3MigrationFunction992142to1002980;
          v3 = a1 == 1002402;
          v4 = ML3MigrationFunction1002402to1002980;
        }
        else
        {
          if (a1 == 992140)
            return ML3MigrationFunction992140to992141;
          v3 = a1 == 992141;
          v4 = ML3MigrationFunction992141to992142;
        }
      }
      else if (a1 <= 1016426)
      {
        if (a1 > 1011334)
        {
          if (a1 == 1011335)
            return ML3MigrationFunction1011335to1015139;
          v3 = a1 == 1015139;
          v4 = ML3MigrationFunction1015139to1016427;
        }
        else
        {
          if (a1 == 1006189)
            return ML3MigrationFunction1006189to1007541;
          v3 = a1 == 1007541;
          v4 = ML3MigrationFunction1007541to1011335;
        }
      }
      else
      {
        if (a1 > 1026200)
        {
          switch(a1)
          {
            case 1026201:
              return ML3MigrationFunction1026201to1028771;
            case 1028771:
              return ML3MigrationFunction1028771to1033275;
            case 1033275:
              return ML3MigrationFunction1033275to1046932;
          }
          return result;
        }
        if (a1 == 1016427)
          return ML3MigrationFunction1016427to1021756;
        v3 = a1 == 1021756;
        v4 = ML3MigrationFunction1021756to1026201;
      }
    }
    else if (a1 > 1062999)
    {
      if (a1 <= 1108290)
      {
        if (a1 > 1096157)
        {
          if (a1 == 1096158)
            return ML3MigrationFunction1096158to1102819;
          v3 = a1 == 1102819;
          v4 = ML3MigrationFunction1102819to1108291;
        }
        else
        {
          if (a1 == 1063000)
            return ML3MigrationFunction1063000to1079529;
          v3 = a1 == 1079529;
          v4 = ML3MigrationFunction1079529to1096158;
        }
      }
      else
      {
        if (a1 > 1111152)
        {
          switch(a1)
          {
            case 1111153:
              return ML3MigrationFunction1111153to1113775;
            case 1113775:
              return ML3MigrationFunction1113775to1114502;
            case 1114502:
              return ML3MigrationFunction1114502to1114940;
          }
          return result;
        }
        if (a1 == 1108291)
          return ML3MigrationFunction1108291to1111152;
        v3 = a1 == 1111152;
        v4 = ML3MigrationFunction1111152to1111153;
      }
    }
    else if (a1 <= 1058984)
    {
      if (a1 > 1053826)
      {
        if (a1 == 1053827)
          return ML3MigrationFunction1053827to1055456;
        v3 = a1 == 1055456;
        v4 = ML3MigrationFunction1055456to1058985;
      }
      else
      {
        if (a1 == 1046932)
          return ML3MigrationFunction1046932to1050919;
        v3 = a1 == 1050919;
        v4 = ML3MigrationFunction1050919to1053827;
      }
    }
    else
    {
      if (a1 > 1061158)
      {
        switch(a1)
        {
          case 1061159:
            return ML3MigrationFunction1061159to1061350;
          case 1061350:
            return ML3MigrationFunction1061350to1062137;
          case 1062137:
            return ML3MigrationFunction1062137to1063000;
        }
        return result;
      }
      if (a1 == 1058985)
        return ML3MigrationFunction1058985to1061040;
      v3 = a1 == 1061040;
      v4 = ML3MigrationFunction1061040to1061159;
    }
    goto LABEL_431;
  }
  if (a1 > 1140139)
  {
    if (a1 > 1140229)
    {
      if (a1 <= 1140299)
      {
        if (a1 > 1140249)
        {
          if (a1 == 1140250)
            return ML3MigrationFunction1140250to1140260;
          v3 = a1 == 1140260;
          v4 = ML3MigrationFunction1140260to1140300;
        }
        else
        {
          if (a1 == 1140230)
            return ML3MigrationFunction1140230to1140240;
          v3 = a1 == 1140240;
          v4 = ML3MigrationFunction1140240to1140250;
        }
      }
      else
      {
        if (a1 > 1140319)
        {
          switch(a1)
          {
            case 1140320:
              return ML3MigrationFunction1140320to1150000;
            case 1150000:
              return ML3MigrationFunction1150000to1150010;
            case 1150010:
              return ML3MigrationFunction1150010to1150020;
          }
          return result;
        }
        if (a1 == 1140300)
          return ML3MigrationFunction1140300to1140310;
        v3 = a1 == 1140310;
        v4 = ML3MigrationFunction1140310to1140320;
      }
    }
    else if (a1 <= 1140179)
    {
      if (a1 > 1140159)
      {
        if (a1 == 1140160)
          return ML3MigrationFunction1140160to1140170;
        v3 = a1 == 1140170;
        v4 = ML3MigrationFunction1140170to1140180;
      }
      else
      {
        if (a1 == 1140140)
          return ML3MigrationFunction1140140to1140150;
        v3 = a1 == 1140150;
        v4 = ML3MigrationFunction1140150to1140160;
      }
    }
    else
    {
      if (a1 > 1140199)
      {
        switch(a1)
        {
          case 1140200:
            return ML3MigrationFunction1140200to1140210;
          case 1140210:
            return ML3MigrationFunction1140210to1140230;
          case 1140220:
            return (uint64_t (*)(void *, void *))ML3MigrationFunction1140220to1140230;
        }
        return result;
      }
      if (a1 == 1140180)
        return ML3MigrationFunction1140180to1140190;
      v3 = a1 == 1140190;
      v4 = ML3MigrationFunction1140190to1140200;
    }
    goto LABEL_431;
  }
  if (a1 <= 1138218)
  {
    if (a1 <= 1120345)
    {
      if (a1 > 1115481)
      {
        if (a1 == 1115482)
          return ML3MigrationFunction1115482to1118969;
        v3 = a1 == 1118969;
        v4 = ML3MigrationFunction1118969to1120346;
      }
      else
      {
        if (a1 == 1114940)
          return ML3MigrationFunction1114940to1115195;
        v3 = a1 == 1115195;
        v4 = ML3MigrationFunction1115195to1115482;
      }
    }
    else
    {
      if (a1 > 1124263)
      {
        switch(a1)
        {
          case 1124264:
            return ML3MigrationFunction1124264to1132637;
          case 1132637:
            return ML3MigrationFunction1132637to1138219;
          case 1134019:
            return ML3MigrationFunction1134019to1138219;
        }
        return result;
      }
      if (a1 == 1120346)
        return ML3MigrationFunction1120346to1121591;
      v3 = a1 == 1121591;
      v4 = ML3MigrationFunction1121591to1124264;
    }
    goto LABEL_431;
  }
  switch(a1)
  {
    case 1140115:
      result = ML3MigrationFunction1140115to1140116;
      break;
    case 1140116:
      result = ML3MigrationFunction1140116to1140117;
      break;
    case 1140117:
      result = ML3MigrationFunction1140117to1140118;
      break;
    case 1140118:
      result = ML3MigrationFunction1140118to1140119;
      break;
    case 1140119:
      result = ML3MigrationFunction1140119to1140120;
      break;
    case 1140120:
      result = ML3MigrationFunction1140120to1140130;
      break;
    case 1140121:
    case 1140122:
    case 1140123:
    case 1140124:
    case 1140125:
    case 1140126:
    case 1140127:
    case 1140128:
    case 1140129:
      return result;
    case 1140130:
      result = ML3MigrationFunction1140130to1140140;
      break;
    default:
      if (a1 != 1138219)
      {
        v3 = a1 == 1138254;
        v4 = ML3MigrationFunction1138254to1140115;
        goto LABEL_431;
      }
      result = ML3MigrationFunction1138219to1138254;
      break;
  }
  return result;
}

uint64_t ML3MigrationFunction2200060to2200070(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToMarkArtworkPurgeable:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 2200070);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 2200070;"));
  return v5;
}

uint64_t ML3MigrationFunction2200050to2200060(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN store_canonical_id TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2200060);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2200060;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2200040to2200050(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 2200050);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 2200050;"));
  return v5;
}

uint64_t ML3MigrationFunction2200030to2200040(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  id v15;
  uint8_t buf[4];
  id v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "dateByAddingUnit:value:toDate:options:", 4, 2, v5, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "timeIntervalSinceReferenceDate");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0;
  v10 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("UPDATE container SET date_modified=(date_modified-978307200.0) WHERE is_owner=1 AND date_modified > ?"), v9, &v15);
  v11 = v15;

  if ((v10 & 1) != 0)
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2200040);
    v12 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2200040;"));
  }
  else
  {
    v13 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v17 = v11;
      _os_log_impl(&dword_1AC149000, v13, OS_LOG_TYPE_ERROR, "Failed to update date_modified for container table. error=%{public}@", buf, 0xCu);
    }

    v12 = 0;
  }

  return v12;
}

uint64_t ML3MigrationFunction2200020to2200030(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  __int128 v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  _QWORD v26[4];
  id v27;
  id v28;
  _QWORD *v29;
  _QWORD v30[4];
  uint8_t buf[4];
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v24 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_item ADD COLUMN occurrence_id TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v3, "executeQuery:", CFSTR("SELECT container_pid, container_item_pid, item_pid, subscription_store_item_id, cloud_universal_library_id, store_item_id, cloud_status, in_my_library, playback_endpoint_type FROM container_item LEFT OUTER JOIN item USING (item_pid) LEFT OUTER JOIN item_store USING (item_pid) ORDER BY container_pid, position"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3550], "set");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v30[0] = 0;
    v30[1] = v30;
    v30[2] = 0x2020000000;
    v30[3] = 0;
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __ML3MigrationFunction2200020to2200030_block_invoke;
    v26[3] = &unk_1E5B5C8C8;
    v29 = v30;
    v22 = v4;
    v27 = v22;
    v6 = v5;
    v28 = v6;
    objc_msgSend(v23, "enumerateRowsWithBlock:", v26);
    if (!objc_msgSend(v6, "count"))
      goto LABEL_19;
    if ((objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TEMPORARY TABLE container_item_temp (container_item_pid INTEGER NOT NULL, occurrence_id TEXT NOT NULL)")) & 1) == 0)goto LABEL_20;
    v7 = objc_msgSend(v6, "count");
    v8 = 0;
    *(_QWORD *)&v9 = 138412290;
    v21 = v9;
    while (v7 > v8)
    {
      v10 = (void *)MEMORY[0x1AF43CC0C]();
      if (v7 - v8 >= 5)
        v11 = 5;
      else
        v11 = v7 - v8;
      +[ML3DatabaseStatementRenderer defaultRenderer](ML3DatabaseStatementRenderer, "defaultRenderer", v21);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "statementWithPrefix:inParameterCount:valueCount:", CFSTR("INSERT INTO container_item_temp (container_item_pid, occurrence_id) VALUES"), 2, v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v6, "subarrayWithRange:", v8, v11);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "msv_flatMap:", &__block_literal_global_2023);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      v25 = 0;
      v16 = objc_msgSend(v3, "executeUpdate:withParameters:error:", v13, v15, &v25);
      v17 = v25;
      if ((v16 & 1) != 0)
      {
        v8 += v11;
      }
      else
      {
        v18 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v21;
          v32 = v17;
          _os_log_impl(&dword_1AC149000, v18, OS_LOG_TYPE_ERROR, "Encountered error backfilling container_item.occurrence_id. error=%@", buf, 0xCu);
        }

      }
      objc_autoreleasePoolPop(v10);
      if ((v16 & 1) == 0)
        goto LABEL_20;
    }
    if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container_item SET occurrence_id = (SELECT occurrence_id FROM container_item_temp WHERE container_item_temp.container_item_pid = container_item.container_item_pid)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container_item_temp")))
    {
LABEL_19:
      objc_msgSend(v24, "setCurrentUserVersion:", 2200030, v21);
      v19 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2200030;"));
    }
    else
    {
LABEL_20:
      v19 = 0;
    }

    _Block_object_dispose(v30, 8);
  }
  else
  {
    v19 = 0;
  }

  return v19;
}

void sub_1AC2324BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3MigrationFunction2200010to2200020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local INTEGER NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '', traits INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0, is_collaborative INTEGER NOT NULL DEFAULT 0, collaborator_invite_options INTEGER NOT NULL DEFAULT 0, collaborator_permissions INTEGER NOT NULL DEFAULT 0, collaboration_invitation_link TEXT NOT NULL DEFAULT '', cover_artwork_recipe TEXT NOT NULL DEFAULT '', collaboration_invitation_url_expiration_date INTEGER NOT NULL DEFAULT 0, collaboration_join_request_pending INTEGER NOT NULL DEFAULT 0, collaborator_status INTEGER NOT NULL DEFAULT 0)")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v13 = 0;
    v7 = "Failed to create continer_new table";
    v8 = (uint8_t *)&v13;
LABEL_14:
    _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    goto LABEL_15;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, traits, liked_state_changed_date, is_collaborative, collaborator_invite_options, collaborator_permissions, collaboration_invitation_link, cover_artwork_recipe, collaboration_invitation_url_expiration_date, collaboration_join_request_pending, collaborator_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, traits, liked_state_changed_date, is_collaborative, collaborator_invite_options, collaborator_permissions, collaboration_invitation_link, cover_artwork_recipe, collaboration_invitation_url_expiration_date, collaboration_join_request_pending, collaborator_status FROM container")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v12 = 0;
    v7 = "Failed to populate container table";
    v8 = (uint8_t *)&v12;
    goto LABEL_14;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v11 = 0;
    v7 = "Failed to drop container table";
    v8 = (uint8_t *)&v11;
    goto LABEL_14;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = 0;
      v7 = "Failed to rename container table";
      v8 = (uint8_t *)&v10;
      goto LABEL_14;
    }
LABEL_15:

    v5 = 0;
    goto LABEL_16;
  }
  objc_msgSend(v4, "setCurrentUserVersion:", 2200020);
  v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2200020;"));
LABEL_16:

  return v5;
}

uint64_t ML3MigrationFunction2200000to2200010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if ((ML3MigrationColumnExistsInTable(v3, CFSTR("position"), CFSTR("container_author")) & 1) != 0
    || objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_author ADD COLUMN position INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS ContainerAuthorPosition ON container_author (position ASC)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2200010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2200010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2160000to2200000(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  objc_msgSend(a2, "setCurrentUserVersion:", 2200000);
  v4 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2200000;"));

  return v4;
}

uint64_t ML3MigrationFunction2150000to2160000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToMarkArtworkPurgeable:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 2160000);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 2160000;"));
  return v5;
}

uint64_t ML3MigrationFunction2120060to2150000(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  id v15;
  uint8_t buf[4];
  id v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "dateByAddingUnit:value:toDate:options:", 4, 2, v5, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "timeIntervalSinceReferenceDate");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0;
  v10 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("UPDATE container SET date_modified=(date_modified-978307200.0) WHERE is_owner=1 AND date_modified > ?"), v9, &v15);
  v11 = v15;

  if ((v10 & 1) != 0)
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2150000);
    v12 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2150000;"));
  }
  else
  {
    v13 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v17 = v11;
      _os_log_impl(&dword_1AC149000, v13, OS_LOG_TYPE_ERROR, "Failed to update date_modified for container table. error=%{public}@", buf, 0xCu);
    }

    v12 = 0;
  }

  return v12;
}

uint64_t ML3MigrationFunction2120050to2120060(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToMarkArtworkPurgeable:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 2120060);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 2120060;"));
  return v5;
}

uint64_t ML3MigrationFunction2120040to2120050(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local INTEGER NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '', traits INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0, is_collaborative INTEGER NOT NULL DEFAULT 0, collaborator_invite_options INTEGER NOT NULL DEFAULT 0, collaborator_permissions INTEGER NOT NULL DEFAULT 0, collaboration_invitation_link TEXT NOT NULL DEFAULT '', cover_artwork_recipe TEXT NOT NULL DEFAULT '', collaboration_invitation_url_expiration_date INTEGER NOT NULL DEFAULT 0 ,collaboration_join_request_pending INTEGER NOT NULL DEFAULT 0 ,collaborator_status INTEGER NOT NULL DEFAULT 0)")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v13 = 0;
    v7 = "Failed to create continer_new table";
    v8 = (uint8_t *)&v13;
LABEL_14:
    _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    goto LABEL_15;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, traits, liked_state_changed_date, is_collaborative, collaborator_invite_options, collaborator_permissions, collaboration_invitation_link, cover_artwork_recipe, collaboration_invitation_url_expiration_date, collaboration_join_request_pending, collaborator_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, traits, liked_state_changed_date, is_collaborative, collaborator_invite_options, collaborator_permissions, collaboration_invitation_link, cover_artwork_recipe, collaboration_invitation_url_expiration_date, collaboration_join_request_pending, collaborator_status FROM container")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v12 = 0;
    v7 = "Failed to populate container table";
    v8 = (uint8_t *)&v12;
    goto LABEL_14;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v11 = 0;
    v7 = "Failed to drop container table";
    v8 = (uint8_t *)&v11;
    goto LABEL_14;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = 0;
      v7 = "Failed to rename container table";
      v8 = (uint8_t *)&v10;
      goto LABEL_14;
    }
LABEL_15:

    v5 = 0;
    goto LABEL_16;
  }
  objc_msgSend(v4, "setCurrentUserVersion:", 2120050);
  v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2120050;"));
LABEL_16:

  return v5;
}

uint64_t ML3MigrationFunction2120030to2120040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_author ADD COLUMN position INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS ContainerAuthorPosition ON container_author (position ASC)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2120040);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2120040;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2120020to2120030(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if ((ML3MigrationColumnExistsInTable(v3, CFSTR("collaborator_status"), CFSTR("container")) & 1) != 0
    || objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN collaborator_status INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2120030);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2120030;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2120010to2120020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToUpdateSortMap:", 1);
  objc_msgSend(v3, "setForceUpdateOriginals:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 2120020);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 2120020;"));
  return v5;
}

uint64_t ML3MigrationFunction2120000to2120010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN collaborator_status INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2120010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2120010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2110000to2120000(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  id *v12;
  char v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v19;
  _QWORD v20[5];
  id v21;
  uint64_t *v22;
  id v23;
  id obj;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  uint64_t v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("ManagedPurchases/Books"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = 0;
  v26 = &v25;
  v27 = 0x3032000000;
  v28 = __Block_byref_object_copy__1994;
  v29 = __Block_byref_object_dispose__1995;
  v30 = 0;
  v35[0] = &unk_1E5BAACB0;
  v35[1] = CFSTR("ManagedPurchases/Books");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v35, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (id *)(v26 + 5);
  obj = (id)v26[5];
  v8 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("INSERT INTO base_location (base_location_id, path) VALUES (?, ?)"), v6, &obj);
  objc_storeStrong(v7, obj);

  if ((v8 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "fileExistsAtPath:", v5);

    if ((v10 & 1) != 0
      || (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
          v11 = (void *)objc_claimAutoreleasedReturnValue(),
          v12 = (id *)(v26 + 5),
          v23 = (id)v26[5],
          v13 = objc_msgSend(v11, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v5, 1, 0, &v23), objc_storeStrong(v12, v23), v11, (v13 & 1) != 0))
    {
      objc_msgSend(v3, "executeQuery:withParameters:", CFSTR("SELECT item_pid, path, location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE (item.media_type & ? != 0) AND base_location_id = ? AND location != ''"), &unk_1E5BA8B38);
      v14 = objc_claimAutoreleasedReturnValue();
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __ML3MigrationFunction2110000to2120000_block_invoke;
      v20[3] = &unk_1E5B5C8C8;
      v20[4] = v5;
      v22 = &v25;
      v21 = v3;
      -[NSObject enumerateRowsWithBlock:](v14, "enumerateRowsWithBlock:", v20);

    }
    else
    {
      v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v19 = v26[5];
        *(_DWORD *)buf = 138412546;
        v32 = v5;
        v33 = 2112;
        v34 = v19;
        _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_ERROR, "Encountered error creating directory at path %@. error=%@", buf, 0x16u);
      }
    }

    objc_msgSend(v4, "setCurrentUserVersion:", 2120000);
    v15 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2120000;"));
  }
  else
  {
    v16 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = (void *)v26[5];
      *(_DWORD *)buf = 138412290;
      v32 = v17;
      _os_log_impl(&dword_1AC149000, v16, OS_LOG_TYPE_ERROR, "Error adding base_location_id=600 to base_location table: %@", buf, 0xCu);
    }

    v15 = 0;
  }
  _Block_object_dispose(&v25, 8);

  return v15;
}

void sub_1AC233190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3MigrationFunction2100150to2110000(void *a1, void *a2)
{
  id v3;
  id v4;
  char v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  id v10;
  uint8_t buf[4];
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist ADD COLUMN sort_order INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist ADD COLUMN sort_order_section INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album_artist SET sort_order = (SELECT album_artist_order FROM item WHERE item.item_pid=album_artist.representative_item_pid) WHERE album_artist.representative_item_pid != 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album_artist SET sort_order_section = (SELECT album_artist_order_section FROM item WHERE item.item_pid=album_artist.representative_item_pid) WHERE album_artist.representative_item_pid != 0")))
  {
    v10 = 0;
    v5 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("UPDATE album SET liked_state=? WHERE (liked_state=? AND NOT EXISTS (SELECT 1 FROM item WHERE in_my_library AND item.album_pid = album.album_pid))"), &unk_1E5BA8B20, &v10);
    v6 = v10;
    if ((v5 & 1) == 0)
    {
      v7 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v12 = v6;
        _os_log_impl(&dword_1AC149000, v7, OS_LOG_TYPE_ERROR, "Failed to patch up orphaned albums with incorrect liked_state. error=%{public}@", buf, 0xCu);
      }

    }
    objc_msgSend(v4, "setCurrentUserVersion:", 2110000);
    v8 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2110000;"));

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t ML3MigrationFunction2100140to2100150(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v3, "setNeedsToRecreateTriggers:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 2100150);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 2100150;"));
  return v5;
}

uint64_t ML3MigrationFunction2100130to2100140(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE person ADD COLUMN lightweight_profile INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2100140);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2100140;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100120to2100130(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN collaboration_invitation_url_expiration_date INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN collaboration_join_request_pending INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2100130);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2100130;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100110to2100120(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_author ADD COLUMN is_pending INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS ContainerAuthorRole ON container_author (role ASC)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS ContainerAuthorIsPending ON container_author (is_pending ASC)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2100120);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2100120;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100100to2100110(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  id *v12;
  char v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v19;
  _QWORD v20[5];
  id v21;
  uint64_t *v22;
  id v23;
  id obj;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  uint64_t v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("ManagedPurchases/TVApp"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = 0;
  v26 = &v25;
  v27 = 0x3032000000;
  v28 = __Block_byref_object_copy__1994;
  v29 = __Block_byref_object_dispose__1995;
  v30 = 0;
  v35[0] = &unk_1E5BAAC50;
  v35[1] = CFSTR("ManagedPurchases/TVApp");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v35, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (id *)(v26 + 5);
  obj = (id)v26[5];
  v8 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("INSERT INTO base_location (base_location_id, path) VALUES (?, ?)"), v6, &obj);
  objc_storeStrong(v7, obj);

  if ((v8 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "fileExistsAtPath:", v5);

    if ((v10 & 1) != 0
      || (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
          v11 = (void *)objc_claimAutoreleasedReturnValue(),
          v12 = (id *)(v26 + 5),
          v23 = (id)v26[5],
          v13 = objc_msgSend(v11, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v5, 1, 0, &v23), objc_storeStrong(v12, v23), v11, (v13 & 1) != 0))
    {
      objc_msgSend(v3, "executeQuery:withParameters:", CFSTR("SELECT item_pid, path, location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE ((item.media_type & (? | ?)) != 0) AND base_location_id = ? AND location != ''"), &unk_1E5BA8B08);
      v14 = objc_claimAutoreleasedReturnValue();
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __ML3MigrationFunction2100100to2100110_block_invoke;
      v20[3] = &unk_1E5B5C8C8;
      v20[4] = v5;
      v22 = &v25;
      v21 = v3;
      -[NSObject enumerateRowsWithBlock:](v14, "enumerateRowsWithBlock:", v20);

    }
    else
    {
      v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v19 = v26[5];
        *(_DWORD *)buf = 138412546;
        v32 = v5;
        v33 = 2112;
        v34 = v19;
        _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_ERROR, "Encountered error creating directory at path %@. error=%@", buf, 0x16u);
      }
    }

    objc_msgSend(v4, "setCurrentUserVersion:", 2100110);
    v15 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2100110;"));
  }
  else
  {
    v16 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = (void *)v26[5];
      *(_DWORD *)buf = 138412290;
      v32 = v17;
      _os_log_impl(&dword_1AC149000, v16, OS_LOG_TYPE_ERROR, "Error adding base_location_id=500 to base_location table: %@", buf, 0xCu);
    }

    v15 = 0;
  }
  _Block_object_dispose(&v25, 8);

  return v15;
}

void sub_1AC233898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3MigrationFunction2100090to2100100(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  int v13;
  NSObject *v14;
  char v15;
  uint64_t v16;
  uint8_t v18[8];
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;

  v3 = a1;
  v4 = a2;
  if (!MSVDeviceIsWatch())
    goto LABEL_12;
  v25 = 0;
  v26 = &v25;
  v27 = 0x2020000000;
  v28 = 1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("Music/Downloads"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "executeQuery:", CFSTR("SELECT item_pid, location FROM item JOIN item_extra USING(item_pid) WHERE base_location_id=300 AND (media_type & 8) != 0"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __ML3MigrationFunction2100090to2100100_block_invoke;
  v19[3] = &unk_1E5B5C8A0;
  v24 = &v25;
  v9 = v7;
  v20 = v9;
  v10 = v5;
  v21 = v10;
  v11 = v3;
  v22 = v11;
  v12 = v6;
  v23 = v12;
  objc_msgSend(v8, "enumerateRowsWithBlock:", v19);
  if (!*((_BYTE *)v26 + 24))
    goto LABEL_7;
  v13 = ML3MigrationClearLocationFromLibraryAsOf2100100(v12, 0, v11, 0);
  *((_BYTE *)v26 + 24) = v13;
  if (v13)
  {
    v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_DEFAULT, "Cleared all orphaned mismatched pids", v18, 2u);
    }
    v15 = 0;
  }
  else
  {
LABEL_7:
    v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_ERROR, "Could not update mismatched track downloads. Failing migration.", v18, 2u);
    }
    v15 = 1;
  }

  _Block_object_dispose(&v25, 8);
  if ((v15 & 1) != 0)
  {
    v16 = 0;
  }
  else
  {
LABEL_12:
    objc_msgSend(v4, "setCurrentUserVersion:", 2100100);
    v16 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2100100;"));
  }

  return v16;
}

void sub_1AC233B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3MigrationFunction2100080to2100090(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container DROP COLUMN cover_artwork_recipe"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN cover_artwork_recipe TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2100090);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2100090;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100070to2100080(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN collaboration_invitation_link TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2100080);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2100080;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100060to2100070(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToAutogenerateArtworkVariants:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 2100070);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 2100070;"));
  return v5;
}

uint64_t ML3MigrationFunction2100050to2100060(void *a1, void *a2)
{
  id v3;
  id v4;
  ML3MusicLibrary *v5;
  void *v6;
  ML3MusicLibrary *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  ML3MusicLibrary *v11;
  id v12;
  void *v13;
  ML3MusicLibrary *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  id v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[4];
  ML3MusicLibrary *v27;
  id v28;
  _QWORD v29[4];
  __CFString *v30;
  ML3MusicLibrary *v31;
  id v32;
  __CFString *v33;
  uint8_t buf[4];
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (MSVDeviceOSIsInternalInstall()
    && (MSVDeviceIsWatch() & 1) == 0
    && (MSVDeviceSupportsMultipleLibraries() & 1) == 0)
  {
    v5 = [ML3MusicLibrary alloc];
    objc_msgSend(v3, "databasePath");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[ML3MusicLibrary initWithPath:](v5, "initWithPath:", v6);

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "executeQuery:withParameters:", CFSTR("SELECT base_location_id, path, location FROM item JOIN item_extra USING(item_pid) join base_location USING (base_location_id) WHERE base_location_id >= ? AND base_location_id <= ?"), &unk_1E5BA8AA8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = MEMORY[0x1E0C809B0];
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __ML3MigrationFunction2100050to2100060_block_invoke;
    v29[3] = &unk_1E5B5C878;
    v30 = CFSTR("Music/iTunes");
    v11 = v7;
    v31 = v11;
    v12 = v8;
    v32 = v12;
    v33 = CFSTR("iTunes_Control/Music");
    objc_msgSend(v9, "enumerateRowsWithBlock:", v29);
    objc_msgSend(v3, "executeQuery:withParameters:", CFSTR("SELECT base_location_id FROM base_location WHERE base_location_id >= ? AND base_location_id <= ?"), &unk_1E5BA8AC0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v26[0] = v10;
    v26[1] = 3221225472;
    v26[2] = __ML3MigrationFunction2100050to2100060_block_invoke_2205;
    v26[3] = &unk_1E5B639C0;
    v14 = v11;
    v27 = v14;
    v15 = v3;
    v28 = v15;
    objc_msgSend(v13, "enumerateRowsWithBlock:", v26);
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "executeQuery:withParameters:", CFSTR("SELECT item_pid, base_location_id FROM item WHERE base_location_id < ? OR base_location_id > ? "), &unk_1E5BA8AD8);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v24[0] = v10;
    v24[1] = 3221225472;
    v24[2] = __ML3MigrationFunction2100050to2100060_block_invoke_2;
    v24[3] = &unk_1E5B65EE0;
    v18 = v16;
    v25 = v18;
    objc_msgSend(v17, "enumerateRowsWithBlock:", v24);
    +[ML3Track clearLocationFromLibrary:persistentIDs:disableKeepLocal:usingConnection:](ML3Track, "clearLocationFromLibrary:persistentIDs:disableKeepLocal:usingConnection:", v14, v18, 0, v15);
    v23 = 0;
    objc_msgSend(v15, "executeUpdate:withParameters:error:", CFSTR("DELETE FROM base_location where base_location_id < ? OR base_location_id > ? "), &unk_1E5BA8AF0, &v23);
    v19 = v23;
    if (v19)
    {
      v20 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v35 = v19;
        _os_log_impl(&dword_1AC149000, v20, OS_LOG_TYPE_ERROR, "SyncLocationRollback: Encountered error deleting invalid base_location_ids error=%@", buf, 0xCu);
      }

    }
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);

  }
  objc_msgSend(v4, "setCurrentUserVersion:", 2100060);
  v21 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2100060;"));

  return v21;
}

uint64_t ML3MigrationFunction2100040to2100050(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN cover_artwork_recipe BLOB"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN is_collaborative INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN collaborator_invite_options INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN collaborator_permissions INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_item ADD COLUMN uuid TEXT NOT NULL DEFAULT ''"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_item ADD COLUMN position_uuid TEXT NOT NULL DEFAULT ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_author (container_author_pid INTEGER PRIMARY KEY, container_pid INTEGER NOT NULL DEFAULT 0, person_pid INTEGER NOT NULL DEFAULT 0, role INTEGER NOT NULL DEFAULT 0, UNIQUE (container_pid, person_pid))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS ContainerAuthorContainerPID ON container_author (container_pid ASC)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_item_reaction (container_item_reaction_pid INTEGER PRIMARY KEY, container_item_pid INTEGER NOT NULL DEFAULT 0, person_pid INTEGER NOT NULL DEFAULT 0, reaction TEXT NOT NULL DEFAULT '', date INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS ContainerItemReactionContainerItemPID ON container_item_reaction (container_item_pid ASC)")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 2100050);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2100050;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100030to2100040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (+[ML3MusicLibrary updateTrackIntegrityOnConnection:](ML3MusicLibrary, "updateTrackIntegrityOnConnection:", v3))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2100040);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2100040;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100020to2100030(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("update _MLDatabaseProperties set value=0 where key='MLSyncClientSyncAnchor'")) & 1) != 0)
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 2100030);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2100030;"));
  }
  else
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, "Failed to clear MLSyncClientSyncAnchor from the database", v8, 2u);
    }

    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2100010to2100020(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  ML3MusicLibrary *v12;
  void *v13;
  ML3MusicLibrary *v14;
  char v15;
  void *v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  BOOL v20;
  NSObject *v21;
  void *v22;
  int v23;
  void *v24;
  char v25;
  id v26;
  NSObject *v27;
  void *v28;
  NSObject *v29;
  char v30;
  id v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  char v35;
  id v36;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  void *v41;
  id v42;
  _QWORD v43[4];
  __CFString *v44;
  __CFString *v45;
  id v46;
  id v47;
  uint64_t *v48;
  id v49;
  id v50;
  id v51;
  _QWORD v52[4];
  ML3MusicLibrary *v53;
  id v54;
  uint64_t *v55;
  _QWORD v56[4];
  id v57;
  id v58;
  id v59;
  id v60;
  __CFString *v61;
  __CFString *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  char v67;
  uint8_t buf[4];
  id v69;
  __int16 v70;
  id v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v42 = a2;
  v64 = 0;
  v65 = &v64;
  v66 = 0x2020000000;
  v67 = 1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "executeQuery:", CFSTR("SELECT item_pid, media_type, base_location_id, path, location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE location != ''"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v56[0] = MEMORY[0x1E0C809B0];
  v56[1] = 3221225472;
  v56[2] = __ML3MigrationFunction2100010to2100020_block_invoke;
  v56[3] = &unk_1E5B5C828;
  v63 = &v64;
  v8 = v5;
  v57 = v8;
  v9 = v3;
  v58 = v9;
  v10 = v4;
  v59 = v10;
  v11 = v6;
  v60 = v11;
  v61 = CFSTR("NewLocation");
  v62 = CFSTR("OldLocation");
  objc_msgSend(v7, "enumerateRowsWithBlock:", v56);
  v41 = v7;
  v12 = [ML3MusicLibrary alloc];
  objc_msgSend(v9, "databasePath");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[ML3MusicLibrary initWithPath:](v12, "initWithPath:", v13);

  if (v14)
  {
    if (*((_BYTE *)v65 + 24))
    {
      v15 = objc_msgSend(v9, "executeUpdate:withParameters:error:", CFSTR("INSERT INTO base_location (base_location_id, path) VALUES (?, ?)"), &unk_1E5BA8A90, 0);
      *((_BYTE *)v65 + 24) = v15;
      if ((v15 & 1) != 0)
      {
        objc_msgSend(v9, "executeQuery:", CFSTR("SELECT base_location_id FROM base_location"));
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v52[0] = MEMORY[0x1E0C809B0];
        v52[1] = 3221225472;
        v52[2] = __ML3MigrationFunction2100010to2100020_block_invoke_2150;
        v52[3] = &unk_1E5B5C8C8;
        v53 = v14;
        v55 = &v64;
        v54 = v9;
        objc_msgSend(v16, "enumerateRowsWithBlock:", v52);

      }
      else
      {
        v19 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1AC149000, v19, OS_LOG_TYPE_ERROR, "Error adding base_location_id=250 to base_location table", buf, 2u);
        }

      }
    }
  }
  else
  {
    v17 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v9, "databasePath");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v69 = v18;
      _os_log_impl(&dword_1AC149000, v17, OS_LOG_TYPE_ERROR, "Could not find library with connection path=%@", buf, 0xCu);

    }
    *((_BYTE *)v65 + 24) = 0;
  }
  if (*((_BYTE *)v65 + 24))
  {
    v20 = +[ML3Track clearLocationFromLibrary:persistentIDs:disableKeepLocal:usingConnection:](ML3Track, "clearLocationFromLibrary:persistentIDs:disableKeepLocal:usingConnection:", v14, v8, 0, v9);
    *((_BYTE *)v65 + 24) = v20;
    if (v20)
      goto LABEL_46;
    v21 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v21, OS_LOG_TYPE_ERROR, "Failed to clear location from cached tracks", buf, 2u);
    }

    if (*((_BYTE *)v65 + 24))
    {
LABEL_46:
      if (MSVDeviceSupportsMultipleLibraries())
      {
        +[ML3MusicLibrary cloudAssetsSharedCacheFolderPath](ML3MusicLibrary, "cloudAssetsSharedCacheFolderPath");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = objc_msgSend(v10, "fileExistsAtPath:", v22);

        if (v23)
        {
          +[ML3MusicLibrary cloudAssetsSharedCacheFolderPath](ML3MusicLibrary, "cloudAssetsSharedCacheFolderPath");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v51 = 0;
          v25 = objc_msgSend(v10, "removeItemAtPath:error:", v24, &v51);
          v26 = v51;
          *((_BYTE *)v65 + 24) = v25;

          if (!*((_BYTE *)v65 + 24))
          {
            v27 = os_log_create("com.apple.amp.medialibrary", "Migration");
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v69 = v26;
              _os_log_impl(&dword_1AC149000, v27, OS_LOG_TYPE_ERROR, "Encountered error removing cloudAssetsSharedCacheFolder. error=%@", buf, 0xCu);
            }

          }
        }
        else
        {
          v26 = 0;
        }
        -[ML3MusicLibrary pathForResourceFileOrFolder:](v14, "pathForResourceFileOrFolder:", 9);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v69 = v28;
          _os_log_impl(&dword_1AC149000, v29, OS_LOG_TYPE_DEFAULT, "Deleting Multi-user lofi-cache at path %@", buf, 0xCu);
        }

        if (objc_msgSend(v10, "fileExistsAtPath:", v28))
        {
          v50 = v26;
          v30 = objc_msgSend(v10, "removeItemAtPath:error:", v28, &v50);
          v31 = v50;

          *((_BYTE *)v65 + 24) = v30;
          if ((v30 & 1) == 0)
          {
            v32 = os_log_create("com.apple.amp.medialibrary", "Migration");
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v69 = v28;
              v70 = 2112;
              v71 = v31;
              _os_log_impl(&dword_1AC149000, v32, OS_LOG_TYPE_ERROR, "Encountered error deleting %@. error=%@", buf, 0x16u);
            }

          }
        }
        else
        {
          v31 = v26;
        }
        -[ML3MusicLibrary pathForResourceFileOrFolder:](v14, "pathForResourceFileOrFolder:", 8);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = os_log_create("com.apple.amp.medialibrary", "Migration");
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v69 = v33;
          _os_log_impl(&dword_1AC149000, v34, OS_LOG_TYPE_DEFAULT, "Deleting Multi-user cache at path %@", buf, 0xCu);
        }

        if (objc_msgSend(v10, "fileExistsAtPath:", v33))
        {
          v49 = v31;
          v35 = objc_msgSend(v10, "removeItemAtPath:error:", v33, &v49);
          v36 = v49;

          *((_BYTE *)v65 + 24) = v35;
          if ((v35 & 1) == 0)
          {
            v37 = os_log_create("com.apple.amp.medialibrary", "Migration");
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              v69 = v33;
              v70 = 2112;
              v71 = v36;
              _os_log_impl(&dword_1AC149000, v37, OS_LOG_TYPE_ERROR, "Encountered error deleting %@. error=%@", buf, 0x16u);
            }

          }
        }
        else
        {
          v36 = v31;
        }

      }
    }
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  if (!*((_BYTE *)v65 + 24))
    goto LABEL_42;
  v43[0] = MEMORY[0x1E0C809B0];
  v43[1] = 3221225472;
  v43[2] = __ML3MigrationFunction2100010to2100020_block_invoke_2154;
  v43[3] = &unk_1E5B5C850;
  v44 = CFSTR("OldLocation");
  v45 = CFSTR("NewLocation");
  v46 = v10;
  v48 = &v64;
  v47 = v38;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v43);

  if (!*((_BYTE *)v65 + 24))
LABEL_42:
    objc_msgSend(MEMORY[0x1E0D4D030], "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:", *MEMORY[0x1E0D4CE40], CFSTR("Bug"), CFSTR("Migration Error"), CFSTR("Encountered Error Migrating Downloads"), 0, 0, 0);
  objc_msgSend(v42, "setCurrentUserVersion:", 2100020);
  v39 = objc_msgSend(v9, "executeUpdate:", CFSTR("PRAGMA user_version = 2100020;"));

  _Block_object_dispose(&v64, 8);
  return v39;
}

void sub_1AC234B9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t ML3MigrationFunction2100000to2100010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v3, "setNeedsToRecreateTriggers:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 2100010);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 2100010;"));
  return v5;
}

uint64_t ML3MigrationFunction2050080to2100000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t v9[16];

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0, date_played_local INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, cloud_library_id TEXT NOT NULL DEFAULT '', liked_state_changed_date INTEGER NOT NULL DEFAULT 0)")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to create album table";
LABEL_86:
    _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, v7, v9, 2u);
    goto LABEL_87;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status,  keep_local_status_reason, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available, store_id, cloud_library_id) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available, store_id, cloud_library_id FROM album")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to populate new album table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE album")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to drop album table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_new RENAME TO album")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to rename album table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0)")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to create artist table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, classical_experience_available) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, classical_experience_available FROM item_artist")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to populate artist table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_artist")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to drop artist table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist_new RENAME TO item_artist")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to rename artist table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '', classical_experience_available INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0)")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to create album artist table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available FROM album_artist")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to populate album artist table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE album_artist")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to drop album artist table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist_new RENAME TO album_artist")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to rename album artist table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '', traits INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0)")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to create continer table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, traits) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, traits FROM container")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to populate container table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to drop container table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to rename container table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, liked_state_changed INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to create item stats table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_stats_new (item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill, liked_state, liked_state_changed, user_rating_is_derived, liked_state_changed_date) SELECT item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill, liked_state, liked_state_changed, user_rating_is_derived, liked_state_changed_date FROM item_stats")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to populate item stats table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_stats")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to drop item stats table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_stats_new RENAME TO item_stats")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to rename item stats table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album SET store_id = (SELECT store_playlist_id FROM item_store WHERE item_store.item_pid=album.representative_item_pid) WHERE album.representative_item_pid != 0")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to update album store id ";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album SET cloud_library_id = (SELECT cloud_album_id FROM item_store WHERE item_store.item_pid=album.representative_item_pid) WHERE album.representative_item_pid != 0")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to update album cloud id ";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE store_link")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to drop store_link table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '', needs_reporting INTEGER NOT NULL DEFAULT 0, subscription_store_item_id INTEGER NOT NULL DEFAULT 0, playback_endpoint_type INTEGER NOT NULL DEFAULT 0, is_mastered_for_itunes INTEGER NOT NULL DEFAULT 0, radio_station_id TEXT NOT NULL DEFAULT '', advertisement_unique_id TEXT NOT NULL DEFAULT '', advertisement_type INTEGER NOT NULL DEFAULT 0, is_artist_uploaded_content INTEGER NOT NULL DEFAULT 0, cloud_asset_available INTEGER NOT NULL DEFAULT 0, is_subscription INTEGER NOT NULL DEFAULT 0, sync_in_my_library INTEGER NOT NULL DEFAULT 0, cloud_in_my_library INTEGER NOT NULL DEFAULT 0, cloud_album_id TEXT NOT NULL DEFAULT '', cloud_playback_endpoint_type INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '', reporting_store_item_id INTEGER NOT NULL DEFAULT 0, asset_store_item_id INTEGER NOT NULL DEFAULT 0, extended_playback_attribute INTEGER NOT NULL DEFAULT 0, extended_lyrics_attribute INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to create item_store_new table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, needs_reporting, subscription_store_item_id, playback_endpoint_type, is_mastered_for_itunes, radio_station_id, advertisement_unique_id, advertisement_type, is_artist_uploaded_content, cloud_asset_available, is_subscription, sync_in_my_library, cloud_in_my_library, cloud_album_id, cloud_playback_endpoint_type, cloud_universal_library_id, reporting_store_item_id, asset_store_item_id, extended_playback_attribute, extended_lyrics_attribute) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, needs_reporting, subscription_store_item_id, playback_endpoint_type, is_mastered_for_itunes, radio_station_id, advertisement_unique_id, advertisement_type, is_artist_uploaded_content, cloud_asset_available, is_subscription, sync_in_my_library, cloud_in_my_library, cloud_album_id, cloud_playback_endpoint_type, cloud_universal_library_id, reporting_store_item_id, asset_store_item_id, extended_playback_attribute, extended_lyrics_attribute FROM item_store")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to populate item_store_new table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_store")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to drop item store table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store_new RENAME TO item_store")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_87;
    *(_WORD *)v9 = 0;
    v7 = "Failed to rename item store table";
    goto LABEL_86;
  }
  if ((objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("DELETE FROM entity_revision WHERE class=?"), &unk_1E5BA8A78, 0) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      v7 = "Failed to remove all entries for class ML3EntityTypeStoreLink";
      goto LABEL_86;
    }
LABEL_87:

    v5 = 0;
    goto LABEL_88;
  }
  objc_msgSend(v4, "setCurrentUserVersion:", 2100000);
  v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2100000;"));
LABEL_88:

  return v5;
}

uint64_t ML3MigrationFunction2050070to2050080(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (+[ML3MusicLibrary updateTrackIntegrityOnConnection:](ML3MusicLibrary, "updateTrackIntegrityOnConnection:", v3))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2050080);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2050080;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2050060to2050070(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, liked_state_changed INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0, favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_stats_new SELECT * FROM item_stats"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_stats"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_stats_new RENAME TO item_stats"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_extra_new (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER NOT NULL DEFAULT 0, track_count INTEGER NOT NULL DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER NOT NULL DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER NOT NULL DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER NOT NULL DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0, version TEXT NOT NULL DEFAULT '', display_version TEXT NOT NULL DEFAULT '', classical_work TEXT NOT NULL DEFAULT '', classical_movement TEXT NOT NULL DEFAULT '', classical_movement_count INTEGER NOT NULL DEFAULT 0, classical_movement_number INTEGER NOT NULL DEFAULT 0, is_preorder INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_extra_new SELECT * FROM item_extra"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_extra"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra_new RENAME TO item_extra"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_kvs_new (item_pid INTEGER PRIMARY KEY, key TEXT NOT NULL DEFAULT '', FOREIGN KEY(item_pid) REFERENCES item(item_pid))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_kvs_new SELECT * FROM item_kvs"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_kvs"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_kvs_new RENAME TO item_kvs"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_playback_new (item_pid INTEGER PRIMARY KEY, audio_format INTEGER NOT NULL DEFAULT 0, bit_rate INTEGER NOT NULL DEFAULT 0, codec_type INTEGER NOT NULL DEFAULT 0, codec_subtype INTEGER NOT NULL DEFAULT 0, data_kind INTEGER NOT NULL DEFAULT 0, data_url TEXT, duration INTEGER NOT NULL DEFAULT 0, eq_preset TEXT, format TEXT, gapless_heuristic_info INTEGER NOT NULL DEFAULT 0, gapless_encoding_delay INTEGER NOT NULL DEFAULT 0, gapless_encoding_drain INTEGER NOT NULL DEFAULT 0, gapless_last_frame_resynch INTEGER NOT NULL DEFAULT 0, has_video INTEGER NOT NULL DEFAULT 0, relative_volume INTEGER, sample_rate REAL NOT NULL DEFAULT 0, start_time_ms REAL NOT NULL DEFAULT 0, stop_time_ms REAL NOT NULL DEFAULT 0, volume_normalization_energy INTEGER NOT NULL DEFAULT 0, progression_direction INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_playback_new SELECT * FROM item_playback"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_playback"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_playback_new RENAME TO item_playback"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_search_new (item_pid INTEGER PRIMARY KEY, search_title INTEGER NOT NULL DEFAULT 0, search_album INTEGER NOT NULL DEFAULT 0, search_artist INTEGER NOT NULL DEFAULT 0, search_composer INTEGER NOT NULL DEFAULT 0, search_album_artist INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_search_new SELECT * FROM item_search"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_search"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_search_new RENAME TO item_search"))&& objc_msgSend(v3, "executeUpdate:",
                       CFSTR("CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '', needs_reporting INTEGER NOT NULL DEFAULT 0, subscription_store_item_id INTEGER NOT NULL DEFAULT 0, playback_endpoint_type INTEGER NOT NULL DEFAULT 0, is_mastered_for_itunes INTEGER NOT NULL DEFAULT 0, radio_station_id TEXT NOT NULL DEFAULT '', advertisement_unique_id TEXT NOT NULL DEFAULT '', advertisement_type INTEGER NOT NULL DEFAULT 0, is_artist_uploaded_content INTEGER NOT NULL DEFAULT 0, cloud_asset_available INTEGER NOT NULL DEFAULT 0, is_subscription INTEGER NOT NULL DEFAULT 0, sync_in_my_library INTEGER NOT NULL DEFAULT 0, cloud_in_my_library INTEGER NOT NULL DEFAULT 0, cloud_album_id TEXT NOT NULL DEFAULT '', cloud_playback_endpoint_type INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '', reporting_store_item_id INTEGER NOT NULL DEFAULT 0, asset_store_item_id INTEGER NOT NULL DEFAULT 0, extended_playback_attribute INTEGER NOT NULL DEFAULT 0, extended_lyrics_attribute INTEGER NOT NULL DEFAULT 0, FOREIGN KEY(item_pid) REFERENCES item(item_pid))"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_store_new SELECT * FROM item_store"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_store"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store_new RENAME TO item_store"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_video_new (item_pid INTEGER PRIMARY KEY, video_quality INTEGER NOT NULL DEFAULT 0, is_rental INTEGER NOT NULL DEFAULT 0, has_chapter_data INTEGER NOT NULL DEFAULT 0, season_number INTEGER NOT NULL DEFAULT 0, episode_id TEXT NOT NULL DEFAULT '', network_name TEXT NOT NULL DEFAULT '', extended_content_rating TEXT NOT NULL DEFAULT '', movie_info TEXT NOT NULL DEFAULT '', has_alternate_audio INTEGER NOT NULL DEFAULT 0, has_subtitles INTEGER NOT NULL DEFAULT 0, audio_language INTEGER NOT NULL DEFAULT 0, audio_track_index INTEGER NOT NULL DEFAULT 0, audio_track_id INTEGER NOT NULL DEFAULT 0, subtitle_language INTEGER NOT NULL DEFAULT 0, subtitle_track_index INTEGER NOT NULL DEFAULT 0, rental_duration INTEGER NOT NULL DEFAULT 0, rental_playback_duration INTEGER NOT NULL DEFAULT 0, rental_playback_date_started INTEGER NOT NULL DEFAULT 0, rental_date_started INTEGER NOT NULL DEFAULT 0, is_demo INTEGER NOT NULL DEFAULT 0, has_hls INTEGER NOT NULL DEFAULT 0, audio_track_locale TEXT NOT NULL DEFAULT '', show_sort_type INTEGER NOT NULL DEFAULT 0, episode_type INTEGER NOT NULL DEFAULT 0, episode_type_display_name TEXT NOT NULL DEFAULT '', episode_sub_sort_order INTEGER NOT NULL DEFAULT 0, hls_offline_playback_keys BLOB, is_premium INTEGER NOT NULL DEFAULT 0, color_capability INTEGER NOT NULL DEFAULT 0, hls_color_capability INTEGER NOT NULL DEFAULT 0, hls_video_quality INTEGER NOT NULL DEFAULT 0, hls_playlist_url TEXT NOT NULL DEFAULT '', audio_capability INTEGER NOT NULL DEFAULT 0, hls_audio_capability INTEGER NOT NULL DEFAULT 0, hls_asset_traits INTEGER NOT NULL DEFAULT 0, hls_key_server_url TEXT NOT NULL DEFAULT '', hls_key_cert_url TEXT NOT NULL DEFAULT '', hls_key_server_protocol TEXT NOT NULL DEFAULT '', FOREIGN KEY(item_pid) REFERENCES item(item_pid))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_video_new SELECT * FROM item_video"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_video"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video_new RENAME TO item_video")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 2050070);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2050070;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2050050to2050060(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '', favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0, traits INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, favorite_state, date_favorited) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, favorite_state, date_favorited FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2050060);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2050060;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2050040to2050050(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v3, "setNeedsToRecreateTriggers:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 2050050);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 2050050;"));
  return v5;
}

uint64_t ML3MigrationFunction2050030to2050040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0, date_played_local INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0, favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, cloud_library_id TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status,  keep_local_status_reason, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available, favorite_state, date_favorited, store_id, cloud_library_id, cloud_universal_library_id) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available, is_favorite, date_favorited, store_id, cloud_library_id, cloud_universal_library_id FROM album"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE album"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_new RENAME TO album"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0, favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0, cloud_library_id TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, classical_experience_available, favorite_state, date_favorited, cloud_library_id, cloud_universal_library_id) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, classical_experience_available, is_favorite, date_favorited, cloud_library_id, cloud_universal_library_id FROM item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist_new RENAME TO item_artist"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '', classical_experience_available INTEGER NOT NULL DEFAULT 0, favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0, cloud_library_id TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available, favorite_state, date_favorited, cloud_library_id) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_status_reason, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available, is_favorite, date_favorited, cloud_library_id FROM album_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE album_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist_new RENAME TO album_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, liked_state_changed INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, liked_state_changed_date INTEGER NOT NULL DEFAULT 0, favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_stats_new (item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill, liked_state, liked_state_changed, user_rating_is_derived, liked_state_changed_date, favorite_state, date_favorited) SELECT item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill, liked_state, liked_state_changed, user_rating_is_derived, liked_state_changed_date, is_favorite, date_favorited FROM item_stats"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_stats"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_stats_new RENAME TO item_stats"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '', favorite_state INTEGER NOT NULL DEFAULT 0, date_favorited INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, favorite_state, date_favorited) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, keep_local_status_reason, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key, is_favorite, date_favorited FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2050040);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2050040;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2050020to2050030(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v3 = a1;
  v4 = a2;
  if ((ML3MigrationColumnExistsInTable(v3, CFSTR("extended_lyrics_attribute"), CFSTR("item_store")) & 1) != 0
    || (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN extended_lyrics_attribute INTEGER NOT NULL DEFAULT 0")) & 1) != 0)
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2050030);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2050030;"));
  }
  else
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, "Failed to add extended_lyrics_attribute column to item_store", v8, 2u);
    }

    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2050010to2050020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN store_id INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    v15 = 0;
    v7 = "Failed to add store id column to album";
    v8 = (uint8_t *)&v15;
LABEL_20:
    _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    goto LABEL_21;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN cloud_library_id TEXT NOT NULL DEFAULT ''")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    v14 = 0;
    v7 = "Failed to add cloud library id column to album";
    v8 = (uint8_t *)&v14;
    goto LABEL_20;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    v13 = 0;
    v7 = "Failed to add universal library id column to album";
    v8 = (uint8_t *)&v13;
    goto LABEL_20;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist ADD COLUMN cloud_library_id TEXT NOT NULL DEFAULT ''")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    v12 = 0;
    v7 = "Failed to add cloud library id column to item_artist";
    v8 = (uint8_t *)&v12;
    goto LABEL_20;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    v11 = 0;
    v7 = "Failed to add universal library id column to item_artist";
    v8 = (uint8_t *)&v11;
    goto LABEL_20;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist ADD COLUMN cloud_library_id TEXT NOT NULL DEFAULT ''")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = 0;
      v7 = "Failed to add cloud library id column to album_artist";
      v8 = (uint8_t *)&v10;
      goto LABEL_20;
    }
LABEL_21:

    v5 = 0;
    goto LABEL_22;
  }
  objc_msgSend(v4, "setCurrentUserVersion:", 2050020);
  v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2050020;"));
LABEL_22:

  return v5;
}

uint64_t ML3MigrationFunction2050000to2050010(void *a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v3 = (void *)MEMORY[0x1E0C99E98];
  v4 = a2;
  v5 = a1;
  +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "fileURLWithPath:isDirectory:", v6, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "removeItemAtURL:error:", v7, 0);

  objc_msgSend(v4, "setNeedsToAutogenerateArtworkVariants:", 1);
  objc_msgSend(v4, "setCurrentUserVersion:", 2050010);

  v9 = objc_msgSend(v5, "executeUpdate:", CFSTR("PRAGMA user_version = 2050010;"));
  return v9;
}

uint64_t ML3MigrationFunction2030000to2050000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t v9[16];

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_stats ADD COLUMN is_favorite INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_WORD *)v9 = 0;
    v7 = "Failed to add is favorite column to item_stats";
LABEL_32:
    _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, v7, v9, 2u);
    goto LABEL_33;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_stats ADD COLUMN date_favorited INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_WORD *)v9 = 0;
    v7 = "Failed to add date favorited column to item_stats";
    goto LABEL_32;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN is_favorite INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_WORD *)v9 = 0;
    v7 = "Failed to add is_favorite column to album";
    goto LABEL_32;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN date_favorited INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_WORD *)v9 = 0;
    v7 = "Failed to add date favorited column to album";
    goto LABEL_32;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN is_favorite INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_WORD *)v9 = 0;
    v7 = "Failed to add is favorite column to container";
    goto LABEL_32;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN date_favorited INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_WORD *)v9 = 0;
    v7 = "Failed to add date favorited column to container";
    goto LABEL_32;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist ADD COLUMN is_favorite INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_WORD *)v9 = 0;
    v7 = "Failed to add is favorite column to item_artist";
    goto LABEL_32;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist ADD COLUMN date_favorited INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_WORD *)v9 = 0;
    v7 = "Failed to add date favorited column to item_artist";
    goto LABEL_32;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist ADD COLUMN is_favorite INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_WORD *)v9 = 0;
    v7 = "Failed to add is favorite column to album_artist";
    goto LABEL_32;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist ADD COLUMN date_favorited INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    _ML3LogCategoryDefault();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      v7 = "Failed to add date favorited column to album_artist";
      goto LABEL_32;
    }
LABEL_33:

    v5 = 0;
    goto LABEL_34;
  }
  objc_msgSend(v4, "setCurrentUserVersion:", 2050000);
  v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2050000;"));
LABEL_34:

  return v5;
}

uint64_t ML3MigrationFunction2000020to2030000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN extended_lyrics_attribute INTEGER NOT NULL DEFAULT 0")) & 1) != 0)
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2030000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2030000;"));
  }
  else
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, "Failed to add extended_lyrics_attribute column to item_store", v8, 2u);
    }

    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction2000010to2000020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v3, "setNeedsToRecreateTriggers:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 2000020);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 2000020;"));
  return v5;
}

uint64_t ML3MigrationFunction2000000to2000010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_new (item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER NOT NULL DEFAULT 0, track_number INTEGER NOT NULL DEFAULT 0, episode_sort_id INTEGER NOT NULL DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, in_my_library INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, date_added INTEGER NOT NULL DEFAULT 0, show_composer INTEGER NOT NULL DEFAULT 0, is_music_show INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, download_source_container_pid INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_new (item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, keep_local_constraints, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid) SELECT item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, keep_local_constraints, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid FROM item"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_new RENAME TO item"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0, date_played_local INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available FROM album"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE album"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_new RENAME TO album"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, classical_experience_available) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, classical_experience_available FROM item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist_new RENAME TO item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '', classical_experience_available INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available FROM album_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE album_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist_new RENAME TO album_artist"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE genre_new (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO genre_new (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id FROM genre"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE genre"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE genre_new RENAME TO genre"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE composer_new (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO composer_new (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id FROM composer"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE composer"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE composer_new RENAME TO composer")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2000010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2000010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1950040to2000000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN extended_playback_attribute INTEGER NOT NULL DEFAULT 0")) & 1) != 0)
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 2000000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 2000000;"));
  }
  else
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, "Failed to add extended_playback_attribute column to item_store", v8, 2u);
    }

    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1950030to1950040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v10;
  __int16 v11;
  __int16 v12;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN classical_experience_available INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    v12 = 0;
    v7 = "Failed to add classical_experience_available column to album table";
    v8 = (uint8_t *)&v12;
LABEL_11:
    _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    goto LABEL_12;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist ADD COLUMN classical_experience_available INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    v11 = 0;
    v7 = "Failed to add classical_experience_available column to album_artist table";
    v8 = (uint8_t *)&v11;
    goto LABEL_11;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist ADD COLUMN classical_experience_available INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = 0;
      v7 = "Failed to add classical_experience_available column to item_artist table";
      v8 = (uint8_t *)&v10;
      goto LABEL_11;
    }
LABEL_12:

    v5 = 0;
    goto LABEL_13;
  }
  objc_msgSend(v4, "setCurrentUserVersion:", 1950040);
  v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1950040;"));
LABEL_13:

  return v5;
}

uint64_t ML3MigrationFunction1950020to1950030(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v3, "setNeedsToRecreateTriggers:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1950030);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1950030;"));
  return v5;
}

uint64_t ML3MigrationFunction1950010to1950020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_new (item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER NOT NULL DEFAULT 0, track_number INTEGER NOT NULL DEFAULT 0, episode_sort_id INTEGER NOT NULL DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, in_my_library INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, date_added INTEGER NOT NULL DEFAULT 0, show_composer INTEGER NOT NULL DEFAULT 0, is_music_show INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, download_source_container_pid INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_new (item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid) SELECT item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid FROM item"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_new RENAME TO item"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0, date_played_local INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id FROM album"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE album"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_new RENAME TO album"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id FROM item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist_new RENAME TO item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id, cloud_universal_library_id) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id, cloud_universal_library_id FROM album_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE album_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist_new RENAME TO album_artist"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE genre_new (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO genre_new (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id FROM genre"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE genre"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE genre_new RENAME TO genre"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE composer_new (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO composer_new (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id FROM composer"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE composer"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE composer_new RENAME TO composer")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1950020);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1950020;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1950000to1950010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE booklet (booklet_pid INTEGER PRIMARY KEY, item_pid INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', store_item_id INTEGER NOT NULL DEFAULT 0, redownload_params TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS BookletItemPersistentID ON booklet (item_pid ASC)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1950010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1950010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1910030to1950000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v10;
  __int16 v11;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN hls_key_server_protocol TEXT NOT NULL DEFAULT ''")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v11 = 0;
      v7 = "Failed to add hls_key_server_protocol column to item_video table";
      v8 = (uint8_t *)&v11;
LABEL_8:
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    }
LABEL_9:

    v5 = 0;
    goto LABEL_10;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_video SET hls_key_server_protocol = 'simplified' WHERE item_video.hls_key_server_url != '' AND item_video.hls_asset_traits != 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = 0;
      v7 = "Failed to back-fill hls_key_server_protocol column";
      v8 = (uint8_t *)&v10;
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  objc_msgSend(v4, "setCurrentUserVersion:", 1950000);
  v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1950000;"));
LABEL_10:

  return v5;
}

uint64_t ML3MigrationFunction1910020to1910030(void *a1, void *a2)
{
  id v3;
  id v4;
  CFLocaleRef v5;
  const __CFString *v6;
  int HasPrefix;
  uint64_t v8;

  v3 = a2;
  v4 = a1;
  v5 = CFLocaleCopyCurrent();
  v6 = (const __CFString *)MEMORY[0x1AF43BE98]();
  HasPrefix = CFStringHasPrefix(v6, CFSTR("ja"));
  CFRelease(v5);
  objc_msgSend(v3, "setNeedsToUpdateSortMap:", 1);
  if (HasPrefix)
    objc_msgSend(v3, "setForceUpdateOriginals:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1910030);
  v8 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1910030;"));

  return v8;
}

uint64_t ML3MigrationFunction1910010to1910020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE lyrics ADD COLUMN time_synced_lyrics_available INTEGER NOT NULL DEFAULT 0")) & 1) != 0)
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1910020);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1910020;"));
  }
  else
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, "Failed to add time_synced_lyrics_available column to item_lyrics table", v8, 2u);
    }

    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1910000to1910010(void *a1, void *a2)
{
  id v3;
  id v4;
  CFLocaleRef v5;
  const __CFString *v6;
  int HasPrefix;
  uint64_t v8;

  v3 = a2;
  v4 = a1;
  v5 = CFLocaleCopyCurrent();
  v6 = (const __CFString *)MEMORY[0x1AF43BE98]();
  HasPrefix = CFStringHasPrefix(v6, CFSTR("ja"));
  CFRelease(v5);
  objc_msgSend(v3, "setNeedsToUpdateSortMap:", 1);
  if (HasPrefix)
    objc_msgSend(v3, "setForceUpdateOriginals:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1910010);
  v8 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1910010;"));

  return v8;
}

uint64_t ML3MigrationFunction1850050to1910000(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v3 = a2;
  v4 = a1;
  if (MGGetBoolAnswer() && MGGetBoolAnswer())
  {
    v5 = (void *)MEMORY[0x1E0C99E98];
    +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "fileURLWithPath:isDirectory:", v6, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "removeItemAtURL:error:", v7, 0);

    objc_msgSend(v3, "setNeedsToAutogenerateArtworkVariants:", 1);
  }
  objc_msgSend(v3, "setCurrentUserVersion:", 1910000);
  v9 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1910000;"));

  return v9;
}

uint64_t ML3MigrationFunction1850040to1850050(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v10;
  __int16 v11;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN reporting_store_item_id INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v11 = 0;
      v7 = "Failed to add reporting_store_item_id column to item_store table";
      v8 = (uint8_t *)&v11;
LABEL_8:
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    }
LABEL_9:

    v5 = 0;
    goto LABEL_10;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN asset_store_item_id INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = 0;
      v7 = "Failed to add asset_store_item_id column to item_store table";
      v8 = (uint8_t *)&v10;
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  objc_msgSend(v4, "setCurrentUserVersion:", 1850050);
  v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1850050;"));
LABEL_10:

  return v5;
}

uint64_t ML3MigrationFunction1850030to1850040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v10;
  __int16 v11;
  __int16 v12;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN hls_asset_traits INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    v12 = 0;
    v7 = "Failed to add hls_key_server_url column to item_video table";
    v8 = (uint8_t *)&v12;
LABEL_11:
    _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    goto LABEL_12;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN hls_key_server_url TEXT NOT NULL DEFAULT ''")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    v11 = 0;
    v7 = "Failed to add hls_key_server_url column to item_video table";
    v8 = (uint8_t *)&v11;
    goto LABEL_11;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN hls_key_cert_url TEXT NOT NULL DEFAULT ''")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = 0;
      v7 = "Failed to add hls_key_cert_url column to item_video table";
      v8 = (uint8_t *)&v10;
      goto LABEL_11;
    }
LABEL_12:

    v5 = 0;
    goto LABEL_13;
  }
  objc_msgSend(v4, "setCurrentUserVersion:", 1850040);
  v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1850040;"));
LABEL_13:

  return v5;
}

uint64_t ML3MigrationFunction1850020to1850030(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, is_personalized_mix, personalized_mix_sort_key FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1850030);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1850030;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1850010to1850020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN is_preorder INTEGER NOT NULL DEFAULT 0")) & 1) != 0)
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1850020);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1850020;"));
  }
  else
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, "Failed to add is_preorder column to item_extra table", v8, 2u);
    }

    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1850000to1850010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_stats ADD COLUMN liked_state_changed_date INTEGER NOT NULL DEFAULT 0")) & 1) != 0)
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1850010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1850010;"));
  }
  else
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, "Could not update item_stats table to support liked state change date", v8, 2u);
    }

    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1810000to1850000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v10;
  __int16 v11;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN is_personalized_mix INTEGER NOT NULL DEFAULT 0")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v11 = 0;
      v7 = "Could not update container table to support personalized type";
      v8 = (uint8_t *)&v11;
LABEL_8:
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    }
LABEL_9:

    v5 = 0;
    goto LABEL_10;
  }
  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN personalized_mix_sort_key TEXT NOT NULL DEFAULT ''")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = 0;
      v7 = "Could not update container table to support personalized sort key";
      v8 = (uint8_t *)&v10;
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  objc_msgSend(v4, "setCurrentUserVersion:", 1850000);
  v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1850000;"));
LABEL_10:

  return v5;
}

uint64_t ML3MigrationFunction1800000to1810000(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  objc_msgSend(a2, "setCurrentUserVersion:", 1810000);
  v4 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1810000;"));

  return v4;
}

uint64_t ML3MigrationFunction1770000to1800000(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  objc_msgSend(a2, "setCurrentUserVersion:", 1800000);
  v4 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1800000;"));

  return v4;
}

uint64_t ML3MigrationFunction1750000to1770000(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v9[16];
  uint8_t buf[16];

  v3 = a1;
  v4 = a2;
  v5 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AC149000, v5, OS_LOG_TYPE_DEFAULT, "Patch up podcasts synced with incorrect composite media type", buf, 2u);
  }

  if ((objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET media_type=4 WHERE media_type=12")) & 1) != 0)
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1770000);
    v6 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1770000;"));
  }
  else
  {
    v7 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1AC149000, v7, OS_LOG_TYPE_ERROR, "Could not patch up composite media_type for synced podcasts", v9, 2u);
    }

    v6 = 0;
  }

  return v6;
}

uint64_t ML3MigrationFunction1710061to1750000(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, void *);
  void *v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  uint8_t buf[16];

  v3 = a1;
  v4 = a2;
  v5 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AC149000, v5, OS_LOG_TYPE_DEFAULT, "Merging split is_compilation albums", buf, 2u);
  }

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "executeQuery:", CFSTR("SELECT album_artist_pid, album FROM album GROUP BY album, album_artist_pid HAVING MIN(all_compilations) = 0 AND MAX(all_compilations) = 1"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x1E0C809B0];
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __ML3MigrationFunction1710061to1750000_block_invoke;
  v24[3] = &unk_1E5B65EE0;
  v25 = v7;
  v10 = v7;
  objc_msgSend(v8, "enumerateRowsWithBlock:", v24);
  v21[0] = v9;
  v21[1] = 3221225472;
  v21[2] = __ML3MigrationFunction1710061to1750000_block_invoke_2;
  v21[3] = &unk_1E5B5C800;
  v11 = v3;
  v22 = v11;
  v23 = v6;
  v12 = v6;
  objc_msgSend(v10, "enumerateObjectsUsingBlock:", v21);
  v16 = v9;
  v17 = 3221225472;
  v18 = __ML3MigrationFunction1710061to1750000_block_invoke_1829;
  v19 = &unk_1E5B61E08;
  v20 = v11;
  v13 = v11;
  objc_msgSend(v12, "enumerateObjectsUsingBlock:", &v16);
  objc_msgSend(v4, "setCurrentUserVersion:", 1750000, v16, v17, v18, v19);

  v14 = objc_msgSend(v13, "executeUpdate:", CFSTR("PRAGMA user_version = 1750000;"));
  return v14;
}

uint64_t ML3MigrationFunction1710060to1710061(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  _ML3MigrationFunctionPatchUpIncorrectDateDownloaded(v4);
  objc_msgSend(v3, "setCurrentUserVersion:", 1710061);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1710061;"));
  return v5;
}

uint64_t ML3MigrationFunction1710051to1710060(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint8_t v9[16];
  uint8_t buf[16];

  v3 = a1;
  v4 = a2;
  if ((MSVDeviceSupportsSideLoadedMediaContent() & 1) == 0)
  {
    if ((objc_msgSend(v3, "executeUpdate:", CFSTR("DELETE FROM _MLDatabaseProperties WHERE key ='MLLastKnownActiveLockerAccountDSID'")) & 1) == 0)
    {
      v5 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1AC149000, v5, OS_LOG_TYPE_ERROR, "Could not remove last known locker account ID", buf, 2u);
      }

    }
    if ((objc_msgSend(v3, "executeUpdate:", CFSTR("DELETE FROM _MLDatabaseProperties WHERE key ='MLCloudLibraryPrefersToMerge'")) & 1) == 0)
    {
      v6 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, "Could not remove cloud library merge preference", v9, 2u);
      }

    }
  }
  objc_msgSend(v4, "setCurrentUserVersion:", 1710060);
  v7 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1710060;"));

  return v7;
}

uint64_t ML3MigrationFunction1710050to1710051(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  _ML3MigrationFunctionPatchUpIncorrectDateDownloaded(v4);
  objc_msgSend(v3, "setCurrentUserVersion:", 1710051);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1710051;"));
  return v5;
}

uint64_t ML3MigrationFunction1710040to1710050(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if ((ML3MigrationColumnExistsInTable(v3, CFSTR("download_source_container_pid"), CFSTR("item")) & 1) != 0
    || objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item ADD COLUMN download_source_container_pid INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1710050);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1710050;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1710030to1710040(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *);
  void *v18;
  id v19;
  _QWORD v20[4];
  id v21;
  uint8_t buf[4];
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "executeQuery:", CFSTR("select container_pid from container where distinguished_kind = 10000 AND is_container_type_active_target AND date_created != (select max(date_created) FROM container where distinguished_kind = 10000 AND is_container_type_active_target)"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __ML3MigrationFunction1710030to1710040_block_invoke;
  v20[3] = &unk_1E5B65EE0;
  v8 = v5;
  v21 = v8;
  objc_msgSend(v6, "enumerateRowsWithBlock:", v20);
  v9 = os_log_create("com.apple.amp.medialibrary", "Migration");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v23 = v8;
    _os_log_impl(&dword_1AC149000, v9, OS_LOG_TYPE_DEFAULT, "Will remove duplicate plaback history playlists=%{public}@", buf, 0xCu);
  }

  v15 = v7;
  v16 = 3221225472;
  v17 = __ML3MigrationFunction1710030to1710040_block_invoke_1784;
  v18 = &unk_1E5B61E08;
  v10 = v3;
  v19 = v10;
  objc_msgSend(v8, "enumerateObjectsUsingBlock:", &v15);
  if ((objc_msgSend(v10, "executeUpdate:", CFSTR("delete from container_item where container_pid in (select container_pid from container where distinguished_kind = 10000 AND is_container_type_active_target AND date_created != (select max(date_created) FROM container where distinguished_kind = 10000 AND is_container_type_active_target))"), v15, v16, v17, v18) & 1) == 0)
  {
    v11 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_ERROR, "Could not delete duplicate container_pids from container_item", buf, 2u);
    }

  }
  if ((objc_msgSend(v10, "executeUpdate:", CFSTR("delete from container where container_pid in (select container_pid from container where distinguished_kind = 10000 AND is_container_type_active_target AND date_created != (select max(date_created) from container where distinguished_kind = 10000 AND is_container_type_active_target))")) & 1) == 0)
  {
    v12 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v12, OS_LOG_TYPE_ERROR, "Could not delete duplicate container_pids from container", buf, 2u);
    }

  }
  objc_msgSend(v4, "setCurrentUserVersion:", 1710040);
  v13 = objc_msgSend(v10, "executeUpdate:", CFSTR("PRAGMA user_version = 1710040;"));

  return v13;
}

uint64_t ML3MigrationFunction1710020to1710030(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item ADD COLUMN download_source_container_pid INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1710030);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1710030;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1710010to1710020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1710020);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1710020;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1710000to1710010(void *a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1;
  v5 = objc_msgSend(v3, "originalUserVersion");
  v6 = os_log_create("com.apple.amp.medialibrary", "Migration");
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5 <= 1709999)
  {
    if (v7)
    {
      v10 = 136446466;
      v11 = "ML3MigrationFunction1710000to1710010";
      v12 = 1024;
      v13 = v5;
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s: Found original user version %d, which pre-dates any work specific to iOS 13.0. Leaving subscription status cache intact.", (uint8_t *)&v10, 0x12u);
    }
  }
  else
  {
    if (v7)
    {
      v10 = 136446466;
      v11 = "ML3MigrationFunction1710000to1710010";
      v12 = 1024;
      v13 = v5;
      _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s: Found original user version %d, which indicates a pre-release version of iOS 13.0 was previously installed. Clearing subscription status cache.", (uint8_t *)&v10, 0x12u);
    }

    v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.itunescloud"));
    -[NSObject removeObjectForKey:](v6, "removeObjectForKey:", CFSTR("ICDefaultsCachedSubscriptionStatus"));
    -[NSObject synchronize](v6, "synchronize");
  }

  objc_msgSend(v3, "setCurrentUserVersion:", 1710010);
  v8 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1710010;"));

  return v8;
}

uint64_t ML3MigrationFunction1610030to1710000(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  uint8_t buf[4];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item ADD COLUMN date_downloaded INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN date_downloaded INTEGER NOT NULL DEFAULT 0")))
  {
    MLMobileUserHomeDirectory();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringByAppendingPathComponent:", CFSTR("Media"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1AC149000, v8, OS_LOG_TYPE_DEFAULT, "Start back filling date_downloaded", buf, 2u);
    }

    objc_msgSend(v3, "executeQuery:", CFSTR("SELECT item.ROWID, base_location.path, item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id >= 300 "));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = MEMORY[0x1E0C809B0];
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __ML3MigrationFunction1610030to1710000_block_invoke;
    v20[3] = &unk_1E5B639C0;
    v21 = v6;
    v11 = v7;
    v22 = v11;
    v12 = v6;
    objc_msgSend(v9, "enumerateRowsWithBlock:", v20);
    v18[0] = v10;
    v18[1] = 3221225472;
    v18[2] = __ML3MigrationFunction1610030to1710000_block_invoke_1761;
    v18[3] = &unk_1E5B5C7D8;
    v13 = v3;
    v19 = v13;
    objc_msgSend(v11, "enumerateKeysAndObjectsUsingBlock:", v18);
    v14 = os_log_create("com.apple.amp.medialibrary", "Default");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = objc_msgSend(v11, "count");
      *(_DWORD *)buf = 134217984;
      v24 = v15;
      _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_DEFAULT, "Finished back filling date_downloaded for %ld items", buf, 0xCu);
    }

    objc_msgSend(v4, "setCurrentUserVersion:", 1710000);
    v16 = objc_msgSend(v13, "executeUpdate:", CFSTR("PRAGMA user_version = 1710000;"));

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

uint64_t ML3MigrationFunction1610020to1610030(void *a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v3 = (void *)MEMORY[0x1E0CB3620];
  v4 = a2;
  v5 = a1;
  objc_msgSend(v3, "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  MLMobileUserHomeDirectory();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringByAppendingPathComponent:", CFSTR("Library/MusicLibrary/AccountCache.sqlitedb"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "removeItemAtPath:error:", v8, 0);
  objc_msgSend(v8, "stringByAppendingString:", CFSTR("-shm"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeItemAtPath:error:", v9, 0);

  objc_msgSend(v8, "stringByAppendingString:", CFSTR("-wal"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeItemAtPath:error:", v10, 0);

  objc_msgSend(v4, "setCurrentUserVersion:", 1610030);
  v11 = objc_msgSend(v5, "executeUpdate:", CFSTR("PRAGMA user_version = 1610030;"));

  return v11;
}

uint64_t ML3MigrationFunction1610010to1610020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE person (person_pid INTEGER PRIMARY KEY, cloud_id TEXT NOT NULL UNIQUE, handle TEXT NOT NULL DEFAULT '', name TEXT NOT NULL DEFAULT '', image_url TEXT NOT NULL DEFAULT '', image_token TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_item_person (container_item_person_pid INTEGER PRIMARY KEY, container_item_pid INTEGER NOT NULL DEFAULT 0, person_pid INTEGER NOT NULL DEFAULT 0, UNIQUE (container_item_pid, person_pid))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS PersonPID ON person (person_pid ASC)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS PersonCloudID ON person (cloud_id ASC)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS ContainerItemPerson ON container_item_person (container_item_pid ASC)"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN should_display_index INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1610020);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1610020;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1610000to1610010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN audio_capability INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN hls_audio_capability INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1610010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1610010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1560000to1610000(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  ML3DatabaseConnection *v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[4];
  id v14;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE account (dsid INTEGER PRIMARY KEY DEFAULT 0, apple_id TEXT NOT NULL DEFAULT '', alt_dsid TEXT NOT NULL DEFAULT '')")))
  {
    MLMobileUserHomeDirectory();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringByAppendingPathComponent:", CFSTR("Library/MusicLibrary/AccountCache.sqlitedb"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "msv_stringByResolvingRealPath");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v6) = objc_msgSend(v8, "fileExistsAtPath:", v7);

    if ((_DWORD)v6)
    {
      v9 = -[ML3DatabaseConnection initWithDatabasePath:]([ML3DatabaseConnection alloc], "initWithDatabasePath:", v7);
      if (-[ML3DatabaseConnection open](v9, "open"))
      {
        -[ML3DatabaseConnection executeQuery:](v9, "executeQuery:", CFSTR("SELECT dsid, apple_id FROM account"));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v13[0] = MEMORY[0x1E0C809B0];
        v13[1] = 3221225472;
        v13[2] = __ML3MigrationFunction1560000to1610000_block_invoke;
        v13[3] = &unk_1E5B65EE0;
        v14 = v3;
        objc_msgSend(v10, "enumerateRowsWithBlock:", v13);
        -[ML3DatabaseConnection close](v9, "close");

      }
    }
    objc_msgSend(v4, "setCurrentUserVersion:", 1610000);
    v11 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1610000;"));

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

uint64_t ML3MigrationFunction1550010to1560000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (MGGetBoolAnswer()
    && !objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'ForceSiriResetSync')")))
  {
    v5 = 0;
  }
  else
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1560000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1560000;"));
  }

  return v5;
}

uint64_t ML3MigrationFunction1550000to1550010(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFNumberRef i;
  void *v12;
  void *v13;
  int v14;
  CFNumberRef v15;
  void *v16;
  int v17;
  void *v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  int v23;
  void *v24;
  int v25;
  void *v26;
  uint64_t v27;
  id v29;
  id obj;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t valuePtr;
  CFNumberRef v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD v41[3];
  CFNumberRef v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "executeQuery:", CFSTR("SELECT item_pid FROM item WHERE (media_type & 8 != 0) AND album_order = 0 and album_pid != 0"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectsInColumn:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  obj = v6;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v43, 16);
  if (v7)
  {
    v8 = v7;
    v31 = *(_QWORD *)v33;
    v29 = v4;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v33 != v31)
          objc_enumerationMutation(obj);
        v10 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * v9);
        valuePtr = ML3CreateIntegerUUID();
        for (i = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr); ; i = v15)
        {
          v42 = i;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v42, 1);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "executeQuery:withParameters:", CFSTR("SELECT 1 FROM album WHERE album_pid = ?"), v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "hasAtLeastOneRow");

          if (!v14)
            break;
          valuePtr = ML3CreateIntegerUUID();
          v15 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);

        }
        v41[0] = i;
        v41[1] = v10;
        v41[2] = v10;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v41, 3);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("INSERT INTO album (album_pid, representative_item_pid, album_artist_pid, cloud_status, user_rating, all_compilations, album_year, keep_local, keep_local_status, contains_classical_work, date_played_local, user_rating_is_derived) SELECT ?, ?, album_artist_pid, cloud_status, user_rating, all_compilations, album_year, keep_local, keep_local_status, contains_classical_work, date_played_local, user_rating_is_derived FROM album WHERE album_pid=(SELECT album_pid FROM item WHERE item_pid=?)"), v16, 0);

        if (!v17)
          goto LABEL_17;
        v40[0] = i;
        v40[1] = v10;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v40, 2);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("UPDATE item SET album_pid = ? WHERE item_pid = ?"), v18, 0);

        if (!v19)
          goto LABEL_17;
        v39 = v10;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v39, 1);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("INSERT OR REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES(?, 0, 0, 0)"), v20, 0);

        if (!v21
          || (v38 = v10,
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v38, 1),
              v22 = (void *)objc_claimAutoreleasedReturnValue(),
              v23 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("DELETE FROM entity_revision WHERE entity_pid = ? AND revision_type > 0"), v22, 0), v22, !v23))
        {
LABEL_17:

LABEL_18:
          v26 = obj;

          v27 = 0;
          v4 = v29;
          goto LABEL_19;
        }
        v37 = i;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v37, 1);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("INSERT OR REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES(?, 0, 4, 0)"), v24, 0);

        if (!v25)
          goto LABEL_18;
        ++v9;
      }
      while (v9 != v8);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v43, 16);
      v4 = v29;
      if (v8)
        continue;
      break;
    }
  }
  v26 = obj;

  objc_msgSend(v4, "setCurrentUserVersion:", 1550010);
  v27 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1550010;"));
LABEL_19:

  return v27;
}

uint64_t ML3MigrationFunction1510070to1550000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN hls_playlist_url TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1550000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1550000;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1510060to1510070(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE composer ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE genre ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1510070);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1510070;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1510050to1510060(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1510060);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1510060;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1510040to1510050(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1510050);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1510050;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1510030to1510040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN hls_offline_playback_keys BLOB"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN is_premium INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN color_capability INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN hls_color_capability INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN hls_video_quality INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1510040);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1510040;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1510020to1510030(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v3 = a1;
  v4 = a2;
  if (!MSVDeviceOSIsInternalInstall() || !MGGetBoolAnswer() || (MGGetBoolAnswer() & 1) != 0)
    goto LABEL_7;
  objc_msgSend(v3, "executeQuery:", CFSTR("SELECT 1 FROM _MLDatabaseProperties WHERE key = 'MLMigrationHasDisabledAstcOnErie'"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForFirstRowAndColumn");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "BOOLValue");

  if ((v7 & 1) == 0)
  {
    v8 = (void *)MEMORY[0x1E0C99E98];
    +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "fileURLWithPath:isDirectory:", v9, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "removeItemAtURL:error:", v10, 0);

    objc_msgSend(v4, "setNeedsToAutogenerateArtworkVariants:", 1);
  }
  if (!objc_msgSend(v3, "executeUpdate:", CFSTR("DELETE FROM _MLDatabaseProperties WHERE key ='MLMigrationHasDisabledAstcOnErie'")))
  {
    v12 = 0;
  }
  else
  {
LABEL_7:
    objc_msgSend(v4, "setCurrentUserVersion:", 1510030);
    v12 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1510030;"));
  }

  return v12;
}

uint64_t ML3MigrationFunction1510010to1510020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  ML3MigrationRemoveInvalidContainerItems(CFSTR("SELECT container_item.container_pid, position FROM container JOIN container_item USING (container_pid) JOIN item USING (item_pid) WHERE distinguished_kind IN (19, 20) AND in_my_library = 0"), v4);
  objc_msgSend(v3, "setNeedsToReloadContainerMediaTypes:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1510020);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1510020;"));
  return v5;
}

uint64_t ML3MigrationFunction1510000to1510010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  ML3MigrationRemoveInvalidContainerItems(CFSTR("SELECT container_pid, position FROM container_item LEFT OUTER JOIN item USING (item_pid) WHERE item.item_pid IS NULL"), v4);
  objc_msgSend(v3, "setNeedsToReloadContainerMediaTypes:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1510010);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1510010;"));
  return v5;
}

uint64_t ML3MigrationFunction1450090to1510000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN cloud_author_handle TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1510000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1510000;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1450080to1450090(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v3 = a1;
  v4 = a2;
  if (!MSVDeviceOSIsInternalInstall())
    goto LABEL_5;
  if (!MGGetBoolAnswer())
    goto LABEL_5;
  if ((MGGetBoolAnswer() & 1) != 0)
    goto LABEL_5;
  v5 = (void *)MEMORY[0x1E0C99E98];
  +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "fileURLWithPath:isDirectory:", v6, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "removeItemAtURL:error:", v7, 0);

  objc_msgSend(v4, "setNeedsToAutogenerateArtworkVariants:", 1);
  LODWORD(v8) = objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'MLMigrationHasDisabledAstcOnErie')"));

  if (!(_DWORD)v8)
  {
    v9 = 0;
  }
  else
  {
LABEL_5:
    objc_msgSend(v4, "setCurrentUserVersion:", 1450090);
    v9 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1450090;"));
  }

  return v9;
}

uint64_t ML3MigrationFunction1450070to1450080(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  ML3MigrationRemoveInvalidContainerItems(CFSTR("SELECT container_item.container_pid, position FROM container JOIN container_item USING (container_pid) JOIN item USING (item_pid) WHERE distinguished_kind IN (19, 20) AND in_my_library = 0"), v4);
  objc_msgSend(v3, "setNeedsToReloadContainerMediaTypes:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1450080);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1450080;"));
  return v5;
}

uint64_t ML3MigrationFunction1450060to1450070(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  ML3MigrationRemoveInvalidContainerItems(CFSTR("SELECT container_pid, position FROM container_item LEFT OUTER JOIN item USING (item_pid) WHERE item.item_pid IS NULL"), v4);
  objc_msgSend(v3, "setNeedsToReloadContainerMediaTypes:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1450070);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1450070;"));
  return v5;
}

uint64_t ML3MigrationFunction1450050to1450060(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DELETE FROM _MLDatabaseProperties WHERE key = 'MLArtworkShouldConvertToASTC'")))
  {
    if (MSVDeviceOSIsInternalInstall() && MGGetBoolAnswer())
    {
      v5 = (void *)MEMORY[0x1E0C99E98];
      +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "fileURLWithPath:isDirectory:", v6, 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "removeItemAtURL:error:", v7, 0);

      objc_msgSend(v4, "setNeedsToAutogenerateArtworkVariants:", 1);
    }
    objc_msgSend(v4, "setCurrentUserVersion:", 1450060);
    v9 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1450060;"));
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t ML3MigrationFunction1450040to1450050(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item ADD COLUMN is_music_show INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1450050);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1450050;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1450030to1450040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN show_sort_type INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN episode_type INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN episode_type_display_name TEXT NOT NULL DEFAULT ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN episode_sub_sort_order INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1450040);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1450040;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1450020to1450030(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  TCCAccessReset();
  objc_msgSend(v3, "setCurrentUserVersion:", 1450030);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1450030;"));
  return v5;
}

uint64_t ML3MigrationFunction1450010to1450020(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  int v7;
  ML3DatabaseConnection *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, void *, void *, _BYTE *);
  void *v26;
  id v27;
  __int128 *p_buf;
  _QWORD v29[4];
  id v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;
  _QWORD v38[4];
  id v39;
  uint8_t v40[4];
  uint64_t v41;
  __int128 buf;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t);
  id v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  ML3MigrationStoreBookeeperDatabaseFilePathAsOf1450020();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "fileExistsAtPath:", v5);

  if (!v7)
    goto LABEL_18;
  v8 = -[ML3DatabaseConnection initWithDatabasePath:]([ML3DatabaseConnection alloc], "initWithDatabasePath:", v5);
  -[ML3DatabaseConnection setReadOnly:](v8, "setReadOnly:", 1);
  -[ML3DatabaseConnection open](v8, "open");
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[ML3DatabaseConnection executeQuery:withParameters:](v8, "executeQuery:withParameters:", CFSTR("SELECT key, propertyValuesBlob, timestamp FROM ubiquitous_bookmarks"), 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v38[2] = __ML3MigrationFunction1450010to1450020_block_invoke;
  v38[3] = &unk_1E5B65EE0;
  v12 = v9;
  v39 = v12;
  objc_msgSend(v10, "enumerateRowsWithBlock:", v38);
  v22 = v10;
  v32 = 0;
  v33 = &v32;
  v34 = 0x3032000000;
  v35 = __Block_byref_object_copy__1994;
  v36 = __Block_byref_object_dispose__1995;
  v37 = 0;
  v29[0] = v11;
  v29[1] = 3221225472;
  v29[2] = __ML3MigrationFunction1450010to1450020_block_invoke_1598;
  v29[3] = &unk_1E5B5C7B0;
  v13 = v3;
  v30 = v13;
  v31 = &v32;
  objc_msgSend(v12, "enumerateKeysAndObjectsUsingBlock:", v29);
  if (!v33[5])
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v43 = 0x3032000000;
    v44 = __Block_byref_object_copy__1994;
    v45 = __Block_byref_object_dispose__1995;
    v46 = 0;
    -[ML3DatabaseConnection executeQuery:withParameters:](v8, "executeQuery:withParameters:", CFSTR("SELECT key, value FROM ubiquitous_database_properties"), 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = v11;
    v24 = 3221225472;
    v25 = __ML3MigrationFunction1450010to1450020_block_invoke_1610;
    v26 = &unk_1E5B64FB8;
    v27 = v13;
    p_buf = &buf;
    objc_msgSend(v17, "enumerateRowsWithBlock:", &v23);
    if (*(_QWORD *)(*((_QWORD *)&buf + 1) + 40))
    {
      v18 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = *(_QWORD *)(*((_QWORD *)&buf + 1) + 40);
        *(_DWORD *)v40 = 138543362;
        v41 = v19;
        _os_log_impl(&dword_1AC149000, v18, OS_LOG_TYPE_ERROR, "There was an error when migrating SBK table while inserting data from SBK properties table, %{public}@", v40, 0xCu);
      }
      v16 = 1;
    }
    else
    {
      if (-[ML3DatabaseConnection close](v8, "close"))
      {
        v16 = 0;
LABEL_16:

        _Block_object_dispose(&buf, 8);
        goto LABEL_17;
      }
      v18 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v40 = 0;
        _os_log_impl(&dword_1AC149000, v18, OS_LOG_TYPE_ERROR, "There was an error closing the SBK database file. Migration step will continue, but StoreBookkeeper database files might not be deleted.", v40, 2u);
      }
      v16 = 0;
    }

    goto LABEL_16;
  }
  v14 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v15 = v33[5];
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v15;
    _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_ERROR, "There was an error when migrating SBK table while inserting data from SBK %{public}@", (uint8_t *)&buf, 0xCu);
  }

  v16 = 1;
LABEL_17:

  _Block_object_dispose(&v32, 8);
  if (v16)
  {
LABEL_25:
    v20 = 0;
    goto LABEL_26;
  }
LABEL_18:
  if (!objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE cloud_kvs SET bookmark_sync_revision = IFNULL((SELECT metadata_entity_revision FROM item_upp WHERE cloud_kvs.key = item_upp.bookkeeper_identifier), 0)"), v22, v23, v24, v25, v26)|| !objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_kvs (item_pid INTEGER PRIMARY KEY, key TEXT NOT NULL DEFAULT '')"))|| !objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_kvs (item_pid, key) SELECT item_pid, bookkeeper_identifier FROM item_upp"))|| !objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_upp"))|| !objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE IF EXISTS ubiquitous_bookmarks"))|| !objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE IF EXISTS item_storebookmark_identifier")))
  {
    goto LABEL_25;
  }
  objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
  objc_msgSend(v4, "setCurrentUserVersion:", 1450020);
  v20 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1450020;"));
LABEL_26:

  return v20;
}

void sub_1AC239CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  _Block_object_dispose((const void *)(v14 - 176), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3MigrationFunction1450000to1450010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE IF NOT EXISTS item_upp (item_pid INTEGER PRIMARY KEY, bookkeeper_identifier TEXT NOT NULL DEFAULT '', metadata_timestamp REAL, metadata_entity_revision INTEGER)")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1450010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1450010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1430000to1450000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE cloud_kvs (key TEXT PRIMARY KEY, play_count_user INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0, bookmark_sync_timestamp INTEGER NOT NULL DEFAULT 0, bookmark_sync_revision INTEGER NOT NULL DEFAULT 0)")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1450000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1450000;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410210to1430000(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[4];
  id v26;
  uint8_t buf[4];
  void *v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v3, "executeQuery:", CFSTR("SELECT item_pid, (CASE WHEN store_item_id != 0 THEN store_item_id ELSE subscription_store_item_id END) AS adam_id FROM item_store JOIN item_upp USING (item_pid) WHERE adam_id != 0 AND adam_id != bookkeeper_identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __ML3MigrationFunction1410210to1430000_block_invoke;
  v25[3] = &unk_1E5B65EE0;
  v7 = v5;
  v26 = v7;
  objc_msgSend(v6, "enumerateRowsWithBlock:", v25);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v22;
    while (2)
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v22 != v11)
          objc_enumerationMutation(v8);
        v13 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v12);
        v20 = 0;
        v14 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("UPDATE item_upp SET bookkeeper_identifier = ? WHERE item_pid = ?"), v13, &v20);
        v15 = v20;
        v16 = v15;
        if ((v14 & 1) == 0)
        {
          v18 = os_log_create("com.apple.amp.medialibrary", "Migration");
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v28 = v16;
            _os_log_impl(&dword_1AC149000, v18, OS_LOG_TYPE_ERROR, "Failed to update item_upp with error: %@", buf, 0xCu);
          }

          v17 = 0;
          goto LABEL_13;
        }

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
      if (v10)
        continue;
      break;
    }
  }

  objc_msgSend(v4, "setCurrentUserVersion:", 1430000);
  v17 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1430000;"));
LABEL_13:

  return v17;
}

uint64_t ML3MigrationFunction1410200to1410210(void *a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v3 = (void *)MEMORY[0x1E0C99E98];
  v4 = a2;
  v5 = a1;
  +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "fileURLWithPath:isDirectory:", v6, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "removeItemAtURL:error:", v7, 0);

  objc_msgSend(v4, "setNeedsToAutogenerateArtworkVariants:", 1);
  objc_msgSend(v4, "setCurrentUserVersion:", 1410210);

  v9 = objc_msgSend(v5, "executeUpdate:", CFSTR("PRAGMA user_version = 1410210;"));
  return v9;
}

uint64_t ML3MigrationFunction1410190to1410200(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET playback_endpoint_type = (CASE WHEN sync_id THEN 0 WHEN purchase_history_id THEN 1 WHEN is_ota_purchased THEN 0 WHEN is_subscription THEN 3 ELSE 0 END) WHERE store_saga_id = 0")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1410200);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410200;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410180to1410190(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN cloud_playback_endpoint_type INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET cloud_playback_endpoint_type = playback_endpoint_type"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType")))
  {
    objc_msgSend(v4, "setNeedsToUpdateSortMap:", 1);
    objc_msgSend(v4, "setForceUpdateOriginals:", 1);
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1410190);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410190;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410170to1410180(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_stats ADD COLUMN user_rating_is_derived INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN user_rating_is_derived INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1410180);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410180;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410160to1410170(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN audio_track_locale TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1410170);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410170;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410150to1410160(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET distinguished_kind = 0 WHERE cloud_is_curator_playlist OR is_external_vendor_playlist")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1410160);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410160;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410140to1410150(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN date_played_local NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN date_played_local NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album SET date_played_local = IFNULL((SELECT date_played FROM play_event WHERE play_event.album_pid = album.album_pid), 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET date_played_local = IFNULL((SELECT date_played FROM play_event WHERE play_event.container_pid = container.container_pid), 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE play_event")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1410150);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410150;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410130to1410140(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE genius_config_new (id INTEGER PRIMARY KEY, version INTEGER UNIQUE, default_num_results INTEGER NOT NULL DEFAULT 0, min_num_results INTEGER NOT NULL DEFAULT 0, data BLOB)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO genius_config_new (id, version, default_num_results, min_num_results, data) SELECT id, version, IFNULL(default_num_results, 0), IFNULL(min_num_results, 0), data FROM genius_config"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE genius_config"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE genius_config_new RENAME TO genius_config"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE genius_metadata_new (genius_id INTEGER PRIMARY KEY, revision_level INTEGER NOT NULL DEFAULT 0, version INTEGER NOT NULL DEFAULT 0, checksum INTEGER NOT NULL DEFAULT 0, data BLOB)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO genius_metadata_new (genius_id, revision_level, version, checksum, data) SELECT genius_id, IFNULL(revision_level, 0), IFNULL(version, 0), IFNULL(checksum, 0), data FROM genius_metadata"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE genius_metadata"))&& objc_msgSend(
                       v3,
                       "executeUpdate:",
                       CFSTR("ALTER TABLE genius_metadata_new RENAME TO genius_metadata"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, app_data, contains_classical_work) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, IFNULL(season_number, 0), album_year, keep_local, keep_local_status, app_data, contains_classical_work FROM album"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE album"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_new RENAME TO album"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_extra_new (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER NOT NULL DEFAULT 0, track_count INTEGER NOT NULL DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER NOT NULL DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER NOT NULL DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER NOT NULL DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0, version TEXT NOT NULL DEFAULT '', display_version TEXT NOT NULL DEFAULT '', classical_work TEXT NOT NULL DEFAULT '', classical_movement TEXT NOT NULL DEFAULT '', classical_movement_count INTEGER NOT NULL DEFAULT 0, classical_movement_number INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_extra_new (item_pid, title, sort_title, disc_count, track_count, total_time_ms, year, location, file_size, integrity, is_audible_audio_book, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, bpm, genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, category_id, location_kind_id, version, display_version, classical_work, classical_movement, classical_movement_count, classical_movement_number) SELECT item_pid, title, sort_title, IFNULL(disc_count, 0), IFNULL(track_count, 0), total_time_ms, IFNULL(year, 0), location, file_size, integrity, is_audible_audio_book, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, IFNULL(bpm, 0), genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, IFNULL(category_id, 0), location_kind_id, version, display_version, classical_work, classical_movement, classical_movement_count, classical_movement_number FROM item_extra"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_extra"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra_new RENAME TO item_extra"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE entity_changes (class INTEGER NOT NULL, entity_pid INTEGER NOT NULL, source_pid INTEGER NOT NULL, change_type INTEGER NOT NULL, changes TEXT NOT NULL DEFAULT '', UNIQUE (class, entity_pid, source_pid, change_type))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE source (source_pid INTEGER PRIMARY KEY, source_name TEXT, last_sync_date INTEGER NOT NULL DEFAULT 0, last_sync_revision INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE library_property (property_pid INTEGER PRIMARY KEY, source_id INTEGER, key TEXT, value TEXT, UNIQUE (source_id, key))")))
  {
    objc_msgSend(v4, "setNeedsToUpdateSortMap:", 1);
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1410140);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410140;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410120to1410130(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN cloud_version_hash TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1410130);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410130;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410110to1410120(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS SortMapSortKeys"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemArtistGrouping"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS AlbumArtistGrouping"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS AlbumGrouping"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ComposerGrouping"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS GenreGrouping"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS AlbumRepresentativeItemPID"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemArtistRepresentativeItemPID"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS AlbumArtistRepresentativeItemPID"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS GenreRepresentativeItemPID"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ComposerRepresentativeItemPID"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemArtistKeepLocal"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS AlbumKeepLocal"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS AlbumArtistKeepLocal"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ContainerKeepLocal"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS GenreKeepLocal"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ComposerKeepLocal"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ArtworkTokenArtworkToken"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ArtworkTokenEntityPIDEntityType"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS BestArtworkTokenEntityPIDEntityType"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ContainerItemItemPid"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ContainerItemPosition"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemTitleInAlbum"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemTitleInAlbumArtist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemTitleInItemArtist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemTitleInComposer"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemTitleInGenre"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemTitle"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbum"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbumByAlbumArtist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemItemArtist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbumArtist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemComposer"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemGenre"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemSeries"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemDateCreated"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemExtraGeniusID"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemStoreSagaID"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemStoreItemID"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemSubscriptionStoreItemID"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemStatsPlayCount"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemStatsPlayDate"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemStatsUserRating"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemStatsRememberBookmark"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemUPP_BookkeeperItemLookup"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemUPP_BookkeeperIdentifier"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemKeepLocal")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1410120);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410120;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410100to1410110(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToReloadCollectionRepresentativeItems:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1410110);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1410110;"));
  return v5;
}

uint64_t ML3MigrationFunction1410090to1410100(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN contains_classical_work INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album SET contains_classical_work=1 WHERE album_pid IN (SELECT DISTINCT(album_pid) FROM item JOIN item_extra USING (item_pid) WHERE classical_work!='' OR (show_composer=1 AND grouping!=''))")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1410100);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410100;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410080to1410090(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET is_subscription = 0 WHERE playback_endpoint_type = 2"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET is_subscription = 1 WHERE playback_endpoint_type = 3")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1410090);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410090;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410070to1410080(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET sync_id=container_pid WHERE is_src_remote=1 AND store_cloud_id=0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1410080);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410080;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410060to1410070(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN cloud_album_id TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1410070);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410070;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410050to1410060(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  id v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _QWORD v34[3];

  v34[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (MGGetBoolAnswer()
    && !objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'MLArtworkShouldConvertToASTC')")))
  {
    v22 = 0;
  }
  else
  {
    v25 = v4;
    v26 = v3;
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x1E0C99E98];
    +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "fileURLWithPath:isDirectory:", v7, 1);
    v8 = objc_claimAutoreleasedReturnValue();

    v9 = *MEMORY[0x1E0C999D0];
    v34[0] = *MEMORY[0x1E0C999D0];
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v34, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v5;
    v24 = (void *)v8;
    objc_msgSend(v5, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v8, v10, 4, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v12 = v11;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v30 != v15)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
          v28 = 0;
          objc_msgSend(v17, "getResourceValue:forKey:error:", &v28, v9, 0);
          v18 = v28;
          if ((objc_msgSend(v18, "BOOLValue") & 1) == 0)
          {
            objc_msgSend(v17, "pathExtension");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = objc_msgSend(v19, "isEqualToString:", CFSTR("jpeg"));

            if (v20)
            {
              objc_msgSend(v17, "URLByDeletingPathExtension");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v27, "moveItemAtURL:toURL:error:", v17, v21, 0);

            }
          }

        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      }
      while (v14);
    }

    v3 = v26;
    if (objc_msgSend(v26, "executeUpdate:", CFSTR("UPDATE artwork SET relative_path = SUBSTR(relative_path, 0, 41)")))
    {
      v4 = v25;
      objc_msgSend(v25, "setCurrentUserVersion:", 1410060);
      v22 = objc_msgSend(v26, "executeUpdate:", CFSTR("PRAGMA user_version = 1410060;"));
    }
    else
    {
      v22 = 0;
      v4 = v25;
    }

  }
  return v22;
}

uint64_t ML3MigrationFunction1410040to1410050(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE play_event (play_event_pid INTEGER PRIMARY KEY, date_played INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, container_pid INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO play_event (date_played, container_pid) SELECT date_played, container_pid FROM container WHERE is_hidden = 0 AND date_played > 0 ORDER BY date_played DESC")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1410050);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410050;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410030to1410040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container_item SET position = position - 1 WHERE container_pid IN (SELECT DISTINCT(container_pid) FROM container_item WHERE container_pid IN (SELECT DISTINCT(container_pid) FROM container_item WHERE position > 0) AND container_pid NOT IN (SELECT container_pid FROM container_item WHERE position = 0))")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1410040);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410040;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410020to1410030(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET playback_endpoint_type = (CASE WHEN sync_id THEN 0 WHEN purchase_history_id THEN 1 WHEN is_ota_purchased THEN 0 WHEN is_subscription THEN 3 ELSE 0 END) WHERE store_saga_id = 0")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1410030);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410030;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410010to1410020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_video ADD COLUMN has_hls INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE lyrics ADD COLUMN store_lyrics_available INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1410020);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410020;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1410000to1410010(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void *v25;
  id v26;
  id obj;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[5];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD v44[4];
  id v45;
  _QWORD v46[4];
  uint64_t v47;
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v26 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_item (container_item_pid INTEGER PRIMARY KEY, container_pid INTEGER NOT NULL DEFAULT 0, item_pid INTEGER NOT NULL DEFAULT 0, position INTEGER NOT NULL DEFAULT 0)")))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "executeQuery:", CFSTR("SELECT container_pid FROM container WHERE smart_criteria IS NULL OR smart_is_genius"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 3221225472;
    v44[2] = __ML3MigrationFunction1410000to1410010_block_invoke;
    v44[3] = &unk_1E5B65EE0;
    v5 = v4;
    v45 = v5;
    objc_msgSend(v25, "enumerateRowsWithBlock:", v44);
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    obj = v5;
    v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
    if (v29)
    {
      v28 = *(_QWORD *)v41;
      v32 = 1;
      while (2)
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v41 != v28)
          {
            v7 = v6;
            objc_enumerationMutation(obj);
            v6 = v7;
          }
          v30 = v6;
          v8 = *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * v6);
          v34 = 0;
          v35 = &v34;
          v36 = 0x3032000000;
          v37 = __Block_byref_object_copy__1994;
          v38 = __Block_byref_object_dispose__1995;
          v39 = 0;
          v47 = v8;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v47, 1, v25);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "executeQuery:withParameters:", CFSTR("SELECT item_pid_data FROM container_items WHERE container_pid = ?"), v9);
          v31 = (void *)objc_claimAutoreleasedReturnValue();

          v33[0] = MEMORY[0x1E0C809B0];
          v33[1] = 3221225472;
          v33[2] = __ML3MigrationFunction1410000to1410010_block_invoke_2;
          v33[3] = &unk_1E5B65200;
          v33[4] = &v34;
          objc_msgSend(v31, "enumerateRowsWithBlock:", v33);
          v10 = (void *)v35[5];
          if (v10
            && (v11 = objc_msgSend(objc_retainAutorelease(v10), "bytes"),
                v12 = objc_msgSend((id)v35[5], "length"),
                v12 >= 8))
          {
            v14 = 0;
            v15 = (v12 >> 3) - 1;
            do
            {
              v16 = *(_QWORD *)(v11 + 8 * v14);
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v32 + v14);
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v46[0] = v17;
              v46[1] = v8;
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v16);
              v18 = (void *)objc_claimAutoreleasedReturnValue();
              v46[2] = v18;
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v14);
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              v46[3] = v19;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v46, 4);
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              v13 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("INSERT INTO container_item (container_item_pid, container_pid, item_pid, position) VALUES (?, ?, ?, ?)"), v20, 0);

              v21 = v14 + 1;
              if (v15 == v14)
                v22 = 0;
              else
                v22 = v13;
              ++v14;
            }
            while ((v22 & 1) != 0);
            v32 += v21;
          }
          else
          {
            v13 = 1;
          }

          _Block_object_dispose(&v34, 8);
          if (!v13)
          {

            goto LABEL_23;
          }
          v6 = v30 + 1;
        }
        while (v30 + 1 != v29);
        v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
        if (v29)
          continue;
        break;
      }
    }

    if ((objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE IF EXISTS container_items")) & 1) != 0)
    {
      objc_msgSend(v26, "setNeedsToRecreateIndexes:", 1);
      objc_msgSend(v26, "setNeedsToRecreateTriggers:", 1);
      objc_msgSend(v26, "setCurrentUserVersion:", 1410010);
      v23 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410010;"));
    }
    else
    {
LABEL_23:
      v23 = 0;
    }

  }
  else
  {
    v23 = 0;
  }

  return v23;
}

void sub_1AC23B7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3MigrationFunction1360010to1410000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN classical_work TEXT NOT NULL DEFAULT ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN classical_movement TEXT NOT NULL DEFAULT ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN classical_movement_count INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN classical_movement_number INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1410000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1410000;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1360000to1360010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET is_subscription = 0 WHERE playback_endpoint_type = 2"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET is_subscription = 1 WHERE playback_endpoint_type = 3")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1360010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1360010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1350060to1360000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET playback_endpoint_type = (CASE WHEN sync_id THEN 0 WHEN purchase_history_id THEN 1 WHEN is_ota_purchased THEN 0 WHEN is_subscription THEN 3 ELSE 0 END) WHERE store_saga_id = 0")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1360000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1360000;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1350050to1350060(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToReloadCollectionRepresentativeItems:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1350060);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1350060;"));
  return v5;
}

uint64_t ML3MigrationFunction1350040to1350050(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN external_vendor_identifier TEXT NOT NULL DEFAULT ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN external_vendor_display_name TEXT NOT NULL DEFAULT ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN external_vendor_container_tag TEXT NOT NULL DEFAULT ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1350050);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1350050;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1350030to1350040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_remove_source_setNeedsReporting"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET needs_reporting = 0 WHERE store_saga_id = 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1350040);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1350040;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1350020to1350030(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_insert_item_setInMyLibraryColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_update_item_setInMyLibraryColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN cloud_in_my_library INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET cloud_in_my_library = 1 WHERE store_saga_id != 0")))
  {
    ML3MigrationRemoveNonLibraryItemsFromContainers(v3);
    objc_msgSend(v4, "setNeedsToReloadContainerMediaTypes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1350030);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1350030;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1350010to1350020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_new (item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER NOT NULL DEFAULT 0, track_number INTEGER NOT NULL DEFAULT 0, episode_sort_id INTEGER NOT NULL DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, in_my_library INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, date_added INTEGER NOT NULL DEFAULT 0, show_composer INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_new (item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, show_composer) SELECT item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, IFNULL(disc_number, 0), IFNULL(track_number, 0), IFNULL(episode_sort_id, 0), base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, IFNULL(show_composer, 0) FROM item"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_new RENAME TO item")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1350020);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1350020;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1350000to1350010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album SET app_data = NULL WHERE LENGTH(app_data) = 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_artist SET app_data = NULL WHERE LENGTH(app_data) = 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album_artist SET app_data = NULL WHERE LENGTH(app_data) = 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album SET grouping_key = NULL WHERE LENGTH(grouping_key) = 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET smart_criteria = NULL WHERE LENGTH(smart_criteria) = 0"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container_items SET item_pid_data = NULL WHERE LENGTH(item_pid_data) = 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE chapter SET chapter_data = NULL WHERE LENGTH(chapter_data) = 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1350010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1350010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1330010to1350010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN app_data BLOB")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1350010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1350010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1330000to1330010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item ADD COLUMN show_composer INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1330010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1330010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1320000to1330000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET is_protected = 1 WHERE item_pid IN (SELECT item_pid FROM item JOIN item_store USING (item_pid) WHERE base_location_id >= 3840 AND is_protected = 0 AND key_id != 0)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1330000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1330000;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1310050to1320000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET playback_endpoint_type = 1 WHERE store_saga_id = 0 AND purchase_history_id != 0 AND playback_endpoint_type = 3")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1320000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1320000;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1310040to1310050(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  objc_msgSend(a2, "setCurrentUserVersion:", 1310050);
  v4 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1310050;"));

  return v4;
}

uint64_t ML3MigrationFunction1310030to1310040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DELETE FROM best_artwork_token WHERE available_artwork_token = '' AND fetchable_artwork_token = ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1310040);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1310040;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1310020to1310030(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFNumberRef i;
  void *v12;
  void *v13;
  int v14;
  CFNumberRef v15;
  void *v16;
  int v17;
  void *v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  int v23;
  void *v24;
  int v25;
  void *v26;
  uint64_t v27;
  id v29;
  id obj;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t valuePtr;
  CFNumberRef v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD v41[2];
  CFNumberRef v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "executeQuery:", CFSTR("SELECT item_pid FROM item WHERE (media_type & 8 != 0) AND album_pid = 0"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectsInColumn:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  obj = v6;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v43, 16);
  if (v7)
  {
    v8 = v7;
    v31 = *(_QWORD *)v33;
    v29 = v4;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v33 != v31)
          objc_enumerationMutation(obj);
        v10 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * v9);
        valuePtr = ML3CreateIntegerUUID();
        for (i = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr); ; i = v15)
        {
          v42 = i;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v42, 1);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "executeQuery:withParameters:", CFSTR("SELECT 1 FROM album WHERE album_pid = ?"), v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "hasAtLeastOneRow");

          if (!v14)
            break;
          valuePtr = ML3CreateIntegerUUID();
          v15 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);

        }
        v41[0] = i;
        v41[1] = v10;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v41, 2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("INSERT INTO album (album_pid, representative_item_pid) VALUES(?, ?)"), v16, 0);

        if (!v17)
          goto LABEL_17;
        v40[0] = i;
        v40[1] = v10;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v40, 2);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("UPDATE item SET album_pid = ? WHERE item_pid = ?"), v18, 0);

        if (!v19)
          goto LABEL_17;
        v39 = v10;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v39, 1);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("INSERT OR REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES(?, 0, 0, 0)"), v20, 0);

        if (!v21
          || (v38 = v10,
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v38, 1),
              v22 = (void *)objc_claimAutoreleasedReturnValue(),
              v23 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("DELETE FROM entity_revision WHERE entity_pid = ? AND revision_type > 0"), v22, 0), v22, !v23))
        {
LABEL_17:

LABEL_18:
          v26 = obj;

          v27 = 0;
          v4 = v29;
          goto LABEL_19;
        }
        v37 = i;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v37, 1);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v3, "executeUpdate:withParameters:error:", CFSTR("INSERT OR REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES(?, 0, 4, 0)"), v24, 0);

        if (!v25)
          goto LABEL_18;
        ++v9;
      }
      while (v9 != v8);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v43, 16);
      v4 = v29;
      if (v8)
        continue;
      break;
    }
  }
  v26 = obj;

  objc_msgSend(v4, "setCurrentUserVersion:", 1310030);
  v27 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1310030;"));
LABEL_19:

  return v27;
}

uint64_t ML3MigrationFunction1290010to1310020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_insert_item_setInMyLibraryColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_update_item_setInMyLibraryColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN sync_in_my_library INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET sync_in_my_library = 1 WHERE sync_id != 0")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1310020);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1310020;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1290000to1290010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemArtistRepresentativeItemPID"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS AlbumArtistRepresentativeItemPID"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS GenreRepresentativeItemPID"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ComposerRepresentativeItemPID")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1290010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1290010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280280to1290000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_stats ADD COLUMN liked_state_changed INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1290000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1290000;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280270to1280280(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_insert_item_setInMyLibraryColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_update_item_setInMyLibraryColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET store_saga_id=store_saga_id")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280280);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280280;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280260to1280270(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_seed_new (container_pid INTEGER PRIMARY KEY, item_pid INTEGER NOT NULL DEFAULT 0, seed_order INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_seed_new (container_pid, item_pid, seed_order) SELECT container_pid, item_pid, seed_order FROM container_seed"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container_seed"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_seed_new RENAME TO container_seed")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1280270);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280270;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280250to1280260(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container")))
  {
    objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE _MLDatabaseProperties SET value = 0 WHERE key = 'MLSyncClientSyncAnchor'"));
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280260);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280260;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280240to1280250(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v3, "setNeedsToRecreateTriggers:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1280250);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1280250;"));
  return v5;
}

uint64_t ML3MigrationFunction1280230to1280240(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET distinguished_kind = 10000 WHERE distinguished_kind = 35")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280240);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280240;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280220to1280230(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET keep_local = 1 WHERE base_location_id >= 300")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1280230);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280230;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280210to1280220(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_insert_item_setInMyLibraryColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_update_item_setInMyLibraryColumn")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280220);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280220;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280200to1280210(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE local_playback_event")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1280210);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280210;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280190to1280200(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET store_saga_id = 0 WHERE store_saga_id = -3"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET remote_location_id = 50 WHERE (remote_location_id = 250 OR remote_location_id  = 201) AND (SELECT 1 FROM item_store WHERE item.item_pid = item_store.item_pid AND subscription_store_item_id != 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET cloud_asset_available = 1 WHERE IFNULL(purchase_history_redownload_params, '') != '' OR IFNULL(match_redownload_params, '') != ''")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280200);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280200;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280180to1280190(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN is_subscription INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280190);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280190;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280170to1280180(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist ADD COLUMN app_data BLOB"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist ADD COLUMN app_data BLOB")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1280180);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280180;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280160to1280170(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  objc_msgSend(a2, "setCurrentUserVersion:", 1280170);
  v4 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280170;"));

  return v4;
}

uint64_t ML3MigrationFunction1280150to1280160(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemTitle"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemTitle_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbum"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbum_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemItemArtist"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemItemArtist_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbumArtist"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbumArtist_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemComposer"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemComposer_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemGenre"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemGenre_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemSeries"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemSeries_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemExtraDateCreated"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemExtraIsCompilation"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item ADD COLUMN in_my_library INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item ADD COLUMN is_compilation INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item ADD COLUMN date_added INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET in_my_library = (remote_location_id != 250), is_compilation = (SELECT is_compilation FROM item_extra WHERE item.item_pid = item_extra.item_pid), date_added = (SELECT date_created FROM item_extra WHERE item.item_pid = item_extra.item_pid)"))&& objc_msgSend(v3, "schemaDeleteColumns:inTable:", &unk_1E5BA8A60, CFSTR("item_extra")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280160);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280160;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280140to1280150(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '', needs_reporting INTEGER NOT NULL DEFAULT 0, subscription_store_item_id INTEGER NOT NULL DEFAULT 0, playback_endpoint_type INTEGER NOT NULL DEFAULT 0, is_mastered_for_itunes INTEGER NOT NULL DEFAULT 0, radio_station_id TEXT NOT NULL DEFAULT '', advertisement_unique_id TEXT NOT NULL DEFAULT '', advertisement_type INTEGER NOT NULL DEFAULT 0, is_artist_uploaded_content INTEGER NOT NULL DEFAULT 0, cloud_asset_available INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, needs_reporting, subscription_store_item_id, playback_endpoint_type, is_mastered_for_itunes, radio_station_id, advertisement_type, is_artist_uploaded_content) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, needs_reporting, subscription_store_item_id, playback_endpoint_type, is_mastered_for_itunes, radio_station_id, advertisement_type, is_artist_uploaded_content FROM item_store"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_store"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store_new RENAME TO item_store")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280150);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280150;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280130to1280140(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN is_artist_uploaded_content INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1280140);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280140;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280120to1280130(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_seed_new (container_pid INTEGER PRIMARY KEY, item_pid INTEGER NOT NULL DEFAULT 0, seed_order INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_seed_new (container_pid, item_pid, seed_order) SELECT container_pid, item_pid, seed_order FROM container_seed"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container_seed"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_seed_new RENAME TO container_seed")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1280130);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280130;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280110to1280120(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA auto_vacuum = 0;")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1280120);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280120;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280100to1280110(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280110);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280110;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280090to1280100(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemMediaType")))
  {
    objc_msgSend(v4, "setNeedsToUpdateSortMap:", 1);
    objc_msgSend(v4, "setForceUpdateOriginals:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280100);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280100;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280080to1280090(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToUpdateSortMap:", 1);
  objc_msgSend(v3, "setForceUpdateOriginals:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1280090);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1280090;"));
  return v5;
}

uint64_t ML3MigrationFunction1280070to1280080(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if ((ML3MigrationColumnExistsInTable(v3, CFSTR("radio_station_id"), CFSTR("item_store")) & 1) != 0
    || objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN radio_station_id TEXT NOT NULL DEFAULT ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN advertisement_unique_id INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN advertisement_type INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1280080);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280080;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280060to1280070(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToUpdateSortMap:", 1);
  objc_msgSend(v3, "setForceUpdateOriginals:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1280070);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1280070;"));
  return v5;
}

uint64_t ML3MigrationFunction1280050to1280060(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE artwork_token SET artwork_source_type = 200 WHERE artwork_source_type = 1"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE best_artwork_token SET fetchable_artwork_source_type = 200 WHERE fetchable_artwork_source_type = 1"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE artwork SET artwork_source_type = 200 WHERE artwork_source_type = 1"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE artwork_token SET artwork_source_type = 300 WHERE artwork_source_type = 2"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE best_artwork_token SET fetchable_artwork_source_type = 300 WHERE fetchable_artwork_source_type = 2"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE artwork SET artwork_source_type = 300 WHERE artwork_source_type = 2"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE artwork_token SET artwork_source_type = 400 WHERE artwork_source_type = 3"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE best_artwork_token SET fetchable_artwork_source_type = 400 WHERE fetchable_artwork_source_type = 3"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE artwork SET artwork_source_type = 400 WHERE artwork_source_type = 3"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE artwork_token SET artwork_source_type = 500 WHERE artwork_source_type = 4"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE best_artwork_token SET fetchable_artwork_source_type = 500 WHERE fetchable_artwork_source_type = 4"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE artwork SET artwork_source_type = 500 WHERE artwork_source_type = 4"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE artwork_token_new (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_source_type, artwork_type, entity_pid, entity_type))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT OR REPLACE INTO artwork_token_new SELECT * FROM artwork_token"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE artwork_token"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE artwork_token_new RENAME TO artwork_token")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280060);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280060;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280040to1280050(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0,date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1,is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0,is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0,play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0,smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0,smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0,smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0,album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0,filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0,container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0,has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0,cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_id TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0,cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280050);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280050;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280030to1280040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "schemaRenameColumn:inTable:toNewColumnName:", CFSTR("matched_store_item_id"), CFSTR("item_store"), CFSTR("subscription_store_item_id")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    v14 = 0;
    v7 = "Failed to rename matched_store_item_id column.";
    v8 = (uint8_t *)&v14;
LABEL_17:
    _os_log_impl(&dword_1AC149000, v6, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    goto LABEL_18;
  }
  if ((objc_msgSend(v3, "schemaAddColumnDefinition:toTable:", CFSTR("playlist_author_id TEXT NOT NULL DEFAULT ''"), CFSTR("container")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    v13 = 0;
    v7 = "Failed to add playlist_author_id column.";
    v8 = (uint8_t *)&v13;
    goto LABEL_17;
  }
  if ((objc_msgSend(v3, "schemaAddColumnDefinition:toTable:", CFSTR("radio_station_id TEXT NOT NULL DEFAULT ''"), CFSTR("item_store")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    v12 = 0;
    v7 = "Failed to add radio_station_id column.";
    v8 = (uint8_t *)&v12;
    goto LABEL_17;
  }
  if ((objc_msgSend(v3, "schemaAddColumnDefinition:toTable:", CFSTR("advertisement_unique_id INTEGER NOT NULL DEFAULT 0"), CFSTR("item_store")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    v11 = 0;
    v7 = "Failed to add advertisement_unique_id column.";
    v8 = (uint8_t *)&v11;
    goto LABEL_17;
  }
  if ((objc_msgSend(v3, "schemaAddColumnDefinition:toTable:", CFSTR("advertisement_type INTEGER NOT NULL DEFAULT 0"), CFSTR("item_store")) & 1) == 0)
  {
    v6 = os_log_create("com.apple.amp.medialibrary", "Migration");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v10 = 0;
      v7 = "Failed to add advertisement_type column.";
      v8 = (uint8_t *)&v10;
      goto LABEL_17;
    }
LABEL_18:

    v5 = 0;
    goto LABEL_19;
  }
  objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
  objc_msgSend(v4, "setCurrentUserVersion:", 1280040);
  v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280040;"));
LABEL_19:

  return v5;
}

uint64_t ML3MigrationFunction1280020to1280030(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "schemaDeleteColumn:inTable:", CFSTR("is_playlist_only"), CFSTR("item_store")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280030);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280030;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280010to1280020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE artwork_token (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE best_artwork_token (entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, available_artwork_token TEXT NOT NULL DEFAULT '', fetchable_artwork_token TEXT NOT NULL DEFAULT '', fetchable_artwork_source_type INTEGER NOT NULL DEFAULT 0, UNIQUE (entity_pid, entity_type, artwork_type))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX ArtworkTokenArtworkToken ON artwork_token (artwork_token)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX ArtworkTokenEntityPIDEntityType ON artwork_token (entity_pid, entity_type)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE artwork ADD COLUMN interest_data BLOB"))&& objc_msgSend(v3, "executeUpdate:",
                       CFSTR("INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT cloud_artwork_token, 1, 1, item_pid, 0 FROM item_artwork WHERE cloud_artwork_token != ''"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT sync_artwork_token, 2, 1, item_pid, 0 FROM item_artwork WHERE sync_artwork_token != ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT purchase_history_artwork_token, 3, 1, item_pid, 0 FROM item_artwork WHERE purchase_history_artwork_token != ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT store_artwork_token, 4, 1, item_pid, 0 FROM item_artwork WHERE store_artwork_token != ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT cloud_screenshot_token, 1, 2, item_pid, 0 FROM item_screenshot WHERE cloud_screenshot_token != ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT sync_screenshot_token, 2, 2, item_pid, 0 FROM item_screenshot WHERE sync_screenshot_token != ''"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT purchase_history_screenshot_token, 3, 2, item_pid, 0 FROM item_screenshot WHERE purchase_history_screenshot_token != ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT store_screenshot_token, 4, 2, item_pid, 0 FROM item_screenshot WHERE store_screenshot_token != ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT artist_artwork_token, 4, 4, item_artist_pid, 2 FROM item_artist WHERE artist_artwork_token != ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT artist_artwork_token, 4, 4, album_artist_pid, 7 FROM album_artist WHERE artist_artwork_token != ''"))&& (ML3MigrationUpdateAllBestArtworkTokens(v3), objc_msgSend(v3, "executeUpdate:",
                        CFSTR("CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)")))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status FROM album"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE album"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_new RENAME TO album"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status FROM item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist_new RENAME TO item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0,  store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status FROM album_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE album_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist_new RENAME TO album_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE composer_new (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO composer_new (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status FROM composer"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE composer"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE composer_new RENAME TO composer"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE genre_new (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL UNIQUE, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO genre_new (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status FROM genre"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE genre"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE genre_new RENAME TO genre"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container_artwork"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_artwork"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_screenshot")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1280020);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280020;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1280000to1280010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if ((ML3MigrationColumnExistsInTable(v3, CFSTR("pending_checksum"), CFSTR("lyrics")) & 1) != 0
    || objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE lyrics_new (item_pid INTEGER PRIMARY KEY, checksum INTEGER NOT NULL DEFAULT 0, pending_checksum INTEGER NOT NULL DEFAULT 0, lyrics TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO lyrics_new (item_pid, checksum, pending_checksum, lyrics) SELECT item_pid, IFNULL(checksum, 0), IFNULL(checksum, 0), IFNULL(lyrics, '') FROM lyrics"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE lyrics"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE lyrics_new RENAME TO lyrics")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1280010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1260000to1280000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN playback_endpoint_type INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN is_mastered_for_itunes INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1280000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1280000;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1240040to1260000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE lyrics_new (item_pid INTEGER PRIMARY KEY, checksum INTEGER NOT NULL DEFAULT 0, pending_checksum INTEGER NOT NULL DEFAULT 0, lyrics TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO lyrics_new (item_pid, checksum, pending_checksum, lyrics) SELECT item_pid, IFNULL(checksum, 0), IFNULL(checksum, 0), IFNULL(lyrics, '') FROM lyrics"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE lyrics"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE lyrics_new RENAME TO lyrics")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1260000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1260000;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1240030to1240040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album SET sort_album = NULL WHERE sort_album = ''")))
  {
    objc_msgSend(v4, "setNeedsToUpdateSortMap:", 1);
    objc_msgSend(v4, "setForceUpdateOriginals:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1240040);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1240040;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1240020to1240030(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  id v19;
  int v20;
  uint64_t v21;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id obj;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void *v36;
  _QWORD v37[5];
  id v38;
  uint64_t *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[4];
  id v54;
  _QWORD v55[4];
  id v56;
  _BYTE buf[24];
  uint64_t (*v58)(uint64_t, uint64_t);
  void (*v59)(uint64_t);
  id v60;
  _BYTE v61[128];
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v28 = a2;
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v32 = v3;
  objc_msgSend(v3, "executeQuery:", CFSTR("SELECT item.album_pid, album.album_artist_pid FROM item JOIN album USING (album_pid) GROUP BY item.album_pid HAVING COUNT(DISTINCT item.album_artist_pid) > 1"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v55[0] = MEMORY[0x1E0C809B0];
  v55[1] = 3221225472;
  v55[2] = __ML3MigrationFunction1240020to1240030_block_invoke;
  v55[3] = &unk_1E5B65EE0;
  v29 = v4;
  v56 = v29;
  objc_msgSend(v27, "enumerateRowsWithBlock:", v55);
  if (!objc_msgSend(v29, "count"))
    goto LABEL_25;
  v5 = os_log_create("com.apple.amp.medialibrary", "Migration");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = objc_msgSend(v29, "count");
    objc_msgSend(v29, "allKeys");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v7;
    _os_log_impl(&dword_1AC149000, v5, OS_LOG_TYPE_ERROR, "Repairing %lu misgrouped albums: %{public}@", buf, 0x16u);

  }
  objc_msgSend(v29, "allKeys");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "componentsJoinedByString:", CFSTR(", "));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SELECT ROWID, album_artist_pid, album_pid FROM item WHERE album_pid IN (%@)"), v25);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "executeQuery:", v24);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v53[0] = MEMORY[0x1E0C809B0];
  v53[1] = 3221225472;
  v53[2] = __ML3MigrationFunction1240020to1240030_block_invoke_966;
  v53[3] = &unk_1E5B65EE0;
  v8 = v29;
  v54 = v8;
  objc_msgSend(v23, "enumerateRowsWithBlock:", v53);
  objc_msgSend(v8, "allValues");
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v62, 16);
  if (!v33)
  {

LABEL_25:
    objc_msgSend(v28, "setNeedsToUpdateSortMap:", 1);
    objc_msgSend(v28, "setForceUpdateOriginals:", 1);
    objc_msgSend(v28, "setCurrentUserVersion:", 1240030);
    v21 = objc_msgSend(v32, "executeUpdate:", CFSTR("PRAGMA user_version = 1240030;"));
    goto LABEL_26;
  }
  v31 = *(_QWORD *)v50;
  v35 = 1;
  do
  {
    v9 = 0;
    do
    {
      if (*(_QWORD *)v50 != v31)
      {
        v10 = v9;
        objc_enumerationMutation(obj);
        v9 = v10;
      }
      v34 = v9;
      v36 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * v9);
      v11 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v36, "misgroupedTracks");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v13 = v12;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v45, v61, 16);
      if (v14)
      {
        v15 = *(_QWORD *)v46;
        do
        {
          for (i = 0; i != v14; ++i)
          {
            if (*(_QWORD *)v46 != v15)
              objc_enumerationMutation(v13);
            v17 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v17, "albumArtistPID"));
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "objectForKeyedSubscript:", v18);
            v19 = (id)objc_claimAutoreleasedReturnValue();
            if (!v19)
            {
              v19 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
              objc_msgSend(v11, "setObject:forKeyedSubscript:", v19, v18);
            }
            objc_msgSend(v19, "addObject:", v17);

          }
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v45, v61, 16);
        }
        while (v14);
      }

      v41 = 0;
      v42 = &v41;
      v43 = 0x2020000000;
      v44 = 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v58 = __Block_byref_object_copy__1994;
      v59 = __Block_byref_object_dispose__1995;
      v60 = 0;
      v37[0] = MEMORY[0x1E0C809B0];
      v37[1] = 3221225472;
      v37[2] = __ML3MigrationFunction1240020to1240030_block_invoke_968;
      v37[3] = &unk_1E5B5C788;
      v37[4] = v36;
      v39 = &v41;
      v38 = v32;
      v40 = buf;
      objc_msgSend(v11, "enumerateKeysAndObjectsUsingBlock:", v37);
      v20 = v35;
      if (!*((_BYTE *)v42 + 24))
        v20 = 0;
      v35 = v20;

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(&v41, 8);

      v9 = v34 + 1;
    }
    while (v34 + 1 != v33);
    v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v62, 16);
  }
  while (v33);

  if ((v35 & 1) != 0)
    goto LABEL_25;
  v21 = 0;
LABEL_26:

  return v21;
}

void sub_1AC23E890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3MigrationFunction1240010to1240020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN matched_store_item_id INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_shared INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3,
                       "executeUpdate:",
                       CFSTR("INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, representative_item_artwork_token, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, representative_item_artwork_token, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status FROM album"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE album"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_new RENAME TO album")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1240020);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1240020;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1240000to1240010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '', is_playlist_only INTEGER NOT NULL DEFAULT 0, needs_reporting INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, is_playlist_only) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, is_foreign FROM item_store"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_store"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store_new RENAME TO item_store")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1240010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1240010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1164010to1240000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN is_foreign INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_shared INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_subscriber_count, cloud_subscriber_play_count, cloud_subscriber_like_count, keep_local, keep_local_status FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1240000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1240000;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1163070to1164010(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  objc_msgSend(a2, "setCurrentUserVersion:", 1164010);
  v4 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1164010;"));

  return v4;
}

uint64_t ML3MigrationFunction1162110to1240000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN is_foreign INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_shared INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, reserved1, reserved2, reserved3, reserved4, reserved5, keep_local, keep_local_status FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1240000);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1240000;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162100to1162110(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v3, "setNeedsToRecreateTriggers:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1162110);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1162110;"));
  return v5;
}

uint64_t ML3MigrationFunction1162090to1162100(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, artist_artwork_token TEXT NOT NULL DEFAULT '', representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, artist_artwork_token, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, artist_artwork_token, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status FROM item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist_new RENAME TO item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_artist SET store_id = IFNULL((SELECT store_artist_id FROM item JOIN item_store USING (item_pid) WHERE purchase_history_id != 0 AND item.item_artist_pid = item_artist.item_artist_pid), 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, artist_artwork_token TEXT NOT NULL DEFAULT '', representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3,
                       "executeUpdate:",
                       CFSTR("INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_token,representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_token,representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status FROM album_artist"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE album_artist"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist_new RENAME TO album_artist"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album_artist SET store_id = IFNULL((SELECT store_artist_id FROM item JOIN item_store USING (item_pid) WHERE purchase_history_id = 0 AND item.album_artist_pid = album_artist.album_artist_pid), 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name, IFNULL(sync_redownload_params, '') FROM item_store"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_store"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store_new RENAME TO item_store")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1162100);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1162100;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162080to1162090(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', reserved1 INTEGER NOT NULL DEFAULT 0, reserved2 TEXT NOT NULL DEFAULT '', reserved3 INTEGER NOT NULL DEFAULT 0, reserved4 INTEGER NOT NULL DEFAULT 0, reserved5 INTEGER NOT NULL DEFAULT 0, reserved6 TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, reserved1, reserved2, reserved3, reserved4, reserved5, reserved6, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, reserved1, reserved2, reserved3, reserved4, reserved5, reserved6, keep_local, keep_local_status FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET is_editable = 1 WHERE distinguished_kind = 0 AND smart_criteria IS NULL AND smart_is_genius = 0 AND is_hidden = 0 AND is_src_remote = 0")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1162090);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1162090;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162070to1162080(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (!ML3MigrationColumnExistsInTable(v3, CFSTR("store_item_pid"), CFSTR("local_playback_event"))
    || objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE local_playback_event_new (id INTEGER PRIMARY KEY AUTOINCREMENT, item_pid INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO local_playback_event_new (id, item_pid, store_item_id, date_played) SELECT id, item_pid, store_item_pid, date_played FROM local_playback_event"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE local_playback_event"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE local_playback_event_new RENAME TO local_playback_event")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1162080);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1162080;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162060to1162070(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE local_playback_event (id INTEGER PRIMARY KEY AUTOINCREMENT, item_pid INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1162070);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1162070;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162050to1162060(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_artwork (container_pid INTEGER PRIMARY KEY, best_artwork_token TEXT NOT NULL DEFAULT '', best_artwork_source_type INTEGER NOT NULL DEFAULT 0, cloud_artwork_token TEXT NOT NULL DEFAULT '', sync_artwork_token TEXT NOT NULL DEFAULT '', purchase_history_artwork_token TEXT NOT NULL DEFAULT '', store_artwork_token TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT OR IGNORE INTO container_artwork (container_pid) SELECT container_pid FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', reserved1 INTEGER NOT NULL DEFAULT 0, reserved2 TEXT NOT NULL DEFAULT '', reserved3 INTEGER NOT NULL DEFAULT 0, reserved4 INTEGER NOT NULL DEFAULT 0, reserved5 INTEGER NOT NULL DEFAULT 0, reserved6 TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, keep_local, keep_local_status FROM container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container_new RENAME TO container"))&& objc_msgSend(v3,
                       "executeUpdate:",
                       CFSTR("CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0.0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0)"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_stats_new (item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill) SELECT item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill FROM item_stats"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_stats"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_stats_new RENAME TO item_stats")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1162060);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1162060;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162040to1162050(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v3, "setNeedsToRecreateTriggers:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1162050);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1162050;"));
  return v5;
}

uint64_t ML3MigrationFunction1162030to1162040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemComposer")))
  {
    objc_msgSend(v4, "setNeedsToUpdateSortMap:", 1);
    objc_msgSend(v4, "setForceUpdateOriginals:", 1);
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1162040);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1162040;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162020to1162030(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemExtraDateModified")))
  {
    objc_msgSend(v4, "setNeedsToUpdateSortMap:", 1);
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1162030);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1162030;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1162010to1162020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemTitle_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbum_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemItemArtist_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbumArtist_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemComposer_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemGenre_Section")))
  {
    objc_msgSend(v4, "setNeedsToUpdateSortMap:", 1);
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1162020);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1162020;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160160to1162010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN sync_redownload_params TEXT NOT NULL DEFAULT ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1162010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1162010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160150to1160160(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  int v21;
  NSObject *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint8_t buf[4];
  NSObject *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  ML3MigrationTemporaryPathFromPath(v6);
  v7 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v6, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = (void *)v7;
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v7, 1);
  v9 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "path");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v5, "fileExistsAtPath:", v10);

  v38 = (void *)v9;
  if (!v11
    || (v42 = 0,
        objc_msgSend(v5, "moveItemAtURL:toURL:error:", v8, v9, &v42),
        (v12 = v42) == 0))
  {
    v36 = v4;
    v16 = (void *)MEMORY[0x1E0C99E98];
    +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Originals"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "fileURLWithPath:isDirectory:", v17, 1);
    v13 = objc_claimAutoreleasedReturnValue();

    -[NSObject URLByDeletingLastPathComponent](v13, "URLByDeletingLastPathComponent");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = 0;
    objc_msgSend(v5, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v18, 1, 0, &v41);
    v14 = v41;

    if (v14)
    {
      v19 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v44 = v14;
        _os_log_impl(&dword_1AC149000, v19, OS_LOG_TYPE_ERROR, "Failed to create intermediate directories for new original artwork directory during migration with error: %{public}@", buf, 0xCu);
      }
    }
    else
    {
      objc_msgSend(v38, "path");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v5, "fileExistsAtPath:", v20);

      if (!v21
        || (v40 = 0,
            objc_msgSend(v5, "moveItemAtURL:toURL:error:", v38, v13, &v40),
            (v22 = v40) == 0))
      {
        v34 = v3;
        v24 = (void *)MEMORY[0x1E0C99E98];
        ML3MigrationArtworkCacheDirectoryBefore1160160();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "fileURLWithPath:isDirectory:", v25, 1);
        v19 = objc_claimAutoreleasedReturnValue();

        v26 = (void *)MEMORY[0x1E0C99E98];
        +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork/Caches"));
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "fileURLWithPath:isDirectory:", v27, 1);
        v28 = (void *)objc_claimAutoreleasedReturnValue();

        -[NSObject path](v19, "path");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v27) = objc_msgSend(v5, "fileExistsAtPath:", v29);

        if ((_DWORD)v27
          && (v39 = 0,
              objc_msgSend(v5, "moveItemAtURL:toURL:error:", v19, v28, &v39),
              (v30 = v39) != 0))
        {
          v31 = v30;
          v32 = os_log_create("com.apple.amp.medialibrary", "Migration");
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v44 = v31;
            _os_log_impl(&dword_1AC149000, v32, OS_LOG_TYPE_ERROR, "Failed to move to new cache artwork directory during migration with error: %{public}@", buf, 0xCu);
          }

          v15 = 0;
          v3 = v34;
        }
        else
        {
          objc_msgSend(v36, "setCurrentUserVersion:", 1160160, v34);
          v3 = v35;
          v15 = objc_msgSend(v35, "executeUpdate:", CFSTR("PRAGMA user_version = 1160160;"));
        }

        goto LABEL_22;
      }
      v19 = v22;
      v23 = os_log_create("com.apple.amp.medialibrary", "Migration");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v44 = v19;
        _os_log_impl(&dword_1AC149000, v23, OS_LOG_TYPE_ERROR, "Failed to move to new original artwork directory during migration with error: %{public}@", buf, 0xCu);
      }

    }
    v15 = 0;
LABEL_22:

    v4 = v36;
    goto LABEL_23;
  }
  v13 = v12;
  v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v44 = v13;
    _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_ERROR, "Failed to create new temp original artwork directory during migration with error: %{public}@", buf, 0xCu);
  }
  v15 = 0;
LABEL_23:

  return v15;
}

uint64_t ML3MigrationFunction1160140to1160150(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  _QWORD v19[4];
  id v20;

  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "executeQuery:", CFSTR("SELECT location_kind_id, kind FROM location_kind"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __ML3MigrationFunction1160140to1160150_block_invoke;
  v19[3] = &unk_1E5B65EE0;
  v8 = v5;
  v20 = v8;
  objc_msgSend(v6, "enumerateRowsWithBlock:", v19);
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 1;
  v12[0] = v7;
  v12[1] = 3221225472;
  v12[2] = __ML3MigrationFunction1160140to1160150_block_invoke_2;
  v12[3] = &unk_1E5B5C760;
  v9 = v3;
  v13 = v9;
  v14 = &v15;
  objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v12);
  if (*((_BYTE *)v16 + 24) && objc_msgSend(v9, "executeUpdate:", CFSTR("DROP TABLE location_kind")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1160150);
    v10 = objc_msgSend(v9, "executeUpdate:", CFSTR("PRAGMA user_version = 1160150;"));
  }
  else
  {
    v10 = 0;
  }

  _Block_object_dispose(&v15, 8);
  return v10;
}

void sub_1AC23FC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3MigrationFunction1160130to1160140(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET play_order = 40 WHERE store_cloud_id != 0 AND play_order = 37"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET play_order = 41 WHERE store_cloud_id != 0 AND play_order = 38"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET play_order = 43 WHERE store_cloud_id != 0 AND play_order = 39"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET play_order =  1 WHERE store_cloud_id != 0 AND play_order = 40"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET play_order = 44 WHERE store_cloud_id != 0 AND play_order = 41"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET play_order = 45 WHERE store_cloud_id != 0 AND play_order = 42"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET play_order = 46 WHERE store_cloud_id != 0 AND play_order = 43"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET play_order = 47 WHERE store_cloud_id != 0 AND play_order = 44"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET play_order = play_order + 4 WHERE store_cloud_id != 0 AND play_order >= 45 AND play_order <= 58"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET play_order = play_order + 5 WHERE store_cloud_id != 0 AND play_order >= 59")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1160140);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1160140;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160120to1160130(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  int v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  int v35;
  void *v36;
  id v37;
  NSObject *v38;
  void *v39;
  id v40;
  id v41;
  NSObject *v42;
  void *v43;
  int v44;
  id v45;
  void *v46;
  NSObject *v47;
  const char *v48;
  void *v49;
  int v50;
  id v51;
  void *v52;
  int v53;
  id v54;
  void *v55;
  int v56;
  void *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t j;
  void *v63;
  NSObject *v64;
  uint64_t v65;
  void *v66;
  id v68;
  id v69;
  id v70;
  id v71;
  NSObject *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  id v86;
  void *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  id v92;
  id v93;
  id v94;
  id v95;
  _QWORD v96[4];
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  NSObject *v103;
  id v104;
  id v105;
  id v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _QWORD v111[4];
  id v112;
  uint8_t v113[128];
  uint8_t buf[4];
  void *v115;
  _BYTE v116[128];
  _QWORD v117[4];

  v117[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v87 = v3;
  objc_msgSend(v3, "executeQuery:", CFSTR("SELECT artwork_token, relative_path FROM artwork"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  v111[0] = MEMORY[0x1E0C809B0];
  v111[1] = 3221225472;
  v111[2] = __ML3MigrationFunction1160120to1160130_block_invoke;
  v111[3] = &unk_1E5B65EE0;
  v8 = v5;
  v112 = v8;
  objc_msgSend(v6, "enumerateRowsWithBlock:", v111);
  if (!objc_msgSend(v8, "count"))
    goto LABEL_52;
  v80 = v8;
  v81 = v4;
  v77 = v6;
  +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  ML3MigrationTemporaryPathFromPath(v9);
  v10 = objc_claimAutoreleasedReturnValue();
  ML3MigrationArtworkCacheDirectoryAsOf1160130();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  ML3MigrationTemporaryPathFromPath(v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v76 = v9;
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v9, 1);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = (void *)v10;
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v10, 1);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = v11;
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v11, 1);
  v13 = objc_claimAutoreleasedReturnValue();
  v73 = (void *)v12;
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v12, 1);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = *MEMORY[0x1E0C999D0];
  v117[0] = *MEMORY[0x1E0C999D0];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v117, 1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v82 = v14;
  v78 = (void *)v13;
  objc_msgSend(v14, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v13, v17, 4, 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v19 = v18;
  v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v107, v116, 16);
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)v108;
    do
    {
      for (i = 0; i != v21; ++i)
      {
        if (*(_QWORD *)v108 != v22)
          objc_enumerationMutation(v19);
        v24 = *(void **)(*((_QWORD *)&v107 + 1) + 8 * i);
        v106 = 0;
        v25 = objc_msgSend(v24, "getResourceValue:forKey:error:", &v106, v16, 0);
        v26 = v106;
        v27 = v26;
        if (v25 && objc_msgSend(v26, "BOOLValue"))
          objc_msgSend(v15, "addObject:", v24);

      }
      v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v107, v116, 16);
    }
    while (v21);
  }

  v105 = 0;
  v28 = v82;
  v29 = v79;
  objc_msgSend(v82, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v79, 1, 0, &v105);
  v30 = v105;
  if (v30)
  {
    v31 = v30;
    v32 = os_log_create("com.apple.amp.medialibrary", "Migration");
    v8 = v80;
    v4 = v81;
    v33 = v83;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v115 = v31;
      _os_log_impl(&dword_1AC149000, v32, OS_LOG_TYPE_ERROR, "Failed to create temporary new artwork directory with error: %{public}@", buf, 0xCu);
    }
    v34 = v32;
    v35 = 1;
    v36 = v78;
    goto LABEL_50;
  }
  v104 = 0;
  v33 = v83;
  objc_msgSend(v82, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v83, 1, 0, &v104);
  v37 = v104;
  v8 = v80;
  v4 = v81;
  if (!v37)
  {
    objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    v96[0] = v7;
    v96[1] = 3221225472;
    v96[2] = __ML3MigrationFunction1160120to1160130_block_invoke_808;
    v96[3] = &unk_1E5B5C738;
    v40 = v84;
    v97 = v40;
    v41 = v82;
    v98 = v41;
    v69 = v79;
    v99 = v69;
    v71 = v39;
    v100 = v71;
    v101 = v15;
    v68 = v83;
    v102 = v68;
    v42 = v85;
    v103 = v42;
    objc_msgSend(v80, "enumerateKeysAndObjectsUsingBlock:", v96);
    objc_msgSend(v40, "path");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = objc_msgSend(v41, "fileExistsAtPath:", v43);

    v72 = v42;
    if (v44 && (v95 = 0, objc_msgSend(v41, "removeItemAtURL:error:", v40, &v95), (v45 = v95) != 0))
    {
      v46 = v45;
      v47 = os_log_create("com.apple.amp.medialibrary", "Migration");
      v36 = v78;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v115 = v46;
        v48 = "Failed to delete original artwork directory during migration with error: %{public}@";
LABEL_32:
        _os_log_impl(&dword_1AC149000, v47, OS_LOG_TYPE_ERROR, v48, buf, 0xCu);
      }
    }
    else
    {
      v86 = v40;
      objc_msgSend(v69, "path", v68);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v50 = objc_msgSend(v41, "fileExistsAtPath:", v49);

      v36 = v78;
      if (v50
        && (v94 = 0, objc_msgSend(v41, "moveItemAtURL:toURL:error:", v69, v86, &v94), (v51 = v94) != 0))
      {
        v46 = v51;
        _ML3LogCategoryMigration();
        v47 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v115 = v46;
          v48 = "Failed to rename new temp artwork directory during migration with error: %{public}@";
          goto LABEL_32;
        }
      }
      else
      {
        objc_msgSend(v78, "path");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        v53 = objc_msgSend(v41, "fileExistsAtPath:", v52);

        if (!v53
          || (v93 = 0, objc_msgSend(v41, "removeItemAtURL:error:", v78, &v93), (v54 = v93) == 0))
        {
          objc_msgSend(v68, "path");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          v56 = objc_msgSend(v41, "fileExistsAtPath:", v55);

          if (v56)
          {
            v92 = 0;
            objc_msgSend(v41, "moveItemAtURL:toURL:error:", v68, v78, &v92);
            v70 = v92;
          }
          else
          {
            v70 = 0;
          }
          v57 = v87;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v58 = v42;
          v59 = -[NSObject countByEnumeratingWithState:objects:count:](v58, "countByEnumeratingWithState:objects:count:", &v88, v113, 16);
          if (v59)
          {
            v60 = v59;
            v61 = *(_QWORD *)v89;
            do
            {
              for (j = 0; j != v60; ++j)
              {
                if (*(_QWORD *)v89 != v61)
                  objc_enumerationMutation(v58);
                v63 = *(void **)(*((_QWORD *)&v88 + 1) + 8 * j);
                if ((objc_msgSend(v57, "executeUpdate:", v63) & 1) == 0)
                {
                  v64 = os_log_create("com.apple.amp.medialibrary", "Migration");
                  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138543362;
                    v115 = v63;
                    _os_log_impl(&dword_1AC149000, v64, OS_LOG_TYPE_ERROR, "Failed to update relative_path in artwork. %{public}@", buf, 0xCu);
                  }

                  v57 = v87;
                }
              }
              v60 = -[NSObject countByEnumeratingWithState:objects:count:](v58, "countByEnumeratingWithState:objects:count:", &v88, v113, 16);
            }
            while (v60);
          }

          v4 = v81;
          objc_msgSend(v81, "setNeedsToAutogenerateArtworkVariants:", 1);
          v35 = 0;
          v29 = v79;
          v8 = v80;
          v36 = v78;
          v28 = v82;
          v46 = v70;
          goto LABEL_49;
        }
        v46 = v54;
        _ML3LogCategoryMigration();
        v47 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v115 = v46;
          v48 = "Failed to delete artwork cache directory during migration with error: %{public}@";
          goto LABEL_32;
        }
      }
    }

    v35 = 1;
    v28 = v82;
LABEL_49:

    v33 = v83;
    v31 = v71;
    v34 = v72;
    goto LABEL_50;
  }
  v31 = v37;
  v38 = os_log_create("com.apple.amp.medialibrary", "Migration");
  v36 = v78;
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v115 = v31;
    _os_log_impl(&dword_1AC149000, v38, OS_LOG_TYPE_ERROR, "Failed to create temporary new artwork cache directory with error: %{public}@", buf, 0xCu);
  }
  v34 = v38;
  v35 = 1;
LABEL_50:

  v6 = v77;
  if (!v35)
  {
LABEL_52:
    objc_msgSend(v4, "setCurrentUserVersion:", 1160130, v68);
    v66 = v87;
    v65 = objc_msgSend(v87, "executeUpdate:", CFSTR("PRAGMA user_version = 1160130;"));
    goto LABEL_53;
  }
  v65 = 0;
  v66 = v87;
LABEL_53:

  return v65;
}

uint64_t ML3MigrationFunction1160110to1160120(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_stats SET play_count_recent = 0 WHERE item_pid IN (SELECT item_pid from item WHERE remote_location_id = 200)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_stats SET skip_count_recent = 0 WHERE item_pid IN (SELECT item_pid from item WHERE remote_location_id = 200)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1160120);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1160120;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160100to1160110(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[4];
  id v24;
  uint8_t buf[4];
  uint64_t v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, reserved TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_store_new (item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name) SELECT item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name FROM item_store"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store_new SET downloader_account_id = account_id WHERE item_pid IN (SELECT item_pid FROM item JOIN item_store USING (item_pid) WHERE base_location_id > 0 AND base_location_id <= 3840)")))
  {
    v18 = v4;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "executeQuery:", CFSTR("SELECT item_pid, location FROM item JOIN item_extra USING (item_pid) WHERE base_location_id = 300"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __ML3MigrationFunction1160100to1160110_block_invoke;
    v23[3] = &unk_1E5B65EE0;
    v7 = v5;
    v24 = v7;
    v17 = v6;
    objc_msgSend(v6, "enumerateRowsWithBlock:", v23);
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v8 = v7;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v20 != v11)
            objc_enumerationMutation(v8);
          v13 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i);
          if ((objc_msgSend(v3, "executeUpdate:", v13) & 1) == 0)
          {
            v14 = os_log_create("com.apple.amp.medialibrary", "Migration");
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              v26 = v13;
              _os_log_impl(&dword_1AC149000, v14, OS_LOG_TYPE_ERROR, "Failed to update is_protected in item_store_new. %{public}@", buf, 0xCu);
            }

          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
      }
      while (v10);
    }

    if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store_new SET is_protected = 1 WHERE item_pid IN (SELECT item_pid FROM item WHERE base_location_id IN (100, 200))")))
    {
      v4 = v18;
      if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store_new SET is_protected = 1 WHERE item_pid IN (SELECT item_pid FROM item JOIN item_store USING (item_pid) WHERE base_location_id >= 3840 AND key_id > 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_store"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store_new RENAME TO item_store")))
      {
        objc_msgSend(v18, "setNeedsToRecreateIndexes:", 1);
        objc_msgSend(v18, "setNeedsToRecreateTriggers:", 1);
        objc_msgSend(v18, "setCurrentUserVersion:", 1160110);
        v15 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1160110;"));
      }
      else
      {
        v15 = 0;
      }
    }
    else
    {
      v15 = 0;
      v4 = v18;
    }

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

uint64_t ML3MigrationFunction1160090to1160100(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0.0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_stats_new (item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill) SELECT item_pid, IFNULL(user_rating, 0), IFNULL(needs_restore, 0), download_identifier, IFNULL(play_count_user, 0), IFNULL(play_count_recent, 0), IFNULL(has_been_played, 0), IFNULL(date_played, 0), IFNULL(date_skipped, 0), IFNULL(date_accessed, 0), IFNULL(is_alarm, 0), IFNULL(skip_count_user, 0), IFNULL(skip_count_recent, 0), IFNULL(remember_bookmark, 0), IFNULL(bookmark_time_ms, 0.0), IFNULL(hidden, 0), IFNULL(chosen_by_auto_fill, 0) FROM item_stats"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_stats"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_stats_new RENAME TO item_stats")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1160100);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1160100;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160080to1160090(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (MGGetBoolAnswer()
    && (int)objc_msgSend(v4, "originalUserVersion") > 1159999
    && !objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'ResetSyncToRemoveMultiverseIdentifiersFromSiri')")))
  {
    v5 = 0;
  }
  else
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1160090);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1160090;"));
  }

  return v5;
}

uint64_t ML3MigrationFunction1160070to1160080(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET remote_location_id = (SELECT (CASE WHEN home_sharing_id != 0 THEN 300 ELSE (CASE WHEN IFNULL(match_redownload_params, '') != '' THEN 200 ELSE (CASE WHEN IFNULL(purchase_history_redownload_params, '') != '' AND purchase_history_id != 0 THEN 100 ELSE 0 END) END) END) FROM item_store WHERE item_store.item_pid = item.item_pid)")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1160080);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1160080;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160060to1160070(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (!ML3MigrationColumnExistsInTable(v3, CFSTR("extras_url"), CFSTR("item_store"))
    || objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, reserved TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_store_new (item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name) SELECT item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name FROM item_store"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_store"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store_new RENAME TO item_store")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1160070);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1160070;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160050to1160060(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DELETE FROM artwork WHERE artwork_token=''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1160060);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1160060;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160040to1160050(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  id v19;
  id v20;
  void *v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  uint64_t v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v22 = a2;
  MLMobileUserHomeDirectory();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByAppendingPathComponent:", CFSTR("Media"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "executeQuery:", CFSTR("SELECT item.ROWID, base_location.path, item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id != 0 AND item_extra.file_size = 0"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __ML3MigrationFunction1160040to1160050_block_invoke;
  v27[3] = &unk_1E5B64290;
  v20 = v5;
  v28 = v20;
  v19 = v6;
  v29 = v19;
  v9 = v8;
  v30 = v9;
  v21 = v7;
  objc_msgSend(v7, "enumerateRowsWithBlock:", v27);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v10 = v9;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v24 != v13)
          objc_enumerationMutation(v10);
        v15 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * i);
        if ((objc_msgSend(v3, "executeUpdate:", v15, v19, v20) & 1) == 0)
        {
          v16 = os_log_create("com.apple.amp.medialibrary", "Migration");
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v32 = v15;
            _os_log_impl(&dword_1AC149000, v16, OS_LOG_TYPE_ERROR, "Failed to update file size. %{public}@", buf, 0xCu);
          }

        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
    }
    while (v12);
  }

  objc_msgSend(v22, "setCurrentUserVersion:", 1160050);
  v17 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1160050;"));

  return v17;
}

uint64_t ML3MigrationFunction1160030to1160040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT OR IGNORE INTO item_artwork (item_pid) SELECT item_pid FROM item"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT OR IGNORE INTO item_screenshot (item_pid) SELECT item_pid FROM item")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1160040);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1160040;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160020to1160030(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  const char *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  _QWORD v44[4];
  id v45;
  id v46;
  id v47;
  _QWORD v48[4];
  id v49;
  id v50;
  id v51;
  _QWORD v52[4];
  id v53;
  id v54;
  id v55;
  _QWORD v56[4];
  id v57;
  id v58;
  id v59;
  id v60;
  uint8_t buf[4];
  id v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_artwork (item_pid INTEGER PRIMARY KEY, best_artwork_token TEXT NOT NULL DEFAULT '', best_artwork_source_type INTEGER NOT NULL DEFAULT 0, cloud_artwork_token TEXT NOT NULL DEFAULT '', sync_artwork_token TEXT NOT NULL DEFAULT '', purchase_history_artwork_token TEXT NOT NULL DEFAULT '', store_artwork_token TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_screenshot (item_pid INTEGER PRIMARY KEY, best_screenshot_token TEXT NOT NULL DEFAULT '', best_screenshot_source_type INTEGER NOT NULL DEFAULT 0, cloud_screenshot_token TEXT NOT NULL DEFAULT '', sync_screenshot_token TEXT NOT NULL DEFAULT '', purchase_history_screenshot_token TEXT NOT NULL DEFAULT '', store_screenshot_token TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE artwork (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, relative_path TEXT NOT NULL DEFAULT '', artwork_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_token, artwork_source_type))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_artwork (item_pid, cloud_artwork_token) SELECT item_pid, artwork_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE artwork_cache_id IS NOT NULL AND artwork_cache_id != 0 AND store_saga_id != 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_artwork (item_pid, sync_artwork_token) SELECT item_pid, artwork_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE artwork_cache_id IS NOT NULL AND artwork_cache_id != 0 AND store_saga_id = 0 AND sync_id != 0 AND artwork_cache_id < 10001"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_artwork (item_pid, purchase_history_artwork_token) SELECT item_pid, artwork_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE artwork_cache_id IS NOT NULL AND artwork_cache_id != 0 AND store_saga_id = 0 AND purchase_history_id != 0 AND sync_id = 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_screenshot (item_pid, cloud_screenshot_token) SELECT item_pid, screenshot_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE screenshot_cache_id IS NOT NULL AND screenshot_cache_id != 0 AND store_saga_id != 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_screenshot (item_pid, sync_screenshot_token) SELECT item_pid, screenshot_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE screenshot_cache_id IS NOT NULL AND screenshot_cache_id != 0 AND store_saga_id = 0 AND sync_id != 0 AND screenshot_cache_id < 10001"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_screenshot (item_pid, purchase_history_screenshot_token) SELECT item_pid, screenshot_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE screenshot_cache_id IS NOT NULL AND screenshot_cache_id != 0 AND store_saga_id = 0 AND purchase_history_id != 0 AND sync_id = 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_artwork SET best_artwork_token = (CASE WHEN cloud_artwork_token != '' THEN cloud_artwork_token ELSE (CASE WHEN sync_artwork_token != '' THEN sync_artwork_token ELSE (CASE WHEN purchase_history_artwork_token != '' THEN purchase_history_artwork_token ELSE (CASE WHEN store_artwork_token != '' THEN store_artwork_token ELSE '' END) END) END) END), best_artwork_source_type = (CASE WHEN cloud_artwork_token != '' THEN 1 ELSE (CASE WHEN sync_artwork_token != '' THEN 2 ELSE (CASE WHEN purchase_history_artwork_token != '' THEN 3 ELSE (CASE WHEN store_artwork_token != '' THEN 4 ELSE 0 END) END) END) END)"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_screenshot SET best_screenshot_token = (CASE WHEN cloud_screenshot_token != '' THEN cloud_screenshot_token ELSE (CASE WHEN sync_screenshot_token != '' THEN sync_screenshot_token ELSE (CASE WHEN purchase_history_screenshot_token != '' THEN purchase_history_screenshot_token ELSE (CASE WHEN store_screenshot_token != '' THEN store_screenshot_token ELSE '' END) END) END) END), best_screenshot_source_type = (CASE WHEN cloud_screenshot_token != '' THEN 1 ELSE (CASE WHEN sync_screenshot_token != '' THEN 2 ELSE (CASE WHEN purchase_history_screenshot_token != '' THEN 3 ELSE (CASE WHEN store_screenshot_token != '' THEN 4 ELSE 0 END) END) END) END)")))
  {
    +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    ML3MigrationTemporaryPathFromPath(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v60 = 0;
    objc_msgSend(v7, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v6, 1, 0, &v60);
    v8 = v60;
    if (v8)
    {
      _ML3LogCategoryMigration();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v62 = v8;
        _os_log_impl(&dword_1AC149000, v9, OS_LOG_TYPE_ERROR, "Failed to create temporary new artwork directory with error: %{public}@", buf, 0xCu);
      }
      v10 = 0;
      goto LABEL_62;
    }
    v41 = v5;
    objc_msgSend(v3, "executeQuery:", CFSTR("SELECT DISTINCT(best_artwork_token), best_artwork_source_type FROM item_artwork WHERE best_artwork_token != ''"));
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = MEMORY[0x1E0C809B0];
    v56[0] = MEMORY[0x1E0C809B0];
    v56[1] = 3221225472;
    v56[2] = __ML3MigrationFunction1160020to1160030_block_invoke;
    v56[3] = &unk_1E5B64290;
    v39 = v7;
    v14 = v7;
    v57 = v14;
    v40 = v6;
    v15 = v6;
    v58 = v15;
    v16 = v3;
    v59 = v16;
    v38 = v12;
    -[NSObject enumerateRowsWithBlock:](v12, "enumerateRowsWithBlock:", v56);
    objc_msgSend(v16, "executeQuery:", CFSTR("SELECT DISTINCT(best_screenshot_token), best_screenshot_source_type FROM item_screenshot WHERE best_screenshot_token != ''"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v52[0] = v13;
    v52[1] = 3221225472;
    v52[2] = __ML3MigrationFunction1160020to1160030_block_invoke_666;
    v52[3] = &unk_1E5B64290;
    v18 = v14;
    v53 = v18;
    v19 = v15;
    v54 = v19;
    v20 = v16;
    v55 = v20;
    v37 = v17;
    objc_msgSend(v17, "enumerateRowsWithBlock:", v52);
    objc_msgSend(v20, "executeQuery:", CFSTR("SELECT item_pid, chapter_data FROM chapter JOIN item USING (item_pid) WHERE chapter_data IS NOT NULL"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v48[0] = v13;
    v48[1] = 3221225472;
    v48[2] = __ML3MigrationFunction1160020to1160030_block_invoke_669;
    v48[3] = &unk_1E5B64290;
    v22 = v18;
    v49 = v22;
    v23 = v19;
    v50 = v23;
    v24 = v20;
    v51 = v24;
    v36 = v21;
    objc_msgSend(v21, "enumerateRowsWithBlock:", v48);
    objc_msgSend(v24, "executeQuery:", CFSTR("SELECT DISTINCT(artist_artwork_cache_id) FROM album_artist WHERE artist_artwork_cache_id != ''"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v44[0] = v13;
    v44[1] = 3221225472;
    v44[2] = __ML3MigrationFunction1160020to1160030_block_invoke_678;
    v44[3] = &unk_1E5B64290;
    v26 = v22;
    v45 = v26;
    v27 = v23;
    v46 = v27;
    v28 = v24;
    v47 = v28;
    objc_msgSend(v25, "enumerateRowsWithBlock:", v44);
    +[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork"));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v24) = objc_msgSend(v26, "fileExistsAtPath:", v29);

    v35 = v25;
    if ((_DWORD)v24
      && (+[ML3MusicLibrary mediaFolderPathByAppendingPathComponent:](ML3MusicLibrary, "mediaFolderPathByAppendingPathComponent:", CFSTR("iTunes_Control/iTunes/Artwork")), v30 = (void *)objc_claimAutoreleasedReturnValue(), v43 = 0, objc_msgSend(v26, "removeItemAtPath:error:", v30, &v43), v31 = v43, v30, v31))
    {
      _ML3LogCategoryMigration();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v62 = v31;
        v33 = "Failed to delete old artwork directory during migration with error: %{public}@";
LABEL_26:
        _os_log_impl(&dword_1AC149000, v32, OS_LOG_TYPE_ERROR, v33, buf, 0xCu);
      }
    }
    else
    {
      if (!objc_msgSend(v26, "fileExistsAtPath:", v27)
        || (v42 = 0, objc_msgSend(v26, "moveItemAtPath:toPath:error:", v27, v41, &v42),
                       (v34 = v42) == 0))
      {
        if (objc_msgSend(v28, "executeUpdate:", CFSTR("CREATE TABLE new_album (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("INSERT INTO new_album (album_pid, album, sort_album, album_artist_pid, representative_item_pid, representative_item_artwork_token, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, artwork_cache_id, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status FROM album"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("UPDATE new_album SET representative_item_artwork_token = '' WHERE representative_item_artwork_token = '0'"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("DROP TABLE album"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("ALTER TABLE new_album RENAME TO album"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("CREATE TABLE new_item_artist (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', artist_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v28,
                             "executeUpdate:",
                             CFSTR("INSERT INTO new_item_artist (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, representative_item_pid, artist_artwork_token, keep_local, keep_local_status) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, representative_item_pid, artist_artwork_cache_id, keep_local, keep_local_status FROM item_artist"))
          && objc_msgSend(v28, "executeUpdate:", CFSTR("UPDATE new_item_artist SET representative_item_artwork_token = IFNULL( (SELECT best_artwork_token FROM item_artwork WHERE item_pid = representative_item_pid), '')"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("DROP TABLE item_artist"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("ALTER TABLE new_item_artist RENAME TO item_artist"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("CREATE TABLE new_album_artist (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, artist_artwork_token TEXT NOT NULL DEFAULT '', representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("INSERT INTO new_album_artist (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_token, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_cache_id, representative_item_pid, artwork_cache_id, keep_local, keep_local_status FROM album_artist"))&& objc_msgSend(v28, "executeUpdate:",
                             CFSTR("UPDATE new_album_artist SET representative_item_artwork_token = '' WHERE representative_item_artwork_token = '0'"))
          && objc_msgSend(v28, "executeUpdate:", CFSTR("DROP TABLE album_artist"))
          && objc_msgSend(v28, "executeUpdate:", CFSTR("ALTER TABLE new_album_artist RENAME TO album_artist"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("CREATE TABLE new_composer (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("INSERT INTO new_composer (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, artwork_cache_id, keep_local, keep_local_status FROM composer"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("UPDATE new_composer SET representative_item_artwork_token = '' WHERE representative_item_artwork_token = '0'"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("DROP TABLE composer"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("ALTER TABLE new_composer RENAME TO composer"))&& objc_msgSend(v28,
                             "executeUpdate:",
                             CFSTR("CREATE TABLE new_genre (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL UNIQUE, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)"))
          && objc_msgSend(v28, "executeUpdate:", CFSTR("INSERT INTO new_genre (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status FROM genre"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("UPDATE new_genre SET representative_item_artwork_token = IFNULL( (SELECT best_artwork_token FROM item_artwork WHERE item_pid = representative_item_pid), '')"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("DROP TABLE genre"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("ALTER TABLE new_genre RENAME TO genre"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("CREATE TABLE new_item_extra (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0, version TEXT NOT NULL DEFAULT '', display_version TEXT NOT NULL DEFAULT '')"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("INSERT INTO new_item_extra (item_pid, title, sort_title, disc_count, track_count, total_time_ms, year, location, file_size, integrity, is_compilation, is_audible_audio_book, date_created, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, bpm, genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, category_id, location_kind_id, version, display_version) SELECT item_pid, title, sort_title, disc_count, track_count, total_time_ms, year, location, file_size, integrity, is_compilation, is_audible_audio_book, date_created, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, bpm, genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, category_id, location_kind_id, version, display_version FROM item_extra"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("DROP TABLE item_extra"))&& objc_msgSend(v28, "executeUpdate:", CFSTR("ALTER TABLE new_item_extra RENAME TO item_extra"))
          && objc_msgSend(v28, "executeUpdate:", CFSTR("DROP TABLE artwork_info"))
          && objc_msgSend(v28, "executeUpdate:", CFSTR("DROP TABLE IF EXISTS artwork_conversion")))
        {
          objc_msgSend(v4, "setNeedsToAutogenerateArtworkVariants:", 1);
          objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
          objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
          objc_msgSend(v4, "setCurrentUserVersion:", 1160030);
          v10 = objc_msgSend(v28, "executeUpdate:", CFSTR("PRAGMA user_version = 1160030;"));
LABEL_61:
          v6 = v40;
          v5 = v41;
          v8 = 0;
          v7 = v39;
          v9 = v38;

LABEL_62:
          goto LABEL_17;
        }
LABEL_60:
        v10 = 0;
        goto LABEL_61;
      }
      v31 = v34;
      _ML3LogCategoryMigration();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v62 = v31;
        v33 = "Failed to rename new temp artwork directory during migration with error: %{public}@";
        goto LABEL_26;
      }
    }

    goto LABEL_60;
  }
  v10 = 0;
LABEL_17:

  return v10;
}

uint64_t ML3MigrationFunction1160010to1160020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN version TEXT NOT NULL DEFAULT ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN display_version TEXT NOT NULL DEFAULT ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_playback ADD COLUMN progression_direction INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN vpp_is_licensed INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN vpp_org_id INTEGER NOT NULL DEFAULT 0"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN vpp_org_name TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1160020);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1160020;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1160000to1160010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN reserved TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1160010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1160010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1150090to1160000(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  int v13;
  uint64_t v14;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v5 = objc_msgSend(&unk_1E5BA8A48, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v18;
    v16 = v4;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v18 != v7)
          objc_enumerationMutation(&unk_1E5BA8A48);
        v9 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i);
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("ALTER TABLE %@ ADD COLUMN keep_local INTEGER NOT NULL DEFAULT 0"), v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v3, "executeUpdate:", v10);

        if (v11)
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("ALTER TABLE %@ ADD COLUMN keep_local_status INTEGER NOT NULL DEFAULT 0"), v9);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v3, "executeUpdate:", v12);

          if (v13)
            continue;
        }
        v14 = 0;
        v4 = v16;
        goto LABEL_20;
      }
      v6 = objc_msgSend(&unk_1E5BA8A48, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      v4 = v16;
      if (v6)
        continue;
      break;
    }
  }
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS ItemKeepLocal ON item (keep_local)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS ItemArtistKeepLocal ON item_artist (keep_local)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS AlbumKeepLocal ON album (keep_local)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS AlbumArtistKeepLocal ON album_artist (keep_local)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS ContainerKeepLocal ON container (keep_local)"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS GenreKeepLocal ON genre (keep_local)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE INDEX IF NOT EXISTS ComposerKeepLocal ON composer (keep_local)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1160000);
    v14 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1160000;"));
  }
  else
  {
    v14 = 0;
  }
LABEL_20:

  return v14;
}

uint64_t ML3MigrationFunction1150080to1150090(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  id v19;
  id v20;
  void *v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[4];
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  uint64_t v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v22 = a2;
  MLMobileUserHomeDirectory();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByAppendingPathComponent:", CFSTR("Media"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "executeQuery:", CFSTR("SELECT item.ROWID, base_location.path, item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id != 0 AND item_extra.file_size = 0"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = __ML3MigrationFunction1150080to1150090_block_invoke;
  v27[3] = &unk_1E5B64290;
  v20 = v5;
  v28 = v20;
  v19 = v6;
  v29 = v19;
  v9 = v8;
  v30 = v9;
  v21 = v7;
  objc_msgSend(v7, "enumerateRowsWithBlock:", v27);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v10 = v9;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v24 != v13)
          objc_enumerationMutation(v10);
        v15 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * i);
        if ((objc_msgSend(v3, "executeUpdate:", v15, v19, v20) & 1) == 0)
        {
          v16 = os_log_create("com.apple.amp.medialibrary", "Migration");
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v32 = v15;
            _os_log_impl(&dword_1AC149000, v16, OS_LOG_TYPE_ERROR, "Failed to update file size. %@", buf, 0xCu);
          }

        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
    }
    while (v12);
  }

  objc_msgSend(v22, "setCurrentUserVersion:", 1150090);
  v17 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1150090;"));

  return v17;
}

uint64_t ML3MigrationFunction1150070to1150080(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  int v6;
  uint64_t v7;

  v3 = a1;
  v4 = a2;
  if (MGGetBoolAnswer()
    && (objc_msgSend(v3, "executeQuery:", CFSTR("SELECT 1 FROM item WHERE media_type IN (4, 256) LIMIT 1")),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "hasAtLeastOneRow"),
        v5,
        v6)
    && !objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'NeedToRemovePodcastsFromSiri')")))
  {
    v7 = 0;
  }
  else
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1150080);
    v7 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1150080;"));
  }

  return v7;
}

uint64_t ML3MigrationFunction1150060to1150070(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  objc_msgSend(a2, "setCurrentUserVersion:", 1150070);
  v4 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1150070;"));

  return v4;
}

uint64_t ML3MigrationFunction1150050to1150060(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET remote_location_id = (SELECT CASE WHEN home_sharing_id != 0 THEN 300 ELSE (CASE WHEN IFNULL(match_redownload_params, '') != '' THEN 200 ELSE (CASE WHEN IFNULL(purchase_history_redownload_params, '') != '' AND purchase_history_id != 0 THEN 100 ELSE 0 END) END) END FROM item_store WHERE item.item_pid = item_store.item_pid)")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1150060);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1150060;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1150040to1150050(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN album_year INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album SET album_year = (SELECT IFNULL(MAX(year), 0) FROM item_extra JOIN item USING(item_pid) WHERE item.album_pid = album.album_pid)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1150050);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1150050;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1150030to1150040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("update item_store set store_item_id = 0 where store_item_id = -1")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1150040);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1150040;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1150020to1150030(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET media_type = ML3StandardizedMediaType(media_type);")))
  {
    objc_msgSend(v4, "setNeedsToReloadContainerMediaTypes:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1150030);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1150030;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1150010to1150020(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_insert_item_setIsMediaColumns;"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_update_item_setIsMediaColumns;"))
    && ML3MigrationModifyTableWithResultingSchema(v3, CFSTR("item"), 0, 0, CFSTR("item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER DEFAULT 0, track_number INTEGER DEFAULT 0, episode_sort_id INTEGER DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1150020);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1150020;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1150000to1150010(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DELETE FROM entity_revision where class = 7")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1150010);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1150010;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140320to1150000(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  objc_msgSend(a2, "setCurrentUserVersion:", 1150000);
  v4 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1150000;"));

  return v4;
}

uint64_t ML3MigrationFunction1140310to1140320(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, void *);
  void *v12;
  id v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v3 = a1;
  v4 = a2;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 1;
  objc_msgSend(v3, "executeQuery:", CFSTR("select item_pid, item_extra.title, item_extra.total_time_ms from item_store join item_extra using (item_pid) where item_pid in (select sync_id from item_store where sync_id != 0) and sync_id = 0"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = MEMORY[0x1E0C809B0];
  v10 = 3221225472;
  v11 = __ML3MigrationFunction1140310to1140320_block_invoke;
  v12 = &unk_1E5B64FB8;
  v6 = v3;
  v13 = v6;
  v14 = &v15;
  objc_msgSend(v5, "enumerateRowsWithBlock:", &v9);
  objc_msgSend(v6, "executeUpdate:", CFSTR("update _MLDatabaseProperties set value=0 where key='MLSyncClientSyncAnchor'"), v9, v10, v11, v12);
  if (*((_BYTE *)v16 + 24))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1140320);
    v7 = objc_msgSend(v6, "executeUpdate:", CFSTR("PRAGMA user_version = 1140320;"));
  }
  else
  {
    v7 = 0;
  }

  _Block_object_dispose(&v15, 8);
  return v7;
}

void sub_1AC24263C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ML3MigrationFunction1140300to1140310(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  objc_msgSend(a2, "setCurrentUserVersion:", 1140310);
  v4 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140310;"));

  return v4;
}

uint64_t ML3MigrationFunction1140260to1140300(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemLocation"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemTitle"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbum"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbumArtist"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemItemArtist"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemComposer"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemGenre")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1140300);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140300;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140250to1140260(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  objc_msgSend(a2, "setCurrentUserVersion:", 1140260);
  v4 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140260;"));

  return v4;
}

uint64_t ML3MigrationFunction1140240to1140250(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1140250);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1140250;"));
  return v5;
}

uint64_t ML3MigrationFunction1140230to1140240(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET base_location_id = 400 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'Podcasts')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE base_location SET base_location_id = 400 WHERE path = 'Podcasts'"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET base_location_id = 400 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = '/var/mobile/Media/Podcasts')")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1140240);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140240;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140220to1140230()
{
  return 0;
}

uint64_t ML3MigrationFunction1140210to1140230(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN screenshot_cache_id TEXT")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1140230);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140230;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140200to1140210(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_update_container_setIsIgnorableITunesPlaylist")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1140210);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140210;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140190to1140200(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  objc_msgSend(a2, "setCurrentUserVersion:", 1140200);
  v4 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140200;"));

  return v4;
}

uint64_t ML3MigrationFunction1140180to1140190(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN is_ignorable_itunes_playlist INTEGER DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE container SET is_ignorable_itunes_playlist = 1 WHERE (is_hidden = 1 AND distinguished_kind NOT IN (19, 20, 32))")))
  {
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1140190);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140190;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140170to1140180(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist ADD COLUMN artist_artwork_cache_id TEXT NOT NULL DEFAULT ''"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist ADD COLUMN artist_artwork_cache_id TEXT NOT NULL DEFAULT ''")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1140180);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140180;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140160to1140170(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_upp (item_pid INTEGER PRIMARY KEY, bookkeeper_identifier TEXT NOT NULL, metadata_timestamp REAL DEFAULT NULL, metadata_entity_revision INTEGER DEFAULT NULL)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_upp (item_pid, bookkeeper_identifier, metadata_timestamp, metadata_entity_revision) SELECT item_pid, storebookmark_identifier, store_bookmark_timestamp, store_bookmark_entity_revision FROM item JOIN item_storebookmark_identifier USING(item_pid) JOIN item_stats USING(item_pid);"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemStorebookmarkIdentifier_identifier"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemBookkeeperItemLookup"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE IF EXISTS item_storebookmark_identifier"))&& ML3MigrationModifyTableWithResultingSchema(v3, CFSTR("item_stats"), 0, 0, CFSTR("item_pid INTEGER PRIMARY KEY, user_rating INTEGER DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER DEFAULT 0, play_count_recent INTEGER DEFAULT 0, has_been_played INTEGER DEFAULT 0, date_played INTEGER DEFAULT 0, date_skipped INTEGER DEFAULT 0, date_accessed INTEGER DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER DEFAULT 0, skip_count_recent INTEGER DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL, hidden INTEGER DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setNeedsToReloadStoreBookmarkMetadataIdentifiers:", 1);
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1140170);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140170;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140150to1140160(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN contained_media_type INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_item_media_type (container_pid INTEGER NOT NULL, media_type INTEGER NOT NULL, count INTEGER NOT NULL DEFAULT 0, UNIQUE(container_pid, media_type))")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1140160);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140160;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140140to1140150(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_update_item_setIsMediaColumns"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1140150);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140150;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140130to1140140(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_storebookmark_identifier (item_pid INTEGER PRIMARY KEY, storebookmark_identifier TEXT NOT NULL)")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1140140);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140140;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140120to1140130(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  int v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  ML3MigrationAddedColumn *v34;
  void *v35;
  ML3MigrationAddedColumn *v36;
  ML3MigrationAddedColumn *v37;
  void *v38;
  ML3MigrationAddedColumn *v39;
  void *v40;
  uint64_t v41;
  id v43;
  void *v44;
  void *v45;
  id obj;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[4];
  id v53;
  ML3MigrationAddedColumn *v54;
  _QWORD v55[2];
  ML3MigrationAddedColumn *v56;
  uint8_t buf[4];
  void *v58;
  __int16 v59;
  void *v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET base_location_id = 200 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'CloudAssets')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE base_location SET base_location_id = 200 WHERE path = 'CloudAssets'"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET base_location_id = 300 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'Purchases')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET base_location_id = 300 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = '/var/mobile/Media/Purchases')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE base_location SET base_location_id = 300 WHERE path = 'Purchases'")))
  {
    v5 = 0;
    while (1)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE item SET base_location_id = %d WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'iTunes_Control/Music/F%02d')"), v5 | 0xF00, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v3, "executeUpdate:", v6);

      if (!v7)
        break;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("UPDATE base_location SET base_location_id = %d WHERE path = 'iTunes_Control/Music/F%02d'"), v5 | 0xF00, v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v3, "executeUpdate:", v8);

      if ((v9 & 1) == 0)
        break;
      v5 = (v5 + 1);
      if ((_DWORD)v5 == 50)
      {
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        MLMobileUserHomeDirectory();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "stringByAppendingPathComponent:", CFSTR("Media/LoFiCloudAssets"));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v10, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v12, 1, 0, 0);

        if (!v13)
          break;
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "executeQuery:", CFSTR("SELECT location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE is_streaming_quality = 1 AND path = 'CloudAssets' AND LENGTH(location) > 0"));
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v52[0] = MEMORY[0x1E0C809B0];
        v52[1] = 3221225472;
        v52[2] = __ML3MigrationFunction1140120to1140130_block_invoke;
        v52[3] = &unk_1E5B65EE0;
        v16 = v14;
        v53 = v16;
        objc_msgSend(v15, "enumerateRowsWithBlock:", v52);
        if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET base_location_id = 100 WHERE item_pid IN (SELECT item_pid from item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE is_streaming_quality = 1 AND path = 'CloudAssets')"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO base_location VALUES (100, 'LoFiCloudAssets')")))
        {
          v44 = v15;
          v45 = v4;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v43 = v16;
          obj = v16;
          v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v61, 16);
          if (v17)
          {
            v18 = v17;
            v47 = *(_QWORD *)v49;
            do
            {
              for (i = 0; i != v18; ++i)
              {
                if (*(_QWORD *)v49 != v47)
                  objc_enumerationMutation(obj);
                v20 = *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * i);
                MLMobileUserHomeDirectory();
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v21, "stringByAppendingPathComponent:", CFSTR("Media/CloudAssets"));
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v22, "stringByAppendingPathComponent:", v20);
                v23 = (void *)objc_claimAutoreleasedReturnValue();

                MLMobileUserHomeDirectory();
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v24, "stringByAppendingPathComponent:", CFSTR("Media/LoFiCloudAssets"));
                v25 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v25, "stringByAppendingPathComponent:", v20);
                v26 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend(v23, "stringByDeletingPathExtension");
                v27 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v27, "stringByAppendingPathExtension:", CFSTR(".plist"));
                v28 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend(v26, "stringByDeletingPathExtension");
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v29, "stringByAppendingPathExtension:", CFSTR(".plist"));
                v30 = (void *)objc_claimAutoreleasedReturnValue();

                v31 = os_log_create("com.apple.amp.medialibrary", "Migration");
                if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138543618;
                  v58 = v23;
                  v59 = 2114;
                  v60 = v26;
                  _os_log_impl(&dword_1AC149000, v31, OS_LOG_TYPE_ERROR, "Moving %{public}@ to %{public}@", buf, 0x16u);
                }

                objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v32, "moveItemAtPath:toPath:error:", v23, v26, 0);

                objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
                v33 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v33, "moveItemAtPath:toPath:error:", v28, v30, 0);

              }
              v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v61, 16);
            }
            while (v18);
          }

          if (ML3MigrationModifyTableWithResultingSchema(v3, CFSTR("item_stats"), &unk_1E5BAC540, 0, CFSTR("item_pid INTEGER PRIMARY KEY, user_rating INTEGER DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER DEFAULT 0, play_count_recent INTEGER DEFAULT 0, has_been_played INTEGER DEFAULT 0, date_played INTEGER DEFAULT 0, date_skipped INTEGER DEFAULT 0, date_accessed INTEGER DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER DEFAULT 0, skip_count_recent INTEGER DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, hidden INTEGER DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0")))
          {
            v34 = -[ML3MigrationAddedColumn initWithName:foreignTable:foreignColumn:joinColumn:]([ML3MigrationAddedColumn alloc], "initWithName:foreignTable:foreignColumn:joinColumn:", CFSTR("store_link_id"), CFSTR("item"), CFSTR("store_link_id"), CFSTR("item_pid"));
            v56 = v34;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v56, 1);
            v35 = (void *)objc_claimAutoreleasedReturnValue();

            v4 = v45;
            if (ML3MigrationModifyTableWithResultingSchema(v3, CFSTR("item_store"), &unk_1E5BAC568, v35, CFSTR("item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0")))
            {
              v36 = -[ML3MigrationAddedColumn initWithName:foreignTable:foreignColumn:joinColumn:]([ML3MigrationAddedColumn alloc], "initWithName:foreignTable:foreignColumn:joinColumn:", CFSTR("category_id"), CFSTR("item"), CFSTR("category_id"), CFSTR("item_pid"));
              v55[0] = v36;
              v37 = -[ML3MigrationAddedColumn initWithName:foreignTable:foreignColumn:joinColumn:]([ML3MigrationAddedColumn alloc], "initWithName:foreignTable:foreignColumn:joinColumn:", CFSTR("location_kind_id"), CFSTR("item"), CFSTR("location_kind_id"), CFSTR("item_pid"));
              v55[1] = v37;
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v55, 2);
              v38 = (void *)objc_claimAutoreleasedReturnValue();

              if (ML3MigrationModifyTableWithResultingSchema(v3, CFSTR("item_extra"), 0, v38, CFSTR("item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, artwork_cache_id INTEGER NOT NULL DEFAULT 0, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0")))
              {
                v39 = -[ML3MigrationAddedColumn initWithName:foreignTable:foreignColumn:joinColumn:]([ML3MigrationAddedColumn alloc], "initWithName:foreignTable:foreignColumn:joinColumn:", CFSTR("remote_location_id"), CFSTR("item_store"), CFSTR("(CASE WHEN store_saga_id != 0 THEN 200 ELSE (CASE WHEN purchase_history_id != 0 THEN 100 ELSE 0 END) END)"), CFSTR("item_pid"));
                v54 = v39;
                objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v54, 1);
                v40 = (void *)objc_claimAutoreleasedReturnValue();

                if (ML3MigrationModifyTableWithResultingSchema(v3, CFSTR("item"), &unk_1E5BAC590, v40, CFSTR("item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER DEFAULT 0, track_number INTEGER DEFAULT 0, episode_sort_id INTEGER DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, is_video INTEGER NOT NULL DEFAULT 0, is_podcast INTEGER NOT NULL DEFAULT 0, is_itunes_u INTEGER NOT NULL DEFAULT 0"))&& +[ML3MusicLibrary updateTrackIntegrityOnConnection:](ML3MusicLibrary, "updateTrackIntegrityOnConnection:", v3))
                {
                  objc_msgSend(v45, "setNeedsToRecreateIndexes:", 1);
                  objc_msgSend(v45, "setNeedsToRecreateTriggers:", 1);
                  objc_msgSend(v45, "setCurrentUserVersion:", 1140130);
                  v41 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140130;"));
                }
                else
                {
                  v41 = 0;
                }
                v16 = v43;
                v15 = v44;

              }
              else
              {
                v41 = 0;
                v16 = v43;
                v15 = v44;
              }

            }
            else
            {
              v41 = 0;
              v16 = v43;
              v15 = v44;
            }

          }
          else
          {
            v41 = 0;
            v15 = v44;
            v4 = v45;
            v16 = v43;
          }
        }
        else
        {
          v41 = 0;
        }

        goto LABEL_29;
      }
    }
  }
  v41 = 0;
LABEL_29:

  return v41;
}

uint64_t ML3MigrationFunction1140119to1140120(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_store ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_store SET sync_id = item_pid WHERE item_pid IN (SELECT item_pid from item JOIN base_location USING (base_location_id) WHERE base_location_id != 0 AND path != 'Purchases' AND path != 'CloudAssets')")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1140120);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140120;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140118to1140119(void *a1, void *a2)
{
  id v3;
  id v4;
  ML3MigrationAddedColumn *v5;
  ML3MigrationAddedColumn *v6;
  ML3MigrationAddedColumn *v7;
  void *v8;
  uint64_t v9;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_store (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, redownload_action_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_store (item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, store_saga_id, purchase_history_id, purchase_history_token, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status) SELECT item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, store_saga_id, purchase_history_id, jalisco_token, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status FROM item_extra"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_playback (item_pid INTEGER PRIMARY KEY, audio_format INTEGER NOT NULL DEFAULT 0, bit_rate INTEGER NOT NULL DEFAULT 0, codec_type INTEGER NOT NULL DEFAULT 0, codec_subtype INTEGER NOT NULL DEFAULT 0, data_kind INTEGER NOT NULL DEFAULT 0, data_url TEXT, duration INTEGER NOT NULL DEFAULT 0, eq_preset TEXT, format TEXT, gapless_heuristic_info INTEGER NOT NULL DEFAULT 0, gapless_encoding_delay INTEGER NOT NULL DEFAULT 0, gapless_encoding_drain INTEGER NOT NULL DEFAULT 0, gapless_last_frame_resynch INTEGER NOT NULL DEFAULT 0, has_video INTEGER NOT NULL DEFAULT 0, relative_volume INTEGER, sample_rate REAL NOT NULL DEFAULT 0, start_time_ms REAL NOT NULL DEFAULT 0, stop_time_ms REAL NOT NULL DEFAULT 0, volume_normalization_energy INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_playback (item_pid, audio_format, bit_rate, codec_type, codec_subtype, data_kind, data_url, duration, eq_preset, format, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, has_video, relative_volume, sample_rate, start_time_ms, stop_time_ms, volume_normalization_energy) SELECT item_pid, audio_format, bit_rate, codec_type, codec_subtype, data_kind, data_url, duration, eq_preset, format, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, has_video, relative_volume, sample_rate, start_time_ms, stop_time_ms, volume_normalization_energy FROM item_extra"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_video (item_pid INTEGER PRIMARY KEY, video_quality INTEGER NOT NULL DEFAULT 0, is_rental INTEGER NOT NULL DEFAULT 0, has_chapter_data INTEGER NOT NULL DEFAULT 0, season_number INTEGER NOT NULL DEFAULT 0, episode_id TEXT NOT NULL DEFAULT '', network_name TEXT NOT NULL DEFAULT '', extended_content_rating TEXT NOT NULL DEFAULT '', movie_info TEXT NOT NULL DEFAULT '', has_alternate_audio INTEGER NOT NULL DEFAULT 0, has_subtitles INTEGER NOT NULL DEFAULT 0, audio_language INTEGER NOT NULL DEFAULT 0, audio_track_index INTEGER NOT NULL DEFAULT 0, audio_track_id INTEGER NOT NULL DEFAULT 0, subtitle_language INTEGER NOT NULL DEFAULT 0, subtitle_track_index INTEGER NOT NULL DEFAULT 0, rental_duration INTEGER NOT NULL DEFAULT 0, rental_playback_duration INTEGER NOT NULL DEFAULT 0, rental_playback_date_started INTEGER NOT NULL DEFAULT 0, rental_date_started INTEGER  NOT NULL DEFAULT 0, is_demo INTEGER NOT NULL DEFAULT 0)"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_video (item_pid, video_quality, is_rental, has_chapter_data, season_number, episode_id, network_name, extended_content_rating, movie_info, has_alternate_audio, has_subtitles, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, is_demo) SELECT item_pid, is_hd, is_rental, has_chapter_data, season_number, episode_id, network_name, extended_content_rating, movie_info, has_alternate_audio, has_subtitles, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, is_demo FROM item_extra")))
  {
    v5 = -[ML3MigrationAddedColumn initWithName:foreignTable:foreignColumn:joinColumn:]([ML3MigrationAddedColumn alloc], "initWithName:foreignTable:foreignColumn:joinColumn:", CFSTR("date_accessed"), CFSTR("purgeable_list"), CFSTR("date_last_used"), CFSTR("item_pid"));
    v6 = -[ML3MigrationAddedColumn initWithName:foreignTable:foreignColumn:joinColumn:]([ML3MigrationAddedColumn alloc], "initWithName:foreignTable:foreignColumn:joinColumn:", CFSTR("is_alarm"), CFSTR("purgeable_list"), CFSTR("is_alarm"), CFSTR("item_pid"), v5);
    v11[1] = v6;
    v7 = -[ML3MigrationAddedColumn initWithName:foreignTable:foreignColumn:joinColumn:]([ML3MigrationAddedColumn alloc], "initWithName:foreignTable:foreignColumn:joinColumn:", CFSTR("chosen_by_auto_fill"), CFSTR("item_extra"), CFSTR("chosen_by_auto_fill"), CFSTR("item_pid"));
    v11[2] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (ML3MigrationModifyTableWithResultingSchema(v3, CFSTR("item_stats"), 0, v8, CFSTR("item_pid INTEGER PRIMARY KEY, user_rating INTEGER DEFAULT 0, is_downloading INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER DEFAULT 0, play_count_recent INTEGER DEFAULT 0, has_been_played INTEGER DEFAULT 0, date_played INTEGER DEFAULT 0, date_skipped INTEGER DEFAULT 0, date_accessed INTEGER DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER DEFAULT 0, skip_count_recent INTEGER DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, hidden INTEGER DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0"))&& ML3MigrationModifyTableWithResultingSchema(v3, CFSTR("item_extra"), 0, 0, CFSTR("item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, artwork_cache_id INTEGER NOT NULL DEFAULT 0, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0, is_streaming_quality INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE purgeable_list")))
    {
      objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
      objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
      objc_msgSend(v4, "setCurrentUserVersion:", 1140119);
      v9 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140119;"));
    }
    else
    {
      v9 = 0;
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t ML3MigrationFunction1140117to1140118(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (ML3MigrationModifyTableWithResultingSchema(v3, CFSTR("item_extra"), 0, 0, &cfstr_ItemPidInteger)&& ML3MigrationExecuteSQLArray(v3, &unk_1E5BA8A30))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1140118);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140118;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140116to1140117(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN purchase_history_id INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1140117);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140117;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1140115to1140116(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN jalisco_token INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN codec_type INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN codec_subtype INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN format TEXT"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN data_kind INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN data_url TEXT"))&& objc_msgSend(v3,
                       "executeUpdate:",
                       CFSTR("ALTER TABLE item_extra ADD COLUMN has_video INTEGER NOT NULL DEFAULT 0"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN key_id_2 INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN has_chapter_data INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1140116);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140116;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1138254to1140115(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN smart_evaluation_order INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1140115);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1140115;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1138219to1138254(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_search_new (item_pid INTEGER PRIMARY KEY, search_title INTEGER NOT NULL DEFAULT 0, search_album INTEGER NOT NULL DEFAULT 0, search_artist INTEGER NOT NULL DEFAULT 0, search_composer INTEGER NOT NULL DEFAULT 0, search_album_artist INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_search_new (item_pid, search_title, search_album, search_artist, search_composer) SELECT item_pid, search_title, search_album, search_artist, search_composer FROM item_search"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_search_new SET search_album_artist = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN album_artist ON album_artist.album_artist = sort_map.name JOIN item ON item.album_artist_pid = album_artist.album_artist_pid WHERE item.item_pid = item_search_new.item_pid), 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_search"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_search_new RENAME TO item_search")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1138254);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1138254;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1134019to1138219(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRemoveLocationsForItemsMissingAssets:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1138219);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1138219;"));
  return v5;
}

uint64_t ML3MigrationFunction1132637to1138219(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRemoveLocationsForItemsMissingAssets:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1138219);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1138219;"));
  return v5;
}

uint64_t ML3MigrationFunction1124264to1132637(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_search (item_pid INTEGER PRIMARY KEY, search_title INTEGER NOT NULL DEFAULT 0, search_album INTEGER NOT NULL DEFAULT 0, search_artist INTEGER NOT NULL DEFAULT 0, search_composer INTEGER NOT NULL DEFAULT 0, search_album_artist INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT OR REPLACE INTO item_search (item_pid, search_title) SELECT item_extra.item_pid, sort_map.name_order from sort_map JOIN item_extra ON item_extra.title = sort_map.name"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_search SET search_album = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN album ON album.album = sort_map.name JOIN item ON item.album_pid = album.album_pid WHERE item.item_pid = item_search.item_pid), 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_search SET search_artist = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN item_artist ON item_artist.item_artist = sort_map.name JOIN item ON item.item_artist_pid = item_artist.item_artist_pid WHERE item.item_pid = item_search.item_pid), 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_search SET search_composer = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN composer ON composer.composer = sort_map.name JOIN item ON item.composer_pid = composer.composer_pid WHERE item.item_pid = item_search.item_pid), 0)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1132637);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1132637;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1121591to1124264(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE purgeable_list_new (item_pid INTEGER PRIMARY KEY, is_alarm INTEGER NOT NULL DEFAULT 0, date_last_used INTEGER DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO purgeable_list_new (item_pid, is_alarm, date_last_used) SELECT item_pid, is_purgeable, date_last_used FROM purgeable_list"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE purgeable_list"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE purgeable_list_new RENAME TO purgeable_list")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1124264);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1124264;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1120346to1121591(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE purgeable_list_new (item_pid INTEGER PRIMARY KEY, is_purgeable INTEGER NOT NULL DEFAULT 1, date_last_used INTEGER DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO purgeable_list_new (item_pid, is_purgeable) SELECT item_pid, is_purgeable FROM purgeable_list"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE purgeable_list"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE purgeable_list_new RENAME TO purgeable_list"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO purgeable_list (item_pid, date_last_used) SELECT item_pid, date_played FROM item_stats")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1121591);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1121591;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1118969to1120346(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE purgeable_list (item_pid INTEGER PRIMARY KEY,is_purgeable INTEGER NOT NULL DEFAULT 0)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1120346);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1120346;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1115482to1118969(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE artwork_info_new(cache_id TEXT NOT NULL, format_id INTEGER NOT NULL, length INTEGER, offset INTEGER, extra_length INTEGER NOT NULL DEFAULT 0, UNIQUE (cache_id, format_id))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO artwork_info_new SELECT cache_id, format_id, length, offset, extra_length FROM artwork_info"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE artwork_info"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE artwork_info_new RENAME TO artwork_info")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1118969);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1118969;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1115195to1115482(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v3, "setNeedsToRecreateTriggers:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1115482);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1115482;"));
  return v5;
}

uint64_t ML3MigrationFunction1114940to1115195(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE composer ADD COLUMN artwork_cache_id INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE composer SET artwork_cache_id = IFNULL((SELECT artwork_cache_id FROM item JOIN item_extra USING (item_pid) WHERE item.item_pid = composer.representative_item_pid), 0)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1115195);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1115195;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1114502to1114940(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN has_cloud_play_order INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1114940);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1114940;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1113775to1114502(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if ((int)objc_msgSend(v4, "originalUserVersion") < 1108291
    || (int)objc_msgSend(v4, "originalUserVersion") > 1124264
    || +[ML3MusicLibrary updateTrackIntegrityOnConnection:](ML3MusicLibrary, "updateTrackIntegrityOnConnection:", v3))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1114502);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1114502;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1111153to1113775(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item_extra SET location = \"\" WHERE location = \"/\"")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1113775);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1113775;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1111152to1111153(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v3, "setNeedsToRecreateTriggers:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1111153);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1111153;"));
  return v5;
}

uint64_t ML3MigrationFunction1108291to1111152(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemTitle"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemTitle_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbum"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbumArtist"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbumArtist_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemAlbum_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemItemArtist_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemComposer_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("DROP INDEX IF EXISTS ItemGenre_Section"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE entity_revision_new (revision INTEGER PRIMARY KEY, entity_pid INTEGER NOT NULL, deleted INTEGER NOT NULL DEFAULT 0, class INTEGER NOT NULL DEFAULT 0, revision_type INTEGER NOT NULL DEFAULT 0, UNIQUE(entity_pid, revision_type))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO entity_revision_new (revision, entity_pid, deleted, class) SELECT revision, entity_pid, deleted, class FROM entity_revision"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE entity_revision"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE entity_revision_new RENAME TO entity_revision")))
  {
    objc_msgSend(v4, "setNeedsToRecreateIndexes:", 1);
    objc_msgSend(v4, "setNeedsToRecreateTriggers:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1111152);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1111152;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1102819to1108291(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item ADD COLUMN exclude_from_shuffle INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE item SET exclude_from_shuffle=1 WHERE item_pid IN (SELECT item_pid FROM item_extra WHERE exclude_from_shuffle=1)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_extra_new (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, artwork_cache_id INTEGER NOT NULL DEFAULT 0, location_type INTEGER NOT NULL DEFAULT 0, location TEXT NOT NULL DEFAULT '', extension INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, file_size INTEGER NOT NULL DEFAULT 0, file_creator INTEGER NOT NULL DEFAULT 0, file_type INTEGER NOT NULL DEFAULT 0, num_dir_levels_file INTEGER NOT NULL DEFAULT 0, num_dir_levels_lib INTEGER NOT NULL DEFAULT 0, integrity BLOB, media_kind INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, start_time_ms REAL NOT NULL DEFAULT 0, stop_time_ms REAL NOT NULL DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, total_burn_time_ms REAL NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, relative_volume INTEGER, eq_preset TEXT, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, is_ota_purchased INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, is_itunes_u INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, copyright TEXT, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0, is_streaming_quality INTEGER NOT NULL DEFAULT 0, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, is_podcast INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, store_kind INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, redownload_action_params TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, audio_format INTEGER NOT NULL DEFAULT 0, sample_rate REAL NOT NULL DEFAULT 0, duration INTEGER NOT NULL DEFAULT 0, gapless_heuristic_info INTEGER NOT NULL DEFAULT 0, gapless_encoding_delay INTEGER NOT NULL DEFAULT 0, gapless_encoding_drain INTEGER NOT NULL DEFAULT 0, gapless_last_frame_resynch INTEGER NOT NULL DEFAULT 0, analysis_inhibit_flags INTEGER NOT NULL DEFAULT 0, audio_fingerprint INTEGER NOT NULL DEFAULT 0, volume_normalization_energy INTEGER NOT NULL DEFAULT 0, is_rental INTEGER NOT NULL DEFAULT 0, is_demo INTEGER NOT NULL DEFAULT 0, rental_duration INTEGER NOT NULL DEFAULT 0, rental_playback_duration INTEGER NOT NULL DEFAULT 0, rental_playback_date_started INTEGER NOT NULL DEFAULT 0, rental_date_started INTEGER  NOT NULL DEFAULT 0, has_alternate_audio INTEGER NOT NULL DEFAULT 0, has_subtitles INTEGER NOT NULL DEFAULT 0, is_hd INTEGER NOT NULL DEFAULT 0, season_number INTEGER NOT NULL DEFAULT 0, audio_language INTEGER NOT NULL DEFAULT 0, audio_track_index INTEGER NOT NULL DEFAULT 0, audio_track_id INTEGER NOT NULL DEFAULT 0, subtitle_language INTEGER NOT NULL DEFAULT 0, subtitle_track_index INTEGER NOT NULL DEFAULT 0, subtitle_track_id INTEGER NOT NULL DEFAULT 0, episode_id TEXT NOT NULL DEFAULT '', network_name TEXT NOT NULL DEFAULT '', extended_content_rating TEXT NOT NULL DEFAULT '', movie_info TEXT NOT NULL DEFAULT '', bit_rate INTEGER NOT NULL DEFAULT 0, pending_genius_checksum INTEGER NOT NULL DEFAULT 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_extra_new (item_pid, title, sort_title, disc_count, track_count, artwork_cache_id, location_type, location, extension, date_created, file_size, file_creator, file_type, num_dir_levels_file, num_dir_levels_lib, integrity, media_kind, date_modified, year, content_rating, content_rating_level, is_user_disabled, remember_bookmark, start_time_ms, stop_time_ms, total_time_ms, total_burn_time_ms, bpm, relative_volume, eq_preset, genius_id, comment, grouping, description, description_long, collection_description, is_ota_purchased, is_compilation, is_itunes_u, is_audible_audio_book, copyright, chosen_by_auto_fill, is_temporary_cloud_download, is_streaming_quality, store_bookmark_timestamp, store_bookmark_entity_revision, is_podcast, external_guid, feed_url, store_kind, date_purchased, date_released, account_id, key_versions, key_platform_id, key_id, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, artwork_url, store_xid, store_flavor, store_saga_id, store_matched_status, store_redownloaded_status, audio_format, sample_rate, duration, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, analysis_inhibit_flags, audio_fingerprint, volume_normalization_energy, is_rental, is_demo, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, has_alternate_audio, has_subtitles, is_hd, season_number, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, subtitle_track_id, episode_id, network_name, extended_content_rating, movie_info, bit_rate, pending_genius_checksum) SELECT item_pid, title, sort_title, disc_count, track_count, artwork_cache_id, location_type, location, extension, date_created, file_size, file_creator, file_type, num_dir_levels_file, num_dir_levels_lib, integrity, media_kind, date_modified, year, content_rating, content_rating_level, is_user_disabled, remember_bookmark, start_time_ms, stop_time_ms, total_time_ms, total_burn_time_ms, bpm, relative_volume, eq_preset, genius_id, comment, grouping, description, description_long, collection_description, is_ota_purchased, is_compilation, is_itunes_u, is_audible_audio_book, copyright, chosen_by_auto_fill, is_temporary_cloud_download, is_streaming_quality, store_bookmark_timestamp, store_bookmark_entity_revision, is_podcast, external_guid, feed_url, store_kind, date_purchased, date_released, account_id, key_versions, key_platform_id, key_id, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, artwork_url, store_xid, store_flavor, store_saga_id, store_matched_status, store_redownloaded_status, audio_format, sample_rate, duration, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, analysis_inhibit_flags, audio_fingerprint, volume_normalization_energy, is_rental, is_demo, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, has_alternate_audio, has_subtitles, is_hd, season_number, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, subtitle_track_id, episode_id, network_name, extended_content_rating, movie_info, bit_rate, pending_genius_checksum FROM item_extra"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_extra"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra_new RENAME TO item_extra")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1108291);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1108291;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1096158to1102819(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN store_bookmark_timestamp REAL DEFAULT NULL"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN store_bookmark_entity_revision INTEGER DEFAULT NULL")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1102819);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1102819;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1079529to1096158(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN is_streaming_quality INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1096158);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1096158;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1063000to1079529(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA auto_vacuum = 2;")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1079529);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1079529;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1062137to1063000(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  objc_msgSend(a2, "setCurrentUserVersion:", 1063000);
  v4 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1063000;"));

  return v4;
}

uint64_t ML3MigrationFunction1061350to1062137(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN pending_genius_checksum INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1062137);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1062137;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1061159to1061350(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToUpdateSortMap:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1061350);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1061350;"));
  return v5;
}

uint64_t ML3MigrationFunction1061040to1061159(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToRecreateIndexes:", 1);
  objc_msgSend(v3, "setNeedsToRecreateTriggers:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1061159);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1061159;"));
  return v5;
}

uint64_t ML3MigrationFunction1058985to1061040(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE composer ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE genre ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1061040);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1061040;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1055456to1058985(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, representative_item_pid, grouping_key) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, (CASE sort_series_name WHEN '' THEN NULL ELSE sort_series_name END), representative_item_pid, grouping_key FROM item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_artist"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist_new RENAME TO item_artist")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1058985);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1058985;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1053827to1055456(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN store_matched_status INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN store_redownloaded_status INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1055456);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1055456;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1050919to1053827(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE artwork_info ADD COLUMN extra_length INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1053827);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1053827;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1046932to1050919(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1050919);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1050919;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1033275to1046932(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album ADD COLUMN grouping_key BLOB"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album SET feed_url = NULL WHERE feed_url = ''"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_artist ADD COLUMN grouping_key BLOB"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist ADD COLUMN grouping_key BLOB"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE composer ADD COLUMN grouping_key BLOB"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE genre ADD COLUMN grouping_key BLOB")))
  {
    objc_msgSend(v4, "setNeedsToUpdateSortMap:", 1);
    objc_msgSend(v4, "setCurrentUserVersion:", 1046932);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1046932;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1028771to1033275(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE ubiquitous_bookmarks (key TEXT PRIMARY KEY, bookmark_time_ms REAL, timestamp REAL)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1033275);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1033275;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1026201to1028771(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v3, "setNeedsToUpdateSortMap:", 1);
  objc_msgSend(v3, "setCurrentUserVersion:", 1028771);

  v5 = objc_msgSend(v4, "executeUpdate:", CFSTR("PRAGMA user_version = 1028771;"));
  return v5;
}

uint64_t ML3MigrationFunction1021756to1026201(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE album_artist ADD COLUMN artwork_cache_id INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album_artist SET artwork_cache_id = IFNULL((SELECT artwork_cache_id FROM item JOIN item_extra USING (item_pid) WHERE item.album_artist_pid = album_artist.album_artist_pid), 0)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("UPDATE album_artist SET representative_item_pid = IFNULL((SELECT item_pid FROM item WHERE item.album_artist_pid = album_artist.album_artist_pid), 0)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1026201);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1026201;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1016427to1021756(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN store_cloud_id INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1021756);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1021756;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1015139to1016427(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE container ADD COLUMN description TEXT")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1016427);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1016427;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1011335to1015139(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE artwork_info (cache_id TEXT NOT NULL, format_id INTEGER NOT NULL, length INTEGER, offset INTEGER, extra_length INTEGER NOT NULL DEFAULT 0, UNIQUE (cache_id, format_id))"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE artwork_free_list (offset INTEGER PRIMARY KEY, length INTEGER)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1015139);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1015139;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1007541to1011335(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN store_saga_id INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1011335);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1011335;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1006189to1007541(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE container_items (container_pid INTEGER PRIMARY KEY, item_pid_data BLOB)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("DROP TABLE item_to_container"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE VIRTUAL TABLE item_to_container USING ML3ContainerItemToContainer (item_pid INTEGER NOT NULL DEFAULT 0, container_pid INTEGER NOT NULL DEFAULT 0, physical_order INTEGER NOT NULL DEFAULT 0, shuffle_order INTEGER NOT NULL DEFAULT 0)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1007541);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1007541;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1005492to1006189(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE genius_config (id INTEGER PRIMARY KEY, version INTEGER UNIQUE, default_num_results INTEGER DEFAULT 0, min_num_results INTEGER DEFAULT 0, data BLOB)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE genius_metadata (genius_id INTEGER PRIMARY KEY, revision_level INTEGER, version INTEGER, checksum INTEGER, data BLOB)"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE genius_similarities (genius_id INTEGER PRIMARY KEY, data BLOB)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1006189);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1006189;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1003964to1005492(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN integrity BLOB")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1005492);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1005492;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1003342to1003964(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1003964);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1003964;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1002980to1003342(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN store_xid TEXT"))
    && objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item_extra ADD COLUMN store_flavor TEXT")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1003342);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1003342;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction1002402to1002980(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE entity_revision ADD COLUMN deleted INTEGER NOT NULL DEFAULT 0"))&& objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE entity_revision ADD COLUMN class INTEGER NOT NULL DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1002980);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1002980;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction992142to1002980(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("CREATE TABLE entity_revision (revision INTEGER PRIMARY KEY, entity_pid INTEGER NOT NULL UNIQUE, deleted INTEGER NOT NULL DEFAULT 0, class INTEGER NOT NULL DEFAULT 0)")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 1002980);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 1002980;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction992141to992142(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "executeUpdate:", CFSTR("ALTER TABLE item ADD COLUMN base_location_id INTEGER DEFAULT 0")))
  {
    objc_msgSend(v4, "setCurrentUserVersion:", 992142);
    v5 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 992142;"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t ML3MigrationFunction992140to992141(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a1;
  objc_msgSend(a2, "setCurrentUserVersion:", 992141);
  v4 = objc_msgSend(v3, "executeUpdate:", CFSTR("PRAGMA user_version = 992141;"));

  return v4;
}

uint64_t __Block_byref_object_copy__1994(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1995(uint64_t a1)
{

}

void _ML3MigrationFunctionPatchUpIncorrectDateDownloaded(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  MLMobileUserHomeDirectory();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("Media"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AC149000, v4, OS_LOG_TYPE_DEFAULT, "Starting to patch up date_downloaded", buf, 2u);
  }

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "executeQuery:", CFSTR("SELECT item.ROWID, base_location.path, item_extra.location, item.date_downloaded FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id >= 300 AND item.date_downloaded != 0"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___ML3MigrationFunctionPatchUpIncorrectDateDownloaded_block_invoke;
  v15[3] = &unk_1E5B639C0;
  v16 = v3;
  v8 = v5;
  v17 = v8;
  v9 = v3;
  objc_msgSend(v6, "enumerateRowsWithBlock:", v15);
  v13[0] = v7;
  v13[1] = 3221225472;
  v13[2] = ___ML3MigrationFunctionPatchUpIncorrectDateDownloaded_block_invoke_1806;
  v13[3] = &unk_1E5B5C7D8;
  v14 = v1;
  v10 = v1;
  objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v13);
  v11 = os_log_create("com.apple.amp.medialibrary", "Default");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = objc_msgSend(v8, "count");
    *(_DWORD *)buf = 134217984;
    v19 = v12;
    _os_log_impl(&dword_1AC149000, v11, OS_LOG_TYPE_DEFAULT, "Finished patching up date_downloaded for %ld items", buf, 0xCu);
  }

}

void sub_1AC24B258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC24B8FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1AC24BA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC24C20C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1AC24C22C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1AC24C1D8);
}

void sub_1AC24C2C8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1AC24C2E8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1AC24C294);
}

void sub_1AC24C484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC24C574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC24C684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC24C810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC24D080(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1AC24D1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC24D2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC24D418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC24D9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC24DFD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1AC24E098(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AC24E2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC24EA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC24F6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC24FFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2503F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Block_object_dispose((const void *)(v31 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1AC250500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC250A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  _Block_object_dispose((const void *)(v51 - 160), 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_1AC250C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC250D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC250DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC250E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2510C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC251D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC252280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC252E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  _Block_object_dispose((const void *)(v40 - 192), 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2535E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC254D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1AC25541C(_Unwind_Exception *a1)
{
  char v1;

  if ((v1 & 1) != 0)
    objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1AC25596C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC255CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2077(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2078(uint64_t a1)
{

}

id GetP7BPath()
{
  void *v0;
  void *v1;

  MLMobileUserHomeDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("/Media/iTunes_Control/iTunes/MediaLibrary.p7b"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t InsertOrReplaceIntoArtworkToken(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  id v19;
  NSObject *v20;
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  char v27;
  uint64_t v28;
  id v30;
  id v31;
  _QWORD v32[4];
  uint8_t buf[4];
  id v34;
  _QWORD v35[6];

  v35[5] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a1;
  if (objc_msgSend(v11, "length"))
  {
    v35[0] = v11;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v35[1] = v13;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v35[2] = v14;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a5);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v35[3] = v15;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a6);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v35[4] = v16;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v35, 5);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = 0;
    v18 = objc_msgSend(v12, "executeUpdate:withParameters:error:", CFSTR("INSERT OR REPLACE INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) VALUES (?, ?, ?, ?, ?)"), v17, &v31);

    v19 = v31;
    if ((v18 & 1) == 0)
    {
      v20 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v34 = v19;
        v21 = "Failed to update artwork_token with error: %{public}@";
LABEL_9:
        _os_log_impl(&dword_1AC149000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0xCu);
        goto LABEL_10;
      }
      goto LABEL_10;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a5);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v32[0] = v22;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a6);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v32[1] = v23;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v32[2] = v24;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v32[3] = v25;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v32, 4);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = 0;
    v27 = objc_msgSend(v12, "executeUpdate:withParameters:error:", CFSTR("DELETE FROM artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ? AND artwork_source_type = ?"), v26, &v30);

    v19 = v30;
    if ((v27 & 1) == 0)
    {
      v20 = os_log_create("com.apple.amp.medialibrary", "Default");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v34 = v19;
        v21 = "Failed to delete artwork_token with error: %{public}@";
        goto LABEL_9;
      }
LABEL_10:

      v28 = 0;
      goto LABEL_11;
    }
  }
  v28 = 1;
LABEL_11:

  return v28;
}

uint64_t WriteDictionaryToPathWithGrappaID(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  char v11;
  id v12;
  id v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  void *v19;
  char v20;
  NSObject *v21;
  id v23;
  unsigned int v24;
  uint64_t v25;
  id v26;
  id v27;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = (void *)MEMORY[0x1AF43CC0C]();
  v27 = 0;
  objc_msgSend(MEMORY[0x1E0CB38B0], "dataWithPropertyList:format:options:error:", v5, 200, 0, &v27);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v27;
  v10 = v9;
  if (v8)
  {
    v26 = v9;
    v11 = objc_msgSend(v8, "writeToFile:options:error:", v6, 1, &v26);
    v12 = v26;

    if ((v11 & 1) != 0)
    {
      if ((_DWORD)a3)
      {
        v25 = 0;
        v24 = 0;
        v13 = objc_retainAutorelease(v8);
        jumT7rcoieclCtxS2rgJ(a3, objc_msgSend(v13, "bytes"), objc_msgSend(v13, "length"), (uint64_t)&v25);
        if (v14)
        {
          v10 = v12;
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v25, v24);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "stringByAppendingPathExtension:", CFSTR("cig"));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = v12;
          v20 = objc_msgSend(v18, "writeToFile:options:error:", v19, 1, &v23);
          v10 = v23;

          if ((v20 & 1) == 0)
          {
            v21 = os_log_create("com.apple.amp.medialibrary", "Library");
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543618;
              v29 = v6;
              v30 = 2114;
              v31 = v10;
              _os_log_impl(&dword_1AC149000, v21, OS_LOG_TYPE_ERROR, "Could not write to %{public}@: %{public}@", buf, 0x16u);
            }

          }
          X5EvIJWqdcALcjaxX6Pl(v25);

        }
        v16 = 1;
        goto LABEL_20;
      }
      v16 = 1;
    }
    else
    {
      v17 = os_log_create("com.apple.amp.medialibrary", "Library");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543618;
        v29 = v6;
        v30 = 2114;
        v31 = v12;
        _os_log_impl(&dword_1AC149000, v17, OS_LOG_TYPE_ERROR, "Could not write to %{public}@: %{public}@", buf, 0x16u);
      }

      v16 = 0;
    }
    v10 = v12;
    goto LABEL_20;
  }
  v15 = os_log_create("com.apple.amp.medialibrary", "Library");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543618;
    v29 = v5;
    v30 = 2114;
    v31 = v10;
    _os_log_impl(&dword_1AC149000, v15, OS_LOG_TYPE_ERROR, "Could not encode %{public}@: %{public}@", buf, 0x16u);
  }

  v16 = 0;
LABEL_20:

  objc_autoreleasePoolPop(v7);
  return v16;
}

void sub_1AC25CAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC25CDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC25D358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC25E89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC25E980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3086(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3087(uint64_t a1)
{

}

void sub_1AC25F8C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AC25F9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC25FE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC26061C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1AC2609B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1AC260EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

sqlite3_value *MLDBArgumentAsString(uint64_t a1, unsigned int a2)
{
  sqlite3_value *v2;

  v2 = *(sqlite3_value **)(a1 + 8 * a2);
  if (v2)
  {
    v2 = (sqlite3_value *)sqlite3_value_text(v2);
    if (v2)
      v2 = (sqlite3_value *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v2);
  }
  return v2;
}

id SBKIdentifierStringByMD5HashingString(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  CC_MD5_CTX c;
  unsigned __int8 md[16];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "dataUsingEncoding:", 4);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "length")
    && (memset(&c, 0, sizeof(c)), CC_MD5_Init(&c))
    && (v2 = objc_retainAutorelease(v1),
        CC_MD5_Update(&c, (const void *)objc_msgSend(v2, "bytes"), objc_msgSend(v2, "length")))
    && CC_MD5_Final(md, &c))
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", md, 16);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "length");
    v5 = objc_retainAutorelease(v3);
    v6 = objc_msgSend(v5, "bytes");
    objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithCapacity:", 2 * v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4 >= 1)
    {
      v8 = 0;
      v9 = 1;
      do
      {
        objc_msgSend(v7, "appendFormat:", CFSTR("%02x"), *(unsigned __int8 *)(v6 + v8));
        v8 = v9;
      }
      while (v4 > v9++);
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_1AC261FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

id _containmentPredicateForIsMediaTypePredicate(void *a1, unsigned int a2)
{
  id v3;
  int v4;
  void *v5;

  v3 = a1;
  v4 = objc_msgSend(v3, "comparison");
  objc_msgSend(v3, "value");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v3) = objc_msgSend(v5, "BOOLValue");
  _containmentMediaTypeMasksPredicateForMediaTypeMask(((int)(((v4 != 2) ^ v3) << 31) >> 31) ^ a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

id _containmentMediaTypeMasksPredicateForMediaTypeMask(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  id v4;
  id v5;
  _QWORD block[4];
  id v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  if (_containmentMediaTypeMasksPredicateForMediaTypeMask_onceToken != -1)
    dispatch_once(&_containmentMediaTypeMasksPredicateForMediaTypeMask_onceToken, &__block_literal_global_3487);
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__3086;
  v15 = __Block_byref_object_dispose__3087;
  v16 = 0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = _containmentMediaTypeMasksPredicateForMediaTypeMask_queue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___containmentMediaTypeMasksPredicateForMediaTypeMask_block_invoke_2;
  block[3] = &unk_1E5B5F858;
  v8 = v2;
  v9 = &v11;
  v10 = a1;
  v4 = v2;
  dispatch_sync(v3, block);
  v5 = (id)v12[5];

  _Block_object_dispose(&v11, 8);
  return v5;
}

void sub_1AC262AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___containmentMediaTypeMasksPredicateForMediaTypeMask_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t i;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend((id)_containmentMediaTypeMasksPredicateForMediaTypeMask_cache, "objectForKey:", *(_QWORD *)(a1 + 32));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; i != 25; ++i)
    {
      if ((*(_DWORD *)(a1 + 48) & _containmentMediaTypeMasksPredicateForMediaTypeMask_validMediaTypesMasks[i]) != 0)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v7);

      }
    }
    if (objc_msgSend(v5, "count"))
    {
      objc_msgSend(v5, "sortUsingSelector:", sel_compare_);
      objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3ContainmentPredicate predicateWithProperty:values:](ML3ContainmentPredicate, "predicateWithProperty:values:", CFSTR("media_type"), v8);
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v9;

      objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "unsignedIntegerValue");

      if (v13 >= 0x200)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        +[ML3ComparisonPredicate predicateWithProperty:value:comparison:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:", CFSTR("media_type"), v14, 4);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        v24[0] = v15;
        v24[1] = v16;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v24, 2);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v17);
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v20 = *(void **)(v19 + 40);
        *(_QWORD *)(v19 + 40) = v18;

      }
    }
    else
    {
      +[ML3TruthPredicate truePredicate](ML3TruthPredicate, "truePredicate");
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v23 = *(void **)(v22 + 40);
      *(_QWORD *)(v22 + 40) = v21;

    }
    objc_msgSend((id)_containmentMediaTypeMasksPredicateForMediaTypeMask_cache, "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(_QWORD *)(a1 + 32));

  }
}

void ___containmentMediaTypeMasksPredicateForMediaTypeMask_block_invoke()
{
  uint64_t v0;
  void *v1;
  dispatch_queue_t v2;
  void *v3;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0D4D078]), "initWithMaximumCapacity:", 16);
  v1 = (void *)_containmentMediaTypeMasksPredicateForMediaTypeMask_cache;
  _containmentMediaTypeMasksPredicateForMediaTypeMask_cache = v0;

  v2 = dispatch_queue_create(0, 0);
  v3 = (void *)_containmentMediaTypeMasksPredicateForMediaTypeMask_queue;
  _containmentMediaTypeMasksPredicateForMediaTypeMask_queue = (uint64_t)v2;

}

BOOL MIPPodcastReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MIPArtist *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(MIPArtist);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && (MIPArtistReadFrom(v17, a2) & 1) != 0)
          goto LABEL_26;
        goto LABEL_34;
      case 2u:
        v17 = objc_alloc_init(MIPSeries);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && (MIPSeriesReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_26:
          PBReaderRecallMark();
LABEL_30:

LABEL_31:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_34:

        return 0;
      case 3u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
        goto LABEL_29;
      case 4u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
LABEL_29:
        v17 = *(MIPArtist **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;
        goto LABEL_30;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_31;
    }
  }
}

void sub_1AC263BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC263E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1AC2641E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3PurchaseHistoryImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3PurchaseHistoryImportItem>,std::allocator<ML3PurchaseHistoryImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3PurchaseHistoryImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3PurchaseHistoryImportItem>,std::allocator<ML3PurchaseHistoryImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3PurchaseHistoryImportItem *,std::shared_ptr<ML3DAAPImportItem>::__shared_ptr_default_delete<ML3DAAPImportItem,ML3PurchaseHistoryImportItem>,std::allocator<ML3PurchaseHistoryImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_28ML3PurchaseHistoryImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1AC264400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1AC26449C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(id *this)
{
  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{

  *this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)(this + 3));
}

uint64_t ML3ProtoSyncImportItem::getDescription@<X0>(id *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  const char *v8;
  size_t v9;
  _QWORD *v10;
  uint64_t v12;
  id obj;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[10];
  char v20;
  uint64_t v21;
  _BYTE v22[128];
  uint64_t v23;

  v12 = a2;
  v23 = *MEMORY[0x1E0C80C00];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  objc_msgSend(this[10], "libraryIdentifiers");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v15 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_msgSend(v6, "libraryName", v12);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "libraryId");
        if (v7)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)" [", 2);
          v8 = (const char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String");
          v9 = strlen(v8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)v8, v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)" : ", 3);
        }
        else
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)" [<null> : ", 11);
        }
        *(_DWORD *)((char *)v19 + *(_QWORD *)(v18 - 24)) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(v18 - 24)) & 0xFFFFFFB5 | 2;
        v10 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);

      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
    }
    while (v3);
  }

  std::stringbuf::str();
  v18 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v19[-1] + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v21);
}

void sub_1AC265C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void ML3ProtoSyncTrackImportItem::~ML3ProtoSyncTrackImportItem(id *this)
{
  ML3ProtoSyncTrackImportItem::~ML3ProtoSyncTrackImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(this);
}

void ML3ProtoSyncTrackImportItem::getStringValue(ML3ProtoSyncTrackImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *v4;
  void *v5;
  std::string *v6;
  void *__p[2];
  uint64_t v8;

  ML3ProtoSyncTrackImportItem::_getProtoStringValue(this, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v4), "UTF8String"));
    *(_QWORD *)a3 = off_1E5B4D010;
    *(_BYTE *)(a3 + 8) = 1;
    v6 = (std::string *)(a3 + 16);
    if (SHIBYTE(v8) < 0)
    {
      std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      if (SHIBYTE(v8) < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      *(_QWORD *)(a3 + 32) = v8;
    }
  }
  else
  {
    *(_QWORD *)a3 = off_1E5B4D010;
    *(_BYTE *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }

}

void sub_1AC265DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncTrackImportItem::getIntegerValue(id *this, int a2)
{
  uint64_t v4;
  int v6;
  id v7;
  id v8;
  id v9;
  unsigned int v10;
  unsigned int v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  unsigned int v16;
  BOOL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  id v26;

  v4 = 0;
  if (a2 <= 100663296)
  {
    if (a2 <= 33554434)
    {
      switch(a2)
      {
        case 16777217:
LABEL_31:
          v10 = objc_msgSend(this[11], "mediaType") - 1;
          if (v10 > 0xC)
            return 0;
          return dword_1AC3D997C[v10];
        case 16777218:
        case 16777219:
        case 16777220:
        case 16777221:
        case 16777222:
        case 16777223:
        case 16777224:
        case 16777225:
        case 16777226:
        case 16777227:
        case 16777228:
        case 16777229:
        case 16777230:
        case 16777231:
        case 16777232:
        case 16777233:
        case 16777234:
        case 16777235:
        case 16777236:
        case 16777240:
        case 16777241:
        case 16777243:
        case 16777244:
        case 16777248:
        case 16777249:
        case 16777250:
        case 16777251:
        case 16777252:
        case 16777253:
          return v4;
        case 16777237:
          v7 = this[12];
          if (!v7)
          {
            v7 = this[16];
            if (!v7)
              return 0;
          }
          return (int)objc_msgSend(v7, "discNumber");
        case 16777238:
          v22 = this[12];
          if (v22)
            return (int)objc_msgSend(v22, "trackNumber");
          v22 = this[16];
          if (v22)
            return (int)objc_msgSend(v22, "trackNumber");
          v26 = this[14];
          if (!v26)
            return 0;
          objc_msgSend(v26, "episodeId");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "integerValue");
          break;
        case 16777239:
          ML3ProtoSyncTrackImportItem::_getProtoStringValue((ML3ProtoSyncTrackImportItem *)this, 16777239);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "integerValue");
          break;
        case 16777242:
          v21 = this[12];
          if (!v21)
          {
            v21 = this[16];
            if (!v21)
              return 0;
          }
          v11 = objc_msgSend(v21, "excludeFromShuffle");
          goto LABEL_143;
        case 16777245:
          goto LABEL_33;
        case 16777246:
          v11 = objc_msgSend(this[17], "compilation");
          goto LABEL_143;
        case 16777247:
          return objc_msgSend(this[11], "creationDateTime");
        default:
          goto LABEL_155;
      }
LABEL_140:
      v4 = v14;

    }
    else
    {
      switch(a2)
      {
        case 33554435:
          return (int)objc_msgSend(this[17], "numDiscs");
        case 33554436:
          return (int)objc_msgSend(this[17], "numTracks");
        case 33554437:
          return objc_msgSend(this[11], "duration");
        case 33554438:
          return (int)objc_msgSend(this[11], "year");
        case 33554439:
        case 33554441:
        case 33554450:
        case 33554451:
        case 33554452:
        case 33554453:
        case 33554454:
        case 33554455:
        case 33554459:
        case 33554460:
        case 33554461:
        case 33554462:
        case 33554463:
          goto LABEL_155;
        case 33554440:
          return objc_msgSend(this[11], "fileSize");
        case 33554442:
          v16 = objc_msgSend(this[11], "mediaType") - 1;
          if (v16 > 0xC)
            return 0;
          v17 = v16 == 7;
          break;
        case 33554443:
          return objc_msgSend(this[11], "modificationDateTime");
        case 33554444:
          goto LABEL_31;
        case 33554445:
          return (int)objc_msgSend(this[11], "contentRating");
        case 33554446:
          return (int)objc_msgSend(this[11], "contentRatingLevel");
        case 33554447:
          v11 = objc_msgSend(this[11], "userDisabled");
          goto LABEL_143;
        case 33554448:
          return (int)objc_msgSend(this[21], "beatsPerMinute");
        case 33554449:
          return objc_msgSend(this[12], "geniusId");
        case 33554456:
        case 33554457:
        case 33554464:
        case 33554465:
          return v4;
        case 33554458:
          return (int)objc_msgSend(this[11], "fileKind");
        case 33554466:
          v11 = objc_msgSend(this[11], "isPreorder");
          goto LABEL_143;
        default:
          switch(a2)
          {
            case 83886081:
              v12 = this[12];
              if (v12)
                return (int)objc_msgSend(v12, "userRating");
              v12 = this[16];
              if (v12)
                return (int)objc_msgSend(v12, "userRating");
              return 0;
            case 83886082:
            case 83886090:
            case 83886096:
            case 83886099:
              return v4;
            case 83886083:
              goto LABEL_155;
            case 83886084:
              return (int)objc_msgSend(this[11], "playCount");
            case 83886085:
              return (int)objc_msgSend(this[11], "playCountDelta");
            case 83886086:
              return (int)objc_msgSend(this[11], "playCount") > 0;
            case 83886087:
            case 83886089:
              return objc_msgSend(this[11], "lastPlayedDateTime");
            case 83886088:
              return objc_msgSend(this[11], "lastSkippedDateTime");
            case 83886091:
              return (int)objc_msgSend(this[11], "skipCount");
            case 83886092:
              return (int)objc_msgSend(this[11], "skipCountDelta");
            case 83886093:
              v11 = objc_msgSend(this[11], "rememberBookmark");
              goto LABEL_143;
            case 83886094:
              return objc_msgSend(this[11], "bookmarkTimeMilliseconds");
            case 83886095:
              v11 = objc_msgSend(this[11], "hidden");
              goto LABEL_143;
            case 83886097:
              return (int)objc_msgSend(this[11], "likedState");
            case 83886098:
              v11 = objc_msgSend(this[11], "likedStateChanged");
              goto LABEL_143;
            case 83886100:
              return objc_msgSend(this[11], "likedStateChangedDate");
            default:
              switch(a2)
              {
                case 50331649:
                  v9 = this[12];
                  if (!v9)
                  {
                    v9 = this[16];
                    if (!v9)
                      return 0;
                  }
                  return (int)objc_msgSend(v9, "audioFormat");
                case 50331650:
                  return (int)objc_msgSend(this[21], "bitRate");
                case 50331651:
                  return (int)objc_msgSend(this[21], "codecType");
                case 50331652:
                  return (int)objc_msgSend(this[21], "codecSubType");
                case 50331653:
                  return (int)objc_msgSend(this[21], "dataKind");
                case 50331655:
                  return objc_msgSend(this[21], "durationInSamples");
                case 50331658:
                  return objc_msgSend(this[21], "gaplessHeuristicCode");
                case 50331659:
                  return objc_msgSend(this[21], "gaplessHeuristicDelayCode");
                case 50331660:
                  return objc_msgSend(this[21], "gaplessEncodingDrainCode");
                case 50331661:
                  return objc_msgSend(this[21], "gaplessFrameResyncCode");
                case 50331662:
                  v23 = this[12];
                  if (!v23)
                  {
                    v23 = this[16];
                    if (!v23)
                      return 0;
                  }
                  v11 = objc_msgSend(v23, "hasVideo");
                  goto LABEL_143;
                case 50331663:
                  return (int)objc_msgSend(this[21], "relativeVolume");
                case 50331664:
                  return (int)objc_msgSend(this[21], "sampleRate");
                case 50331667:
                  return objc_msgSend(this[21], "volumeNormalizationEnergy");
                case 50331668:
                  return (int)objc_msgSend(this[21], "progressionDirection");
                default:
                  goto LABEL_155;
              }
          }
      }
      return v17;
    }
    return v4;
  }
  if (a2 <= 117440512)
  {
    switch(a2)
    {
      case 100663297:
        if (objc_msgSend(this[10], "storeId"))
          v15 = this[10];
        else
          v15 = this[11];
        return objc_msgSend(v15, "storeId");
      case 100663298:
        v15 = this[19];
        return objc_msgSend(v15, "storeId");
      case 100663299:
        v15 = this[20];
        return objc_msgSend(v15, "storeId");
      case 100663300:
        return objc_msgSend(this[11], "storePlaylistId");
      case 100663301:
        return objc_msgSend(this[11], "storefrontId");
      case 100663302:
        if (objc_msgSend(this[10], "purchaseHistoryId"))
          v18 = this[10];
        else
          v18 = this[11];
        return objc_msgSend(v18, "purchaseHistoryId");
      case 100663303:
        return (int)objc_msgSend(this[11], "purchaseHistoryToken");
      case 100663305:
        if (objc_msgSend(this[10], "sagaId"))
          v20 = this[10];
        else
          v20 = this[11];
        return objc_msgSend(v20, "sagaId");
      case 100663307:
        return (int)objc_msgSend(this[11], "cloudStatus");
      case 100663308:
        return objc_msgSend(this[9], "syncIdFromMultiverseId:", this[10]);
      case 100663309:
      case 100663310:
      case 100663313:
      case 100663327:
      case 100663331:
      case 100663332:
      case 100663339:
      case 100663342:
      case 100663343:
      case 100663353:
      case 100663354:
        return v4;
      case 100663311:
      case 100663316:
        return (int)objc_msgSend(this[11], "drmVersionsCode");
      case 100663312:
        if (objc_msgSend(this[10], "hasAccountId"))
          v19 = this[10];
        else
          v19 = this[11];
        return objc_msgSend(v19, "accountId");
      case 100663314:
        return objc_msgSend(this[11], "familyAccountId");
      case 100663315:
        return (int)objc_msgSend(this[11], "storeProtectionType");
      case 100663317:
        return objc_msgSend(this[11], "drmPlatformIdCode");
      case 100663318:
        return objc_msgSend(this[11], "drmKey1IdCode");
      case 100663319:
        return objc_msgSend(this[11], "drmKey2IdCode");
      case 100663320:
        v11 = objc_msgSend(this[11], "hasPurchaseDateTime");
        goto LABEL_143;
      case 100663321:
        return objc_msgSend(this[11], "releaseDateTime");
      case 100663328:
        return (int)objc_msgSend(this[11], "cloudMatchedStatus");
      case 100663336:
        v11 = objc_msgSend(this[11], "needsReporting");
        goto LABEL_143;
      case 100663337:
        return objc_msgSend(this[11], "subscriptionStoreItemId");
      case 100663338:
        return (int)objc_msgSend(this[11], "playbackEndpointType");
      case 100663344:
        if (objc_msgSend(this[11], "hasCloudAssetAvailable"))
        {
          v11 = objc_msgSend(this[11], "cloudAssetAvailable");
LABEL_143:
          v4 = v11;
        }
        else
        {
          v4 = 1;
        }
        break;
      case 100663345:
        return objc_msgSend(this[11], "playbackEndpointType") == 3;
      case 100663346:
LABEL_33:
        v11 = objc_msgSend(this[11], "isInUsersLibrary");
        goto LABEL_143;
      case 100663347:
        v11 = objc_msgSend(this[11], "inUsersCloudLibrary");
        goto LABEL_143;
      case 100663349:
        return (int)objc_msgSend(this[11], "cloudPlaybackEndpointType");
      case 100663351:
        return objc_msgSend(this[11], "reportingStoreItemId");
      case 100663352:
        return objc_msgSend(this[11], "assetStoreItemId");
      default:
        goto LABEL_155;
    }
    return v4;
  }
  if (a2 <= 150994947)
  {
    switch(a2)
    {
      case 117440513:
        return (int)objc_msgSend(this[13], "videoQuality");
      case 117440514:
        v11 = objc_msgSend(this[13], "rental");
        goto LABEL_143;
      case 117440515:
        v11 = objc_msgSend(this[11], "hasChapterData");
        goto LABEL_143;
      case 117440516:
        return (int)objc_msgSend(this[14], "seasonNumber");
      case 117440517:
        objc_msgSend(this[14], "episodeId");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "integerValue");
        goto LABEL_140;
      case 117440518:
      case 117440519:
      case 117440520:
      case 117440534:
      case 117440537:
      case 117440539:
      case 117440544:
        goto LABEL_155;
      case 117440521:
        v11 = objc_msgSend(this[13], "hasAlternateAudio");
        goto LABEL_143;
      case 117440522:
        v11 = objc_msgSend(this[13], "hasSubtitles");
        goto LABEL_143;
      case 117440523:
        return (int)objc_msgSend(this[13], "audioLanguage");
      case 117440524:
        return (int)objc_msgSend(this[13], "audioTrackIndex");
      case 117440525:
        return (int)objc_msgSend(this[13], "audioTrackId");
      case 117440526:
        return (int)objc_msgSend(this[13], "subtitleLanguage");
      case 117440527:
        return (int)objc_msgSend(this[13], "subtitleTrackIndex");
      case 117440528:
        return objc_msgSend(this[13], "rentalDuration");
      case 117440529:
        return objc_msgSend(this[13], "rentalPlaybackDuration");
      case 117440530:
        return objc_msgSend(this[13], "rentalPlaybackStartedDateTime");
      case 117440531:
        return objc_msgSend(this[13], "rentalStartedDateTime");
      case 117440532:
      case 117440533:
      case 117440535:
      case 117440536:
      case 117440538:
      case 117440540:
      case 117440541:
      case 117440542:
      case 117440543:
      case 117440545:
      case 117440546:
      case 117440547:
        return v4;
      default:
        if (a2 == 150994945)
          return v4;
        if (a2 != 150994946)
          goto LABEL_155;
        v6 = objc_msgSend(this[12], "lyricsChecksum");
        break;
    }
    return v6;
  }
  if (a2 > 285212692)
  {
    if (a2 != 285212693 && a2 != 301989901 && a2 != 318767118)
    {
LABEL_155:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual int64_t ML3ProtoSyncTrackImportItem::getIntegerValue(MLImportPropertyKey) const");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v25, CFSTR("ML3ProtoSyncImportItem.mm"), 370, CFSTR("getIntegerValue called with unknown property key %lx"), a2);

      return 0;
    }
    return v4;
  }
  switch(a2)
  {
    case 167772174:
    case 167772182:
    case 167772186:
      return v4;
    case 167772175:
      v8 = this[17];
      break;
    case 167772176:
      v8 = this[18];
      break;
    case 167772177:
      objc_msgSend(this[17], "artist");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "persistentId");
      goto LABEL_140;
    case 167772178:
      v8 = this[19];
      break;
    case 167772179:
      v8 = this[20];
      break;
    case 167772180:
      v15 = this[18];
      return objc_msgSend(v15, "storeId");
    case 167772181:
      objc_msgSend(this[17], "artist");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "storeId");
      goto LABEL_140;
    case 167772183:
    case 167772184:
    case 167772187:
      goto LABEL_155;
    case 167772185:
      v12 = this[17];
      return (int)objc_msgSend(v12, "userRating");
    case 167772188:
      return (int)objc_msgSend(this[11], "secondaryArtworkSourceType");
    default:
      if ((a2 - 150994948) >= 2)
        goto LABEL_155;
      return v4;
  }
  return objc_msgSend(v8, "persistentId");
}

void sub_1AC266828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float ML3ProtoSyncTrackImportItem::getFloatValue(id *this, int a2)
{
  void *v5;
  void *v6;

  if (a2 <= 50331664)
  {
    if (a2 == 33554437)
      return (float)objc_msgSend(this[11], "duration");
    if (a2 == 50331664)
      return (float)(int)objc_msgSend(this[21], "sampleRate");
  }
  else
  {
    switch(a2)
    {
      case 50331665:
        return (float)objc_msgSend(this[21], "startTime");
      case 50331666:
        return (float)objc_msgSend(this[21], "stopTime");
      case 83886094:
        return (float)objc_msgSend(this[11], "bookmarkTimeMilliseconds");
    }
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual float ML3ProtoSyncTrackImportItem::getFloatValue(MLImportPropertyKey) const");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("ML3ProtoSyncImportItem.mm"), 388, CFSTR("getFloatValue called with unknown property key %lx"), a2);

  return 0.0;
}

void sub_1AC266990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3ProtoSyncTrackImportItem::getDataValue(id *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  void *v7;
  void *v8;
  id v9;
  id v10;
  const void *v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  const void *v18;
  size_t v19;
  void *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  id v29;
  __int128 v30;
  id v31;

  *a3 = 0;
  a3[1] = 0;
  if (a2 != 33554441 && a2 != 117440539)
  {
    if (a2 == 134217729)
    {
      objc_msgSend(this[11], "flattenedChapterData");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
      {
        v31 = 0;
        objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v7, 0, 0, &v31);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = v31;
        if (v8)
        {
          +[ML3Track flattenedChapterDataFromDAAPInfoDictionary:trackPersistentID:](ML3Track, "flattenedChapterDataFromDAAPInfoDictionary:trackPersistentID:", v8, this[1]);
          v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v11 = (const void *)objc_msgSend(v10, "bytes");
          v12 = objc_msgSend(v10, "length");
          v13 = operator new();
          *(_QWORD *)v13 = &off_1E5B4CF08;
          *(_QWORD *)(v13 + 8) = v12;
          if (v12)
            v14 = (void *)operator new[]();
          else
            v14 = 0;
          *(_QWORD *)(v13 + 16) = v14;
          *(_BYTE *)(v13 + 24) = 1;
          if (v11)
            memcpy(v14, v11, v12);
          else
            bzero(v14, v12);
          *(_QWORD *)&v30 = v13;
          v21 = (_QWORD *)operator new();
          *v21 = &off_1E5B51730;
          v21[1] = 0;
          v21[2] = 0;
          v21[3] = v13;
          *((_QWORD *)&v30 + 1) = v21;
          std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a3, &v30);
          v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
          if (*((_QWORD *)&v30 + 1))
          {
            v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }

        }
        else
        {
          v16 = operator new();
          v17 = objc_retainAutorelease(v7);
          v18 = (const void *)objc_msgSend(v17, "bytes");
          v19 = objc_msgSend(v17, "length");
          *(_QWORD *)v16 = &off_1E5B4CF08;
          *(_QWORD *)(v16 + 8) = v19;
          if (v19)
            v20 = (void *)operator new[]();
          else
            v20 = 0;
          *(_QWORD *)(v16 + 16) = v20;
          *(_BYTE *)(v16 + 24) = 1;
          if (v18)
            memcpy(v20, v18, v19);
          else
            bzero(v20, v19);
          *(_QWORD *)&v30 = v16;
          v25 = (_QWORD *)operator new();
          *v25 = &off_1E5B51730;
          v25[1] = 0;
          v25[2] = 0;
          v25[3] = v16;
          *((_QWORD *)&v30 + 1) = v25;
          std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a3, &v30);
          v26 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
          if (*((_QWORD *)&v30 + 1))
          {
            v27 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
        }

      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v29 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual ML3CPPDataRef ML3ProtoSyncTrackImportItem::getDataValue(MLImportPropertyKey) const");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("ML3ProtoSyncImportItem.mm"), 426, CFSTR("getDataValue called with unknown property key %lx"), a2);

    }
  }
}

void sub_1AC266D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncTrackImportItem::hasValue(ML3ProtoSyncTrackImportItem *this, int a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  uint64_t result;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  int v23;
  _BOOL8 v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  int v49;
  unsigned int v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;

  if ((a2 - 0x1000000) >> 25 > 4)
    return 0;
  v5 = 0;
  if (a2 <= 100663296)
  {
    if (a2 > 50331648)
    {
      switch(a2)
      {
        case 50331649:
          v11 = (void *)*((_QWORD *)this + 12);
          if (v11 && (objc_msgSend(v11, "hasAudioFormat") & 1) != 0)
            return 1;
          v12 = (void *)*((_QWORD *)this + 16);
          if (!v12)
            return 0;
          result = objc_msgSend(v12, "hasAudioFormat");
          break;
        case 50331650:
          v51 = (void *)*((_QWORD *)this + 21);
          if (!v51)
            return 0;
          result = objc_msgSend(v51, "hasBitRate");
          break;
        case 50331651:
          v52 = (void *)*((_QWORD *)this + 21);
          if (!v52)
            return 0;
          result = objc_msgSend(v52, "hasCodecType");
          break;
        case 50331652:
          v53 = (void *)*((_QWORD *)this + 21);
          if (!v53)
            return 0;
          result = objc_msgSend(v53, "hasCodecSubType");
          break;
        case 50331653:
          v54 = (void *)*((_QWORD *)this + 21);
          if (!v54)
            return 0;
          result = objc_msgSend(v54, "hasDataKind");
          break;
        case 50331654:
          v55 = (void *)*((_QWORD *)this + 21);
          if (!v55)
            return 0;
          result = objc_msgSend(v55, "hasDataUrl");
          break;
        case 50331655:
          v56 = (void *)*((_QWORD *)this + 21);
          if (!v56)
            return 0;
          result = objc_msgSend(v56, "hasDurationInSamples");
          break;
        case 50331656:
          v57 = (void *)*((_QWORD *)this + 21);
          if (!v57)
            return 0;
          result = objc_msgSend(v57, "hasEqPreset");
          break;
        case 50331657:
          v58 = (void *)*((_QWORD *)this + 21);
          if (!v58)
            return 0;
          result = objc_msgSend(v58, "hasPlaybackFormat");
          break;
        case 50331658:
          v59 = (void *)*((_QWORD *)this + 21);
          if (!v59)
            return 0;
          result = objc_msgSend(v59, "hasGaplessHeuristicCode");
          break;
        case 50331659:
          v60 = (void *)*((_QWORD *)this + 21);
          if (!v60)
            return 0;
          result = objc_msgSend(v60, "hasGaplessHeuristicDelayCode");
          break;
        case 50331660:
          v61 = (void *)*((_QWORD *)this + 21);
          if (!v61)
            return 0;
          result = objc_msgSend(v61, "hasGaplessEncodingDrainCode");
          break;
        case 50331661:
          v62 = (void *)*((_QWORD *)this + 21);
          if (!v62)
            return 0;
          result = objc_msgSend(v62, "hasGaplessFrameResyncCode");
          break;
        case 50331662:
          v63 = (void *)*((_QWORD *)this + 12);
          if (v63 && (objc_msgSend(v63, "hasHasVideo") & 1) != 0)
            return 1;
          v64 = (void *)*((_QWORD *)this + 16);
          if (!v64)
            return 0;
          result = objc_msgSend(v64, "hasHasVideo");
          break;
        case 50331663:
          v65 = (void *)*((_QWORD *)this + 21);
          if (!v65)
            return 0;
          result = objc_msgSend(v65, "hasRelativeVolume");
          break;
        case 50331664:
          v66 = (void *)*((_QWORD *)this + 21);
          if (!v66)
            return 0;
          result = objc_msgSend(v66, "hasSampleRate");
          break;
        case 50331665:
          v67 = (void *)*((_QWORD *)this + 21);
          if (!v67)
            return 0;
          result = objc_msgSend(v67, "hasStartTime");
          break;
        case 50331666:
          v68 = (void *)*((_QWORD *)this + 21);
          if (!v68)
            return 0;
          result = objc_msgSend(v68, "hasStopTime");
          break;
        case 50331667:
          v69 = (void *)*((_QWORD *)this + 21);
          if (!v69)
            return 0;
          result = objc_msgSend(v69, "hasVolumeNormalizationEnergy");
          break;
        case 50331668:
          v70 = (void *)*((_QWORD *)this + 21);
          if (!v70)
            return 0;
          result = objc_msgSend(v70, "hasProgressionDirection");
          break;
        default:
          switch(a2)
          {
            case 83886081:
              v48 = (void *)*((_QWORD *)this + 12);
              if (v48 && (objc_msgSend(v48, "hasUserRating") & 1) != 0)
                return 1;
              v32 = (void *)*((_QWORD *)this + 16);
              if (!v32)
                return 0;
              return objc_msgSend(v32, "hasUserRating");
            case 83886082:
            case 83886083:
            case 83886090:
            case 83886096:
            case 83886099:
              return v5;
            case 83886084:
              if (*((_BYTE *)this + 64))
                return 0;
              return objc_msgSend(*((id *)this + 11), "hasPlayCount");
            case 83886085:
              return objc_msgSend(*((id *)this + 11), "hasPlayCountDelta");
            case 83886086:
              return objc_msgSend(*((id *)this + 11), "hasPlayCount");
            case 83886087:
            case 83886089:
              return objc_msgSend(*((id *)this + 11), "hasLastPlayedDateTime");
            case 83886088:
              return objc_msgSend(*((id *)this + 11), "hasLastSkippedDateTime");
            case 83886091:
              if (*((_BYTE *)this + 64))
                return 0;
              return objc_msgSend(*((id *)this + 11), "hasSkipCount");
            case 83886092:
              return objc_msgSend(*((id *)this + 11), "hasSkipCountDelta");
            case 83886093:
              return objc_msgSend(*((id *)this + 11), "hasRememberBookmark");
            case 83886094:
              return objc_msgSend(*((id *)this + 11), "hasBookmarkTimeMilliseconds");
            case 83886095:
              return objc_msgSend(*((id *)this + 11), "hasHidden");
            case 83886097:
              v49 = *((unsigned __int8 *)this + 64);
              v50 = objc_msgSend(*((id *)this + 11), "hasLikedState");
              if (v49)
                v5 = 0;
              else
                v5 = v50;
              if (!v49 || !v50)
                return v5;
              if (!objc_msgSend(*((id *)this + 11), "hasLikedStateChanged"))
                return 0;
              result = objc_msgSend(*((id *)this + 11), "likedStateChanged");
              break;
            case 83886098:
              return objc_msgSend(*((id *)this + 11), "hasLikedStateChanged");
            case 83886100:
              if (*((_BYTE *)this + 16))
                return 0;
              return objc_msgSend(*((id *)this + 11), "hasLikedStateChangedDate");
            default:
              if ((a2 - 67108865) >= 5)
                goto LABEL_36;
              return v5;
          }
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case 16777217:
          return objc_msgSend(*((id *)this + 11), "hasMediaType");
        case 16777218:
        case 16777219:
        case 16777220:
        case 16777221:
        case 16777222:
        case 16777223:
        case 16777224:
        case 16777225:
        case 16777226:
        case 16777227:
        case 16777228:
        case 16777229:
        case 16777230:
        case 16777231:
        case 16777232:
        case 16777233:
        case 16777234:
        case 16777235:
        case 16777236:
        case 16777240:
        case 16777241:
        case 16777243:
        case 16777244:
        case 16777248:
        case 16777249:
        case 16777250:
        case 16777251:
        case 16777252:
        case 16777253:
          return v5;
        case 16777237:
          v8 = (void *)*((_QWORD *)this + 12);
          if (v8 && (objc_msgSend(v8, "hasDiscNumber") & 1) != 0)
            return 1;
          v9 = (void *)*((_QWORD *)this + 16);
          if (!v9)
            return 0;
          result = objc_msgSend(v9, "hasDiscNumber");
          break;
        case 16777238:
          v41 = (void *)*((_QWORD *)this + 12);
          if (v41 && (objc_msgSend(v41, "hasTrackNumber") & 1) != 0)
            return 1;
          v42 = (void *)*((_QWORD *)this + 14);
          if (v42)
          {
            if ((objc_msgSend(v42, "hasEpisodeId") & 1) != 0)
              return 1;
          }
          v43 = (void *)*((_QWORD *)this + 16);
          if (!v43)
            return 0;
          result = objc_msgSend(v43, "hasTrackNumber");
          break;
        case 16777239:
          v44 = (void *)*((_QWORD *)this + 14);
          if (!v44)
            return 0;
          return objc_msgSend(v44, "hasEpisodeSortId");
        case 16777242:
          v45 = (void *)*((_QWORD *)this + 12);
          if (v45 && (objc_msgSend(v45, "hasExcludeFromShuffle") & 1) != 0)
            return 1;
          v46 = (void *)*((_QWORD *)this + 16);
          if (!v46)
            return 0;
          result = objc_msgSend(v46, "hasExcludeFromShuffle");
          break;
        case 16777245:
          return objc_msgSend(*((id *)this + 11), "hasIsInUsersLibrary");
        case 16777246:
          v47 = (void *)*((_QWORD *)this + 17);
          if (!v47)
            return 0;
          return objc_msgSend(v47, "hasCompilation");
        case 16777247:
          return objc_msgSend(*((id *)this + 11), "hasCreationDateTime");
        default:
          switch(a2)
          {
            case 33554433:
              result = objc_msgSend(*((id *)this + 11), "hasTitle");
              break;
            case 33554434:
              result = objc_msgSend(*((id *)this + 11), "hasSortTitle");
              break;
            case 33554435:
              v33 = (void *)*((_QWORD *)this + 17);
              if (!v33)
                return 0;
              result = objc_msgSend(v33, "hasNumDiscs");
              break;
            case 33554436:
              v34 = (void *)*((_QWORD *)this + 17);
              if (!v34)
                return 0;
              result = objc_msgSend(v34, "hasNumTracks");
              break;
            case 33554437:
              result = objc_msgSend(*((id *)this + 11), "hasDuration");
              break;
            case 33554438:
              result = objc_msgSend(*((id *)this + 11), "hasYear");
              break;
            case 33554439:
            case 33554441:
            case 33554454:
            case 33554456:
            case 33554457:
            case 33554460:
            case 33554461:
            case 33554462:
            case 33554463:
            case 33554464:
            case 33554465:
              return v5;
            case 33554440:
              result = objc_msgSend(*((id *)this + 11), "hasFileSize");
              break;
            case 33554442:
            case 33554444:
              return objc_msgSend(*((id *)this + 11), "hasMediaType");
            case 33554443:
              result = objc_msgSend(*((id *)this + 11), "hasModificationDateTime");
              break;
            case 33554445:
              result = objc_msgSend(*((id *)this + 11), "hasContentRating");
              break;
            case 33554446:
              result = objc_msgSend(*((id *)this + 11), "hasContentRatingLevel");
              break;
            case 33554447:
              result = objc_msgSend(*((id *)this + 11), "hasUserDisabled");
              break;
            case 33554448:
              v35 = (void *)*((_QWORD *)this + 21);
              if (!v35)
                return 0;
              result = objc_msgSend(v35, "hasBeatsPerMinute");
              break;
            case 33554449:
              v36 = (void *)*((_QWORD *)this + 12);
              if (!v36)
                return 0;
              result = objc_msgSend(v36, "hasGeniusId");
              break;
            case 33554450:
              result = objc_msgSend(*((id *)this + 11), "hasComment");
              break;
            case 33554451:
              result = objc_msgSend(*((id *)this + 11), "hasGrouping");
              break;
            case 33554452:
              result = objc_msgSend(*((id *)this + 11), "hasShortDescription");
              break;
            case 33554453:
              result = objc_msgSend(*((id *)this + 11), "hasLongDescription");
              break;
            case 33554455:
              result = objc_msgSend(*((id *)this + 11), "hasCopyright");
              break;
            case 33554458:
              result = objc_msgSend(*((id *)this + 11), "hasFileKind");
              break;
            case 33554466:
              result = objc_msgSend(*((id *)this + 11), "hasIsPreorder");
              break;
            default:
              goto LABEL_36;
          }
          return result;
      }
    }
  }
  else
  {
    if (a2 > 117440512)
    {
      if (a2 <= 150994945)
      {
        switch(a2)
        {
          case 117440513:
            v6 = (void *)*((_QWORD *)this + 13);
            if (!v6)
              return 0;
            return objc_msgSend(v6, "hasVideoQuality");
          case 117440514:
            v71 = (void *)*((_QWORD *)this + 13);
            if (!v71)
              return 0;
            return objc_msgSend(v71, "hasRental");
          case 117440515:
            return objc_msgSend(*((id *)this + 11), "hasHasChapterData");
          case 117440516:
            v72 = (void *)*((_QWORD *)this + 14);
            if (!v72)
              return 0;
            return objc_msgSend(v72, "hasSeasonNumber");
          case 117440517:
            v73 = (void *)*((_QWORD *)this + 14);
            if (!v73)
              return 0;
            return objc_msgSend(v73, "hasEpisodeId");
          case 117440518:
            v74 = (void *)*((_QWORD *)this + 14);
            if (!v74)
              return 0;
            return objc_msgSend(v74, "hasNetworkName");
          case 117440519:
            v75 = (void *)*((_QWORD *)this + 13);
            if (!v75)
              return 0;
            return objc_msgSend(v75, "hasExtendedContentName");
          case 117440520:
            v76 = (void *)*((_QWORD *)this + 13);
            if (!v76)
              return 0;
            return objc_msgSend(v76, "hasMovieInfo");
          case 117440521:
            v77 = (void *)*((_QWORD *)this + 13);
            if (!v77)
              return 0;
            return objc_msgSend(v77, "hasHasAlternateAudio");
          case 117440522:
            v78 = (void *)*((_QWORD *)this + 13);
            if (!v78)
              return 0;
            return objc_msgSend(v78, "hasHasSubtitles");
          case 117440523:
            v79 = (void *)*((_QWORD *)this + 13);
            if (!v79)
              return 0;
            return objc_msgSend(v79, "hasAudioLanguage");
          case 117440524:
            v80 = (void *)*((_QWORD *)this + 13);
            if (!v80)
              return 0;
            return objc_msgSend(v80, "hasAudioTrackIndex");
          case 117440525:
            v81 = (void *)*((_QWORD *)this + 13);
            if (!v81)
              return 0;
            return objc_msgSend(v81, "hasAudioTrackId");
          case 117440526:
            v82 = (void *)*((_QWORD *)this + 13);
            if (!v82)
              return 0;
            return objc_msgSend(v82, "hasSubtitleLanguage");
          case 117440527:
            v83 = (void *)*((_QWORD *)this + 13);
            if (!v83)
              return 0;
            return objc_msgSend(v83, "hasSubtitleTrackIndex");
          case 117440528:
            v84 = (void *)*((_QWORD *)this + 13);
            if (!v84)
              return 0;
            return objc_msgSend(v84, "hasRentalDuration");
          case 117440529:
            v85 = (void *)*((_QWORD *)this + 13);
            if (!v85)
              return 0;
            return objc_msgSend(v85, "hasRentalPlaybackDuration");
          case 117440530:
            v86 = (void *)*((_QWORD *)this + 13);
            if (!v86)
              return 0;
            return objc_msgSend(v86, "hasRentalPlaybackStartedDateTime");
          case 117440531:
            v87 = (void *)*((_QWORD *)this + 13);
            if (!v87)
              return 0;
            return objc_msgSend(v87, "hasRentalStartedDateTime");
          case 117440532:
          case 117440533:
          case 117440534:
          case 117440535:
          case 117440536:
          case 117440537:
          case 117440538:
          case 117440539:
          case 117440540:
          case 117440541:
          case 117440542:
          case 117440543:
          case 117440545:
          case 117440546:
          case 117440547:
          case 117440548:
          case 117440549:
          case 117440550:
            return v5;
          case 117440544:
            v88 = (void *)*((_QWORD *)this + 12);
            if (v88 && (objc_msgSend(v88, "hasHlsPlaylistURL") & 1) != 0)
              return 1;
            v99 = (void *)*((_QWORD *)this + 16);
            if (!v99)
              return 0;
            return objc_msgSend(v99, "hasHlsPlaylistURL");
          default:
            if (a2 == 134217729)
              return objc_msgSend(*((id *)this + 11), "hasFlattenedChapterData");
            if (a2 == 150994945)
              return v5;
            break;
        }
LABEL_36:
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual BOOL ML3ProtoSyncTrackImportItem::hasValue(MLImportPropertyKey) const");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("ML3ProtoSyncImportItem.mm"), 699, CFSTR("hasValue called with unknown property key %lx"), a2);

        return 0;
      }
      switch(a2)
      {
        case 167772161:
          v10 = (void *)*((_QWORD *)this + 18);
          if (!v10)
            return 0;
          return objc_msgSend(v10, "hasName");
        case 167772162:
          v15 = (void *)*((_QWORD *)this + 15);
          if (v15 && objc_msgSend(v15, "hasSeries"))
          {
            objc_msgSend(*((id *)this + 15), "series");
            v2 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = 1;
            v17 = 1;
            if ((objc_msgSend(v2, "hasName") & 1) != 0)
              goto LABEL_296;
          }
          else
          {
            v16 = 0;
          }
          v89 = (void *)*((_QWORD *)this + 14);
          if (!v89 || !objc_msgSend(v89, "hasSeries"))
            goto LABEL_295;
          objc_msgSend(*((id *)this + 14), "series");
          v90 = (void *)objc_claimAutoreleasedReturnValue();
          v91 = objc_msgSend(v90, "hasName");
          goto LABEL_293;
        case 167772163:
          v18 = (void *)*((_QWORD *)this + 15);
          if (v18 && objc_msgSend(v18, "hasArtist"))
          {
            objc_msgSend(*((id *)this + 15), "artist");
            v2 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = 1;
            v17 = 1;
            if ((objc_msgSend(v2, "hasName") & 1) != 0)
              goto LABEL_296;
          }
          else
          {
            v16 = 0;
          }
          v92 = (void *)*((_QWORD *)this + 17);
          if (v92 && objc_msgSend(v92, "hasArtist"))
          {
            objc_msgSend(*((id *)this + 17), "artist");
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            v91 = objc_msgSend(v90, "hasName");
LABEL_293:
            v17 = v91;

            v5 = v17;
            if (!v16)
              return v5;
          }
          else
          {
LABEL_295:
            v17 = 0;
            v5 = 0;
            if ((v16 & 1) == 0)
              return v5;
          }
LABEL_296:

          return v17;
        case 167772164:
          v19 = (void *)*((_QWORD *)this + 15);
          if (v19 && objc_msgSend(v19, "hasSeries"))
          {
            objc_msgSend(*((id *)this + 15), "series");
            v2 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = 1;
            v5 = 1;
            if ((objc_msgSend(v2, "hasName") & 1) != 0)
              goto LABEL_311;
          }
          else
          {
            v20 = 0;
          }
          v93 = (void *)*((_QWORD *)this + 17);
          if (!v93)
            goto LABEL_309;
          v94 = objc_msgSend(v93, "hasName");
          goto LABEL_308;
        case 167772165:
          v10 = (void *)*((_QWORD *)this + 19);
          if (!v10)
            return 0;
          return objc_msgSend(v10, "hasName");
        case 167772166:
          v10 = (void *)*((_QWORD *)this + 20);
          if (!v10)
            return 0;
          return objc_msgSend(v10, "hasName");
        case 167772167:
          v21 = (void *)*((_QWORD *)this + 18);
          if (!v21)
            return 0;
          return objc_msgSend(v21, "hasSortName");
        case 167772168:
          v22 = (void *)*((_QWORD *)this + 15);
          if (v22 && objc_msgSend(v22, "hasSeries"))
          {
            objc_msgSend(*((id *)this + 15), "series");
            v2 = (void *)objc_claimAutoreleasedReturnValue();
            v23 = 1;
            v24 = 1;
            if ((objc_msgSend(v2, "hasSortName") & 1) != 0)
              goto LABEL_317;
          }
          else
          {
            v23 = 0;
          }
          v95 = (void *)*((_QWORD *)this + 14);
          if (v95 && objc_msgSend(v95, "hasSeries"))
          {
            objc_msgSend(*((id *)this + 14), "series");
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v96, "sortName");
            v97 = (void *)objc_claimAutoreleasedReturnValue();
            v24 = v97 != 0;

            v5 = v24;
            if (!v23)
              return v5;
          }
          else
          {
            v24 = 0;
            v5 = 0;
            if ((v23 & 1) == 0)
              return v5;
          }
LABEL_317:

          return v24;
        case 167772169:
          v25 = (void *)*((_QWORD *)this + 17);
          if (!v25 || !objc_msgSend(v25, "hasArtist"))
            return 0;
          objc_msgSend(*((id *)this + 17), "artist");
          v2 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = objc_msgSend(v2, "hasSortName");
          goto LABEL_86;
        case 167772170:
          v27 = (void *)*((_QWORD *)this + 15);
          if (v27 && objc_msgSend(v27, "hasSeries"))
          {
            objc_msgSend(*((id *)this + 15), "series");
            v2 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = 1;
            v5 = 1;
            if ((objc_msgSend(v2, "hasSortName") & 1) != 0)
              goto LABEL_311;
          }
          else
          {
            v20 = 0;
          }
          v98 = (void *)*((_QWORD *)this + 17);
          if (v98)
          {
            v94 = objc_msgSend(v98, "hasSortName");
LABEL_308:
            v5 = v94;
          }
          else
          {
LABEL_309:
            v5 = 0;
          }
          if (!v20)
            return v5;
LABEL_311:

          return v5;
        case 167772171:
          v21 = (void *)*((_QWORD *)this + 19);
          if (!v21)
            return 0;
          return objc_msgSend(v21, "hasSortName");
        case 167772172:
          goto LABEL_36;
        case 167772173:
        case 167772174:
        case 167772182:
        case 167772184:
        case 167772186:
          return v5;
        case 167772175:
          v28 = (void *)*((_QWORD *)this + 17);
          if (!v28)
            return 0;
          return objc_msgSend(v28, "hasPersistentId");
        case 167772176:
          v28 = (void *)*((_QWORD *)this + 18);
          if (!v28)
            return 0;
          return objc_msgSend(v28, "hasPersistentId");
        case 167772177:
          v29 = (void *)*((_QWORD *)this + 17);
          if (!v29 || !objc_msgSend(v29, "hasArtist"))
            return 0;
          objc_msgSend(*((id *)this + 17), "artist");
          v2 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = objc_msgSend(v2, "hasPersistentId");
          goto LABEL_86;
        case 167772178:
          v28 = (void *)*((_QWORD *)this + 19);
          if (!v28)
            return 0;
          return objc_msgSend(v28, "hasPersistentId");
        case 167772179:
          v28 = (void *)*((_QWORD *)this + 20);
          if (!v28)
            return 0;
          return objc_msgSend(v28, "hasPersistentId");
        case 167772180:
          v30 = (void *)*((_QWORD *)this + 18);
          if (!v30)
            return 0;
          return objc_msgSend(v30, "hasStoreId");
        case 167772181:
          v31 = (void *)*((_QWORD *)this + 17);
          if (!v31 || !objc_msgSend(v31, "hasArtist"))
            return 0;
          objc_msgSend(*((id *)this + 17), "artist");
          v2 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = objc_msgSend(v2, "hasStoreId");
LABEL_86:
          v5 = v26;
          goto LABEL_311;
        case 167772183:
          return objc_msgSend(*((id *)this + 11), "hasArtworkId");
        case 167772185:
          v32 = (void *)*((_QWORD *)this + 17);
          if (!v32)
            return 0;
          return objc_msgSend(v32, "hasUserRating");
        case 167772187:
          return objc_msgSend(*((id *)this + 11), "hasSecondaryArtworkId");
        case 167772188:
          return objc_msgSend(*((id *)this + 11), "hasSecondaryArtworkSourceType");
        default:
          if ((a2 - 150994947) < 3)
            return v5;
          if (a2 != 150994946)
            goto LABEL_36;
          return objc_msgSend(*((id *)this + 12), "hasLyricsChecksum");
      }
    }
    switch(a2)
    {
      case 100663297:
        if ((objc_msgSend(*((id *)this + 10), "hasStoreId") & 1) != 0)
          return 1;
        v30 = (void *)*((_QWORD *)this + 11);
        return objc_msgSend(v30, "hasStoreId");
      case 100663298:
        v30 = (void *)*((_QWORD *)this + 19);
        if (!v30)
          return 0;
        return objc_msgSend(v30, "hasStoreId");
      case 100663299:
        v30 = (void *)*((_QWORD *)this + 20);
        if (!v30)
          return 0;
        return objc_msgSend(v30, "hasStoreId");
      case 100663300:
        return objc_msgSend(*((id *)this + 11), "hasStorePlaylistId");
      case 100663301:
        return objc_msgSend(*((id *)this + 11), "hasStorefrontId");
      case 100663302:
        if ((objc_msgSend(*((id *)this + 10), "hasPurchaseHistoryId") & 1) != 0)
          return 1;
        return objc_msgSend(*((id *)this + 11), "hasPurchaseHistoryId");
      case 100663303:
        return objc_msgSend(*((id *)this + 11), "hasPurchaseHistoryToken");
      case 100663304:
        return objc_msgSend(*((id *)this + 11), "hasPurchaseHistoryRedownloadParams");
      case 100663305:
        if ((objc_msgSend(*((id *)this + 10), "hasSagaId") & 1) != 0)
          return 1;
        return objc_msgSend(*((id *)this + 11), "hasSagaId");
      case 100663306:
        return objc_msgSend(*((id *)this + 11), "hasSagaRedownloadParams");
      case 100663307:
        return objc_msgSend(*((id *)this + 11), "hasCloudStatus");
      case 100663308:
        return objc_msgSend(*((id *)this + 9), "syncIdFromMultiverseId:", *((_QWORD *)this + 10)) != 0;
      case 100663309:
      case 100663310:
      case 100663313:
      case 100663328:
      case 100663331:
      case 100663332:
      case 100663333:
      case 100663339:
      case 100663340:
      case 100663341:
      case 100663342:
      case 100663343:
      case 100663353:
      case 100663354:
      case 100663355:
        return v5;
      case 100663311:
      case 100663316:
        return objc_msgSend(*((id *)this + 11), "hasDrmVersionsCode");
      case 100663312:
        if ((objc_msgSend(*((id *)this + 10), "hasAccountId") & 1) != 0)
          return 1;
        return objc_msgSend(*((id *)this + 11), "hasAccountId");
      case 100663314:
        return objc_msgSend(*((id *)this + 11), "hasFamilyAccountId");
      case 100663315:
        return objc_msgSend(*((id *)this + 11), "hasStoreProtectionType");
      case 100663317:
        return objc_msgSend(*((id *)this + 11), "hasDrmPlatformIdCode");
      case 100663318:
        return objc_msgSend(*((id *)this + 11), "hasDrmKey1IdCode");
      case 100663319:
        return objc_msgSend(*((id *)this + 11), "hasDrmKey2IdCode");
      case 100663320:
        return objc_msgSend(*((id *)this + 11), "hasPurchaseDateTime");
      case 100663321:
        return objc_msgSend(*((id *)this + 11), "hasReleaseDateTime");
      case 100663322:
        v37 = (void *)*((_QWORD *)this + 15);
        if (!v37)
          return 0;
        return objc_msgSend(v37, "hasExternalGuid");
      case 100663323:
        v38 = (void *)*((_QWORD *)this + 15);
        if (!v38)
          return 0;
        return objc_msgSend(v38, "hasFeedUrl");
      case 100663324:
        objc_msgSend(*((id *)this + 11), "chapterMetadataUrl");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = v39 != 0;

        return v5;
      case 100663325:
        return objc_msgSend(*((id *)this + 11), "hasStoreXID");
      case 100663326:
        return objc_msgSend(*((id *)this + 11), "hasStoreAssetFlavor");
      case 100663327:
        return objc_msgSend(*((id *)this + 11), "hasCloudMatchedStatus");
      case 100663330:
        return objc_msgSend(*((id *)this + 11), "hasExtrasUrl");
      case 100663334:
        if (*((_BYTE *)this + 64))
          return 0;
        if ((objc_msgSend(*((id *)this + 11), "hasHasLocalAsset") & 1) != 0
          || (objc_msgSend(*((id *)this + 11), "hasPurchaseHistoryRedownloadParams") & 1) != 0
          || (objc_msgSend(*((id *)this + 11), "hasSagaRedownloadParams") & 1) != 0)
        {
          return 1;
        }
        if (!objc_msgSend(*((id *)this + 11), "hasSubscriptionStoreItemId"))
          return 0;
LABEL_162:
        result = objc_msgSend(*((id *)this + 11), "hasCloudAssetAvailable");
        break;
      case 100663336:
        return objc_msgSend(*((id *)this + 11), "hasNeedsReporting");
      case 100663337:
        return objc_msgSend(*((id *)this + 11), "hasSubscriptionStoreItemId");
      case 100663338:
      case 100663345:
        return objc_msgSend(*((id *)this + 11), "hasPlaybackEndpointType");
      case 100663344:
        goto LABEL_162;
      case 100663346:
        return objc_msgSend(*((id *)this + 11), "hasIsInUsersLibrary");
      case 100663347:
        return objc_msgSend(*((id *)this + 11), "hasInUsersCloudLibrary");
      case 100663348:
        v40 = (void *)*((_QWORD *)this + 17);
        if (!v40)
          return 0;
        return objc_msgSend(v40, "hasCloudId");
      case 100663349:
        return objc_msgSend(*((id *)this + 11), "hasCloudPlaybackEndpointType");
      case 100663350:
        if ((objc_msgSend(*((id *)this + 10), "hasCloudUniversalLibraryId") & 1) != 0)
          return 1;
        return objc_msgSend(*((id *)this + 11), "hasCloudUniversalLibraryId");
      case 100663351:
        return objc_msgSend(*((id *)this + 11), "hasReportingStoreItemId");
      case 100663352:
        return objc_msgSend(*((id *)this + 11), "hasAssetStoreItemId");
      default:
        goto LABEL_36;
    }
  }
  return result;
}

void sub_1AC268330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  char v3;

  if ((v3 & 1) != 0)
  _Unwind_Resume(a1);
}

void sub_1AC2683A4()
{
  char v0;

  if ((v0 & 1) == 0)
    JUMPOUT(0x1AC26839CLL);
  JUMPOUT(0x1AC268398);
}

uint64_t ML3ProtoSyncTrackImportItem::getDescription(id *this)
{
  void **v2;
  uint64_t v3;
  void *__p[2];
  unsigned __int8 v6;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"<ML3ProtoSyncTrackImportItem ", 29);
  *(_DWORD *)((char *)&v7[1] + *(_QWORD *)(v7[0] - 24)) = *(_DWORD *)((_BYTE *)&v7[1] + *(_QWORD *)(v7[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  ML3ProtoSyncImportItem::getDescription(this, (uint64_t)__p);
  if ((v6 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v6 & 0x80u) == 0)
    v3 = v6;
  else
    v3 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v2, v3);
  if ((char)v6 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v9);
}

void sub_1AC2684E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncTrackImportItem::getSourceIdentifiers@<X0>(id *this@<X0>, BOOL *a2@<X1>, uint64_t **a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t *v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  std::vector<long long>::vector(a3);
  *a2 = 1;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  objc_msgSend(this[10], "libraryIdentifiers", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v21 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        objc_msgSend(v10, "libraryName");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v10, "libraryId");
        objc_msgSend(this[9], "libraryUID");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v11, "isEqualToString:", v13);

        if (v14)
        {
          v15 = *a3;
        }
        else
        {
          objc_msgSend(this[9], "syncLibraryID");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v11, "isEqualToString:", v16);

          if (!v17)
            goto LABEL_11;
          v15 = *a3 + 1;
        }
        *v15 = v12;
LABEL_11:

      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v7);
  }

  v18 = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 100663305);
  if (v18)
    (*a3)[2] = v18;
  result = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 100663302);
  if (result)
    (*a3)[4] = result;
  return result;
}

void sub_1AC2686F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id ML3ProtoSyncTrackImportItem::getDeduplicationPredicates(id *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id obj;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[2];
  _QWORD v43[2];
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 1);
  v37 = (id)objc_claimAutoreleasedReturnValue();
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  objc_msgSend(this[10], "libraryIdentifiers");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v39;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v39 != v3)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
        objc_msgSend(v5, "libraryName");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v5, "libraryId");
        if (v6)
        {
          objc_msgSend(this[9], "libraryUID");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = objc_msgSend(v6, "isEqualToString:", v8);

          if (v9)
          {
            +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("ROWID"), v7);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "addObject:", v10);
          }
          else
          {
            objc_msgSend(this[9], "syncLibraryID");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = objc_msgSend(v6, "isEqualToString:", v15);

            if (!v16)
              goto LABEL_13;
            +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.sync_id"), v7);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "addObject:", v10);
          }
        }
        else
        {
          v11 = (void *)MEMORY[0x1E0C99D20];
          +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.sync_id"), v7);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("ROWID"), v7);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "arrayWithObjects:", v10, v12, 0);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "addObject:", v14);

        }
LABEL_13:

      }
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
    }
    while (v2);
  }

  if (!*((_BYTE *)this + 64))
  {
    v17 = objc_msgSend(this[9], "syncIdFromMultiverseId:", this[10]);
    v18 = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 100663305);
    v19 = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 100663302);
    v20 = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 100663337);
    v21 = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 100663297);
    ML3ProtoSyncTrackImportItem::_getProtoStringValue((ML3ProtoSyncTrackImportItem *)this, 100663350);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_saga_id"), v18);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "addObject:", v23);

    }
    if (v19)
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.purchase_history_id"), v19);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "addObject:", v24);

    }
    if (v20)
    {
      if (!v17)
      {
        +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.subscription_store_item_id"), v20);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "addObject:", v33);

        if (v21)
          goto LABEL_27;
        goto LABEL_29;
      }
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.subscription_store_item_id"), v20);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v43[0] = v25;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.sync_id"), 0);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v43[1] = v26;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v43, 2);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "addObject:", v28);

    }
    if (v21)
    {
      if (v17)
      {
        +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"), v21);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v42[0] = v29;
        +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.sync_id"), 0);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v42[1] = v30;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v42, 2);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v31);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "addObject:", v32);

LABEL_28:
        goto LABEL_29;
      }
LABEL_27:
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("item_store.store_item_id"), v21);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "addObject:", v29);
      goto LABEL_28;
    }
LABEL_29:
    if (objc_msgSend(v22, "length"))
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("item_store.cloud_universal_library_id"), v22);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "addObject:", v34);

    }
  }
  return v37;
}

void sub_1AC268CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

id ML3ProtoSyncTrackImportItem::_getProtoStringValue(ML3ProtoSyncTrackImportItem *this, int a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v4 = 0;
  if (a2 > 100663354)
  {
    if (a2 <= 150994946)
    {
      if ((a2 - 117440534) <= 0x10)
      {
        if (((1 << (a2 - 22)) & 0x1C009) != 0)
          return v4;
        if (a2 == 117440544)
        {
          v7 = (void *)*((_QWORD *)this + 12);
          if (!v7)
          {
            v7 = (void *)*((_QWORD *)this + 16);
            if (!v7)
              goto LABEL_48;
          }
          objc_msgSend(v7, "hlsPlaylistURL");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        }
      }
      switch(a2)
      {
        case 117440517:
          objc_msgSend(*((id *)this + 14), "episodeId");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        case 117440518:
          objc_msgSend(*((id *)this + 14), "networkName");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        case 117440519:
          objc_msgSend(*((id *)this + 13), "extendedContentName");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        case 117440520:
          objc_msgSend(*((id *)this + 13), "movieInfo");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        default:
          if (a2 != 100663355)
            goto LABEL_47;
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case 167772161:
          v6 = (void *)*((_QWORD *)this + 18);
          goto LABEL_81;
        case 167772162:
          v12 = (void *)*((_QWORD *)this + 15);
          if (v12)
            objc_msgSend(v12, "series");
          else
            objc_msgSend(*((id *)this + 14), "series");
          goto LABEL_51;
        case 167772163:
          v13 = (void *)*((_QWORD *)this + 15);
          if (v13)
            objc_msgSend(v13, "artist");
          else
            objc_msgSend(*((id *)this + 17), "artist");
LABEL_51:
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "name");
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_88;
        case 167772164:
          v14 = (void *)*((_QWORD *)this + 15);
          if (v14)
          {
            objc_msgSend(v14, "series");
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "name");
            v9 = objc_claimAutoreleasedReturnValue();
            goto LABEL_88;
          }
          v6 = (void *)*((_QWORD *)this + 17);
LABEL_81:
          objc_msgSend(v6, "name");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        case 167772165:
          v6 = (void *)*((_QWORD *)this + 19);
          goto LABEL_81;
        case 167772166:
          v6 = (void *)*((_QWORD *)this + 20);
          goto LABEL_81;
        case 167772167:
          v15 = (void *)*((_QWORD *)this + 18);
          goto LABEL_84;
        case 167772168:
          v16 = (void *)*((_QWORD *)this + 15);
          if (v16)
            objc_msgSend(v16, "series");
          else
            objc_msgSend(*((id *)this + 14), "series");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "sortName");
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_88;
        case 167772169:
          objc_msgSend(*((id *)this + 17), "artist");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "sortName");
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_88;
        case 167772170:
          v17 = (void *)*((_QWORD *)this + 15);
          if (!v17)
          {
            v15 = (void *)*((_QWORD *)this + 17);
LABEL_84:
            objc_msgSend(v15, "sortName");
            v5 = objc_claimAutoreleasedReturnValue();
            goto LABEL_85;
          }
          objc_msgSend(v17, "series");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "sortName");
          v9 = objc_claimAutoreleasedReturnValue();
LABEL_88:
          v4 = (void *)v9;

          break;
        case 167772171:
          v15 = (void *)*((_QWORD *)this + 19);
          goto LABEL_84;
        case 167772172:
        case 167772173:
        case 167772174:
        case 167772175:
        case 167772176:
        case 167772177:
        case 167772178:
        case 167772179:
        case 167772180:
        case 167772181:
        case 167772182:
        case 167772185:
        case 167772186:
          goto LABEL_47;
        case 167772183:
          objc_msgSend(*((id *)this + 11), "artworkId");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        case 167772184:
          return v4;
        case 167772187:
          objc_msgSend(*((id *)this + 11), "secondaryArtworkId");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        default:
          if (a2 == 150994947)
            return v4;
          if (a2 != 301989899)
            goto LABEL_47;
          objc_msgSend(*((id *)this + 17), "artist");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "cloudUniversalLibraryId");
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_88;
      }
    }
  }
  else
  {
    if (a2 <= 50331656)
    {
      if (a2 <= 50331653)
      {
        switch(a2)
        {
          case 33554433:
            objc_msgSend(*((id *)this + 11), "title");
            v5 = objc_claimAutoreleasedReturnValue();
            goto LABEL_85;
          case 33554434:
            objc_msgSend(*((id *)this + 11), "sortTitle");
            v5 = objc_claimAutoreleasedReturnValue();
            goto LABEL_85;
          case 33554435:
          case 33554436:
          case 33554437:
          case 33554438:
          case 33554440:
          case 33554441:
          case 33554442:
          case 33554443:
          case 33554444:
          case 33554445:
          case 33554446:
          case 33554447:
          case 33554448:
          case 33554449:
          case 33554456:
          case 33554457:
          case 33554458:
          case 33554459:
            goto LABEL_47;
          case 33554439:
          case 33554454:
          case 33554460:
          case 33554461:
          case 33554462:
          case 33554463:
            return v4;
          case 33554450:
            objc_msgSend(*((id *)this + 11), "comment");
            v5 = objc_claimAutoreleasedReturnValue();
            goto LABEL_85;
          case 33554451:
            objc_msgSend(*((id *)this + 11), "grouping");
            v5 = objc_claimAutoreleasedReturnValue();
            goto LABEL_85;
          case 33554452:
            objc_msgSend(*((id *)this + 11), "shortDescription");
            v5 = objc_claimAutoreleasedReturnValue();
            goto LABEL_85;
          case 33554453:
            objc_msgSend(*((id *)this + 11), "longDescription");
            v5 = objc_claimAutoreleasedReturnValue();
            goto LABEL_85;
          case 33554455:
            objc_msgSend(*((id *)this + 11), "copyright");
            v5 = objc_claimAutoreleasedReturnValue();
            goto LABEL_85;
          default:
            if (a2 != 16777239)
              goto LABEL_47;
            objc_msgSend(*((id *)this + 14), "episodeSortId");
            v5 = objc_claimAutoreleasedReturnValue();
            goto LABEL_85;
        }
      }
      if (a2 == 50331654)
      {
        objc_msgSend(*((id *)this + 21), "dataUrl");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_85;
      }
      if (a2 == 50331656)
      {
        objc_msgSend(*((id *)this + 21), "eqPreset");
        v5 = objc_claimAutoreleasedReturnValue();
        goto LABEL_85;
      }
      goto LABEL_47;
    }
    if (a2 > 100663305)
    {
      switch(a2)
      {
        case 100663322:
          objc_msgSend(*((id *)this + 15), "externalGuid");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        case 100663323:
          objc_msgSend(*((id *)this + 15), "feedUrl");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        case 100663324:
          objc_msgSend(*((id *)this + 11), "chapterMetadataUrl");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        case 100663325:
          objc_msgSend(*((id *)this + 11), "storeXID");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        case 100663326:
          objc_msgSend(*((id *)this + 11), "storeAssetFlavor");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        case 100663327:
        case 100663328:
        case 100663329:
        case 100663331:
        case 100663332:
        case 100663335:
        case 100663336:
        case 100663337:
        case 100663338:
        case 100663339:
        case 100663342:
        case 100663343:
        case 100663344:
        case 100663345:
        case 100663346:
        case 100663347:
        case 100663349:
          goto LABEL_47;
        case 100663330:
          objc_msgSend(*((id *)this + 11), "extrasUrl");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        case 100663333:
        case 100663340:
        case 100663341:
          return v4;
        case 100663334:
          ML3ProtoSyncTrackImportItem::_getSyncRedownloadParams((id *)this);
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        case 100663348:
          objc_msgSend(*((id *)this + 17), "cloudId");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
        case 100663350:
          objc_msgSend(*((id *)this + 10), "cloudUniversalLibraryId");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          if (v8)
            objc_msgSend(*((id *)this + 10), "cloudUniversalLibraryId");
          else
            objc_msgSend(*((id *)this + 11), "cloudUniversalLibraryId");
          v9 = objc_claimAutoreleasedReturnValue();
          goto LABEL_88;
        default:
          if (a2 != 100663306)
            goto LABEL_47;
          objc_msgSend(*((id *)this + 11), "sagaRedownloadParams");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_85;
      }
    }
    if (a2 == 50331657)
    {
      objc_msgSend(*((id *)this + 21), "playbackFormat");
      v5 = objc_claimAutoreleasedReturnValue();
      goto LABEL_85;
    }
    if (a2 != 83886083)
    {
      if (a2 != 100663304)
      {
LABEL_47:
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *ML3ProtoSyncTrackImportItem::_getProtoStringValue(MLImportPropertyKey) const");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("ML3ProtoSyncImportItem.mm"), 777, CFSTR("getStringValue called with unknown property key %lx"), a2);

LABEL_48:
        v4 = 0;
        return v4;
      }
      objc_msgSend(*((id *)this + 11), "purchaseHistoryRedownloadParams");
      v5 = objc_claimAutoreleasedReturnValue();
LABEL_85:
      v4 = (void *)v5;
    }
  }
  return v4;
}

void sub_1AC269434(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

__CFString *ML3ProtoSyncTrackImportItem::_getSyncRedownloadParams(id *this)
{
  void *v2;
  void *v3;
  void *v4;
  __CFString *v5;
  char v7;

  if (!objc_msgSend(this[11], "hasLocalAsset"))
  {
    objc_msgSend(this[11], "purchaseHistoryRedownloadParams");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v3, "length"))
    {
      objc_msgSend(this[11], "sagaRedownloadParams");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v4, "length"))
      {
        if (objc_msgSend(this[11], "subscriptionStoreItemId"))
        {
          v7 = objc_msgSend(this[11], "cloudAssetAvailable");

          if ((v7 & 1) != 0)
            goto LABEL_7;
        }
        else
        {

        }
        v5 = &stru_1E5B66908;
        return v5;
      }

    }
LABEL_7:
    v2 = (void *)ML3SyncRedownloadParamRedownload;
    goto LABEL_8;
  }
  v2 = (void *)ML3SyncRedownloadParamLocal;
LABEL_8:
  v5 = v2;
  return v5;
}

void sub_1AC269544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3ProtoSyncDeleteImportItem::~ML3ProtoSyncDeleteImportItem(id *this)
{
  ML3ProtoSyncTrackImportItem::~ML3ProtoSyncTrackImportItem(this);
  JUMPOUT(0x1AF43C744);
}

void ML3ProtoSyncContainerImportItem::~ML3ProtoSyncContainerImportItem(id *this)
{
  ML3ProtoSyncContainerImportItem::~ML3ProtoSyncContainerImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(this);
}

void ML3ProtoSyncContainerImportItem::getStringValue(id *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  std::string *v9;
  void *__p[2];
  uint64_t v11;

  if ((int)a2 > 184549438)
  {
    switch((int)a2)
    {
      case 184549439:
        goto LABEL_44;
      case 184549440:
      case 184549441:
      case 184549442:
      case 184549446:
      case 184549447:
      case 184549449:
      case 184549453:
      case 184549454:
      case 184549455:
      case 184549457:
      case 184549458:
      case 184549459:
      case 184549460:
      case 184549462:
      case 184549463:
      case 184549464:
        goto LABEL_15;
      case 184549443:
        objc_msgSend(this[11], "externalVendorIdentifier");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v5)
          goto LABEL_44;
        goto LABEL_39;
      case 184549444:
        objc_msgSend(this[11], "externalVendorDisplayName");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v5)
          goto LABEL_44;
        goto LABEL_39;
      case 184549445:
        objc_msgSend(this[11], "externalVendorTag");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v5)
          goto LABEL_44;
        goto LABEL_39;
      case 184549448:
        objc_msgSend(this[11], "cloudVersionHash");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v5)
          goto LABEL_44;
        goto LABEL_39;
      case 184549450:
        objc_msgSend(this[11], "artworkId");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v5)
          goto LABEL_44;
        goto LABEL_39;
      case 184549451:
        objc_msgSend(this[11], "authorHandle");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v5)
          goto LABEL_44;
        goto LABEL_39;
      case 184549452:
        objc_msgSend(this[11], "cloudUniversalLibraryId");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v5)
          goto LABEL_44;
        goto LABEL_39;
      case 184549456:
        objc_msgSend(this[11], "playlistGroupingSortKey");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v5)
          goto LABEL_44;
        goto LABEL_39;
      case 184549461:
        objc_msgSend(this[11], "coverArtworkRecipe");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v5)
          goto LABEL_44;
        goto LABEL_39;
      case 184549465:
        objc_msgSend(this[11], "collaborationInvitationURL");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (v5)
          goto LABEL_39;
        goto LABEL_44;
      default:
        if ((_DWORD)a2 != 218103810)
          goto LABEL_15;
        objc_msgSend(this[11], "secondaryArtworkId");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v5)
          goto LABEL_44;
        goto LABEL_39;
    }
  }
  switch((int)a2)
  {
    case 184549417:
      objc_msgSend(this[11], "cloudGlobalId");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (v5)
        goto LABEL_39;
      goto LABEL_44;
    case 184549418:
      objc_msgSend(this[11], "subscriberURL");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v5)
        goto LABEL_44;
      goto LABEL_39;
    case 184549419:
    case 184549420:
    case 184549421:
    case 184549422:
      goto LABEL_15;
    case 184549423:
      objc_msgSend(this[11], "authorDisplayName");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v5)
        goto LABEL_44;
      goto LABEL_39;
    case 184549424:
      objc_msgSend(this[11], "authorStoreURL");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v5)
        goto LABEL_44;
      goto LABEL_39;
    default:
      if ((_DWORD)a2 == 184549384)
      {
        objc_msgSend(this[11], "name");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        if (v5)
          goto LABEL_39;
LABEL_44:
        v8 = 0;
        *(_QWORD *)a3 = off_1E5B4D010;
        *(_BYTE *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        goto LABEL_45;
      }
      if ((_DWORD)a2 != 184549386)
      {
LABEL_15:
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *ML3ProtoSyncContainerImportItem::_getProtoStringValue(MLImportPropertyKey) const");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("ML3ProtoSyncImportItem.mm"), 1170, CFSTR("_getProtoStringValue called with unknown property key %x"), a2);

        goto LABEL_44;
      }
      objc_msgSend(this[11], "playlistDescription");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v5)
        goto LABEL_44;
LABEL_39:
      v8 = objc_retainAutorelease(v5);
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v8, "UTF8String"));
      *(_QWORD *)a3 = off_1E5B4D010;
      *(_BYTE *)(a3 + 8) = 1;
      v9 = (std::string *)(a3 + 16);
      if (SHIBYTE(v11) < 0)
      {
        std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        if (SHIBYTE(v11) < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 32) = v11;
      }
LABEL_45:

      return;
  }
}

void sub_1AC269930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id ML3ProtoSyncContainerImportItem::getIntegerValue(id *this, uint64_t a2)
{
  uint64_t v4;
  unsigned int v7;
  id v8;
  void *v9;
  double v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;

  v4 = 0;
  if ((int)a2 > 201326592)
  {
    switch((_DWORD)a2)
    {
      case 0xC000001:
        objc_msgSend(this[11], "geniusSeedTrackIdentifier");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          v11 = this[9];
          objc_msgSend(this[11], "geniusSeedTrackIdentifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v4 = objc_msgSend(v11, "syncIdFromMultiverseId:", v12);

        }
        else
        {
          v4 = 0;
        }
LABEL_63:

        break;
      case 0xC000002:
        break;
      case 0xD000003:
        return (id)(int)objc_msgSend(this[11], "secondaryArtworkSourceType");
      default:
LABEL_61:
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual int64_t ML3ProtoSyncContainerImportItem::getIntegerValue(MLImportPropertyKey) const");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("ML3ProtoSyncImportItem.mm"), 965, CFSTR("getIntegerValue called with unknown property key %x"), a2);

        return 0;
    }
  }
  else
  {
    switch((int)a2)
    {
      case 184549377:
        return this[1];
      case 184549378:
        v4 = objc_msgSend(this[9], "syncIdFromMultiverseId:", this[10]);
        if (v4)
          return (id)v4;
        return this[1];
      case 184549379:
        return (id)(int)objc_msgSend(this[11], "distinguishedKind");
      case 184549380:
        return (id)objc_msgSend(this[11], "creationDateTime");
      case 184549381:
        return (id)objc_msgSend(this[11], "modificationDateTime");
      case 184549382:
        return (id)objc_msgSend(this[11], "lastPlayedDateTime");
      case 184549383:
      case 184549390:
      case 184549393:
      case 184549394:
      case 184549412:
      case 184549415:
      case 184549432:
      case 184549434:
      case 184549435:
      case 184549436:
      case 184549437:
      case 184549438:
      case 184549440:
      case 184549441:
      case 184549442:
      case 184549449:
      case 184549453:
      case 184549454:
      case 184549457:
      case 184549458:
      case 184549464:
        return (id)v4;
      case 184549387:
        v7 = objc_msgSend(this[11], "owner");
        goto LABEL_55;
      case 184549388:
        v7 = objc_msgSend(this[11], "editable");
        goto LABEL_55;
      case 184549389:
        return (id)(int)objc_msgSend(this[11], "playCount");
      case 184549391:
        return (id)(int)objc_msgSend(this[11], "likedState");
      case 184549392:
        v8 = this[9];
        objc_msgSend(this[11], "parentIdentifier");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v4 = objc_msgSend(v8, "syncIdFromMultiverseId:", v9);
        goto LABEL_63;
      case 184549395:
        v7 = objc_msgSend(this[11], "hidden");
        goto LABEL_55;
      case 184549396:
        v7 = objc_msgSend(this[12], "evaluationOrder");
        goto LABEL_55;
      case 184549397:
        return (id)(objc_msgSend(this[11], "type") == 4);
      case 184549398:
        v7 = objc_msgSend(this[12], "dynamic");
        goto LABEL_55;
      case 184549399:
        v7 = objc_msgSend(this[12], "filtered");
        goto LABEL_55;
      case 184549400:
        v7 = objc_msgSend(this[12], "genius");
        goto LABEL_55;
      case 184549401:
        v7 = objc_msgSend(this[12], "enabledItemsOnly");
        goto LABEL_55;
      case 184549402:
        v7 = objc_msgSend(this[12], "limited");
        goto LABEL_55;
      case 184549403:
        return (id)(int)objc_msgSend(this[12], "limitKind");
      case 184549404:
        v7 = objc_msgSend(this[12], "limitOrder");
        goto LABEL_55;
      case 184549405:
        v7 = objc_msgSend(this[12], "limitValue");
        goto LABEL_55;
      case 184549406:
        v7 = objc_msgSend(this[12], "reverseLimitOrder");
        goto LABEL_55;
      case 184549408:
        return (id)objc_msgSend(this[11], "storeId");
      case 184549409:
        v7 = +[ML3Container trackOrderFromProtocolSortType:](ML3Container, "trackOrderFromProtocolSortType:", objc_msgSend(this[11], "sortType"));
        goto LABEL_55;
      case 184549410:
        v7 = objc_msgSend(this[11], "reversedSorting");
        goto LABEL_55;
      case 184549413:
        return (id)(int)objc_msgSend(this[11], "remoteSourceType");
      case 184549414:
        return (id)(int)objc_msgSend(this[11], "type");
      case 184549416:
        objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
        return (id)(uint64_t)v10;
      case 184549419:
        v7 = objc_msgSend(this[11], "shared");
        goto LABEL_55;
      case 184549420:
        v7 = objc_msgSend(this[11], "visible");
        goto LABEL_55;
      case 184549422:
        return (id)objc_msgSend(this[11], "authorStoreId");
      case 184549425:
        return (id)objc_msgSend(this[11], "minRefreshInterval");
      case 184549426:
        v7 = objc_msgSend(this[11], "hasCloudLastUpdateTime");
        goto LABEL_55;
      case 184549427:
        return (id)(int)objc_msgSend(this[11], "subscriberCount");
      case 184549428:
        return (id)(int)objc_msgSend(this[11], "subscriberPlayCount");
      case 184549429:
        return (id)(int)objc_msgSend(this[11], "subscriberLikedCount");
      case 184549430:
        v7 = objc_msgSend(this[11], "cloudIsSubscribed");
        goto LABEL_55;
      case 184549431:
        v7 = objc_msgSend(this[11], "cloudIsCuratorPlaylist");
        goto LABEL_55;
      case 184549446:
        v7 = objc_msgSend(this[11], "externalVendorPlaylist");
        goto LABEL_55;
      case 184549447:
        v7 = objc_msgSend(this[11], "cloudIsSharingDisabled");
        goto LABEL_55;
      case 184549455:
        return (id)(int)objc_msgSend(this[11], "playlistCategoryTypeMask");
      case 184549459:
        return (id)(int)objc_msgSend(this[11], "traits");
      case 184549460:
        return (id)objc_msgSend(this[11], "likedStateChangedDate");
      case 184549462:
        v7 = objc_msgSend(this[11], "isCollaborative");
        goto LABEL_55;
      case 184549463:
        return (id)(int)objc_msgSend(this[11], "collaborationMode");
      case 184549466:
        return (id)objc_msgSend(this[11], "collaborationInvitationURLExpirationDate");
      case 184549467:
        v7 = objc_msgSend(this[11], "collaborationJoinRequestPending");
LABEL_55:
        v4 = v7;
        break;
      case 184549468:
        return (id)(int)objc_msgSend(this[11], "collaboratorStatus");
      default:
        goto LABEL_61;
    }
  }
  return (id)v4;
}

void sub_1AC269DB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float ML3ProtoSyncContainerImportItem::getFloatValue(ML3ProtoSyncContainerImportItem *this, uint64_t a2)
{
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual float ML3ProtoSyncContainerImportItem::getFloatValue(MLImportPropertyKey) const");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("ML3ProtoSyncImportItem.mm"), 977, CFSTR("getFloatValue called with unknown property key %x"), a2);

  return 0.0;
}

void sub_1AC269E6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3ProtoSyncContainerImportItem::getDataValue(id *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  const void *v6;
  size_t v7;
  void *v8;
  void *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  id v15;
  id v16;
  __int128 v17;

  *a3 = 0;
  a3[1] = 0;
  if ((_DWORD)a2 == 184549407)
  {
    objc_msgSend(this[12], "smartCriteria");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      v5 = operator new();
      v15 = objc_retainAutorelease(v4);
      v6 = (const void *)objc_msgSend(v15, "bytes");
      v7 = objc_msgSend(v15, "length");
      *(_QWORD *)v5 = &off_1E5B4CF08;
      *(_QWORD *)(v5 + 8) = v7;
      if (v7)
        v8 = (void *)operator new[]();
      else
        v8 = 0;
      *(_QWORD *)(v5 + 16) = v8;
      *(_BYTE *)(v5 + 24) = 1;
      if (v6)
        memcpy(v8, v6, v7);
      else
        bzero(v8, v7);
      *(_QWORD *)&v17 = v5;
      v11 = (_QWORD *)operator new();
      *v11 = &off_1E5B51730;
      v11[1] = 0;
      v11[2] = 0;
      v11[3] = v5;
      *((_QWORD *)&v17 + 1) = v11;
      std::shared_ptr<ML3ImportItem>::operator=[abi:ne180100]((uint64_t)a3, &v17);
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }

    }
    else
    {

    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v16 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual ML3CPPDataRef ML3ProtoSyncContainerImportItem::getDataValue(MLImportPropertyKey) const");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("ML3ProtoSyncImportItem.mm"), 998, CFSTR("getDataValue called with unknown property key %x"), a2);

  }
}

void sub_1AC26A058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);

  std::shared_ptr<ML3CPP::Element>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncContainerImportItem::hasValue(id *this, uint64_t a2)
{
  _BOOL8 v3;
  uint64_t result;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;

  if ((a2 - 184549376) >> 24 <= 2)
  {
    if ((int)a2 <= 201326592)
    {
      v3 = 1;
      switch((int)a2)
      {
        case 184549377:
        case 184549378:
        case 184549413:
          return v3;
        case 184549379:
          result = objc_msgSend(this[11], "hasDistinguishedKind");
          break;
        case 184549380:
          result = objc_msgSend(this[11], "hasCreationDateTime");
          break;
        case 184549381:
          result = objc_msgSend(this[11], "hasModificationDateTime");
          break;
        case 184549382:
          result = objc_msgSend(this[11], "hasLastPlayedDateTime");
          break;
        case 184549383:
        case 184549385:
        case 184549390:
        case 184549393:
        case 184549394:
        case 184549412:
        case 184549415:
        case 184549416:
        case 184549432:
        case 184549434:
        case 184549435:
        case 184549436:
        case 184549437:
        case 184549438:
        case 184549439:
        case 184549440:
        case 184549441:
        case 184549442:
        case 184549449:
        case 184549453:
        case 184549454:
        case 184549457:
        case 184549458:
        case 184549464:
          return 0;
        case 184549384:
          result = objc_msgSend(this[11], "hasName");
          break;
        case 184549386:
          result = objc_msgSend(this[11], "hasPlaylistDescription");
          break;
        case 184549387:
          result = objc_msgSend(this[11], "hasOwner");
          break;
        case 184549388:
          result = objc_msgSend(this[11], "hasEditable");
          break;
        case 184549389:
          result = objc_msgSend(this[11], "hasPlayCount");
          break;
        case 184549391:
          return objc_msgSend(this[11], "likedState") != 0;
        case 184549392:
          result = objc_msgSend(this[11], "hasParentIdentifier");
          break;
        case 184549395:
          result = objc_msgSend(this[11], "hasHidden");
          break;
        case 184549396:
          v13 = this[12];
          if (!v13)
            return 0;
          result = objc_msgSend(v13, "hasEvaluationOrder");
          break;
        case 184549397:
        case 184549414:
          result = objc_msgSend(this[11], "hasType");
          break;
        case 184549398:
          v7 = this[12];
          if (!v7)
            return 0;
          result = objc_msgSend(v7, "hasDynamic");
          break;
        case 184549399:
          v14 = this[12];
          if (!v14)
            return 0;
          result = objc_msgSend(v14, "hasFiltered");
          break;
        case 184549400:
          v15 = this[12];
          if (!v15)
            return 0;
          result = objc_msgSend(v15, "hasGenius");
          break;
        case 184549401:
          v16 = this[12];
          if (!v16)
            return 0;
          result = objc_msgSend(v16, "hasEnabledItemsOnly");
          break;
        case 184549402:
          v8 = this[12];
          if (!v8)
            return 0;
          result = objc_msgSend(v8, "hasLimited");
          break;
        case 184549403:
          v17 = this[12];
          if (!v17)
            return 0;
          result = objc_msgSend(v17, "hasLimitKind");
          break;
        case 184549404:
          v9 = this[12];
          if (!v9)
            return 0;
          result = objc_msgSend(v9, "hasLimitOrder");
          break;
        case 184549405:
          v10 = this[12];
          if (!v10)
            return 0;
          result = objc_msgSend(v10, "hasLimitValue");
          break;
        case 184549406:
          v11 = this[12];
          if (!v11)
            return 0;
          result = objc_msgSend(v11, "hasReverseLimitOrder");
          break;
        case 184549407:
          v12 = this[12];
          if (!v12)
            return 0;
          result = objc_msgSend(v12, "hasSmartCriteria");
          break;
        case 184549408:
          result = objc_msgSend(this[11], "hasStoreId");
          break;
        case 184549409:
          result = objc_msgSend(this[11], "hasSortType");
          break;
        case 184549410:
          result = objc_msgSend(this[11], "hasReversedSorting");
          break;
        case 184549417:
          result = objc_msgSend(this[11], "hasCloudGlobalId");
          break;
        case 184549418:
          result = objc_msgSend(this[11], "hasSubscriberURL");
          break;
        case 184549419:
          result = objc_msgSend(this[11], "hasShared");
          break;
        case 184549420:
          result = objc_msgSend(this[11], "hasVisible");
          break;
        case 184549422:
          result = objc_msgSend(this[11], "hasAuthorStoreId");
          break;
        case 184549423:
          result = objc_msgSend(this[11], "hasAuthorDisplayName");
          break;
        case 184549424:
          result = objc_msgSend(this[11], "hasAuthorStoreURL");
          break;
        case 184549425:
          result = objc_msgSend(this[11], "hasMinRefreshInterval");
          break;
        case 184549426:
          result = objc_msgSend(this[11], "hasCloudLastUpdateTime");
          break;
        case 184549427:
          result = objc_msgSend(this[11], "hasSubscriberCount");
          break;
        case 184549428:
          result = objc_msgSend(this[11], "hasSubscriberPlayCount");
          break;
        case 184549429:
          result = objc_msgSend(this[11], "hasSubscriberLikedCount");
          break;
        case 184549430:
          result = objc_msgSend(this[11], "hasCloudIsSubscribed");
          break;
        case 184549431:
          result = objc_msgSend(this[11], "hasCloudIsCuratorPlaylist");
          break;
        case 184549443:
          result = objc_msgSend(this[11], "hasExternalVendorIdentifier");
          break;
        case 184549444:
          result = objc_msgSend(this[11], "hasExternalVendorDisplayName");
          break;
        case 184549445:
          result = objc_msgSend(this[11], "hasExternalVendorTag");
          break;
        case 184549446:
          result = objc_msgSend(this[11], "hasExternalVendorPlaylist");
          break;
        case 184549447:
          result = objc_msgSend(this[11], "hasCloudIsSharingDisabled");
          break;
        case 184549448:
          result = objc_msgSend(this[11], "hasCloudVersionHash");
          break;
        case 184549450:
          result = objc_msgSend(this[11], "hasArtworkId");
          break;
        case 184549451:
          result = objc_msgSend(this[11], "hasAuthorHandle");
          break;
        case 184549452:
          result = objc_msgSend(this[11], "hasCloudUniversalLibraryId");
          break;
        case 184549455:
          result = objc_msgSend(this[11], "hasPlaylistCategoryTypeMask");
          break;
        case 184549456:
          result = objc_msgSend(this[11], "hasPlaylistGroupingSortKey");
          break;
        case 184549459:
          result = objc_msgSend(this[11], "hasTraits");
          break;
        case 184549460:
          result = objc_msgSend(this[11], "hasLikedStateChangedDate");
          break;
        case 184549461:
          result = objc_msgSend(this[11], "hasCoverArtworkRecipe");
          break;
        case 184549462:
          result = objc_msgSend(this[11], "hasIsCollaborative");
          break;
        case 184549463:
          result = objc_msgSend(this[11], "hasCollaborationMode");
          break;
        case 184549465:
          result = objc_msgSend(this[11], "hasCollaborationInvitationURL");
          break;
        case 184549466:
          result = objc_msgSend(this[11], "hasCollaborationInvitationURLExpirationDate");
          break;
        case 184549467:
          result = objc_msgSend(this[11], "hasCollaborationJoinRequestPending");
          break;
        case 184549468:
          result = objc_msgSend(this[11], "hasCollaboratorStatus");
          break;
        default:
          goto LABEL_10;
      }
      return result;
    }
    switch((int)a2)
    {
      case 218103810:
        return objc_msgSend(this[11], "hasSecondaryArtworkId");
      case 218103811:
        return objc_msgSend(this[11], "hasSecondaryArtworkSourceType");
      case 218103812:
        objc_msgSend(this[11], "items");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v3 = v18 != 0;

        return v3;
      case 218103813:
      case 218103814:
        return 0;
      default:
        if ((_DWORD)a2 == 201326593)
          return objc_msgSend(this[11], "hasGeniusSeedTrackIdentifier");
        if ((_DWORD)a2 != 201326594)
        {
LABEL_10:
          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual BOOL ML3ProtoSyncContainerImportItem::hasValue(MLImportPropertyKey) const");
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("ML3ProtoSyncImportItem.mm"), 1140, CFSTR("hasValue called with unknown property key %x"), a2);

        }
        break;
    }
  }
  return 0;
}

void sub_1AC26A840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ML3ProtoSyncContainerImportItem::getImportItemArrayValue(id *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  void *v28;
  id v29;
  __int128 v30;
  uint64_t v31;
  int64x2_t v32;
  char *v33;
  _QWORD *v34;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((a2 - 218103813) >= 2)
  {
    if ((_DWORD)a2 == 218103812)
    {
      v6 = objc_msgSend(this[11], "itemsCount");
      if (v6)
      {
        for (i = 0; i != v6; ++i)
        {
          objc_msgSend(this[11], "itemsAtIndex:", i);
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = objc_msgSend(this[9], "syncIdFromMultiverseId:", v8);
          if (v9)
          {
            v10 = operator new();
            *(_WORD *)(v10 + 16) = 256;
            *(_BYTE *)(v10 + 18) = 1;
            *(_OWORD *)(v10 + 24) = 0u;
            *(_OWORD *)(v10 + 40) = 0u;
            *(_DWORD *)(v10 + 56) = 1065353216;
            *(_QWORD *)v10 = &off_1E5B50E68;
            *(_QWORD *)(v10 + 8) = 0;
            *(_QWORD *)(v10 + 64) = v9;
            *(_QWORD *)&v30 = v10;
            v11 = (_QWORD *)operator new();
            *v11 = &off_1E5B523E0;
            v11[1] = 0;
            v11[2] = 0;
            v11[3] = v10;
            *((_QWORD *)&v30 + 1) = v11;
            v13 = a3[1];
            v12 = (unint64_t)a3[2];
            if ((unint64_t)v13 >= v12)
            {
              v15 = (v13 - *a3) >> 4;
              if ((unint64_t)(v15 + 1) >> 60)
                std::vector<long long>::__throw_length_error[abi:ne180100]();
              v16 = v12 - (_QWORD)*a3;
              v17 = v16 >> 3;
              if (v16 >> 3 <= (unint64_t)(v15 + 1))
                v17 = v15 + 1;
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
                v18 = 0xFFFFFFFFFFFFFFFLL;
              else
                v18 = v17;
              v34 = a3 + 2;
              v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ML3ImportItem>>>(v18);
              v21 = &v19[16 * v15];
              *(_OWORD *)v21 = v30;
              v23 = *a3;
              v22 = a3[1];
              if (v22 == *a3)
              {
                v26 = vdupq_n_s64((unint64_t)v22);
                v24 = &v19[16 * v15];
              }
              else
              {
                v24 = &v19[16 * v15];
                do
                {
                  v25 = *((_OWORD *)v22 - 1);
                  v22 -= 16;
                  *((_OWORD *)v24 - 1) = v25;
                  v24 -= 16;
                  *(_QWORD *)v22 = 0;
                  *((_QWORD *)v22 + 1) = 0;
                }
                while (v22 != v23);
                v26 = *(int64x2_t *)a3;
              }
              v14 = v21 + 16;
              *a3 = v24;
              a3[1] = v21 + 16;
              v32 = v26;
              v27 = a3[2];
              a3[2] = &v19[16 * v20];
              v33 = v27;
              v31 = v26.i64[0];
              std::__split_buffer<std::shared_ptr<ML3ImportItem>>::~__split_buffer((uint64_t)&v31);
            }
            else
            {
              *(_OWORD *)v13 = v30;
              v14 = v13 + 16;
            }
            a3[1] = v14;
          }

        }
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v29 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual std::vector<std::shared_ptr<ML3ImportItem>> ML3ProtoSyncContainerImportItem::getImportItemArrayValue(MLImportPropertyKey) const");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "handleFailureInFunction:file:lineNumber:description:", v28, CFSTR("ML3ProtoSyncImportItem.mm"), 1025, CFSTR("getImportItemArrayValue called with unknown property key %x"), a2);

    }
  }
}

void sub_1AC26AAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11)
{
  void *v11;

  std::vector<std::shared_ptr<ML3CPP::Element>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void ML3ProtoSyncContainerImportItem::getDescription(id *this)
{
  std::string *v2;
  std::string::size_type size;
  void **v4;
  uint64_t v5;
  void *v6[2];
  unsigned __int8 v7;
  _QWORD v8[2];
  std::string __p;
  void *v10;
  char v11;
  uint64_t v12;
  std::string v13;

  (*((void (**)(_QWORD *__return_ptr, id *, uint64_t))*this + 3))(v8, this, 184549384);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v8[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = __p;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<ML3ProtoSyncContainerImportItem ", 33);
  *(_DWORD *)((char *)&v8[1] + *(_QWORD *)(v8[0] - 24)) = *(_DWORD *)((_BYTE *)&v8[1] + *(_QWORD *)(v8[0] - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" name='", 7);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v13;
  else
    v2 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    size = v13.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v2, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"'", 1);
  ML3ProtoSyncImportItem::getDescription(this, (uint64_t)v6);
  if ((v7 & 0x80u) == 0)
    v4 = v6;
  else
    v4 = (void **)v6[0];
  if ((v7 & 0x80u) == 0)
    v5 = v7;
  else
    v5 = (uint64_t)v6[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v4, v5);
  if ((char)v7 < 0)
    operator delete(v6[0]);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete(v10);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF43C6FC](&v12);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1AC26AD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id ML3ProtoSyncContainerImportItem::getDeduplicationPredicates(id *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  std::string::size_type size;
  char v9;
  void *v10;
  void *v11;
  uint64_t (**v13)();
  std::string __p;
  std::string v15;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(this[9], "syncIdFromMultiverseId:", this[10]);
  if (!v3)
    v3 = (uint64_t)this[1];
  +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v4);

  +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("container_pid"), this[1]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v5);

  v6 = (*((uint64_t (**)(id *, uint64_t))*this + 4))(this, 184549408);
  if (v6)
  {
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_cloud_id"), v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v7);

  }
  (*((void (**)(uint64_t (***__return_ptr)(), id *, uint64_t))*this + 3))(&v13, this, 184549417);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v13 = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v15 = __p;
  }
  size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  v9 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v15.__r_.__value_.__l.__size_;
  if (size)
  {
    ML3CPPBridgeString((const UInt8 *)&v15, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("cloud_global_id"), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v11);

    v9 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  if (v9 < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v2;
}

void sub_1AC26AF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ML3ProtoSyncContainerTrackItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncContainerTrackItemImportItem>,std::allocator<ML3ProtoSyncContainerTrackItemImportItem>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF43C744);
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncContainerTrackItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncContainerTrackItemImportItem>,std::allocator<ML3ProtoSyncContainerTrackItemImportItem>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ML3ProtoSyncContainerTrackItemImportItem *,std::shared_ptr<ML3ImportItem>::__shared_ptr_default_delete<ML3ImportItem,ML3ProtoSyncContainerTrackItemImportItem>,std::allocator<ML3ProtoSyncContainerTrackItemImportItem>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_40ML3ProtoSyncContainerTrackItemImportItemEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ML3ProtoSyncContainerTrackItemImportItem::~ML3ProtoSyncContainerTrackItemImportItem(ML3ProtoSyncContainerTrackItemImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

void ML3ProtoSyncContainerTrackItemImportItem::getStringValue(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *v5;
  id v6;

  *(_QWORD *)a2 = off_1E5B4D010;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if ((a1 - 234881028) > 6 || ((1 << (a1 - 4)) & 0x43) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual ML3ImportStringValue ML3ProtoSyncContainerTrackItemImportItem::getStringValue(MLImportPropertyKey) const");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("ML3ProtoSyncImportItem.mm"), 1212, CFSTR("ML3ProtoSyncContainerTrackItemImportItem::getStringValue called with unknown property key %x"), a1);

  }
}

void sub_1AC26B1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _QWORD *v10;
  void *v11;
  uint64_t v12;

  *v10 = v12;
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncContainerTrackItemImportItem::getIntegerValue(ML3ProtoSyncContainerTrackItemImportItem *this, uint64_t a2)
{
  void *v4;
  void *v5;

  if ((_DWORD)a2 == 234881030)
    return *((_QWORD *)this + 8);
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "virtual int64_t ML3ProtoSyncContainerTrackItemImportItem::getIntegerValue(MLImportPropertyKey) const");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("ML3ProtoSyncImportItem.mm"), 1227, CFSTR("ML3ProtoSyncContainerTrackItemImportItem::getIntegerValue called with unknown property key %x"), a2);

  return 0;
}

void sub_1AC26B2AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ML3ProtoSyncContainerTrackItemImportItem::hasValue(ML3ProtoSyncContainerTrackItemImportItem *this, int a2)
{
  return a2 == 234881030;
}

uint64_t ML3ProtoSyncContainerTrackItemImportItem::getDescription(ML3ProtoSyncContainerTrackItemImportItem *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v5[11];
  char v6;
  uint64_t v7;
  char v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"<ML3ProtoSyncContainerTrackItemImportItem ", 42);
  *(_DWORD *)((char *)&v5[1] + *(_QWORD *)(v5[0] - 24)) = *(_DWORD *)((_BYTE *)&v5[1] + *(_QWORD *)(v5[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (_QWORD *)std::ostream::operator<<();
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" sync_id=", 9);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  v3 = (_QWORD *)std::ostream::operator<<();
  v8 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v8, 1);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v5[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v7);
}

void sub_1AC26B414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ML3ProtoSyncAlbumImportItem::~ML3ProtoSyncAlbumImportItem(id *this)
{
  ML3ProtoSyncAlbumImportItem::~ML3ProtoSyncAlbumImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(this);
}

void ML3ProtoSyncAlbumImportItem::getStringValue(id *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  std::string *v15;
  void *__p[2];
  uint64_t v17;

  if (a2 > 285212696)
  {
    switch(a2)
    {
      case 285212697:
        if (this[10])
        {
          objc_msgSend(this[10], "cloudLibraryId");
          v5 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v12 = this[15];
          if (!v12)
            goto LABEL_31;
          objc_msgSend(v12, "cloudId");
          v5 = objc_claimAutoreleasedReturnValue();
        }
        goto LABEL_28;
      case 285212699:
        v9 = this[15];
        if (!v9)
          goto LABEL_31;
        objc_msgSend(v9, "artist");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "name");
        v8 = objc_claimAutoreleasedReturnValue();
        break;
      case 301989890:
        v6 = this[15];
        if (!v6)
          goto LABEL_31;
        objc_msgSend(v6, "artist");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "sortName");
        v8 = objc_claimAutoreleasedReturnValue();
        break;
      default:
        goto LABEL_31;
    }
  }
  else
  {
    switch(a2)
    {
      case 285212673:
        if (!this[14])
        {
          v11 = this[15];
          if (!v11)
            goto LABEL_31;
          objc_msgSend(v11, "name");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_28;
        }
        objc_msgSend(this[14], "series");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "name");
        v8 = objc_claimAutoreleasedReturnValue();
        break;
      case 285212674:
        if (!this[14])
        {
          v13 = this[15];
          if (!v13)
            goto LABEL_31;
          objc_msgSend(v13, "sortName");
          v5 = objc_claimAutoreleasedReturnValue();
          goto LABEL_28;
        }
        objc_msgSend(this[14], "series");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "sortName");
        v8 = objc_claimAutoreleasedReturnValue();
        break;
      case 285212682:
        v4 = this[14];
        if (!v4)
          goto LABEL_31;
        objc_msgSend(v4, "feedUrl");
        v5 = objc_claimAutoreleasedReturnValue();
LABEL_28:
        v10 = (void *)v5;
        if (v5)
          goto LABEL_29;
LABEL_31:
        *(_QWORD *)a3 = off_1E5B4D010;
        *(_BYTE *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        return;
      default:
        goto LABEL_31;
    }
  }
  v10 = (void *)v8;

  if (!v10)
    goto LABEL_31;
LABEL_29:
  v14 = objc_retainAutorelease(v10);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v14, "UTF8String"));
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v15 = (std::string *)(a3 + 16);
  if (SHIBYTE(v17) < 0)
  {
    std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 32) = v17;
  }

}

void sub_1AC26B6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncAlbumImportItem::getIntegerValue(ML3ProtoSyncAlbumImportItem *this, int a2)
{
  uint64_t result;

  result = 0;
  if (a2 <= 285212678)
  {
    if (a2 == 16777217)
    {
      result = *((_QWORD *)this + 11);
      if (result)
      {
        objc_msgSend((id)result, "mediaType");
        return 0;
      }
    }
    else if (a2 == 167772175)
    {
      result = *((_QWORD *)this + 15);
      if (result)
        return objc_msgSend((id)result, "persistentId");
    }
  }
  else
  {
    switch(a2)
    {
      case 285212679:
        result = *((_QWORD *)this + 15);
        if (result)
        {
          LODWORD(result) = objc_msgSend((id)result, "userRating");
          goto LABEL_21;
        }
        break;
      case 285212680:
        result = *((_QWORD *)this + 15);
        if (result)
        {
          LODWORD(result) = objc_msgSend((id)result, "likedState");
          goto LABEL_21;
        }
        break;
      case 285212681:
        result = *((_QWORD *)this + 15);
        if (result)
          result = objc_msgSend((id)result, "compilation");
        break;
      case 285212682:
        return result;
      case 285212683:
        result = *((_QWORD *)this + 13);
        if (result)
        {
          LODWORD(result) = objc_msgSend((id)result, "seasonNumber");
          goto LABEL_21;
        }
        break;
      case 285212684:
        result = *((_QWORD *)this + 11);
        if (result)
        {
          LODWORD(result) = objc_msgSend((id)result, "year");
LABEL_21:
          result = (int)result;
        }
        break;
      default:
        if (a2 == 285212695)
        {
          result = *((_QWORD *)this + 15);
          if (result)
            result = objc_msgSend((id)result, "likedStateChangedDate");
        }
        else if (a2 == 285212696)
        {
          result = *((_QWORD *)this + 15);
          if (result)
            result = objc_msgSend((id)result, "storeId");
        }
        break;
    }
  }
  return result;
}

uint64_t ML3ProtoSyncAlbumImportItem::hasValue(ML3ProtoSyncAlbumImportItem *this, int a2)
{
  void *v2;
  uint64_t v4;
  void *v5;
  int v6;
  void *v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;

  v4 = 0;
  switch(a2)
  {
    case 285212673:
      v5 = (void *)*((_QWORD *)this + 14);
      if (v5 && objc_msgSend(v5, "hasSeries"))
      {
        objc_msgSend(*((id *)this + 14), "series");
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = 1;
        v4 = 1;
        if ((objc_msgSend(v2, "hasName") & 1) != 0)
          goto LABEL_49;
      }
      else
      {
        v6 = 0;
      }
      v19 = (void *)*((_QWORD *)this + 15);
      if (!v19)
        goto LABEL_46;
      v20 = objc_msgSend(v19, "hasName");
      goto LABEL_41;
    case 285212674:
      v9 = (void *)*((_QWORD *)this + 14);
      if (v9 && objc_msgSend(v9, "hasSeries"))
      {
        objc_msgSend(*((id *)this + 14), "series");
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = 1;
        v4 = 1;
        if ((objc_msgSend(v2, "hasSortName") & 1) != 0)
          goto LABEL_49;
      }
      else
      {
        v6 = 0;
      }
      v21 = (void *)*((_QWORD *)this + 15);
      if (!v21)
      {
LABEL_46:
        v4 = 0;
        if (!v6)
          return v4;
        goto LABEL_49;
      }
      v20 = objc_msgSend(v21, "hasSortName");
LABEL_41:
      v4 = v20;
      if (v6)
LABEL_49:

      return v4;
    case 285212675:
    case 285212676:
    case 285212677:
    case 285212678:
    case 285212685:
    case 285212686:
    case 285212687:
    case 285212688:
    case 285212689:
    case 285212690:
    case 285212691:
    case 285212692:
    case 285212693:
    case 285212694:
    case 285212698:
      return v4;
    case 285212679:
      v10 = (void *)*((_QWORD *)this + 15);
      if (!v10)
        return 0;
      return objc_msgSend(v10, "hasUserRating");
    case 285212680:
      v11 = (void *)*((_QWORD *)this + 15);
      if (!v11)
        return 0;
      return objc_msgSend(v11, "hasLikedState");
    case 285212681:
      v12 = (void *)*((_QWORD *)this + 15);
      if (!v12)
        return 0;
      return objc_msgSend(v12, "hasCompilation");
    case 285212682:
      return objc_msgSend(*((id *)this + 14), "hasFeedUrl");
    case 285212683:
      return objc_msgSend(*((id *)this + 13), "hasSeasonNumber");
    case 285212684:
      return objc_msgSend(*((id *)this + 11), "hasYear");
    case 285212695:
      v13 = (void *)*((_QWORD *)this + 15);
      if (!v13)
        return 0;
      return objc_msgSend(v13, "hasLikedStateChangedDate");
    case 285212696:
      v14 = (void *)*((_QWORD *)this + 15);
      if (!v14)
        return 0;
      return objc_msgSend(v14, "hasStoreId");
    case 285212697:
      v15 = (void *)*((_QWORD *)this + 15);
      if (v15 && (objc_msgSend(v15, "hasCloudId") & 1) != 0)
        return 1;
      v22 = (void *)*((_QWORD *)this + 10);
      if (!v22)
        return 0;
      return objc_msgSend(v22, "hasCloudLibraryId");
    case 285212699:
      v16 = (void *)*((_QWORD *)this + 15);
      if (!v16)
        return 0;
      objc_msgSend(v16, "artist");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      if (v2)
      {
        objc_msgSend(*((id *)this + 15), "artist");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v4 = objc_msgSend(v17, "hasName");

      }
      else
      {
        v4 = 0;
      }
      goto LABEL_49;
    default:
      if (a2 == 16777217)
      {
        v18 = (void *)*((_QWORD *)this + 11);
        if (v18)
          return objc_msgSend(v18, "hasMediaType");
      }
      else
      {
        if (a2 != 167772175)
          return v4;
        v7 = (void *)*((_QWORD *)this + 15);
        if (v7)
          return objc_msgSend(v7, "hasPersistentId");
      }
      return 0;
  }
}

void sub_1AC26BA84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ML3ProtoSyncAlbumImportItem::getDescription(id *this)
{
  _QWORD *v2;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string __p;
  _QWORD v9[11];
  char v10;
  uint64_t v11;
  uint64_t (**v12)();
  std::string v13;
  char v14;

  (*((void (**)(uint64_t (***__return_ptr)(), id *, uint64_t))*this + 3))(&v12, this, 285212673);
  (*((void (**)(id *, uint64_t))*this + 4))(this, 285212696);
  if (this[11])
    (*((void (**)(id *, uint64_t))*this + 4))(this, 167772175);
  else
    objc_msgSend(this[9], "syncIdFromMultiverseId:", this[10]);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<ML3ProtoSyncAlbumImportItem ", 29);
  *(_DWORD *)((char *)&v9[1] + *(_QWORD *)(v9[0] - 24)) = *(_DWORD *)((_BYTE *)&v9[1] + *(_QWORD *)(v9[0] - 24)) & 0xFFFFFFB5 | 8;
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" name=", 6);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  else
    __p = v13;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" storeID=", 9);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 8) & 0xFFFFFFB5 | 2;
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" syncID=", 8);
  *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 2;
  v7 = (_QWORD *)std::ostream::operator<<();
  v14 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v14, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF43C6FC](&v11);
  v12 = off_1E5B4D010;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1AC26BD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  std::ostringstream::~ostringstream((uint64_t)&a15);
  *(_QWORD *)(v15 - 96) = off_1E5B4D010;
  if (*(char *)(v15 - 57) < 0)
    operator delete(*(void **)(v15 - 80));
  _Unwind_Resume(a1);
}

id ML3ProtoSyncAlbumImportItem::getDeduplicationPredicates(ML3ProtoSyncAlbumImportItem *this)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t j;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  uint64_t v23;
  std::string::size_type size;
  void *v25;
  void *v26;
  std::string::size_type v27;
  void *v28;
  void *v29;
  void *v30;
  std::string::size_type v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  std::string *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v70;
  id obj;
  id obja;
  id v74;
  std::string v75;
  std::string v76;
  std::string v77;
  _QWORD v78[2];
  std::string __p;
  std::string v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _QWORD v89[2];
  _QWORD v90[3];
  _QWORD v91[5];
  _QWORD v92[6];
  _QWORD v93[6];
  _BYTE v94[128];
  _BYTE v95[128];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v74 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
    objc_msgSend(v2, "libraryIdentifiers");
  else
    objc_msgSend(*((id *)this + 15), "libraryIdentifiers");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  if (!*((_BYTE *)this + 64))
  {
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    obj = v70;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v94, 16);
    if (!v8)
      goto LABEL_27;
    v9 = *(_QWORD *)v82;
    while (1)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v82 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * i);
        objc_msgSend(v11, "libraryName");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v11, "libraryId");
        if (v12)
        {
          objc_msgSend(*((id *)this + 9), "libraryUID");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v12, "isEqualToString:", v14);

          if (v15)
          {
            +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("ROWID"), v13);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v74, "addObject:", v16);
          }
          else
          {
            objc_msgSend(*((id *)this + 9), "syncLibraryID");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            v22 = objc_msgSend(v12, "isEqualToString:", v21);

            if (!v22)
              goto LABEL_25;
            +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), v13);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v74, "addObject:", v16);
          }
        }
        else
        {
          v17 = (void *)MEMORY[0x1E0C99D20];
          +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), v13);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("ROWID"), v13);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "arrayWithObjects:", v16, v18, 0);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v74, "addObject:", v20);

        }
LABEL_25:

      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v94, 16);
      if (!v8)
        goto LABEL_27;
    }
  }
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v3 = v70;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v85, v95, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v86;
    do
    {
      for (j = 0; j != v4; ++j)
      {
        if (*(_QWORD *)v86 != v5)
          objc_enumerationMutation(v3);
        +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("ROWID"), objc_msgSend(*(id *)(*((_QWORD *)&v85 + 1) + 8 * j), "libraryId"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v74, "addObject:", v7);

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v85, v95, 16);
    }
    while (v4);
  }
LABEL_27:

  if (!*((_BYTE *)this + 64))
  {
    v23 = (*(uint64_t (**)(ML3ProtoSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212696);
    obja = (id)(*(uint64_t (**)(ML3ProtoSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 285212683);
    (*(void (**)(_QWORD *__return_ptr, ML3ProtoSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v78, this, 285212673);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v80, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v78[0] = off_1E5B4D010;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v80 = __p;
    }
    (*(void (**)(_QWORD *__return_ptr, ML3ProtoSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v78, this, 285212699);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v77, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v78[0] = off_1E5B4D010;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v77 = __p;
    }
    (*(void (**)(_QWORD *__return_ptr, ML3ProtoSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v78, this, 285212682);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v76, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v78[0] = off_1E5B4D010;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v76 = __p;
    }
    (*(void (**)(_QWORD *__return_ptr, ML3ProtoSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 24))(v78, this, 285212697);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v75, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v78[0] = off_1E5B4D010;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v75 = __p;
    }
    size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v75.__r_.__value_.__l.__size_;
    if (size)
    {
      ML3CPPBridgeString((const UInt8 *)&v75, 1);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("cloud_library_id"), v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v74, "addObject:", v26);

    }
    v27 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = v80.__r_.__value_.__l.__size_;
    if (v27)
    {
      v28 = (void *)*((_QWORD *)this + 9);
      ML3CPPBridgeString((const UInt8 *)&v80, 1);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "groupingKeyForString:", v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v30 = 0;
    }
    v31 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = v77.__r_.__value_.__l.__size_;
    if (v31)
    {
      v32 = (void *)*((_QWORD *)this + 9);
      ML3CPPBridgeString((const UInt8 *)&v77, 1);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "groupingKeyForString:", v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v23)
        goto LABEL_64;
    }
    else
    {
      v34 = 0;
      if (!v23)
        goto LABEL_64;
    }
    if (objc_msgSend(v30, "length") && objc_msgSend(v34, "length"))
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_id"), v23);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v93[0] = v35;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("cloud_library_id"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v93[1] = v36;
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("album_artist.grouping_key"), v34);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v93[2] = v37;
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v30);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v93[3] = v38;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), obja);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v93[4] = v39;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), 0);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v93[5] = v40;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v93, 6);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v74, "addObject:", v42);
    }
    else
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("store_id"), v23);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v92[0] = v43;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("cloud_library_id"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v92[1] = v44;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("album_artist.grouping_key"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v92[2] = v45;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("grouping_key"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v92[3] = v46;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), obja);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v92[4] = v47;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), 0);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      v92[5] = v48;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v92, 6);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v49);
      v42 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v74, "addObject:", v42);
    }

LABEL_64:
    if (objc_msgSend(v30, "length") && objc_msgSend(v34, "length"))
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("album_artist.grouping_key"), v34);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v91[0] = v50;
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v30);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v91[1] = v51;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("season_number"), obja);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v91[2] = v52;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), 0);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      v91[3] = v53;
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("cloud_library_id"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v91[4] = v54;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v91, 5);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v55);
      v56 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v74, "addObject:", v56);
    }
    if (!objc_msgSend(v30, "length"))
      goto LABEL_74;
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v76.__r_.__value_.__l.__size_)
        goto LABEL_74;
      v57 = (std::string *)v76.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((_BYTE *)&v76.__r_.__value_.__s + 23))
        goto LABEL_74;
      v57 = &v76;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v57);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("feed_url"), v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    v90[0] = v59;
    +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("grouping_key"), v30);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v90[1] = v60;
    +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), 0);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    v90[2] = v61;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v90, 3);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v62);
    v63 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v74, "addObject:", v63);
LABEL_74:
    v64 = (*(uint64_t (**)(ML3ProtoSyncAlbumImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777217);
    if ((MLMediaTypeByStandardizingMediaType(v64) & 0x10042) != 0 && !v30 && v34)
    {
      +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", CFSTR("grouping_key"), &stru_1E5B66908, 1, 1, &stru_1E5B66908);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      v89[0] = v65;
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("album_artist.grouping_key"), v34);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      v89[1] = v66;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v89, 2);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v67);
      v68 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v74, "addObject:", v68);
    }

    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
  }

  return v74;
}

void sub_1AC26CA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, _Unwind_Exception *exception_object, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;
  void *v49;
  void *v50;

  if (a20 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a34 < 0)
    operator delete(a29);
  if (a48 < 0)
    operator delete(a43);

  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncAlbumImportItem::sortPropertyKeyForPropertyKey(ML3ProtoSyncAlbumImportItem *this, int a2)
{
  if (a2 == 285212673)
    return 285212674;
  else
    return 0;
}

uint64_t ML3ProtoSyncAlbumImportItem::propertyKeyForSortPropertyKey(ML3ProtoSyncAlbumImportItem *this, int a2)
{
  if (a2 == 285212674)
    return 285212673;
  else
    return 0;
}

void ML3ProtoSyncArtistImportItem::~ML3ProtoSyncArtistImportItem(id *this)
{
  ML3ProtoSyncArtistImportItem::~ML3ProtoSyncArtistImportItem(this);
  JUMPOUT(0x1AF43C744);
}

{

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(this);
}

void ML3ProtoSyncArtistImportItem::getStringValue(id *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  std::string *v14;
  void *__p[2];
  uint64_t v16;

  if (a2 <= 318767104)
  {
    switch(a2)
    {
      case 301989889:
        if (this[14])
        {
          objc_msgSend(this[14], "artist");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "name");
          v8 = objc_claimAutoreleasedReturnValue();
          goto LABEL_26;
        }
        v4 = this[17];
        if (!v4)
        {
LABEL_33:
          *(_QWORD *)a3 = off_1E5B4D010;
          *(_BYTE *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 24) = 0;
          *(_QWORD *)(a3 + 32) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          return;
        }
LABEL_29:
        objc_msgSend(v4, "name");
        v9 = objc_claimAutoreleasedReturnValue();
        break;
      case 301989890:
        v6 = this[17];
        if (!v6)
          goto LABEL_33;
LABEL_19:
        objc_msgSend(v6, "sortName");
        v9 = objc_claimAutoreleasedReturnValue();
        break;
      case 301989899:
        if (this[10])
        {
          v5 = this[10];
        }
        else
        {
          v5 = this[17];
          if (!v5)
            goto LABEL_33;
        }
        objc_msgSend(v5, "cloudUniversalLibraryId");
        v9 = objc_claimAutoreleasedReturnValue();
        break;
      default:
        goto LABEL_33;
    }
    v12 = (void *)v9;
    if (v9)
      goto LABEL_31;
    goto LABEL_33;
  }
  switch(a2)
  {
    case 318767105:
      v4 = this[16];
      if (!v4)
        goto LABEL_33;
      goto LABEL_29;
    case 318767106:
      v6 = this[16];
      if (!v6)
        goto LABEL_33;
      goto LABEL_19;
    case 318767107:
      if (this[14])
      {
        objc_msgSend(this[14], "series");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "name");
        v8 = objc_claimAutoreleasedReturnValue();
        break;
      }
      v10 = this[13];
      if (!v10)
        goto LABEL_33;
      objc_msgSend(v10, "series");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "name");
      v8 = objc_claimAutoreleasedReturnValue();
      break;
    case 318767108:
      if (this[14])
      {
        objc_msgSend(this[14], "series");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "sortName");
        v8 = objc_claimAutoreleasedReturnValue();
        break;
      }
      v11 = this[13];
      if (!v11)
        goto LABEL_33;
      objc_msgSend(v11, "series");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "sortName");
      v8 = objc_claimAutoreleasedReturnValue();
      break;
    default:
      goto LABEL_33;
  }
LABEL_26:
  v12 = (void *)v8;

  if (!v12)
    goto LABEL_33;
LABEL_31:
  v13 = objc_retainAutorelease(v12);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v13, "UTF8String"));
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v14 = (std::string *)(a3 + 16);
  if (SHIBYTE(v16) < 0)
  {
    std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 32) = v16;
  }

}

void sub_1AC26D0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncArtistImportItem::getIntegerValue(ML3ProtoSyncArtistImportItem *this, int a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v3 = 0;
  if (a2 <= 301989892)
  {
    if (a2 <= 167772175)
    {
      if (a2 == 16777217)
      {
        v9 = (void *)*((_QWORD *)this + 11);
        if (v9)
        {
          v10 = objc_msgSend(v9, "mediaType") - 1;
          if (v10 <= 0xC)
            return dword_1AC3D997C[v10];
        }
      }
      else
      {
        if (a2 != 16777246)
          return v3;
        v4 = (void *)*((_QWORD *)this + 15);
        if (v4)
          return objc_msgSend(v4, "compilation");
      }
      return 0;
    }
    if (a2 == 167772176)
    {
      v7 = (void *)*((_QWORD *)this + 16);
      if (!v7)
        return 0;
    }
    else
    {
      if (a2 != 167772177)
        return v3;
      v7 = (void *)*((_QWORD *)this + 17);
      if (!v7)
        return 0;
    }
    return objc_msgSend(v7, "persistentId");
  }
  if (a2 <= 301989903)
  {
    if (a2 != 301989893)
    {
      if (a2 != 301989903)
        return v3;
      v5 = (void *)*((_QWORD *)this + 14);
      if (!v5)
      {
        v15 = (void *)*((_QWORD *)this + 17);
        if (v15)
          return (int)objc_msgSend(v15, "likedState");
        return 0;
      }
      objc_msgSend(v5, "artist");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = (int)objc_msgSend(v6, "likedState");
LABEL_25:

      return v3;
    }
    v11 = (void *)*((_QWORD *)this + 14);
    if (v11)
    {
      objc_msgSend(v11, "artist");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(v6, "storeId");
      goto LABEL_25;
    }
    v8 = (void *)*((_QWORD *)this + 17);
    if (!v8)
      return 0;
    return objc_msgSend(v8, "storeId");
  }
  if (a2 != 301989904)
  {
    if (a2 != 318767111)
      return v3;
    v8 = (void *)*((_QWORD *)this + 16);
    if (!v8)
      return 0;
    return objc_msgSend(v8, "storeId");
  }
  v13 = (void *)*((_QWORD *)this + 14);
  if (v13)
  {
    objc_msgSend(v13, "artist");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v14, "likedStateChangedDate");

  }
  else
  {
    v3 = 0;
  }
  v16 = (void *)*((_QWORD *)this + 17);
  if (!v16)
    return v3;
  return objc_msgSend(v16, "likedStateChangedDate");
}

void sub_1AC26D32C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncArtistImportItem::hasValue(ML3ProtoSyncArtistImportItem *this, int a2)
{
  void *v2;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t result;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  int v16;
  _BOOL8 v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v4 = 0;
  if (a2 <= 301989902)
  {
    if (a2 <= 301989889)
    {
      switch(a2)
      {
        case 167772176:
          v19 = (void *)*((_QWORD *)this + 16);
          if (!v19)
            return 0;
          break;
        case 167772177:
          v19 = (void *)*((_QWORD *)this + 17);
          if (!v19)
            return 0;
          break;
        case 301989889:
          v6 = (void *)*((_QWORD *)this + 14);
          if (v6)
          {
            if (objc_msgSend(v6, "hasArtist"))
            {
              objc_msgSend(*((id *)this + 14), "artist");
              v7 = (void *)objc_claimAutoreleasedReturnValue();
              v4 = objc_msgSend(v7, "hasName");

              return v4;
            }
          }
          else
          {
            v5 = (void *)*((_QWORD *)this + 17);
            if (v5)
              return objc_msgSend(v5, "hasName");
          }
          return 0;
        default:
          return v4;
      }
      return objc_msgSend(v19, "hasPersistentId");
    }
    switch(a2)
    {
      case 301989890:
        v11 = (void *)*((_QWORD *)this + 17);
        if (v11)
          return objc_msgSend(v11, "hasSortName");
        break;
      case 301989893:
        v18 = (void *)*((_QWORD *)this + 17);
        if (v18)
          return objc_msgSend(v18, "hasStoreId");
        break;
      case 301989899:
        v8 = (void *)*((_QWORD *)this + 10);
        if (v8)
          return objc_msgSend(v8, "hasCloudUniversalLibraryId");
        v8 = (void *)*((_QWORD *)this + 17);
        if (v8)
          return objc_msgSend(v8, "hasCloudUniversalLibraryId");
        break;
      default:
        return v4;
    }
    return 0;
  }
  switch(a2)
  {
    case 318767105:
      v5 = (void *)*((_QWORD *)this + 16);
      if (!v5)
        return 0;
      return objc_msgSend(v5, "hasName");
    case 318767106:
      v11 = (void *)*((_QWORD *)this + 16);
      if (!v11)
        return 0;
      return objc_msgSend(v11, "hasSortName");
    case 318767107:
      v12 = (void *)*((_QWORD *)this + 14);
      if (v12 && objc_msgSend(v12, "hasSeries"))
      {
        objc_msgSend(*((id *)this + 14), "series");
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 1;
        v14 = 1;
        if ((objc_msgSend(v2, "hasName") & 1) != 0)
          goto LABEL_55;
      }
      else
      {
        v13 = 0;
      }
      v21 = (void *)*((_QWORD *)this + 13);
      if (v21 && objc_msgSend(v21, "hasSeries"))
      {
        objc_msgSend(*((id *)this + 13), "series");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v22, "hasName");

        v4 = v14;
        if (!v13)
          return v4;
      }
      else
      {
        v14 = 0;
        v4 = 0;
        if ((v13 & 1) == 0)
          return v4;
      }
LABEL_55:

      return v14;
    case 318767108:
      v15 = (void *)*((_QWORD *)this + 14);
      if (v15 && objc_msgSend(v15, "hasSeries"))
      {
        objc_msgSend(*((id *)this + 14), "series");
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 1;
        v17 = 1;
        if ((objc_msgSend(v2, "hasSortName") & 1) != 0)
          goto LABEL_57;
      }
      else
      {
        v16 = 0;
      }
      v23 = (void *)*((_QWORD *)this + 13);
      if (v23 && objc_msgSend(v23, "hasSeries"))
      {
        objc_msgSend(*((id *)this + 13), "series");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "sortName");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = v25 != 0;

        v4 = v17;
        if (!v16)
          return v4;
      }
      else
      {
        v17 = 0;
        v4 = 0;
        if ((v16 & 1) == 0)
          return v4;
      }
LABEL_57:

      return v17;
    case 318767109:
    case 318767110:
      return v4;
    case 318767111:
      v18 = (void *)*((_QWORD *)this + 16);
      if (!v18)
        return 0;
      return objc_msgSend(v18, "hasStoreId");
    default:
      if (a2 != 301989903)
      {
        if (a2 != 301989904)
          return v4;
        v10 = (void *)*((_QWORD *)this + 17);
        if (v10)
          return objc_msgSend(v10, "hasLikedStateChangedDate");
        return 0;
      }
      v20 = (void *)*((_QWORD *)this + 17);
      if (!v20)
        return 0;
      result = objc_msgSend(v20, "hasLikedState");
      break;
  }
  return result;
}

void sub_1AC26D68C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  char v3;

  if ((v3 & 1) != 0)
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncArtistImportItem::getDescription(ML3ProtoSyncArtistImportItem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::string *v8;
  std::string::size_type size;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string *v17;
  std::string::size_type v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::string v25;
  std::string v26;
  _QWORD v27[2];
  std::string __p;
  std::string v29;
  _QWORD v30[11];
  char v31;
  uint64_t v32;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
  if (*((_QWORD *)this + 18) == 2)
    v2 = 318767105;
  else
    v2 = 301989889;
  (*(void (**)(_QWORD *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v27, this, v2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v27[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v29 = __p;
  }
  if (*((_QWORD *)this + 18) == 2)
    v3 = 318767106;
  else
    v3 = 301989890;
  (*(void (**)(_QWORD *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v27, this, v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v27[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v26 = __p;
  }
  (*(void (**)(_QWORD *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(v27, this, 301989899);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v27[0] = off_1E5B4D010;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v25 = __p;
  }
  if (*((_QWORD *)this + 18) == 2)
    v4 = 318767111;
  else
    v4 = 301989893;
  (*(void (**)(ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, v4);
  if (*((_QWORD *)this + 11))
  {
    if (*((_QWORD *)this + 18) == 2)
      v5 = 167772176;
    else
      v5 = 167772177;
    (*(void (**)(ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, v5);
  }
  else
  {
    objc_msgSend(*((id *)this + 9), "syncIdFromMultiverseId:", *((_QWORD *)this + 10));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"<ML3ProtoSyncArtistImportItem ", 30);
  *(_DWORD *)((char *)&v30[1] + *(_QWORD *)(v30[0] - 24)) = *(_DWORD *)((_BYTE *)&v30[1] + *(_QWORD *)(v30[0] - 24)) & 0xFFFFFFB5 | 8;
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" name=", 6);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v29;
  else
    v8 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  else
    size = v29.__r_.__value_.__l.__size_;
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" artistType=", 12);
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" sortName=", 10);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v26;
  else
    v13 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  else
    v14 = v26.__r_.__value_.__l.__size_;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" cloudLibraryID=", 16);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v25;
  else
    v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  else
    v18 = v25.__r_.__value_.__l.__size_;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" storeID=", 9);
  *(_DWORD *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v20 + *(_QWORD *)(*v20 - 24) + 8) & 0xFFFFFFB5 | 2;
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" syncID=", 8);
  *(_DWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 8) = *(_DWORD *)((_BYTE *)v22 + *(_QWORD *)(*v22 - 24) + 8) & 0xFFFFFFB5 | 2;
  v23 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v27[0]) = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v27, 1);
  std::stringbuf::str();
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v30[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v30[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v31 < 0)
    operator delete((void *)v30[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v32);
}

void sub_1AC26DAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a29 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a35 < 0)
    operator delete(a30);
  std::ostringstream::~ostringstream((uint64_t)&a36);
  _Unwind_Resume(a1);
}

id ML3ProtoSyncArtistImportItem::getDeduplicationPredicates(ML3ProtoSyncArtistImportItem *this)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t j;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type size;
  char v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  std::string::size_type v33;
  char v34;
  std::string::size_type v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v49;
  id obj;
  __CFString *obja;
  __CFString *v52;
  ML3ProtoSyncArtistImportItem *v53;
  id v54;
  _QWORD v55[2];
  std::string __p;
  std::string __str;
  std::string v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _QWORD v67[2];
  _QWORD v68[3];
  _QWORD v69[3];
  _BYTE v70[128];
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v54 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v52 = CFSTR("sync_id");
  v53 = this;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2 || (v2 = (void *)*((_QWORD *)this + 17)) != 0 || (v2 = (void *)*((_QWORD *)this + 16)) != 0)
  {
    objc_msgSend(v2, "libraryIdentifiers");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v49 = 0;
  }
  if (!*((_BYTE *)this + 64))
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    obj = v49;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v70, 16);
    if (!v8)
      goto LABEL_28;
    v9 = *(_QWORD *)v60;
    while (1)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v60 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * i);
        objc_msgSend(v11, "libraryName");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v11, "libraryId");
        if (v12)
        {
          objc_msgSend(*((id *)v53 + 9), "libraryUID");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v12, "isEqualToString:", v14);

          if (v15)
          {
            +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("ROWID"), v13);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v54, "addObject:", v16);
          }
          else
          {
            objc_msgSend(*((id *)v53 + 9), "syncLibraryID");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            v22 = objc_msgSend(v12, "isEqualToString:", v21);

            if (!v22)
              goto LABEL_26;
            +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", v52, v13);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v54, "addObject:", v16);
          }
        }
        else
        {
          v17 = (void *)MEMORY[0x1E0C99D20];
          +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", v52, v13);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("ROWID"), v13);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "arrayWithObjects:", v16, v18, 0);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v54, "addObject:", v20);

        }
LABEL_26:

      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v70, 16);
      if (!v8)
        goto LABEL_28;
    }
  }
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v3 = v49;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v63, v71, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v64;
    do
    {
      for (j = 0; j != v4; ++j)
      {
        if (*(_QWORD *)v64 != v5)
          objc_enumerationMutation(v3);
        +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("ROWID"), objc_msgSend(*(id *)(*((_QWORD *)&v63 + 1) + 8 * j), "libraryId"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "addObject:", v7);

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v63, v71, 16);
    }
    while (v4);
  }
LABEL_28:

  if (!*((_BYTE *)v53 + 64))
  {
    obja = CFSTR("store_id");
    v23 = CFSTR("grouping_key");
    if (*((_QWORD *)v53 + 18) == 2)
      v24 = 318767111;
    else
      v24 = 301989893;
    v25 = (*(uint64_t (**)(ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)v53 + 32))(v53, v24);
    memset(&v58, 0, sizeof(v58));
    v26 = *((_QWORD *)v53 + 18);
    if (v26 == 7)
    {
      (*(void (**)(_QWORD *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)v53 + 24))(v55, v53, 301989899);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        v55[0] = off_1E5B4D010;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        __str = __p;
      }
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __str.__r_.__value_.__l.__size_;
      if (size)
      {
        ML3CPPBridgeString((const UInt8 *)&__str, 1);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", CFSTR("cloud_universal_library_id"), v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "addObject:", v30);

        v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      if (v28 < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v26 = *((_QWORD *)v53 + 18);
    }
    if (v26 == 2)
    {
      (*(void (**)(_QWORD *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)v53 + 24))(v55, v53, 318767105);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        __str = __p;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      v58 = __str;
      v55[0] = off_1E5B4D010;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v31 = (*(uint64_t (**)(ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)v53 + 32))(v53, 16777217);
      if ((MLMediaTypeByStandardizingMediaType(v31) & 8) != 0)
        goto LABEL_72;
      (*(void (**)(_QWORD *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)v53 + 24))(v55, v53, 318767107);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        v55[0] = off_1E5B4D010;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        __str = __p;
      }
      v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = __str.__r_.__value_.__l.__size_;
      if (v33)
      {
        std::string::operator=(&v58, &__str);
        v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      if ((v34 & 0x80) == 0)
        goto LABEL_72;
      v32 = (void *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr, ML3ProtoSyncArtistImportItem *, _QWORD))(*(_QWORD *)v53 + 152))(v55, v53, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        __str = __p;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      v58 = __str;
      v55[0] = off_1E5B4D010;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_72;
      v32 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
LABEL_72:
    v35 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = v58.__r_.__value_.__l.__size_;
    if (v35)
    {
      v36 = (void *)*((_QWORD *)v53 + 9);
      ML3CPPBridgeString((const UInt8 *)&v58, 1);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "groupingKeyForString:", v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v38 = 0;
    }
    if (v25)
    {
      if (objc_msgSend(v38, "length"))
      {
        +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", obja, v25);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v69[0] = v39;
        +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", v23, v38);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v69[1] = v40;
        +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", v52, 0);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v69[2] = v41;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v69, 3);
      }
      else
      {
        +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", obja, v25);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v68[0] = v39;
        +[ML3ComparisonPredicate predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:](ML3ComparisonPredicate, "predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:", v23, &stru_1E5B66908, 1, 1, &stru_1E5B66908);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        v68[1] = v40;
        +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", v52, 0);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v68[2] = v41;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v68, 3);
      }
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v42);
      v43 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v54, "addObject:", v43);
    }
    if (objc_msgSend(v38, "length"))
    {
      +[ML3ComparisonPredicate predicateWithProperty:equalToValue:](ML3ComparisonPredicate, "predicateWithProperty:equalToValue:", v23, v38);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v67[0] = v44;
      +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", v52, 0);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v67[1] = v45;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v67, 2);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v54, "addObject:", v47);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);

  }
  return v54;
}

void sub_1AC26E520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, _Unwind_Exception *exception_object, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;

  if (a23 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);

  _Unwind_Resume(a1);
}

void ML3ProtoSyncArtistImportItem::getEffectiveAlbumArtist(ML3ProtoSyncArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  std::string::value_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string::value_type v13;
  std::string *v14;
  std::string v15;
  std::string v16;
  std::string v17;
  __int128 v18;
  std::string v19;
  std::string __str;

  v6 = (*(uint64_t (**)(ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 318767105);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    __str = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 318767107);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 301989889);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v19;
  }
  v7 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v18, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    v18 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[0] = v16.__r_.__value_.__r.__words[2];
  }
  if (!v6)
  {
    v8 = v19.__r_.__value_.__s.__data_[7];
    v9 = v19.__r_.__value_.__s.__data_[7];
    v10 = *((_QWORD *)&v18 + 1);
    if (v19.__r_.__value_.__s.__data_[7] >= 0)
      v11 = v19.__r_.__value_.__s.__data_[7];
    else
      v11 = *((_QWORD *)&v18 + 1);
    if (!v11)
    {
      std::string::operator=((std::string *)&v18, &__str);
      v8 = v19.__r_.__value_.__s.__data_[7];
      v10 = *((_QWORD *)&v18 + 1);
      v9 = v19.__r_.__value_.__s.__data_[7];
    }
    if (v9 < 0)
      v8 = v10;
    if (!v8)
      std::string::operator=((std::string *)&v18, &v17);
  }
  v12 = v19.__r_.__value_.__s.__data_[7];
  v13 = v19.__r_.__value_.__s.__data_[7];
  if (v19.__r_.__value_.__s.__data_[7] < 0)
    v12 = *((_QWORD *)&v18 + 1);
  if (v12 && a2)
  {
    ML3CPPSanitizeString(&v15, (unint64_t)&v18);
    if (v19.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v18);
    v19.__r_.__value_.__r.__words[0] = v15.__r_.__value_.__r.__words[2];
    v18 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v14 = (std::string *)(a3 + 16);
  if ((v13 & 0x80) == 0)
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v18;
    *(_QWORD *)(a3 + 32) = v19.__r_.__value_.__r.__words[0];
    if ((v7 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
  std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
  if ((v19.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
  operator delete((void *)v18);
  if (v7 < 0)
LABEL_38:
    operator delete(v16.__r_.__value_.__l.__data_);
LABEL_39:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1AC26EA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v31 - 57) < 0)
    operator delete(*(void **)(v31 - 80));
  _Unwind_Resume(a1);
}

void ML3ProtoSyncArtistImportItem::getEffectiveSortAlbumArtist(ML3ProtoSyncArtistImportItem *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string v22;
  std::string v23;

  v6 = (*(uint64_t (**)(ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 301989889);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v23 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 301989890);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v20 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 318767105);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 318767106);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = v22;
  }
  v7 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v17, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    v17 = v20;
  v8 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  size = v17.__r_.__value_.__l.__size_;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = v17.__r_.__value_.__l.__size_;
  if (v8)
  {
    if (v6)
      goto LABEL_56;
    goto LABEL_28;
  }
  ML3CPPSortableString((std::string *)&v21, (const UInt8 *)&v23);
  if (v9 < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
  LOBYTE(v9) = v22.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v21 + 1);
  if (!v6)
  {
LABEL_28:
    if ((v9 & 0x80u) == 0)
      v11 = v9;
    else
      v11 = size;
    if (!v11)
    {
      v12 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = v23.__r_.__value_.__l.__size_;
      if (!v12)
      {
        (*(void (**)(__int128 *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 168))(&v21, this, a2);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
        else
          v16 = v22;
        if ((v9 & 0x80) != 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        v17 = v16;
        *(_QWORD *)&v21 = off_1E5B4D010;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        v13 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        v9 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
        size = v17.__r_.__value_.__l.__size_;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v13 = v17.__r_.__value_.__l.__size_;
        if (!v13)
        {
          v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v14 = v19.__r_.__value_.__l.__size_;
          if (!v14)
          {
            (*(void (**)(__int128 *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 176))(&v21, this, a2);
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
            else
              v16 = v22;
            if (v9 < 0)
              operator delete(v17.__r_.__value_.__l.__data_);
            v17 = v16;
            *(_QWORD *)&v21 = off_1E5B4D010;
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v22.__r_.__value_.__l.__data_);
            LOBYTE(v9) = *((_BYTE *)&v17.__r_.__value_.__s + 23);
            size = v17.__r_.__value_.__l.__size_;
          }
        }
      }
    }
  }
LABEL_56:
  if ((v9 & 0x80u) == 0)
    size = v9;
  if (size && (_DWORD)a2)
  {
    ML3CPPSanitizeString((std::string *)&v21, (unint64_t)&v17);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
    LOBYTE(v9) = v22.__r_.__value_.__s.__data_[7];
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v15 = (std::string *)(a3 + 16);
  if ((v9 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(v15, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)&v17.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_71;
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
LABEL_71:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1AC26EF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a47 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a25 < 0)
    operator delete(a20);
  if (a32 < 0)
    operator delete(a27);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  _Unwind_Resume(exception_object);
}

void ML3ProtoSyncArtistImportItem::getEffectiveSortArtist(ML3ProtoSyncArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string::value_type v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  std::string v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  (*(void (**)(__int128 *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v12, this, 318767105);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    *(_QWORD *)&v12 = off_1E5B4D010;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = v13;
  }
  (*(void (**)(__int128 *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v12, this, 318767106);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    *(_QWORD *)&v12 = off_1E5B4D010;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = v13;
  }
  std::string::operator=(&v15, &v11);
  v6 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  size = v15.__r_.__value_.__l.__size_;
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    v9 = v15.__r_.__value_.__l.__size_;
  if (!v9)
  {
    ML3CPPSortableString((std::string *)&v12, (const UInt8 *)&v14);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    v15.__r_.__value_.__r.__words[2] = v13.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
    v6 = v13.__r_.__value_.__s.__data_[7];
    size = *((_QWORD *)&v12 + 1);
    v7 = v13.__r_.__value_.__s.__data_[7];
  }
  if (v7 < 0)
    v6 = size;
  if (v6 && a2)
  {
    ML3CPPSanitizeString((std::string *)&v12, (unint64_t)&v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    v15.__r_.__value_.__r.__words[2] = v13.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
    v7 = v13.__r_.__value_.__s.__data_[7];
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v10 = (std::string *)(a3 + 16);
  if (v7 < 0)
  {
    std::string::__init_copy_ctor_external(v10, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1AC26F248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

void ML3ProtoSyncArtistImportItem::getEffectiveSortSeriesName(ML3ProtoSyncArtistImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  std::string::size_type v7;
  int v8;
  std::string::size_type size;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  __int128 v14;
  std::string v15;
  std::string v16;

  (*(void (**)(__int128 *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 318767107);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v15;
  }
  (*(void (**)(__int128 *__return_ptr, ML3ProtoSyncArtistImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 318767108);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = v15;
  }
  v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  v7 = v15.__r_.__value_.__s.__data_[7];
  v8 = v15.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0)
    v10 = v15.__r_.__value_.__s.__data_[7];
  else
    v10 = *((_QWORD *)&v14 + 1);
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0)
    v7 = size;
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (unint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(_QWORD *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0)
LABEL_31:
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1AC26F4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v27;
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (v27 < 0)
    operator delete(a13);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t ML3ProtoSyncArtistImportItem::sortPropertyKeyForPropertyKey(ML3ProtoSyncArtistImportItem *this, int a2)
{
  int v2;
  unsigned int v3;

  if (a2 == 318767105)
    v2 = 318767106;
  else
    v2 = 0;
  if (a2 == 318767107)
    v3 = 318767108;
  else
    v3 = v2;
  if (a2 == 301989889)
    return 301989890;
  else
    return v3;
}

uint64_t ML3ProtoSyncArtistImportItem::propertyKeyForSortPropertyKey(ML3ProtoSyncArtistImportItem *this, int a2)
{
  int v2;
  unsigned int v3;

  if (a2 == 318767106)
    v2 = 318767105;
  else
    v2 = 0;
  if (a2 == 318767108)
    v3 = 318767107;
  else
    v3 = v2;
  if (a2 == 301989890)
    return 301989889;
  else
    return v3;
}

void ML3ProtoSyncAlbumArtistDeleteImportItem::~ML3ProtoSyncAlbumArtistDeleteImportItem(id *this)
{
  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(this);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ProtoSyncAlbumArtistDeleteImportItem::getDescription(ML3ProtoSyncAlbumArtistDeleteImportItem *this)
{
  _QWORD *v1;
  _QWORD v3[11];
  char v4;
  uint64_t v5;
  char v6;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"<ML3ProtoSyncAlbumArtistDeleteImportItem ", 41);
  *(_DWORD *)((char *)&v3[1] + *(_QWORD *)(v3[0] - 24)) = *(_DWORD *)((_BYTE *)&v3[1] + *(_QWORD *)(v3[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (_QWORD *)std::ostream::operator<<();
  v6 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v6, 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v5);
}

void sub_1AC26F78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id ML3ProtoSyncAlbumArtistDeleteImportItem::getDeduplicationPredicates(id *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  id obj;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v19 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (!*((_BYTE *)this + 64))
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    objc_msgSend(this[10], "libraryIdentifiers");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (!v2)
      goto LABEL_16;
    v3 = *(_QWORD *)v21;
    while (1)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v21 != v3)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        objc_msgSend(v5, "libraryName");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v5, "libraryId");
        if (v6)
        {
          objc_msgSend(this[9], "libraryUID");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = objc_msgSend(v6, "isEqualToString:", v8);

          if (v9)
          {
            +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("album_artist_pid"), v7);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "addObject:", v10);
          }
          else
          {
            objc_msgSend(this[9], "syncLibraryID");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            v16 = objc_msgSend(v6, "isEqualToString:", v15);

            if (!v16)
              goto LABEL_14;
            +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), v7);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "addObject:", v10);
          }
        }
        else
        {
          v11 = (void *)MEMORY[0x1E0C99D20];
          +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("sync_id"), v7);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          +[ML3ComparisonPredicate predicateWithProperty:equalToInt64:](ML3ComparisonPredicate, "predicateWithProperty:equalToInt64:", CFSTR("ROWID"), v7);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "arrayWithObjects:", v10, v12, 0);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          +[ML3CompoundPredicate predicateMatchingPredicates:](ML3AllCompoundPredicate, "predicateMatchingPredicates:", v13);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "addObject:", v14);

        }
LABEL_14:

      }
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (!v2)
      {
LABEL_16:

        return v19;
      }
    }
  }
  return v19;
}

void sub_1AC26FA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void ML3ProtoSyncImportItem::ML3ProtoSyncImportItem(ML3ProtoSyncImportItem *this, ML3MusicLibrary *a2, MIPMultiverseIdentifier *a3, char a4)
{
  ML3MusicLibrary *v7;
  MIPMultiverseIdentifier *v8;

  v7 = a2;
  v8 = a3;
  *((_WORD *)this + 8) = 256;
  *((_BYTE *)this + 18) = 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *(_QWORD *)this = &off_1E5B4DA58;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 64) = a4;
  *((_QWORD *)this + 9) = v7;
  *((_QWORD *)this + 10) = v8;
}

void ML3ProtoSyncTrackImportItem::ML3ProtoSyncTrackImportItem(ML3ProtoSyncTrackImportItem *this, ML3MusicLibrary *a2, MIPMultiverseIdentifier *a3, MIPMediaItem *a4, char a5)
{
  MIPMediaItem *v9;
  MIPMediaItem *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;

  v9 = a4;
  ML3ProtoSyncImportItem::ML3ProtoSyncImportItem(this, a2, a3, a5);
  *(_QWORD *)this = &off_1E5B4EB00;
  v10 = v9;
  *((_QWORD *)this + 11) = v10;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  -[MIPMediaItem song](v10, "song");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v11;

  objc_msgSend(*((id *)this + 11), "movie");
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v13;

  objc_msgSend(*((id *)this + 11), "tvShow");
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v15;

  objc_msgSend(*((id *)this + 11), "podcast");
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v17;

  objc_msgSend(*((id *)this + 11), "audiobook");
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = (void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v19;

  v21 = (void *)*((_QWORD *)this + 12);
  if (v21 || (v21 = (void *)*((_QWORD *)this + 16)) != 0)
  {
    objc_msgSend(v21, "album");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v22 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v21;

  v23 = (void *)*((_QWORD *)this + 12);
  if (v23
    || (v23 = (void *)*((_QWORD *)this + 13)) != 0
    || (v23 = (void *)*((_QWORD *)this + 14)) != 0
    || (v23 = (void *)*((_QWORD *)this + 15)) != 0
    || (v23 = (void *)*((_QWORD *)this + 16)) != 0)
  {
    objc_msgSend(v23, "artist");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v24 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v23;

  v25 = (void *)*((_QWORD *)this + 12);
  if (v25 || (v25 = (void *)*((_QWORD *)this + 16)) != 0)
  {
    objc_msgSend(v25, "composer");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v26 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v25;

  v27 = (void *)*((_QWORD *)this + 12);
  if (v27 || (v27 = (void *)*((_QWORD *)this + 16)) != 0)
  {
    objc_msgSend(v27, "playbackInfo");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v28 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v27;

  v29 = (void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;

  v30 = (void *)*((_QWORD *)this + 12);
  if (v30
    || (v30 = (void *)*((_QWORD *)this + 16)) != 0
    || (v30 = (void *)*((_QWORD *)this + 13)) != 0
    || (v30 = (void *)*((_QWORD *)this + 14)) != 0)
  {
    objc_msgSend(v30, "genre");
    v31 = objc_claimAutoreleasedReturnValue();
    v32 = (void *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v31;

  }
}

void sub_1AC26FD90(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(v1);
  _Unwind_Resume(a1);
}

void ML3ProtoSyncContainerImportItem::ML3ProtoSyncContainerImportItem(ML3ProtoSyncContainerImportItem *this, ML3MusicLibrary *a2, MIPMultiverseIdentifier *a3, MIPPlaylist *a4, char a5)
{
  MIPPlaylist *v9;
  MIPPlaylist *v10;
  uint64_t v11;
  void *v12;

  v9 = a4;
  ML3ProtoSyncImportItem::ML3ProtoSyncImportItem(this, a2, a3, a5);
  *(_QWORD *)this = &off_1E5B4F9E0;
  v10 = v9;
  *((_QWORD *)this + 11) = v10;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 1) = objc_msgSend(*((id *)this + 9), "syncIdFromMultiverseId:", *((_QWORD *)this + 10));
  objc_msgSend(*((id *)this + 11), "smartPlaylistInfo");
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v11;

}

void sub_1AC26FEB4(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(v1);
  _Unwind_Resume(a1);
}

void ML3ProtoSyncAlbumImportItem::ML3ProtoSyncAlbumImportItem(ML3ProtoSyncAlbumImportItem *this, ML3MusicLibrary *a2, MIPMultiverseIdentifier *a3, MIPMediaItem *a4, char a5)
{
  MIPMediaItem *v9;
  MIPMediaItem *v10;
  id *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;

  v9 = a4;
  ML3ProtoSyncImportItem::ML3ProtoSyncImportItem(this, a2, a3, a5);
  *(_QWORD *)this = &off_1E5B4EA18;
  v10 = v9;
  *((_OWORD *)this + 6) = 0u;
  v11 = (id *)((char *)this + 96);
  *((_QWORD *)this + 11) = v10;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 16) = 0;
  -[MIPMediaItem song](v10, "song");
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v12;

  objc_msgSend(*((id *)this + 11), "tvShow");
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v14;

  objc_msgSend(*((id *)this + 11), "podcast");
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = (void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v16;

  v18 = (void *)*((_QWORD *)this + 12);
  if (v18)
  {
    objc_msgSend(v18, "album");
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = (void *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v19;
  }
  else
  {
    objc_msgSend(*((id *)this + 11), "audiobook");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v20)
    {
      objc_msgSend(*((id *)this + 11), "audiobook");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "album");
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = (void *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v22;

    }
    else
    {
      v21 = (void *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = 0;
    }

  }
  if (*v11)
  {
    objc_msgSend(*v11, "artist");
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = (void *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v24;
  }
  else
  {
    objc_msgSend(*((id *)this + 11), "movie");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (v25)
    {
      objc_msgSend(*((id *)this + 11), "movie");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "artist");
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = (void *)*((_QWORD *)this + 16);
      *((_QWORD *)this + 16) = v27;

    }
    else
    {
      v29 = (void *)*((_QWORD *)this + 13);
      if (v29 || (v29 = (void *)*((_QWORD *)this + 14)) != 0)
      {
        objc_msgSend(v29, "artist");
        v30 = objc_claimAutoreleasedReturnValue();
        v26 = (void *)*((_QWORD *)this + 16);
        *((_QWORD *)this + 16) = v30;
      }
      else
      {
        objc_msgSend(*((id *)this + 11), "audiobook");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        if (v26)
        {
          objc_msgSend(*((id *)this + 11), "audiobook");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "artist");
          v32 = objc_claimAutoreleasedReturnValue();
          v33 = (void *)*((_QWORD *)this + 16);
          *((_QWORD *)this + 16) = v32;

        }
        else
        {
          v31 = (void *)*((_QWORD *)this + 16);
          *((_QWORD *)this + 16) = 0;
        }

      }
    }

  }
}

void sub_1AC2700E8(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(v1);
  _Unwind_Resume(a1);
}

uint64_t ML3ProtoSyncArtistImportItem::ML3ProtoSyncArtistImportItem(uint64_t a1, ML3MusicLibrary *a2, MIPMultiverseIdentifier *a3, void *a4, uint64_t a5, char a6)
{
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v36;
  uint64_t v37;
  void *v38;

  v11 = a4;
  ML3ProtoSyncImportItem::ML3ProtoSyncImportItem((ML3ProtoSyncImportItem *)a1, a2, a3, a6);
  *(_QWORD *)a1 = &off_1E5B4EF98;
  v12 = v11;
  *(_QWORD *)(a1 + 88) = v12;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = a5;
  objc_msgSend(v12, "song");
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v13;

  objc_msgSend(*(id *)(a1 + 88), "tvShow");
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v15;

  objc_msgSend(*(id *)(a1 + 88), "podcast");
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v17;

  v19 = *(void **)(a1 + 96);
  if (v19)
  {
    objc_msgSend(v19, "album");
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v20;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 88), "audiobook");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      objc_msgSend(*(id *)(a1 + 88), "audiobook");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "album");
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = *(void **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v23;

    }
    else
    {
      v22 = *(void **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = 0;
    }

  }
  objc_msgSend(*(id *)(a1 + 120), "artist");
  v25 = objc_claimAutoreleasedReturnValue();
  v26 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v25;

  v27 = *(void **)(a1 + 96);
  if (v27)
  {
    objc_msgSend(v27, "artist");
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = *(void **)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v28;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 88), "movie");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    if (v29)
    {
      objc_msgSend(*(id *)(a1 + 88), "movie");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "artist");
      v31 = objc_claimAutoreleasedReturnValue();
      v32 = *(void **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v31;

    }
    else
    {
      v33 = *(void **)(a1 + 104);
      if (v33 || (v33 = *(void **)(a1 + 112)) != 0)
      {
        objc_msgSend(v33, "artist");
        v34 = objc_claimAutoreleasedReturnValue();
        v30 = *(void **)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v34;
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 88), "audiobook");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        if (v30)
        {
          objc_msgSend(*(id *)(a1 + 88), "audiobook");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "artist");
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = *(void **)(a1 + 128);
          *(_QWORD *)(a1 + 128) = v37;

        }
        else
        {
          v36 = *(void **)(a1 + 128);
          *(_QWORD *)(a1 + 128) = 0;
        }

      }
    }

  }
  return a1;
}

void sub_1AC27039C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  ML3ProtoSyncImportItem::~ML3ProtoSyncImportItem(v1);
  _Unwind_Resume(a1);
}

void ML3ProtoSyncArtistImportItem::ML3ProtoSyncArtistImportItem(ML3ProtoSyncArtistImportItem *this, ML3MusicLibrary *a2, MIPMultiverseIdentifier *a3, MIPArtist *a4, char a5)
{
  MIPArtist *v9;

  v9 = a4;
  ML3ProtoSyncImportItem::ML3ProtoSyncImportItem(this, a2, a3, a5);
  *(_QWORD *)this = &off_1E5B4EF98;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = v9;
  *((_QWORD *)this + 18) = 7;
}

void sub_1AC2706C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1AC2708C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1AC270B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1AC270C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC270CC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC270D58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC270DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1AC270EA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AC270F50(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1AC271184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC2712C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1AC271378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1AC2715A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

void sub_1AC271AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,void *a38)
{
  void *v38;

  _Unwind_Resume(a1);
}

void sub_1AC271D44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1AC271E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC271EA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC271EE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AC272090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1AC272234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC27239C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1AC2724CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{

  _Unwind_Resume(a1);
}

void sub_1AC27258C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4016(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4017(uint64_t a1)
{

}

void sub_1AC27262C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1AC272890(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_104c75_ZTSNSt3__113unordered_setIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEEE152c75_ZTSNSt3__113unordered_setIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEEE(uint64_t a1, uint64_t a2)
{
  std::unordered_set<int>::unordered_set(a1 + 104, a2 + 104);
  return std::unordered_set<int>::unordered_set(a1 + 152, a2 + 152);
}

void sub_1AC2728E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_104c75_ZTSNSt3__113unordered_setIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEEE152c75_ZTSNSt3__113unordered_setIiNS_4hashIiEENS_8equal_toIiEENS_9allocatorIiEEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 104;
  std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 152);
  return std::__hash_table<unsigned long long,echo_hash_shift<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void sub_1AC272B0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC272C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AC272E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1AC272FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC2730C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC273180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1AC273244(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1AC273308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1AC2733C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC273468(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC273510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1AC273D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4165(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4166(uint64_t a1)
{

}

void ML3ImportItem::~ML3ImportItem(ML3ImportItem *this)
{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5B4CF28;
  std::__hash_table<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,ML3ImportValue<std::string>>>>::~__hash_table((uint64_t)this + 24);
  JUMPOUT(0x1AF43C744);
}

uint64_t ML3ImportItem::isValid(ML3ImportItem *this)
{
  return 0;
}

void ML3ImportItem::getStringValue(ML3ImportItem *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = off_1E5B4D010;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
}

uint64_t ML3ImportItem::getIntegerValue(ML3ImportItem *this)
{
  return 0;
}

float ML3ImportItem::getFloatValue(ML3ImportItem *this)
{
  return 0.0;
}

void ML3ImportItem::getDataValue(ML3ImportItem *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
}

uint64_t ML3ImportItem::hasValue(ML3ImportItem *this)
{
  return 0;
}

void ML3ImportItem::getPlaylistTrackPersonIdentifiers(ML3ImportItem *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void ML3ImportItem::getImportItemValue(ML3ImportItem *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
}

void ML3ImportItem::getImportItemArrayValue(ML3ImportItem *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t ML3ImportItem::getDescription(ML3ImportItem *this)
{
  _QWORD *v1;
  _QWORD v3[11];
  char v4;
  uint64_t v5;
  char v6;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"<ML3ImportItem ", 15);
  *(_DWORD *)((char *)&v3[1] + *(_QWORD *)(v3[0] - 24)) = *(_DWORD *)((_BYTE *)&v3[1] + *(_QWORD *)(v3[0] - 24)) & 0xFFFFFFB5 | 8;
  v1 = (_QWORD *)std::ostream::operator<<();
  v6 = 62;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v6, 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v5);
}

void sub_1AC274310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ML3ImportItem::getDetailedDescription(ML3ImportItem *this)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*(void (**)(void **__return_ptr, ML3ImportItem *))(*(_QWORD *)this + 88))(__p, this);
  if ((v7 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v3 = v7;
  else
    v3 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)":\n", 2);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  v4 = 1;
  do
  {
    (*(void (**)(ML3ImportItem *, uint64_t, _QWORD *))(*(_QWORD *)this + 208))(this, v4, v8);
    v4 = (v4 + 1);
  }
  while ((_DWORD)v4 != 25);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF43C6FC](&v10);
}

void sub_1AC274450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ML3ImportItem::getSourceIdentifiers(ML3ImportItem *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t ML3ImportItem::getDeduplicationPredicates(ML3ImportItem *this)
{
  return MEMORY[0x1E0C9AA60];
}

uint64_t ML3ImportItem::getDeduplicationOrderingTerms(ML3ImportItem *this)
{
  return 0;
}

uint64_t ML3ImportItem::canInsertIntoPurchasedPlaylist(ML3ImportItem *this)
{
  return 0;
}

uint64_t ML3ImportItem::onlyRequiresItemStoreDataSource(ML3ImportItem *this)
{
  return 0;
}

void ML3ImportItem::getSortStringValue(ML3ImportItem *this@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::string *v8;
  uint64_t v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string __p;
  std::string __str;
  char v14;

  *(_QWORD *)a4 = off_1E5B4D010;
  *(_BYTE *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v8 = (std::string *)(a4 + 16);
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  v9 = (*(uint64_t (**)(ML3ImportItem *))(*(_QWORD *)this + 192))(this);
  if ((_DWORD)v9)
  {
    if (a3)
      ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&__str, (uint64_t)this, v9);
    else
      (*(void (**)(std::string *__return_ptr, ML3ImportItem *, uint64_t))(*(_QWORD *)this + 24))(&__str, this, v9);
    *(_BYTE *)(a4 + 8) = __str.__r_.__value_.__s.__data_[8];
    std::string::operator=(v8, (const std::string *)&__str.__r_.__value_.__r.__words[2]);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5B4D010;
    if (v14 < 0)
      operator delete((void *)__str.__r_.__value_.__r.__words[2]);
  }
  if (*(_BYTE *)(a4 + 8))
  {
    if (*(char *)(a4 + 39) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a4 + 16), *(_QWORD *)(a4 + 24));
    else
      __str = *v8;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (size)
        return;
    }
    else if (size)
    {
      return;
    }
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&__str, (uint64_t)this, a2);
  *(_BYTE *)(a4 + 8) = __str.__r_.__value_.__s.__data_[8];
  std::string::operator=(v8, (const std::string *)&__str.__r_.__value_.__r.__words[2]);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E5B4D010;
  if (v14 < 0)
    operator delete((void *)__str.__r_.__value_.__r.__words[2]);
  if (*(char *)(a4 + 39) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a4 + 16), *(_QWORD *)(a4 + 24));
  else
    __str = *v8;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v11 = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v11)
      return;
  }
  else if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
  {
    return;
  }
  if (*(char *)(a4 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a4 + 16), *(_QWORD *)(a4 + 24));
  else
    __p = *v8;
  ML3CPPStripInsignificantCharacters(&__str, (const UInt8 *)&__p);
  std::string::operator=(v8, &__str);
  *(_BYTE *)(a4 + 8) = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AC2746D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  void **v24;
  uint64_t v25;

  *(_QWORD *)v23 = v25;
  if (*(char *)(v23 + 39) < 0)
    operator delete(*v24);
  _Unwind_Resume(exception_object);
}

void ML3ImportItem::getEffectiveAlbumArtist(ML3ImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  std::string::value_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string::value_type v13;
  std::string *v14;
  std::string v15;
  std::string v16;
  std::string __str;
  __int128 v18;
  std::string v19;
  std::string v20;

  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 167772163);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v20 = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 167772161);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    __str = v19;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v18, (uint64_t)this, 167772162);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    *(_QWORD *)&v18 = off_1E5B4D010;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v19;
  }
  v6 = (*(uint64_t (**)(ML3ImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777246);
  v7 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v18, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else
  {
    v18 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[0] = v20.__r_.__value_.__r.__words[2];
  }
  if (!v6)
  {
    v8 = v19.__r_.__value_.__s.__data_[7];
    v9 = v19.__r_.__value_.__s.__data_[7];
    v10 = *((_QWORD *)&v18 + 1);
    if (v19.__r_.__value_.__s.__data_[7] >= 0)
      v11 = v19.__r_.__value_.__s.__data_[7];
    else
      v11 = *((_QWORD *)&v18 + 1);
    if (!v11)
    {
      std::string::operator=((std::string *)&v18, &__str);
      v8 = v19.__r_.__value_.__s.__data_[7];
      v10 = *((_QWORD *)&v18 + 1);
      v9 = v19.__r_.__value_.__s.__data_[7];
    }
    if (v9 < 0)
      v8 = v10;
    if (!v8)
      std::string::operator=((std::string *)&v18, &v16);
  }
  v12 = v19.__r_.__value_.__s.__data_[7];
  v13 = v19.__r_.__value_.__s.__data_[7];
  if (v19.__r_.__value_.__s.__data_[7] < 0)
    v12 = *((_QWORD *)&v18 + 1);
  if (v12 && a2)
  {
    ML3CPPSanitizeString(&v15, (unint64_t)&v18);
    if (v19.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v18);
    v19.__r_.__value_.__r.__words[0] = v15.__r_.__value_.__r.__words[2];
    v18 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v14 = (std::string *)(a3 + 16);
  if (v13 < 0)
  {
    std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
    if (v19.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v18);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v18;
    *(_QWORD *)(a3 + 32) = v19.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
      return;
LABEL_43:
    operator delete(v20.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if (v7 < 0)
    goto LABEL_43;
}

void sub_1AC274A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (*(char *)(v34 - 57) < 0)
    operator delete(*(void **)(v34 - 80));
  _Unwind_Resume(exception_object);
}

void ML3ImportItem::getEffectiveSortAlbumArtist(ML3ImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  std::string::size_type v8;
  std::string::value_type v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string v22;
  std::string v23;

  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 167772163);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v23 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 167772161);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v20 = v22;
  }
  v6 = (*(uint64_t (**)(ML3ImportItem *, uint64_t))(*(_QWORD *)this + 32))(this, 16777246);
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 167772169);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = v22;
  }
  ML3ImportItem::getSanitizedStringValue((ML3ImportItem *)&v21, (uint64_t)this, 167772167);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    *(_QWORD *)&v21 = off_1E5B4D010;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = v22;
  }
  v7 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v17, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  else
    v17 = v19;
  v8 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  v9 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  size = v17.__r_.__value_.__l.__size_;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = v17.__r_.__value_.__l.__size_;
  if (v8)
  {
    if (v6)
      goto LABEL_56;
    goto LABEL_28;
  }
  ML3CPPSortableString((std::string *)&v21, (const UInt8 *)&v23);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
  v9 = v22.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v21 + 1);
  if (!v6)
  {
LABEL_28:
    if (v9 >= 0)
      v11 = v9;
    else
      v11 = size;
    if (!v11)
    {
      v12 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = v23.__r_.__value_.__l.__size_;
      if (!v12)
      {
        (*(void (**)(__int128 *__return_ptr, ML3ImportItem *, _QWORD))(*(_QWORD *)this + 168))(&v21, this, 0);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
        else
          v16 = v22;
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        v17 = v16;
        *(_QWORD *)&v21 = off_1E5B4D010;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        v13 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        v9 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
        size = v17.__r_.__value_.__l.__size_;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v13 = v17.__r_.__value_.__l.__size_;
        if (!v13)
        {
          v14 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v14 = v20.__r_.__value_.__l.__size_;
          if (!v14)
          {
            (*(void (**)(__int128 *__return_ptr, ML3ImportItem *, _QWORD))(*(_QWORD *)this + 176))(&v21, this, 0);
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v16, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
            else
              v16 = v22;
            if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v17.__r_.__value_.__l.__data_);
            v17 = v16;
            *(_QWORD *)&v21 = off_1E5B4D010;
            if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v22.__r_.__value_.__l.__data_);
            v9 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
            size = v17.__r_.__value_.__l.__size_;
          }
        }
      }
    }
  }
LABEL_56:
  if (v9 >= 0)
    size = v9;
  if (size && a2)
  {
    ML3CPPSanitizeString((std::string *)&v21, (unint64_t)&v17);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    v17.__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[0];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v21;
    v9 = v22.__r_.__value_.__s.__data_[7];
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v15 = (std::string *)(a3 + 16);
  if (v9 < 0)
  {
    std::string::__init_copy_ctor_external(v15, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)&v17.__r_.__value_.__l + 2);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_69;
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_69;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
LABEL_69:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1AC274F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  char v40;
  uint64_t v41;

  *(_QWORD *)(v41 - 136) = v39;
  if (*(char *)(v41 - 97) < 0)
    operator delete(*(void **)(v41 - 120));
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (v40 < 0)
    operator delete(a27);
  if (a39 < 0)
    operator delete(a34);
  if (*(char *)(v41 - 73) < 0)
    operator delete(*(void **)(v41 - 96));
  _Unwind_Resume(exception_object);
}

void ML3ImportItem::getEffectiveSortArtist(ML3ImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  std::string::size_type v7;
  int v8;
  std::string::size_type size;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  __int128 v14;
  std::string v15;
  std::string v16;

  (*(void (**)(__int128 *__return_ptr, ML3ImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 167772161);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v15;
  }
  (*(void (**)(__int128 *__return_ptr, ML3ImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 167772167);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = v15;
  }
  v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  v7 = v15.__r_.__value_.__s.__data_[7];
  v8 = v15.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0)
    v10 = v15.__r_.__value_.__s.__data_[7];
  else
    v10 = *((_QWORD *)&v14 + 1);
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0)
    v7 = size;
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (unint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(_QWORD *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0)
LABEL_31:
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1AC275258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v27;
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (v27 < 0)
    operator delete(a13);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

void ML3ImportItem::getEffectiveSortSeriesName(ML3ImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  std::string::size_type v7;
  int v8;
  std::string::size_type size;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  __int128 v14;
  std::string v15;
  std::string v16;

  (*(void (**)(__int128 *__return_ptr, ML3ImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 167772162);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v15;
  }
  (*(void (**)(__int128 *__return_ptr, ML3ImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 167772168);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = v15;
  }
  v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  v7 = v15.__r_.__value_.__s.__data_[7];
  v8 = v15.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0)
    v10 = v15.__r_.__value_.__s.__data_[7];
  else
    v10 = *((_QWORD *)&v14 + 1);
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0)
    v7 = size;
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (unint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(_QWORD *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0)
LABEL_31:
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1AC2754F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v27;
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (v27 < 0)
    operator delete(a13);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

void ML3ImportItem::getEffectiveSortAlbum(ML3ImportItem *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  std::string::size_type v7;
  int v8;
  std::string::size_type size;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  __int128 v14;
  std::string v15;
  std::string v16;

  (*(void (**)(__int128 *__return_ptr, ML3ImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 167772164);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v15;
  }
  (*(void (**)(__int128 *__return_ptr, ML3ImportItem *, uint64_t))(*(_QWORD *)this + 24))(&v14, this, 167772170);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    *(_QWORD *)&v14 = off_1E5B4D010;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = v15;
  }
  v6 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    v14 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[0] = v13.__r_.__value_.__r.__words[2];
  }
  v7 = v15.__r_.__value_.__s.__data_[7];
  v8 = v15.__r_.__value_.__s.__data_[7];
  size = *((_QWORD *)&v14 + 1);
  if (v15.__r_.__value_.__s.__data_[7] >= 0)
    v10 = v15.__r_.__value_.__s.__data_[7];
  else
    v10 = *((_QWORD *)&v14 + 1);
  if (!v10)
  {
    ML3CPPSortableString(&v12, (const UInt8 *)&v16);
    if (v8 < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    v7 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    size = v12.__r_.__value_.__l.__size_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80u) != 0)
    v7 = size;
  if (v7 && a2)
  {
    ML3CPPSanitizeString(&v12, (unint64_t)&v14);
    if (v15.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)v14);
    v15.__r_.__value_.__r.__words[0] = v12.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LOBYTE(v8) = *((_BYTE *)&v12.__r_.__value_.__s + 23);
  }
  *(_QWORD *)a3 = off_1E5B4D010;
  *(_BYTE *)(a3 + 8) = 1;
  v11 = (std::string *)(a3 + 16);
  if ((v8 & 0x80) == 0)
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    *(_QWORD *)(a3 + 32) = v15.__r_.__value_.__r.__words[0];
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
  if ((v15.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  operator delete((void *)v14);
  if (v6 < 0)
LABEL_31:
    operator delete(v13.__r_.__value_.__l.__data_);
LABEL_32:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1AC275798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v27;
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (v27 < 0)
    operator delete(a13);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t ML3ImportItem::sortPropertyKeyForPropertyKey(ML3ImportItem *this, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 167772161:
      result = 167772167;
      break;
    case 167772162:
      result = 167772168;
      break;
    case 167772163:
      result = 167772169;
      break;
    case 167772164:
      result = 167772170;
      break;
    case 167772165:
      result = 167772171;
      break;
    default:
      if (a2 == 33554433)
        result = 33554434;
      else
        result = 0;
      break;
  }
  return result;
}

uint64_t ML3ImportItem::propertyKeyForSortPropertyKey(ML3ImportItem *this, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 167772167:
      result = 167772161;
      break;
    case 167772168:
      result = 167772162;
      break;
    case 167772169:
      result = 167772163;
      break;
    case 167772170:
      result = 167772164;
      break;
    case 167772171:
      result = 167772165;
      break;
    default:
      if (a2 == 33554434)
        result = 33554433;
      else
        result = 0;
      break;
  }
  return result;
}

void ML3ImportItem::logPropertiesToStream(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t Count;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  id v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::string *v19;
  std::string::size_type size;
  uint64_t (**v21)();
  std::__shared_weak_count *v22;
  std::string __p;
  std::string v24;

  Count = ML3TrackRulesGetCount(a2);
  if (Count)
  {
    v7 = Count;
    v8 = 0;
    v9 = a3 + 1;
    do
    {
      v10 = *(unsigned int *)(ML3TrackRulesGetRule(a2, v8) + 48);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v10))
      {
        ML3TrackRulesGetPropertyName(a2, v8);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"    ", 4);
        v12 = objc_retainAutorelease(v11);
        v13 = (const char *)objc_msgSend(v12, "UTF8String");
        v14 = strlen(v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)v13, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" : ", 3);
        switch(*(_QWORD *)(ML3TrackRulesGetRule(a2, v8) + 40))
        {
          case 1:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"<null>", 6);
            break;
          case 2:
            *(_DWORD *)((char *)v9 + *(_QWORD *)(*a3 - 24)) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*a3 - 24)) & 0xFFFFFFB5 | 2;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v10);
            std::ostream::operator<<();
            break;
          case 3:
            *(_DWORD *)((char *)v9 + *(_QWORD *)(*a3 - 24)) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*a3 - 24)) & 0xFFFFFFB5 | 2;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v10);
            std::ostream::operator<<();
            break;
          case 4:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"'", 1);
            (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(&v21, a1, v10);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            else
              v24 = __p;
            if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v19 = &v24;
            else
              v19 = (std::string *)v24.__r_.__value_.__r.__words[0];
            if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
            else
              size = v24.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)v19, size);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"'", 1);
            if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v24.__r_.__value_.__l.__data_);
            v21 = off_1E5B4D010;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            break;
          case 5:
            (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(&v21, a1, v10);
            if (v21)
            {
              *(_DWORD *)((char *)v9 + *(_QWORD *)(*a3 - 24)) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*a3 - 24)) & 0xFFFFFFB5 | 2;
              v15 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" bytes : ", 9);
            }
            v16 = v22;
            if (v22)
            {
              p_shared_owners = (unint64_t *)&v22->__shared_owners_;
              do
                v18 = __ldaxr(p_shared_owners);
              while (__stlxr(v18 - 1, p_shared_owners));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
            }
            break;
          default:
            break;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"\n", 1);

      }
      ++v8;
    }
    while (v8 != v7);
  }
}

